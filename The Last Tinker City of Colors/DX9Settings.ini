[General]

; UseRenderedShaders=true is nearly always useful, because it trims the
; list of shaders seen while hunting down to just those active in the
; current scene.  Disable this only if you get crashes during hunting.
UseRenderedShaders=true

; DumpAll will generate ASM text files for every shader seen by the game.
; This is usually worth doing once, but not useful for every run.
DumpAll=true

; Less crashes when reloading shaders:
OverrideMethod = 2

; Unity games recently started using borderless window mode, so use a profile
; that supports 3D in a window. "3D-Hub Player" is pretty minimal:
; GameProfile = fxdplayer

; Mouse tends to stop working in Unity games (related to borderless window?):
InitMouse = false

; Force square surfaces (shadow maps) to be mono:
DefSquareSurfaceMode = 2

; Allow access to the view size in pixel shaders to calculate the pixel
; position on screen. This isn't usually necessary in the generic lighting fix,
; but sometimes a situation arises where it is necessary.
DefPSViewSizeConst = 210

; Fixes clipping at the edge of spot & point lights - common in Unity games.
SkipSetScissorRect = true

; Constant registers that will arrive in Vertex and Pixel Shaders, as
; c200.  The constants below will be assigned, based on the key preset.
DefVSConst1 = 200
DefPSConst1 = 200

PresetsKeysList = 0;

; Backslash sets default convergence 0.72
[KEY0]
Key = 220
Presets = 0;
[PRES0]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3f3851ec
UseByDef = true



; Copy the MVP and inverted MV matrices to all lighting shaders to allow us to
; calculate the projection matrix and find the horizontal FOV. This technique
; was first used to fix Dreamfall Chapters - take a look at the forum thread
; for that game and it's fix for more details on how this works.


; The projection matrix will be calculated from the matrices passed into the
; lighting shader whenever possible. This is not possible for directional
; lighting or other times it is drawing a full-screen quad, so we must also
; find other shaders to get the MV+MVP matrices from in that case. The below
; shader is a pretty common one in Unity games that we can use, but you may
; need to find others (avoid UI and depth shaders that often do not have a
; valid projection matrix). My extract_unity_headers.py script is useful to
; find other shaders that can be used here.
[VS61CAF50F]
; Particle Alpha Blend.shader - example of shader with MV+MVP matrices
; MV is in c0-c3. Copy this and invert it:
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
; MVP is in c4-c7. We only need the first column so only bother with c4
GetConst1FromReg = 4

[VS00463CF9]
; CRC32: 00463CF9 | Unity headers extracted from Bleakness-Dimension-Circle.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
; [VS0D2263A1]
; ; CRC32: 0D2263A1 | Matched 8 variants of 4 shaders: Diffuse, Mimimi/FX/Skydome Object, Specular, Transparent/Cutout/Diffuse
; UseMatrix = true
; GetMatrixFromReg = 0
; InverseMatrix = true
; GetConst1FromReg = 4
[VS19724F62]
; CRC32: 19724F62 | Unity headers extracted from FX-Colorcage-Bottom.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS202E0C3B]
; CRC32: 202E0C3B | Matched 8 variants of 2 shaders: Mimimi/ReColor/Character/Emotionable Mask, Mimimi/ReColor/Character/Standard
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS25EA66AD]
; CRC32: 25EA66AD | Matched 2 variants of 1 shaders: Mimimi/FX/Custom/Rope
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS2674E236]
; CRC32: 2674E236 | Matched 4 variants of 1 shaders: Mimimi/Character/Desaturate Bumped Specular Dissolve
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS27C80AD9]
; CRC32: 27C80AD9 | Matched 2 variants of 1 shaders: Mimimi/FX/Custom/Container BackFace
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS37D7D342]
; CRC32: 37D7D342 | Unity headers extracted from Bleakness-Dimension-Circle-Object.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS49475C6D]
; CRC32: 49475C6D | Matched 2 variants of 1 shaders: Mimimi/FX/Bumped Specular Window
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS54CCAF9D]
; CRC32: 54CCAF9D | Matched 2 variants of 1 shaders: Mimimi/RimLight/Bumped Lambert
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS5B2CD52B]
; CRC32: 5B2CD52B | Matched 4 variants of 1 shaders: Mimimi/LightProbe/Bumped Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS607C6109]
; CRC32: 607C6109 | Matched 2 variants of 1 shaders: Mimimi/ReColor/Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS63785FED]
; CRC32: 63785FED | Unity headers extracted from Bleakness-Floor-EdgeFade.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS64FD0AD6]
; CRC32: 64FD0AD6 | Matched 4 variants of 2 shaders: Mimimi/ReColor/DetailBumped/Diffuse, Mimimi/ReColor/DetailBumped/Specular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS7A062DE4]
; CRC32: 7A062DE4 | Matched 2 variants of 1 shaders: Mimimi/DetailBumped/Specular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS7F069B94]
; CRC32: 7F069B94 | Matched 2 variants of 1 shaders: Mimimi/FX/Custom/Container
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS8024C186]
; CRC32: 8024C186 | Matched 2 variants of 1 shaders: Mimimi/ReColor/Wind/Bumped Specular CullOff
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS8E14086F]
; CRC32: 8E14086F | Matched 4 variants of 1 shaders: Mimimi/Bleakness/Slime
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS91649A9C]
; CRC32: 91649A9C | Unity headers extracted from FX-Shield.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS9247963E]
; CRC32: 9247963E | Matched 10 variants of 3 shaders: Mimimi/Character/Emotionable Detail, Mimimi/Character/Tentacle Boss, Mimimi/Grass/Volumetric Mask DetailBumped Specular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS980D648D]
; CRC32: 980D648D | Matched 2 variants of 1 shaders: Mimimi/FX/Smooth-Color-Dark
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS9AD282C5]
; CRC32: 9AD282C5 | Matched 2 variants of 1 shaders: Mimimi/Wind/Bumped Specular CullOff
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSA1680770]
; CRC32: A1680770 | Matched 20 variants of 5 shaders: Mimimi/Character/Desaturate Bumped Specular, Mimimi/Character/Emotionable, Mimimi/Character/Emotionable Mask, Mimimi/Character/Standard, Mimimi/FX/Custom/CheckPoint
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSAB6CE329]
; CRC32: AB6CE329 | Matched 2 variants of 1 shaders: Mimimi/FX/Bumped Specular Window Mask
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSACEAA2B3]
; CRC32: ACEAA2B3 | Unity headers extracted from Bleakness-Particle-Dimension.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSBBDBA18E]
; CRC32: BBDBA18E | Unity headers extracted from Bleakness-Dimension-UV-Object.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSC5E0F5ED]
; CRC32: C5E0F5ED | Matched 8 variants of 4 shaders: Bumped Diffuse, Bumped Specular, CFX/Water Wiggle, Self-Illumin/Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSCB8336EE]
; CRC32: CB8336EE | Matched 2 variants of 1 shaders: Mimimi/DetailBumped/Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSD01E622D]
; CRC32: D01E622D | Matched 8 variants of 4 shaders: Mimimi/FX/Custom/Colorize Object, Mimimi/FX/Custom/Palace Picture, Mimimi/ReColor/Bumped Diffuse, Mimimi/ReColor/Bumped Specular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
; [VSD61D6FFD]
; ; CRC32: D61D6FFD | Unity headers extracted from Bleakness-Dimension-UV-Object-Stencil.shader
; UseMatrix = true
; GetMatrixFromReg = 0
; InverseMatrix = true
; GetConst1FromReg = 4
[VSE014E2DF]
; CRC32: E014E2DF | Matched 2 variants of 1 shaders: Mimimi/FX/Custom/VolumeLight
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSE0F22DED]
; CRC32: E0F22DED | Matched 2 variants of 1 shaders: Mimimi/Reflection/CubeMap Masked
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
; [VSEC8C0710]
; ; CRC32: EC8C0710 | Matched 2 variants of 1 shaders: Mimimi/FX/Skydome
; UseMatrix = true
; GetMatrixFromReg = 0
; InverseMatrix = true
; GetConst1FromReg = 4

; These shaders have the projection matrix. It seems that most of the game
; doesn't have access to any of the above shaders, so use these instead and
; fall back to a hardcoded constant if nothing is available (e.g. in the menu):
[VS2905363F]
; Unity headers extracted from FX-Outline-ColorCage.shader
GetConst2FromReg = 0
PresIndex = 14
[VS767A6956]
; Unity headers extracted from FX-Outline.shader
GetConst2FromReg = 0
PresIndex = 14
[VSCB4F6504]
; Matched 4 variants of 3 shaders: Mimimi/Toon/Basic Outline Mask, Mimimi/Toon/Basic Outline Overlay, Toon/Basic Outline
GetConst2FromReg = 0
PresIndex = 14

; PresIndex 14 (DECIMAL) = PRESE (HEXADECIMAL)
[PRESE]
Const2 = 0x3f800000


; Lighting vertex shaders to copy the matrices to. We used to also copy them to
; the pixel shaders, but now we pass them from the vertex shaders to the pixel
; shaders instead, which makes it easier to tweak the FOV source on a game by
; game basis.

[VSDF7A050C]
; Unity Hidden/Internal-PrePassLighting.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; This shader will use it's own MV+MVP matrices when they are valid (even
; inverting the MV matrix inside the shader to avoid needing Helix mod to do
; it), and the passed in ones when they are not:
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
SetConst2ToReg = 170
[VSBAEDDED5]
; Unity Hidden/Internal-PrePassCollectShadows.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; This shader is used for directional lighting, and must always have an
; alternate source of the MV+MVP matrices passed to it.
; Note: This shader has an MVP matrix, but not the matching MV matrix.
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
SetConst2ToReg = 170
