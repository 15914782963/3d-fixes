// HUD - mouse click sparkle + Pool sparkle
#define hud_depth_cutoff IniParams[0].x

// ---- Created with 3Dmigoto v1.3.4 on Mon Mar  5 06:57:18 2018

cbuffer vector_register_block : register(b0)
{
  float3 gEffectHemisphereVector : packoffset(c0);
  float3 gEffectHemisphereColor0 : packoffset(c1);
  float3 gEffectHemisphereColor1 : packoffset(c2);
  row_major float3x3 gEffectLightDirection : packoffset(c3);
  row_major float3x3 gEffectLightColorDir : packoffset(c6);
  float4 gEffectLightPosition[4] : packoffset(c9);
  float4 gEffectLightColorPoint[4] : packoffset(c13);
  float3 gEffectIblDiffuseColor : packoffset(c19);
  row_major float4x4 gEffectWorldViewProj : packoffset(c30);
  row_major float4x4 gEffectShadingMatrix : packoffset(c34);
  float3 gEffectEyePosition : packoffset(c38);
  float4 gEffectUVOffset : packoffset(c39);
  float4 gEffectConstantColor : packoffset(c40);
  float4 gEffectDistanceFade_VThickness : packoffset(c41);
}

cbuffer bool_register_block : register(b1)
{
  bool gEnableMultiUV : packoffset(c0);
  bool gEnableVertexColor : packoffset(c0.y);
  bool gEnableLighting : packoffset(c0.z);
  bool gEnablePointLight0 : packoffset(c0.w);
  bool gEnablePointLight1 : packoffset(c1);
  bool gEnablePointLight2 : packoffset(c1.y);
  bool gEnablePointLight3 : packoffset(c1.z);
  bool gFogEnable : packoffset(c1.w);
  bool gEnableLightScatter : packoffset(c2);
  bool gBlendUnDestOne : packoffset(c2.y);
  bool gEnableSoftParticle : packoffset(c2.z);
  int bool_register_block_padding : packoffset(c2.w);
}

cbuffer model_low_frequency_block : register(b9)
{
  row_major float4x4 gViewProjection : packoffset(c0);
  float4 gEyePosition : packoffset(c4);
  row_major float4x4 gViewMatrix : packoffset(c5);
  row_major float4x4 gShadowMatrix : packoffset(c9);
  float4 gClipPlane0 : packoffset(c13);
  float4 gLScatterSunColor : packoffset(c14);
  float4 gLScatterSunDir : packoffset(c15);
  float4 gLScatterOutTmp : packoffset(c16);
  float4 gLScatterRayTmp : packoffset(c17);
  float4 gLScatterMieTmp : packoffset(c18);
  float4 gFogMiddle : packoffset(c19);
  float4 gFogFarMiddle : packoffset(c20);
  float4 gFogDistance : packoffset(c21);
  float4 gFogDensity : packoffset(c22);
  float4 gHeightFogMiddle : packoffset(c23);
  float4 gHeightFogFarMiddle : packoffset(c24);
  float4 gHeightFogDistance : packoffset(c25);
  float4 gHeightFogDensity : packoffset(c26);
  row_major float4x4 gSecondShadowMatrix : packoffset(c27);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float3 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = gEffectWorldViewProj._m10_m11_m12_m13 * v0.yyyy;
  r0.xyzw = v0.xxxx * gEffectWorldViewProj._m00_m01_m02_m03 + r0.xyzw;
  r0.xyzw = v0.zzzz * gEffectWorldViewProj._m20_m21_m22_m23 + r0.xyzw;
  r0.xyzw = gEffectWorldViewProj._m30_m31_m32_m33 + r0.xyzw;
  o0.xyzw = r0.xyzw;
  r1.xyz = gEffectConstantColor.xyz;
  r1.w = 1;
  r2.xyzw = v1.xyzw * r1.xyzw;
  r1.xyzw = gEnableMultiUV ? r2.xyzw : r1.xyzw;
  o1.w = gEffectConstantColor.w * r1.w;
  o1.xyz = r1.xyz;
  r1.xyzw = gEffectUVOffset.xyzw + v2.xyzw;
  o2.xyzw = gEnableMultiUV ? r1.xyzw : r1.xyxy;
  r0.xyz = -gEffectEyePosition.xyz + v0.xyz;
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = sqrt(r1.x);
  r0.xyz = r0.xyz / r1.xxx;
  r1.xyz = gLScatterOutTmp.xyz * r1.xxx;
  r1.xyz = exp2(r1.xyz);
  r1.xyz = float3(1,1,1) + -r1.xyz;
  r2.xyz = gEffectShadingMatrix._m10_m11_m12 * r0.yyy;
  r2.xyz = r0.xxx * gEffectShadingMatrix._m00_m01_m02 + r2.xyz;
  r0.xyz = r0.zzz * gEffectShadingMatrix._m20_m21_m22 + r2.xyz;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  r0.xyz = r1.www * r0.xyz;
  r0.x = dot(gLScatterSunDir.xyz, r0.xyz);
  r0.y = gLScatterMieTmp.w * r0.x + gLScatterRayTmp.w;
  r0.x = r0.x * r0.x + 1;
  r0.z = r0.y * r0.y;
  r0.y = r0.z * r0.y;
  r0.y = sqrt(r0.y);
  r2.xyz = gLScatterMieTmp.xyz / r0.yyy;
  r0.xyz = gLScatterRayTmp.xyz * r0.xxx + r2.xyz;
  r0.xyz = r0.xyz * r1.xyz;
  r0.xyz = gLScatterSunColor.xyz * r0.xyz;
  r0.xyz = gEnableLightScatter ? r0.xyz : float3(0,0,0);
  r0.xyz = gEnableLightScatter ? r0.xyz : float3(0,0,0);
  r1.xy = -gHeightFogDistance.xy + v0.yy;
  r1.xy = saturate(gHeightFogDistance.zw * r1.xy);
  r2.xyz = gHeightFogFarMiddle.xyz * r1.yyy + gHeightFogMiddle.xyz;
  r1.zw = gEnablePointLight1 ? gHeightFogDensity.xy : float2(0,0);
  r1.x = dot(r1.xy, r1.zw);
  r1.yzw = r2.xyz * r1.xxx;
  r1.x = 1 + -r1.x;
  r1.xyz = r0.xyz * r1.xxx + r1.yzw;
  r2.xy = -gFogDistance.xy + r0.ww;
  o3.w = gEffectDistanceFade_VThickness.x * r0.w + gEffectDistanceFade_VThickness.y;
  r2.xy = saturate(gFogDistance.zw * r2.xy);
  r3.xyz = gFogFarMiddle.xyz * r2.yyy + gFogMiddle.xyz;
  r2.zw = gEnablePointLight1 ? gFogDensity.xy : float2(0,0);
  r0.w = dot(r2.xy, r2.zw);
  r2.xyz = r3.xyz * r0.www;
  r0.w = 1 + -r0.w;
  r1.xyz = r1.xyz * r0.www + r2.xyz;
  o3.xyz = gEnableLightScatter ? r1.xyz : r0.xyz;

// Return HUD to screen depth, but use a cutoff depth to prevent breaking the
// pool sparkle.
float4 s = StereoParams.Load(0);
if (o0.w < hud_depth_cutoff)
	o0.x -= s.x * (o0.w - s.y);

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v1.3.4 on Mon Mar  5 06:57:18 2018
//
//
// Buffer Definitions:
//
// cbuffer vector_register_block
// {
//
//   float3 gEffectHemisphereVector;    // Offset:    0 Size:    12 [unused]
//   float3 gEffectHemisphereColor0;    // Offset:   16 Size:    12 [unused]
//   float3 gEffectHemisphereColor1;    // Offset:   32 Size:    12 [unused]
//   row_major float3x3 gEffectLightDirection;// Offset:   48 Size:    44 [unused]
//   row_major float3x3 gEffectLightColorDir;// Offset:   96 Size:    44 [unused]
//   float4 gEffectLightPosition[4];    // Offset:  144 Size:    64 [unused]
//   float4 gEffectLightColorPoint[4];  // Offset:  208 Size:    64 [unused]
//   float3 gEffectIblDiffuseColor;     // Offset:  304 Size:    12 [unused]
//   row_major float4x4 gEffectWorldViewProj;// Offset:  480 Size:    64
//   row_major float4x4 gEffectShadingMatrix;// Offset:  544 Size:    64
//   float3 gEffectEyePosition;         // Offset:  608 Size:    12
//   float4 gEffectUVOffset;            // Offset:  624 Size:    16
//   float4 gEffectConstantColor;       // Offset:  640 Size:    16
//   float4 gEffectDistanceFade_VThickness;// Offset:  656 Size:    16
//
// }
//
// cbuffer bool_register_block
// {
//
//   bool gEnableMultiUV;               // Offset:    0 Size:     4
//   bool gEnableVertexColor;           // Offset:    4 Size:     4
//   bool gEnableLighting;              // Offset:    8 Size:     4 [unused]
//   bool gEnablePointLight0;           // Offset:   12 Size:     4 [unused]
//   bool gEnablePointLight1;           // Offset:   16 Size:     4 [unused]
//   bool gEnablePointLight2;           // Offset:   20 Size:     4 [unused]
//   bool gEnablePointLight3;           // Offset:   24 Size:     4 [unused]
//   bool gFogEnable;                   // Offset:   28 Size:     4
//   bool gEnableLightScatter;          // Offset:   32 Size:     4
//   bool gBlendUnDestOne;              // Offset:   36 Size:     4
//   bool gEnableSoftParticle;          // Offset:   40 Size:     4 [unused]
//   int bool_register_block_padding;   // Offset:   44 Size:     4 [unused]
//
// }
//
// cbuffer model_low_frequency_block
// {
//
//   row_major float4x4 gViewProjection;// Offset:    0 Size:    64 [unused]
//   float4 gEyePosition;               // Offset:   64 Size:    16 [unused]
//   row_major float4x4 gViewMatrix;    // Offset:   80 Size:    64 [unused]
//   row_major float4x4 gShadowMatrix;  // Offset:  144 Size:    64 [unused]
//   float4 gClipPlane0;                // Offset:  208 Size:    16 [unused]
//   float4 gLScatterSunColor;          // Offset:  224 Size:    16
//   float4 gLScatterSunDir;            // Offset:  240 Size:    16
//   float4 gLScatterOutTmp;            // Offset:  256 Size:    16
//   float4 gLScatterRayTmp;            // Offset:  272 Size:    16
//   float4 gLScatterMieTmp;            // Offset:  288 Size:    16
//   float4 gFogMiddle;                 // Offset:  304 Size:    16
//   float4 gFogFarMiddle;              // Offset:  320 Size:    16
//   float4 gFogDistance;               // Offset:  336 Size:    16
//   float4 gFogDensity;                // Offset:  352 Size:    16
//   float4 gHeightFogMiddle;           // Offset:  368 Size:    16
//   float4 gHeightFogFarMiddle;        // Offset:  384 Size:    16
//   float4 gHeightFogDistance;         // Offset:  400 Size:    16
//   float4 gHeightFogDensity;          // Offset:  416 Size:    16
//   row_major float4x4 gSecondShadowMatrix;// Offset:  432 Size:    64 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// vector_register_block             cbuffer      NA          NA            cb0      1
// bool_register_block               cbuffer      NA          NA            cb1      1
// model_low_frequency_block         cbuffer      NA          NA            cb9      1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[42], immediateIndexed
dcl_constantbuffer CB1[3], immediateIndexed
dcl_constantbuffer CB9[27], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 4
mul r0.xyzw, v0.yyyy, cb0[31].xyzw
mad r0.xyzw, v0.xxxx, cb0[30].xyzw, r0.xyzw
mad r0.xyzw, v0.zzzz, cb0[32].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb0[33].xyzw
mov o0.xyzw, r0.xyzw
mov r1.xyz, cb0[40].xyzx
mov r1.w, l(1.000000)
mul r2.xyzw, r1.xyzw, v1.xyzw
movc r1.xyzw, cb1[0].yyyy, r2.xyzw, r1.xyzw
mul o1.w, r1.w, cb0[40].w
mov o1.xyz, r1.xyzx
add r1.xyzw, v2.xyzw, cb0[39].xyzw
movc o2.xyzw, cb1[0].xxxx, r1.xyzw, r1.xyxy
add r0.xyz, v0.xyzx, -cb0[38].xyzx
dp3 r1.x, r0.xyzx, r0.xyzx
sqrt r1.x, r1.x
div r0.xyz, r0.xyzx, r1.xxxx
mul r1.xyz, r1.xxxx, cb9[16].xyzx
exp r1.xyz, r1.xyzx
add r1.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r0.yyyy, cb0[35].xyzx
mad r2.xyz, r0.xxxx, cb0[34].xyzx, r2.xyzx
mad r0.xyz, r0.zzzz, cb0[36].xyzx, r2.xyzx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww
dp3 r0.x, cb9[15].xyzx, r0.xyzx
mad r0.y, cb9[18].w, r0.x, cb9[17].w
mad r0.x, r0.x, r0.x, l(1.000000)
mul r0.z, r0.y, r0.y
mul r0.y, r0.y, r0.z
sqrt r0.y, r0.y
div r2.xyz, cb9[18].xyzx, r0.yyyy
mad r0.xyz, cb9[17].xyzx, r0.xxxx, r2.xyzx
mul r0.xyz, r1.xyzx, r0.xyzx
mul r0.xyz, r0.xyzx, cb9[14].xyzx
movc r0.xyz, cb1[2].yyyy, r0.xyzx, l(0,0,0,0)
movc r0.xyz, cb1[2].xxxx, r0.xyzx, l(0,0,0,0)
add r1.xy, v0.yyyy, -cb9[25].xyxx
mul_sat r1.xy, r1.xyxx, cb9[25].zwzz
mad r2.xyz, cb9[24].xyzx, r1.yyyy, cb9[23].xyzx
movc r1.zw, cb1[1].wwww, cb9[26].xxxy, l(0,0,0,0)
dp2 r1.x, r1.xyxx, r1.zwzz
mul r1.yzw, r1.xxxx, r2.xxyz
add r1.x, -r1.x, l(1.000000)
mad r1.xyz, r0.xyzx, r1.xxxx, r1.yzwy
add r2.xy, r0.wwww, -cb9[21].xyxx
mad o3.w, cb0[41].x, r0.w, cb0[41].y
mul_sat r2.xy, r2.xyxx, cb9[21].zwzz
mad r3.xyz, cb9[20].xyzx, r2.yyyy, cb9[19].xyzx
movc r2.zw, cb1[1].wwww, cb9[22].xxxy, l(0,0,0,0)
dp2 r0.w, r2.xyxx, r2.zwzz
mul r2.xyz, r0.wwww, r3.xyzx
add r0.w, -r0.w, l(1.000000)
mad r1.xyz, r1.xyzx, r0.wwww, r2.xyzx
movc o3.xyz, cb1[2].yyyy, r1.xyzx, r0.xyzx
ret
// Approximately 57 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
