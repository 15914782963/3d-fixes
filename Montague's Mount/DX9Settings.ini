[General]

; UseRenderedShaders=true is nearly always useful, because it trims the
; list of shaders seen while hunting down to just those active in the
; current scene.  Disable this only if you get crashes during hunting.
UseRenderedShaders=true

; DumpAll will generate ASM text files for every shader seen by the game.
; This is usually worth doing once, but not useful for every run.
DumpAll=true

; Constant registers that will arrive in Vertex and Pixel Shaders, as
; c200.  The constants below will be assigned, based on the key preset.
DefVSConst1 = 200
DefPSConst1 = 200

; The PresetKeysList specifies which KEYs will be used.
; Multiple keys lists are supported.
; Note that the KEY sections are in hexadecimal
PresetsKeysList = 0;1;2;3;4;5;6;7;8;9;A;100;101;

; Allows textures to be cycled with Up/Down - use to hunt menu text CRC32
; bCalcTexCRCatStart = true

; Mouse stopped working in this game with Helix mod:
InitMouse = False

; Less crashes when reloading shaders:
OverrideMethod = 1

; Force square surfaces (shadow maps) to be mono:
; This didn't have much of a noticeable effect in this game, but does affect
; the shadows from the spot lights on the dock near the end of the game. In
; particular, the shadows on the bars are misaligned without this.
DefSquareSurfaceMode = 2

; SkipSetScissorRect = true
; DefDepthStencilSurfaceMode = 2

; Set default profile to "3D-Hub Player" to enable 3D in a fullscreen window
GameProfile = fxdplayer

; Allow access to the screen size in pixel shaders for shadow fix:
; DefPSViewSizeConst = 210

; Sampler copying isn't working (probably the game has released the texture
; before we can use it), so create a new depth texture that we can render to
; ourselves:
MakeWTexture = true
; Get depth resolution from depth buffer - using this as we can force it to
; stereo, whereas I don't think we can while using the default of the back
; buffer resolution:
DepthGetDepthResFrom = 2
; Default surface creation mode to stereo to influence above depth buffer mode:
DefSurfaceCreationMode = 1


; Number row on keyboard sets UI depth to various values between screen depth
; and separation. `~ (left of 1 on US keyboards) sets screen depth, 1-9 sets
; septh in 10% multiples and 0 sets depth to 100% separation.
; Note that the KEY%X on these sections is in hexadecimal, hence we use KEYA
; for the tenth key entry and so on.
[KEY0]
Key = 192
Presets = 0;
Type = 1
[PRES0]
Const3 = 0x00000000
[KEY1]
Key = 49
Presets = 1;
Type = 1
[PRES1]
Const3 = 0x3dcccccd
[KEY2]
Key = 50
Presets = 2;
Type = 1
[PRES2]
Const3 = 0x3e4ccccd
[KEY3]
Key = 51
Presets = 3;
Type = 1
[PRES3]
Const3 = 0x3e99999a
[KEY4]
Key = 52
Presets = 4;
Type = 1
[PRES4]
Const3 = 0x3ecccccd
[KEY5]
Key = 53
Presets = 5;
Type = 1
[PRES5]
Const3 = 0x3f000000
[KEY6]
Key = 54
Presets = 6;
Type = 1
[PRES6]
Const3 = 0x3f19999a
[KEY7]
Key = 55
Presets = 7;
Type = 1
[PRES7]
Const3 = 0x3f333333
[KEY8]
Key = 56
Presets = 8;
Type = 1
[PRES8]
Const3 = 0x3f4ccccd
[KEY9]
Key = 57
Presets = 9;
Type = 1
[PRES9]
Const3 = 0x3f666666
[KEYA]
Key = 48
Presets = A;
Type = 1
[PRESA]
Const3 = 0x3f800000


[KEY100]
; [ selects a convergence preset of 0.5
Key = 219
Presets = 100;
Type = 1
[PRES100]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3f000000
UseByDef = true
[KEY101]
; ] selects a convergence preset of 1.0
Key = 221
Presets = 101;
Type = 1
[PRES101]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3f800000



; Copy the MVP and inverted MV matrices to all lighting shaders to allow us to
; calculate the projection matrix and find the horizontal FOV. This technique
; was first used to fix Dreamfall Chapters - take a look at the forum thread
; for that game and it's fix for more details on how this works.


; The projection matrix will be calculated from the matrices passed into the
; lighting shader whenever possible. This is not possible for directional
; lighting or other times it is drawing a full-screen quad, so we must also
; find other shaders to get the MV+MVP matrices from in that case. The below
; shader is a pretty common one in Unity games that we can use, but you may
; need to find others (avoid UI and depth shaders that often do not have a
; valid projection matrix). My extract_unity_headers.py script is useful to
; find other shaders that can be used here.
[VS61CAF50F]
; Particle Alpha Blend.shader - example of shader with MV+MVP matrices
; MV is in c0-c3. Copy this and invert it:
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
; MVP is in c4-c7. We only need the first column so only bother with c4
GetConst1FromReg = 4

; Lighting vertex shaders to copy the matrices to. We used to also copy them to
; the pixel shaders, but now we pass them from the vertex shaders to the pixel
; shaders instead, which makes it easier to tweak the FOV source on a game by
; game basis.

[VSDF7A050C]
; Unity Hidden/Internal-PrePassLighting.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; This shader will use it's own MV+MVP matrices when they are valid (even
; inverting the MV matrix inside the shader to avoid needing Helix mod to do
; it), and the passed in ones when they are not:
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[VSBAEDDED5]
; Unity Hidden/Internal-PrePassCollectShadows.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; This shader is used for directional lighting, and must always have an
; alternate source of the MV+MVP matrices passed to it.
; Note: This shader has an MVP matrix, but not the matching MV matrix.
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190


; Get _CameraDepthTexture and _ZBufferParams from lighting shaders for
; automatic stereo crosshair depth:

[PSC24D6005]
; Unity Hidden/Internal-PrePassCollectShadows.shader - SHADOWS_NATIVE SHADOWS_SPLIT_SPHERES
GetConst2FromReg = 20
; This isn't working...
; GetSampler1FromReg = 0
; So set our new depth texture as an extra render target. In the shader we copy
; _CameraDepthTexture to this render target oC1:
;
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
; NOTE: FOR SOME REASON THIS BREAKS THIS SHADER AT CERTAIN TIMES!
; e.g. turn on the first generator, then turn on a light switch in the 2nd
; house and the directional shadows disappear until a game is loaded.
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DepthWRT = 1

; This vertex shader adjust part of the UI depth (crosshair) *AND* affects the
; lens flare - both of which are broken, but in very different ways. Match the
; texture of the lens flare so we can use different fixes in the shader.
[VSCD61F9B3]
CheckTexCRC = true
ValForDefined = 0
ValNotDefined = 1
TexCounterReg = 251
UseDefinedOnly = false
DefinedTexturesVS = 02314BD2;
; Copy the camera depth texture and Z buffer params from the lighting shaders
; into this vetex shader so that we can adjust the HUD depth to match the
; object under the cursor in the center of the screen.
; This isn't working...
; SetSampler1ToReg = 260
; So use our new depth texture instead:
DepthWReg = 259
SetConst2ToReg = 150
