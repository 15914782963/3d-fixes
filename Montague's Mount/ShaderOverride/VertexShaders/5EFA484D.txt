// CRC32: 5EFA484D | Matched 3 variants of 3 shaders: Diffuse Detail, Self-Illumin/Diffuse, Sonic Ether/Emissive/Textured
// 
//    Unity headers extracted from Normal-DiffuseDetail.shader
//    Shader "Diffuse Detail" {
//      Properties {
//       _Color ("Main Color", Color) = (1,1,1,1)
//       _MainTex ("Base (RGB)", 2D) = "white" {}
//       _Detail ("Detail (RGB)", 2D) = "gray" {}
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        LOD 250
//        Tags { "RenderType"="Opaque" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_OFF" }
//              Bind "vertex" Vertex
//              Bind "normal" Normal
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Matrix 4 [_Object2World]
//              Vector 8 [unity_SHAr]
//              Vector 9 [unity_SHAg]
//              Vector 10 [unity_SHAb]
//              Vector 11 [unity_SHBr]
//              Vector 12 [unity_SHBg]
//              Vector 13 [unity_SHBb]
//              Vector 14 [unity_SHC]
//              Vector 15 [unity_Scale]
//              Vector 16 [_MainTex_ST]
//              Vector 17 [_Detail_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Illumin-Diffuse.shader
//    Shader "Self-Illumin/Diffuse" {
//      Properties {
//       _Color ("Main Color", Color) = (1,1,1,1)
//       _MainTex ("Base (RGB) Gloss (A)", 2D) = "white" {}
//       _Illum ("Illumin (A)", 2D) = "white" {}
//       _EmissionLM ("Emission (Lightmapper)", Float) = 0
//      }
//      Fallback "Self-Illumin/VertexLit"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "RenderType"="Opaque" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_OFF" }
//              Bind "vertex" Vertex
//              Bind "normal" Normal
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Matrix 4 [_Object2World]
//              Vector 8 [unity_SHAr]
//              Vector 9 [unity_SHAg]
//              Vector 10 [unity_SHAb]
//              Vector 11 [unity_SHBr]
//              Vector 12 [unity_SHBg]
//              Vector 13 [unity_SHBb]
//              Vector 14 [unity_SHC]
//              Vector 15 [unity_Scale]
//              Vector 16 [_MainTex_ST]
//              Vector 17 [_Illum_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from SEEmissiveTextured.shader
//    Shader "Sonic Ether/Emissive/Textured" {
//      Properties {
//       _EmissionColor ("Emission Color", Color) = (1,1,1,1)
//       _DiffuseColor ("Diffuse Color", Color) = (1,1,1,1)
//       _MainTex ("Diffuse Texture", 2D) = "White" {}
//       _Illum ("Emission Texture", 2D) = "white" {}
//       _EmissionGain ("Emission Gain", Range(0,1)) = 0.5
//      }
//      Fallback "Self-Illumin/VertexLit"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "RenderType"="Opaque" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_OFF" }
//              Bind "vertex" Vertex
//              Bind "normal" Normal
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Matrix 4 [_Object2World]
//              Vector 8 [unity_SHAr]
//              Vector 9 [unity_SHAg]
//              Vector 10 [unity_SHAb]
//              Vector 11 [unity_SHBr]
//              Vector 12 [unity_SHBg]
//              Vector 13 [unity_SHBb]
//              Vector 14 [unity_SHC]
//              Vector 15 [unity_Scale]
//              Vector 16 [_MainTex_ST]
//              Vector 17 [_Illum_ST]
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

// Title Screen Background

    vs_3_0
    def c18, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2

dcl_texcoord o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_position o3


def c220, 0, 1, 0.0625, 0.5
dcl_2d s0
dcl_2d s2 // Helix mod's depth texture
// dcl_2d s3 // Copy of _CameraDepthTexture

// For loop to improve stereo cursor accuracy:
defi i0, 255, 0, 0, 0
def c227, 0.00390625, 0, 0, 0.5 // 1/i0.x, 0.5

    mul r1.xyz, v1, c15.w
    dp3 r3.w, r1, c5
    dp3 r2.w, r1, c6
    dp3 r0.x, r1, c4
    mov r0.y, r3.w
    mov r0.z, r2.w
    mul r1, r0.xyzz, r0.yzzx
    mov r0.w, c18.x
    dp4 r2.z, r0, c10
    dp4 r2.y, r0, c9
    dp4 r2.x, r0, c8
    mul r0.y, r3.w, r3.w
    dp4 r3.z, r1, c13
    dp4 r3.y, r1, c12
    dp4 r3.x, r1, c11
    mad r0.y, r0.x, r0.x, -r0
    mul r1.xyz, r0.y, c14
    add r2.xyz, r2, r3
    add o2.xyz, r2, r1
    mov o1.z, r2.w
    mov o1.y, r3.w
    mov o1.x, r0
    mad o0.zw, v2.xyxy, c17.xyxy, c17
    mad o0.xy, v2, c16, c16.zwzw
    dp4 r4.w, v0, c3
    dp4 r4.z, v0, c2
    dp4 r4.y, v0, c1
    dp4 r4.x, v0, c0

texldl r31, c220.z, s0

mov r20.w, c150.w // Check if _ZBufferParams is valid
if_ne r20.w, c220.x
	// Adjust cursor depth based on the W component of the refr_sampler copied from
	// the water shader, which has the scene depth.
	// How do I know this? The water was the only surface with a halo around nearer
	// objects, which suggests it had access to the depth buffer in some way (it
	// would use this to calculate the water opacity based on depth). None of the
	// sampler names sounded promising, so I determined that the texkill
	// instruction caused the halo (removing it removed the halo), so from there it
	// was a simple matter of looking at the samplers that provided input to that
	// instruction and directly outputing the contents of the sampler to identify
	// the channel with the depth information.

	// Stereo cursor: To improve the accuracy of the stereo cursor, we start at the
	// near clipping plane and work our way towards center + separation (ideally
	// we would loop one pixel at a time, but as the loop counts must be constant
	// we can't do that here, so we just choose a granuality in i0 and c227.
	// Alternatively we could loop one pixel at a time with a hardcoded maximum
	// number of pixels)

	rcp r20.w, c150.w		// W = starting depth = near clipping plane
	add r31.w, r20.w, -r31.y	// near - convergence
	mad r20.x, r31.w, r31.x, c220.w	// X sample coord = center + separation * (near - convergence)
	mov r20.y, c220.w		// Y sample coord = center
	add r20.z, r20.x, -c220.w	// Z = X offset from center
	add r31.z, r31.x, -r20.z	// Total distance to cover (separation - starting X offset)

	mov r21, r20			// Working copy
	mul r31.w, r31.x, r31.y		// separation * convergence (precompute this constant)
	rep i0
		mad r21.z, r31.z, c227.x, r21.z	// adjustment += (total distance to cover) / i0.x (granuality)

		// Calculate W for this adjustment amount:
		add r21.w, r31.x, -r21.z	// separation - adjustment
		rcp r21.w, r21.w
		mul r21.w, r31.w, r21.w		// w = (separation * convergence) / (separation - adjustment)

		// Read depth texture at this pixel:
		//add r21.x, c220.w, r21.z	// X = 0.5 + adjustment
		// Had to divide adjustment by 2 for whatever reason:
		mad r21.x, r21.z, c220.w, c220.w // X = 0.5 + adjustment/2
		texldl r5, r21.xy, s2

		// scale depth buffer to world Z (game dependent - look for scaling applied to
		// the depth buffer wherever else it is used. In the case of Unity we use
		// _ZBufferParams):
		mad r5.x, r5.x, c150.x, c150.y
		add r5.y, c150.z, c150.w // Derive 1/far from _ZBufferParams
		mul r5.x, r5.x, r5.y
		rcp r5.x, r5.x

		// If the sampled depth is closer than the calculated depth, exit the loop:
		break_ge r21.w, r5.x

		// Set the output depth to this pixel
		mov r20, r21
	endrep

	// Finally adjust the X coordinate:
	add r0.x, r0.x, r20.z
endif
mov o3, r4
