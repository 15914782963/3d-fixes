// CRC32: CD61F9B3 | Matched 15 variants of 14 shaders: Dreamfall/FX/Additive (Soft) Boost, Hidden/Internal-Flare, Hidden/Internal-GUITexture, Hidden/Internal-Halo, OVRGUIShader, Particles/Additive, Particles/Additive (Soft), Particles/Alpha Blended, Particles/Alpha Blended Premultiply, Particles/Multiply, Particles/Multiply (Double), Particles/~Additive-Multiply, Sonic Ether/Particles/Additive, Transparent/Cutout/Soft Edge Unlit
// 
//    Unity headers extracted from Particle-Additive-Soft-Boost.shader
//    Shader "Dreamfall/FX/Additive (Soft) Boost" {
//      Properties {
//       _Color ("Main Color", Color) = (1,1,1,1)
//       _MainTex ("Particle Texture", 2D) = "white" {}
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//       _Boost ("Boost", Float) = 1
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog {
//             Color (0,0,0,0)
//            }
//          Blend One OneMinusSrcColor
//          ColorMask RGB
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Internal-Flare.shader
//    Shader "Hidden/Internal-Flare" {
//      SubShader 1/1 {
//        Tags { "RenderType"="Overlay" }
//        Pass 1/1 {
//          Tags { "RenderType"="Overlay" }
//          ZTest Always
//          ZWrite Off
//          Cull Off
//          Fog { Mode Off }
//          Blend One One
//          ColorMask RGB
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_FlareTexture_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Internal-GUITexture.shader
//    Shader "Hidden/Internal-GUITexture" {
//      Properties {
//       _MainTex ("Texture", any) = "" {}
//      }
//      Fallback Off
//      SubShader 1/1 {
//        Tags { "RenderType"="Overlay" "ForceSupported"="True" }
//        Pass 1/1 {
//          Tags { "RenderType"="Overlay" "ForceSupported"="True" }
//          ZTest Always
//          ZWrite Off
//          Cull Off
//          Fog { Mode Off }
//          Blend SrcAlpha OneMinusSrcAlpha
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Internal-Halo.shader
//    Shader "Hidden/Internal-Halo" {
//      SubShader 1/1 {
//        Tags { "RenderType"="Overlay" }
//        Pass 1/1 {
//          Tags { "RenderType"="Overlay" }
//          ZWrite Off
//          Cull Off
//          Fog {
//             Color (0,0,0,0)
//            }
//          Blend OneMinusDstColor One
//          AlphaTest Greater 0
//          ColorMask RGB
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_HaloFalloff_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from resources_182.shader
//    Shader "OVRGUIShader" {
//      Properties {
//       _MainTex ("Texture", any) = "" {}
//      }
//      Fallback Off
//      SubShader 1/2 {
//        Tags { "ForceSupported"="true" "QUEUE"="Overlay" "RenderType"="Overlay" }
//        Pass 1/1 {
//          Tags { "ForceSupported"="true" "QUEUE"="Overlay" "RenderType"="Overlay" }
//          ZTest Always
//          ZWrite Off
//          Cull Off
//          Fog { Mode Off }
//          Blend One OneMinusSrcAlpha
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Particle Add.shader
//    Shader "Particles/Additive" {
//      Properties {
//       _TintColor ("Tint Color", Color) = (0.5,0.5,0.5,0.5)
//       _MainTex ("Particle Texture", 2D) = "white" {}
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog {
//             Color (0,0,0,0)
//            }
//          Blend SrcAlpha One
//          AlphaTest Greater 0.01
//          ColorMask RGB
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Particle AddSmooth.shader
//    Shader "Particles/Additive (Soft)" {
//      Properties {
//       _MainTex ("Particle Texture", 2D) = "white" {}
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog {
//             Color (0,0,0,0)
//            }
//          Blend One OneMinusSrcColor
//          ColorMask RGB
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Particle Alpha Blend.shader
//    Shader "Particles/Alpha Blended" {
//      Properties {
//       _TintColor ("Tint Color", Color) = (0.5,0.5,0.5,0.5)
//       _MainTex ("Particle Texture", 2D) = "white" {}
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Blend SrcAlpha OneMinusSrcAlpha
//          AlphaTest Greater 0.01
//          ColorMask RGB
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Particle Premultiply Blend.shader
//    Shader "Particles/Alpha Blended Premultiply" {
//      Properties {
//       _MainTex ("Particle Texture", 2D) = "white" {}
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog { Mode Off }
//          Blend One OneMinusSrcAlpha
//          ColorMask RGB
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Particle Multiply.shader
//    Shader "Particles/Multiply" {
//      Properties {
//       _MainTex ("Particle Texture", 2D) = "white" {}
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog {
//             Color (1,1,1,1)
//            }
//          Blend Zero SrcColor
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Particle MultiplyDouble.shader
//    Shader "Particles/Multiply (Double)" {
//      Properties {
//       _MainTex ("Particle Texture", 2D) = "white" {}
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog {
//             Color (0.5,0.5,0.5,0.5)
//            }
//          Blend DstColor SrcColor
//          ColorMask RGB
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Particle AddMultiply.shader
//    Shader "Particles/~Additive-Multiply" {
//      Properties {
//       _TintColor ("Tint Color", Color) = (0.5,0.5,0.5,0.5)
//       _MainTex ("Particle Texture", 2D) = "white" {}
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog {
//             Color (0,0,0,1)
//            }
//          Blend One OneMinusSrcAlpha
//          ColorMask RGB
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from SEParticlesAdditive.shader
//    Shader "Sonic Ether/Particles/Additive" {
//      Properties {
//       _TintColor ("Tint Color", Color) = (0.5,0.5,0.5,0.5)
//       _MainTex ("Particle Texture", 2D) = "white" {}
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//       _EmissionGain ("Emission Gain", Range(0,1)) = 0.3
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog {
//             Color (0,0,0,0)
//            }
//          Blend SrcAlpha One
//          AlphaTest Greater 0.01
//          ColorMask RGB
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from AlphaTest-SoftEdgeUnlit.shader
//    Shader "Transparent/Cutout/Soft Edge Unlit" {
//      Properties {
//       _Color ("Main Color", Color) = (1,1,1,1)
//       _MainTex ("Base (RGB) Alpha (A)", 2D) = "white" {}
//       _Cutoff ("Base Alpha cutoff", Range(0,0.9)) = 0.5
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
// 1:     Pass 1/2 {
// 2:     Pass 2/2 {
// 2:       Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" "RequireOption"="SoftVegetation" }
// 1:       Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
// 2:       ZWrite Off
//          Cull Off
// 2:       Blend SrcAlpha OneMinusSrcAlpha
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

// UI *and* lens flare *and* bloom

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2

dcl_texcoord o0
dcl_position o1
dcl_color o2

def c220, 0, 1, 0.0625, 0.5
def c221, 0.05, 0.1, 0, 0
dcl_2d s0
dcl_2d s2 // Helix mod's depth texture
// dcl_2d s3 // Copy of _CameraDepthTexture

// For loop to improve stereo cursor accuracy:
defi i0, 255, 0, 0, 0
def c227, 0.00390625, 0, 0, 0.5 // 1/i0.x, 0.5


texldl r31, c220.z, s0

    mov o2, v1
    mad o0.xy, v2, c4, c4.zwzw
    dp4 r0.w, v0, c3
    dp4 r0.z, v0, c2
    dp4 r0.y, v0, c1
    dp4 r0.x, v0, c0

mov r25, c251
if_eq r25.x, c220.x
	// We matched the texture used for both the bloom (which doesn't need
	// to be fixed) and the lens flare (which does need to be fixed).

	// The bloom effects are drawn at the correct distance into the scene,
	// while the lens flare is drawn very close to 0, depending on the
	// angle, so we try to match the lens flare based on it's depth:
if_gt r0.w, c221.x // > 0.05
if_lt r0.w, c221.y // < 0.1
	// The lens flare depth varies wildly with convergence, so first, undo
	// the stereo correction:
	add r31.w, r0.w, -r31.y
	mul r31.w, r31.w, r31.x
	add r0.x, r0.x, -r31.w
	// Now adjust it by a fixed percentage of separation. This is an approximation
	// only due the flare geometry, so there might be a better way to achieve this:
	mul r31.w, r31.x, c221.y
	add r0.x, r0.x, r31.w
endif
endif
else
	// Didn't match the lens flare/bloom texture, so this must be the UI
mov r20.w, c150.w // Check if _ZBufferParams is valid
if_ne r20.w, c220.x
	// Stereo cursor: To improve the accuracy of the stereo cursor, we start at the
	// near clipping plane and work our way towards center + separation (ideally
	// we would loop one pixel at a time, but as the loop counts must be constant
	// we can't do that here, so we just choose a granuality in i0 and c227.
	// Alternatively we could loop one pixel at a time with a hardcoded maximum
	// number of pixels)

	rcp r20.w, c150.w		// W = starting depth = near clipping plane
	add r31.w, r20.w, -r31.y	// near - convergence
	mad r20.x, r31.w, r31.x, c220.w	// X sample coord = center + separation * (near - convergence)
	mov r20.y, c220.w		// Y sample coord = center
	add r20.z, r20.x, -c220.w	// Z = X offset from center
	add r31.z, r31.x, -r20.z	// Total distance to cover (separation - starting X offset)

	mov r21, r20			// Working copy
	mul r31.w, r31.x, r31.y		// separation * convergence (precompute this constant)
	rep i0
		mad r21.z, r31.z, c227.x, r21.z	// adjustment += (total distance to cover) / i0.x (granuality)

		// Calculate W for this adjustment amount:
		add r21.w, r31.x, -r21.z	// separation - adjustment
		rcp r21.w, r21.w
		mul r21.w, r31.w, r21.w		// w = (separation * convergence) / (separation - adjustment)

		// Read depth texture at this pixel:
		//add r21.x, c220.w, r21.z	// X = 0.5 + adjustment
		// Had to divide adjustment by 2 for whatever reason:
		mad r21.x, r21.z, c220.w, c220.w // X = 0.5 + adjustment/2
		texldl r5, r21.xy, s2

		// scale depth buffer to world Z (game dependent - look for scaling applied to
		// the depth buffer wherever else it is used. In the case of Unity we use
		// _ZBufferParams):
		mad r5.x, r5.x, c150.x, c150.y
		add r5.y, c150.z, c150.w // Derive 1/far from _ZBufferParams
		mul r5.x, r5.x, r5.y
		rcp r5.x, r5.x

		// If the sampled depth is closer than the calculated depth, exit the loop:
		break_ge r21.w, r5.x

		// Set the output depth to this pixel
		mov r20, r21
	endrep

	// Finally adjust the X coordinate:
	add r0.x, r0.x, r20.z
endif
endif
mov o1, r0
