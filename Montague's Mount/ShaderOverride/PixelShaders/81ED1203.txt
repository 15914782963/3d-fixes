// Interior red light in cabin on right just after bridge

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_cube s3
    def c13, 1, 2, -1, 0
    def c14, 128, 0.970000029, 0, 0
    def c15, 1, 0.00392156979, 1.53799992e-005, 5.99999979e-008
    def c16, 0.219970703, 0.70703125, 0.0709838867, 0
    dcl_texcoord v0
    dcl_texcoord1 v1.xyz

def c220, 1.35, -0.035, 0.0625, 0.5
dcl_2d s13
dcl vPos.xy

    // rcp r0.x, v0.w
    // mul r1.xy, v0, r0.x
// Again, this change from Mike's fixes doesn't seem to have any noticable
// effect... I'm guessing because the profile hack pre-adjusted v0
mov r11.xy, vPos.xy
rcp r11.z, c210.x
rcp r11.w, c210.y
mul r11.xy, r11.xy, r11.zw
mul r11.zw, r11.zw, c220.ww
add r1.xy, r11.xy, r11.zw

// And again the fix isn't accurate everywhere, though pre-adjusting v1 seems
// to help. Could be profile related since the profile hack seems to adjust
// texcoords. Ended up going with this - it's not accurate, but it seems to be
// a closer approximation than the fix from other Unity games.
// It would be interesting to re-visit this without the profile hacks - I
// suspect that may be what's causing me grief.
mov r29.xyz, v1.xyz
texldl r24, c220.z, s13
add r24.y, r29.w, -r24.y
mul r24.x, r24.x, r24.y
mul r24.x, r24.x, c220.x
add r29.x, r29.x, r24.x

    texld r0.x, r1, s1
    texld r1, r1, s0
    mad r0.w, r0.x, c6.x, c6.y
    rcp r0.y, r29.z
    mul r0.y, r0, c5.z
    mov r3.z, c13.x
    mad_pp r5.xyz, r1, c13.y, c13.z
    mul r0.xyz, r29, r0.y
    rcp r0.w, r0.w
    mul r3.xyw, r0.xyzz, r0.w

// This change from Mike seemed to make the misalignment on close vs distant
// surfaces more obvious than adjusting v1. Would be interesting to revisit
// without the profile hack:
//texldl r24, c220.z, s13
//add r24.y, r3.w, -r24.y
//mul r24.x, r24.x, r24.y
//mul r24.x, r24.x, c220.y
//add r3.x, r3.x, -r24.x

    dp4 r2.z, r3.xywz, c2
    dp4 r2.x, r3.xywz, c0
    dp4 r2.y, r3.xywz, c1
    add r4.xyz, r2, -c4
    dp3 r0.w, r4, r4
    add r0.xyz, r2, -c10
    dp3 r2.w, r0, r0
    rsq r4.w, r2.w
    mul r3.xyz, r4.w, r0
    rsq r0.w, r0.w
    mad r1.xyz, -r0.w, r4, -r3
    dp3_pp r4.x, r5, r5
    dp3 r0.w, r1, r1
    rsq r0.w, r0.w
    rsq_pp r4.x, r4.x
    mul_pp r4.xyz, r4.x, r5
    mul r1.xyz, r0.w, r1
    dp3_pp r0.w, r1, r4
    max_pp r0.w, r0, c13
    mul_pp r5.x, r1.w, c14
    pow_pp r1, r0.w, r5.x
    texld r0, r0, s3
    dp4 r0.y, r0, c15
    rcp r1.y, r4.w
    mul r0.x, r1.y, c7.w
    mad r0.y, -r0.x, c14, r0
    mov r0.z, c8.x
    mul r0.x, r2.w, c10.w
    mov_pp r1.y, r1.x
    cmp r0.y, r0, c13.x, r0.z
    texld r0.x, r0.x, s2
    mul r0.w, r0.x, r0.y
    mov_sat r1.x, r0.w
    mul r1.x, r1.y, r1
    add r0.xyz, -r2, c9
    dp3 r1.y, r0, r0
    mov_pp r0.xyz, c11
    dp3_pp r0.x, c16, r0
    mul r1.w, r1.x, r0.x
    rsq r1.y, r1.y
    rcp r0.y, r1.y
    add r0.y, -r3.w, r0
    dp3_pp r0.x, -r3, r4
    mad r0.y, r0, c9.w, r3.w
    max_pp r0.x, r0, c13.w
    mad r0.y, r0, c12.z, c12.w
    mul r0.x, r0.w, r0
    add_sat r0.y, -r0, c13.x
    mul r1.xyz, r0.x, c11
    mul_pp oC0, r1, r0.y

// approximately 64 instruction slots used (4 texture, 60 arithmetic)
