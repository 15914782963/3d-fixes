// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 718578218e84220c-vs_replace.txt
// 3DMigoto: 718578218e84220c |    Unity headers extracted from TMPro_SDF.shader
//    Shader "TMPro/Distance Field" {
//      Properties {
//       _AlphaCutoff ("Alpha Cutoff", Range(0,1)) = 0
//       _FaceTex ("Face Texture", 2D) = "white" { }
//       _FaceUVSpeedX ("Face UV Speed X", Range(-5,5)) = 0
//       _FaceUVSpeedY ("Face UV Speed Y", Range(-5,5)) = 0
//       _FaceColor ("Face Color", Color) = (1,1,1,1)
//       _FaceDilate ("Face Dilate", Range(-1,1)) = 0
//       _OutlineColor ("Outline Color", Color) = (0,0,0,1)
//       _OutlineTex ("Outline Texture", 2D) = "white" { }
//       _OutlineUVSpeedX ("Outline UV Speed X", Range(-5,5)) = 0
//       _OutlineUVSpeedY ("Outline UV Speed Y", Range(-5,5)) = 0
//       _OutlineWidth ("Outline Thickness", Range(0,1)) = 0
//       _OutlineSoftness ("Outline Softness", Range(0,1)) = 0
//       _Bevel ("Bevel", Range(0,1)) = 0.5
//       _BevelOffset ("Bevel Offset", Range(-0.5,0.5)) = 0
//       _BevelWidth ("Bevel Width", Range(-0.5,0.5)) = 0
//       _BevelClamp ("Bevel Clamp", Range(0,1)) = 0
//       _BevelRoundness ("Bevel Roundness", Range(0,1)) = 0
//       _LightAngle ("Light Angle", Range(0,6.28319)) = 3.1416
//       _SpecularColor ("Specular", Color) = (1,1,1,1)
//       _SpecularPower ("Specular", Range(0,4)) = 2
//       _Reflectivity ("Reflectivity", Range(5,15)) = 10
//       _Diffuse ("Diffuse", Range(0,1)) = 0.5
//       _Ambient ("Ambient", Range(1,0)) = 0.5
//       _BumpMap ("Normal map", 2D) = "bump" { }
//       _BumpOutline ("Bump Outline", Range(0,1)) = 0
//       _BumpFace ("Bump Face", Range(0,1)) = 0
//       _ReflectFaceColor ("Reflection Color", Color) = (0,0,0,1)
//       _ReflectOutlineColor ("Reflection Color", Color) = (0,0,0,1)
//       _Cube ("Reflection Cubemap", CUBE) = "black" { }
//       _EnvMatrixRotation ("Texture Rotation", Vector) = (0,0,0,0)
//       _UnderlayColor ("Border Color", Color) = (0,0,0,0.5)
//       _UnderlayOffsetX ("Border OffsetX", Range(-1,1)) = 0
//       _UnderlayOffsetY ("Border OffsetY", Range(-1,1)) = 0
//       _UnderlayDilate ("Border Dilate", Range(-1,1)) = 0
//       _UnderlaySoftness ("Border Softness", Range(0,1)) = 0
//       _GlowColor ("Color", Color) = (0,1,0,0.5)
//       _GlowOffset ("Offset", Range(-1,1)) = 0
//       _GlowInner ("Inner", Range(0,1)) = 0.05
//       _GlowOuter ("Outer", Range(0,1)) = 0.05
//       _GlowPower ("Falloff", Range(1,0)) = 0.75
//       _WeightNormal ("Weight Normal", Float) = 0
//       _WeightBold ("Weight Bold", Float) = 0.5
//       _ShaderFlags ("Flags", Float) = 0
//       _ScaleRatioA ("Scale RatioA", Float) = 1
//       _ScaleRatioB ("Scale RatioB", Float) = 1
//       _ScaleRatioC ("Scale RatioC", Float) = 1
//       _MainTex ("Font Atlas", 2D) = "white" { }
//       _TextureWidth ("Texture Width", Float) = 512
//       _TextureHeight ("Texture Height", Float) = 512
//       _GradientScale ("Gradient Scale", Float) = 5
//       _ScaleX ("Scale X", Float) = 1
//       _ScaleY ("Scale Y", Float) = 1
//       _PerspectiveFilter ("Perspective Correction", Range(0,1)) = 0.875
//       _VertexOffsetX ("Vertex OffsetX", Float) = 0
//       _VertexOffsetY ("Vertex OffsetY", Float) = 0
//       _ClipRect ("Mask Coords", Vector) = (0,0,100000,100000)
//       _MaskSoftnessX ("Mask SoftnessX", Float) = 0
//       _MaskSoftnessY ("Mask SoftnessY", Float) = 0
//       _StencilComp ("Stencil Comparison", Float) = 8
//       _Stencil ("Stencil ID", Float) = 0
//       _StencilOp ("Stencil Operation", Float) = 0
//       _StencilWriteMask ("Stencil Write Mask", Float) = 255
//       _StencilReadMask ("Stencil Read Mask", Float) = 255
//      }
//      Fallback "TMPro/Mobile/Distance Field"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZTest [_ZTestMode]
//          ZWrite Off
//          Cull [_CullMode]
//          Stencil {
//             Ref [_Stencil]
//             ReadMask [_StencilReadMask]
//             WriteMask [_StencilWriteMask]
//             Comp [_StencilComp]
//             Pass [_StencilOp]
//            }
//          Blend One OneMinusSrcAlpha
//          GpuProgramID 63523
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 1
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from TMPro_SDF.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 66 0 0
//   undeciphered2: 1 0 4 0 0
//   undeciphered3: 31 5 0 0 2 1 1 2 3 4 4 5
//   ConstBuffer "$Globals" 528
//   Vector 112 [_FaceColor]
//   Float 128 [_FaceDilate]
//   Float 132 [_OutlineSoftness]
//   Vector 144 [_OutlineColor]
//   Float 160 [_OutlineWidth]
//   Float 420 [_WeightNormal]
//   Float 424 [_WeightBold]
//   Float 428 [_ScaleRatioA]
//   Float 440 [_VertexOffsetX]
//   Float 444 [_VertexOffsetY]
//   Float 496 [_GradientScale]
//   Float 500 [_ScaleX]
//   Float 504 [_ScaleY]
//   Float 508 [_PerspectiveFilter]
//   Matrix 240 [_EnvMatrix]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityPerDraw" 352
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 192 [_Object2World]
//   Matrix 256 [_World2Object]
//   ConstBuffer "UnityPerFrame" 256
//   Matrix 0 [glstate_matrix_projection]
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//   BindCB "UnityPerFrame" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:44:18 2016
cbuffer cb3 : register(b3)
{
  float4 cb3[4];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[32];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float4 v2 : COLOR0,
  float4 v3 : TEXCOORD0,
  float2 v4 : TEXCOORD1,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : COLOR0,
  out float4 o2 : COLOR1,
  out float o3 : TEXCOORD0,
  out float3 p3 : TEXCOORD4,
  out float4 o4 : TEXCOORD1,
  out float4 o5 : TEXCOORD2,
  out float4 o6 : TEXCOORD3)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 718578218e84220c-vs_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xy = cb0[27].zw + v0.xy;
  r1.xyzw = cb2[1].xyzw * r0.yyyy;
  r1.xyzw = cb2[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb2[2].xyzw * v0.zzzz + r1.xyzw;
  r1.xyzw = cb2[3].xyzw * v0.wwww + r1.xyzw;
  o0.xyzw = r1.xyzw;
  o1.xyzw = cb0[7].xyzw * v2.xyzw;
  o2.w = cb0[9].w * v2.w;
  o2.xyz = cb0[9].xyz;
  r1.xyz = cb2[13].xyz * r0.yyy;
  r1.xyz = cb2[12].xyz * r0.xxx + r1.xyz;
  o6.xy = r0.xy;
  r0.xyz = cb2[14].xyz * v0.zzz + r1.xyz;
  r0.xyz = cb2[15].xyz * v0.www + r0.xyz;
  r0.xyz = _WorldSpaceCameraPos.xyz + -r0.xyz;
  r1.xyz = cb0[16].xyz * r0.yyy;
  r1.xyz = cb0[15].xyz * r0.xxx + r1.xyz;
  p3.xyz = cb0[17].xyz * r0.zzz + r1.xyz;
  o3.x = v2.w;
  r0.w = floor(v4.x);
  o4.z = 0.00122070313 * r0.w;
  r0.w = frac(v4.x);
  o4.w = 5 * r0.w;
  o4.xy = v3.xy;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.x = cb2[16].x * v1.x;
  r1.y = cb2[17].x * v1.x;
  r1.z = cb2[18].x * v1.x;
  r2.x = cb2[16].y * v1.y;
  r2.y = cb2[17].y * v1.y;
  r2.z = cb2[18].y * v1.y;
  r1.xyz = r2.xyz + r1.xyz;
  r2.x = cb2[16].z * v1.z;
  r2.y = cb2[17].z * v1.z;
  r2.z = cb2[18].z * v1.z;
  r1.xyz = r2.xyz + r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.x = dot(r1.xyz, r0.xyz);
  r0.yz = cb3[1].xy * cb1[6].yy;
  r0.yz = cb3[0].xy * cb1[6].xx + r0.yz;
  r0.yz = cb0[31].yz * abs(r0.yz);
  r0.yz = r1.ww / r0.yz;
  r0.w = dot(r0.yz, r0.yz);
  o6.zw = float2(0.5,0.5) / r0.yz;
  r0.y = rsqrt(r0.w);
  r0.z = cb0[31].x * abs(v4.y);
  r0.y = r0.z * r0.y;
  r0.z = 1.5 * r0.y;
  r0.w = 1 + -cb0[31].w;
  r0.w = r0.z * r0.w;
  r0.y = r0.y * 1.5 + -r0.w;
  r0.x = abs(r0.x) * r0.y + r0.w;
  r0.y = cmp(cb3[3].w == 0.000000);
  r0.y = r0.y ? r0.x : r0.z;
  r0.x = cmp(0 >= v4.y);
  r0.x = r0.x ? 1.000000 : 0;
  r0.z = cb0[26].z + -cb0[26].y;
  r0.x = r0.x * r0.z + cb0[26].y;
  r0.x = r0.x / cb0[31].x;
  r0.z = cb0[26].w * cb0[8].x;
  r0.w = r0.z * 0.5 + r0.x;
  o5.yw = r0.yw;
  r0.x = 0.5 / r0.y;
  r0.y = -cb0[10].x * cb0[26].w + 1;
  r0.y = -cb0[8].y * cb0[26].w + r0.y;
  r0.y = r0.y * 0.5 + -r0.x;
  o5.x = r0.y + -r0.w;
  r0.y = 0.5 + -r0.w;
  o5.z = r0.y + r0.x;
  return;
}
