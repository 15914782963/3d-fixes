// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 4be457ef2ae966cf-ps_replace.txt
// 3DMigoto: 4be457ef2ae966cf |    Unity headers extracted from TMPro_SDF-Surface 1.shader
//    Shader "TMPro/Distance Field (Surface) 1" {
//      Properties {
//       _AlphaCutoff ("Alpha Cutoff", Range(0,1)) = 0
//       _FaceTex ("Fill Texture", 2D) = "white" { }
//       _FaceUVSpeedX ("Face UV Speed X", Range(-5,5)) = 0
//       _FaceUVSpeedY ("Face UV Speed Y", Range(-5,5)) = 0
//       _FaceColor ("Fill Color", Color) = (1,1,1,1)
//       _FaceDilate ("Face Dilate", Range(-1,1)) = 0
//       _OutlineColor ("Outline Color", Color) = (0,0,0,1)
//       _OutlineTex ("Outline Texture", 2D) = "white" { }
//       _OutlineUVSpeedX ("Outline UV Speed X", Range(-5,5)) = 0
//       _OutlineUVSpeedY ("Outline UV Speed Y", Range(-5,5)) = 0
//       _OutlineWidth ("Outline Thickness", Range(0,1)) = 0
//       _OutlineSoftness ("Outline Softness", Range(0,1)) = 0
//       _Bevel ("Bevel", Range(0,1)) = 0.5
//       _BevelOffset ("Bevel Offset", Range(-0.5,0.5)) = 0
//       _BevelWidth ("Bevel Width", Range(-0.5,0.5)) = 0
//       _BevelClamp ("Bevel Clamp", Range(0,1)) = 0
//       _BevelRoundness ("Bevel Roundness", Range(0,1)) = 0
//       _BumpMap ("Normalmap", 2D) = "bump" { }
//       _BumpOutline ("Bump Outline", Range(0,1)) = 0.5
//       _BumpFace ("Bump Face", Range(0,1)) = 0.5
//       _ReflectFaceColor ("Face Color", Color) = (0,0,0,1)
//       _ReflectOutlineColor ("Outline Color", Color) = (0,0,0,1)
//       _Cube ("Reflection Cubemap", CUBE) = "black" { }
//       _EnvMatrixRotation ("Texture Rotation", Vector) = (0,0,0,0)
//       _SpecColor ("Specular Color", Color) = (0,0,0,1)
//       _FaceShininess ("Face Shininess", Range(0,1)) = 0
//       _OutlineShininess ("Outline Shininess", Range(0,1)) = 0
//       _GlowColor ("Color", Color) = (0,1,0,0.5)
//       _GlowOffset ("Offset", Range(-1,1)) = 0
//       _GlowInner ("Inner", Range(0,1)) = 0.05
//       _GlowOuter ("Outer", Range(0,1)) = 0.05
//       _GlowPower ("Falloff", Range(1,0)) = 0.75
//       _WeightNormal ("Weight Normal", Float) = 0
//       _WeightBold ("Weight Bold", Float) = 0.5
//       _ShaderFlags ("Flags", Float) = 0
//       _ScaleRatioA ("Scale RatioA", Float) = 1
//       _ScaleRatioB ("Scale RatioB", Float) = 1
//       _ScaleRatioC ("Scale RatioC", Float) = 1
//       _MainTex ("Font Atlas", 2D) = "white" { }
//       _TextureWidth ("Texture Width", Float) = 512
//       _TextureHeight ("Texture Height", Float) = 512
//       _GradientScale ("Gradient Scale", Float) = 5
//       _ScaleX ("Scale X", Float) = 1
//       _ScaleY ("Scale Y", Float) = 1
//       _PerspectiveFilter ("Perspective Correction", Range(0,1)) = 0.875
//       _VertexOffsetX ("Vertex OffsetX", Float) = 0
//       _VertexOffsetY ("Vertex OffsetY", Float) = 0
//      }
//      SubShader 1/1 {
//        LOD 300
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 2/3 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull [_CullMode]
//          Blend SrcAlpha One
//          ColorMask RGB
//          GpuProgramID 119496
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 43
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from TMPro_SDF-Surface 1.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 115 9 0
//   Keywords { "POINT" "FOG_EXP2" }
//   undeciphered2: 1 5 4 5 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 656
//   Vector 96 [_LightColor0]
//   Vector 112 [_SpecColor]
//   Float 192 [_FaceUVSpeedX]
//   Float 196 [_FaceUVSpeedY]
//   Vector 208 [_FaceColor]
//   Float 228 [_OutlineSoftness]
//   Float 232 [_OutlineUVSpeedX]
//   Float 236 [_OutlineUVSpeedY]
//   Vector 240 [_OutlineColor]
//   Float 256 [_OutlineWidth]
//   Float 260 [_Bevel]
//   Float 264 [_BevelOffset]
//   Float 268 [_BevelWidth]
//   Float 272 [_BevelClamp]
//   Float 276 [_BevelRoundness]
//   Float 280 [_BumpOutline]
//   Float 284 [_BumpFace]
//   Float 512 [_ShaderFlags]
//   Float 524 [_ScaleRatioA]
//   Float 584 [_TextureWidth]
//   Float 588 [_TextureHeight]
//   Float 592 [_GradientScale]
//   Float 612 [_FaceShininess]
//   Float 616 [_OutlineShininess]
//   Matrix 128 [_LightMatrix0]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   ConstBuffer "UnityFog" 32
//   Vector 16 [unity_FogParams]
//   SetTexture 0 [_MainTex] 2D 4
//   SetTexture 1 [_FaceTex] 2D 1
//   SetTexture 2 [_OutlineTex] 2D 2
//   SetTexture 3 [_BumpMap] 2D 3
//   SetTexture 4 [_LightTexture0] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityFog" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:44:25 2016
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[39];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float3 v5 : TEXCOORD4,
  float4 v6 : COLOR0,
  float2 v7 : TEXCOORD5,
  float w7 : TEXCOORD7,
  float3 v8 : TEXCOORD6,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 4be457ef2ae966cf-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = cb0[16].z + v7.x;
  r1.xy = float2(1,1) / cb0[36].zw;
  r1.z = 0;
  r2.xyzw = v1.xyxy + -r1.xzzy;
  r1.xyzw = v1.xyxy + r1.xzzy;
  r3.xyzw = t0.Sample(s4_s, r2.xy).wxyz;
  r2.xyzw = t0.Sample(s4_s, r2.zw).xyzw;
  r3.z = r2.w;
  r2.xyzw = t0.Sample(s4_s, r1.xy).xyzw;
  r1.xyzw = t0.Sample(s4_s, r1.zw).xyzw;
  r3.w = r1.w;
  r3.y = r2.w;
  r0.xyzw = r3.xyzw + r0.xxxx;
  r0.xyzw = float4(-0.5,-0.5,-0.5,-0.5) + r0.xyzw;
  r1.x = cb0[16].x + cb0[16].w;
  r1.x = max(0.00999999978, r1.x);
  r0.xyzw = r0.xyzw / r1.xxxx;
  r1.x = cb0[16].y * r1.x;
  r1.x = cb0[37].x * r1.x;
  r1.x = -2 * r1.x;
  r0.xyzw = saturate(float4(0.5,0.5,0.5,0.5) + r0.xyzw);
  r2.xyzw = r0.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
  r2.xyzw = float4(1,1,1,1) + -abs(r2.xyzw);
  r1.y = 0.5 * cb0[32].x;
  r1.z = cmp(r1.y >= -r1.y);
  r1.y = frac(abs(r1.y));
  r1.y = r1.z ? r1.y : -r1.y;
  r1.y = cmp(r1.y >= 0.5);
  r0.xyzw = r1.yyyy ? r2.xyzw : r0.xyzw;
  r2.xyzw = float4(1.57079601,1.57079601,1.57079601,1.57079601) * r0.xyzw;
  r2.xyzw = sin(r2.xyzw);
  r2.xyzw = r2.xyzw + -r0.xyzw;
  r0.xyzw = cb0[17].yyyy * r2.xyzw + r0.xyzw;
  r1.y = 1 + -cb0[17].x;
  r0.xyzw = min(r1.yyyy, r0.xyzw);
  r0.xz = r0.xz * r1.xx;
  r0.yz = r0.wy * r1.xx + -r0.zx;
  r0.xw = float2(-1,1);
  r1.x = dot(r0.xy, r0.xy);
  r1.x = rsqrt(r1.x);
  r0.w = dot(r0.zw, r0.zw);
  r0.w = rsqrt(r0.w);
  r2.x = r0.z * r0.w;
  r2.yz = float2(1,0) * r0.ww;
  r0.z = 0;
  r0.xyz = r0.xyz * r1.xxx;
  r1.xyz = r2.xyz * r0.xyz;
  r0.xyz = r2.zxy * r0.yzx + -r1.xyz;
  r1.xy = cb0[14].zw * cb1[0].yy + v1.zw;
  r1.xyzw = t2.Sample(s2_s, r1.xy).xyzw;
  r1.xyz = cb0[15].xyz * r1.xyz;
  r0.w = cb0[15].w * v6.w;
  r2.w = r0.w * r1.w;
  r2.xyz = r2.www * r1.xyz;
  r1.xy = cb0[12].xy * cb1[0].yy + v1.zw;
  r1.xyzw = t1.Sample(s1_s, r1.xy).xyzw;
  r3.xyzw = cb0[13].wxyz * v6.wxyz;
  r1.w = r3.x * r1.w;
  r1.xyz = r3.yzw * r1.www;
  r2.xyzw = r2.xyzw + -r1.xyzw;
  r0.w = cb0[32].w * cb0[16].x;
  r0.w = v7.y * r0.w;
  r3.x = min(1, r0.w);
  r3.x = sqrt(r3.x);
  r4.xyzw = t0.Sample(s4_s, v1.xy).xyzw;
  r3.y = 0.5 + -r4.w;
  r3.y = -v7.x + r3.y;
  r3.y = r3.y * v7.y + 0.5;
  r3.z = saturate(r0.w * 0.5 + r3.y);
  r0.w = -r0.w * 0.5 + r3.y;
  r3.x = r3.z * r3.x;
  r1.xyzw = r3.xxxx * r2.xyzw + r1.xyzw;
  r2.x = cb0[32].w * cb0[14].y;
  r2.y = v7.y * r2.x;
  r2.x = r2.x * v7.y + 1;
  r0.w = r2.y * 0.5 + r0.w;
  r0.w = saturate(r0.w / r2.x);
  r0.w = 1 + -r0.w;
  r1.xyzw = r1.xyzw * r0.wwww;
  r0.w = cb0[17].z + -cb0[17].w;
  r0.w = r3.z * r0.w + cb0[17].w;
  r2.xyzw = t3.Sample(s3_s, v1.zw).xyzw;
  r2.xy = r2.wy * float2(2,2) + float2(-1,-1);
  r2.w = dot(r2.xy, r2.xy);
  r2.w = min(1, r2.w);
  r2.w = 1 + -r2.w;
  r2.z = sqrt(r2.w);
  r2.xyz = r2.xyz * r0.www + float3(-0,-0,-1);
  r2.xyz = r1.www * r2.xyz + float3(0,0,1);
  r0.xyz = -r2.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r2.x = dot(v2.xyz, -r0.xyz);
  r2.y = dot(v3.xyz, -r0.xyz);
  r2.z = dot(v4.xyz, -r0.xyz);
  r0.xyz = cb2[0].xyz + -v5.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r3.xyw = _WorldSpaceCameraPos.xyz + -v5.xyz;
  r0.w = dot(r3.xyw, r3.xyw);
  r0.w = rsqrt(r0.w);
  r3.xyw = r3.xyw * r0.www + r0.xyz;
  r0.x = dot(r2.xyz, r0.xyz);
  r0.y = dot(r3.xyw, r3.xyw);
  r0.y = rsqrt(r0.y);
  r0.yzw = r3.xyw * r0.yyy;
  r0.y = dot(r2.xyz, r0.yzw);
  r0.xy = max(float2(0,0), r0.xy);
  r0.y = log2(r0.y);
  r0.z = cb0[38].z + -cb0[38].y;
  r0.z = r3.z * r0.z + cb0[38].y;
  r0.z = 128 * r0.z;
  r0.y = r0.z * r0.y;
  r0.y = exp2(r0.y);
  r2.xyz = cb0[9].xyz * v5.yyy;
  r2.xyz = cb0[8].xyz * v5.xxx + r2.xyz;
  r2.xyz = cb0[10].xyz * v5.zzz + r2.xyz;
  r2.xyz = cb0[11].xyz + r2.xyz;
  r0.z = dot(r2.xyz, r2.xyz);
  r2.xyzw = t4.Sample(s0_s, r0.zz).xyzw;
  r2.xyz = cb0[6].xyz * r2.xxx;
  r3.xyz = cb0[7].xyz * r2.xyz;
  r0.yzw = r3.xyz * r0.yyy;
  r1.xyz = r1.xyz / r1.www;
  o0.w = r1.w;
  r1.xyz = r1.xyz * r2.xyz;
  r0.xyz = r1.xyz * r0.xxx + r0.yzw;
  r0.w = cb3[1].x * w7.x;
  r0.w = -r0.w * r0.w;
  r0.w = exp2(r0.w);
  o0.xyz = r0.www * r0.xyz;
  return;
}
