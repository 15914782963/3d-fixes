// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe d285f654a2b5e8a8-ps_replace.txt
// 3DMigoto: d285f654a2b5e8a8 |    Unity headers extracted from SnowPack01_WithTexSnow.shader
//    Shader "Custom/SnowShader01_WithTex" {
//      Properties {
//       _MainTex ("Base (RGB)", 2D) = "white" { }
//       _SnowTex ("Snow Texture", 2D) = "white" { }
//       _Snow ("Snow Level", Float) = 10
//       _SnowColor ("Snow Color", Color) = (1,1,1,1)
//       _SnowDirection ("Snow Direction", Vector) = (0,1,0,1)
//       _SnowDepth ("Snow Depth (unused)", Float) = 0.1
//       _Wetness ("Wetness", Float) = 0.3
//       _Fresnelcolor ("Fresnel Color", Color) = (1,1,1,1)
//       _Fresnelexponent ("Fresnel exponent", Float) = 24
//       _Fresnelbias ("Fresnel bias", Float) = 0.2
//       _Fresnelgain ("Fresnel gain", Range(0,1)) = 0.2
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "QUEUE"="Geometry" "RenderType"="Opaque" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          GpuProgramID 12482
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 45
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from SnowPack01_WithTexSnow.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 42 2 0
//   Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "LOD_FADE_CROSSFADE" }
//   undeciphered2: 1 2 4 2 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 256
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Float 128 [_Snow]
//   Vector 144 [_SnowColor]
//   Vector 160 [_SnowDirection]
//   Float 180 [_Wetness]
//   Float 184 [_Fresnelexponent]
//   Float 188 [_Fresnelbias]
//   Float 192 [_Fresnelgain]
//   Vector 208 [_Fresnelcolor]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 608 [unity_SHAr]
//   Vector 624 [unity_SHAg]
//   Vector 640 [unity_SHAb]
//   ConstBuffer "UnityFog" 32
//   Vector 0 [unity_FogColor]
//   Vector 16 [unity_FogParams]
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_SnowTex] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityFog" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:46:06 2016
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[41];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[14];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float w2 : TEXCOORD5,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD6,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe d285f654a2b5e8a8-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyz = _WorldSpaceCameraPos.xyz + -v3.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.x = dot(r0.xyz, v2.xyz);
  r0.x = max(0, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = log2(r0.x);
  r0.x = cb0[11].z * r0.x;
  r0.x = exp2(r0.x);
  r0.x = saturate(-cb0[11].w + r0.x);
  r0.x = cb0[12].x * r0.x;
  r0.x = 0.5 * r0.x;
  r0.xyz = cb0[13].xyz * r0.xxx;
  r1.xyz = v2.xyz;
  r1.w = 1;
  r2.x = dot(cb2[38].xyzw, r1.xyzw);
  r2.y = dot(cb2[39].xyzw, r1.xyzw);
  r2.z = dot(cb2[40].xyzw, r1.xyzw);
  r1.xyz = v4.xyz + r2.xyz;
  r1.xyz = max(float3(0,0,0), r1.xyz);
  r2.xyz = log2(r1.xyz);
  r2.xyz = float3(0.416666657,0.416666657,0.416666657) * r2.xyz;
  r2.xyz = exp2(r2.xyz);
  r2.xyz = r2.xyz * float3(1.05499995,1.05499995,1.05499995) + float3(-0.0549999997,-0.0549999997,-0.0549999997);
  r2.xyz = max(float3(0,0,0), r2.xyz);
  r0.w = cmp(cb0[3].w == 0.000000);
  r1.xyz = r0.www ? r2.xyz : r1.xyz;
  r0.w = dot(v2.xyz, cb0[10].xyz);
  r1.w = cb0[8].x * -2 + 1;
  r0.w = -r1.w + r0.w;
  r0.w = saturate(r0.w / cb0[11].y);
  r2.xyzw = t1.Sample(s1_s, v1.zw).xyzw;
  r3.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  r2.xyz = cb0[9].xyz * r2.xyz + -r3.xyz;
  r2.xyz = r0.www * r2.xyz + r3.xyz;
  r1.xyz = r2.xyz * r1.xyz;
  r2.xyz = cb0[6].xyz * r2.xyz;
  r1.w = dot(v2.xyz, cb2[0].xyz);
  r1.w = max(0, r1.w);
  r1.xyz = r2.xyz * r1.www + r1.xyz;
  r0.xyz = r0.www * r0.xyz + r1.xyz;
  r0.xyz = -cb3[0].xyz + r0.xyz;
  r0.w = cb3[1].x * w2.x;
  r0.w = -r0.w * r0.w;
  r0.w = exp2(r0.w);
  o0.xyz = r0.www * r0.xyz + cb3[0].xyz;
  o0.w = 1;
  return;
}
