// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 56d063dc45a73ae1-ps_replace.txt
// 3DMigoto: 56d063dc45a73ae1 |    Unity headers extracted from AddPass_Custom.shader
//    Shader "_LongDark/TerrainEngine/Splatmap/Diffuse-AddPass" {
//      Properties {
//      [HideInInspector]  _Control ("Control (RGBA)", 2D) = "black" { }
//      [HideInInspector]  _Splat3 ("Layer 3 (A)", 2D) = "white" { }
//      [HideInInspector]  _Splat2 ("Layer 2 (B)", 2D) = "white" { }
//      [HideInInspector]  _Splat1 ("Layer 1 (G)", 2D) = "white" { }
//      [HideInInspector]  _Splat0 ("Layer 0 (R)", 2D) = "white" { }
//      [HideInInspector]  _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
//      [HideInInspector]  _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
//      [HideInInspector]  _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
//      [HideInInspector]  _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
//       _Fresnelcolor ("Fresnel Color", Color) = (1,1,1,1)
//       _Fresnelexponent ("Fresnel exponent", Float) = 24
//       _Fresnelbias ("Fresnel bias", Float) = 0.2
//       _Fresnelgain ("Fresnel gain", Range(0,1)) = 0.2
//      }
//      Fallback Off
//      SubShader 2/2 {
//        Tags { "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          ZWrite Off
//          Blend One One
//          GpuProgramID 416749
//          Program "fp" {
//            SubProgram "d3d11_9x " {
//              GpuProgramIndex 216
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from AddPass_Custom.shader.decompressed:
//   API d3d11_9x
//   Shader model ps_4_0_level_9_1
//   undeciphered1: 28 5 0
//   Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
//   undeciphered2: 1 5 3 5 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 240
//   Vector 96 [_LightColor0]
//   Float 144 [_Fresnelexponent]
//   Float 148 [_Fresnelbias]
//   Float 152 [_Fresnelgain]
//   Vector 160 [_Fresnelcolor]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   SetTexture 0 [_Control] 2D 0
//   SetTexture 1 [_Splat0] 2D 1
//   SetTexture 2 [_Splat1] 2D 2
//   SetTexture 3 [_Splat2] 2D 3
//   SetTexture 4 [_Splat3] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:47:31 2016
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[11];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float3 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 56d063dc45a73ae1-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = t0.Sample(s0_s, v5.xy).xyzw;
  r1.x = dot(r0.xyzw, float4(1,1,1,1));
  r1.yz = float2(-0.00389999989,0.00100000005) + r1.xx;
  r1.y = cmp(r1.y < 0);
  r0.xyzw = r0.xyzw / r1.zzzz;
  if (r1.y != 0) discard;
  r2.xyzw = t1.Sample(s1_s, v1.xy).xyzw;
  r3.xyzw = t2.Sample(s2_s, v1.zw).xyzw;
  r1.yzw = r3.xyz * r0.yyy;
  r1.yzw = r0.xxx * r2.xyz + r1.yzw;
  r2.xyzw = t3.Sample(s3_s, v2.xy).xyzw;
  r0.xyz = r0.zzz * r2.xyz + r1.yzw;
  r2.xyzw = t4.Sample(s4_s, v2.zw).xyzw;
  r0.xyz = r0.www * r2.xyz + r0.xyz;
  r1.yzw = cb0[6].xyz * r0.xyz;
  r0.xyz = v6.xyz * r0.xyz;
  r0.w = dot(v3.xyz, cb2[0].xyz);
  r0.w = max(0, r0.w);
  r0.xyz = r1.yzw * r0.www + r0.xyz;
  r1.yzw = _WorldSpaceCameraPos.xyz + -v4.xyz;
  r0.w = dot(r1.yzw, r1.yzw);
  r0.w = rsqrt(r0.w);
  r1.yzw = r1.yzw * r0.www;
  r0.w = dot(r1.yzw, v3.xyz);
  r0.w = max(0, r0.w);
  r0.w = 1 + -r0.w;
  r0.w = log2(r0.w);
  r0.w = cb0[9].x * r0.w;
  r0.w = exp2(r0.w);
  r0.w = saturate(-cb0[9].y + r0.w);
  r0.w = cb0[9].z * r0.w;
  r0.xyz = r0.www * cb0[10].xyz + r0.xyz;
  r0.xyz = r0.xyz * r1.xxx;
  r0.w = saturate(v5.z);
  o0.xyz = r0.www * r0.xyz;
  o0.w = 1;
  return;
}
