// Footprint decals VS c5b88250a3854dc7 PS 5a445e92009a5c20

// 3DMigoto: 5a445e92009a5c20 |    Unity headers extracted from TLD_DecalNormals.shader
//    Shader "_LongDark/Decal/DecalShader Normals" {
//      Properties {
//       _MainTex ("Diffuse", 2D) = "white" { }
//       _BumpMap ("Normals", 2D) = "bump" { }
//      }
//      Fallback Off
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZWrite Off
//          GpuProgramID 46646
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 3
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from TLD_DecalNormals.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 53 4 0
//   undeciphered2: 1 4 4 4 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 176
//   Vector 96 [_ImprintInfo]
//   Vector 112 [_MainTexUV]
//   Vector 128 [_BumpMapUV]
//   Vector 144 [_LocalNormal] 3
//   Vector 160 [_DecalParams]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 80 [_ProjectionParams]
//   Vector 112 [_ZBufferParams]
//   ConstBuffer "UnityPerDraw" 352
//   Matrix 256 [_World2Object]
//   ConstBuffer "UnityPerCamera2" 64
//   Matrix 0 [_CameraToWorld]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NormalsCopy] 2D 3
//   SetTexture 2 [_MainTex] 2D 0
//   SetTexture 3 [_BumpMap] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//   BindCB "UnityPerCamera2" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:46:17 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[4];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[20];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[11];
}


// Copied from the directional lighting shader using 3DMigoto
cbuffer UnityPerCameraRare : register(b13)
{
  uniform float4 unity_CameraWorldClipPlanes[6];

  // Projection matrices of the camera. Note that this might be different from projection matrix
  // that is set right now, e.g. while rendering shadows the matrices below are still the projection
  // of original camera.
  row_major uniform float4x4 unity_CameraProjection;
  row_major uniform float4x4 unity_CameraInvProjection;
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float w2 : TEXCOORD5,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float3 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s2_s, r1.xy).xyzw;
  r1.xyzw = t1.Sample(s3_s, r1.xy).xyzw;
  r1.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r0.xyz = r0.xyz * r0.www;

float4 stereo = StereoParams.Load(0);
r0.x -= stereo.x * (r0.z - stereo.y) * unity_CameraInvProjection[0].x;

  r2.xyz = cb3[1].xyz * r0.yyy;
  r0.xyw = cb3[0].xyz * r0.xxx + r2.xyz;
  r0.xyz = cb3[2].xyz * r0.zzz + r0.xyw;
  r0.xyz = cb3[3].xyz + r0.xyz;
  r2.xyz = cb2[17].xyz * r0.yyy;
  r0.xyw = cb2[16].xyz * r0.xxx + r2.xyz;
  r0.xyz = cb2[18].xyz * r0.zzz + r0.xyw;
  r0.yzw = cb2[19].xyz + r0.xyz;
  r1.w = saturate(1.10000002 * cb0[9].y);
  r2.x = 1 + -r1.w;
  r1.w = 0.449999988 * r1.w;
  r2.y = r2.x * 0.5 + 0.49000001;
  r2.xz = float2(0.49000001,0.49000001);
  r2.xyz = r2.xyz + -abs(r0.yzw);
  r2.xyz = -cb0[9].xyz * r1.www + r2.xyz;
  r2.xyz = cmp(r2.xyz < float3(0,0,0));
  r0.z = (int)r2.y | (int)r2.x;
  r0.z = (int)r2.z | (int)r0.z;
  if (r0.z != 0) discard;
  r0.x = cb0[6].y * r0.y;
  r0.yz = r0.xw * cb0[7].zw + cb0[7].xy;
  r0.xw = r0.xw * cb0[8].zw + cb0[8].xy;
  r2.xyzw = t3.Sample(s1_s, r0.xw).xyzw;
  r0.xw = r2.wy * float2(2,2) + float2(-1,-1);
  r2.xyzw = t2.Sample(s0_s, r0.yz).xyzw;
  r0.y = -0.0500000007 + r2.w;
  r0.y = cmp(r0.y < 0);
  if (r0.y != 0) discard;
  r0.y = cb0[6].y * r0.x;
  r2.xyz = v5.xyz * r0.www;
  r0.x = dot(r0.xw, r0.xw);
  r0.x = min(1, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = sqrt(r0.x);
  r0.yzw = r0.yyy * v3.xyz + r2.xyz;
  r0.xyz = r0.xxx * v4.xyz + r0.yzw;
  r0.xyz = r0.xyz + -r1.xyz;
  r0.w = dot(r1.xyz, cb0[9].xyz);
  r0.w = -0.5 + r0.w;
  r0.w = saturate(r0.w + r0.w);
  r1.w = r0.w * -2 + 3;
  r0.w = r0.w * r0.w;
  r0.w = r1.w * r0.w;
  r0.w = r0.w * r2.w;
  r0.w = w2.x * r0.w;
  r0.w = cb0[10].x * r0.w;
  r0.xyz = r0.www * r0.xyz + r1.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  o0.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.w = 1;
  return;
}
