// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe e7af31a4cc866124-ps_replace.txt
// 3DMigoto: e7af31a4cc866124 |    Unity headers extracted from Standard-AddPass.shader
//    Shader "Hidden/TerrainEngine/Splatmap/Standard-AddPass" {
//      Properties {
//      [HideInInspector]  _Control ("Control (RGBA)", 2D) = "red" { }
//      [HideInInspector]  _Splat3 ("Layer 3 (A)", 2D) = "white" { }
//      [HideInInspector]  _Splat2 ("Layer 2 (B)", 2D) = "white" { }
//      [HideInInspector]  _Splat1 ("Layer 1 (G)", 2D) = "white" { }
//      [HideInInspector]  _Splat0 ("Layer 0 (R)", 2D) = "white" { }
//      [HideInInspector]  _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
//      [HideInInspector]  _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
//      [HideInInspector]  _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
//      [HideInInspector]  _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
//      [HideInInspector] [Gamma]  _Metallic0 ("Metallic 0", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic1 ("Metallic 1", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic2 ("Metallic 2", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic3 ("Metallic 3", Range(0,1)) = 0
//      [HideInInspector]  _Smoothness0 ("Smoothness 0", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness1 ("Smoothness 1", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness2 ("Smoothness 2", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness3 ("Smoothness 3", Range(0,1)) = 1
//      }
//      Fallback "Hidden/TerrainEngine/Splatmap/Diffuse-AddPass"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
//        Pass 3/3 {
//          Name "DEFERRED"
//          Tags { "LIGHTMODE"="Deferred" "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
//          ZWrite Off
//          Blend One One
//          GpuProgramID 143197
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 271
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Standard-AddPass.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 120 9 4
//   Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_TERRAIN_NORMAL_MAP" }
//   undeciphered2: 1 11 4 11 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 256
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Float 144 [_Metallic0]
//   Float 148 [_Metallic1]
//   Float 152 [_Metallic2]
//   Float 156 [_Metallic3]
//   Float 160 [_Smoothness0]
//   Float 164 [_Smoothness1]
//   Float 168 [_Smoothness2]
//   Float 172 [_Smoothness3]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 608 [unity_SHAr]
//   Vector 624 [unity_SHAg]
//   Vector 640 [unity_SHAb]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   SetTexture 0 [_Control] 2D 2
//   SetTexture 1 [_Splat0] 2D 3
//   SetTexture 2 [_Splat1] 2D 4
//   SetTexture 3 [_Splat2] 2D 5
//   SetTexture 4 [_Splat3] 2D 6
//   SetTexture 5 [_Normal0] 2D 7
//   SetTexture 6 [_Normal1] 2D 8
//   SetTexture 7 [_Normal2] 2D 9
//   SetTexture 8 [_Normal3] 2D 10
//   SetTexture 9 [unity_SpecCube0] CUBE 0
//   SetTexture 10 [unity_SpecCube1] CUBE 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:42:54 2016
TextureCube<float4> t10 : register(t10);

TextureCube<float4> t9 : register(t9);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s10_s : register(s10);

SamplerState s9_s : register(s9);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[41];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[11];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD7,
  float3 v8 : TEXCOORD8,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe e7af31a4cc866124-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = v3.w;
  r0.y = v4.w;
  r0.z = v5.w;
  r1.xyz = _WorldSpaceCameraPos.xyz + -r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xyzw = t0.Sample(s2_s, v6.xy).xyzw;
  r0.w = dot(r2.xyzw, float4(1,1,1,1));
  r3.xy = float2(-0.00389999989,0.00100000005) + r0.ww;
  r1.w = cmp(r3.x < 0);
  if (r1.w != 0) discard;
  r2.xyzw = r2.xyzw / r3.yyyy;
  r3.xyzw = t1.Sample(s3_s, v1.xy).xyzw;
  r3.xyzw = r3.xyzw * r2.xxxx;
  r3.w = cb0[10].x * r3.w;
  r4.xyzw = t2.Sample(s4_s, v1.zw).xyzw;
  r4.xyzw = r4.xyzw * r2.yyyy;
  r4.w = cb0[10].y * r4.w;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = t3.Sample(s5_s, v2.xy).xyzw;
  r4.xyzw = r4.xyzw * r2.zzzz;
  r4.w = cb0[10].z * r4.w;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = t4.Sample(s6_s, v2.zw).xyzw;
  r4.xyzw = r4.xyzw * r2.wwww;
  r4.w = cb0[10].w * r4.w;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = t5.Sample(s7_s, v1.xy).xyzw;
  r5.xyzw = t6.Sample(s8_s, v1.zw).xyzw;
  r4.xz = r5.wy * r2.yy;
  r4.xy = r2.xx * r4.wy + r4.xz;
  r5.xyzw = t7.Sample(s9_s, v2.xy).xyzw;
  r4.xy = r2.zz * r5.wy + r4.xy;
  r5.xyzw = t8.Sample(s10_s, v2.zw).xyzw;
  r4.xy = r2.ww * r5.wy + r4.xy;
  r4.xy = r4.xy * float2(2,2) + float2(-1,-1);
  r1.w = dot(r4.xy, r4.xy);
  r1.w = min(1, r1.w);
  r1.w = 1 + -r1.w;
  r4.z = sqrt(r1.w);
  r1.w = dot(r2.xyzw, cb0[9].xyzw);
  r2.x = dot(v3.xyz, r4.xyz);
  r2.y = dot(v4.xyz, r4.xyz);
  r2.z = dot(v5.xyz, r4.xyz);
  r4.x = 1 + -r3.w;
  r4.y = dot(-r1.xyz, r2.xyz);
  r4.y = r4.y + r4.y;
  r4.yzw = r2.xyz * -r4.yyy + -r1.xyz;
  r2.w = 1;
  r5.x = dot(cb2[38].xyzw, r2.xyzw);
  r5.y = dot(cb2[39].xyzw, r2.xyzw);
  r5.z = dot(cb2[40].xyzw, r2.xyzw);
  r5.xyz = v8.xyz + r5.xyz;
  r5.xyz = max(float3(0,0,0), r5.xyz);
  r2.w = cmp(cb0[3].w == 0.000000);
  r6.xyz = log2(r5.xyz);
  r6.xyz = float3(0.416666657,0.416666657,0.416666657) * r6.xyz;
  r6.xyz = exp2(r6.xyz);
  r6.xyz = r6.xyz * float3(1.05499995,1.05499995,1.05499995) + float3(-0.0549999997,-0.0549999997,-0.0549999997);
  r6.xyz = max(float3(0,0,0), r6.xyz);
  r5.xyz = r2.www ? r6.xyz : r5.xyz;
  r5.w = cmp(0 < cb3[2].w);
  if (r5.w != 0) {
    r5.w = dot(r4.yzw, r4.yzw);
    r5.w = rsqrt(r5.w);
    r6.xyz = r5.www * r4.yzw;
    r7.xyz = cb3[0].xyz + -r0.xyz;
    r7.xyz = r7.xyz / r6.xyz;
    r8.xyz = cb3[1].xyz + -r0.xyz;
    r8.xyz = r8.xyz / r6.xyz;
    r9.xyz = cmp(float3(0,0,0) < r6.xyz);
    r7.xyz = r9.xyz ? r7.xyz : r8.xyz;
    r5.w = min(r7.x, r7.y);
    r5.w = min(r5.w, r7.z);
    r7.xyz = -cb3[2].xyz + r0.xyz;
    r6.xyz = r6.xyz * r5.www + r7.xyz;
  } else {
    r6.xyz = r4.yzw;
  }
  r5.w = -r4.x * 0.699999988 + 1.70000005;
  r5.w = r5.w * r4.x;
  r5.w = 6 * r5.w;
  r6.xyzw = t9.SampleLevel(s0_s, r6.xyz, r5.w).xyzw;
  r6.w = log2(r6.w);
  r6.w = cb3[3].y * r6.w;
  r6.w = exp2(r6.w);
  r6.w = cb3[3].x * r6.w;
  r7.xyz = r6.www * r6.xyz;
  r7.w = cmp(cb3[1].w < 0.999989986);
  if (r7.w != 0) {
    r7.w = cmp(0 < cb3[6].w);
    if (r7.w != 0) {
      r7.w = dot(r4.yzw, r4.yzw);
      r7.w = rsqrt(r7.w);
      r8.xyz = r7.www * r4.yzw;
      r9.xyz = cb3[4].xyz + -r0.xyz;
      r9.xyz = r9.xyz / r8.xyz;
      r10.xyz = cb3[5].xyz + -r0.xyz;
      r10.xyz = r10.xyz / r8.xyz;
      r11.xyz = cmp(float3(0,0,0) < r8.xyz);
      r9.xyz = r11.xyz ? r9.xyz : r10.xyz;
      r7.w = min(r9.x, r9.y);
      r7.w = min(r7.w, r9.z);
      r0.xyz = -cb3[6].xyz + r0.xyz;
      r4.yzw = r8.xyz * r7.www + r0.xyz;
    }
    r8.xyzw = t10.SampleLevel(s1_s, r4.yzw, r5.w).xyzw;
    r0.x = log2(r8.w);
    r0.x = cb3[7].y * r0.x;
    r0.x = exp2(r0.x);
    r0.x = cb3[7].x * r0.x;
    r0.xyz = r0.xxx * r8.xyz;
    r4.yzw = r6.www * r6.xyz + -r0.xyz;
    r7.xyz = cb3[1].www * r4.yzw + r0.xyz;
  }
  r0.xyz = -cb0[2].xyz + r3.xyz;
  r6.xyz = r1.www * r0.xyz + cb0[2].xyz;
  r0.x = -r1.w * cb0[2].w + cb0[2].w;
  r3.xyz = r3.xyz * r0.xxx;
  r0.y = dot(r2.xyz, r1.xyz);
  r0.z = cmp(r0.y < 0);
  r0.y = 9.99999975e-006 + -r0.y;
  r4.yzw = r1.xyz * r0.yyy + r2.xyz;
  r4.yzw = r0.zzz ? r4.yzw : r2.xyz;
  r0.y = dot(r4.yzw, r1.xyz);
  r0.y = max(0, r0.y);
  r0.z = r4.x * r4.x;
  r1.x = r4.x * r0.z;
  r1.x = -r1.x * 0.280000001 + 1;
  r0.z = r0.z * r0.z + 1;
  r0.z = 1 / r0.z;
  r0.z = r2.w ? r1.x : r0.z;
  r0.x = r3.w + -r0.x;
  r0.x = saturate(1 + r0.x);
  r1.xyz = r0.zzz * r7.xyz;
  r0.y = 1 + -r0.y;
  r0.z = r0.y * r0.y;
  r0.z = r0.z * r0.z;
  r0.y = r0.z * r0.y;
  r4.xyz = r0.xxx + -r6.xyz;
  r0.xyz = r0.yyy * r4.xyz + r6.xyz;
  r0.xyz = r1.xyz * r0.xyz;
  r1.xyz = r3.xyz * r5.xyz + r0.xyz;
  r0.xyz = r2.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.xyz = r3.xyz * r0.www;
  r6.w = r3.w;
  o1.xyzw = r6.xyzw * r0.wwww;
  o2.xyz = r0.xyz * r0.www;
  r1.w = 1;
  o3.xyzw = r1.xyzw * r0.wwww;
  o0.w = 1;
  o2.w = 1;
  return;
}
