// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 18a51684eaa6a060-ps_replace.txt
// 3DMigoto: 18a51684eaa6a060 |    Unity headers extracted from TLD_StandardOpaque.shader
//    Shader "Shader Forge/TLD_StandardOpaque" {
//      Properties {
//       _Color ("Main colour", Color) = (1,1,1,1)
//      [MaterialToggle]  _UseVertexColour ("Use Vertex Colour", Float) = 0
//       _MainTex ("MainTex", 2D) = "gray" { }
//       _DetailOverlay ("DetailOverlay", 2D) = "gray" { }
//       _DetailStrength ("DetailStrength", Float) = 0
//       _DetailTiling ("DetailTiling", Float) = 1
//       _AmbientOcclusion ("Ambient Occlusion", 2D) = "white" { }
//       _AOBlackness ("AO Blackness", Range(0,1)) = 1
//       _Emissive ("Emissive", 2D) = "black" { }
//       _EmissiveStrength ("EmissiveStrength", Range(0,1)) = 0
//      [MaterialToggle]  _ColourizeEmissive ("Colourize Emissive", Float) = 1
//      }
//      Fallback "Legacy Shaders/Diffuse"
//      SubShader 1/1 {
//        Tags { "RenderType"="Opaque" }
//        Pass 3/3 {
//          Name "FORWARD_DELTA"
//          Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          Blend One One
//          GpuProgramID 176315
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 262
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from TLD_StandardOpaque.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 72 4 0
//   Keywords { "POINT" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" }
//   undeciphered2: 1 4 3 4 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 320
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 160 [_LightColor0]
//   Vector 192 [_MainTex_ST]
//   Vector 240 [_DetailOverlay_ST]
//   Float 256 [_AOBlackness]
//   Vector 272 [_AmbientOcclusion_ST]
//   Vector 288 [_Color]
//   Float 304 [_UseVertexColour]
//   Float 312 [_DetailTiling]
//   Float 316 [_DetailStrength]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   SetTexture 0 [_LightTexture0] 2D 0
//   SetTexture 1 [_DetailOverlay] 2D 2
//   SetTexture 2 [_MainTex] 2D 1
//   SetTexture 3 [_AmbientOcclusion] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:38:26 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[20];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float2 w1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  float4 v4 : TEXCOORD4,
  float4 v5 : TEXCOORD5,
  float3 v6 : TEXCOORD6,
  float4 v7 : COLOR0,
  float3 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 18a51684eaa6a060-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xy = v1.xy * cb0[12].xy + cb0[12].zw;
  r0.xyzw = t2.Sample(s1_s, r0.xy).xyzw;
  r1.xyz = float3(-1,-1,-1) + v7.xyz;
  r1.xyz = cb0[19].xxx * r1.xyz + float3(1,1,1);
  r0.xyz = saturate(r1.xyz * r0.xyz);
  r1.xy = cb0[19].zz * v1.xy;
  r1.xy = r1.xy * cb0[15].xy + cb0[15].zw;
  r1.xyzw = t1.Sample(s2_s, r1.xy).xyzw;
  r0.xyz = cb0[19].www * r1.xyz + r0.xyz;
  r0.xyz = max(float3(0,0,0), r0.xyz);
  r0.xyz = cb0[18].xyz * r0.xyz;
  r1.xy = w1.xy * cb0[17].xy + cb0[17].zw;
  r1.xyzw = t3.Sample(s3_s, r1.xy).xyzw;
  r1.xyz = max(cb0[16].xxx, r1.xyz);
  r0.xyz = r1.xyz * r0.xyz;
  r1.xyz = cb2[0].www * -v3.xyz + cb2[0].xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = _WorldSpaceCameraPos.xyz + -v3.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r2.xyz * r0.www + r1.xyz;
  r2.xyz = r2.xyz * r0.www;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.w = dot(v4.xyz, v4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = v4.xyz * r0.www;
  r0.w = dot(r4.xyz, r3.xyz);
  r1.w = dot(r1.xyz, r3.xyz);
  r1.x = dot(r4.xyz, r1.xyz);
  r1.y = dot(r4.xyz, r2.xyz);
  r1.xyz = max(float3(0,0,0), r1.xyw);
  r0.w = max(0, r0.w);
  r1.w = log2(r0.w);
  r0.w = r0.w * r0.w;
  r1.w = 9.99999975e-005 * r1.w;
  r1.w = exp2(r1.w);
  r1.w = 0.318325758 * r1.w;
  r2.x = r1.y * 0.202115417 + 0.797884583;
  r1.y = 1.00001001 + -r1.y;
  r2.y = r1.x * 0.202115417 + 0.797884583;
  r2.x = r2.y * r2.x + 9.99999975e-006;
  r2.x = 1 / r2.x;
  r2.x = r2.x * r1.x;
  r1.w = r2.x * r1.w;
  r2.x = cmp(cb0[3].w == 0.000000);
  r2.x = r2.x ? 0.616850257 : 0.785398185;
  r1.w = r2.x * r1.w;
  r2.x = dot(v8.xyz, v8.xyz);
  r2.xyzw = t0.Sample(s0_s, r2.xx).xyzw;
  r2.xyz = cb0[10].xyz * r2.xxx;
  r3.xyz = r2.xyz * r0.www;
  r3.xyz = r3.xyz * r1.www;
  r3.xyz = cb0[10].xyz * r3.xyz;
  r0.w = 1 + -r1.z;
  r1.w = r0.w * r0.w;
  r1.w = r1.w * r1.w;
  r0.w = r1.w * r0.w;
  r3.xyz = r3.xyz * r0.www;
  r0.w = r1.y * r1.y;
  r0.w = r0.w * r0.w;
  r0.w = r1.y * r0.w;
  r1.y = r1.z + r1.z;
  r1.y = r1.y * r1.z + -0.5;
  r0.w = r1.y * r0.w + 1;
  r1.z = 1.00001001 + -r1.x;
  r1.w = r1.z * r1.z;
  r1.w = r1.w * r1.w;
  r1.z = r1.z * r1.w;
  r1.y = r1.y * r1.z + 1;
  r0.w = r1.y * r0.w;
  r0.w = r0.w * r1.x;
  r1.xyz = r0.www * r2.xyz;
  o0.xyz = r1.xyz * r0.xyz + r3.xyz;
  o0.w = 0;
  return;
}
