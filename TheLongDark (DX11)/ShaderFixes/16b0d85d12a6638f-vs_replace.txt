// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 16b0d85d12a6638f-vs_replace.txt
// 3DMigoto: 16b0d85d12a6638f |    Unity headers extracted from Normal-BumpSpec.shader
//    Shader "Legacy Shaders/Bumped Specular" {
//      Properties {
//       _Color ("Main Color", Color) = (1,1,1,1)
//       _SpecColor ("Specular Color", Color) = (0.5,0.5,0.5,1)
//       _Shininess ("Shininess", Range(0.03,1)) = 0.078125
//       _MainTex ("Base (RGB) Gloss (A)", 2D) = "white" { }
//       _BumpMap ("Normalmap", 2D) = "bump" { }
//      }
//      Fallback "Legacy Shaders/Specular"
//      SubShader 1/2 {
//        LOD 400
//        Tags { "RenderType"="Opaque" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          GpuProgramID 44896
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 9
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Normal-BumpSpec.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 41 0 0
//   Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
//   undeciphered2: 1 0 3 0 0
//   undeciphered3: 143 5 0 0 2 1 1 2 3 4 7 8
//   ConstBuffer "$Globals" 192
//   Vector 160 [_MainTex_ST]
//   Vector 176 [_BumpMap_ST]
//   ConstBuffer "UnityLighting" 720
//   Vector 656 [unity_SHBr]
//   Vector 672 [unity_SHBg]
//   Vector 688 [unity_SHBb]
//   Vector 704 [unity_SHC]
//   ConstBuffer "UnityPerDraw" 352
//   Vector 336 [unity_WorldTransformParams]
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 192 [_Object2World]
//   Matrix 256 [_World2Object]
//   BindCB "$Globals" 0
//   BindCB "UnityLighting" 1
//   BindCB "UnityPerDraw" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:45:42 2016
cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[45];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[12];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float3 o5 : TEXCOORD4,
  out float p5 : TEXCOORD6,
  out float4 o6 : TEXCOORD7)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.xyzw = cb2[1].xyzw * v0.yyyy;
  r0.xyzw = cb2[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb2[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = cb2[3].xyzw * v0.wwww + r0.xyzw;
  o0.xyzw = r0.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 16b0d85d12a6638f-vs_replace.txt
if (r0.w != 1.0) { r0.x += separation * (r0.w - convergence); }

  p5.x = r0.z;
  o1.xy = v3.xy * cb0[10].xy + cb0[10].zw;
  o1.zw = v3.xy * cb0[11].xy + cb0[11].zw;
  r0.x = cb2[16].x * v2.x;
  r0.y = cb2[17].x * v2.x;
  r0.zw = cb2[18].xx * v2.xx;
  r1.x = cb2[16].y * v2.y;
  r1.y = cb2[17].y * v2.y;
  r1.zw = cb2[18].yy * v2.yy;
  r0.xyzw = r1.xyzw + r0.xyzw;
  r1.x = cb2[16].z * v2.z;
  r1.y = cb2[17].z * v2.z;
  r1.zw = cb2[18].zz * v2.zz;
  r0.xyzw = r1.xyzw + r0.xyzw;
  r1.x = dot(r0.xyw, r0.xyw);
  r1.x = rsqrt(r1.x);
  r0.xyzw = r1.xxxx * r0.xyzw;
  r1.xyz = cb2[13].yzx * v1.yyy;
  r1.xyz = cb2[12].yzx * v1.xxx + r1.xyz;
  r1.xyz = cb2[14].yzx * v1.zzz + r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r2.xyz = r1.xyz * r0.wxy;
  r2.xyz = r0.ywx * r1.yzx + -r2.xyz;
  r1.w = cb2[21].w * v1.w;
  r2.xyz = r2.xyz * r1.www;
  o2.y = r2.x;
  o2.z = r0.x;
  r3.xyz = cb2[13].xyz * v0.yyy;
  r3.xyz = cb2[12].xyz * v0.xxx + r3.xyz;
  r3.xyz = cb2[14].xyz * v0.zzz + r3.xyz;
  r3.xyz = cb2[15].xyz * v0.www + r3.xyz;
  o2.w = r3.x;
  o2.x = r1.z;
  o3.x = r1.x;
  o4.x = r1.y;
  o3.w = r3.y;
  o4.w = r3.z;
  o3.z = r0.y;
  o3.y = r2.y;
  o4.y = r2.z;
  o4.z = r0.w;
  r1.x = r0.y * r0.y;
  r1.x = r0.x * r0.x + -r1.x;
  r0.xyzw = r0.xyzw * r0.ywzx;
  r2.x = dot(cb1[41].xyzw, r0.xyzw);
  r2.y = dot(cb1[42].xyzw, r0.xyzw);
  r2.z = dot(cb1[43].xyzw, r0.xyzw);
  o5.xyz = cb1[44].xyz * r1.xxx + r2.xyz;
  o6.xyzw = float4(0,0,0,0);
  return;
}
