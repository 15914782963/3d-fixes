// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 2433b71e2898b608-vs_replace.txt
// 3DMigoto: 2433b71e2898b608 |    Unity headers extracted from TLD_WavingVertexLit.shader
//    Shader "_LongDark/Nature/WavingVertexLit" {
//      Properties {
//       _MainTex ("Base (RGB)", 2D) = "white" { }
//       _XZAnimScaleByH ("XZ Anim Scale By H", Float) = 1
//       _XZAnimScaleByR ("XZ Anim Scale By R", Float) = 1
//       _YOffsetScalar ("Y Offset Scalar", Float) = 1
//       _BaseExemption ("Base Motion Exemption", Float) = 0
//       _LocalPhaseScalars ("Local Phase Scalars .xyz", Vector) = (0.1,0.1,0.1,0)
//      }
//      Fallback Off
//      SubShader 1/1 {
//        LOD 200
//        Tags { "RenderType"="Opaque" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          GpuProgramID 19709
//          Program "vp" {
//            SubProgram "d3d11_9x " {
//              GpuProgramIndex 23
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from TLD_WavingVertexLit.shader.decompressed:
//   API d3d11_9x
//   Shader model vs_4_0_level_9_1
//   undeciphered1: 108 0 0
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
//   undeciphered2: 1 0 5 0 0
//   undeciphered3: 15 4 0 0 2 1 1 2 3 4
//   ConstBuffer "$Globals" 288
//   Vector 176 [_GlobalWindInfo]
//   Vector 192 [_GlobalBranchPhase]
//   Vector 208 [_GlobalGrassPhase]
//   Float 236 [_XZAnimScaleByH]
//   Float 240 [_XZAnimScaleByR]
//   Float 244 [_YOffsetScalar]
//   Float 248 [_BaseExemption]
//   Vector 256 [_LocalPhaseScalars] 3
//   Vector 272 [_MainTex_ST]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 720
//   Vector 32 [unity_4LightPosX0]
//   Vector 48 [unity_4LightPosY0]
//   Vector 64 [unity_4LightPosZ0]
//   Vector 80 [unity_4LightAtten0]
//   Vector 96 [unity_LightColor0]
//   Vector 112 [unity_LightColor1]
//   Vector 128 [unity_LightColor2]
//   Vector 144 [unity_LightColor3]
//   Vector 160 [unity_LightColor4]
//   Vector 176 [unity_LightColor5]
//   Vector 192 [unity_LightColor6]
//   Vector 208 [unity_LightColor7]
//   Vector 608 [unity_SHAr]
//   Vector 624 [unity_SHAg]
//   Vector 640 [unity_SHAb]
//   Vector 656 [unity_SHBr]
//   Vector 672 [unity_SHBg]
//   Vector 688 [unity_SHBb]
//   Vector 704 [unity_SHC]
//   ConstBuffer "UnityPerDraw" 352
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 192 [_Object2World]
//   Matrix 256 [_World2Object]
//   ConstBuffer "UnityFog" 32
//   Vector 16 [unity_FogParams]
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityPerDraw" 3
//   BindCB "UnityFog" 4
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:39:04 2016
cbuffer cb4 : register(b4)
{
  float4 cb4[2];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[19];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[45];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[18];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float p1 : TEXCOORD5,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.x = 5 * cb3[14].z;
  r0.x = cb3[12].z * 7 + r0.x;
  r0.y = dot(v0.xyz, cb0[16].xyz);
  r0.x = r0.x + r0.y;
  r0.y = cb0[12].x + cb0[12].y;
  r0.y = cb0[12].z + r0.y;
  r0.x = r0.x + r0.y;
  r0.x = frac(r0.x);
  r0.x = r0.x * 6.40884876 + -3.14159274;
  r0.y = r0.x * r0.x;
  r0.z = r0.y * r0.x;
  r0.x = r0.z * -0.161616161 + r0.x;
  r0.z = r0.z * r0.y;
  r0.x = r0.z * 0.00833330024 + r0.x;
  r0.z = r0.z * r0.y;
  r0.x = r0.z * -0.000198409994 + r0.x;
  r0.z = r0.x * r0.x;
  r0.x = r0.z * r0.x;
  r0.z = cb0[14].w * v7.x;
  r0.w = cb0[15].x * v7.y;
  r0.z = r0.z * r0.z + r0.w;
  r0.w = cmp(v7.x >= cb0[15].z);
  r0.w = r0.w ? 1.000000 : 0;
  r0.z = r0.z * r0.w;
  r0.w = cb0[11].w * r0.z;
  r1.x = 4 * r0.w;
  r1.y = 3.5 + -cb0[11].w;
  r0.w = r1.y * r0.w;
  r0.x = r0.x * r0.w + r1.x;
  r1.xy = cb0[11].xz * r0.xx;
  r0.x = cb0[15].y * r0.x;
  r1.z = r0.y * -0.5 + 1;
  r1.w = r0.y * r0.y;
  r0.y = r1.w * r0.y;
  r1.z = r1.w * 0.0416666642 + r1.z;
  r1.z = r0.y * -0.00138888892 + r1.z;
  r0.y = r0.y * 2.48015876e-005 + r1.z;
  r0.y = r0.y * r0.y;
  r0.y = r0.y * r0.w;
  r0.y = 0.300000012 * r0.y;
  r0.w = r0.y * cb0[11].z + r1.x;
  r0.y = r0.y * -cb0[11].x + r1.y;
  r1.x = 0.300000012 * cb0[13].w;
  r0.z = r1.x * r0.z;
  r0.x = r0.x * -0.5 + r0.z;
  r1.xyz = cb3[17].xyz * r0.xxx;
  r0.xzw = cb3[16].xyz * r0.www + r1.xyz;
  r0.xyz = cb3[18].xyz * r0.yyy + r0.xzw;
  r0.xyz = v0.xyz + r0.xyz;
  r1.xyzw = cb3[1].xyzw * r0.yyyy;
  r1.xyzw = cb3[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb3[2].xyzw * r0.zzzz + r1.xyzw;
  r1.xyzw = cb3[3].xyzw * v0.wwww + r1.xyzw;
  o0.xyzw = r1.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 2433b71e2898b608-vs_replace.txt
if (r1.w != 1.0) { r1.x += separation * (r1.w - convergence); }

  r0.w = cb4[1].x * r1.z;
  r0.w = -r0.w * r0.w;
  p1.x = exp2(r0.w);
  o1.xy = v3.xy * cb0[17].xy + cb0[17].zw;
  r2.x = cb3[16].y;
  r2.y = cb3[17].y;
  r2.z = cb3[18].y;
  r2.xyz = v2.yyy * r2.xyz;
  r3.x = cb3[16].x;
  r3.y = cb3[17].x;
  r3.z = cb3[18].x;
  r2.xyz = r3.xyz * v2.xxx + r2.xyz;
  r3.x = cb3[16].z;
  r3.y = cb3[17].z;
  r3.z = cb3[18].z;
  r2.xyz = r3.xyz * v2.zzz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  o2.xyz = r2.xyz;
  r3.xyz = cb3[13].xyz * r0.yyy;
  r0.xyw = cb3[12].xyz * r0.xxx + r3.xyz;
  r0.xyz = cb3[14].xyz * r0.zzz + r0.xyw;
  r0.xyz = cb3[15].xyz * v0.www + r0.xyz;
  o3.xyz = r0.xyz;
  r0.w = r2.y * r2.y;
  r0.w = r2.x * r2.x + -r0.w;
  r3.xyzw = r2.xyzz * r2.yzzx;
  r4.x = dot(cb2[41].xyzw, r3.xyzw);
  r4.y = dot(cb2[42].xyzw, r3.xyzw);
  r4.z = dot(cb2[43].xyzw, r3.xyzw);
  r3.xyz = cb2[44].xyz * r0.www + r4.xyz;
  r2.w = 1;
  r4.x = dot(cb2[38].xyzw, r2.xyzw);
  r4.y = dot(cb2[39].xyzw, r2.xyzw);
  r4.z = dot(cb2[40].xyzw, r2.xyzw);
  r3.xyz = r4.xyz + r3.xyz;
  r3.xyz = max(float3(0,0,0), r3.xyz);
  r3.xyz = log2(r3.xyz);
  r3.xyz = float3(0.416666657,0.416666657,0.416666657) * r3.xyz;
  r3.xyz = exp2(r3.xyz);
  r3.xyz = r3.xyz * float3(1.05499995,1.05499995,1.05499995) + float3(-0.0549999997,-0.0549999997,-0.0549999997);
  r3.xyz = max(float3(0,0,0), r3.xyz);
  r4.xyzw = cb2[2].xyzw + -r0.xxxx;
  r5.xyzw = cb2[3].xyzw + -r0.yyyy;
  r0.xyzw = cb2[4].xyzw + -r0.zzzz;
  r6.xyzw = r5.xyzw * r2.yyyy;
  r5.xyzw = r5.xyzw * r5.xyzw;
  r5.xyzw = r4.xyzw * r4.xyzw + r5.xyzw;
  r4.xyzw = r4.xyzw * r2.xxxx + r6.xyzw;
  r2.xyzw = r0.xyzw * r2.zzzz + r4.xyzw;
  r0.xyzw = r0.xyzw * r0.xyzw + r5.xyzw;
  r4.xyzw = rsqrt(r0.xyzw);
  r0.xyzw = r0.xyzw * cb2[5].xyzw + float4(1,1,1,1);
  r0.xyzw = float4(1,1,1,1) / r0.xyzw;
  r2.xyzw = r4.xyzw * r2.xyzw;
  r2.xyzw = max(float4(0,0,0,0), r2.xyzw);
  r0.xyzw = r2.xyzw * r0.xyzw;
  r2.xyz = cb2[7].xyz * r0.yyy;
  r2.xyz = cb2[6].xyz * r0.xxx + r2.xyz;
  r0.xyz = cb2[8].xyz * r0.zzz + r2.xyz;
  r0.xyz = cb2[9].xyz * r0.www + r0.xyz;
  o4.xyz = r0.xyz + r3.xyz;
  r0.x = cb1[5].x * r1.y;
  r0.w = 0.5 * r0.x;
  r0.xz = float2(0.5,0.5) * r1.xw;
  o5.zw = r1.zw;
  o5.xy = r0.xw + r0.zz;
  return;
}

/****************************** COMPILE WARNINGS ******************************
C:\Steam\SteamApps\common\TheLongDark\ShaderFixes\2433b71e2898b608-vs_replace.txt(130,14-15): warning X3578: Output value 'o2' is not completely initialized
C:\Steam\SteamApps\common\TheLongDark\ShaderFixes\2433b71e2898b608-vs_replace.txt(131,14-15): warning X3578: Output value 'o3' is not completely initialized
C:\Steam\SteamApps\common\TheLongDark\ShaderFixes\2433b71e2898b608-vs_replace.txt(132,14-15): warning X3578: Output value 'o4' is not completely initialized

****************************** COMPILE WARNINGS ******************************/
