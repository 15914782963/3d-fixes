// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe a7dca028fe322b23-ps_replace.txt
// 3DMigoto: a7dca028fe322b23 |    Unity headers extracted from Standard-FirstPass.shader
//    Shader "Nature/Terrain/Standard" {
//      Properties {
//      [HideInInspector]  _Control ("Control (RGBA)", 2D) = "red" { }
//      [HideInInspector]  _Splat3 ("Layer 3 (A)", 2D) = "white" { }
//      [HideInInspector]  _Splat2 ("Layer 2 (B)", 2D) = "white" { }
//      [HideInInspector]  _Splat1 ("Layer 1 (G)", 2D) = "white" { }
//      [HideInInspector]  _Splat0 ("Layer 0 (R)", 2D) = "white" { }
//      [HideInInspector]  _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
//      [HideInInspector]  _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
//      [HideInInspector]  _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
//      [HideInInspector]  _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
//      [HideInInspector] [Gamma]  _Metallic0 ("Metallic 0", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic1 ("Metallic 1", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic2 ("Metallic 2", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic3 ("Metallic 3", Range(0,1)) = 0
//      [HideInInspector]  _Smoothness0 ("Smoothness 0", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness1 ("Smoothness 1", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness2 ("Smoothness 2", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness3 ("Smoothness 3", Range(0,1)) = 1
//      [HideInInspector]  _MainTex ("BaseMap (RGB)", 2D) = "white" { }
//      [HideInInspector]  _Color ("Main Color", Color) = (1,1,1,1)
//      }
//      Dependency "AddPassShader" = "Hidden/TerrainEngine/Splatmap/Standard-AddPass"
//      Dependency "BaseMapShader" = "Hidden/TerrainEngine/Splatmap/Standard-Base"
//      Fallback "Nature/Terrain/Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" }
//        Pass 2/3 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          ZWrite Off
//          Blend One One
//          GpuProgramID 116865
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 199
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Standard-FirstPass.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 119 7 0
//   Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" }
//   undeciphered2: 1 8 5 8 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 368
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Vector 128 [_ShadowOffsets0]
//   Vector 144 [_ShadowOffsets1]
//   Vector 160 [_ShadowOffsets2]
//   Vector 176 [_ShadowOffsets3]
//   Float 272 [_Metallic0]
//   Float 276 [_Metallic1]
//   Float 280 [_Metallic2]
//   Float 284 [_Metallic3]
//   Float 288 [_Smoothness0]
//   Float 292 [_Smoothness1]
//   Float 296 [_Smoothness2]
//   Float 300 [_Smoothness3]
//   Matrix 192 [_LightMatrix0]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   ConstBuffer "UnityFog" 32
//   Vector 16 [unity_FogParams]
//   SetTexture 0 [_Control] 2D 3
//   SetTexture 1 [_Splat0] 2D 4
//   SetTexture 2 [_Splat1] 2D 5
//   SetTexture 3 [_Splat2] 2D 6
//   SetTexture 4 [_Splat3] 2D 7
//   SetTexture 5 [_LightTexture0] 2D 1
//   SetTexture 6 [_LightTextureB0] 2D 2
//   SetTexture 7 [_ShadowMapTexture] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityFog" 4
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:43:20 2016
Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerComparisonState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[2];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[25];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[19];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe a7dca028fe322b23-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = cb0[13].xyzw * v4.yyyy;
  r0.xyzw = cb0[12].xyzw * v4.xxxx + r0.xyzw;
  r0.xyzw = cb0[14].xyzw * v4.zzzz + r0.xyzw;
  r0.xyzw = cb0[15].xyzw + r0.xyzw;
  r1.xy = r0.xy / r0.ww;
  r1.xy = float2(0.5,0.5) + r1.xy;
  r1.xyzw = t5.Sample(s1_s, r1.xy).xyzw;
  r0.w = cmp(0 < r0.z);
  r0.x = dot(r0.xyz, r0.xyz);
  r2.xyzw = t6.Sample(s2_s, r0.xx).xyzw;
  r0.x = r0.w ? 1.000000 : 0;
  r0.x = r0.x * r1.w;
  r0.x = r0.x * r2.x;
  r0.y = 1 + -cb3[24].x;
  r1.xyz = v6.xyz / v6.www;
  r2.xyz = cb0[8].xyz + r1.xyz;
  r2.x = t7.SampleCmpLevelZero(s0_s, r2.xy, r2.z).x;
  r3.xyz = cb0[9].xyz + r1.xyz;
  r2.y = t7.SampleCmpLevelZero(s0_s, r3.xy, r3.z).x;
  r3.xyz = cb0[10].xyz + r1.xyz;
  r1.xyz = cb0[11].xyz + r1.xyz;
  r2.w = t7.SampleCmpLevelZero(s0_s, r1.xy, r1.z).x;
  r2.z = t7.SampleCmpLevelZero(s0_s, r3.xy, r3.z).x;
  r1.xyzw = r2.xyzw * r0.yyyy + cb3[24].xxxx;
  r0.y = dot(r1.xyzw, float4(0.25,0.25,0.25,0.25));
  r0.x = r0.x * r0.y;
  r0.xyz = cb0[6].xyz * r0.xxx;
  r0.w = dot(v3.xyz, v3.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v3.xyz * r0.www;
  r2.xyz = _WorldSpaceCameraPos.xyz + -v4.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = dot(r1.xyz, r2.xyz);
  r1.w = 9.99999975e-006 + -r0.w;
  r0.w = cmp(r0.w < 0);
  r3.xyz = r2.xyz * r1.www + r1.xyz;
  r1.xyz = r0.www ? r3.xyz : r1.xyz;
  r3.xyz = cb2[0].xyz + -v4.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r3.xyz * r0.www + r2.xyz;
  r1.w = dot(r1.xyz, r2.xyz);
  r2.xyz = r3.xyz * r0.www;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r3.xyz = r4.xyz * r0.www;
  r0.w = dot(r1.xyz, r3.xyz);
  r1.x = dot(r1.xyz, r2.xyz);
  r1.y = dot(r2.xyz, r3.xyz);
  r1.xyw = max(float3(0,0,0), r1.xyw);
  r0.w = max(0, r0.w);
  r0.w = r0.w * r0.w;
  r2.xyzw = t1.Sample(s4_s, v1.xy).xyzw;
  r3.xyzw = t0.Sample(s3_s, v5.xy).xyzw;
  r1.z = dot(r3.xyzw, float4(1,1,1,1));
  r4.x = 0.00100000005 + r1.z;
  r3.xyzw = r3.xyzw / r4.xxxx;
  r2.xyzw = r3.xxxx * r2.xyzw;
  r2.w = cb0[18].x * r2.w;
  r4.xyzw = t2.Sample(s5_s, v1.zw).xyzw;
  r4.xyzw = r4.xyzw * r3.yyyy;
  r4.w = cb0[18].y * r4.w;
  r2.xyzw = r4.xyzw + r2.xyzw;
  r4.xyzw = t3.Sample(s6_s, v2.xy).xyzw;
  r4.xyzw = r4.xyzw * r3.zzzz;
  r4.w = cb0[18].z * r4.w;
  r2.xyzw = r4.xyzw + r2.xyzw;
  r4.xyzw = t4.Sample(s7_s, v2.zw).xyzw;
  r4.xyzw = r4.xyzw * r3.wwww;
  r3.x = dot(r3.xyzw, cb0[17].xyzw);
  r4.w = cb0[18].w * r4.w;
  r2.xyzw = r4.xyzw + r2.xyzw;
  r2.w = 1 + -r2.w;
  r3.y = r2.w * r2.w;
  r3.z = r3.y * r3.y + -1;
  r0.w = r0.w * r3.z + 1;
  r3.z = 3.14159274 * r0.w;
  r0.w = r3.z * r0.w + 1.00000001e-007;
  r3.z = r3.y * r3.y;
  r0.w = r3.z / r0.w;
  r3.z = -r2.w * r2.w + 1;
  r3.w = r1.w * r3.z + r3.y;
  r3.y = r1.x * r3.z + r3.y;
  r3.y = r3.y * r1.w;
  r1.w = 1 + -r1.w;
  r3.y = r1.x * r3.w + r3.y;
  r3.y = 9.99999975e-006 + r3.y;
  r3.y = 2 / r3.y;
  r0.w = r3.y * r0.w;
  r0.w = 0.785398185 * r0.w;
  r3.y = max(9.99999975e-005, r0.w);
  r3.y = sqrt(r3.y);
  r3.z = cmp(cb0[3].w == 0.000000);
  r0.w = r3.z ? r3.y : r0.w;
  r0.w = r0.w * r1.x;
  r0.w = max(0, r0.w);
  r3.yzw = r0.www * r0.xyz;
  r0.w = 1 + -r1.y;
  r1.y = r1.y * r1.y;
  r1.y = dot(r1.yy, r2.ww);
  r1.y = -0.5 + r1.y;
  r2.w = r0.w * r0.w;
  r2.w = r2.w * r2.w;
  r0.w = r2.w * r0.w;
  r4.xyz = -cb0[2].xyz + r2.xyz;
  r4.xyz = r3.xxx * r4.xyz + cb0[2].xyz;
  r2.w = -r3.x * cb0[2].w + cb0[2].w;
  r2.xyz = r2.xyz * r2.www;
  r5.xyz = float3(1,1,1) + -r4.xyz;
  r4.xyz = r5.xyz * r0.www + r4.xyz;
  r3.xyz = r4.xyz * r3.yzw;
  r0.w = r1.w * r1.w;
  r0.w = r0.w * r0.w;
  r0.w = r0.w * r1.w;
  r0.w = r1.y * r0.w + 1;
  r1.w = 1 + -r1.x;
  r2.w = r1.w * r1.w;
  r2.w = r2.w * r2.w;
  r1.w = r2.w * r1.w;
  r1.y = r1.y * r1.w + 1;
  r0.w = r1.y * r0.w;
  r0.w = r0.w * r1.x;
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = r2.xyz * r0.xyz + r3.xyz;
  r0.xyz = r0.xyz * r1.zzz;
  r0.w = cb4[1].x * v5.z;
  r0.w = -r0.w * r0.w;
  r0.w = exp2(r0.w);
  o0.xyz = r0.www * r0.xyz;
  o0.w = 1;
  return;
}
