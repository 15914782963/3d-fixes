// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 1b01851806c9692b-ps_replace.txt
// 3DMigoto: 1b01851806c9692b |    Unity headers extracted from Standard-Base.shader
//    Shader "Hidden/TerrainEngine/Splatmap/Standard-Base" {
//      Properties {
//       _MainTex ("Base (RGB) Smoothness (A)", 2D) = "white" { }
//       _MetallicTex ("Metallic (R)", 2D) = "white" { }
//       _Color ("Main Color", Color) = (1,1,1,1)
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" }
//        Pass 3/3 {
//          Name "DEFERRED"
//          Tags { "LIGHTMODE"="Deferred" "QUEUE"="Geometry-100" "RenderType"="Opaque" }
//          GpuProgramID 132785
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 135
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Standard-Base.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 88 2 4
//   Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
//   undeciphered2: 1 4 4 4 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 160
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 608 [unity_SHAr]
//   Vector 624 [unity_SHAg]
//   Vector 640 [unity_SHAb]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   SetTexture 0 [_MainTex] 2D 2
//   SetTexture 1 [_MetallicTex] 2D 3
//   SetTexture 2 [unity_SpecCube0] CUBE 0
//   SetTexture 3 [unity_SpecCube1] CUBE 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:43:05 2016
TextureCube<float4> t3 : register(t3);

TextureCube<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[41];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[4];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD4,
  float3 v5 : TEXCOORD5,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 1b01851806c9692b-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyz = _WorldSpaceCameraPos.xyz + -v3.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyzw = t0.Sample(s2_s, v1.xy).xyzw;
  r2.xyzw = t1.Sample(s3_s, v1.xy).xyzw;
  r0.w = 1 + -r1.w;
  r2.y = dot(-r0.xyz, v2.xyz);
  r2.y = r2.y + r2.y;
  r2.yzw = v2.xyz * -r2.yyy + -r0.xyz;
  r3.xyz = v2.xyz;
  r3.w = 1;
  r4.x = dot(cb2[38].xyzw, r3.xyzw);
  r4.y = dot(cb2[39].xyzw, r3.xyzw);
  r4.z = dot(cb2[40].xyzw, r3.xyzw);
  r3.xyz = v5.xyz + r4.xyz;
  r3.xyz = max(float3(0,0,0), r3.xyz);
  r3.w = cmp(cb0[3].w == 0.000000);
  r4.xyz = log2(r3.xyz);
  r4.xyz = float3(0.416666657,0.416666657,0.416666657) * r4.xyz;
  r4.xyz = exp2(r4.xyz);
  r4.xyz = r4.xyz * float3(1.05499995,1.05499995,1.05499995) + float3(-0.0549999997,-0.0549999997,-0.0549999997);
  r4.xyz = max(float3(0,0,0), r4.xyz);
  r3.xyz = r3.www ? r4.xyz : r3.xyz;
  r4.x = cmp(0 < cb3[2].w);
  if (r4.x != 0) {
    r4.x = dot(r2.yzw, r2.yzw);
    r4.x = rsqrt(r4.x);
    r4.xyz = r4.xxx * r2.yzw;
    r5.xyz = cb3[0].xyz + -v3.xyz;
    r5.xyz = r5.xyz / r4.xyz;
    r6.xyz = cb3[1].xyz + -v3.xyz;
    r6.xyz = r6.xyz / r4.xyz;
    r7.xyz = cmp(float3(0,0,0) < r4.xyz);
    r5.xyz = r7.xyz ? r5.xyz : r6.xyz;
    r4.w = min(r5.x, r5.y);
    r4.w = min(r4.w, r5.z);
    r5.xyz = -cb3[2].xyz + v3.xyz;
    r4.xyz = r4.xyz * r4.www + r5.xyz;
  } else {
    r4.xyz = r2.yzw;
  }
  r4.w = -r0.w * 0.699999988 + 1.70000005;
  r4.w = r4.w * r0.w;
  r4.w = 6 * r4.w;
  r5.xyzw = t2.SampleLevel(s0_s, r4.xyz, r4.w).xyzw;
  r4.x = log2(r5.w);
  r4.x = cb3[3].y * r4.x;
  r4.x = exp2(r4.x);
  r4.x = cb3[3].x * r4.x;
  r6.xyz = r4.xxx * r5.xyz;
  r4.y = cmp(cb3[1].w < 0.999989986);
  if (r4.y != 0) {
    r4.y = cmp(0 < cb3[6].w);
    if (r4.y != 0) {
      r4.y = dot(r2.yzw, r2.yzw);
      r4.y = rsqrt(r4.y);
      r7.xyz = r4.yyy * r2.yzw;
      r8.xyz = cb3[4].xyz + -v3.xyz;
      r8.xyz = r8.xyz / r7.xyz;
      r9.xyz = cb3[5].xyz + -v3.xyz;
      r9.xyz = r9.xyz / r7.xyz;
      r10.xyz = cmp(float3(0,0,0) < r7.xyz);
      r8.xyz = r10.xyz ? r8.xyz : r9.xyz;
      r4.y = min(r8.x, r8.y);
      r4.y = min(r4.y, r8.z);
      r8.xyz = -cb3[6].xyz + v3.xyz;
      r2.yzw = r7.xyz * r4.yyy + r8.xyz;
    }
    r7.xyzw = t3.SampleLevel(s1_s, r2.yzw, r4.w).xyzw;
    r2.y = log2(r7.w);
    r2.y = cb3[7].y * r2.y;
    r2.y = exp2(r2.y);
    r2.y = cb3[7].x * r2.y;
    r2.yzw = r2.yyy * r7.xyz;
    r4.xyz = r4.xxx * r5.xyz + -r2.yzw;
    r6.xyz = cb3[1].www * r4.xyz + r2.yzw;
  }
  r2.yzw = -cb0[2].xyz + r1.xyz;
  r2.yzw = r2.xxx * r2.yzw + cb0[2].xyz;
  r2.x = -r2.x * cb0[2].w + cb0[2].w;
  r1.xyz = r2.xxx * r1.xyz;
  r4.x = dot(v2.xyz, r0.xyz);
  r4.y = cmp(r4.x < 0);
  r4.x = 9.99999975e-006 + -r4.x;
  r4.xzw = r0.xyz * r4.xxx + v2.xyz;
  r4.xyz = r4.yyy ? r4.xzw : v2.xyz;
  r0.x = dot(r4.xyz, r0.xyz);
  r0.x = max(0, r0.x);
  r0.y = r0.w * r0.w;
  r0.z = r0.w * r0.y;
  r0.z = -r0.z * 0.280000001 + 1;
  r0.y = r0.y * r0.y + 1;
  r0.y = 1 / r0.y;
  r0.y = r3.w ? r0.z : r0.y;
  r0.z = -r2.x + r1.w;
  r0.z = saturate(1 + r0.z);
  r4.xyz = r0.yyy * r6.xyz;
  r0.x = 1 + -r0.x;
  r0.y = r0.x * r0.x;
  r0.y = r0.y * r0.y;
  r0.x = r0.y * r0.x;
  r0.yzw = r0.zzz + -r2.yzw;
  r0.xyz = r0.xxx * r0.yzw + r2.yzw;
  r0.xyz = r4.xyz * r0.xyz;
  o3.xyz = r1.xyz * r3.xyz + r0.xyz;
  o0.xyz = r1.xyz;
  o0.w = 1;
  o1.w = r1.w;
  o1.xyz = r2.yzw;
  o2.xyz = v2.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o2.w = 1;
  o3.w = 1;
  return;
}
