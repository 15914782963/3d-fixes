// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe cde205e7024f3da9-ps_replace.txt
// 3DMigoto: cde205e7024f3da9 |    Unity headers extracted from TMPro_SDF-Surface.shader
//    Shader "TMPro/Distance Field (Surface)" {
//      Properties {
//       _FaceTex ("Fill Texture", 2D) = "white" { }
//       _FaceUVSpeedX ("Face UV Speed X", Range(-5,5)) = 0
//       _FaceUVSpeedY ("Face UV Speed Y", Range(-5,5)) = 0
//       _FaceColor ("Fill Color", Color) = (1,1,1,1)
//       _FaceDilate ("Face Dilate", Range(-1,1)) = 0
//       _OutlineColor ("Outline Color", Color) = (0,0,0,1)
//       _OutlineTex ("Outline Texture", 2D) = "white" { }
//       _OutlineUVSpeedX ("Outline UV Speed X", Range(-5,5)) = 0
//       _OutlineUVSpeedY ("Outline UV Speed Y", Range(-5,5)) = 0
//       _OutlineWidth ("Outline Thickness", Range(0,1)) = 0
//       _OutlineSoftness ("Outline Softness", Range(0,1)) = 0
//       _Bevel ("Bevel", Range(0,1)) = 0.5
//       _BevelOffset ("Bevel Offset", Range(-0.5,0.5)) = 0
//       _BevelWidth ("Bevel Width", Range(-0.5,0.5)) = 0
//       _BevelClamp ("Bevel Clamp", Range(0,1)) = 0
//       _BevelRoundness ("Bevel Roundness", Range(0,1)) = 0
//       _BumpMap ("Normalmap", 2D) = "bump" { }
//       _BumpOutline ("Bump Outline", Range(0,1)) = 0.5
//       _BumpFace ("Bump Face", Range(0,1)) = 0.5
//       _ReflectFaceColor ("Face Color", Color) = (0,0,0,1)
//       _ReflectOutlineColor ("Outline Color", Color) = (0,0,0,1)
//       _Cube ("Reflection Cubemap", CUBE) = "black" { }
//       _EnvMatrixRotation ("Texture Rotation", Vector) = (0,0,0,0)
//       _SpecColor ("Specular Color", Color) = (0,0,0,1)
//       _FaceShininess ("Face Shininess", Range(0,1)) = 0
//       _OutlineShininess ("Outline Shininess", Range(0,1)) = 0
//       _GlowColor ("Color", Color) = (0,1,0,0.5)
//       _GlowOffset ("Offset", Range(-1,1)) = 0
//       _GlowInner ("Inner", Range(0,1)) = 0.05
//       _GlowOuter ("Outer", Range(0,1)) = 0.05
//       _GlowPower ("Falloff", Range(1,0)) = 0.75
//       _WeightNormal ("Weight Normal", Float) = 0
//       _WeightBold ("Weight Bold", Float) = 0.5
//       _ShaderFlags ("Flags", Float) = 0
//       _ScaleRatioA ("Scale RatioA", Float) = 1
//       _ScaleRatioB ("Scale RatioB", Float) = 1
//       _ScaleRatioC ("Scale RatioC", Float) = 1
//       _MainTex ("Font Atlas", 2D) = "white" { }
//       _TextureWidth ("Texture Width", Float) = 512
//       _TextureHeight ("Texture Height", Float) = 512
//       _GradientScale ("Gradient Scale", Float) = 5
//       _ScaleX ("Scale X", Float) = 1
//       _ScaleY ("Scale Y", Float) = 1
//       _PerspectiveFilter ("Perspective Correction", Range(0,1)) = 0.875
//       _VertexOffsetX ("Vertex OffsetX", Float) = 0
//       _VertexOffsetY ("Vertex OffsetY", Float) = 0
//      }
//      SubShader 1/1 {
//        LOD 300
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 2/3 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull [_CullMode]
//          Blend SrcAlpha One
//          ColorMask RGB
//          GpuProgramID 118501
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 89
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from TMPro_SDF-Surface.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 144 10 0
//   Keywords { "SPOT" "GLOW_ON" }
//   undeciphered2: 1 6 3 6 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 656
//   Vector 96 [_LightColor0]
//   Vector 112 [_SpecColor]
//   Float 192 [_FaceUVSpeedX]
//   Float 196 [_FaceUVSpeedY]
//   Vector 208 [_FaceColor]
//   Float 228 [_OutlineSoftness]
//   Float 232 [_OutlineUVSpeedX]
//   Float 236 [_OutlineUVSpeedY]
//   Vector 240 [_OutlineColor]
//   Float 256 [_OutlineWidth]
//   Float 260 [_Bevel]
//   Float 264 [_BevelOffset]
//   Float 268 [_BevelWidth]
//   Float 272 [_BevelClamp]
//   Float 276 [_BevelRoundness]
//   Float 280 [_BumpOutline]
//   Float 284 [_BumpFace]
//   Vector 480 [_GlowColor]
//   Float 496 [_GlowOffset]
//   Float 500 [_GlowOuter]
//   Float 504 [_GlowInner]
//   Float 508 [_GlowPower]
//   Float 512 [_ShaderFlags]
//   Float 524 [_ScaleRatioA]
//   Float 528 [_ScaleRatioB]
//   Float 584 [_TextureWidth]
//   Float 588 [_TextureHeight]
//   Float 592 [_GradientScale]
//   Float 612 [_FaceShininess]
//   Float 616 [_OutlineShininess]
//   Matrix 128 [_LightMatrix0]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   SetTexture 0 [_MainTex] 2D 5
//   SetTexture 1 [_FaceTex] 2D 2
//   SetTexture 2 [_OutlineTex] 2D 3
//   SetTexture 3 [_BumpMap] 2D 4
//   SetTexture 4 [_LightTexture0] 2D 0
//   SetTexture 5 [_LightTextureB0] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:44:33 2016
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[39];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float3 v5 : TEXCOORD4,
  float4 v6 : COLOR0,
  float4 v7 : TEXCOORD5,
  float3 v8 : TEXCOORD6,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe cde205e7024f3da9-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = cb0[33].x * cb0[31].x;
  r0.x = v7.y * r0.x;
  r1.xyzw = t0.Sample(s5_s, v1.xy).xyzw;
  r0.y = 0.5 + -r1.w;
  r0.y = -v7.x + r0.y;
  r0.y = r0.y * v7.y + 0.5;
  r0.x = -r0.x * 0.5 + r0.y;
  r0.z = cmp(r0.x >= 0);
  r0.z = r0.z ? 1.000000 : 0;
  r0.w = cb0[31].y * cb0[33].x + -cb0[31].z;
  r0.z = r0.z * r0.w + cb0[31].z;
  r0.z = v7.y * r0.z;
  r0.w = r0.z * 0.5 + 1;
  r0.z = 0.5 * r0.z;
  r0.z = min(1, r0.z);
  r0.z = sqrt(r0.z);
  r0.x = r0.x / r0.w;
  r0.x = min(1, abs(r0.x));
  r0.x = log2(r0.x);
  r0.x = cb0[31].w * r0.x;
  r0.x = exp2(r0.x);
  r0.x = 1 + -r0.x;
  r0.x = r0.x * r0.z;
  r0.x = saturate(dot(cb0[30].ww, r0.xx));
  r0.z = -r0.x * v6.w + 1;
  r0.x = v6.w * r0.x;
  r1.xy = cb0[14].zw * cb1[0].yy + v1.zw;
  r1.xyzw = t2.Sample(s3_s, r1.xy).xyzw;
  r1.xyz = cb0[15].xyz * r1.xyz;
  r0.w = cb0[15].w * v6.w;
  r2.w = r0.w * r1.w;
  r2.xyz = r2.www * r1.xyz;
  r1.xy = cb0[12].xy * cb1[0].yy + v1.zw;
  r1.xyzw = t1.Sample(s2_s, r1.xy).xyzw;
  r3.xyzw = cb0[13].wxyz * v6.wxyz;
  r1.w = r3.x * r1.w;
  r1.xyz = r3.yzw * r1.www;
  r2.xyzw = r2.xyzw + -r1.xyzw;
  r0.w = cb0[32].w * cb0[16].x;
  r0.w = v7.y * r0.w;
  r3.x = min(1, r0.w);
  r3.x = sqrt(r3.x);
  r3.y = saturate(r0.w * 0.5 + r0.y);
  r0.y = -r0.w * 0.5 + r0.y;
  r0.w = r3.y * r3.x;
  r1.xyzw = r0.wwww * r2.xyzw + r1.xyzw;
  r0.w = cb0[32].w * cb0[14].y;
  r2.x = v7.y * r0.w;
  r0.w = r0.w * v7.y + 1;
  r0.y = r2.x * 0.5 + r0.y;
  r0.y = saturate(r0.y / r0.w);
  r0.y = 1 + -r0.y;
  r2.xyzw = r1.xyzw * r0.yyyy;
  r0.y = -r1.w * r0.y + 1;
  r0.y = r0.y * r0.x + r2.w;
  r1.xyz = r2.xyz * r0.zzz;
  r0.xzw = cb0[30].xyz * r0.xxx + r1.xyz;
  r0.xzw = r0.xzw / r0.yyy;
  o0.w = r0.y;
  r1.xyzw = cb0[9].xyzw * v5.yyyy;
  r1.xyzw = cb0[8].xyzw * v5.xxxx + r1.xyzw;
  r1.xyzw = cb0[10].xyzw * v5.zzzz + r1.xyzw;
  r1.xyzw = cb0[11].xyzw + r1.xyzw;
  r2.xy = r1.xy / r1.ww;
  r2.xy = float2(0.5,0.5) + r2.xy;
  r4.xyzw = t4.Sample(s0_s, r2.xy).xyzw;
  r0.y = cmp(0 < r1.z);
  r1.x = dot(r1.xyz, r1.xyz);
  r1.xyzw = t5.Sample(s1_s, r1.xx).xyzw;
  r0.y = r0.y ? 1.000000 : 0;
  r0.y = r0.y * r4.w;
  r0.y = r0.y * r1.x;
  r1.xyz = cb0[6].xyz * r0.yyy;
  r0.xyz = r1.xyz * r0.xzw;
  r1.xyz = cb0[7].xyz * r1.xyz;
  r0.w = cb0[17].z + -cb0[17].w;
  r0.w = r3.y * r0.w + cb0[17].w;
  r4.xyzw = t3.Sample(s4_s, v1.zw).xyzw;
  r2.xy = r4.wy * float2(2,2) + float2(-1,-1);
  r1.w = dot(r2.xy, r2.xy);
  r1.w = min(1, r1.w);
  r1.w = 1 + -r1.w;
  r2.z = sqrt(r1.w);
  r2.xyz = r2.xyz * r0.www + float3(-0,-0,-1);
  r2.xyz = r2.www * r2.xyz + float3(0,0,1);
  r0.w = cb0[16].z + v7.x;
  r4.xy = float2(1,1) / cb0[36].zw;
  r4.z = 0;
  r5.xyzw = v1.xyxy + -r4.xzzy;
  r4.xyzw = v1.xyxy + r4.xzzy;
  r6.xyzw = t0.Sample(s5_s, r5.xy).wxyz;
  r5.xyzw = t0.Sample(s5_s, r5.zw).xyzw;
  r6.z = r5.w;
  r5.xyzw = t0.Sample(s5_s, r4.xy).xyzw;
  r4.xyzw = t0.Sample(s5_s, r4.zw).xyzw;
  r6.w = r4.w;
  r6.y = r5.w;
  r4.xyzw = r6.xyzw + r0.wwww;
  r4.xyzw = float4(-0.5,-0.5,-0.5,-0.5) + r4.xyzw;
  r0.w = cb0[16].x + cb0[16].w;
  r0.w = max(0.00999999978, r0.w);
  r4.xyzw = r4.xyzw / r0.wwww;
  r0.w = cb0[16].y * r0.w;
  r0.w = cb0[37].x * r0.w;
  r0.w = -2 * r0.w;
  r4.xyzw = saturate(float4(0.5,0.5,0.5,0.5) + r4.xyzw);
  r5.xyzw = r4.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
  r5.xyzw = float4(1,1,1,1) + -abs(r5.xyzw);
  r1.w = 0.5 * cb0[32].x;
  r2.w = cmp(r1.w >= -r1.w);
  r1.w = frac(abs(r1.w));
  r1.w = r2.w ? r1.w : -r1.w;
  r1.w = cmp(r1.w >= 0.5);
  r4.xyzw = r1.wwww ? r5.xyzw : r4.xyzw;
  r5.xyzw = float4(1.57079601,1.57079601,1.57079601,1.57079601) * r4.xyzw;
  r5.xyzw = sin(r5.xyzw);
  r5.xyzw = r5.xyzw + -r4.xyzw;
  r4.xyzw = cb0[17].yyyy * r5.xyzw + r4.xyzw;
  r1.w = 1 + -cb0[17].x;
  r4.xyzw = min(r4.xyzw, r1.wwww);
  r3.xz = r4.xz * r0.ww;
  r4.yz = r4.wy * r0.ww + -r3.zx;
  r4.xw = float2(-1,1);
  r0.w = dot(r4.xy, r4.xy);
  r0.w = rsqrt(r0.w);
  r1.w = dot(r4.zw, r4.zw);
  r1.w = rsqrt(r1.w);
  r5.x = r4.z * r1.w;
  r5.yz = float2(1,0) * r1.ww;
  r4.z = 0;
  r3.xzw = r4.xyz * r0.www;
  r4.xyz = r5.xyz * r3.xzw;
  r3.xzw = r5.zxy * r3.zwx + -r4.xyz;
  r2.xyz = r3.xzw + -r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r4.x = dot(v2.xyz, -r2.xyz);
  r4.y = dot(v3.xyz, -r2.xyz);
  r4.z = dot(v4.xyz, -r2.xyz);
  r2.xyz = cb2[0].xyz + -v5.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r3.xzw = _WorldSpaceCameraPos.xyz + -v5.xyz;
  r0.w = dot(r3.xzw, r3.xzw);
  r0.w = rsqrt(r0.w);
  r3.xzw = r3.xzw * r0.www + r2.xyz;
  r0.w = dot(r4.xyz, r2.xyz);
  r0.w = max(0, r0.w);
  r1.w = dot(r3.xzw, r3.xzw);
  r1.w = rsqrt(r1.w);
  r2.xyz = r3.xzw * r1.www;
  r1.w = dot(r4.xyz, r2.xyz);
  r1.w = max(0, r1.w);
  r1.w = log2(r1.w);
  r2.x = cb0[38].z + -cb0[38].y;
  r2.x = r3.y * r2.x + cb0[38].y;
  r2.x = 128 * r2.x;
  r1.w = r2.x * r1.w;
  r1.w = exp2(r1.w);
  r1.xyz = r1.xyz * r1.www;
  o0.xyz = r0.xyz * r0.www + r1.xyz;
  return;
}
