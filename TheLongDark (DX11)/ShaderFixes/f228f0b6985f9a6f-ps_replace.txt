// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe f228f0b6985f9a6f-ps_replace.txt
// 3DMigoto: f228f0b6985f9a6f |    Unity headers extracted from TLD_StandardOpaque.shader
//    Shader "Shader Forge/TLD_StandardOpaque" {
//      Properties {
//       _Color ("Main colour", Color) = (1,1,1,1)
//      [MaterialToggle]  _UseVertexColour ("Use Vertex Colour", Float) = 0
//       _MainTex ("MainTex", 2D) = "gray" { }
//       _DetailOverlay ("DetailOverlay", 2D) = "gray" { }
//       _DetailStrength ("DetailStrength", Float) = 0
//       _DetailTiling ("DetailTiling", Float) = 1
//       _AmbientOcclusion ("Ambient Occlusion", 2D) = "white" { }
//       _AOBlackness ("AO Blackness", Range(0,1)) = 1
//       _Emissive ("Emissive", 2D) = "black" { }
//       _EmissiveStrength ("EmissiveStrength", Range(0,1)) = 0
//      [MaterialToggle]  _ColourizeEmissive ("Colourize Emissive", Float) = 1
//      }
//      Fallback "Legacy Shaders/Diffuse"
//      SubShader 1/1 {
//        Tags { "RenderType"="Opaque" }
//        Pass 2/3 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          GpuProgramID 83080
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 131
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from TLD_StandardOpaque.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 92 5 0
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
//   undeciphered2: 1 5 4 5 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 256
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Vector 128 [_MainTex_ST]
//   Vector 144 [_Emissive_ST]
//   Float 160 [_EmissiveStrength]
//   Vector 176 [_DetailOverlay_ST]
//   Float 192 [_AOBlackness]
//   Vector 208 [_AmbientOcclusion_ST]
//   Vector 224 [_Color]
//   Float 240 [_UseVertexColour]
//   Float 244 [_ColourizeEmissive]
//   Float 248 [_DetailTiling]
//   Float 252 [_DetailStrength]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 608 [unity_SHAr]
//   Vector 624 [unity_SHAg]
//   Vector 640 [unity_SHAb]
//   ConstBuffer "UnityFog" 32
//   Vector 0 [unity_FogColor]
//   Vector 16 [unity_FogParams]
//   SetTexture 0 [_ShadowMapTexture] 2D 0
//   SetTexture 1 [_AmbientOcclusion] 2D 4
//   SetTexture 2 [_DetailOverlay] 2D 3
//   SetTexture 3 [_MainTex] 2D 1
//   SetTexture 4 [_Emissive] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityFog" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.35 on Sat Apr 30 15:38:15 2016
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[41];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[16];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float2 w1 : TEXCOORD1,
  float2 v2 : TEXCOORD2,
  float w2 : TEXCOORD9,
  float4 v3 : TEXCOORD3,
  float4 v4 : TEXCOORD4,
  float4 v5 : TEXCOORD5,
  float3 v6 : TEXCOORD6,
  float4 v7 : COLOR0,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD10,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe f228f0b6985f9a6f-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xy = v1.xy * cb0[8].xy + cb0[8].zw;
  r0.xyzw = t3.Sample(s1_s, r0.xy).xyzw;
  r1.xyz = float3(-1,-1,-1) + v7.xyz;
  r1.xyz = cb0[15].xxx * r1.xyz + float3(1,1,1);
  r0.xyz = saturate(r1.xyz * r0.xyz);
  r1.xy = cb0[15].zz * v1.xy;
  r1.xy = r1.xy * cb0[11].xy + cb0[11].zw;
  r1.xyzw = t2.Sample(s3_s, r1.xy).xyzw;
  r0.xyz = cb0[15].www * r1.xyz + r0.xyz;
  r0.xyz = max(float3(0,0,0), r0.xyz);
  r0.xyz = cb0[14].xyz * r0.xyz;
  r1.xy = w1.xy * cb0[13].xy + cb0[13].zw;
  r1.xyzw = t1.Sample(s4_s, r1.xy).xyzw;
  r1.xyz = max(cb0[12].xxx, r1.xyz);
  r0.xyz = r1.xyz * r0.xyz;
  r0.w = dot(v4.xyz, v4.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = v4.xyz * r0.www;
  r2.w = 1;
  r3.x = dot(cb2[38].xyzw, r2.xyzw);
  r3.y = dot(cb2[39].xyzw, r2.xyzw);
  r3.z = dot(cb2[40].xyzw, r2.xyzw);
  r1.yzw = v9.xyz + r3.xyz;
  r1.yzw = max(float3(0,0,0), r1.yzw);
  r3.xyz = log2(r1.yzw);
  r3.xyz = float3(0.416666657,0.416666657,0.416666657) * r3.xyz;
  r3.xyz = exp2(r3.xyz);
  r3.xyz = r3.xyz * float3(1.05499995,1.05499995,1.05499995) + float3(-0.0549999997,-0.0549999997,-0.0549999997);
  r3.xyz = max(float3(0,0,0), r3.xyz);
  r0.w = cmp(cb0[3].w == 0.000000);
  r1.yzw = r0.www ? r3.xyz : r1.yzw;
  r0.w = r0.w ? 0.616850257 : 0.785398185;
  r1.xyz = r1.yzw * r1.xxx;
  r3.xyz = _WorldSpaceCameraPos.xyz + -v3.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r4.xyz = r3.xyz * r1.www;
  r2.w = dot(r2.xyz, r4.xyz);
  r2.w = max(0, r2.w);
  r3.w = 1.00001001 + -r2.w;
  r2.w = r2.w * 0.202115417 + 0.797884583;
  r4.x = r3.w * r3.w;
  r4.x = r4.x * r4.x;
  r3.w = r4.x * r3.w;
  r4.x = dot(cb2[0].xyz, cb2[0].xyz);
  r4.x = rsqrt(r4.x);
  r4.xyz = cb2[0].xyz * r4.xxx;
  r3.xyz = r3.xyz * r1.www + r4.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r1.w = dot(r4.xyz, r3.xyz);
  r3.x = dot(r2.xyz, r3.xyz);
  r2.x = dot(r2.xyz, r4.xyz);
  r2.x = max(0, r2.x);
  r2.y = max(0, r3.x);
  r1.w = max(0, r1.w);
  r2.z = r1.w + r1.w;
  r2.z = r2.z * r1.w + -0.5;
  r1.w = 1 + -r1.w;
  r3.x = r2.z * r3.w + 1;
  r3.y = 1.00001001 + -r2.x;
  r3.z = r3.y * r3.y;
  r3.z = r3.z * r3.z;
  r3.y = r3.y * r3.z;
  r2.z = r2.z * r3.y + 1;
  r2.z = r2.z * r3.x;
  r2.z = r2.z * r2.x;
  r3.xy = v8.xy / v8.ww;
  r3.xyzw = t0.Sample(s0_s, r3.xy).xyzw;
  r3.xyz = cb0[6].xyz * r3.xxx;
  r1.xyz = r2.zzz * r3.xyz + r1.xyz;
  r2.z = r2.x * 0.202115417 + 0.797884583;
  r2.z = r2.z * r2.w + 9.99999975e-006;
  r2.z = 1 / r2.z;
  r2.x = r2.x * r2.z;
  r2.z = log2(r2.y);
  r2.z = 9.99999975e-005 * r2.z;
  r2.z = exp2(r2.z);
  r2.z = 0.318325758 * r2.z;
  r2.xy = r2.xy * r2.zy;
  r0.w = r2.x * r0.w;
  r0.w = r2.y * r0.w;
  r2.xyz = r0.www * r3.xyz;
  r0.w = r1.w * r1.w;
  r0.w = r0.w * r0.w;
  r0.w = r0.w * r1.w;
  r2.xyz = r2.xyz * r0.www;
  r0.xyz = r1.xyz * r0.xyz + r2.xyz;
  r1.xy = v1.xy * cb0[9].xy + cb0[9].zw;
  r1.xyzw = t4.Sample(s2_s, r1.xy).xyzw;
  r1.xyz = cb0[10].xxx * r1.xyz;
  r2.xyz = float3(-1,-1,-1) + cb0[14].xyz;
  r2.xyz = cb0[15].yyy * r2.xyz + float3(1,1,1);
  r0.xyz = r2.xyz * r1.xyz + r0.xyz;
  r0.xyz = -cb3[0].xyz + r0.xyz;
  r0.w = cb3[1].x * w2.x;
  r0.w = -r0.w * r0.w;
  r0.w = exp2(r0.w);
  o0.xyz = r0.www * r0.xyz + cb3[0].xyz;
  o0.w = 1;
  return;
}
