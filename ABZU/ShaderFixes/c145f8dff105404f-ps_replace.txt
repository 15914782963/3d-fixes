// ---- Created with 3Dmigoto v1.2.51 on Sat Dec 24 13:39:08 2016
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[7];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[30];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cb1[3].zw * v0.xy;
  r0.x = t2.SampleLevel(s2_s, r0.xy, 0).x;
  r1.xyzw = cb0[2].xyzw * v0.yyyy;
  r1.xyzw = v0.xxxx * cb0[1].xyzw + r1.xyzw;
  r0.xyzw = r0.xxxx * cb0[3].xyzw + r1.xyzw;
  r0.xyzw = cb0[4].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;

float4 s = StereoParams.Load(0);
matrix m = MATRIX(cb0, 1);
matrix im = inverse(m);
float4 t = mul(float4(r0.xyz, 1), im);
t.x -= s.x * (t.w - s.y) * cb1[3].x / 2;
r0.xyz = mul(t, m);

  r1.xyz = float3(1,1,1) + r0.xyz;
  r1.xyz = cmp(r1.xyz < float3(0,0,0));
  r0.w = (int)r1.y | (int)r1.x;
  r0.w = (int)r1.z | (int)r0.w;
  if (r0.w != 0) discard;
  r1.xyz = float3(1,1,1) + -r0.xyz;
  r0.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r1.xyz = cmp(r1.xyz < float3(0,0,0));
  r0.w = (int)r1.y | (int)r1.x;
  r0.w = (int)r1.z | (int)r0.w;
  if (r0.w != 0) discard;
  r0.x = r0.x * 2 + -1;
  r0.x = saturate(-abs(r0.x) * 4 + 4);
  r1.xyzw = t1.Sample(s1_s, r0.zy).xyzw;
  r0.yz = t0.Sample(s0_s, r0.zy).xy;
  r2.xy = r0.yz * float2(2,2) + float2(-1,-1);
  r0.yz = saturate(r1.zw);
  r1.xyz = cb2[2].xyz * r1.xyz;
  r0.x = r0.z * r0.x;
  o2.y = r0.y;
  r0.x = cb0[29].x * r0.x;
  o0.w = r0.x;
  r0.yzw = r1.xyz * cb2[6].xxx + cb2[3].xyz;
  o3.xyz = saturate(cb2[4].xyz * r1.xyz);
  o0.xyz = max(float3(0,0,0), r0.yzw);
  r0.y = dot(r2.xy, r2.xy);
  r0.y = 1 + -r0.y;
  r0.y = max(0, r0.y);
  r2.z = sqrt(r0.y);
  r1.xyz = r2.xyz * cb1[7].www + cb1[7].xyz;
  r1.w = -r1.z;
  r2.x = dot(r1.wyx, cb0[9].xyz);
  r0.yzw = float3(-1,1,1) * r1.zyx;
  r2.y = dot(r0.yzw, cb0[10].xyz);
  r2.z = dot(r0.yzw, cb0[11].xyz);
  r0.y = dot(r2.xyz, r2.xyz);
  r0.y = rsqrt(r0.y);
  r0.yzw = r2.xyz * r0.yyy;
  o1.xyz = r0.yzw * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o1.w = r0.x;
  o2.w = r0.x;
  o3.w = r0.x;
  r0.xy = saturate(cb2[6].yz);
  o2.z = r0.y * cb1[8].y + cb1[8].x;
  o2.x = r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sat Dec 24 13:39:08 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[30], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3
mul r0.xy, v0.xyxx, cb1[3].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s2, l(0.000000)
mul r1.xyzw, v0.yyyy, cb0[2].xyzw
mad r1.xyzw, v0.xxxx, cb0[1].xyzw, r1.xyzw
mad r0.xyzw, r0.xxxx, cb0[3].xyzw, r1.xyzw
add r0.xyzw, r0.xyzw, cb0[4].xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r1.y, r1.x
or r0.w, r1.z, r0.w
discard_nz r0.w
add r1.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
lt r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r1.y, r1.x
or r0.w, r1.z, r0.w
discard_nz r0.w
mad r0.x, r0.x, l(2.000000), l(-1.000000)
mad_sat r0.x, -|r0.x|, l(4.000000), l(4.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.zyzz, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r0.yz, r0.zyzz, t0.zxyw, s0
mad r2.xy, r0.yzyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mov_sat r0.yz, r1.zzwz
mul r1.xyz, r1.xyzx, cb2[2].xyzx
mul r0.x, r0.x, r0.z
mov o2.y, r0.y
mul r0.x, r0.x, cb0[29].x
mov o0.w, r0.x
mad r0.yzw, r1.xxyz, cb2[6].xxxx, cb2[3].xxyz
mul_sat o3.xyz, r1.xyzx, cb2[4].xyzx
max o0.xyz, r0.yzwy, l(0.000000, 0.000000, 0.000000, 0.000000)
dp2 r0.y, r2.xyxx, r2.xyxx
add r0.y, -r0.y, l(1.000000)
max r0.y, r0.y, l(0.000000)
sqrt r2.z, r0.y
mad r1.xyz, r2.xyzx, cb1[7].wwww, cb1[7].xyzx
mov r1.w, -r1.z
dp3 r2.x, r1.wyxw, cb0[9].xyzx
mul r0.yzw, r1.zzyx, l(0.000000, -1.000000, 1.000000, 1.000000)
dp3 r2.y, r0.yzwy, cb0[10].xyzx
dp3 r2.z, r0.yzwy, cb0[11].xyzx
dp3 r0.y, r2.xyzx, r2.xyzx
rsq r0.y, r0.y
mul r0.yzw, r0.yyyy, r2.xxyz
mad o1.xyz, r0.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o1.w, r0.x
mov o2.w, r0.x
mov o3.w, r0.x
mov_sat r0.xy, cb2[6].yzyy
mad o2.z, r0.y, cb1[8].y, cb1[8].x
mov o2.x, r0.x
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
