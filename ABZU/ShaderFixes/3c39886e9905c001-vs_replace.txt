// Light w/ halo at cave entrance
// hlsltool.py --auto-fix-vertex-halo --in-place 3c39886e9905c001-vs_replace.txt

// Type: TDeferredLightVS<true>
// Skipping over variable length shader specific section (106 bytes):
//   00333d46: 10001000 00002000 10000000 30004000 | ...... .....0.@. |
//   00333d56: 00007000 0C000000 C1BAF08C FCCB5FC8 | ..p..........._. |
//   00333d66: C55D2FBA AC19754E 167057B5 9FF0F6BA | .]/...uN.pW..... |
//   00333d76: CFE0D9C0 AC9AFAAB 2F4DBE1D E551D043 | ......../M...Q.C |
//   00333d86: 05000000 4E6F6E65 00050000 004E6F6E | ....None.....Non |
//   00333d96: 65000000 00000000 00000000 00000000 | e............... |
//   00333da6: 00000000 00001700 0000              | ..........       |
// SourceHash: 1a10b61ff0647d10559bdf7a894520716ad93af1
// TargetFrequency: 0, TargetPlatform: 0
// NumUniformParameters: 1
//   StructName: FViewUniformShaderParameters
//    BaseIndex: 1, bIsBound: 1
// ShaderTypeName: None
// ResourceTableBits: 00000000
// ShaderResourceViewMap:
// SamplerMap:
// UnorderedAccessViewMap:
// ResourceTableLayoutHashes:
// Unknown Tail (77 bytes):
//   00000000: 70050100 00020075 11020000 00000000 | p......u........ |
//   00000010: 00050000 00566965 77006E30 44656665 | .....View.n0Defe |
//   00000020: 72726564 4C696768 74566572 74657853 | rredLightVertexS |
//   00000030: 68616465 72732E75 73667C52 61646961 | haders.usf|Radia |
//   00000040: 6C566572 7465784D 61696E00 00       | lVertexMain..    |
// OutputHash: c1baf08cfccb5fc8c55d2fbaac19754e167057b5
// NumInstructions: 69
// NumTextureSamplers: 0
//
// Headers extracted with DarkStarSword's extract_unreal_shaders.py
// https://github.com/DarkStarSword/3d-fixes

// ---- Created with 3Dmigoto v1.2.42 on Fri Sep 30 07:38:43 2016
cbuffer cb1 : register(b1)
{
  float4 cb1[4];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[8];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  uint v0 : SV_VertexID0,
  float3 v1 : ATTRIBUTE0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : SV_POSITION0)
{
// Needs manual fix for instruction: 
// unknown dcl_: dcl_input_sgv v0.x, vertex_id
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.x = (uint)cb0[2].x;
  if (r0.x != 0) {
    r0.y = (uint)r0.x;
    r0.z = 3.14159274 / r0.y;
    r0.z = cos(r0.z);
    r0.z = 1 / r0.z;
    sincos(cb0[2].z, r1.x, r2.x);
    r0.w = cb0[2].w * r2.x;
    r1.x = r1.x / r2.x;
    r1.y = (uint)cb0[2].y;
    r1.z = (int)r0.x * (int)r1.y;
    r1.w = cmp((uint)v0.x < (uint)r1.z);
    if (r1.w != 0) {
      uiDest.x = (uint)v0.x / (uint)r0.x;
      r3.x = (uint)v0.x % (uint)r0.x;
      r2.x = uiDest.x;
      r1.w = (uint)r3.x << 1;
      r1.w = (uint)r1.w;
      r1.w = 3.14159274 * r1.w;
      r1.w = r1.w / r0.y;
      r2.x = (uint)r2.x;
      r2.x = r2.x * r0.w;
      r2.y = (int)r1.y + -1;
      r2.y = (uint)r2.y;
      r2.x = r2.x / r2.y;
      r2.y = r2.x * r1.x;
      r2.y = r2.y * r0.z;
      sincos(r1.w, r3.x, r4.x);
      r1.w = r3.x * r2.y;
      r2.y = r4.x * r2.y;
      r3.xyz = cb0[4].xyz * r1.www;
      r2.xzw = r2.xxx * cb0[3].xyz + r3.xyz;
      r2.xyz = r2.yyy * cb0[5].xyz + r2.xzw;
      r2.xyz = cb0[6].xyz + r2.xyz;
      r2.xyz = cb0[7].xyz + r2.xyz;
    } else {
      r0.w = r1.x * r0.w;
      r1.x = (int)v0.x + (int)-r1.z;
      uiDest.x = (uint)r1.x / (uint)r0.x;
      r1.x = (uint)r1.x % (uint)r0.x;
      r0.x = uiDest.x;
      r0.x = (uint)r0.x;
      r0.x = r0.w * r0.x;
      r0.w = (int)r1.y + -1;
      r0.w = (uint)r0.w;
      r0.x = r0.x / r0.w;
      r0.z = r0.x * r0.z;
      r0.x = r0.x * r0.x;
      r0.x = cb0[2].w * cb0[2].w + -r0.x;
      r0.x = sqrt(r0.x);
      r0.w = (uint)r1.x << 1;
      r0.w = (uint)r0.w;
      r0.w = 3.14159274 * r0.w;
      r0.y = r0.w / r0.y;
      sincos(r0.y, r1.x, r3.x);
      r0.y = r1.x * r0.z;
      r0.z = r3.x * r0.z;
      r1.xyz = cb0[4].xyz * r0.yyy;
      r0.xyw = r0.xxx * cb0[3].xyz + r1.xyz;
      r0.xyz = r0.zzz * cb0[5].xyz + r0.xyw;
      r0.xyz = cb0[6].xyz + r0.xyz;
      r2.xyz = cb0[7].xyz + r0.xyz;
    }
  } else {
    r2.xyz = v1.xyz * cb0[1].www + cb0[1].xyz;
  }
  r0.xyzw = cb1[1].xyzw * r2.yyyy;
  r0.xyzw = r2.xxxx * cb1[0].xyzw + r0.xyzw;
  r0.xyzw = r2.zzzz * cb1[2].xyzw + r0.xyzw;
  r0.xyzw = cb1[3].xyzw + r0.xyzw;

o1.xyzw = r0.xyzw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --in-place 3c39886e9905c001-vs_replace.txt
if (r0.w != 1.0) { r0.x += separation * (r0.w - convergence); }

  o0.xyzw = r0.xyzw;

  // o1.xyzw = r0.xyzw; // Relocated from here with hlsltool.py

  return;
}
