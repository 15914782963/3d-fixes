// ---- Created with 3Dmigoto v1.2.51 on Sun Dec 25 07:56:20 2016
Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[12];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[14];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[60];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : COLOR0,
  float4 v3 : TEXCOORD0,
  float4 v4 : VELOCITY_PREV_POS0,
  float4 v5 : SV_Position0,
  uint v6 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4,
  out float4 o5 : SV_Target5)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb1[1].xy + v5.xy;
  r1.xy = r1.xy * cb1[2].zw + float2(-0.5,-0.5);
  r1.xy = v5.ww * r1.xy;
  r1.z = v5.w;
  r1.xyz = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb0[37].xyzw * v5.yyyy;
  r2.xyzw = v5.xxxx * cb0[36].xyzw + r2.xyzw;
  r2.xyzw = v5.zzzz * cb0[38].xyzw + r2.xyzw;
  r2.xyzw = cb0[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

// Common SVPositionToTranslatedWorld fix:
float4 s = StereoParams.Load(0);
matrix TranslatedWorldToClip = MATRIX(cb0, 0);
matrix ClipToTranslatedWorld = MATRIX(cb0, 32);
float4 t = mul(r2, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r2 = mul(t, ClipToTranslatedWorld);

  r2.xyz = -cb0[56].xyz + r2.xyz;
  r3.xyzw = float4(3,3,5,5) * v3.xyxy;
  r3.xy = t2.Sample(s1_s, r3.xy).xy;
  r4.xy = r3.xy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r4.xy, r4.xy);
  r0.w = 1 + -r0.w;
  r0.w = max(0, r0.w);
  r4.z = sqrt(r0.w);
  r5.x = cb4[6].x;
  r5.z = 1;
  r4.xyz = r5.xxz * r4.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = sqrt(r0.w);
  r4.xyz = r4.xyz / r0.www;
  r3.xy = -cb3[0].xy + r2.xy;
  r3.xy = cb3[0].zw * r3.xy;
  r0.w = t1.SampleLevel(s0_s, r3.xy, 0).x;
  r0.w = r0.w * cb3[1].x + cb3[1].y;
  r0.w = r2.z + -r0.w;
  r5.xy = r2.xy / cb4[6].yy;
  r1.w = t3.Sample(s2_s, r5.xy).z;
  r1.w = r1.w * cb4[6].z + cb4[6].w;
  r0.w = saturate(abs(r0.w) / r1.w);
  r0.w = 1 + -r0.w;
  r1.w = 0.00999999978 * cb2[8].w;
  r5.xy = v3.xy * r1.ww;
  r5.xy = cb4[7].xx * r5.xy;
  r1.w = t4.Sample(s3_s, r5.xy).y;
  r2.w = cb4[7].y + -cb4[7].z;
  r1.w = saturate(r1.w * r2.w + cb4[7].z);
  r1.w = 1 + -r1.w;
  r0.w = -r1.w + r0.w;
  r0.w = ceil(r0.w);
  r5.x = v0.z;
  r5.y = r0.z;
  r5.z = v1.z;
  r5.xyz = r5.xyz + -r4.xyz;
  r4.xyz = r0.www * r5.xyz + r4.xyz;
  r4.xyz = r4.xyz * cb1[7].www + cb1[7].xyz;
  r1.w = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r1.w);
  r4.xyz = r4.xyz * r1.www;
  r0.xyz = r4.yyy * r0.xyz;
  r0.xyz = r4.xxx * v0.xyz + r0.xyz;
  r0.xyz = r4.zzz * v1.xyz + r0.xyz;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  r0.xyz = r1.www * r0.xyz;
  r1.w = t5.Sample(s4_s, v3.zw).x;
  r2.w = -0.00999999978 + cb4[7].w;
  r2.w = saturate(11.1111107 * r2.w);
  r2.w = cb4[8].x * r2.w;
  r2.w = max(9.99999975e-005, r2.w);
  r4.x = -r2.w * 0.5 + cb4[7].w;
  r1.w = -r4.x + r1.w;
  r2.w = r2.w * 0.5 + cb4[7].w;
  r2.w = r2.w + -r4.x;
  r1.w = saturate(r1.w / r2.w);
  r1.w = 1 + -r1.w;
  r1.w = cb4[8].y * r1.w;
  r4.xyz = float3(0.985000014,0.337462008,0) * r1.www;
  r4.xyz = r0.www * -r4.xyz + r4.xyz;
  r4.xyz = cb4[1].xyz + r4.xyz;
  r5.xyz = cb4[5].xyz * v2.xyz;
  r6.xyz = t0.SampleLevel(s0_s, r3.xy, 0).xyz;
  r6.xyz = -cb4[5].xyz * v2.xyz + r6.xyz;
  r5.xyz = r0.www * r6.xyz + r5.xyz;
  r5.xyz = saturate(cb4[2].xyz * r5.xyz);
  r3.x = saturate(r0.w * -cb4[8].z + cb4[8].z);
  r3.y = saturate(r0.w * -v2.x + v2.x);
  r1.w = t6.Sample(s5_s, r3.zw).x;
  r2.w = -cb4[9].x + cb4[8].w;
  r1.w = r1.w * r2.w + cb4[9].x;
  r2.w = 1 + -r1.w;
  r0.w = saturate(r0.w * r2.w + r1.w);
  o2.z = r0.w * cb1[8].y + cb1[8].x;
  r6.xyz = -r5.xyz * r3.xxx + r5.xyz;
  r0.w = 0.0799999982 * r3.y;
  r7.xyz = -r3.yyy * float3(0.0799999982,0.0799999982,0.0799999982) + r5.xyz;
  r7.xyz = r3.xxx * r7.xyz + r0.www;
  r6.xyz = r6.xyz * cb1[5].www + cb1[5].xyz;
  r7.xyz = r7.xyz * cb1[6].www + cb1[6].xyz;
  r6.xyz = r7.xyz + r6.xyz;
  r4.xyz = max(float3(0,0,0), r4.xyz);
  r0.w = cmp(0 < cb1[9].x);
  if (r0.w != 0) {
    r7.xyz = -cb2[8].xyz + r2.xyz;
    r8.xyz = float3(1,1,1) + cb2[9].xyz;
    r7.xyz = cmp(r8.xyz < abs(r7.xyz));
    r0.w = (int)r7.y | (int)r7.x;
    r0.w = (int)r7.z | (int)r0.w;
    r1.w = dot(r2.xyz, float3(0.577000022,0.577000022,0.577000022));
    r1.w = 0.00200000009 * r1.w;
    r1.w = frac(r1.w);
    r1.w = cmp(0.5 < r1.w);
    r2.xyz = r1.www ? float3(0,1,1) : float3(1,1,0);
    r4.xyz = r0.www ? r2.xyz : r4.xyz;
  }
  o0.xyz = cb1[13].xxx * r6.xyz + r4.xyz;
  r1.xy = r1.xy / r1.zz;
  r1.xy = -cb0[26].xy + r1.xy;
  r1.zw = v4.xy / v4.ww;
  r1.zw = -cb0[59].xy + r1.zw;
  r1.xy = r1.xy + -r1.zw;
  r1.xy = r1.xy * float2(0.249500006,0.249500006) + float2(0.499992371,0.499992371);
  o4.xy = v4.zz * r1.xy;
  o4.zw = float2(0,0);
  o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.w = 0;
  o1.w = cb2[11].x;
  o2.w = 0.129411772;
  o2.xy = r3.xy;
  o3.xyz = r5.xyz;
  o3.w = 1;
  o5.xyzw = float4(0,0,0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sun Dec 25 07:56:20 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// VELOCITY_PREV_POS        0   xyzw        4     NONE   float   xyzw
// SV_Position              0   xyzw        5      POS   float   xyzw
// SV_IsFrontFace           0   x           6    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
// SV_Target                5   xyzw        5   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[60], immediateIndexed
dcl_constantbuffer cb1[14], immediateIndexed
dcl_constantbuffer cb2[12], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb4[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps_siv linear noperspective v5.xyzw, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 9
mul r0.xyz, v0.yzxy, v1.zxyz
mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v1.wwww
add r1.xy, v5.xyxx, -cb1[1].xyxx
mad r1.xy, r1.xyxx, cb1[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.xy, r1.xyxx, v5.wwww
mov r1.z, v5.w
mul r1.xyz, r1.xyzx, l(2.000000, -2.000000, 1.000000, 0.000000)
mul r2.xyzw, v5.yyyy, cb0[37].xyzw
mad r2.xyzw, v5.xxxx, cb0[36].xyzw, r2.xyzw
mad r2.xyzw, v5.zzzz, cb0[38].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[39].xyzw
div r2.xyz, r2.xyzx, r2.wwww
add r2.xyz, r2.xyzx, -cb0[56].xyzx
mul r3.xyzw, v3.xyxy, l(3.000000, 3.000000, 5.000000, 5.000000)
sample_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t2.xyzw, s1
mad r4.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r4.xyxx, r4.xyxx
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
sqrt r4.z, r0.w
mov r5.x, cb4[6].x
mov r5.z, l(1.000000)
mul r4.xyz, r4.xyzx, r5.xxzx
dp3 r0.w, r4.xyzx, r4.xyzx
sqrt r0.w, r0.w
div r4.xyz, r4.xyzx, r0.wwww
add r3.xy, r2.xyxx, -cb3[0].xyxx
mul r3.xy, r3.xyxx, cb3[0].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t1.yzwx, s0, l(0.000000)
mad r0.w, r0.w, cb3[1].x, cb3[1].y
add r0.w, -r0.w, r2.z
div r5.xy, r2.xyxx, cb4[6].yyyy
sample_indexable(texture2d)(float,float,float,float) r1.w, r5.xyxx, t3.xywz, s2
mad r1.w, r1.w, cb4[6].z, cb4[6].w
div_sat r0.w, |r0.w|, r1.w
add r0.w, -r0.w, l(1.000000)
mul r1.w, cb2[8].w, l(0.010000)
mul r5.xy, r1.wwww, v3.xyxx
mul r5.xy, r5.xyxx, cb4[7].xxxx
sample_indexable(texture2d)(float,float,float,float) r1.w, r5.xyxx, t4.xzwy, s3
add r2.w, -cb4[7].z, cb4[7].y
mad_sat r1.w, r1.w, r2.w, cb4[7].z
add r1.w, -r1.w, l(1.000000)
add r0.w, r0.w, -r1.w
round_pi r0.w, r0.w
mov r5.x, v0.z
mov r5.y, r0.z
mov r5.z, v1.z
add r5.xyz, -r4.xyzx, r5.xyzx
mad r4.xyz, r0.wwww, r5.xyzx, r4.xyzx
mad r4.xyz, r4.xyzx, cb1[7].wwww, cb1[7].xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx
mul r0.xyz, r0.xyzx, r4.yyyy
mad r0.xyz, r4.xxxx, v0.xyzx, r0.xyzx
mad r0.xyz, r4.zzzz, v1.xyzx, r0.xyzx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww
sample_indexable(texture2d)(float,float,float,float) r1.w, v3.zwzz, t5.yzwx, s4
add r2.w, cb4[7].w, l(-0.010000)
mul_sat r2.w, r2.w, l(11.111111)
mul r2.w, r2.w, cb4[8].x
max r2.w, r2.w, l(0.000100)
mad r4.x, -r2.w, l(0.500000), cb4[7].w
add r1.w, r1.w, -r4.x
mad r2.w, r2.w, l(0.500000), cb4[7].w
add r2.w, -r4.x, r2.w
div_sat r1.w, r1.w, r2.w
add r1.w, -r1.w, l(1.000000)
mul r1.w, r1.w, cb4[8].y
mul r4.xyz, r1.wwww, l(0.985000, 0.337462, 0.000000, 0.000000)
mad r4.xyz, r0.wwww, -r4.xyzx, r4.xyzx
add r4.xyz, r4.xyzx, cb4[1].xyzx
mul r5.xyz, v2.xyzx, cb4[5].xyzx
sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r3.xyxx, t0.xyzw, s0, l(0.000000)
mad r6.xyz, -cb4[5].xyzx, v2.xyzx, r6.xyzx
mad r5.xyz, r0.wwww, r6.xyzx, r5.xyzx
mul_sat r5.xyz, r5.xyzx, cb4[2].xyzx
mad_sat r3.x, r0.w, -cb4[8].z, cb4[8].z
mad_sat r3.y, r0.w, -v2.x, v2.x
sample_indexable(texture2d)(float,float,float,float) r1.w, r3.zwzz, t6.yzwx, s5
add r2.w, cb4[8].w, -cb4[9].x
mad r1.w, r1.w, r2.w, cb4[9].x
add r2.w, -r1.w, l(1.000000)
mad_sat r0.w, r0.w, r2.w, r1.w
mad o2.z, r0.w, cb1[8].y, cb1[8].x
mad r6.xyz, -r5.xyzx, r3.xxxx, r5.xyzx
mul r0.w, r3.y, l(0.080000)
mad r7.xyz, -r3.yyyy, l(0.080000, 0.080000, 0.080000, 0.000000), r5.xyzx
mad r7.xyz, r3.xxxx, r7.xyzx, r0.wwww
mad r6.xyz, r6.xyzx, cb1[5].wwww, cb1[5].xyzx
mad r7.xyz, r7.xyzx, cb1[6].wwww, cb1[6].xyzx
add r6.xyz, r6.xyzx, r7.xyzx
max r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb1[9].x
if_nz r0.w
  add r7.xyz, r2.xyzx, -cb2[8].xyzx
  add r8.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r7.xyz, r8.xyzx, |r7.xyzx|
  or r0.w, r7.y, r7.x
  or r0.w, r7.z, r0.w
  dp3 r1.w, r2.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.w, r1.w, l(0.002000)
  frc r1.w, r1.w
  lt r1.w, l(0.500000), r1.w
  movc r2.xyz, r1.wwww, l(0,1.000000,1.000000,0), l(1.000000,1.000000,0,0)
  movc r4.xyz, r0.wwww, r2.xyzx, r4.xyzx
endif 
mad o0.xyz, cb1[13].xxxx, r6.xyzx, r4.xyzx
div r1.xy, r1.xyxx, r1.zzzz
add r1.xy, r1.xyxx, -cb0[26].xyxx
div r1.zw, v4.xxxy, v4.wwww
add r1.zw, r1.zzzw, -cb0[59].xxxy
add r1.xy, -r1.zwzz, r1.xyxx
mad r1.xy, r1.xyxx, l(0.249500, 0.249500, 0.000000, 0.000000), l(0.499992371, 0.499992371, 0.000000, 0.000000)
mul o4.xy, r1.xyxx, v4.zzzz
mov o4.zw, l(0,0,0,0)
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0)
mov o1.w, cb2[11].x
mov o2.w, l(0.129411772)
mov o2.xy, r3.xyxx
mov o3.xyz, r5.xyzx
mov o3.w, l(1.000000)
mov o5.xyzw, l(0,0,0,0)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
