// pyramid explosion (has a 2D component)

// ---- Created with 3Dmigoto v1.2.51 on Sat Dec 24 12:33:39 2016
Texture3D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[13];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[26];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[14];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[45];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[57];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD7,
  float4 v4 : SV_Position0,
  uint v5 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 s = StereoParams.Load(0);

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb1[1].xy + v4.xy;
  r1.xy = r1.xy * cb1[2].zw + float2(-0.5,-0.5);
  r1.xy = v4.ww * r1.xy;
  r1.z = v4.w;
  r1.xyw = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb0[37].xyzw * v4.yyyy;
  r2.xyzw = v4.xxxx * cb0[36].xyzw + r2.xyzw;
  r2.xyzw = v4.zzzz * cb0[38].xyzw + r2.xyzw;
  r2.xyzw = cb0[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

// No apparent effect:
// Common SVPositionToTranslatedWorld fix:
matrix TranslatedWorldToClip = MATRIX(cb0, 0);
matrix ClipToTranslatedWorld = MATRIX(cb0, 32);
float4 t = mul(r2.xyz, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r2.xyz = mul(t, ClipToTranslatedWorld);

  r3.xyz = -cb0[56].xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r2.xyz = -r2.xyz / r0.www;
  r0.w = cb2[9].w * cb1[10].w;
  r2.w = v5.x ? 1 : -1;
  r0.w = r2.w * r0.w;
  r4.xyz = cb1[7].www * float3(0,0,1) + cb1[7].xyz;
  r4.xyz = r4.xyz * r0.www;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.xyz = r4.yyy * r0.xyz;
  r0.xyz = r4.xxx * v0.xyz + r0.xyz;
  r0.xyz = r4.zzz * v1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = cb4[8].z * cb1[11].z;
  r0.w = t3.Sample(s2_s, r0.ww).x;
  r2.w = 50 * r0.w;
  sincos(r2.w, r4.x, r5.x);
  r6.x = -r4.x;
  r1.xy = r1.xy / r1.ww;
  r1.xy = r1.xy * cb0[52].xy + cb0[52].wz;
  r4.yz = cb1[44].zw * r1.xy;

// Adjust depth of 2D texture to more or less line up with the explosion. Not
// perfect, but better than leaving this texture at screen depth:
r4.y -= s.x * (t.w - s.y) / t.w / 2 * cb1[44].z;

  r4.yz = float2(0.0009765625,0.0009765625) * r4.yz;
  r5.yzw = -cb2[8].xyz + cb0[53].xyz;
  r2.w = dot(r5.yzw, r5.yzw);
  r2.w = sqrt(r2.w);
  r2.w = r2.w / cb4[8].w;
  r3.w = max(cb2[13].x, cb2[13].y);
  r3.w = max(cb2[13].z, r3.w);
  r3.w = cb4[9].x * r3.w;
  r2.w = r2.w / r3.w;
  r4.yz = r4.yz * r2.ww + r0.ww;
  r4.yz = float2(-1,-1) + r4.yz;
  r6.y = r5.x;
  r5.x = dot(r6.yx, r4.yz);
  r6.z = r4.x;
  r5.y = dot(r6.zy, r4.yz);
  r4.xy = float2(1,1) + r5.xy;

  // 2D texture:
  r0.w = t4.Sample(s3_s, r4.xy).x;

  r2.w = t3.Sample(s2_s, v2.xy).x;
  r3.w = cb4[9].y * 2 + 1;
  r2.w = saturate(r2.w * r3.w + -cb4[9].y);
  r3.w = 0.00999999978 * cb2[8].w;
  r4.xy = v2.zw * r3.ww;
  r4.xy = cb4[9].zz * r4.xy;
  r3.w = t5.Sample(s4_s, r4.xy).x;
  r2.w = r3.w * cb4[9].w + r2.w;
  r0.x = dot(r0.xyz, r2.xyz);
  r0.x = max(0, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = max(9.99999997e-007, abs(r0.x));
  r0.x = log2(r0.x);
  r0.x = cb4[10].y * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r0.x * 0.959999979 + 0.0399999991;
  r0.y = cb4[10].x * 2 + 1;
  r0.x = saturate(r0.x * r0.y + -cb4[10].x);
  r0.x = r2.w * r0.x + r0.w;
  r0.y = max(9.99999997e-007, abs(r0.x));
  r0.y = log2(r0.y);
  r0.y = cb4[10].z * r0.y;
  r0.y = exp2(r0.y);

// Need original r1.xy:
  r0.z = t6.SampleLevel(s5_s, r1.xy, 0).x;

  r0.z = r0.z * cb0[51].z + -cb0[51].w;
  r0.z = 1 / r0.z;
  r0.z = -r1.z * 1 + r0.z;
  r0.zw = saturate(r0.zz / cb4[11].xz);
  r2.xyz = cb4[3].xyz * r0.yyy + -cb4[4].xyz;
  r2.xyz = r0.zzz * r2.xyz + cb4[4].xyz;
  r2.xyz = cb4[5].xyz + r2.xyz;
  r0.x = saturate(r0.x + r0.z);
  r0.x = r0.x * r0.w;
  r0.y = saturate(r1.w / cb4[11].w);
  r0.y = max(9.99999997e-007, r0.y);
  r0.z = r0.y * r0.y;
  r0.y = dot(r0.yy, r0.zz);
  r0.y = saturate(r0.z * 3 + -r0.y);
  r0.x = r0.x * r0.y;
  r0.w = saturate(cb4[12].y * r0.x);
  r1.x = t2.Sample(s1_s, r1.xy).x;
  r1.x = cmp(r1.x == 0.000000);
  if (r1.x != 0) {
    r4.xyz = -cb0[53].xyz + r3.xyz;
    r5.xyz = cb0[1].xyw * r4.yyy;
    r5.xyz = r4.xxx * cb0[0].xyw + r5.xyz;
    r5.xyz = r4.zzz * cb0[2].xyw + r5.xyz;
    r5.xyz = cb0[3].xyw + r5.xyz;
    r5.xy = r5.xy / r5.zz;
    r1.x = dot(r4.xyz, r4.xyz);
    r1.x = sqrt(r1.x);
    r1.x = saturate(cb3[10].z * r1.x);
    r1.x = log2(r1.x);
    r1.x = cb3[11].x * r1.x;
    r5.z = exp2(r1.x);
    r4.xyz = r5.xyz * float3(0.5,-0.5,1) + float3(0.5,0.5,0);
    r4.xyz = r4.xyz * cb3[15].xyz + cb3[14].xyz;
    r1.x = t7.SampleLevel(s0_s, r4.xyz, 0).w;
  } else {
    r1.y = -cb3[15].w + r3.z;
    r4.x = saturate(cb3[16].x * r1.y);
    r4.y = 0;
    r5.xyz = t0.SampleLevel(s0_s, r4.xy, 0).yzw;
    r6.xyz = cb3[24].yzw + -r5.xyz;
    r5.xyz = cb3[22].yyy * r6.xyz + r5.xyz;
    r4.zw = float2(1,1) / r5.xz;
    r6.xyzw = t1.SampleLevel(s0_s, r4.xy, 0).xyzw;
    r7.xyzw = cb3[25].xyzw + -r6.xyzw;
    r6.xyzw = cb3[22].yyyy * r7.xyzw + r6.xyzw;
    r1.y = saturate(r4.z * r1.w);
    r1.y = log2(r1.y);
    r1.y = r6.x * r1.y;
    r1.y = exp2(r1.y);
    r1.z = r1.z * 1 + -r5.y;
    r1.z = saturate(r1.z * r4.w);
    r1.z = log2(r1.z);
    r1.z = r6.y * r1.z;
    r1.z = exp2(r1.z);
    r1.z = r1.z * r6.w;
    r1.y = saturate(r1.y * r6.z + r1.z);
    r1.x = 1 + -r1.y;
  }
  r0.xyz = max(float3(0,0,0), r2.xyz);
  r1.y = cmp(0 < cb1[9].x);
  if (r1.y != 0) {
    r1.yzw = -cb2[8].xyz + r3.xyz;
    r2.xyz = float3(1,1,1) + cb2[9].xyz;
    r1.yzw = cmp(r2.xyz < abs(r1.yzw));
    r1.y = (int)r1.z | (int)r1.y;
    r1.y = (int)r1.w | (int)r1.y;
    r1.z = dot(r3.xyz, float3(0.577000022,0.577000022,0.577000022));
    r1.z = 0.00200000009 * r1.z;
    r1.z = frac(r1.z);
    r1.z = cmp(0.5 < r1.z);
    r2.yzw = r1.zzz ? float3(0,1,1) : float3(1,1,0);
    r2.x = 1;
    r0.xyzw = r1.yyyy ? r2.yzwx : r0.xyzw;
  }
  r0.xyz = r0.xyz * r1.xxx;
  o0.xyz = r0.xyz * r0.www;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sat Dec 24 12:33:39 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 7   xyzw        3     NONE   float       
// SV_Position              0   xyzw        4      POS   float   xyzw
// SV_IsFrontFace           0   x           5    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[57], immediateIndexed
dcl_constantbuffer cb1[45], immediateIndexed
dcl_constantbuffer cb2[14], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[13], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture3d (float,float,float,float) t7
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps_siv linear noperspective v4.xyzw, position
dcl_input_ps_sgv v5.x, is_front_face
dcl_output o0.xyzw
dcl_temps 8
mul r0.xyz, v0.yzxy, v1.zxyz
mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v1.wwww
add r1.xy, v4.xyxx, -cb1[1].xyxx
mad r1.xy, r1.xyxx, cb1[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.xy, r1.xyxx, v4.wwww
mov r1.z, v4.w
mul r1.xyw, r1.xyxz, l(2.000000, -2.000000, 0.000000, 1.000000)
mul r2.xyzw, v4.yyyy, cb0[37].xyzw
mad r2.xyzw, v4.xxxx, cb0[36].xyzw, r2.xyzw
mad r2.xyzw, v4.zzzz, cb0[38].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[39].xyzw
div r2.xyz, r2.xyzx, r2.wwww
add r3.xyz, r2.xyzx, -cb0[56].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
div r2.xyz, -r2.xyzx, r0.wwww
mul r0.w, cb1[10].w, cb2[9].w
movc r2.w, v5.x, l(1.000000), l(-1.000000)
mul r0.w, r0.w, r2.w
mad r4.xyz, cb1[7].wwww, l(0.000000, 0.000000, 1.000000, 0.000000), cb1[7].xyzx
mul r4.xyz, r0.wwww, r4.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
mul r0.xyz, r0.xyzx, r4.yyyy
mad r0.xyz, r4.xxxx, v0.xyzx, r0.xyzx
mad r0.xyz, r4.zzzz, v1.xyzx, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.w, cb1[11].z, cb4[8].z
sample_indexable(texture2d)(float,float,float,float) r0.w, r0.wwww, t3.yzwx, s2
mul r2.w, r0.w, l(50.000000)
sincos r4.x, r5.x, r2.w
mov r6.x, -r4.x
div r1.xy, r1.xyxx, r1.wwww
mad r1.xy, r1.xyxx, cb0[52].xyxx, cb0[52].wzww
mul r4.yz, r1.xxyx, cb1[44].zzwz
mul r4.yz, r4.yyzy, l(0.000000, 0.000976562500, 0.000976562500, 0.000000)
add r5.yzw, cb0[53].xxyz, -cb2[8].xxyz
dp3 r2.w, r5.yzwy, r5.yzwy
sqrt r2.w, r2.w
div r2.w, r2.w, cb4[8].w
max r3.w, cb2[13].y, cb2[13].x
max r3.w, r3.w, cb2[13].z
mul r3.w, r3.w, cb4[9].x
div r2.w, r2.w, r3.w
mad r4.yz, r4.yyzy, r2.wwww, r0.wwww
add r4.yz, r4.yyzy, l(0.000000, -1.000000, -1.000000, 0.000000)
mov r6.y, r5.x
dp2 r5.x, r6.yxyy, r4.yzyy
mov r6.z, r4.x
dp2 r5.y, r6.zyzz, r4.yzyy
add r4.xy, r5.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.w, r4.xyxx, t4.yzwx, s3
sample_indexable(texture2d)(float,float,float,float) r2.w, v2.xyxx, t3.yzwx, s2
mad r3.w, cb4[9].y, l(2.000000), l(1.000000)
mad_sat r2.w, r2.w, r3.w, -cb4[9].y
mul r3.w, cb2[8].w, l(0.010000)
mul r4.xy, r3.wwww, v2.zwzz
mul r4.xy, r4.xyxx, cb4[9].zzzz
sample_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t5.yzwx, s4
mad r2.w, r3.w, cb4[9].w, r2.w
dp3 r0.x, r0.xyzx, r2.xyzx
max r0.x, r0.x, l(0.000000)
add r0.x, -r0.x, l(1.000000)
max r0.x, |r0.x|, l(0.000001)
log r0.x, r0.x
mul r0.x, r0.x, cb4[10].y
exp r0.x, r0.x
mad r0.x, r0.x, l(0.960000), l(0.040000)
mad r0.y, cb4[10].x, l(2.000000), l(1.000000)
mad_sat r0.x, r0.x, r0.y, -cb4[10].x
mad r0.x, r2.w, r0.x, r0.w
max r0.y, |r0.x|, l(0.000001)
log r0.y, r0.y
mul r0.y, r0.y, cb4[10].z
exp r0.y, r0.y
sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t6.yzxw, s5, l(0.000000)
mad r0.z, r0.z, cb0[51].z, -cb0[51].w
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mad r0.z, -r1.z, l(1.000000), r0.z
div_sat r0.zw, r0.zzzz, cb4[11].xxxz
mad r2.xyz, cb4[3].xyzx, r0.yyyy, -cb4[4].xyzx
mad r2.xyz, r0.zzzz, r2.xyzx, cb4[4].xyzx
add r2.xyz, r2.xyzx, cb4[5].xyzx
add_sat r0.x, r0.z, r0.x
mul r0.x, r0.w, r0.x
div_sat r0.y, r1.w, cb4[11].w
max r0.y, r0.y, l(0.000001)
mul r0.z, r0.y, r0.y
dp2 r0.y, r0.yyyy, r0.zzzz
mad_sat r0.y, r0.z, l(3.000000), -r0.y
mul r0.x, r0.y, r0.x
mul_sat r0.w, r0.x, cb4[12].y
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t2.xyzw, s1
eq r1.x, r1.x, l(0.000000)
if_nz r1.x
  add r4.xyz, r3.xyzx, -cb0[53].xyzx
  mul r5.xyz, r4.yyyy, cb0[1].xywx
  mad r5.xyz, r4.xxxx, cb0[0].xywx, r5.xyzx
  mad r5.xyz, r4.zzzz, cb0[2].xywx, r5.xyzx
  add r5.xyz, r5.xyzx, cb0[3].xywx
  div r5.xy, r5.xyxx, r5.zzzz
  dp3 r1.x, r4.xyzx, r4.xyzx
  sqrt r1.x, r1.x
  mul_sat r1.x, r1.x, cb3[10].z
  log r1.x, r1.x
  mul r1.x, r1.x, cb3[11].x
  exp r5.z, r1.x
  mad r4.xyz, r5.xyzx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r4.xyz, r4.xyzx, cb3[15].xyzx, cb3[14].xyzx
  sample_l_indexable(texture3d)(float,float,float,float) r1.x, r4.xyzx, t7.wxyz, s0, l(0.000000)
else 
  add r1.y, r3.z, -cb3[15].w
  mul_sat r4.x, r1.y, cb3[16].x
  mov r4.y, l(0)
  sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r4.xyxx, t0.yzwx, s0, l(0.000000)
  add r6.xyz, -r5.xyzx, cb3[24].yzwy
  mad r5.xyz, cb3[22].yyyy, r6.xyzx, r5.xyzx
  div r4.zw, l(1.000000, 1.000000, 1.000000, 1.000000), r5.xxxz
  sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r4.xyxx, t1.xyzw, s0, l(0.000000)
  add r7.xyzw, -r6.xyzw, cb3[25].xyzw
  mad r6.xyzw, cb3[22].yyyy, r7.xyzw, r6.xyzw
  mul_sat r1.y, r1.w, r4.z
  log r1.y, r1.y
  mul r1.y, r1.y, r6.x
  exp r1.y, r1.y
  mad r1.z, r1.z, l(1.000000), -r5.y
  mul_sat r1.z, r4.w, r1.z
  log r1.z, r1.z
  mul r1.z, r1.z, r6.y
  exp r1.z, r1.z
  mul r1.z, r6.w, r1.z
  mad_sat r1.y, r1.y, r6.z, r1.z
  add r1.x, -r1.y, l(1.000000)
endif 
max r0.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r1.y, l(0.000000), cb1[9].x
if_nz r1.y
  add r1.yzw, r3.xxyz, -cb2[8].xxyz
  add r2.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r1.yzw, r2.xxyz, |r1.yyzw|
  or r1.y, r1.z, r1.y
  or r1.y, r1.w, r1.y
  dp3 r1.z, r3.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.z, r1.z, l(0.002000)
  frc r1.z, r1.z
  lt r1.z, l(0.500000), r1.z
  movc r2.yzw, r1.zzzz, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r2.x, l(1.000000)
  movc r0.xyzw, r1.yyyy, r2.yzwx, r0.xyzw
endif 
mul r0.xyz, r1.xxxx, r0.xyzx
mul o0.xyz, r0.wwww, r0.xyzx
mov o0.w, l(0)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
