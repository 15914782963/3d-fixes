// ---- Created with 3Dmigoto v1.2.51 on Sat Dec 24 07:42:39 2016
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[9];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[12];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[14];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[60];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : COLOR0,
  float4 v3 : TEXCOORD0,
  float4 v4 : VELOCITY_PREV_POS0,
  float4 v5 : SV_Position0,
  uint v6 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4,
  out float4 o5 : SV_Target5)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb1[1].xy + v5.xy;
  r1.xy = r1.xy * cb1[2].zw + float2(-0.5,-0.5);
  r1.xy = v5.ww * r1.xy;
  r1.z = v5.w;
  r1.xyz = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb0[37].xyzw * v5.yyyy;
  r2.xyzw = v5.xxxx * cb0[36].xyzw + r2.xyzw;
  r2.xyzw = v5.zzzz * cb0[38].xyzw + r2.xyzw;
  r2.xyzw = cb0[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

float4 s = StereoParams.Load(0);
matrix m = MATRIX(cb0, 36);
matrix im = inverse(m);
float4 t = mul(float4(r2.xyz, 1), im);
t.x -= s.x * (t.w - s.y) * cb1[3].x / 2;
r2.xyz = mul(t, m);

  r2.xyz = -cb0[56].xyz + r2.xyz;
  r0.w = cb2[9].w * cb1[10].w;
  r1.w = v6.x ? 1 : -1;
  r0.w = r1.w * r0.w;
  r3.xyz = cb1[7].www * float3(0,0,1) + cb1[7].xyz;
  r3.xyz = r3.xyz * r0.www;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.xyz = r3.yyy * r0.xyz;
  r0.xyz = r3.xxx * v0.xyz + r0.xyz;
  r0.xyz = r3.zzz * v1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r3.xy = cb3[8].xx * v3.xy;
  r3.xyzw = t0.Sample(s0_s, r3.xy).xyzw;
  r0.w = max(9.99999997e-007, abs(r3.x));
  r0.w = log2(r0.w);
  r0.w = cb3[8].y * r0.w;
  r0.w = exp2(r0.w);
  r4.xyz = r0.www * cb3[8].zzz + cb3[1].xyz;
  r3.xyz = v2.xyz * r3.xyz;
  r3.xyz = saturate(cb3[2].xyz * r3.xyz);
  r5.xy = -cb3[4].xy + r2.xy;
  r5.xy = r5.xy / cb3[5].xy;
  r0.w = t1.Sample(s1_s, r5.xy).x;
  r0.w = r3.w * r0.w + -0.333299994;
  r0.w = cmp(r0.w < 0);
  if (r0.w != 0) discard;
  o2.z = cb1[8].y * 0.5 + cb1[8].x;
  r5.xyz = v2.xyz * v2.xyz;
  r5.xyz = r5.xyz * r5.xyz;
  r5.xyz = saturate(cb3[7].xyz * r5.xyz);
  r5.xyz = saturate(r5.xyz * cb1[5].www + cb1[5].xyz);
  r6.xyz = r3.xyz * cb1[5].www + cb1[5].xyz;
  r6.xyz = cb1[6].xyz + r6.xyz;
  r4.xyz = max(float3(0,0,0), r4.xyz);
  r0.w = cmp(0 < cb1[9].x);
  if (r0.w != 0) {
    r7.xyz = -cb2[8].xyz + r2.xyz;
    r8.xyz = float3(1,1,1) + cb2[9].xyz;
    r7.xyz = cmp(r8.xyz < abs(r7.xyz));
    r0.w = (int)r7.y | (int)r7.x;
    r0.w = (int)r7.z | (int)r0.w;
    r1.w = dot(r2.xyz, float3(0.577000022,0.577000022,0.577000022));
    r1.w = 0.00200000009 * r1.w;
    r1.w = frac(r1.w);
    r1.w = cmp(0.5 < r1.w);
    r2.xyz = r1.www ? float3(0,1,1) : float3(1,1,0);
    r4.xyz = r0.www ? r2.xyz : r4.xyz;
  }
  o0.xyz = cb1[13].xxx * r6.xyz + r4.xyz;
  o5.xyz = sqrt(r5.xyz);
  r1.xy = r1.xy / r1.zz;
  r1.xy = -cb0[26].xy + r1.xy;
  r1.zw = v4.xy / v4.ww;
  r1.zw = -cb0[59].xy + r1.zw;
  r1.xy = r1.xy + -r1.zw;
  r1.xy = r1.xy * float2(0.249500006,0.249500006) + float2(0.499992371,0.499992371);
  o4.xy = v4.zz * r1.xy;
  o4.zw = float2(0,0);
  o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.w = 0;
  o1.w = cb2[11].x;
  o2.xyw = float3(0,0,0.149019614);
  o3.xyz = r3.xyz;
  o3.w = 1;
  o5.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sat Dec 24 07:42:39 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// VELOCITY_PREV_POS        0   xyzw        4     NONE   float   xyzw
// SV_Position              0   xyzw        5      POS   float   xyzw
// SV_IsFrontFace           0   x           6    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
// SV_Target                5   xyzw        5   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[60], immediateIndexed
dcl_constantbuffer cb1[14], immediateIndexed
dcl_constantbuffer cb2[12], immediateIndexed
dcl_constantbuffer cb3[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xyzw
dcl_input_ps_siv linear noperspective v5.xyzw, position
dcl_input_ps_sgv v6.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 9
mul r0.xyz, v0.yzxy, v1.zxyz
mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v1.wwww
add r1.xy, v5.xyxx, -cb1[1].xyxx
mad r1.xy, r1.xyxx, cb1[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.xy, r1.xyxx, v5.wwww
mov r1.z, v5.w
mul r1.xyz, r1.xyzx, l(2.000000, -2.000000, 1.000000, 0.000000)
mul r2.xyzw, v5.yyyy, cb0[37].xyzw
mad r2.xyzw, v5.xxxx, cb0[36].xyzw, r2.xyzw
mad r2.xyzw, v5.zzzz, cb0[38].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[39].xyzw
div r2.xyz, r2.xyzx, r2.wwww
add r2.xyz, r2.xyzx, -cb0[56].xyzx
mul r0.w, cb1[10].w, cb2[9].w
movc r1.w, v6.x, l(1.000000), l(-1.000000)
mul r0.w, r0.w, r1.w
mad r3.xyz, cb1[7].wwww, l(0.000000, 0.000000, 1.000000, 0.000000), cb1[7].xyzx
mul r3.xyz, r0.wwww, r3.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mul r0.xyz, r0.xyzx, r3.yyyy
mad r0.xyz, r3.xxxx, v0.xyzx, r0.xyzx
mad r0.xyz, r3.zzzz, v1.xyzx, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r3.xy, v3.xyxx, cb3[8].xxxx
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r3.xyxx, t0.xyzw, s0
max r0.w, |r3.x|, l(0.000001)
log r0.w, r0.w
mul r0.w, r0.w, cb3[8].y
exp r0.w, r0.w
mad r4.xyz, r0.wwww, cb3[8].zzzz, cb3[1].xyzx
mul r3.xyz, r3.xyzx, v2.xyzx
mul_sat r3.xyz, r3.xyzx, cb3[2].xyzx
add r5.xy, r2.xyxx, -cb3[4].xyxx
div r5.xy, r5.xyxx, cb3[5].xyxx
sample_indexable(texture2d)(float,float,float,float) r0.w, r5.xyxx, t1.yzwx, s1
mad r0.w, r3.w, r0.w, l(-0.333300)
lt r0.w, r0.w, l(0.000000)
discard_nz r0.w
mad o2.z, cb1[8].y, l(0.500000), cb1[8].x
mul r5.xyz, v2.xyzx, v2.xyzx
mul r5.xyz, r5.xyzx, r5.xyzx
mul_sat r5.xyz, r5.xyzx, cb3[7].xyzx
mad_sat r5.xyz, r5.xyzx, cb1[5].wwww, cb1[5].xyzx
mad r6.xyz, r3.xyzx, cb1[5].wwww, cb1[5].xyzx
add r6.xyz, r6.xyzx, cb1[6].xyzx
max r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb1[9].x
if_nz r0.w
  add r7.xyz, r2.xyzx, -cb2[8].xyzx
  add r8.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r7.xyz, r8.xyzx, |r7.xyzx|
  or r0.w, r7.y, r7.x
  or r0.w, r7.z, r0.w
  dp3 r1.w, r2.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.w, r1.w, l(0.002000)
  frc r1.w, r1.w
  lt r1.w, l(0.500000), r1.w
  movc r2.xyz, r1.wwww, l(0,1.000000,1.000000,0), l(1.000000,1.000000,0,0)
  movc r4.xyz, r0.wwww, r2.xyzx, r4.xyzx
endif 
mad o0.xyz, cb1[13].xxxx, r6.xyzx, r4.xyzx
sqrt o5.xyz, r5.xyzx
div r1.xy, r1.xyxx, r1.zzzz
add r1.xy, r1.xyxx, -cb0[26].xyxx
div r1.zw, v4.xxxy, v4.wwww
add r1.zw, r1.zzzw, -cb0[59].xxxy
add r1.xy, -r1.zwzz, r1.xyxx
mad r1.xy, r1.xyxx, l(0.249500, 0.249500, 0.000000, 0.000000), l(0.499992371, 0.499992371, 0.000000, 0.000000)
mul o4.xy, r1.xyxx, v4.zzzz
mov o4.zw, l(0,0,0,0)
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0)
mov o1.w, cb2[11].x
mov o2.xyw, l(0,0,0,0.149019614)
mov o3.xyz, r3.xyzx
mov o3.w, l(1.000000)
mov o5.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
