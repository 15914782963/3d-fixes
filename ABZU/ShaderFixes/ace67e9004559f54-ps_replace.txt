// PostProcessTemporalAA.usf, only enabled for later part of the game, but causes judder and breaks grass

// ---- Created with 3Dmigoto v1.2.51 on Sat Dec 24 08:45:11 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[13];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[112];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[43];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear noperspective float4 v0 : TEXCOORD0,
  linear noperspective float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  float4 v4 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.z = -2;
  r1.z = 2;
// SceneDepthTexture nearby pixels
  r0.x = t0.SampleLevel(s0_s, v0.xy, 0, int2(-2, -2)).x;
  r0.w = t0.SampleLevel(s0_s, v0.xy, 0, int2(2, -2)).x;
  r1.x = cmp(r0.w < r0.x);
  r0.x = max(r0.x, r0.w);
  r0.y = r1.x ? -2 : 2;
// SceneDepthTexture nearby pixels
  r0.w = t0.SampleLevel(s0_s, v0.xy, 0, int2(-2, 2)).x;
  r1.x = t0.SampleLevel(s0_s, v0.xy, 0, int2(2, 2)).x;
  r1.w = cmp(r1.x < r0.w);
  r0.w = max(r1.x, r0.w);
  r1.y = r1.w ? -2 : 2;
  r1.x = cmp(r0.w < r0.x);
  r2.x = max(r0.x, r0.w);
  r0.xy = r1.xx ? r0.yz : r1.yz;
  r2.yz = cb0[1].zw * r0.xy;
  r0.yz = float2(0,0);
// SceneDepthTexture for this pixel
  r0.x = t0.SampleLevel(s0_s, v0.xy, 0).x;
  r0.w = cmp(r0.x < r2.x);
  r0.xyz = r0.www ? r2.xyz : r0.xyz;
  r0.yz = v0.xy + r0.yz;

// VelocityN:
  r0.yz = t3.SampleLevel(s3_s, r0.yz, 0).xy;

// Correct VelocityN to align the blur. Not 100% certain why this is /4:
float depth = 1 / (r2.x * cb1[51].z + -cb1[51].w);
float4 s = StereoParams.Load(0);
r0.y -= s.x * (depth - s.y) / depth / 4;

  r0.w = cmp(0 < r0.y);
  r0.yz = r0.yz * float2(4.00801611,4.00801611) + float2(-2.00397754,-2.00397754);
  r1.xy = -cb2[1].xy + v4.xy;
  r1.xy = r1.xy * cb2[2].zw + float2(-0.5,-0.5);
  r1.xy = v4.ww * r1.xy;
  r1.zw = float2(2,-2) * r1.xy;

// ClipToPrevClip:
  // r2.xyz = cb1[109].xyw * r1.www;
  // r2.xyz = r1.zzz * cb1[108].xyw + r2.xyz;
  // r2.xyz = r0.xxx * cb1[110].xyw + r2.xyz;
  // r2.xyz = cb1[111].xyw + r2.xyz;

// This fixes the opacity of the particles to match in both eyes. Difficult to
// tell if this is accurate or not as it is quite subtle on anything else, but
// there seem to be *far more* particles visible with this, so probably not
// accurate.

float4 ThisClip = float4(r1.zw, r0.x, 1);
ThisClip.x -= s.x * (depth - s.y) / depth;
float4 PrevClip = mul(ThisClip, MATRIX(cb1, 108));
PrevClip.x += s.x * (PrevClip.w - s.y);
r2.xyz = PrevClip.xyw;

  r1.zw = cb0[15].zw * float2(2,2) + abs(r1.zw);
  r1.z = max(r1.z, r1.w);
  r1.z = cmp(r1.z >= 1);

// PrevScreen:
  r2.xy = r2.xy / r2.zz;

  r2.xy = r1.xy * float2(2,-2) + -r2.xy;
  r0.xy = r0.ww ? r0.yz : r2.xy;
  r0.xy = r1.xy * float2(2,-2) + -r0.xy;
  r0.z = max(abs(r0.x), abs(r0.y));
  r0.z = cmp(r0.z >= 1);
  r1.xy = float2(-1,-1) + cb0[15].zw;
  r0.xy = max(r1.xy, r0.xy);
  r1.xy = float2(1,1) + -cb0[15].zw;
  r0.xy = min(r1.xy, r0.xy);
  r0.xy = r0.xy * cb0[17].xy + cb0[17].zw;
  r0.xy = float2(0.5,0.5) + r0.xy;
  r0.xy = cb0[1].zw * r0.xy;
  r1.xy = r0.xy * cb0[2].xy + float2(-0.5,-0.5);
  r1.xy = floor(r1.xy);
  r2.xyzw = float4(0.5,0.5,-0.5,-0.5) + r1.xyxy;
  r1.xy = float2(2.5,2.5) + r1.xy;
  r0.xy = r0.xy * cb0[2].xy + -r2.xy;
  r3.xy = r0.xy * r0.xy;
  r3.zw = r3.xy * r0.xy + r0.xy;
  r3.zw = -r3.zw * float2(0.5,0.5) + r3.xy;
  r4.xy = r3.xy * r0.xy;
  r0.xy = r3.xy * r0.xy + -r3.xy;
  r3.xy = float2(2.5,2.5) * r3.xy;
  r3.xy = r4.xy * float2(1.5,1.5) + -r3.xy;
  r3.xy = float2(1,1) + r3.xy;
  r4.xy = float2(1,1) + -r3.zw;
  r4.xy = r4.xy + -r3.xy;
  r4.xy = -r0.xy * float2(0.5,0.5) + r4.xy;
  r0.xy = float2(0.5,0.5) * r0.xy;
  r3.xy = r4.xy + r3.xy;
  r4.xy = r4.xy / r3.xy;
  r2.xy = r4.xy + r2.xy;
  r4.xy = float2(1,1) / cb0[2].xy;
  r5.xyzw = r4.xyxy * r2.xyzw;
  r2.xy = r4.xy * r1.xy;
  r4.xyzw = t2.SampleLevel(s2_s, r5.xw, 0).xyzw;
  r4.xyzw = r4.xyzw * r3.xxxx;
  r4.xyzw = r4.xyzw * r3.wwww;
  r6.xyzw = t2.SampleLevel(s2_s, r5.zw, 0).xyzw;
  r6.xyzw = r6.xyzw * r3.zzzz;
  r4.xyzw = r6.xyzw * r3.wwww + r4.xyzw;
  r2.zw = r5.wy;
  r6.xyzw = t2.SampleLevel(s2_s, r2.xz, 0).xyzw;
  r7.xyzw = t2.SampleLevel(s2_s, r2.xw, 0).xyzw;
  r7.xyzw = r7.xyzw * r0.xxxx;
  r6.xyzw = r6.xyzw * r0.xxxx;
  r4.xyzw = r6.xyzw * r3.wwww + r4.xyzw;
  r6.xyzw = t2.SampleLevel(s2_s, r5.zy, 0).xyzw;
  r8.xz = r5.zx;
  r5.xyzw = t2.SampleLevel(s2_s, r5.xy, 0).xyzw;
  r5.xyzw = r5.xyzw * r3.xxxx;
  r6.xyzw = r6.xyzw * r3.zzzz;
  r4.xyzw = r6.xyzw * r3.yyyy + r4.xyzw;
  r4.xyzw = r5.xyzw * r3.yyyy + r4.xyzw;
  r4.xyzw = r7.xyzw * r3.yyyy + r4.xyzw;
  r8.y = r2.y;
  r2.xyzw = t2.SampleLevel(s2_s, r2.xy, 0).xyzw;
  r2.xyzw = r2.xyzw * r0.xxxx;
  r5.xyzw = t2.SampleLevel(s2_s, r8.xy, 0).xyzw;
  r6.xyzw = t2.SampleLevel(s2_s, r8.zy, 0).xyzw;
  r6.xyzw = r6.xyzw * r3.xxxx;
  r3.xyzw = r5.xyzw * r3.zzzz;
  r3.xyzw = r3.xyzw * r0.yyyy + r4.xyzw;
  r3.xyzw = r6.xyzw * r0.yyyy + r3.xyzw;
  r2.xyzw = r2.xyzw * r0.yyyy + r3.xyzw;
  r3.y = dot(r2.xz, float2(2,-2));
  r3.z = dot(r2.xzy, float3(-1,-1,2));
  r3.x = dot(r2.xzy, float3(1,1,2));
  r0.x = r3.x * v1.x + 1;
  r0.x = rcp(r0.x);
  r0.xyw = r3.xyz * r0.xxx;
  r3.xyzw = t1.SampleLevel(s1_s, v0.xy, 0, int2(0, 1)).xyzw;
  r2.x = dot(r3.xzy, float3(1,1,2));
  r1.x = r2.x * v1.x + 1;
  r1.x = rcp(r1.x);
  r2.y = dot(r3.xz, float2(2,-2));
  r2.z = dot(r3.xzy, float3(-1,-1,2));
  r3.xyz = r2.xyz * r1.xxx;
  r4.xyzw = t1.SampleLevel(s1_s, v0.xy, 0, int2(0, -1)).xyzw;
  r2.x = dot(r4.xzy, float3(1,1,2));
  r1.x = r2.x * v1.x + 1;
  r1.x = rcp(r1.x);
  r2.y = dot(r4.xz, float2(2,-2));
  r2.z = dot(r4.xzy, float3(-1,-1,2));
  r4.xyz = r2.xyz * r1.xxx;
  r5.xyzw = t1.SampleLevel(s1_s, v0.xy, 0, int2(-1, 0)).xyzw;
  r2.x = dot(r5.xzy, float3(1,1,2));
  r1.x = r2.x * v1.x + 1;
  r1.x = rcp(r1.x);
  r2.y = dot(r5.xz, float2(2,-2));
  r2.z = dot(r5.xzy, float3(-1,-1,2));
  r5.xyz = r2.xyz * r1.xxx;
  r6.xyzw = min(r5.xyzw, r4.xyzw);
  r7.xyzw = t1.SampleLevel(s1_s, v0.xy, 0, int2(1, 0)).xyzw;
  r2.x = dot(r7.xzy, float3(1,1,2));
  r1.x = r2.x * v1.x + 1;
  r1.x = rcp(r1.x);
  r2.y = dot(r7.xz, float2(2,-2));
  r2.z = dot(r7.xzy, float3(-1,-1,2));
  r7.xyz = r2.xyz * r1.xxx;
  r8.xyzw = t1.SampleLevel(s1_s, v0.xy, 0).xyzw;
  r2.x = dot(r8.xzy, float3(1,1,2));
  r1.x = r2.x * v1.x + 1;
  r1.x = rcp(r1.x);
  r2.y = dot(r8.xz, float2(2,-2));
  r2.z = dot(r8.xzy, float3(-1,-1,2));
  r8.xyz = r2.xyz * r1.xxx;
  r9.xyzw = min(r8.xyzw, r7.xyzw);
  r6.xyzw = min(r9.xyzw, r6.xyzw);
  r6.xyzw = min(r6.xyzw, r3.xyzw);
  r0.xyw = max(r6.xyz, r0.xyw);
  r1.x = max(r6.w, r2.w);
  r2.xyzw = max(r5.xyzw, r4.xyzw);
  r5.xyzw = cb0[38].xxxx * r5.xyzw;
  r4.xyzw = r4.xyzw * cb0[37].xxxx + r5.xyzw;
  r4.xyzw = r8.xyzw * cb0[39].xxxx + r4.xyzw;
  r4.xyzw = r7.xyzw * cb0[40].xxxx + r4.xyzw;
  r5.xyzw = max(r8.xyzw, r7.xyzw);
  r2.xyzw = max(r5.xyzw, r2.xyzw);
  r2.xyzw = max(r2.xyzw, r3.xyzw);
  r3.xyzw = r3.xyzw * cb0[41].xxxx + r4.xyzw;
  r3.xyzw = r1.zzzz ? r8.xyzw : r3.xyzw;
  r4.xyz = min(r2.xyz, r0.xyw);
  r4.w = min(r2.w, r1.x);
  r0.xyzw = r0.zzzz ? r3.xyzw : r4.xyzw;
  r1.xyzw = r3.xyzw + -r0.xyzw;
  r0.xyzw = r1.xyzw * float4(0.0399999991,0.0399999991,0.0399999991,0.0399999991) + r0.xyzw;
  r1.x = r0.x * -v1.x + 1;
  r1.x = rcp(r1.x);
  r1.xyz = r1.xxx * r0.xyz;
  r2.xyz = float3(0.25,0.25,0.25) * r1.xyz;
  r1.x = r1.x * 0.25 + -r2.y;
  r2.yz = r2.xx + r2.yz;
  r2.w = -r1.z * 0.25 + r1.x;
  r2.x = -r1.z * 0.25 + r2.y;
  r1.xyz = min(float3(0,0,0), -r2.xzw);
  r0.xyz = -r1.xyz;
  r1.x = asint(cb2[12].y) & 3;
  if (2 == 0) r1.z = 0; else if (2+2 < 32) {   r1.z = (uint)cb2[12].y << (32-(2 + 2)); r1.z = (uint)r1.z >> (32-2);  } else r1.z = (uint)cb2[12].y >> 2;
  r1.xy = (uint2)r1.xz;
  r1.xy = v4.xy + r1.xy;
  r1.xy = (uint2)r1.xy;
  r1.xy = (uint2)r1.xy;
  r1.xy = r1.xy * float2(0.000231481477,0.000231481477) + float2(0.25,0);
  r1.xy = r1.xy * r1.xy;
  r1.x = dot(r1.xy, float2(3571,3571));
  r1.x = frac(r1.x);
  r1.x = r1.x * r1.x;
  r1.x = dot(r1.xx, float2(3571,3571));
  r1.x = frac(r1.x);
  r1.x = -0.5 + r1.x;
  r1.x = cb0[42].x * r1.x;
  r1.x = 0.0009765625 * r1.x;
  r1.x = r1.x / v1.x;
  o0.xyzw = r1.xxxx + r0.xyzw;
  return;
}
