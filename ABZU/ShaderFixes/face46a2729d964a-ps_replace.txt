// ---- Created with 3Dmigoto v1.2.51 on Sat Dec 24 12:20:46 2016
TextureCube<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[7];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[12];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[44];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[60];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : VELOCITY_PREV_POS0,
  float4 v3 : SV_Position0,
  uint v4 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4,
  out float4 o5 : SV_Target5)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb1[1].xy + v3.xy;
  r1.xy = r1.xy * cb1[2].zw + float2(-0.5,-0.5);
  r1.xy = v3.ww * r1.xy;
  r1.z = v3.w;
  r1.xyz = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb0[37].xyzw * v3.yyyy;
  r2.xyzw = v3.xxxx * cb0[36].xyzw + r2.xyzw;
  r2.xyzw = v3.zzzz * cb0[38].xyzw + r2.xyzw;
  r2.xyzw = cb0[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

float4 s = StereoParams.Load(0);
matrix m = MATRIX(cb0, 36);
matrix im = inverse(m);
float4 t = mul(float4(r2.xyz, 1), im);
t.x -= s.x * (t.w - s.y) * cb1[3].x / 2;
r2.xyz = mul(t, m);

  r3.xyz = -cb0[56].xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r2.xyz = -r2.xyz / r0.www;
  r4.xyzw = r3.xyxy / cb3[5].xxww;
  r0.w = dot(r2.xyz, v1.xyz);
  r1.w = 8 + -cb3[5].y;
  r1.w = abs(r0.w) * r1.w + cb3[5].y;
  r2.w = floor(r1.w);
  r1.w = 1 / r1.w;
  r5.x = dot(v0.xyz, r2.xyz);
  r5.y = dot(r0.xyz, r2.xyz);
  r3.w = dot(r5.xy, r5.xy);
  r3.w = sqrt(r3.w);
  r5.xy = r5.xy / r3.ww;
  r0.w = -r3.w / r0.w;
  r5.xy = r5.xy * r0.ww;
  r5.xy = cb3[5].zz * r5.xy;
  r5.zw = r5.xy * r1.ww;
  r6.xy = ddx_coarse(r4.xy);
  r6.zw = ddy_coarse(r4.xy);
  r0.w = 2 + r2.w;
  r2.w = 1;
  r3.w = 1;
  r7.xyzw = float4(0,0,1,0);
  while (true) {
    r8.x = (int)r7.w;
    r8.x = cmp(r8.x >= r0.w);
    if (r8.x != 0) break;
    r8.xy = r7.xy + r4.xy;
    r8.x = t0.SampleGrad(s0_s, r8.xy, r6.x, r6.z).z;
    r8.y = cmp(r2.w < r8.x);
    if (r8.y != 0) {
      r8.y = -r7.z + r3.w;
      r8.z = r8.x + -r2.w;
      r8.y = r8.y + r8.z;
      r8.y = r8.z / r8.y;
      r7.xy = -r8.yy * r5.zw + r7.xy;
      break;
    }
    r8.y = r2.w + -r1.w;
    r7.xy = r5.xy * r1.ww + r7.xy;
    r7.w = (int)r7.w + 1;
    r3.w = r2.w;
    r7.z = r8.x;
    r2.w = r8.y;
  }
  r7.xy = r7.xy + r4.xy;
  r7.zw = t1.Sample(s1_s, r7.xy).xy;
  r8.xy = r7.zw * float2(2,2) + float2(-1,-1);
  r2.w = dot(r8.xy, r8.xy);
  r2.w = 1 + -r2.w;
  r2.w = max(0, r2.w);
  r8.z = sqrt(r2.w);
  r8.xyz = r8.xyz * cb1[7].www + cb1[7].xyz;
  r2.w = dot(r8.xyz, r8.xyz);
  r2.w = rsqrt(r2.w);
  r8.xyz = r8.xyz * r2.www;
  r9.xyz = r8.yyy * r0.xyz;
  r8.xyw = r8.xxx * v0.xyz + r9.xyz;
  r8.xyz = r8.zzz * v1.xyz + r8.xyw;
  r2.w = dot(r8.xyz, r8.xyz);
  r2.w = rsqrt(r2.w);
  r8.xyz = r8.xyz * r2.www;
  r2.w = dot(r8.xyz, r2.xyz);
  r9.xyz = r8.xyz * r2.www;
  r2.xyz = r9.xyz * float3(2,2,2) + -r2.xyz;
  r9.xyzw = t2.Sample(s2_s, r7.xy).xyzw;
  r10.xyz = float3(1,1,1) + -r9.xyz;
  r4.zw = t3.Sample(s3_s, r4.zw).xy;
  r11.xy = cb3[6].xx * r4.zw;
  r4.zw = r4.zw * cb3[6].xx + r2.xy;
  r12.xyz = t4.Sample(s4_s, r4.zw).xyz;
  r3.w = t0.Sample(s0_s, r7.xy).x;
  r7.y = dot(v0.xyz, float3(-1,-1,-1));
  r7.z = dot(r0.xyz, float3(-1,-1,-1));
  r0.x = dot(v1.xyz, float3(-1,-1,-1));
  r7.x = r0.x / cb3[5].z;
  r0.x = dot(r7.xyz, r7.xyz);
  r0.x = sqrt(r0.x);
  r0.xyz = r7.xyz / r0.xxx;
  r4.zw = float2(0,0);
  r7.xyzw = float4(1,1,1,0);
  while (true) {
    r8.w = (int)r7.w;
    r8.w = cmp(r8.w >= r0.w);
    if (r8.w != 0) break;
    r13.xy = r4.xy + r4.zw;
    r8.w = t0.SampleGrad(s0_s, r13.xy, r6.x, r6.z).z;
    r10.w = cmp(r7.x < r8.w);
    if (r10.w != 0) {
      r10.w = r7.y + -r7.z;
      r11.w = r8.w + -r7.x;
      r10.w = r11.w + r10.w;
      r10.w = r11.w / r10.w;
      r4.zw = -r10.ww * r5.zw + r4.zw;
      break;
    }
    r10.w = r7.x + -r1.w;
    r4.zw = r5.xy * r1.ww + r4.zw;
    r7.w = (int)r7.w + 1;
    r7.y = r7.x;
    r7.z = r8.w;
    r7.x = r10.w;
  }
  r5.xy = r4.xy + r4.zw;
  r0.w = t0.SampleGrad(s0_s, r5.xy, r6.x, r6.z).z;
  r0.w = 0.00999999978 + r0.w;
  r5.xy = r4.zw;
  r1.w = r0.w;
  r5.z = r0.w;
  r5.w = 1;
  r7.xy = float2(0,0);
  while (true) {
    r7.z = (int)r7.y;
    r7.z = cmp(r7.z >= 16);
    if (r7.z != 0) break;
    r7.z = cmp(r1.w < r5.z);
    if (r7.z != 0) {
      r5.w = 0;
      break;
    } else {
      r7.z = -r5.z + r1.w;
      r7.z = r7.z / r7.x;
      r5.w = min(r7.z, r5.w);
    }
    r1.w = r0.x * 0.0625 + r1.w;
    r5.xy = r0.yz * float2(0.0625,0.0625) + r5.xy;
    r7.zw = r5.xy + r4.xy;
    r5.z = t0.SampleGrad(s0_s, r7.zw, r6.x, r6.z).z;
    r7.x = 0.0625 + r7.x;
    r7.y = (int)r7.y + 1;
  }
  r0.x = r5.w * r3.w;
  r0.yzw = r12.xyz * r0.xxx;
  r1.w = max(0, r2.w);
  r1.w = 1 + -r1.w;
  r1.w = max(9.99999997e-007, abs(r1.w));
  r2.w = r1.w * r1.w;
  r2.w = r2.w * r2.w;
  r1.w = r2.w * r1.w;
  r1.w = r1.w * 0.959999979 + 0.0399999991;
  r1.w = log2(r1.w);
  r1.w = cb3[6].y * r1.w;
  r1.w = exp2(r1.w);
  r11.z = 0;
  r2.xyz = r11.xyz + r2.xyz;
  r2.xyz = t5.Sample(s5_s, r2.xyz).xyz;
  r0.yzw = r0.yzw * r1.www + r2.xyz;
  r0.yzw = r10.xyz * r0.yzw + r9.xyz;
  r2.xyz = saturate(cb1[43].xyz + r5.www);
  r0.yzw = r2.xyz * r0.yzw;
  r0.yzw = saturate(cb3[3].xyz * r0.yzw);
  r0.x = saturate(r9.w * r0.x);
  r1.w = saturate(cb3[6].z);
  o2.z = r1.w * cb1[8].y + cb1[8].x;
  r1.w = cb1[6].w * r0.x;
  r2.xyz = r0.yzw * cb1[5].www + cb1[5].xyz;
  r4.xyz = r1.www * float3(0.0799999982,0.0799999982,0.0799999982) + cb1[6].xyz;
  r2.xyz = r4.xyz + r2.xyz;
  r4.xyz = max(float3(0,0,0), cb3[2].xyz);
  r1.w = cmp(0 < cb1[9].x);
  if (r1.w != 0) {
    r5.xyz = -cb2[8].xyz + r3.xyz;
    r6.xyz = float3(1,1,1) + cb2[9].xyz;
    r5.xyz = cmp(r6.xyz < abs(r5.xyz));
    r1.w = (int)r5.y | (int)r5.x;
    r1.w = (int)r5.z | (int)r1.w;
    r2.w = dot(r3.xyz, float3(0.577000022,0.577000022,0.577000022));
    r2.w = 0.00200000009 * r2.w;
    r2.w = frac(r2.w);
    r2.w = cmp(0.5 < r2.w);
    r3.xyz = r2.www ? float3(0,1,1) : float3(1,1,0);
    r4.xyz = r1.www ? r3.xyz : r4.xyz;
  }
  o0.xyz = cb1[13].xxx * r2.xyz + r4.xyz;
  r1.xy = r1.xy / r1.zz;
  r1.xy = -cb0[26].xy + r1.xy;
  r1.zw = v2.xy / v2.ww;
  r1.zw = -cb0[59].xy + r1.zw;
  r1.xy = r1.xy + -r1.zw;
  r1.xy = r1.xy * float2(0.249500006,0.249500006) + float2(0.499992371,0.499992371);
  o4.xy = v2.zz * r1.xy;
  o4.zw = float2(0,0);
  o1.xyz = r8.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.w = 0;
  o1.w = cb2[11].x;
  o2.xw = float2(0,0.129411772);
  o2.y = r0.x;
  o3.xyz = r0.yzw;
  o3.w = 1;
  o5.xyzw = float4(0,0,0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sat Dec 24 12:20:46 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// VELOCITY_PREV_POS        0   xyzw        2     NONE   float   xyzw
// SV_Position              0   xyzw        3      POS   float   xyzw
// SV_IsFrontFace           0   x           4    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
// SV_Target                5   xyzw        5   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[60], immediateIndexed
dcl_constantbuffer cb1[44], immediateIndexed
dcl_constantbuffer cb2[12], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps_siv linear noperspective v3.xyzw, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 14
mul r0.xyz, v0.yzxy, v1.zxyz
mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v1.wwww
add r1.xy, v3.xyxx, -cb1[1].xyxx
mad r1.xy, r1.xyxx, cb1[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.xy, r1.xyxx, v3.wwww
mov r1.z, v3.w
mul r1.xyz, r1.xyzx, l(2.000000, -2.000000, 1.000000, 0.000000)
mul r2.xyzw, v3.yyyy, cb0[37].xyzw
mad r2.xyzw, v3.xxxx, cb0[36].xyzw, r2.xyzw
mad r2.xyzw, v3.zzzz, cb0[38].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[39].xyzw
div r2.xyz, r2.xyzx, r2.wwww
add r3.xyz, r2.xyzx, -cb0[56].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
div r2.xyz, -r2.xyzx, r0.wwww
div r4.xyzw, r3.xyxy, cb3[5].xxww
dp3 r0.w, r2.xyzx, v1.xyzx
add r1.w, -cb3[5].y, l(8.000000)
mad r1.w, |r0.w|, r1.w, cb3[5].y
round_ni r2.w, r1.w
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
dp3 r5.x, v0.xyzx, r2.xyzx
dp3 r5.y, r0.xyzx, r2.xyzx
dp2 r3.w, r5.xyxx, r5.xyxx
sqrt r3.w, r3.w
div r5.xy, r5.xyxx, r3.wwww
div r0.w, -r3.w, r0.w
mul r5.xy, r0.wwww, r5.xyxx
mul r5.xy, r5.xyxx, cb3[5].zzzz
mul r5.zw, r1.wwww, r5.xxxy
deriv_rtx_coarse r6.xy, r4.xyxx
deriv_rty_coarse r6.zw, r4.xxxy
add r0.w, r2.w, l(2.000000)
mov r2.w, l(1.000000)
mov r3.w, l(1.000000)
mov r7.xyzw, l(0,0,1.000000,0)
loop 
  itof r8.x, r7.w
  ge r8.x, r8.x, r0.w
  breakc_nz r8.x
  add r8.xy, r4.xyxx, r7.xyxx
  sample_d_indexable(texture2d)(float,float,float,float) r8.x, r8.xyxx, t0.zxyw, s0, r6.xyxx, r6.zwzz
  lt r8.y, r2.w, r8.x
  if_nz r8.y
    add r8.y, r3.w, -r7.z
    add r8.z, -r2.w, r8.x
    add r8.y, r8.z, r8.y
    div r8.y, r8.z, r8.y
    mad r7.xy, -r8.yyyy, r5.zwzz, r7.xyxx
    break 
  endif 
  add r8.y, -r1.w, r2.w
  mad r7.xy, r5.xyxx, r1.wwww, r7.xyxx
  iadd r7.w, r7.w, l(1)
  mov r3.w, r2.w
  mov r7.z, r8.x
  mov r2.w, r8.y
endloop 
add r7.xy, r4.xyxx, r7.xyxx
sample_indexable(texture2d)(float,float,float,float) r7.zw, r7.xyxx, t1.zwxy, s1
mad r8.xy, r7.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r2.w, r8.xyxx, r8.xyxx
add r2.w, -r2.w, l(1.000000)
max r2.w, r2.w, l(0.000000)
sqrt r8.z, r2.w
mad r8.xyz, r8.xyzx, cb1[7].wwww, cb1[7].xyzx
dp3 r2.w, r8.xyzx, r8.xyzx
rsq r2.w, r2.w
mul r8.xyz, r2.wwww, r8.xyzx
mul r9.xyz, r0.xyzx, r8.yyyy
mad r8.xyw, r8.xxxx, v0.xyxz, r9.xyxz
mad r8.xyz, r8.zzzz, v1.xyzx, r8.xywx
dp3 r2.w, r8.xyzx, r8.xyzx
rsq r2.w, r2.w
mul r8.xyz, r2.wwww, r8.xyzx
dp3 r2.w, r8.xyzx, r2.xyzx
mul r9.xyz, r2.wwww, r8.xyzx
mad r2.xyz, r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r9.xyzw, r7.xyxx, t2.xyzw, s2
add r10.xyz, -r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r4.zw, r4.zwzz, t3.zwxy, s3
mul r11.xy, r4.zwzz, cb3[6].xxxx
mad r4.zw, r4.zzzw, cb3[6].xxxx, r2.xxxy
sample_indexable(texture2d)(float,float,float,float) r12.xyz, r4.zwzz, t4.xyzw, s4
sample_indexable(texture2d)(float,float,float,float) r3.w, r7.xyxx, t0.yzwx, s0
dp3 r7.y, v0.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r7.z, r0.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.x, v1.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
div r7.x, r0.x, cb3[5].z
dp3 r0.x, r7.xyzx, r7.xyzx
sqrt r0.x, r0.x
div r0.xyz, r7.xyzx, r0.xxxx
mov r4.zw, l(0,0,0,0)
mov r7.xyzw, l(1.000000,1.000000,1.000000,0)
loop 
  itof r8.w, r7.w
  ge r8.w, r8.w, r0.w
  breakc_nz r8.w
  add r13.xy, r4.zwzz, r4.xyxx
  sample_d_indexable(texture2d)(float,float,float,float) r8.w, r13.xyxx, t0.xywz, s0, r6.xyxx, r6.zwzz
  lt r10.w, r7.x, r8.w
  if_nz r10.w
    add r10.w, -r7.z, r7.y
    add r11.w, -r7.x, r8.w
    add r10.w, r10.w, r11.w
    div r10.w, r11.w, r10.w
    mad r4.zw, -r10.wwww, r5.zzzw, r4.zzzw
    break 
  endif 
  add r10.w, -r1.w, r7.x
  mad r4.zw, r5.xxxy, r1.wwww, r4.zzzw
  iadd r7.w, r7.w, l(1)
  mov r7.y, r7.x
  mov r7.z, r8.w
  mov r7.x, r10.w
endloop 
add r5.xy, r4.zwzz, r4.xyxx
sample_d_indexable(texture2d)(float,float,float,float) r0.w, r5.xyxx, t0.xywz, s0, r6.xyxx, r6.zwzz
add r0.w, r0.w, l(0.010000)
mov r5.xy, r4.zwzz
mov r1.w, r0.w
mov r5.z, r0.w
mov r5.w, l(1.000000)
mov r7.xy, l(0,0,0,0)
loop 
  itof r7.z, r7.y
  ge r7.z, r7.z, l(16.000000)
  breakc_nz r7.z
  lt r7.z, r1.w, r5.z
  if_nz r7.z
    mov r5.w, l(0)
    break 
  else 
    add r7.z, r1.w, -r5.z
    div r7.z, r7.z, r7.x
    min r5.w, r5.w, r7.z
  endif 
  mad r1.w, r0.x, l(0.062500), r1.w
  mad r5.xy, r0.yzyy, l(0.062500, 0.062500, 0.000000, 0.000000), r5.xyxx
  add r7.zw, r4.xxxy, r5.xxxy
  sample_d_indexable(texture2d)(float,float,float,float) r5.z, r7.zwzz, t0.xyzw, s0, r6.xyxx, r6.zwzz
  add r7.x, r7.x, l(0.062500)
  iadd r7.y, r7.y, l(1)
endloop 
mul r0.x, r3.w, r5.w
mul r0.yzw, r0.xxxx, r12.xxyz
max r1.w, r2.w, l(0.000000)
add r1.w, -r1.w, l(1.000000)
max r1.w, |r1.w|, l(0.000001)
mul r2.w, r1.w, r1.w
mul r2.w, r2.w, r2.w
mul r1.w, r1.w, r2.w
mad r1.w, r1.w, l(0.960000), l(0.040000)
log r1.w, r1.w
mul r1.w, r1.w, cb3[6].y
exp r1.w, r1.w
mov r11.z, l(0)
add r2.xyz, r2.xyzx, r11.xyzx
sample_indexable(texturecube)(float,float,float,float) r2.xyz, r2.xyzx, t5.xyzw, s5
mad r0.yzw, r0.yyzw, r1.wwww, r2.xxyz
mad r0.yzw, r10.xxyz, r0.yyzw, r9.xxyz
add_sat r2.xyz, r5.wwww, cb1[43].xyzx
mul r0.yzw, r0.yyzw, r2.xxyz
mul_sat r0.yzw, r0.yyzw, cb3[3].xxyz
mul_sat r0.x, r0.x, r9.w
mov_sat r1.w, cb3[6].z
mad o2.z, r1.w, cb1[8].y, cb1[8].x
mul r1.w, r0.x, cb1[6].w
mad r2.xyz, r0.yzwy, cb1[5].wwww, cb1[5].xyzx
mad r4.xyz, r1.wwww, l(0.080000, 0.080000, 0.080000, 0.000000), cb1[6].xyzx
add r2.xyz, r2.xyzx, r4.xyzx
max r4.xyz, cb3[2].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r1.w, l(0.000000), cb1[9].x
if_nz r1.w
  add r5.xyz, r3.xyzx, -cb2[8].xyzx
  add r6.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r5.xyz, r6.xyzx, |r5.xyzx|
  or r1.w, r5.y, r5.x
  or r1.w, r5.z, r1.w
  dp3 r2.w, r3.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r2.w, r2.w, l(0.002000)
  frc r2.w, r2.w
  lt r2.w, l(0.500000), r2.w
  movc r3.xyz, r2.wwww, l(0,1.000000,1.000000,0), l(1.000000,1.000000,0,0)
  movc r4.xyz, r1.wwww, r3.xyzx, r4.xyzx
endif 
mad o0.xyz, cb1[13].xxxx, r2.xyzx, r4.xyzx
div r1.xy, r1.xyxx, r1.zzzz
add r1.xy, r1.xyxx, -cb0[26].xyxx
div r1.zw, v2.xxxy, v2.wwww
add r1.zw, r1.zzzw, -cb0[59].xxxy
add r1.xy, -r1.zwzz, r1.xyxx
mad r1.xy, r1.xyxx, l(0.249500, 0.249500, 0.000000, 0.000000), l(0.499992371, 0.499992371, 0.000000, 0.000000)
mul o4.xy, r1.xyxx, v2.zzzz
mov o4.zw, l(0,0,0,0)
mad o1.xyz, r8.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0)
mov o1.w, cb2[11].x
mov o2.xw, l(0,0,0,0.129411772)
mov o2.y, r0.x
mov o3.xyz, r0.yzwy
mov o3.w, l(1.000000)
mov o5.xyzw, l(0,0,0,0)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
