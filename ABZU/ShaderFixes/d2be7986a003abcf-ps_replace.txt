// ---- Created with 3Dmigoto v1.2.51 on Sun Dec 25 06:27:02 2016
Texture2D<float4> t14 : register(t14);

Texture2D<float4> t13 : register(t13);

Texture2D<float4> t12 : register(t12);

Texture2D<float4> t11 : register(t11);

Texture2D<float4> t10 : register(t10);

Texture2D<float4> t9 : register(t9);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s13_s : register(s13);

SamplerState s12_s : register(s12);

SamplerState s11_s : register(s11);

SamplerState s10_s : register(s10);

SamplerState s9_s : register(s9);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[7];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[14];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[14];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[60];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3 : VELOCITY_PREV_POS0,
  float4 v4 : SV_Position0,
  uint v5 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4,
  out float4 o5 : SV_Target5)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb1[1].xy + v4.xy;
  r1.xy = r1.xy * cb1[2].zw + float2(-0.5,-0.5);
  r1.xy = v4.ww * r1.xy;
  r1.z = v4.w;
  r2.xyzw = cb0[37].xyzw * v4.yyyy;
  r2.xyzw = v4.xxxx * cb0[36].xyzw + r2.xyzw;
  r2.xyzw = v4.zzzz * cb0[38].xyzw + r2.xyzw;
  r2.xyzw = cb0[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

float4 s = StereoParams.Load(0);
matrix TranslatedWorldToClip = MATRIX(cb0, 0);
matrix ClipToTranslatedWorld = MATRIX(cb0, 32);
float4 t = mul(r2.xyz, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r2.xyz = mul(t, ClipToTranslatedWorld);

  r3.xyz = -cb0[56].xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r2.xyz = -r2.xyz / r0.www;
  r4.xyz = -cb2[8].xyz + r3.xyz;
  r5.xyzw = cb2[5].xzyz * r4.yyyy;
  r5.xyzw = r4.xxxx * cb2[4].xzyz + r5.xyzw;
  r5.xyzw = r4.zzzz * cb2[6].xzyz + r5.xyzw;
  r5.xyzw = cb2[13].xzyz * r5.xyzw;
  r5.xyzw = r5.xyzw / cb4[4].xxxx;
  r6.xy = t2.Sample(s1_s, r5.xy).xy;
  r6.xy = r6.xy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r6.xy, r6.xy);
  r0.w = 1 + -r0.w;
  r0.w = max(0, r0.w);
  r6.z = sqrt(r0.w);
  r7.xyz = cb2[5].yxz * v1.yyy;
  r7.xyz = v1.xxx * cb2[4].yxz + r7.xyz;
  r7.xyz = v1.zzz * cb2[6].yxz + r7.xyz;
  r0.w = dot(r7.xyz, r7.xyz);
  r0.w = sqrt(r0.w);
  r7.xyz = r7.xyz / r0.www;
  r8.xyz = cmp(r7.xyz >= float3(0.5,0.5,0.5));
  r8.xyz = r8.xyz ? float3(1,1,1) : 0;
  r9.xyz = r8.xxx * r6.xyz;
  r6.w = -r6.x;
  r6.xyz = r9.xyz * float3(2,0,0) + r6.wyz;
  r7.xw = t2.Sample(s1_s, r5.zw).xy;
  r9.xy = r7.xw * float2(2,2) + float2(-1,-1);
  r0.w = dot(r9.xy, r9.xy);
  r0.w = 1 + -r0.w;
  r0.w = max(0, r0.w);
  r9.z = sqrt(r0.w);
  r8.xyw = r9.xyz * r8.yyy;
  r8.xyw = float3(0,2,0) * r8.xyw;
  r8.xyw = r9.xyz * float3(-1,-1,1) + r8.xyw;
  r0.w = cmp(abs(r7.y) >= 0.5);
  r0.w = r0.w ? 1.000000 : 0;
  r7.xyw = r8.xyw + -r6.xyz;
  r6.xyz = r0.www * r7.xyw + r6.xyz;
  r9.xyzw = cb2[5].xyxy * r4.yyyy;
  r9.xyzw = r4.xxxx * cb2[4].xyxy + r9.xyzw;
  r9.xyzw = r4.zzzz * cb2[6].xyxy + r9.xyzw;
  r9.xyzw = cb2[13].xyxy * r9.xyzw;
  r9.xyzw = r9.xyzw / cb4[4].yyzz;
  r7.xy = t3.Sample(s2_s, r9.xy).xy;
  r10.xy = r7.xy * float2(2,2) + float2(-1,-1);
  r1.w = dot(r10.xy, r10.xy);
  r1.w = 1 + -r1.w;
  r1.w = max(0, r1.w);
  r10.z = sqrt(r1.w);
  r7.xyw = r10.xyz + -r6.xyz;
  r6.xyz = r8.zzz * r7.xyw + r6.xyz;
  r7.xy = t4.Sample(s3_s, r9.zw).xy;
  r10.xy = r7.xy * float2(2,2) + float2(-1,-1);
  r1.w = dot(r10.xy, r10.xy);
  r1.w = 1 + -r1.w;
  r1.w = max(0, r1.w);
  r10.z = sqrt(r1.w);
  r1.w = cmp(-0.5 >= r7.z);
  r1.w = r1.w ? 1.000000 : 0;
  r7.xyz = r10.xyz + -r6.xyz;
  r6.xyz = r1.www * r7.xyz + r6.xyz;
  r7.xy = -cb3[0].xy + r3.xy;
  r7.xy = cb3[0].zw * r7.xy;
  r2.w = t1.SampleLevel(s0_s, r7.xy, 0).x;
  r2.w = r2.w * cb3[1].x + cb3[1].y;
  r2.w = r3.z + -r2.w;
  r7.zw = r3.xy / cb4[4].ww;
  r3.w = t5.Sample(s4_s, r7.zw).z;
  r3.w = r3.w * cb4[5].x + cb4[5].y;
  r2.w = saturate(abs(r2.w) / r3.w);
  r2.w = 1 + -r2.w;
  r3.w = 0.00999999978 * cb2[8].w;
  r7.zw = v2.xy * r3.ww;
  r7.zw = cb4[5].zz * r7.zw;
  r3.w = t6.Sample(s5_s, r7.zw).y;
  r4.w = -cb4[6].x + cb4[5].w;
  r3.w = saturate(r3.w * r4.w + cb4[6].x);
  r3.w = 1 + -r3.w;
  r2.w = -r3.w + r2.w;
  r2.w = ceil(r2.w);
  r10.x = v0.z;
  r10.y = r0.z;
  r10.z = v1.z;
  r8.xyw = r10.xyz + -r6.xyz;
  r6.xyz = r2.www * r8.xyw + r6.xyz;
  r6.xyz = r6.xyz * cb1[7].www + cb1[7].xyz;
  r3.w = dot(r6.xyz, r6.xyz);
  r3.w = rsqrt(r3.w);
  r6.xyz = r6.xyz * r3.www;
  r0.xyz = r6.yyy * r0.xyz;
  r0.xyz = r6.xxx * v0.xyz + r0.xyz;
  r0.xyz = r6.zzz * v1.xyz + r0.xyz;
  r3.w = dot(r0.xyz, r0.xyz);
  r3.w = rsqrt(r3.w);
  r0.xyz = r3.www * r0.xyz;
  r3.w = dot(r0.xyz, r2.xyz);
  r6.xyz = r3.www * r0.xyz;
  r2.xyz = r6.xyz * float3(2,2,2) + -r2.xyz;
  r6.xyz = t8.Sample(s7_s, r5.xy).xyz;
  r8.xyw = t8.Sample(s7_s, r5.zw).xyz;
  r8.xyw = r8.xyw + -r6.xyz;
  r6.xyz = r0.www * r8.xyw + r6.xyz;
  r8.xyw = t9.Sample(s8_s, r9.xy).xyz;
  r8.xyw = r8.xyw + -r6.xyz;
  r6.xyz = r8.zzz * r8.xyw + r6.xyz;
  r8.xyw = t10.Sample(s9_s, r9.zw).xyz;
  r8.xyw = r8.xyw + -r6.xyz;
  r6.xyz = r1.www * r8.xyw + r6.xyz;
  r8.xyw = t0.SampleLevel(s0_s, r7.xy, 0).xyz;
  r10.xyz = t7.Sample(s6_s, r7.zw).xyz;
  r10.xyz = float3(0.5,0.5,0.5) + r10.xyz;
  r8.xyw = r8.xyw * r10.xyz + -r6.xyz;
  r6.xyz = r2.www * r8.xyw + r6.xyz;
  r6.xyz = saturate(cb4[2].xyz * r6.xyz);
  r5.xy = t11.Sample(s10_s, r5.xy).xz;
  r5.zw = t11.Sample(s10_s, r5.zw).xz;
  r5.zw = r5.wz + -r5.yx;
  r5.xy = r0.ww * r5.zw + r5.yx;
  r5.zw = t12.Sample(s11_s, r9.xy).xz;
  r5.zw = r5.wz + -r5.xy;
  r5.xy = r8.zz * r5.zw + r5.xy;
  r5.zw = t13.Sample(s12_s, r9.zw).xz;
  r5.zw = r5.wz + -r5.xy;
  r5.xy = r1.ww * r5.zw + r5.xy;
  r0.w = dot(v1.xyz, r2.xyz);
  r1.w = 1 + -abs(r0.w);
  r1.w = max(9.99999997e-007, abs(r1.w));
  r1.w = log2(r1.w);
  r1.w = 6.44999981 * r1.w;
  r1.w = exp2(r1.w);
  r1.w = min(1, r1.w);
  r0.w = max(9.99999997e-007, abs(r0.w));
  r0.w = 0.370000005 + r0.w;
  r0.w = min(1, r0.w);
  r0.w = r1.w * r0.w;
  r0.w = 5 * r0.w;
  r1.w = max(0, r3.w);
  r1.w = 1 + -r1.w;
  r1.w = max(9.99999997e-007, abs(r1.w));
  r1.w = log2(r1.w);
  r1.w = -0.125 * r1.w;
  r1.w = exp2(r1.w);
  r0.w = r1.w * 0.959999979 + r0.w;
  r0.w = 0.0399999991 + r0.w;
  r1.w = t14.Sample(s13_s, r7.zw).x;
  r0.w = r1.w * r0.w;
  r0.w = 20 * r0.w;
  r1.xyzw = float4(2,-2,1,0.000597014907) * r1.xyzz;
  r1.w = max(9.99999997e-007, abs(r1.w));
  r1.w = log2(r1.w);
  r1.w = 1.29999995 * r1.w;
  r1.w = exp2(r1.w);
  r1.w = 1 + -r1.w;
  r1.w = max(0, r1.w);
  r1.w = 1 + -r1.w;
  r0.w = r1.w * -r0.w + r0.w;
  r0.w = r0.w + -r5.x;
  r0.w = saturate(r2.w * r0.w + r5.x);
  r1.w = cb4[6].y + -cb4[6].z;
  r1.w = r5.y * r1.w + cb4[6].z;
  r2.x = 0.439999998 + -r1.w;
  r1.w = saturate(r2.w * r2.x + r1.w);
  o2.z = r1.w * cb1[8].y + cb1[8].x;
  r1.w = cb1[6].w * r0.w;
  r2.xyz = r6.xyz * cb1[5].www + cb1[5].xyz;
  r5.xyz = r1.www * float3(0.0799999982,0.0799999982,0.0799999982) + cb1[6].xyz;
  r2.xyz = r5.xyz + r2.xyz;
  r5.xyz = max(float3(0,0,0), cb4[1].xyz);
  r1.w = cmp(0 < cb1[9].x);
  if (r1.w != 0) {
    r7.xyz = float3(1,1,1) + cb2[9].xyz;
    r4.xyz = cmp(r7.xyz < abs(r4.xyz));
    r1.w = (int)r4.y | (int)r4.x;
    r1.w = (int)r4.z | (int)r1.w;
    r2.w = dot(r3.xyz, float3(0.577000022,0.577000022,0.577000022));
    r2.w = 0.00200000009 * r2.w;
    r2.w = frac(r2.w);
    r2.w = cmp(0.5 < r2.w);
    r3.xyz = r2.www ? float3(0,1,1) : float3(1,1,0);
    r5.xyz = r1.www ? r3.xyz : r5.xyz;
  }
  o0.xyz = cb1[13].xxx * r2.xyz + r5.xyz;
  r1.xy = r1.xy / r1.zz;
  r1.xy = -cb0[26].xy + r1.xy;
  r1.zw = v3.xy / v3.ww;
  r1.zw = -cb0[59].xy + r1.zw;
  r1.xy = r1.xy + -r1.zw;
  r1.xy = r1.xy * float2(0.249500006,0.249500006) + float2(0.499992371,0.499992371);
  o4.xy = v3.zz * r1.xy;
  o4.zw = float2(0,0);
  o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.w = 0;
  o1.w = cb2[11].x;
  o2.xw = float2(0,0.129411772);
  o2.y = r0.w;
  o3.xyz = r6.xyz;
  o3.w = 1;
  o5.xyzw = float4(0,0,0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sun Dec 25 06:27:02 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// VELOCITY_PREV_POS        0   xyzw        3     NONE   float   xyzw
// SV_Position              0   xyzw        4      POS   float   xyzw
// SV_IsFrontFace           0   x           5    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
// SV_Target                5   xyzw        5   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[60], immediateIndexed
dcl_constantbuffer cb1[14], immediateIndexed
dcl_constantbuffer cb2[14], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb4[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s10, mode_default
dcl_sampler s11, mode_default
dcl_sampler s12, mode_default
dcl_sampler s13, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t11
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t13
dcl_resource_texture2d (float,float,float,float) t14
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyzw
dcl_input_ps_siv linear noperspective v4.xyzw, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 11
mul r0.xyz, v0.yzxy, v1.zxyz
mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v1.wwww
add r1.xy, v4.xyxx, -cb1[1].xyxx
mad r1.xy, r1.xyxx, cb1[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.xy, r1.xyxx, v4.wwww
mov r1.z, v4.w
mul r2.xyzw, v4.yyyy, cb0[37].xyzw
mad r2.xyzw, v4.xxxx, cb0[36].xyzw, r2.xyzw
mad r2.xyzw, v4.zzzz, cb0[38].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[39].xyzw
div r2.xyz, r2.xyzx, r2.wwww
add r3.xyz, r2.xyzx, -cb0[56].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
div r2.xyz, -r2.xyzx, r0.wwww
add r4.xyz, r3.xyzx, -cb2[8].xyzx
mul r5.xyzw, r4.yyyy, cb2[5].xzyz
mad r5.xyzw, r4.xxxx, cb2[4].xzyz, r5.xyzw
mad r5.xyzw, r4.zzzz, cb2[6].xzyz, r5.xyzw
mul r5.xyzw, r5.xyzw, cb2[13].xzyz
div r5.xyzw, r5.xyzw, cb4[4].xxxx
sample_indexable(texture2d)(float,float,float,float) r6.xy, r5.xyxx, t2.xyzw, s1
mad r6.xy, r6.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r6.xyxx, r6.xyxx
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
sqrt r6.z, r0.w
mul r7.xyz, v1.yyyy, cb2[5].yxzy
mad r7.xyz, v1.xxxx, cb2[4].yxzy, r7.xyzx
mad r7.xyz, v1.zzzz, cb2[6].yxzy, r7.xyzx
dp3 r0.w, r7.xyzx, r7.xyzx
sqrt r0.w, r0.w
div r7.xyz, r7.xyzx, r0.wwww
ge r8.xyz, r7.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
and r8.xyz, r8.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r9.xyz, r6.xyzx, r8.xxxx
mov r6.w, -r6.x
mad r6.xyz, r9.xyzx, l(2.000000, 0.000000, 0.000000, 0.000000), r6.wyzw
sample_indexable(texture2d)(float,float,float,float) r7.xw, r5.zwzz, t2.xzwy, s1
mad r9.xy, r7.xwxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r9.xyxx, r9.xyxx
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
sqrt r9.z, r0.w
mul r8.xyw, r8.yyyy, r9.xyxz
mul r8.xyw, r8.xyxw, l(0.000000, 2.000000, 0.000000, 0.000000)
mad r8.xyw, r9.xyxz, l(-1.000000, -1.000000, 0.000000, 1.000000), r8.xyxw
ge r0.w, |r7.y|, l(0.500000)
and r0.w, r0.w, l(0x3f800000)
add r7.xyw, -r6.xyxz, r8.xyxw
mad r6.xyz, r0.wwww, r7.xywx, r6.xyzx
mul r9.xyzw, r4.yyyy, cb2[5].xyxy
mad r9.xyzw, r4.xxxx, cb2[4].xyxy, r9.xyzw
mad r9.xyzw, r4.zzzz, cb2[6].xyxy, r9.xyzw
mul r9.xyzw, r9.xyzw, cb2[13].xyxy
div r9.xyzw, r9.xyzw, cb4[4].yyzz
sample_indexable(texture2d)(float,float,float,float) r7.xy, r9.xyxx, t3.xyzw, s2
mad r10.xy, r7.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r10.xyxx, r10.xyxx
add r1.w, -r1.w, l(1.000000)
max r1.w, r1.w, l(0.000000)
sqrt r10.z, r1.w
add r7.xyw, -r6.xyxz, r10.xyxz
mad r6.xyz, r8.zzzz, r7.xywx, r6.xyzx
sample_indexable(texture2d)(float,float,float,float) r7.xy, r9.zwzz, t4.xyzw, s3
mad r10.xy, r7.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r10.xyxx, r10.xyxx
add r1.w, -r1.w, l(1.000000)
max r1.w, r1.w, l(0.000000)
sqrt r10.z, r1.w
ge r1.w, l(-0.500000), r7.z
and r1.w, r1.w, l(0x3f800000)
add r7.xyz, -r6.xyzx, r10.xyzx
mad r6.xyz, r1.wwww, r7.xyzx, r6.xyzx
add r7.xy, r3.xyxx, -cb3[0].xyxx
mul r7.xy, r7.xyxx, cb3[0].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r2.w, r7.xyxx, t1.yzwx, s0, l(0.000000)
mad r2.w, r2.w, cb3[1].x, cb3[1].y
add r2.w, -r2.w, r3.z
div r7.zw, r3.xxxy, cb4[4].wwww
sample_indexable(texture2d)(float,float,float,float) r3.w, r7.zwzz, t5.xywz, s4
mad r3.w, r3.w, cb4[5].x, cb4[5].y
div_sat r2.w, |r2.w|, r3.w
add r2.w, -r2.w, l(1.000000)
mul r3.w, cb2[8].w, l(0.010000)
mul r7.zw, r3.wwww, v2.xxxy
mul r7.zw, r7.zzzw, cb4[5].zzzz
sample_indexable(texture2d)(float,float,float,float) r3.w, r7.zwzz, t6.xzwy, s5
add r4.w, cb4[5].w, -cb4[6].x
mad_sat r3.w, r3.w, r4.w, cb4[6].x
add r3.w, -r3.w, l(1.000000)
add r2.w, r2.w, -r3.w
round_pi r2.w, r2.w
mov r10.x, v0.z
mov r10.y, r0.z
mov r10.z, v1.z
add r8.xyw, -r6.xyxz, r10.xyxz
mad r6.xyz, r2.wwww, r8.xywx, r6.xyzx
mad r6.xyz, r6.xyzx, cb1[7].wwww, cb1[7].xyzx
dp3 r3.w, r6.xyzx, r6.xyzx
rsq r3.w, r3.w
mul r6.xyz, r3.wwww, r6.xyzx
mul r0.xyz, r0.xyzx, r6.yyyy
mad r0.xyz, r6.xxxx, v0.xyzx, r0.xyzx
mad r0.xyz, r6.zzzz, v1.xyzx, r0.xyzx
dp3 r3.w, r0.xyzx, r0.xyzx
rsq r3.w, r3.w
mul r0.xyz, r0.xyzx, r3.wwww
dp3 r3.w, r0.xyzx, r2.xyzx
mul r6.xyz, r0.xyzx, r3.wwww
mad r2.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r5.xyxx, t8.xyzw, s7
sample_indexable(texture2d)(float,float,float,float) r8.xyw, r5.zwzz, t8.xywz, s7
add r8.xyw, -r6.xyxz, r8.xyxw
mad r6.xyz, r0.wwww, r8.xywx, r6.xyzx
sample_indexable(texture2d)(float,float,float,float) r8.xyw, r9.xyxx, t9.xywz, s8
add r8.xyw, -r6.xyxz, r8.xyxw
mad r6.xyz, r8.zzzz, r8.xywx, r6.xyzx
sample_indexable(texture2d)(float,float,float,float) r8.xyw, r9.zwzz, t10.xywz, s9
add r8.xyw, -r6.xyxz, r8.xyxw
mad r6.xyz, r1.wwww, r8.xywx, r6.xyzx
sample_l_indexable(texture2d)(float,float,float,float) r8.xyw, r7.xyxx, t0.xywz, s0, l(0.000000)
sample_indexable(texture2d)(float,float,float,float) r10.xyz, r7.zwzz, t7.xyzw, s6
add r10.xyz, r10.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mad r8.xyw, r8.xyxw, r10.xyxz, -r6.xyxz
mad r6.xyz, r2.wwww, r8.xywx, r6.xyzx
mul_sat r6.xyz, r6.xyzx, cb4[2].xyzx
sample_indexable(texture2d)(float,float,float,float) r5.xy, r5.xyxx, t11.xzyw, s10
sample_indexable(texture2d)(float,float,float,float) r5.zw, r5.zwzz, t11.ywxz, s10
add r5.zw, -r5.yyyx, r5.wwwz
mad r5.xy, r0.wwww, r5.zwzz, r5.yxyy
sample_indexable(texture2d)(float,float,float,float) r5.zw, r9.xyxx, t12.ywxz, s11
add r5.zw, -r5.xxxy, r5.wwwz
mad r5.xy, r8.zzzz, r5.zwzz, r5.xyxx
sample_indexable(texture2d)(float,float,float,float) r5.zw, r9.zwzz, t13.ywxz, s12
add r5.zw, -r5.xxxy, r5.wwwz
mad r5.xy, r1.wwww, r5.zwzz, r5.xyxx
dp3 r0.w, v1.xyzx, r2.xyzx
add r1.w, -|r0.w|, l(1.000000)
max r1.w, |r1.w|, l(0.000001)
log r1.w, r1.w
mul r1.w, r1.w, l(6.450000)
exp r1.w, r1.w
min r1.w, r1.w, l(1.000000)
max r0.w, |r0.w|, l(0.000001)
add r0.w, r0.w, l(0.370000)
min r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, r1.w
mul r0.w, r0.w, l(5.000000)
max r1.w, r3.w, l(0.000000)
add r1.w, -r1.w, l(1.000000)
max r1.w, |r1.w|, l(0.000001)
log r1.w, r1.w
mul r1.w, r1.w, l(-0.125000)
exp r1.w, r1.w
mad r0.w, r1.w, l(0.960000), r0.w
add r0.w, r0.w, l(0.040000)
sample_indexable(texture2d)(float,float,float,float) r1.w, r7.zwzz, t14.yzwx, s13
mul r0.w, r0.w, r1.w
mul r0.w, r0.w, l(20.000000)
mul r1.xyzw, r1.xyzz, l(2.000000, -2.000000, 1.000000, 0.000597014907)
max r1.w, |r1.w|, l(0.000001)
log r1.w, r1.w
mul r1.w, r1.w, l(1.300000)
exp r1.w, r1.w
add r1.w, -r1.w, l(1.000000)
max r1.w, r1.w, l(0.000000)
add r1.w, -r1.w, l(1.000000)
mad r0.w, r1.w, -r0.w, r0.w
add r0.w, -r5.x, r0.w
mad_sat r0.w, r2.w, r0.w, r5.x
add r1.w, -cb4[6].z, cb4[6].y
mad r1.w, r5.y, r1.w, cb4[6].z
add r2.x, -r1.w, l(0.440000)
mad_sat r1.w, r2.w, r2.x, r1.w
mad o2.z, r1.w, cb1[8].y, cb1[8].x
mul r1.w, r0.w, cb1[6].w
mad r2.xyz, r6.xyzx, cb1[5].wwww, cb1[5].xyzx
mad r5.xyz, r1.wwww, l(0.080000, 0.080000, 0.080000, 0.000000), cb1[6].xyzx
add r2.xyz, r2.xyzx, r5.xyzx
max r5.xyz, cb4[1].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r1.w, l(0.000000), cb1[9].x
if_nz r1.w
  add r7.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r4.xyz, r7.xyzx, |r4.xyzx|
  or r1.w, r4.y, r4.x
  or r1.w, r4.z, r1.w
  dp3 r2.w, r3.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r2.w, r2.w, l(0.002000)
  frc r2.w, r2.w
  lt r2.w, l(0.500000), r2.w
  movc r3.xyz, r2.wwww, l(0,1.000000,1.000000,0), l(1.000000,1.000000,0,0)
  movc r5.xyz, r1.wwww, r3.xyzx, r5.xyzx
endif 
mad o0.xyz, cb1[13].xxxx, r2.xyzx, r5.xyzx
div r1.xy, r1.xyxx, r1.zzzz
add r1.xy, r1.xyxx, -cb0[26].xyxx
div r1.zw, v3.xxxy, v3.wwww
add r1.zw, r1.zzzw, -cb0[59].xxxy
add r1.xy, -r1.zwzz, r1.xyxx
mad r1.xy, r1.xyxx, l(0.249500, 0.249500, 0.000000, 0.000000), l(0.499992371, 0.499992371, 0.000000, 0.000000)
mul o4.xy, r1.xyxx, v3.zzzz
mov o4.zw, l(0,0,0,0)
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0)
mov o1.w, cb2[11].x
mov o2.xw, l(0,0,0,0.129411772)
mov o2.y, r0.w
mov o3.xyz, r6.xyzx
mov o3.w, l(1.000000)
mov o5.xyzw, l(0,0,0,0)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
