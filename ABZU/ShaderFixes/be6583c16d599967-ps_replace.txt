// ---- Created with 3Dmigoto v1.2.42 on Mon Dec 12 08:43:31 2016
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[5];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[8];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[54];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[14];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  float4 v0 : TEXCOORD10,
  float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  float4 v4 : PARTICLE_POSITION0,
  float4 v5 : TEXCOORD6,
  float4 v6 : SV_Position0,
  uint v7 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb1[37].xyzw * v6.yyyy;
  r0.xyzw = v6.xxxx * cb1[36].xyzw + r0.xyzw;
  r0.xyzw = v6.zzzz * cb1[38].xyzw + r0.xyzw;
  r0.xyzw = cb1[39].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;

// Common SVPositionToTranslatedWorld fix:
float4 s = StereoParams.Load(0);
matrix TranslatedWorldToClip = MATRIX(cb1, 0);
matrix ClipToTranslatedWorld = MATRIX(cb1, 32);
float4 t = mul(r0, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r0 = mul(t, ClipToTranslatedWorld);

  r0.xyz = cb1[53].xyz + r0.xyz;
  r1.xyz = -v4.xyz + r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = v4.w * v4.w + -r0.w;
  r1.x = sqrt(r0.w);
  r0.w = cmp(0 < r0.w);
  r0.xyz = -cb1[48].xyz * r1.xxx + r0.xyz;
  r0.xyz = -v4.xyz + r0.xyz;
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r1.x);
  r0.xyz = r1.xxx * r0.xyz;
  r0.xyz = r0.www ? r0.xyz : float3(0,0,1);
  r1.xyz = cb1[49].zxy * r0.yzx;
  r1.xyz = cb1[49].yzx * r0.zxy + -r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = r1.yzx * r0.zxy;
  r2.xyz = r0.yzx * r1.zxy + -r2.xyz;
  r3.xyz = cb2[7].www * float3(0,0,1) + cb2[7].xyz;
  r2.xyz = r3.yyy * r2.xyz;
  r1.xyz = r3.xxx * r1.xyz + r2.xyz;
  r0.xyz = r3.zzz * r0.xyz + r1.xyz;
  r1.xyz = cb1[9].xyz * r0.yyy;
  r0.xyw = r0.xxx * cb1[8].xyz + r1.xyz;
  r0.xyz = r0.zzz * cb1[10].xyz + r0.xyw;
  r0.z = dot(r0.xyz, r0.xyz);
  r0.z = rsqrt(r0.z);
  r0.xy = r0.xy * r0.zz;
  r0.z = t0.Sample(s0_s, v3.xy).x;
  r0.z = max(9.99999997e-007, abs(r0.z));
  r0.z = log2(r0.z);
  r0.z = cb3[4].z * r0.z;
  r0.z = exp2(r0.z);
  r1.xy = -cb2[1].xy + v6.xy;
  r1.xy = r1.xy * cb2[2].zw + float2(-0.5,-0.5);
  r1.xy = v6.ww * r1.xy;
  r1.z = v6.w;
  r1.xyw = float3(2,-2,1) * r1.xyz;
  r0.w = r1.w / cb3[4].x;
  r1.xy = r1.xy / r1.ww;
  r1.xy = r1.xy * cb1[52].xy + cb1[52].wz;
  r0.w = saturate(-0.100000001 + r0.w);
  r0.z = r0.z * r0.w;
  r0.z = v2.w * r0.z;
  r0.w = -1 + cb3[4].w;
  r1.w = r0.z * r0.w;
  r0.z = r0.z * r0.w + 1;
  r0.xy = r1.ww * r0.xy;
  r0.w = dot(r0.xy, r0.xy);
  r0.w = -9.99999975e-006 + r0.w;
  r0.w = cmp(r0.w < 0);
  if (r0.w != 0) discard;
  r2.w = cb0[13].y * cb0[13].x;
  r2.z = cb0[13].x;
  r2.xy = cb0[13].zw * r2.zw;
  r0.xy = r2.xy * r0.xy;
  r1.xy = r0.xy * float2(0.000230000005,-0.000230000005) + r1.xy;
  r0.xy = float2(0.000230000005,-0.000230000005) * r0.xy;
  r0.w = t1.SampleLevel(s1_s, r1.xy, 0).x;
  r0.w = r0.w * cb1[51].z + -cb1[51].w;
  r0.w = 1 / r0.w;
  r0.w = -r1.z * 1 + r0.w;
  r1.x = -0.5 * r0.z;
  r1.x = min(50, abs(r1.x));
  r1.x = max(1, r1.x);
  r1.x = 1 / r1.x;
  r0.z = saturate(r0.w * r1.x + -r0.z);
  r0.xy = r0.xy * r0.zz;
  r0.xy = float2(4,4) * r0.xy;
  o0.xy = max(float2(0,0), r0.xy);
  r0.xy = min(float2(0,0), r0.xy);
  o0.zw = -r0.xy;
  return;
}
