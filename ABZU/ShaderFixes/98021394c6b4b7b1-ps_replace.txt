// Red lighting in whirlpool
// ---- Created with 3Dmigoto v1.2.44 on Mon Oct 03 03:36:01 2016
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[10];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[10];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[10];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[57];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3 : SV_Position0,
  uint v4 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb1[1].xy + v3.xy;
  r1.xy = r1.xy * cb1[2].zw + float2(-0.5,-0.5);
  r1.xy = v3.ww * r1.xy;
  r1.z = v3.w;
  r1.xyw = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb0[37].xyzw * v3.yyyy;
  r2.xyzw = v3.xxxx * cb0[36].xyzw + r2.xyzw;
  r2.xyzw = v3.zzzz * cb0[38].xyzw + r2.xyzw;
  r2.xyzw = cb0[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

float4 s = StereoParams.Load(0);
float4 p = IniParams.Load(0);
matrix m = MATRIX(cb0, 36);
matrix im = inverse(m);
float4 t = mul(float4(r2.xyz, 1), im);
t.x -= s.x * (t.w - s.y) * cb1[3].x / 2 * p.x;
r2.xyz = mul(t, m);

  r3.xyz = -cb0[56].xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r2.xyz = -r2.xyz / r0.www;
  r4.xyz = cb1[7].www * float3(0,0,1) + cb1[7].xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.xyz = r4.yyy * r0.xyz;
  r0.xyz = r4.xxx * v0.xyz + r0.xyz;
  r0.xyz = r4.zzz * v1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r4.xyz = cb3[4].xyz + cb3[3].xyz;
  r1.xy = r1.xy / r1.ww;
  r1.xy = r1.xy * cb0[52].xy + cb0[52].wz;
  r0.w = t0.SampleLevel(s0_s, r1.xy, 0).x;
  r0.w = r0.w * cb0[51].z + -cb0[51].w;
  r0.w = 1 / r0.w;
  r0.w = -r1.z * 1 + r0.w;
  r1.x = saturate(r0.w / cb3[7].z);
  r1.yzw = -cb0[53].xyz + r3.xyz;
  r1.y = dot(r1.yzw, r1.yzw);
  r1.y = sqrt(r1.y);
  r1.z = -cb3[7].w + r1.y;
  r1.z = saturate(r1.z / cb3[8].x);
  r1.w = cb3[8].y + -cb3[8].z;
  r1.y = r1.y + -r1.w;
  r1.w = cb3[8].y + -r1.w;
  r1.y = saturate(r1.y / r1.w);
  r1.y = 1 + -r1.y;
  r1.y = r1.z * r1.y;
  r1.y = max(9.99999997e-007, r1.y);
  r1.z = r1.y * r1.y;
  r1.y = dot(r1.yy, r1.zz);
  r1.y = r1.z * 3 + -r1.y;
  r1.x = r1.x * r1.y;
  r0.x = dot(r0.xyz, r2.xyz);
  r0.x = max(0, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = max(9.99999997e-007, abs(r0.x));
  r0.y = r0.x * r0.x;
  r0.y = r0.y * r0.y;
  r0.x = r0.x * r0.y;
  r0.x = r0.x * 0.959999979 + 0.0399999991;
  r0.x = 1 + -r0.x;
  r0.x = max(9.99999997e-007, abs(r0.x));
  r0.x = log2(r0.x);
  r0.x = cb3[8].w * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r1.x * r0.x;
  r0.yz = float2(3.14159274,3.14159274) * v2.xy;
  r0.yz = sin(r0.yz);
  r0.yz = max(float2(9.99999997e-007,9.99999997e-007), abs(r0.yz));
  r0.yz = log2(r0.yz);
  r0.yz = cb3[9].xy * r0.yz;
  r0.yz = exp2(r0.yz);
  r0.y = r0.y * r0.z;
  r0.x = r0.x * r0.y;
  r1.w = saturate(cb3[9].z * r0.x);
  r0.x = cmp(r0.w < 0);
  if (r0.x != 0) discard;
  r1.xyz = max(float3(0,0,0), r4.xyz);
  r0.x = cmp(0 < cb1[9].x);
  if (r0.x != 0) {
    r0.xyz = -cb2[8].xyz + r3.xyz;
    r2.xyz = float3(1,1,1) + cb2[9].xyz;
    r0.xyz = cmp(r2.xyz < abs(r0.xyz));
    r0.x = (int)r0.y | (int)r0.x;
    r0.x = (int)r0.z | (int)r0.x;
    r0.y = dot(r3.xyz, float3(0.577000022,0.577000022,0.577000022));
    r0.y = 0.00200000009 * r0.y;
    r0.y = frac(r0.y);
    r0.y = cmp(0.5 < r0.y);
    r2.xyz = r0.yyy ? float3(0,1,1) : float3(1,1,0);
    r2.w = 1;
    o0.xyzw = r0.xxxx ? r2.xyzw : r1.xyzw;
  } else {
    o0.xyzw = r1.xyzw;
  }
  return;
}
