// ---- Created with 3Dmigoto v1.2.51 on Sat Dec 24 13:55:23 2016
Texture3D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb5 : register(b5)
{
  float4 cb5[13];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[2];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[26];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[11];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[12];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[57];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : COLOR0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD7,
  float4 v6 : SV_Position0,
  uint v7 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = -cb1[1].xy + v6.xy;
  r0.xy = r0.xy * cb1[2].zw + float2(-0.5,-0.5);
  r0.xy = v6.ww * r0.xy;
  r0.z = v6.w;
  r0.xyw = float3(2,-2,1) * r0.xyz;
  r1.xyzw = cb0[37].xyzw * v6.yyyy;
  r1.xyzw = v6.xxxx * cb0[36].xyzw + r1.xyzw;
  r1.xyzw = v6.zzzz * cb0[38].xyzw + r1.xyzw;
  r1.xyzw = cb0[39].xyzw + r1.xyzw;
  r1.xyz = r1.xyz / r1.www;

float4 s = StereoParams.Load(0);
matrix m = MATRIX(cb0, 36);
matrix im = inverse(m);
float4 t = mul(float4(r1.xyz, 1), im);
t.x -= s.x * (t.w - s.y) * cb1[3].x / 2;
r1.xyz = mul(t, m);

  r1.xyz = -cb0[56].xyz + r1.xyz;
  r0.xy = r0.xy / r0.ww;
  r0.xy = r0.xy * cb0[52].xy + cb0[52].wz;
  r2.x = t7.SampleLevel(s5_s, r0.xy, 0).x;
  r2.x = r2.x * cb0[51].z + -cb0[51].w;
  r2.x = 1 / r2.x;
  r2.x = -r0.z * 1 + r2.x;
  r2.x = saturate(r2.x / cb5[6].y);
  r2.x = 1 + -r2.x;
  r2.y = cb5[6].z * cb1[11].z;
  r3.y = -r2.y;
  r2.yz = max(float2(9.99999997e-007,9.99999997e-007), abs(v2.zx));
  r2.yz = log2(r2.yz);
  r2.y = cb5[6].w * r2.y;
  r2.y = exp2(r2.y);
  r2.y = 1 + -r2.y;
  r2.y = r2.y * cb5[7].x + 1;
  r2.w = v3.x / r2.y;
  r2.w = 0.5 + r2.w;
  r2.y = 0.5 / r2.y;
  r4.y = r2.w + -r2.y;
  r3.x = 0;
  r4.z = v3.y;
  r4.yz = r4.yz + r3.xy;
  r2.y = r4.y / cb5[7].y;
  r2.y = 0.5 + r2.y;
  r5.xyz = float3(0.5,0.5,0.5) / cb5[7].yzw;
  r4.x = -r5.x + r2.y;
  r2.y = t4.Sample(s2_s, r4.xz).x;
  r2.y = 1 + -r2.y;
  r6.xyzw = v3.xyxy + r3.xyxy;
  r6.xyzw = r6.xyzw / cb5[7].zzww;
  r6.xyzw = float4(0.5,0.5,0.5,0.5) + r6.xyzw;
  r5.xyzw = r6.xyzw + -r5.yyzz;
  r2.w = t5.Sample(s3_s, r5.xy).x;
  r3.z = t5.Sample(s3_s, r5.zw).x;
  r2.w = r3.z + r2.w;
  r2.y = r2.y + r2.w;
  r1.w = max(cb4[1].z, r1.z);
  r5.xyzw = -cb4[1].xyzz + r1.xywz;
  r1.w = dot(r5.xyz, r5.xyz);
  r1.w = sqrt(r1.w);
  r2.w = saturate(abs(r5.w) / cb5[8].x);
  r2.w = max(9.99999997e-007, r2.w);
  r2.w = log2(r2.w);
  r2.w = cb5[8].y * r2.w;
  r2.w = exp2(r2.w);
  r2.w = 1 + -r2.w;
  r2.w = cb5[8].z * r2.w;
  r2.w = max(9.99999975e-006, r2.w);
  r2.w = 1 / r2.w;
  r1.w = -r1.w * r2.w + 1;
  r1.w = saturate(cb5[9].z * r1.w);
  r5.x = cb5[9].w * r1.w;
  r5.yw = v3.yy;
  r3.zw = r5.xy + r3.xy;
  r2.w = t4.Sample(s2_s, r3.zw).x;
  r6.xyz = -cb4[1].xyz + cb2[10].xyz;
  r3.z = cb2[5].z * r6.y;
  r3.z = r6.x * cb2[4].z + r3.z;
  r3.z = r6.z * cb2[6].z + r3.z;
  r3.w = -cb5[10].x + abs(r3.z);
  r3.w = cmp(9.99999975e-006 < abs(r3.w));
  r3.z = cmp(abs(r3.z) >= cb5[10].x);
  r3.z = r3.z ? 0 : 1;
  r3.z = r3.w ? r3.z : 1;
  r3.w = cb2[5].z * v1.y;
  r3.w = v1.x * cb2[4].z + r3.w;
  r3.w = v1.z * cb2[6].z + r3.w;
  r4.x = cmp(0 < r3.w);
  r3.w = cmp(r3.w < 0);
  r3.w = (int)r3.w + (int)-r4.x;
  r3.w = (int)r3.w;
  r3.w = 1 + r3.w;
  r3.w = -r3.w * 0.5 + 1;
  r3.z = r3.z * r3.w;
  r2.y = r3.z * r2.w + r2.y;
  r2.x = saturate(r2.x * v2.w + r2.y);
  r6.xyz = float3(-0.047003001,-0.392064989,-0.74000001) + cb5[2].xyz;
  r2.xyw = r2.xxx * r6.xyz + float3(0.047003001,0.392064989,0.74000001);
  r6.x = cb5[10].y * cb1[11].z;
  r7.xy = cb5[10].zw * v3.xx;
  r6.y = 0;
  r7.z = v2.y;
  r4.xw = r7.xz + r6.xy;
  r3.w = t6.Sample(s4_s, r4.xw).x;
  r6.z = 0.75 * r6.x;
  r4.xw = r7.yz + r6.zy;
  r4.x = t6.Sample(s4_s, r4.xw).x;
  r3.w = r4.x * r3.w;
  r6.xyz = cb5[11].xxx + -r2.xyw;
  r2.xyw = r3.www * r6.xyz + r2.xyw;
  r2.xyw = cb5[3].xyz + r2.xyw;
  r3.w = r0.z * 1 + -24;
  r3.w = saturate(0.001953125 * r3.w);
  r4.x = -cb5[11].y + v4.w;
  r4.x = cmp(9.99999975e-006 < abs(r4.x));
  r4.w = cmp(v4.w >= cb5[11].y);
  r4.w = r4.w ? 0 : 1;
  r4.x = r4.x ? r4.w : 0;
  r4.y = t4.Sample(s2_s, r4.yz).x;
  r4.x = r4.x * r4.y;
  r2.z = cb5[11].z * r2.z;
  r2.z = exp2(r2.z);
  r2.z = 1 + -r2.z;
  r2.z = r4.x * r2.z;
  r2.z = cb5[11].w * r2.z;
  r1.w = -cb5[12].x + r1.w;
  r4.x = 1 + -cb5[12].x;
  r1.w = r1.w / r4.x;
  r1.w = cb5[9].w * r1.w;
  r1.w = max(0, r1.w);
  r5.z = min(cb5[9].w, r1.w);
  r3.xy = r5.zw + r3.xy;
  r1.w = t4.Sample(s2_s, r3.xy).x;
  r1.w = r3.z * -r1.w + 1;
  r1.w = r2.z * r1.w;
  r3.w = saturate(r3.w * r1.w);
  r0.x = t3.Sample(s1_s, r0.xy).x;
  r0.x = cmp(r0.x == 0.000000);
  if (r0.x != 0) {
    r4.xyz = -cb0[53].xyz + r1.xyz;
    r5.xyz = cb0[1].xyw * r4.yyy;
    r5.xyz = r4.xxx * cb0[0].xyw + r5.xyz;
    r5.xyz = r4.zzz * cb0[2].xyw + r5.xyz;
    r5.xyz = cb0[3].xyw + r5.xyz;
    r5.xy = r5.xy / r5.zz;
    r0.x = dot(r4.xyz, r4.xyz);
    r0.x = sqrt(r0.x);
    r0.x = saturate(cb3[10].z * r0.x);
    r0.x = log2(r0.x);
    r0.x = cb3[11].x * r0.x;
    r5.z = exp2(r0.x);
    r4.xyz = r5.xyz * float3(0.5,-0.5,1) + float3(0.5,0.5,0);
    r4.xyz = r4.xyz * cb3[15].xyz + cb3[14].xyz;
    r4.xyzw = t8.SampleLevel(s0_s, r4.xyz, 0).xyzw;
  } else {
    r0.x = -cb3[15].w + r1.z;
    r0.x = saturate(cb3[16].x * r0.x);
    r0.y = 0;
    r5.xyz = t0.SampleLevel(s0_s, r0.xy, 0).xyz;
    r6.xyz = cb3[23].xyz + -r5.xyz;
    r5.xyz = cb3[22].xxx * r6.xyz + r5.xyz;
    r6.xyz = t1.SampleLevel(s0_s, r0.xy, 0).yzw;
    r7.xyz = cb3[24].yzw + -r6.xyz;
    r6.xyz = cb3[22].yyy * r7.xyz + r6.xyz;
    r6.xz = float2(1,1) / r6.xz;
    r7.xyzw = t2.SampleLevel(s0_s, r0.xy, 0).xyzw;
    r8.xyzw = cb3[25].xyzw + -r7.xyzw;
    r7.xyzw = cb3[22].yyyy * r8.xyzw + r7.xyzw;
    r0.x = saturate(r6.x * r0.w);
    r0.x = log2(r0.x);
    r0.x = r7.x * r0.x;
    r0.x = exp2(r0.x);
    r0.y = r0.z * 1 + -r6.y;
    r0.y = saturate(r0.y * r6.z);
    r0.y = log2(r0.y);
    r0.y = r7.y * r0.y;
    r0.y = exp2(r0.y);
    r0.y = r0.y * r7.w;
    r0.x = saturate(r0.x * r7.z + r0.y);
    r4.xyz = r5.xyz * r0.xxx;
    r4.w = 1 + -r0.x;
  }
  r3.xyz = max(float3(0,0,0), r2.xyw);
  r0.x = cmp(0 < cb1[9].x);
  if (r0.x != 0) {
    r0.xyz = -cb2[8].xyz + r1.xyz;
    r2.xyz = float3(1,1,1) + cb2[9].xyz;
    r0.xyz = cmp(r2.xyz < abs(r0.xyz));
    r0.x = (int)r0.y | (int)r0.x;
    r0.x = (int)r0.z | (int)r0.x;
    r0.y = dot(r1.xyz, float3(0.577000022,0.577000022,0.577000022));
    r0.y = 0.00200000009 * r0.y;
    r0.y = frac(r0.y);
    r0.y = cmp(0.5 < r0.y);
    r1.yzw = r0.yyy ? float3(0,1,1) : float3(1,1,0);
    r1.x = 1;
    r3.xyzw = r0.xxxx ? r1.yzwx : r3.xyzw;
    o0.w = r3.w;
  } else {
    o0.w = r3.w;
  }
  o0.xyz = r3.xyz * r4.www + r4.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sat Dec 24 13:55:23 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float       
// TEXCOORD                11   xyzw        1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float      w
// TEXCOORD                 7   xyzw        5     NONE   float       
// SV_Position              0   xyzw        6      POS   float   xyzw
// SV_IsFrontFace           0   x           7    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[57], immediateIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_constantbuffer cb2[11], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[2], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture3d (float,float,float,float) t8
dcl_input_ps linear centroid v1.xyz
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.w
dcl_input_ps_siv linear noperspective v6.xyzw, position
dcl_output o0.xyzw
dcl_temps 9
add r0.xy, v6.xyxx, -cb1[1].xyxx
mad r0.xy, r0.xyxx, cb1[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, v6.wwww
mov r0.z, v6.w
mul r0.xyw, r0.xyxz, l(2.000000, -2.000000, 0.000000, 1.000000)
mul r1.xyzw, v6.yyyy, cb0[37].xyzw
mad r1.xyzw, v6.xxxx, cb0[36].xyzw, r1.xyzw
mad r1.xyzw, v6.zzzz, cb0[38].xyzw, r1.xyzw
add r1.xyzw, r1.xyzw, cb0[39].xyzw
div r1.xyz, r1.xyzx, r1.wwww
add r1.xyz, r1.xyzx, -cb0[56].xyzx
div r0.xy, r0.xyxx, r0.wwww
mad r0.xy, r0.xyxx, cb0[52].xyxx, cb0[52].wzww
sample_l_indexable(texture2d)(float,float,float,float) r2.x, r0.xyxx, t7.xyzw, s5, l(0.000000)
mad r2.x, r2.x, cb0[51].z, -cb0[51].w
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
mad r2.x, -r0.z, l(1.000000), r2.x
div_sat r2.x, r2.x, cb5[6].y
add r2.x, -r2.x, l(1.000000)
mul r2.y, cb1[11].z, cb5[6].z
mov r3.y, -r2.y
max r2.yz, |v2.zzxz|, l(0.000000, 0.000001, 0.000001, 0.000000)
log r2.yz, r2.yyzy
mul r2.y, r2.y, cb5[6].w
exp r2.y, r2.y
add r2.y, -r2.y, l(1.000000)
mad r2.y, r2.y, cb5[7].x, l(1.000000)
div r2.w, v3.x, r2.y
add r2.w, r2.w, l(0.500000)
div r2.y, l(0.500000), r2.y
add r4.y, -r2.y, r2.w
mov r3.x, l(0)
mov r4.z, v3.y
add r4.yz, r3.xxyx, r4.yyzy
div r2.y, r4.y, cb5[7].y
add r2.y, r2.y, l(0.500000)
div r5.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), cb5[7].yzwy
add r4.x, r2.y, -r5.x
sample_indexable(texture2d)(float,float,float,float) r2.y, r4.xzxx, t4.yxzw, s2
add r2.y, -r2.y, l(1.000000)
add r6.xyzw, r3.xyxy, v3.xyxy
div r6.xyzw, r6.xyzw, cb5[7].zzww
add r6.xyzw, r6.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
add r5.xyzw, -r5.yyzz, r6.xyzw
sample_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t5.yzwx, s3
sample_indexable(texture2d)(float,float,float,float) r3.z, r5.zwzz, t5.yzxw, s3
add r2.w, r2.w, r3.z
add r2.y, r2.w, r2.y
max r1.w, r1.z, cb4[1].z
add r5.xyzw, r1.xywz, -cb4[1].xyzz
dp3 r1.w, r5.xyzx, r5.xyzx
sqrt r1.w, r1.w
div_sat r2.w, |r5.w|, cb5[8].x
max r2.w, r2.w, l(0.000001)
log r2.w, r2.w
mul r2.w, r2.w, cb5[8].y
exp r2.w, r2.w
add r2.w, -r2.w, l(1.000000)
mul r2.w, r2.w, cb5[8].z
max r2.w, r2.w, l(0.000010)
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
mad r1.w, -r1.w, r2.w, l(1.000000)
mul_sat r1.w, r1.w, cb5[9].z
mul r5.x, r1.w, cb5[9].w
mov r5.yw, v3.yyyy
add r3.zw, r3.xxxy, r5.xxxy
sample_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t4.yzwx, s2
add r6.xyz, cb2[10].xyzx, -cb4[1].xyzx
mul r3.z, r6.y, cb2[5].z
mad r3.z, r6.x, cb2[4].z, r3.z
mad r3.z, r6.z, cb2[6].z, r3.z
add r3.w, |r3.z|, -cb5[10].x
lt r3.w, l(0.000010), |r3.w|
ge r3.z, |r3.z|, cb5[10].x
movc r3.z, r3.z, l(0), l(1.000000)
movc r3.z, r3.w, r3.z, l(1.000000)
mul r3.w, v1.y, cb2[5].z
mad r3.w, v1.x, cb2[4].z, r3.w
mad r3.w, v1.z, cb2[6].z, r3.w
lt r4.x, l(0.000000), r3.w
lt r3.w, r3.w, l(0.000000)
iadd r3.w, r3.w, -r4.x
itof r3.w, r3.w
add r3.w, r3.w, l(1.000000)
mad r3.w, -r3.w, l(0.500000), l(1.000000)
mul r3.z, r3.w, r3.z
mad r2.y, r3.z, r2.w, r2.y
mad_sat r2.x, r2.x, v2.w, r2.y
add r6.xyz, cb5[2].xyzx, l(-0.047003, -0.392065, -0.740000, 0.000000)
mad r2.xyw, r2.xxxx, r6.xyxz, l(0.047003, 0.392065, 0.000000, 0.740000)
mul r6.x, cb1[11].z, cb5[10].y
mul r7.xy, v3.xxxx, cb5[10].zwzz
mov r6.y, l(0)
mov r7.z, v2.y
add r4.xw, r6.xxxy, r7.xxxz
sample_indexable(texture2d)(float,float,float,float) r3.w, r4.xwxx, t6.yzwx, s4
mul r6.z, r6.x, l(0.750000)
add r4.xw, r6.zzzy, r7.yyyz
sample_indexable(texture2d)(float,float,float,float) r4.x, r4.xwxx, t6.xyzw, s4
mul r3.w, r3.w, r4.x
add r6.xyz, -r2.xywx, cb5[11].xxxx
mad r2.xyw, r3.wwww, r6.xyxz, r2.xyxw
add r2.xyw, r2.xyxw, cb5[3].xyxz
mad r3.w, r0.z, l(1.000000), l(-24.000000)
mul_sat r3.w, r3.w, l(0.00195312500)
add r4.x, v4.w, -cb5[11].y
lt r4.x, l(0.000010), |r4.x|
ge r4.w, v4.w, cb5[11].y
movc r4.w, r4.w, l(0), l(1.000000)
and r4.x, r4.w, r4.x
sample_indexable(texture2d)(float,float,float,float) r4.y, r4.yzyy, t4.yxzw, s2
mul r4.x, r4.y, r4.x
mul r2.z, r2.z, cb5[11].z
exp r2.z, r2.z
add r2.z, -r2.z, l(1.000000)
mul r2.z, r2.z, r4.x
mul r2.z, r2.z, cb5[11].w
add r1.w, r1.w, -cb5[12].x
add r4.x, -cb5[12].x, l(1.000000)
div r1.w, r1.w, r4.x
mul r1.w, r1.w, cb5[9].w
max r1.w, r1.w, l(0.000000)
min r5.z, r1.w, cb5[9].w
add r3.xy, r3.xyxx, r5.zwzz
sample_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t4.yzwx, s2
mad r1.w, r3.z, -r1.w, l(1.000000)
mul r1.w, r1.w, r2.z
mul_sat r3.w, r1.w, r3.w
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t3.xyzw, s1
eq r0.x, r0.x, l(0.000000)
if_nz r0.x
  add r4.xyz, r1.xyzx, -cb0[53].xyzx
  mul r5.xyz, r4.yyyy, cb0[1].xywx
  mad r5.xyz, r4.xxxx, cb0[0].xywx, r5.xyzx
  mad r5.xyz, r4.zzzz, cb0[2].xywx, r5.xyzx
  add r5.xyz, r5.xyzx, cb0[3].xywx
  div r5.xy, r5.xyxx, r5.zzzz
  dp3 r0.x, r4.xyzx, r4.xyzx
  sqrt r0.x, r0.x
  mul_sat r0.x, r0.x, cb3[10].z
  log r0.x, r0.x
  mul r0.x, r0.x, cb3[11].x
  exp r5.z, r0.x
  mad r4.xyz, r5.xyzx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r4.xyz, r4.xyzx, cb3[15].xyzx, cb3[14].xyzx
  sample_l_indexable(texture3d)(float,float,float,float) r4.xyzw, r4.xyzx, t8.xyzw, s0, l(0.000000)
else 
  add r0.x, r1.z, -cb3[15].w
  mul_sat r0.x, r0.x, cb3[16].x
  mov r0.y, l(0)
  sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r0.xyxx, t0.xyzw, s0, l(0.000000)
  add r6.xyz, -r5.xyzx, cb3[23].xyzx
  mad r5.xyz, cb3[22].xxxx, r6.xyzx, r5.xyzx
  sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r0.xyxx, t1.yzwx, s0, l(0.000000)
  add r7.xyz, -r6.xyzx, cb3[24].yzwy
  mad r6.xyz, cb3[22].yyyy, r7.xyzx, r6.xyzx
  div r6.xz, l(1.000000, 1.000000, 1.000000, 1.000000), r6.xxzx
  sample_l_indexable(texture2d)(float,float,float,float) r7.xyzw, r0.xyxx, t2.xyzw, s0, l(0.000000)
  add r8.xyzw, -r7.xyzw, cb3[25].xyzw
  mad r7.xyzw, cb3[22].yyyy, r8.xyzw, r7.xyzw
  mul_sat r0.x, r0.w, r6.x
  log r0.x, r0.x
  mul r0.x, r0.x, r7.x
  exp r0.x, r0.x
  mad r0.y, r0.z, l(1.000000), -r6.y
  mul_sat r0.y, r6.z, r0.y
  log r0.y, r0.y
  mul r0.y, r0.y, r7.y
  exp r0.y, r0.y
  mul r0.y, r7.w, r0.y
  mad_sat r0.x, r0.x, r7.z, r0.y
  mul r4.xyz, r0.xxxx, r5.xyzx
  add r4.w, -r0.x, l(1.000000)
endif 
max r3.xyz, r2.xywx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.x, l(0.000000), cb1[9].x
if_nz r0.x
  add r0.xyz, r1.xyzx, -cb2[8].xyzx
  add r2.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r0.xyz, r2.xyzx, |r0.xyzx|
  or r0.x, r0.y, r0.x
  or r0.x, r0.z, r0.x
  dp3 r0.y, r1.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r0.y, r0.y, l(0.002000)
  frc r0.y, r0.y
  lt r0.y, l(0.500000), r0.y
  movc r1.yzw, r0.yyyy, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r1.x, l(1.000000)
  movc r3.xyzw, r0.xxxx, r1.yzwx, r3.xyzw
  mov o0.w, r3.w
else 
  mov o0.w, r3.w
endif 
mad o0.xyz, r3.xyzx, r4.wwww, r4.xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
