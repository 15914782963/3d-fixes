// foam near falling water
// ---- Created with 3Dmigoto v1.2.51 on Sat Dec 24 21:13:43 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[8];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[12];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[30];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cb1[3].zw * v0.xy;
  r0.x = t3.SampleLevel(s3_s, r0.xy, 0).x;
  r1.xyzw = cb0[2].xyzw * v0.yyyy;
  r1.xyzw = v0.xxxx * cb0[1].xyzw + r1.xyzw;
  r0.xyzw = r0.xxxx * cb0[3].xyzw + r1.xyzw;
  r0.xyzw = cb0[4].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;

float4 s = StereoParams.Load(0);
matrix m = MATRIX(cb0, 1);
matrix im = inverse(m);
float4 t = mul(float4(r0.xyz, 1), im);
t.x -= s.x * (t.w - s.y) * cb1[3].x / 2;
r0.xyz = mul(t, m);

  r1.xyz = float3(1,1,1) + r0.xyz;
  r1.xyz = cmp(r1.xyz < float3(0,0,0));
  r0.w = (int)r1.y | (int)r1.x;
  r0.w = (int)r1.z | (int)r0.w;
  if (r0.w != 0) discard;
  r1.xyz = float3(1,1,1) + -r0.xyz;
  r0.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r1.xyz = cmp(r1.xyz < float3(0,0,0));
  r0.w = (int)r1.y | (int)r1.x;
  r0.w = (int)r1.z | (int)r0.w;
  if (r0.w != 0) discard;
  r1.y = cb2[6].x * r0.z;
  r2.xy = cb2[5].xy * cb1[11].zz;
  r2.xy = frac(r2.xy);
  r1.zw = cb2[5].wz * r0.yy;
  r2.z = 0;
  r1.yz = r2.yz + r1.yz;
  r1.yz = r2.zx + r1.yz;
  r0.w = t2.Sample(s2_s, r1.yz).x;
  r1.x = cb2[7].x * r0.z;
  r1.yz = cb2[6].zw * cb1[11].zz;
  r2.xy = frac(r1.yz);
  r2.z = 0;
  r1.xy = r2.yz + r1.xw;
  r1.xy = r2.zx + r1.xy;
  r1.x = t2.Sample(s2_s, r1.xy).x;
  r0.w = max(r1.x, r0.w);
  r1.x = t1.Sample(s1_s, r0.zy).x;
  r0.w = r1.x * cb2[4].w + r0.w;
  r0.z = t0.Sample(s0_s, r0.zy).x;
  r0.yz = max(float2(9.99999997e-007,9.99999997e-007), abs(r0.yz));
  r0.z = log2(r0.z);
  r0.z = cb2[4].y * r0.z;
  r0.z = exp2(r0.z);
  r1.x = -r0.z * cb2[4].z + 1;
  r0.w = cmp(r0.w >= r1.x);
  r0.w = r0.w ? 1.000000 : 0;
  r0.z = r0.z * r0.w;
  r0.x = r0.x * 2 + -1;
  r0.x = saturate(-abs(r0.x) * 4 + 4);
  r0.y = log2(r0.y);
  r0.y = cb2[7].y * r0.y;
  r0.y = exp2(r0.y);
  r0.y = r0.z * r0.y;
  r0.y = min(1, r0.y);
  r0.x = r0.y * r0.x;
  r0.x = cb0[29].x * r0.x;
  o0.w = r0.x;
  r0.yzw = cb2[4].xxx + cb2[1].xyz;
  o0.xyz = max(float3(0,0,0), r0.yzw);
  o2.w = r0.x;
  o3.w = r0.x;
  o2.z = cb1[8].y * 0.5 + cb1[8].x;
  o2.xy = float2(0,0.5);
  r0.yzw = saturate(cb2[3].xyz);
  o3.xyz = r0.yzw * r0.xxx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sat Dec 24 21:13:43 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[30], immediateIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_constantbuffer cb2[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3
mul r0.xy, v0.xyxx, cb1[3].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t3.xyzw, s3, l(0.000000)
mul r1.xyzw, v0.yyyy, cb0[2].xyzw
mad r1.xyzw, v0.xxxx, cb0[1].xyzw, r1.xyzw
mad r0.xyzw, r0.xxxx, cb0[3].xyzw, r1.xyzw
add r0.xyzw, r0.xyzw, cb0[4].xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r1.y, r1.x
or r0.w, r1.z, r0.w
discard_nz r0.w
add r1.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
lt r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r1.y, r1.x
or r0.w, r1.z, r0.w
discard_nz r0.w
mul r1.y, r0.z, cb2[6].x
mul r2.xy, cb1[11].zzzz, cb2[5].xyxx
frc r2.xy, r2.xyxx
mul r1.zw, r0.yyyy, cb2[5].wwwz
mov r2.z, l(0)
add r1.yz, r1.yyzy, r2.yyzy
add r1.yz, r1.yyzy, r2.zzxz
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.yzyy, t2.yzwx, s2
mul r1.x, r0.z, cb2[7].x
mul r1.yz, cb1[11].zzzz, cb2[6].zzwz
frc r2.xy, r1.yzyy
mov r2.z, l(0)
add r1.xy, r1.xwxx, r2.yzyy
add r1.xy, r1.xyxx, r2.zxzz
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t2.xyzw, s2
max r0.w, r0.w, r1.x
sample_indexable(texture2d)(float,float,float,float) r1.x, r0.zyzz, t1.xyzw, s1
mad r0.w, r1.x, cb2[4].w, r0.w
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.zyzz, t0.yzxw, s0
max r0.yz, |r0.yyzy|, l(0.000000, 0.000001, 0.000001, 0.000000)
log r0.z, r0.z
mul r0.z, r0.z, cb2[4].y
exp r0.z, r0.z
mad r1.x, -r0.z, cb2[4].z, l(1.000000)
ge r0.w, r0.w, r1.x
and r0.w, r0.w, l(0x3f800000)
mul r0.z, r0.w, r0.z
mad r0.x, r0.x, l(2.000000), l(-1.000000)
mad_sat r0.x, -|r0.x|, l(4.000000), l(4.000000)
log r0.y, r0.y
mul r0.y, r0.y, cb2[7].y
exp r0.y, r0.y
mul r0.y, r0.y, r0.z
min r0.y, r0.y, l(1.000000)
mul r0.x, r0.x, r0.y
mul r0.x, r0.x, cb0[29].x
mov o0.w, r0.x
add r0.yzw, cb2[1].xxyz, cb2[4].xxxx
max o0.xyz, r0.yzwy, l(0.000000, 0.000000, 0.000000, 0.000000)
mov o2.w, r0.x
mov o3.w, r0.x
mad o2.z, cb1[8].y, l(0.500000), cb1[8].x
mov o2.xy, l(0,0.500000,0,0)
mov_sat r0.yzw, cb2[3].xxyz
mul o3.xyz, r0.xxxx, r0.yzwy
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
