// Blue water trough

// ---- Created with 3Dmigoto v1.2.51 on Sat Dec 24 12:14:51 2016
Texture3D<float4> t8 : register(t8);

TextureCube<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[14];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[26];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[10];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[12];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[57];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD7,
  float4 v4 : SV_Position0,
  uint v5 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb1[1].xy + v4.xy;
  r1.xy = r1.xy * cb1[2].zw + float2(-0.5,-0.5);
  r1.xy = v4.ww * r1.xy;
  r1.z = v4.w;
  r1.xyw = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb0[37].xyzw * v4.yyyy;
  r2.xyzw = v4.xxxx * cb0[36].xyzw + r2.xyzw;
  r2.xyzw = v4.zzzz * cb0[38].xyzw + r2.xyzw;
  r2.xyzw = cb0[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

float4 s = StereoParams.Load(0);
matrix m = MATRIX(cb0, 36);
matrix im = inverse(m);
float4 t = mul(float4(r2.xyz, 1), im);
t.x -= s.x * (t.w - s.y) * cb1[3].x / 2;
r2.xyz = mul(t, m);

  r3.xyz = -cb0[56].xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r2.xyz = -r2.xyz / r0.www;
  r4.xyz = cb1[7].www * float3(0,0,1) + cb1[7].xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.xyz = r4.yyy * r0.xyz;
  r0.xyz = r4.xxx * v0.xyz + r0.xyz;
  r0.xyz = r4.zzz * v1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(r0.xyz, r2.xyz);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = r0.xyz * float3(2,2,2) + -r2.xyz;
  r0.w = max(0, r0.w);
  r0.w = 1 + -r0.w;
  r0.w = max(9.99999997e-007, abs(r0.w));
  r2.x = r0.w * r0.w;
  r2.x = r2.x * r2.x;
  r0.w = r2.x * r0.w;
  r0.w = r0.w * 0.959999979 + 0.0399999991;
  r0.w = log2(r0.w);
  r2.x = cb4[10].x * r0.w;
  r2.x = exp2(r2.x);
  r2.y = cb4[10].y * cb1[11].z;
  r4.x = 0.300000012 * r2.y;
  r2.yz = r3.xy / cb4[10].zz;
  r4.yz = float2(0,0);
  r4.xy = r4.xy + r2.yz;
  r2.w = t4.Sample(s4_s, r4.xy).x;
  r2.yz = cb1[11].zz * float2(-0.0260000005,-0.0599999987) + r2.yz;
  r2.y = t4.Sample(s4_s, r2.yz).y;
  r2.y = -r2.w * r2.y + 1;
  r0.xyz = cb4[10].www * r2.yyy + r0.xyz;
  r0.x = t7.Sample(s4_s, r0.xyz).x;
  r0.xyz = cb4[2].xyz * r0.xxx;
  r2.z = cb4[11].x * cb1[11].z;
  r4.w = frac(r2.z);
  r4.y = cb4[11].y * v2.y;
  r4.x = v2.x;
  r2.zw = r4.zw + r4.xy;
  r4.xy = cb4[11].zz * r2.zw;
  r3.w = t5.Sample(s2_s, r4.xy).x;
  r4.xy = float2(0.5,0.5) * r4.xy;
  r4.x = t5.Sample(s2_s, r4.xy).x;
  r3.w = r4.x + r3.w;
  r2.yz = cb4[10].ww * r2.yy + r2.zw;
  r2.y = t6.Sample(s3_s, r2.yz).x;
  r2.y = 1 + -r2.y;
  r2.y = max(9.99999997e-007, abs(r2.y));
  r2.y = log2(r2.y);
  r2.y = cb4[11].w * r2.y;
  r2.y = exp2(r2.y);
  r2.y = r3.w + r2.y;
  r4.xyz = -cb4[6].xyz + cb4[5].xyz;
  r4.xyz = r2.yyy * r4.xyz + cb4[6].xyz;
  r4.xyz = cb4[12].xxx * r4.xyz;
  r0.xyz = r2.xxx * r0.xyz + r4.xyz;
  r0.xyz = cb4[7].xyz + r0.xyz;
  r0.w = cb4[12].y * r0.w;
  r0.w = exp2(r0.w);
  r0.w = saturate(r2.y + r0.w);
  r2.x = cb4[12].z + -cb4[12].w;
  r0.w = r0.w * r2.x + cb4[12].w;
  r2.x = saturate(cb4[13].x);
  r2.x = 1 + -r2.x;
  r2.x = v2.z + -r2.x;
  r2.x = ceil(r2.x);
  r2.w = saturate(r2.x * r0.w);
  r1.xy = r1.xy / r1.ww;
  r1.xy = r1.xy * cb0[52].xy + cb0[52].wz;
  r0.w = t3.Sample(s1_s, r1.xy).x;
  r0.w = cmp(r0.w == 0.000000);
  if (r0.w != 0) {
    r4.xyz = -cb0[53].xyz + r3.xyz;
    r5.xyz = cb0[1].xyw * r4.yyy;
    r5.xyz = r4.xxx * cb0[0].xyw + r5.xyz;
    r5.xyz = r4.zzz * cb0[2].xyw + r5.xyz;
    r5.xyz = cb0[3].xyw + r5.xyz;
    r5.xy = r5.xy / r5.zz;
    r0.w = dot(r4.xyz, r4.xyz);
    r0.w = sqrt(r0.w);
    r0.w = saturate(cb3[10].z * r0.w);
    r0.w = log2(r0.w);
    r0.w = cb3[11].x * r0.w;
    r5.z = exp2(r0.w);
    r4.xyz = r5.xyz * float3(0.5,-0.5,1) + float3(0.5,0.5,0);
    r4.xyz = r4.xyz * cb3[15].xyz + cb3[14].xyz;
    r4.xyzw = t8.SampleLevel(s0_s, r4.xyz, 0).xyzw;
  } else {
    r0.w = -cb3[15].w + r3.z;
    r1.x = saturate(cb3[16].x * r0.w);
    r1.y = 0;
    r5.xyz = t0.SampleLevel(s0_s, r1.xy, 0).xyz;
    r6.xyz = cb3[23].xyz + -r5.xyz;
    r5.xyz = cb3[22].xxx * r6.xyz + r5.xyz;
    r6.xyz = t1.SampleLevel(s0_s, r1.xy, 0).yzw;
    r7.xyz = cb3[24].yzw + -r6.xyz;
    r6.xyz = cb3[22].yyy * r7.xyz + r6.xyz;
    r6.xz = float2(1,1) / r6.xz;
    r7.xyzw = t2.SampleLevel(s0_s, r1.xy, 0).xyzw;
    r8.xyzw = cb3[25].xyzw + -r7.xyzw;
    r7.xyzw = cb3[22].yyyy * r8.xyzw + r7.xyzw;
    r0.w = saturate(r6.x * r1.w);
    r0.w = log2(r0.w);
    r0.w = r7.x * r0.w;
    r0.w = exp2(r0.w);
    r1.x = r1.z * 1 + -r6.y;
    r1.x = saturate(r1.x * r6.z);
    r1.x = log2(r1.x);
    r1.x = r7.y * r1.x;
    r1.x = exp2(r1.x);
    r1.x = r1.x * r7.w;
    r0.w = saturate(r0.w * r7.z + r1.x);
    r4.xyz = r5.xyz * r0.www;
    r4.w = 1 + -r0.w;
  }
  r2.xyz = max(float3(0,0,0), r0.xyz);
  r0.x = cmp(0 < cb1[9].x);
  if (r0.x != 0) {
    r0.xyz = -cb2[8].xyz + r3.xyz;
    r1.xyz = float3(1,1,1) + cb2[9].xyz;
    r0.xyz = cmp(r1.xyz < abs(r0.xyz));
    r0.x = (int)r0.y | (int)r0.x;
    r0.x = (int)r0.z | (int)r0.x;
    r0.y = dot(r3.xyz, float3(0.577000022,0.577000022,0.577000022));
    r0.y = 0.00200000009 * r0.y;
    r0.y = frac(r0.y);
    r0.y = cmp(0.5 < r0.y);
    r1.yzw = r0.yyy ? float3(0,1,1) : float3(1,1,0);
    r1.x = 1;
    r2.xyzw = r0.xxxx ? r1.yzwx : r2.xyzw;
    o0.w = r2.w;
  } else {
    o0.w = r2.w;
  }
  o0.xyz = r2.xyz * r4.www + r4.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sat Dec 24 12:14:51 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyz 
// TEXCOORD                 7   xyzw        3     NONE   float       
// SV_Position              0   xyzw        4      POS   float   xyzw
// SV_IsFrontFace           0   x           5    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[57], immediateIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_constantbuffer cb2[10], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[14], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texturecube (float,float,float,float) t7
dcl_resource_texture3d (float,float,float,float) t8
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps_siv linear noperspective v4.xyzw, position
dcl_output o0.xyzw
dcl_temps 9
mul r0.xyz, v0.yzxy, v1.zxyz
mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v1.wwww
add r1.xy, v4.xyxx, -cb1[1].xyxx
mad r1.xy, r1.xyxx, cb1[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.xy, r1.xyxx, v4.wwww
mov r1.z, v4.w
mul r1.xyw, r1.xyxz, l(2.000000, -2.000000, 0.000000, 1.000000)
mul r2.xyzw, v4.yyyy, cb0[37].xyzw
mad r2.xyzw, v4.xxxx, cb0[36].xyzw, r2.xyzw
mad r2.xyzw, v4.zzzz, cb0[38].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[39].xyzw
div r2.xyz, r2.xyzx, r2.wwww
add r3.xyz, r2.xyzx, -cb0[56].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
div r2.xyz, -r2.xyzx, r0.wwww
mad r4.xyz, cb1[7].wwww, l(0.000000, 0.000000, 1.000000, 0.000000), cb1[7].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
mul r0.xyz, r0.xyzx, r4.yyyy
mad r0.xyz, r4.xxxx, v0.xyzx, r0.xyzx
mad r0.xyz, r4.zzzz, v1.xyzx, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r0.xyzx, r2.xyzx
mul r0.xyz, r0.wwww, r0.xyzx
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r2.xyzx
max r0.w, r0.w, l(0.000000)
add r0.w, -r0.w, l(1.000000)
max r0.w, |r0.w|, l(0.000001)
mul r2.x, r0.w, r0.w
mul r2.x, r2.x, r2.x
mul r0.w, r0.w, r2.x
mad r0.w, r0.w, l(0.960000), l(0.040000)
log r0.w, r0.w
mul r2.x, r0.w, cb4[10].x
exp r2.x, r2.x
mul r2.y, cb1[11].z, cb4[10].y
mul r4.x, r2.y, l(0.300000)
div r2.yz, r3.xxyx, cb4[10].zzzz
mov r4.yz, l(0,0,0,0)
add r4.xy, r2.yzyy, r4.xyxx
sample_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t4.yzwx, s4
mad r2.yz, cb1[11].zzzz, l(0.000000, -0.026000, -0.060000, 0.000000), r2.yyzy
sample_indexable(texture2d)(float,float,float,float) r2.y, r2.yzyy, t4.xyzw, s4
mad r2.y, -r2.w, r2.y, l(1.000000)
mad r0.xyz, cb4[10].wwww, r2.yyyy, r0.xyzx
sample_indexable(texturecube)(float,float,float,float) r0.x, r0.xyzx, t7.xyzw, s4
mul r0.xyz, r0.xxxx, cb4[2].xyzx
mul r2.z, cb1[11].z, cb4[11].x
frc r4.w, r2.z
mul r4.y, v2.y, cb4[11].y
mov r4.x, v2.x
add r2.zw, r4.xxxy, r4.zzzw
mul r4.xy, r2.zwzz, cb4[11].zzzz
sample_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t5.yzwx, s2
mul r4.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r4.x, r4.xyxx, t5.xyzw, s2
add r3.w, r3.w, r4.x
mad r2.yz, cb4[10].wwww, r2.yyyy, r2.zzwz
sample_indexable(texture2d)(float,float,float,float) r2.y, r2.yzyy, t6.yxzw, s3
add r2.y, -r2.y, l(1.000000)
max r2.y, |r2.y|, l(0.000001)
log r2.y, r2.y
mul r2.y, r2.y, cb4[11].w
exp r2.y, r2.y
add r2.y, r2.y, r3.w
add r4.xyz, cb4[5].xyzx, -cb4[6].xyzx
mad r4.xyz, r2.yyyy, r4.xyzx, cb4[6].xyzx
mul r4.xyz, r4.xyzx, cb4[12].xxxx
mad r0.xyz, r2.xxxx, r0.xyzx, r4.xyzx
add r0.xyz, r0.xyzx, cb4[7].xyzx
mul r0.w, r0.w, cb4[12].y
exp r0.w, r0.w
add_sat r0.w, r0.w, r2.y
add r2.x, -cb4[12].w, cb4[12].z
mad r0.w, r0.w, r2.x, cb4[12].w
mov_sat r2.x, cb4[13].x
add r2.x, -r2.x, l(1.000000)
add r2.x, -r2.x, v2.z
round_pi r2.x, r2.x
mul_sat r2.w, r0.w, r2.x
div r1.xy, r1.xyxx, r1.wwww
mad r1.xy, r1.xyxx, cb0[52].xyxx, cb0[52].wzww
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t3.yzwx, s1
eq r0.w, r0.w, l(0.000000)
if_nz r0.w
  add r4.xyz, r3.xyzx, -cb0[53].xyzx
  mul r5.xyz, r4.yyyy, cb0[1].xywx
  mad r5.xyz, r4.xxxx, cb0[0].xywx, r5.xyzx
  mad r5.xyz, r4.zzzz, cb0[2].xywx, r5.xyzx
  add r5.xyz, r5.xyzx, cb0[3].xywx
  div r5.xy, r5.xyxx, r5.zzzz
  dp3 r0.w, r4.xyzx, r4.xyzx
  sqrt r0.w, r0.w
  mul_sat r0.w, r0.w, cb3[10].z
  log r0.w, r0.w
  mul r0.w, r0.w, cb3[11].x
  exp r5.z, r0.w
  mad r4.xyz, r5.xyzx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r4.xyz, r4.xyzx, cb3[15].xyzx, cb3[14].xyzx
  sample_l_indexable(texture3d)(float,float,float,float) r4.xyzw, r4.xyzx, t8.xyzw, s0, l(0.000000)
else 
  add r0.w, r3.z, -cb3[15].w
  mul_sat r1.x, r0.w, cb3[16].x
  mov r1.y, l(0)
  sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyxx, t0.xyzw, s0, l(0.000000)
  add r6.xyz, -r5.xyzx, cb3[23].xyzx
  mad r5.xyz, cb3[22].xxxx, r6.xyzx, r5.xyzx
  sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyxx, t1.yzwx, s0, l(0.000000)
  add r7.xyz, -r6.xyzx, cb3[24].yzwy
  mad r6.xyz, cb3[22].yyyy, r7.xyzx, r6.xyzx
  div r6.xz, l(1.000000, 1.000000, 1.000000, 1.000000), r6.xxzx
  sample_l_indexable(texture2d)(float,float,float,float) r7.xyzw, r1.xyxx, t2.xyzw, s0, l(0.000000)
  add r8.xyzw, -r7.xyzw, cb3[25].xyzw
  mad r7.xyzw, cb3[22].yyyy, r8.xyzw, r7.xyzw
  mul_sat r0.w, r1.w, r6.x
  log r0.w, r0.w
  mul r0.w, r0.w, r7.x
  exp r0.w, r0.w
  mad r1.x, r1.z, l(1.000000), -r6.y
  mul_sat r1.x, r6.z, r1.x
  log r1.x, r1.x
  mul r1.x, r1.x, r7.y
  exp r1.x, r1.x
  mul r1.x, r7.w, r1.x
  mad_sat r0.w, r0.w, r7.z, r1.x
  mul r4.xyz, r0.wwww, r5.xyzx
  add r4.w, -r0.w, l(1.000000)
endif 
max r2.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.x, l(0.000000), cb1[9].x
if_nz r0.x
  add r0.xyz, r3.xyzx, -cb2[8].xyzx
  add r1.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r0.xyz, r1.xyzx, |r0.xyzx|
  or r0.x, r0.y, r0.x
  or r0.x, r0.z, r0.x
  dp3 r0.y, r3.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r0.y, r0.y, l(0.002000)
  frc r0.y, r0.y
  lt r0.y, l(0.500000), r0.y
  movc r1.yzw, r0.yyyy, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r1.x, l(1.000000)
  movc r2.xyzw, r0.xxxx, r1.yzwx, r2.xyzw
  mov o0.w, r2.w
else 
  mov o0.w, r2.w
endif 
mad o0.xyz, r2.xyzx, r4.wwww, r4.xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
