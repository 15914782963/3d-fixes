// ---- Created with 3Dmigoto v1.2.51 on Thu Jan 05 00:34:09 2017
Texture3D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[9];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[26];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[10];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[14];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[57];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  float4 v0 : TEXCOORD10,
  float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  float4 v4 : PARTICLE_POSITION0,
  float3 v5 : PARTICLE_LIGHTING_OFFSET0,
  float4 v6 : TEXCOORD7,
  float4 v7 : TEXCOORD12,
  float3 v8 : TEXCOORD13,
  float4 v9 : SV_Position0,
  uint v10 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb0[37].xyzw * v9.yyyy;
  r0.xyzw = v9.xxxx * cb0[36].xyzw + r0.xyzw;
  r0.xyzw = v9.zzzz * cb0[38].xyzw + r0.xyzw;
  r0.xyzw = cb0[39].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;

// Common SVPositionToTranslatedWorld fix:
float4 s = StereoParams.Load(0);
matrix TranslatedWorldToClip = MATRIX(cb0, 0);
matrix ClipToTranslatedWorld = MATRIX(cb0, 32);
float4 t = mul(r0, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r0 = mul(t, ClipToTranslatedWorld);

  r1.xyz = cb0[53].yzx + r0.yzx;
  r2.xyz = -v4.xyz + r1.zxy;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = v4.w * v4.w + -r0.w;
  r1.w = cmp(0 < r0.w);
  r0.w = sqrt(r0.w);
  r1.xyz = -cb0[48].yzx * r0.www + r1.xyz;
  r1.xyz = -v4.yzx + r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r1.xyz = r1.www ? r1.xyz : float3(0,1,0);
  r2.xyz = cb0[49].xyz * r1.yzx;
  r2.xyz = cb0[49].zxy * r1.zxy + -r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r3.xyz = r2.yzx * r1.zxy;
  r3.xyz = r1.yzx * r2.zxy + -r3.xyz;
  r4.xy = -cb1[1].xy + v9.xy;
  r4.xy = r4.xy * cb1[2].zw + float2(-0.5,-0.5);
  r4.xy = v9.ww * r4.xy;
  r4.z = v9.w;
  r4.xyw = float3(2,-2,1) * r4.xyz;
  r0.xyz = -cb0[56].xyz + r0.xyz;
  r5.xy = cb4[7].xx * v3.xy;
  r5.xy = t4.Sample(s2_s, r5.xy).xy;
  r5.xy = r5.xy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r5.xy, r5.xy);
  r0.w = 1 + -r0.w;
  r0.w = max(0, r0.w);
  r5.z = sqrt(r0.w);
  r6.x = cb4[7].y;
  r6.z = 1;
  r5.xyz = r6.xxz * r5.xyz;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = sqrt(r0.w);
  r5.xyz = r5.xyz / r0.www;
  r5.xyz = r5.xyz * cb1[7].www + cb1[7].xyz;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r5.xyz * r0.www;
  r3.xyz = r5.yyy * r3.xyz;
  r2.xyz = r5.xxx * r2.xyz + r3.xyz;
  r1.xyz = r5.zzz * r1.xyz + r2.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = saturate(cb4[6].xyz * cb4[3].xyz);
  r0.w = t5.Sample(s3_s, v3.xy).w;
  r0.w = max(9.99999997e-007, abs(r0.w));
  r0.w = log2(r0.w);
  r0.w = cb4[7].z * r0.w;
  r0.w = exp2(r0.w);
  r0.w = v2.w * r0.w;
  r3.xy = r4.xy / r4.ww;
  r3.xy = r3.xy * cb0[52].xy + cb0[52].wz;
  r1.w = t6.SampleLevel(s4_s, r3.xy, 0).x;
  r1.w = r1.w * cb0[51].z + -cb0[51].w;
  r1.w = 1 / r1.w;
  r1.w = -r4.z * 1 + r1.w;
  r1.w = saturate(r1.w / cb4[8].x);
  r0.w = r1.w * r0.w;
  r1.w = saturate(r4.w / cb4[8].y);
  r0.w = r1.w * r0.w;
  r5.w = saturate(cb4[8].z * r0.w);
  r2.xyz = r2.xyz * cb1[5].www + cb1[5].xyz;
  r6.xyz = cb1[6].www * float3(0.0399999991,0.0399999991,0.0399999991) + cb1[6].xyz;
  r0.w = t3.Sample(s1_s, r3.xy).x;
  r0.w = -1 + r0.w;
  r0.w = cmp(abs(r0.w) == 0.000000);
  if (r0.w != 0) {
    r3.xyz = -cb0[53].xyz + r0.xyz;
    r7.xyz = cb0[1].xyw * r3.yyy;
    r7.xyz = r3.xxx * cb0[0].xyw + r7.xyz;
    r7.xyz = r3.zzz * cb0[2].xyw + r7.xyz;
    r7.xyz = cb0[3].xyw + r7.xyz;
    r7.xy = r7.xy / r7.zz;
    r0.w = dot(r3.xyz, r3.xyz);
    r0.w = sqrt(r0.w);
    r0.w = saturate(cb3[10].z * r0.w);
    r0.w = log2(r0.w);
    r0.w = cb3[11].x * r0.w;
    r7.z = exp2(r0.w);
    r3.xyz = r7.xyz * float3(0.5,-0.5,1) + float3(0.5,0.5,0);
    r3.xyz = r3.xyz * cb3[15].xyz + cb3[14].xyz;
    r3.xyzw = t7.SampleLevel(s0_s, r3.xyz, 0).xyzw;
  } else {
    r0.w = -cb3[15].w + r0.z;
    r4.x = saturate(cb3[16].x * r0.w);
    r4.y = 0;
    r7.xyz = t0.SampleLevel(s0_s, r4.xy, 0).xyz;
    r8.xyz = cb3[23].xyz + -r7.xyz;
    r7.xyz = cb3[22].xxx * r8.xyz + r7.xyz;
    r8.xyz = t1.SampleLevel(s0_s, r4.xy, 0).yzw;
    r9.xyz = cb3[24].yzw + -r8.xyz;
    r8.xyz = cb3[22].yyy * r9.xyz + r8.xyz;
    r8.xz = float2(1,1) / r8.xz;
    r9.xyzw = t2.SampleLevel(s0_s, r4.xy, 0).xyzw;
    r10.xyzw = cb3[25].xyzw + -r9.xyzw;
    r9.xyzw = cb3[22].yyyy * r10.xyzw + r9.xyzw;
    r0.w = saturate(r8.x * r4.w);
    r0.w = log2(r0.w);
    r0.w = r9.x * r0.w;
    r0.w = exp2(r0.w);
    r1.w = r4.z * 1 + -r8.y;
    r1.w = saturate(r1.w * r8.z);
    r1.w = log2(r1.w);
    r1.w = r9.y * r1.w;
    r1.w = exp2(r1.w);
    r1.w = r1.w * r9.w;
    r0.w = saturate(r0.w * r9.z + r1.w);
    r3.xyz = r7.xyz * r0.www;
    r3.w = 1 + -r0.w;
  }
  r0.w = dot(v7.xyz, float3(0.300000012,0.589999974,0.109999999));
  r4.xyz = v7.xyz / r0.www;
  r7.yzw = v8.xyz * r4.xxx;
  r8.yzw = v8.xyz * r4.yyy;
  r4.yzw = v8.xyz * r4.zzz;
  r1.yzw = float3(-1.02332771,1.02332771,-1.02332771) * r1.xyz;
  r7.x = v7.x;
  r1.x = 0.886227608;
  r7.x = dot(r7.xyzw, r1.xyzw);
  r8.x = v7.y;
  r7.y = dot(r8.xyzw, r1.xyzw);
  r4.x = v7.z;
  r7.z = dot(r4.xyzw, r1.xyzw);
  r1.xyz = max(float3(0,0,0), r7.xyz);
  r4.xyz = r2.xyz * r1.xyz;
  r6.xyz = r6.xyz + r2.xyz;
  r1.xyz = -r2.xyz * r1.xyz + r6.xyz;
  r1.xyz = cb1[13].xxx * r1.xyz + r4.xyz;
  r5.xyz = max(float3(0,0,0), cb4[2].xyz);
  r0.w = cmp(0 < cb1[9].x);
  if (r0.w != 0) {
    r2.xyz = -cb2[8].xyz + r0.xyz;
    r4.xyz = float3(1,1,1) + cb2[9].xyz;
    r2.xyz = cmp(r4.xyz < abs(r2.xyz));
    r0.w = (int)r2.y | (int)r2.x;
    r0.w = (int)r2.z | (int)r0.w;
    r0.x = dot(r0.xyz, float3(0.577000022,0.577000022,0.577000022));
    r0.x = 0.00200000009 * r0.x;
    r0.x = frac(r0.x);
    r0.x = cmp(0.5 < r0.x);
    r2.yzw = r0.xxx ? float3(0,1,1) : float3(1,1,0);
    r2.x = 1;
    r5.xyzw = r0.wwww ? r2.yzwx : r5.xyzw;
    o0.w = r5.w;
  } else {
    o0.w = r5.w;
  }
  r0.xyz = r5.xyz + r1.xyz;
  o0.xyz = r0.xyz * r3.www + r3.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Thu Jan 05 00:34:09 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float       
// TEXCOORD                11   xyzw        1     NONE   float       
// TEXCOORD                 2   xyzw        2     NONE   float      w
// TEXCOORD                 3   xyzw        3     NONE   float   xy  
// PARTICLE_POSITION        0   xyzw        4     NONE   float   xyzw
// PARTICLE_LIGHTING_OFFSET     0   xyz         5     NONE   float       
// TEXCOORD                 7   xyzw        6     NONE   float       
// TEXCOORD                12   xyz         7     NONE   float   xyz 
// TEXCOORD                13   xyz         8     NONE   float   xyz 
// SV_Position              0   xyzw        9      POS   float   xyzw
// SV_IsFrontFace           0   x          10    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[57], immediateIndexed
dcl_constantbuffer cb1[14], immediateIndexed
dcl_constantbuffer cb2[10], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture3d (float,float,float,float) t7
dcl_input_ps linear v2.w
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xyz
dcl_input_ps_siv linear noperspective v9.xyzw, position
dcl_output o0.xyzw
dcl_temps 11
mul r0.xyzw, v9.yyyy, cb0[37].xyzw
mad r0.xyzw, v9.xxxx, cb0[36].xyzw, r0.xyzw
mad r0.xyzw, v9.zzzz, cb0[38].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb0[39].xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r1.xyz, r0.yzxy, cb0[53].yzxy
add r2.xyz, r1.zxyz, -v4.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
mad r0.w, v4.w, v4.w, -r0.w
lt r1.w, l(0.000000), r0.w
sqrt r0.w, r0.w
mad r1.xyz, -cb0[48].yzxy, r0.wwww, r1.xyzx
add r1.xyz, r1.xyzx, -v4.yzxy
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
movc r1.xyz, r1.wwww, r1.xyzx, l(0,1.000000,0,0)
mul r2.xyz, r1.yzxy, cb0[49].xyzx
mad r2.xyz, cb0[49].zxyz, r1.zxyz, -r2.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mul r3.xyz, r1.zxyz, r2.yzxy
mad r3.xyz, r1.yzxy, r2.zxyz, -r3.xyzx
add r4.xy, v9.xyxx, -cb1[1].xyxx
mad r4.xy, r4.xyxx, cb1[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r4.xy, r4.xyxx, v9.wwww
mov r4.z, v9.w
mul r4.xyw, r4.xyxz, l(2.000000, -2.000000, 0.000000, 1.000000)
add r0.xyz, r0.xyzx, -cb0[56].xyzx
mul r5.xy, v3.xyxx, cb4[7].xxxx
sample_indexable(texture2d)(float,float,float,float) r5.xy, r5.xyxx, t4.xyzw, s2
mad r5.xy, r5.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r5.xyxx, r5.xyxx
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
sqrt r5.z, r0.w
mov r6.x, cb4[7].y
mov r6.z, l(1.000000)
mul r5.xyz, r5.xyzx, r6.xxzx
dp3 r0.w, r5.xyzx, r5.xyzx
sqrt r0.w, r0.w
div r5.xyz, r5.xyzx, r0.wwww
mad r5.xyz, r5.xyzx, cb1[7].wwww, cb1[7].xyzx
dp3 r0.w, r5.xyzx, r5.xyzx
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, r5.xyzx
mul r3.xyz, r3.xyzx, r5.yyyy
mad r2.xyz, r5.xxxx, r2.xyzx, r3.xyzx
mad r1.xyz, r5.zzzz, r1.xyzx, r2.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mul_sat r2.xyz, cb4[3].xyzx, cb4[6].xyzx
sample_indexable(texture2d)(float,float,float,float) r0.w, v3.xyxx, t5.xyzw, s3
max r0.w, |r0.w|, l(0.000001)
log r0.w, r0.w
mul r0.w, r0.w, cb4[7].z
exp r0.w, r0.w
mul r0.w, r0.w, v2.w
div r3.xy, r4.xyxx, r4.wwww
mad r3.xy, r3.xyxx, cb0[52].xyxx, cb0[52].wzww
sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t6.yzwx, s4, l(0.000000)
mad r1.w, r1.w, cb0[51].z, -cb0[51].w
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mad r1.w, -r4.z, l(1.000000), r1.w
div_sat r1.w, r1.w, cb4[8].x
mul r0.w, r0.w, r1.w
div_sat r1.w, r4.w, cb4[8].y
mul r0.w, r0.w, r1.w
mul_sat r5.w, r0.w, cb4[8].z
mad r2.xyz, r2.xyzx, cb1[5].wwww, cb1[5].xyzx
mad r6.xyz, cb1[6].wwww, l(0.040000, 0.040000, 0.040000, 0.000000), cb1[6].xyzx
sample_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t3.yzwx, s1
add r0.w, r0.w, l(-1.000000)
eq r0.w, |r0.w|, l(0.000000)
if_nz r0.w
  add r3.xyz, r0.xyzx, -cb0[53].xyzx
  mul r7.xyz, r3.yyyy, cb0[1].xywx
  mad r7.xyz, r3.xxxx, cb0[0].xywx, r7.xyzx
  mad r7.xyz, r3.zzzz, cb0[2].xywx, r7.xyzx
  add r7.xyz, r7.xyzx, cb0[3].xywx
  div r7.xy, r7.xyxx, r7.zzzz
  dp3 r0.w, r3.xyzx, r3.xyzx
  sqrt r0.w, r0.w
  mul_sat r0.w, r0.w, cb3[10].z
  log r0.w, r0.w
  mul r0.w, r0.w, cb3[11].x
  exp r7.z, r0.w
  mad r3.xyz, r7.xyzx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r3.xyz, r3.xyzx, cb3[15].xyzx, cb3[14].xyzx
  sample_l_indexable(texture3d)(float,float,float,float) r3.xyzw, r3.xyzx, t7.xyzw, s0, l(0.000000)
else 
  add r0.w, r0.z, -cb3[15].w
  mul_sat r4.x, r0.w, cb3[16].x
  mov r4.y, l(0)
  sample_l_indexable(texture2d)(float,float,float,float) r7.xyz, r4.xyxx, t0.xyzw, s0, l(0.000000)
  add r8.xyz, -r7.xyzx, cb3[23].xyzx
  mad r7.xyz, cb3[22].xxxx, r8.xyzx, r7.xyzx
  sample_l_indexable(texture2d)(float,float,float,float) r8.xyz, r4.xyxx, t1.yzwx, s0, l(0.000000)
  add r9.xyz, -r8.xyzx, cb3[24].yzwy
  mad r8.xyz, cb3[22].yyyy, r9.xyzx, r8.xyzx
  div r8.xz, l(1.000000, 1.000000, 1.000000, 1.000000), r8.xxzx
  sample_l_indexable(texture2d)(float,float,float,float) r9.xyzw, r4.xyxx, t2.xyzw, s0, l(0.000000)
  add r10.xyzw, -r9.xyzw, cb3[25].xyzw
  mad r9.xyzw, cb3[22].yyyy, r10.xyzw, r9.xyzw
  mul_sat r0.w, r4.w, r8.x
  log r0.w, r0.w
  mul r0.w, r0.w, r9.x
  exp r0.w, r0.w
  mad r1.w, r4.z, l(1.000000), -r8.y
  mul_sat r1.w, r8.z, r1.w
  log r1.w, r1.w
  mul r1.w, r1.w, r9.y
  exp r1.w, r1.w
  mul r1.w, r9.w, r1.w
  mad_sat r0.w, r0.w, r9.z, r1.w
  mul r3.xyz, r0.wwww, r7.xyzx
  add r3.w, -r0.w, l(1.000000)
endif 
dp3 r0.w, v7.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
div r4.xyz, v7.xyzx, r0.wwww
mul r7.yzw, r4.xxxx, v8.xxyz
mul r8.yzw, r4.yyyy, v8.xxyz
mul r4.yzw, r4.zzzz, v8.xxyz
mul r1.yzw, r1.xxyz, l(0.000000, -1.02332771, 1.02332771, -1.02332771)
mov r7.x, v7.x
mov r1.x, l(0.886227608)
dp4 r7.x, r7.xyzw, r1.xyzw
mov r8.x, v7.y
dp4 r7.y, r8.xyzw, r1.xyzw
mov r4.x, v7.z
dp4 r7.z, r4.xyzw, r1.xyzw
max r1.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r4.xyz, r1.xyzx, r2.xyzx
add r6.xyz, r2.xyzx, r6.xyzx
mad r1.xyz, -r2.xyzx, r1.xyzx, r6.xyzx
mad r1.xyz, cb1[13].xxxx, r1.xyzx, r4.xyzx
max r5.xyz, cb4[2].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb1[9].x
if_nz r0.w
  add r2.xyz, r0.xyzx, -cb2[8].xyzx
  add r4.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r2.xyz, r4.xyzx, |r2.xyzx|
  or r0.w, r2.y, r2.x
  or r0.w, r2.z, r0.w
  dp3 r0.x, r0.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r0.x, r0.x, l(0.002000)
  frc r0.x, r0.x
  lt r0.x, l(0.500000), r0.x
  movc r2.yzw, r0.xxxx, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r2.x, l(1.000000)
  movc r5.xyzw, r0.wwww, r2.yzwx, r5.xyzw
  mov o0.w, r5.w
else 
  mov o0.w, r5.w
endif 
add r0.xyz, r1.xyzx, r5.xyzx
mad o0.xyz, r0.xyzx, r3.wwww, r3.xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
