// cliffs after whirlpool
// ---- Created with 3Dmigoto v1.2.51 on Sun Dec 25 06:49:55 2016
Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb5 : register(b5)
{
  float4 cb5[10];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[2];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[12];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[14];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[60];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[14];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3 : VELOCITY_PREV_POS0,
  float3 v4 : TEXCOORD9,
  float4 v5 : SV_Position0,
  uint v6 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4,
  out float4 o5 : SV_Target5)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb2[1].xy + v5.xy;
  r1.xy = r1.xy * cb2[2].zw + float2(-0.5,-0.5);
  r1.xy = v5.ww * r1.xy;
  r1.z = v5.w;
  r1.xyz = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb1[37].xyzw * v5.yyyy;
  r2.xyzw = v5.xxxx * cb1[36].xyzw + r2.xyzw;
  r2.xyzw = v5.zzzz * cb1[38].xyzw + r2.xyzw;
  r2.xyzw = cb1[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

float4 s = StereoParams.Load(0);
matrix TranslatedWorldToClip = MATRIX(cb1, 0);
matrix ClipToTranslatedWorld = MATRIX(cb1, 32);
float4 t = mul(r2.xyz, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r2.xyz = mul(t, ClipToTranslatedWorld);

  r2.xyz = -cb1[56].xyz + r2.xyz;
  r3.xyzw = -cb1[56].xzyz + v4.xzyz;
  r4.xyz = t2.Sample(s1_s, v2.xy).xyz;
  r4.xyz = r4.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r5.xyz = cb3[1].xyz * -r4.xxx;
  r4.xzw = r4.zzz * cb3[0].xyz + r5.xyz;
  r4.xyz = r4.yyy * cb3[2].xyz + r4.xzw;
  r0.w = 0.00999999978 * cb3[8].w;
  r5.xy = v2.xy * r0.ww;
  r5.xy = cb5[6].yy * r5.xy;
  r5.xy = t3.Sample(s2_s, r5.xy).xy;
  r5.xz = r5.xy * float2(2,2) + float2(-1,-1);
  r5.xz = cb5[6].xx * r5.xz;
  r6.xyz = r5.zzz * r0.xyz;
  r5.xzw = r5.xxx * v0.xyz + r6.xyz;
  r4.xyz = r5.xzw + r4.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = sqrt(r0.w);
  r0.w = r4.z / r0.w;
  r0.w = 1 + r0.w;
  r1.w = saturate(cb5[6].z);
  r1.w = 1 + -r1.w;
  r0.w = r0.w * 0.5 + -r1.w;
  r0.w = saturate(ceil(r0.w));
  r4.x = v0.z;
  r4.y = r0.z;
  r4.z = v1.z;
  r5.xzw = float3(-0,-0,-1) + r4.xyz;
  r5.xzw = r0.www * r5.xzw + float3(0,0,1);
  r6.xy = -cb4[0].xy + r2.xy;
  r6.xy = cb4[0].zw * r6.xy;
  r1.w = t1.SampleLevel(s0_s, r6.xy, 0).x;
  r1.w = r1.w * cb4[1].x + cb4[1].y;
  r1.w = r2.z + -r1.w;
  r6.zw = r2.xy / cb5[6].ww;
  r2.w = t4.Sample(s3_s, r6.zw).z;
  r2.w = r2.w * cb5[7].x + cb5[7].y;
  r1.w = saturate(abs(r1.w) / r2.w);
  r1.w = 1 + -r1.w;
  r2.w = cb5[7].z + -cb5[7].w;
  r2.w = saturate(r5.y * r2.w + cb5[7].w);
  r2.w = 1 + -r2.w;
  r1.w = -r2.w + r1.w;
  r1.w = ceil(r1.w);
  r4.xyz = -r5.xzw + r4.xyz;
  r4.xyz = r1.www * r4.xyz + r5.xzw;
  r4.xyz = r4.xyz * cb2[7].www + cb2[7].xyz;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = rsqrt(r2.w);
  r4.xyz = r4.xyz * r2.www;
  r0.xyz = r4.yyy * r0.xyz;
  r0.xyz = r4.xxx * v0.xyz + r0.xyz;
  r0.xyz = r4.zzz * v1.xyz + r0.xyz;
  r2.w = dot(r0.xyz, r0.xyz);
  r2.w = rsqrt(r2.w);
  r0.xyz = r2.www * r0.xyz;
  r4.xyz = t5.Sample(s4_s, v2.xy).xyz;
  r5.xyz = cb5[5].xyz * r4.xyz;
  r4.xyz = -cb5[5].xyz * r4.xyz + float3(1,1,1);
  r4.xyz = r4.xyz + r4.xyz;
  r7.xyzw = r3.xyzw / cb5[8].xxxx;
  r8.xyz = t6.Sample(s5_s, r7.xy).xyz;
  r7.xyz = t6.Sample(s5_s, r7.zw).xyz;
  r3.yw = max(float2(9.99999997e-007,9.99999997e-007), abs(v1.xz));
  r3.yw = log2(r3.yw);
  r3.yw = float2(1.5,1.5) * r3.yw;
  r3.yw = exp2(r3.yw);
  r3.yw = float2(1.5,1.5) * r3.yw;
  r7.xyz = r7.xyz + -r8.xyz;
  r7.xyz = r3.yyy * r7.xyz + r8.xyz;
  r3.xy = r3.xz / cb5[8].xx;
  r3.xyz = t7.Sample(s6_s, r3.xy).xyz;
  r3.xyz = r3.xyz + -r7.xyz;
  r3.xyz = r3.www * r3.xyz + r7.xyz;
  r7.xyz = float3(1,1,1) + -r3.xyz;
  r4.xyz = -r4.xyz * r7.xyz + float3(1,1,1);
  r3.xyz = r5.xyz * r3.xyz;
  r3.xyz = r3.xyz + r3.xyz;
  r5.xyz = cmp(r5.xyz >= float3(0.5,0.5,0.5));
  r3.xyz = r5.xyz ? r4.xyz : r3.xyz;
  r4.xyz = t0.SampleLevel(s0_s, r6.xy, 0).xyz;
  r5.xyz = r4.xyz + -r3.xyz;
  r5.xyz = r0.www * r5.xyz + r3.xyz;
  r4.xyz = -r5.xyz + r4.xyz;
  r4.xyz = r1.www * r4.xyz + r5.xyz;
  r4.xyz = saturate(cb5[2].xyz * r4.xyz);
  r5.xy = r0.ww * -cb5[8].yz + cb5[8].yz;
  r5.xy = saturate(r1.ww * -r5.xy + r5.xy);
  r2.w = 1 + -cb5[8].w;
  r2.w = r0.w * r2.w + cb5[8].w;
  r3.w = 1 + -r2.w;
  r2.w = saturate(r1.w * r3.w + r2.w);
  r3.w = 1 + -cb5[9].x;
  r3.w = r0.w * r3.w + cb5[9].x;
  r4.w = 1 + -r3.w;
  r6.w = saturate(r1.w * r4.w + r3.w);
  r3.w = cmp(cb0[13].x != 0.000000);
  r4.w = cmp(0.00100000005 < abs(cb0[13].x));
  r3.w = r3.w ? r4.w : 0;
  r5.zw = floor(v5.xy);
  r4.w = dot(r5.zw, float2(347.834503,3343.28369));
  r4.w = cos(r4.w);
  r4.w = 1000 * r4.w;
  r4.w = frac(r4.w);
  r5.z = cmp(cb0[13].x < 0);
  r5.w = 1 + cb0[13].x;
  r5.w = cmp(r4.w < r5.w);
  r4.w = cmp(cb0[13].x < r4.w);
  r4.w = r5.z ? r5.w : r4.w;
  r4.w = cmp((int)r4.w == 0);
  r3.w = r3.w ? r4.w : 0;
  if (r3.w != 0) discard;
  o2.z = r2.w * cb2[8].y + cb2[8].x;
  r3.xyz = cb5[9].yyy * r3.xyz;
  r3.xyz = r0.www * -r3.xyz + r3.xyz;
  r3.xyz = saturate(r1.www * -r3.xyz + r3.xyz);
  r3.xyz = saturate(r3.xyz * cb2[5].www + cb2[5].xyz);
  r7.xyz = -r4.xyz * r5.xxx + r4.xyz;
  r0.w = 0.0799999982 * r5.y;
  r8.xyz = -r5.yyy * float3(0.0799999982,0.0799999982,0.0799999982) + r4.xyz;
  r8.xyz = r5.xxx * r8.xyz + r0.www;
  r7.xyz = r7.xyz * cb2[5].www + cb2[5].xyz;
  r8.xyz = r8.xyz * cb2[6].www + cb2[6].xyz;
  r7.xyz = r8.xyz + r7.xyz;
  r6.xyz = max(float3(0,0,0), cb5[1].xyz);
  r0.w = cmp(0 < cb2[9].x);
  if (r0.w != 0) {
    r8.xyz = -cb3[8].xyz + r2.xyz;
    r9.xyz = float3(1,1,1) + cb3[9].xyz;
    r8.xyz = cmp(r9.xyz < abs(r8.xyz));
    r0.w = (int)r8.y | (int)r8.x;
    r0.w = (int)r8.z | (int)r0.w;
    r1.w = dot(r2.xyz, float3(0.577000022,0.577000022,0.577000022));
    r1.w = 0.00200000009 * r1.w;
    r1.w = frac(r1.w);
    r1.w = cmp(0.5 < r1.w);
    r2.yzw = r1.www ? float3(0,1,1) : float3(1,1,0);
    r2.x = 1;
    r6.xyzw = r0.wwww ? r2.yzwx : r6.xyzw;
    o5.w = r6.w;
  } else {
    o5.w = r6.w;
  }
  o0.xyz = cb2[13].xxx * r7.xyz + r6.xyz;
  o5.xyz = sqrt(r3.xyz);
  r1.xy = r1.xy / r1.zz;
  r1.xy = -cb1[26].xy + r1.xy;
  r1.zw = v3.xy / v3.ww;
  r1.zw = -cb1[59].xy + r1.zw;
  r1.xy = r1.xy + -r1.zw;
  r1.xy = r1.xy * float2(0.249500006,0.249500006) + float2(0.499992371,0.499992371);
  o4.xy = v3.zz * r1.xy;
  o4.zw = float2(0,0);
  o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.w = 0;
  o1.w = cb3[11].x;
  o2.w = 0.13333334;
  o2.xy = r5.xy;
  o3.xyz = r4.xyz;
  o3.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sun Dec 25 06:49:55 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// VELOCITY_PREV_POS        0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 9   xyz         4     NONE   float   xyz 
// SV_Position              0   xyzw        5      POS   float   xyzw
// SV_IsFrontFace           0   x           6    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
// SV_Target                5   xyzw        5   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[14], immediateIndexed
dcl_constantbuffer cb1[60], immediateIndexed
dcl_constantbuffer cb2[14], immediateIndexed
dcl_constantbuffer cb3[12], immediateIndexed
dcl_constantbuffer cb4[2], immediateIndexed
dcl_constantbuffer cb5[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyz
dcl_input_ps_siv linear noperspective v5.xyzw, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 10
mul r0.xyz, v0.yzxy, v1.zxyz
mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v1.wwww
add r1.xy, v5.xyxx, -cb2[1].xyxx
mad r1.xy, r1.xyxx, cb2[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.xy, r1.xyxx, v5.wwww
mov r1.z, v5.w
mul r1.xyz, r1.xyzx, l(2.000000, -2.000000, 1.000000, 0.000000)
mul r2.xyzw, v5.yyyy, cb1[37].xyzw
mad r2.xyzw, v5.xxxx, cb1[36].xyzw, r2.xyzw
mad r2.xyzw, v5.zzzz, cb1[38].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb1[39].xyzw
div r2.xyz, r2.xyzx, r2.wwww
add r2.xyz, r2.xyzx, -cb1[56].xyzx
add r3.xyzw, v4.xzyz, -cb1[56].xzyz
sample_indexable(texture2d)(float,float,float,float) r4.xyz, v2.xyxx, t2.xyzw, s1
mad r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r5.xyz, -r4.xxxx, cb3[1].xyzx
mad r4.xzw, r4.zzzz, cb3[0].xxyz, r5.xxyz
mad r4.xyz, r4.yyyy, cb3[2].xyzx, r4.xzwx
mul r0.w, cb3[8].w, l(0.010000)
mul r5.xy, r0.wwww, v2.xyxx
mul r5.xy, r5.xyxx, cb5[6].yyyy
sample_indexable(texture2d)(float,float,float,float) r5.xy, r5.xyxx, t3.xyzw, s2
mad r5.xz, r5.xxyx, l(2.000000, 0.000000, 2.000000, 0.000000), l(-1.000000, 0.000000, -1.000000, 0.000000)
mul r5.xz, r5.xxzx, cb5[6].xxxx
mul r6.xyz, r0.xyzx, r5.zzzz
mad r5.xzw, r5.xxxx, v0.xxyz, r6.xxyz
add r4.xyz, r4.xyzx, r5.xzwx
dp3 r0.w, r4.xyzx, r4.xyzx
sqrt r0.w, r0.w
div r0.w, r4.z, r0.w
add r0.w, r0.w, l(1.000000)
mov_sat r1.w, cb5[6].z
add r1.w, -r1.w, l(1.000000)
mad r0.w, r0.w, l(0.500000), -r1.w
round_pi_sat r0.w, r0.w
mov r4.x, v0.z
mov r4.y, r0.z
mov r4.z, v1.z
add r5.xzw, r4.xxyz, l(-0.000000, 0.000000, -0.000000, -1.000000)
mad r5.xzw, r0.wwww, r5.xxzw, l(0.000000, 0.000000, 0.000000, 1.000000)
add r6.xy, r2.xyxx, -cb4[0].xyxx
mul r6.xy, r6.xyxx, cb4[0].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r1.w, r6.xyxx, t1.yzwx, s0, l(0.000000)
mad r1.w, r1.w, cb4[1].x, cb4[1].y
add r1.w, -r1.w, r2.z
div r6.zw, r2.xxxy, cb5[6].wwww
sample_indexable(texture2d)(float,float,float,float) r2.w, r6.zwzz, t4.xywz, s3
mad r2.w, r2.w, cb5[7].x, cb5[7].y
div_sat r1.w, |r1.w|, r2.w
add r1.w, -r1.w, l(1.000000)
add r2.w, -cb5[7].w, cb5[7].z
mad_sat r2.w, r5.y, r2.w, cb5[7].w
add r2.w, -r2.w, l(1.000000)
add r1.w, r1.w, -r2.w
round_pi r1.w, r1.w
add r4.xyz, r4.xyzx, -r5.xzwx
mad r4.xyz, r1.wwww, r4.xyzx, r5.xzwx
mad r4.xyz, r4.xyzx, cb2[7].wwww, cb2[7].xyzx
dp3 r2.w, r4.xyzx, r4.xyzx
rsq r2.w, r2.w
mul r4.xyz, r2.wwww, r4.xyzx
mul r0.xyz, r0.xyzx, r4.yyyy
mad r0.xyz, r4.xxxx, v0.xyzx, r0.xyzx
mad r0.xyz, r4.zzzz, v1.xyzx, r0.xyzx
dp3 r2.w, r0.xyzx, r0.xyzx
rsq r2.w, r2.w
mul r0.xyz, r0.xyzx, r2.wwww
sample_indexable(texture2d)(float,float,float,float) r4.xyz, v2.xyxx, t5.xyzw, s4
mul r5.xyz, r4.xyzx, cb5[5].xyzx
mad r4.xyz, -cb5[5].xyzx, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r4.xyz, r4.xyzx, r4.xyzx
div r7.xyzw, r3.xyzw, cb5[8].xxxx
sample_indexable(texture2d)(float,float,float,float) r8.xyz, r7.xyxx, t6.xyzw, s5
sample_indexable(texture2d)(float,float,float,float) r7.xyz, r7.zwzz, t6.xyzw, s5
max r3.yw, |v1.xxxz|, l(0.000000, 0.000001, 0.000000, 0.000001)
log r3.yw, r3.yyyw
mul r3.yw, r3.yyyw, l(0.000000, 1.500000, 0.000000, 1.500000)
exp r3.yw, r3.yyyw
mul r3.yw, r3.yyyw, l(0.000000, 1.500000, 0.000000, 1.500000)
add r7.xyz, -r8.xyzx, r7.xyzx
mad r7.xyz, r3.yyyy, r7.xyzx, r8.xyzx
div r3.xy, r3.xzxx, cb5[8].xxxx
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t7.xyzw, s6
add r3.xyz, -r7.xyzx, r3.xyzx
mad r3.xyz, r3.wwww, r3.xyzx, r7.xyzx
add r7.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r4.xyz, -r4.xyzx, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r3.xyz, r3.xyzx, r5.xyzx
add r3.xyz, r3.xyzx, r3.xyzx
ge r5.xyz, r5.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
movc r3.xyz, r5.xyzx, r4.xyzx, r3.xyzx
sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r6.xyxx, t0.xyzw, s0, l(0.000000)
add r5.xyz, -r3.xyzx, r4.xyzx
mad r5.xyz, r0.wwww, r5.xyzx, r3.xyzx
add r4.xyz, r4.xyzx, -r5.xyzx
mad r4.xyz, r1.wwww, r4.xyzx, r5.xyzx
mul_sat r4.xyz, r4.xyzx, cb5[2].xyzx
mad r5.xy, r0.wwww, -cb5[8].yzyy, cb5[8].yzyy
mad_sat r5.xy, r1.wwww, -r5.xyxx, r5.xyxx
add r2.w, -cb5[8].w, l(1.000000)
mad r2.w, r0.w, r2.w, cb5[8].w
add r3.w, -r2.w, l(1.000000)
mad_sat r2.w, r1.w, r3.w, r2.w
add r3.w, -cb5[9].x, l(1.000000)
mad r3.w, r0.w, r3.w, cb5[9].x
add r4.w, -r3.w, l(1.000000)
mad_sat r6.w, r1.w, r4.w, r3.w
ne r3.w, cb0[13].x, l(0.000000)
lt r4.w, l(0.001000), |cb0[13].x|
and r3.w, r3.w, r4.w
round_ni r5.zw, v5.xxxy
dp2 r4.w, r5.zwzz, l(347.834503, 3343.283691, 0.000000, 0.000000)
sincos null, r4.w, r4.w
mul r4.w, r4.w, l(1000.000000)
frc r4.w, r4.w
lt r5.z, cb0[13].x, l(0.000000)
add r5.w, cb0[13].x, l(1.000000)
lt r5.w, r4.w, r5.w
lt r4.w, cb0[13].x, r4.w
movc r4.w, r5.z, r5.w, r4.w
ieq r4.w, r4.w, l(0)
and r3.w, r3.w, r4.w
discard_nz r3.w
mad o2.z, r2.w, cb2[8].y, cb2[8].x
mul r3.xyz, r3.xyzx, cb5[9].yyyy
mad r3.xyz, r0.wwww, -r3.xyzx, r3.xyzx
mad_sat r3.xyz, r1.wwww, -r3.xyzx, r3.xyzx
mad_sat r3.xyz, r3.xyzx, cb2[5].wwww, cb2[5].xyzx
mad r7.xyz, -r4.xyzx, r5.xxxx, r4.xyzx
mul r0.w, r5.y, l(0.080000)
mad r8.xyz, -r5.yyyy, l(0.080000, 0.080000, 0.080000, 0.000000), r4.xyzx
mad r8.xyz, r5.xxxx, r8.xyzx, r0.wwww
mad r7.xyz, r7.xyzx, cb2[5].wwww, cb2[5].xyzx
mad r8.xyz, r8.xyzx, cb2[6].wwww, cb2[6].xyzx
add r7.xyz, r7.xyzx, r8.xyzx
max r6.xyz, cb5[1].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb2[9].x
if_nz r0.w
  add r8.xyz, r2.xyzx, -cb3[8].xyzx
  add r9.xyz, cb3[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r8.xyz, r9.xyzx, |r8.xyzx|
  or r0.w, r8.y, r8.x
  or r0.w, r8.z, r0.w
  dp3 r1.w, r2.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.w, r1.w, l(0.002000)
  frc r1.w, r1.w
  lt r1.w, l(0.500000), r1.w
  movc r2.yzw, r1.wwww, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r2.x, l(1.000000)
  movc r6.xyzw, r0.wwww, r2.yzwx, r6.xyzw
  mov o5.w, r6.w
else 
  mov o5.w, r6.w
endif 
mad o0.xyz, cb2[13].xxxx, r7.xyzx, r6.xyzx
sqrt o5.xyz, r3.xyzx
div r1.xy, r1.xyxx, r1.zzzz
add r1.xy, r1.xyxx, -cb1[26].xyxx
div r1.zw, v3.xxxy, v3.wwww
add r1.zw, r1.zzzw, -cb1[59].xxxy
add r1.xy, -r1.zwzz, r1.xyxx
mad r1.xy, r1.xyxx, l(0.249500, 0.249500, 0.000000, 0.000000), l(0.499992371, 0.499992371, 0.000000, 0.000000)
mul o4.xy, r1.xyxx, v3.zzzz
mov o4.zw, l(0,0,0,0)
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0)
mov o1.w, cb3[11].x
mov o2.w, l(0.133333340)
mov o2.xy, r5.xyxx
mov o3.xyz, r4.xyzx
mov o3.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
