// "OpaqueOceanSurface" transition between transparent and opaque Ocean at screen depth

// ---- Created with 3Dmigoto v1.2.42 on Fri Sep 30 07:38:43 2016
Texture3D<float4> t10 : register(t10);

Texture3D<float4> t9 : register(t9);

Texture3D<float4> t8 : register(t8);

Texture3D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture3D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s10_s : register(s10);

SamplerState s9_s : register(s9);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb5 : register(b5)
{
  float4 cb5[28];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[30];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[12];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[14];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[57];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[13];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float3 v2 : TEXCOORD9,
  float4 v3 : SV_Position0,
  uint v4 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = -cb2[1].xy + v3.xy;
  r0.xy = r0.xy * cb2[2].zw + float2(-0.5,-0.5);
  r0.xy = v3.ww * r0.xy;
  r0.z = v3.w;
  r0.xyw = float3(2,-2,1) * r0.xyz;
  r1.xyzw = cb1[37].xyzw * v3.yyyy;
  r1.xyzw = v3.xxxx * cb1[36].xyzw + r1.xyzw;
  r1.xyzw = v3.zzzz * cb1[38].xyzw + r1.xyzw;
  r1.xyzw = cb1[39].xyzw + r1.xyzw;
  r1.xyz = r1.xyz / r1.www;

// Fix depth of transition from opaque to transparent in Ocean surface from below:
// Common SVPositionToTranslatedWorld fix:
float4 s = StereoParams.Load(0);
matrix TranslatedWorldToClip = MATRIX(cb1, 0);
matrix ClipToTranslatedWorld = MATRIX(cb1, 32);
float4 t = mul(r1.xyz, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r1.xyz = mul(t, ClipToTranslatedWorld);

  r2.xyz = -cb1[56].xyz + r1.xyz;
  r3.xy = -cb1[56].xy + v2.xy;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = sqrt(r1.w);
  r1.xyz = -r1.xyz / r1.www;
  r1.w = cb3[9].w * cb2[10].w;
  r2.w = v4.x ? 1 : -1;
  r3.z = r2.w * r1.w;
  r3.xy = cb4[8].xx * r3.xy;
  r3.xy = frac(r3.xy);
  r3.xyw = t0.SampleLevel(s0_s, r3.xy, 0).xyz;
  r4.x = r0.z * 1 + -cb5[12].x;
  r4.y = cb5[12].y + -cb5[12].x;
  r4.x = saturate(r4.x / r4.y);
  r4.yzw = float3(0,0,1) + -r3.xyw;
  r3.xyw = r4.xxx * r4.yzw + r3.xyw;
  r4.x = dot(r3.xyw, r3.xyw);
  r4.x = sqrt(r4.x);
  r3.xyw = r3.xyw / r4.xxx;
  r3.xyz = r3.zzz * r3.xyw;
  r3.w = 1 + -cb2[7].w;
  r4.xyz = v1.xyz * r3.www;
  r4.xyz = r3.xyz * cb2[7].www + r4.xyz;
  r3.w = dot(r4.xyz, r4.xyz);
  r3.w = rsqrt(r3.w);
  r4.xyz = r4.xyz * r3.www;
  r5.xyz = -cb4[4].xyz + r2.xyz;
  r5.xyz = saturate(cb4[5].xyz * r5.xyz);
  r5.xyz = t1.SampleLevel(s1_s, r5.xyz, 0).xyz;
  r6.xyz = cb4[29].xyz + -r5.xyz;
  r5.xyz = cb4[28].xxx * r6.xyz + r5.xyz;
  r3.w = cb4[7].z * cb4[7].w + -cb1[53].z;
  r4.w = saturate(r3.w / cb5[12].z);
  r1.x = dot(r3.xyz, r1.xyz);
  r1.y = max(0, r1.x);
  r1.y = 1 + -r1.y;
  r1.y = max(9.99999997e-007, abs(r1.y));
  r1.y = log2(r1.y);
  r1.z = cb5[12].w * r1.y;
  r1.z = exp2(r1.z);
  r1.z = r1.z * 0.959999979 + 0.0399999991;
  r1.z = 1 + -r1.z;
  r3.z = cb5[13].x * r1.z;
  r5.w = -cb5[13].y + r3.w;
  r6.x = cb5[13].z + -cb5[13].y;
  r5.w = saturate(r5.w / r6.x);
  r3.z = r4.w * r3.z + -cb5[13].w;
  r3.z = r5.w * r3.z + cb5[13].w;
  r6.xy = -cb1[53].xy + r2.xy;
  r5.w = dot(r6.xy, r6.xy);
  r5.w = sqrt(r5.w);
  r3.w = -cb5[14].x + r3.w;
  r6.x = -cb5[14].x + cb5[13].z;
  r6.x = saturate(r3.w / r6.x);
  r6.x = max(9.99999997e-007, r6.x);
  r6.x = log2(r6.x);
  r6.x = cb5[14].y * r6.x;
  r6.x = exp2(r6.x);
  r6.y = 0.00200000009 + -cb5[14].z;
  r6.x = r6.x * r6.y + cb5[14].z;
  r6.y = saturate(r5.w / r6.x);
  r6.z = -cb5[15].x + cb5[14].w;
  r4.w = r4.w * r6.z + cb5[15].x;
  r6.z = max(9.99999997e-007, r6.y);
  r6.z = log2(r6.z);
  r4.w = r6.z * r4.w;
  r4.w = exp2(r4.w);
  r1.z = r1.z * cb5[13].x + -r3.z;
  r1.z = r4.w * r1.z + r3.z;
  r7.xyz = r5.xyz * r1.zzz;
  r1.z = cb5[15].z * cb2[11].z;
  r8.x = 0.300000012 * r1.z;
  r6.zw = r2.xy / cb5[15].ww;
  r8.yz = float2(0,0);
  r6.zw = r8.xy + r6.zw;
  r1.z = t2.Sample(s3_s, r6.zw).z;
  r6.zw = r2.xy / cb5[16].xx;
  r6.zw = cb2[11].zz * float2(-0.0260000005,-0.0599999987) + r6.zw;
  r6.zw = t2.Sample(s3_s, r6.zw).xz;
  r1.z = r6.w + r1.z;
  r3.z = -0.5 + r6.z;
  r1.z = r3.z * 2 + r1.z;
  r1.z = -cb5[16].y + r1.z;
  r3.z = cb5[16].z + -cb5[16].y;
  r1.z = saturate(r1.z / r3.z);
  r3.z = cb5[16].w + -cb5[14].x;
  r3.z = saturate(r3.w / r3.z);
  r3.z = max(9.99999997e-007, r3.z);
  r3.z = log2(r3.z);
  r3.z = cb5[14].y * r3.z;
  r3.z = exp2(r3.z);
  r3.w = 0.00100000005 + -cb5[17].x;
  r3.w = r3.z * r3.w + cb5[17].x;
  r4.w = r5.w + -r3.w;
  r3.w = r6.x + -r3.w;
  r3.w = saturate(r4.w / r3.w);
  r1.z = r3.w + r1.z;
  r4.w = max(9.99999975e-005, cb5[17].y);
  r5.w = -r4.w * 0.5 + 0.879999995;
  r1.z = -r5.w + r1.z;
  r4.w = r4.w * 0.5 + -r5.w;
  r4.w = 0.879999995 + r4.w;
  r1.z = saturate(r1.z / r4.w);
  r6.xzw = cb5[15].yyy * r5.xyz + -r7.xyz;
  r6.xzw = r1.zzz * r6.xzw + r7.xyz;
  r1.w = r1.w * r2.w + 1;
  r1.w = 0.5 * r1.w;
  r6.xzw = r1.www * -r6.xzw + r6.xzw;
  r0.xy = r0.xy / r0.ww;
  r0.xy = r0.xy * cb1[52].xy + cb1[52].wz;
  r7.xy = r0.xy * cb2[3].xy + -cb2[1].xy;
  r0.w = r0.z * 1 + -cb5[17].z;
  r2.w = cb5[17].w + -cb5[17].z;
  r0.w = saturate(r0.w / r2.w);
  r0.w = 1 + -r0.w;
  r0.w = cb5[18].x * r0.w;
  r3.xy = r3.xy * r0.ww;
  r7.xy = r7.xy * cb2[2].zw + r3.xy;
  r7.z = 1 + -r7.y;
  r7.xyz = t6.SampleLevel(s6_s, r7.xz, 0).xyz;
  r7.xyz = cb0[0].xxx * r7.xyz;
  r7.xyz = cb5[2].xyz * r7.xyz;
  r0.w = 1 + -abs(r1.x);
  r0.w = max(9.99999997e-007, abs(r0.w));
  r0.w = log2(r0.w);
  r0.w = cb5[18].y * r0.w;
  r0.w = exp2(r0.w);
  r6.xzw = r7.xyz * r0.www + r6.xzw;
  r6.xzw = max(float3(0,0,0), r6.xzw);
  r7.xyz = -cb0[4].xyz + r2.xyz;
  r7.xyz = cb0[4].www + r7.xyz;
  r7.xyz = max(float3(0,0,0), r7.xyz);
  r9.xyz = cb0[4].xyz + cb0[4].www;
  r9.xyz = r9.xyz + -r2.xyz;
  r9.xyz = max(float3(0,0,0), r9.xyz);
  r7.xyz = min(r9.xyz, r7.xyz);
  r0.w = min(r7.y, r7.z);
  r0.w = min(r7.x, r0.w);
  r1.x = cb0[12].y * cb0[4].w;
  r0.w = cmp(r1.x < r0.w);
  if (r0.w != 0) {
    r7.xyz = r2.xyz * cb0[8].www + cb0[8].xyz;
    r1.x = t7.SampleLevel(s7_s, r7.xyz, 0).x;
  } else {
    r7.xyz = -cb0[5].xyz + r2.xyz;
    r7.xyz = cb0[5].www + r7.xyz;
    r7.xyz = max(float3(0,0,0), r7.xyz);
    r9.xyz = cb0[5].xyz + cb0[5].www;
    r9.xyz = r9.xyz + -r2.xyz;
    r9.xyz = max(float3(0,0,0), r9.xyz);
    r7.xyz = min(r9.xyz, r7.xyz);
    r2.w = min(r7.y, r7.z);
    r2.w = min(r7.x, r2.w);
    r3.x = cb0[12].y * cb0[5].w;
    r2.w = cmp(r3.x < r2.w);
    if (r2.w != 0) {
      r7.xyz = r2.xyz * cb0[9].www + cb0[9].xyz;
      r1.x = t8.SampleLevel(s8_s, r7.xyz, 0).x;
    } else {
      r7.xyz = -cb0[6].xyz + r2.xyz;
      r7.xyz = cb0[6].www + r7.xyz;
      r7.xyz = max(float3(0,0,0), r7.xyz);
      r9.xyz = cb0[6].xyz + cb0[6].www;
      r9.xyz = r9.xyz + -r2.xyz;
      r9.xyz = max(float3(0,0,0), r9.xyz);
      r7.xyz = min(r9.xyz, r7.xyz);
      r2.w = min(r7.y, r7.z);
      r2.w = min(r7.x, r2.w);
      r7.xyz = -cb0[7].xyz + r2.xyz;
      r7.xyz = cb0[7].www + r7.xyz;
      r7.xyz = max(float3(0,0,0), r7.xyz);
      r9.xyz = cb0[7].xyz + cb0[7].www;
      r9.xyz = r9.xyz + -r2.xyz;
      r9.xyz = max(float3(0,0,0), r9.xyz);
      r7.xyz = min(r9.xyz, r7.xyz);
      r3.x = min(r7.y, r7.z);
      r3.x = min(r7.x, r3.x);
      r3.y = cb0[12].y * cb0[6].w;
      r2.w = cmp(r3.y < r2.w);
      if (r2.w != 0) {
        r7.xyz = r2.xyz * cb0[10].www + cb0[10].xyz;
        r1.x = t9.SampleLevel(s9_s, r7.xyz, 0).x;
      } else {
        r2.w = cb0[12].y * cb0[7].w;
        r2.w = cmp(r2.w < r3.x);
        if (r2.w != 0) {
          r7.xyz = r2.xyz * cb0[11].www + cb0[11].xyz;
          r1.x = t10.SampleLevel(s10_s, r7.xyz, 0).x;
        } else {
          r1.x = cb0[3].x;
        }
      }
    }
  }
  r2.w = abs(r1.x) / cb5[18].z;
  r3.x = cb5[18].w * cb2[11].z;
  r8.w = frac(r3.x);
  r7.y = abs(r1.x) / cb5[19].x;
  r7.xw = float2(0,0);
  r3.xy = r8.zw + r7.xy;
  r4.w = cb5[19].y * cb2[11].z;
  r7.z = 0.300000012 * r4.w;
  r7.xy = r2.xy / cb5[19].zz;
  r7.zw = r7.zw + r7.xy;
  r4.w = t2.Sample(s3_s, r7.zw).x;
  r7.xy = cb2[11].zz * float2(-0.0260000005,-0.0599999987) + r7.xy;
  r5.w = t2.Sample(s3_s, r7.xy).y;
  r4.w = -r4.w * r5.w + 1;
  r3.xy = r4.ww + r3.xy;
  r3.x = t3.Sample(s2_s, r3.xy).x;
  r3.x = max(9.99999997e-007, abs(r3.x));
  r3.x = log2(r3.x);
  r3.x = cb5[19].w * r3.x;
  r3.x = exp2(r3.x);
  r1.x = abs(r1.x) / cb5[20].x;
  r1.x = r4.w + -r1.x;
  r1.x = r2.w * r3.x + r1.x;
  r1.x = saturate(1 + r1.x);
  r2.w = saturate(cb5[20].y);
  r2.w = 1 + -r2.w;
  r3.x = max(9.99999975e-005, cb5[20].z);
  r3.y = -r3.x * 0.5 + r2.w;
  r1.x = -r3.y + r1.x;
  r2.w = r3.x * 0.5 + r2.w;
  r2.w = r2.w + -r3.y;
  r1.x = saturate(r1.x / r2.w);
  r7.xyz = cb5[4].xyz + -r6.xzw;
  r6.xzw = r1.xxx * r7.xyz + r6.xzw;
  r6.xzw = cb5[5].xyz + r6.xzw;
  r1.x = r0.z * 1 + -cb5[20].w;
  r3.x = cb5[21].x + -cb5[20].w;
  r1.x = saturate(r1.x / r3.x);
  r7.xyz = -cb5[9].xyz + r5.xyz;
  r7.xyz = r1.xxx * r7.xyz + cb5[9].xyz;
  r7.xyz = r7.xyz + -r5.xyz;
  r5.xyz = r1.www * r7.xyz + r5.xyz;
  r5.xyz = saturate(cb5[6].xyz * r5.xyz);
  r1.x = cb5[21].z + -cb5[21].y;
  r7.x = saturate(r1.w * r1.x + cb5[21].y);
  r7.zw = r2.xy / cb5[22].zz;
  r1.x = t2.Sample(s3_s, r7.zw).x;
  r3.x = cb5[22].y * 2 + 1;
  r1.x = saturate(r1.x * r3.x + -cb5[22].y);
  r3.x = r0.z * 1 + -cb5[22].w;
  r5.w = cb5[23].x + -cb5[22].w;
  r3.x = saturate(r3.x / r5.w);
  r1.x = r3.x * r1.x;
  r3.x = cb5[23].y + -cb5[23].z;
  r1.x = r1.x * r3.x + cb5[23].z;
  r1.x = -cb5[22].x + r1.x;
  r1.x = saturate(r1.w * r1.x + cb5[22].x);
  r3.x = -cb5[24].x + cb5[23].w;
  r3.x = r6.y * r3.x + cb5[24].x;
  r5.w = 1 + -r3.x;
  r3.x = r3.z * r5.w + r3.x;
  r1.y = cb5[24].y * r1.y;
  r1.y = exp2(r1.y);
  r1.y = r1.y * 0.959999979 + 0.0399999991;
  r3.z = 1 + -r3.x;
  r1.y = r1.y * r3.z + r3.x;
  r9.xyz = -cb1[53].xyz + r2.xyz;
  r3.x = dot(r9.xyz, r9.xyz);
  r3.x = sqrt(r3.x);
  r3.x = r3.x + -r3.w;
  r3.x = saturate(r3.x / cb5[24].z);
  r3.z = 1 + -cb5[23].w;
  r3.x = r3.x * r3.z + cb5[23].w;
  r3.x = r3.x + -r1.y;
  r1.y = r1.z * r3.x + r1.y;
  r0.x = t5.SampleLevel(s5_s, r0.xy, 0).x;
  r0.x = r0.x * cb1[51].z + -cb1[51].w;
  r0.x = 1 / r0.x;
  r0.x = -r0.z * 1 + r0.x;
  r0.y = saturate(r0.x / cb5[25].x);
  r0.y = r1.y * r0.y;
  r1.y = r0.z * 1 + -cb5[25].y;
  r1.z = cb5[25].z + -cb5[25].y;
  r1.y = saturate(r1.y / r1.z);
  r1.z = -cb5[26].x + cb5[25].w;
  r1.y = r1.y * r1.z + cb5[26].x;
  r0.x = saturate(r0.x / cb5[26].z);
  r0.x = r1.y * r0.x + -r0.y;
  r0.x = r1.w * r0.x + r0.y;
  r0.y = r0.z * 1 + -cb5[26].w;
  r0.z = cb5[27].x + -cb5[26].w;
  r0.y = saturate(r0.y / r0.z);
  r0.z = r0.x * r0.y;
  if (r0.w != 0) {
    r1.yzw = r2.xyz * cb0[8].www + cb0[8].xyz;
    r0.w = t7.SampleLevel(s7_s, r1.yzw, 0).x;
  } else {
    r1.yzw = -cb0[5].xyz + r2.xyz;
    r1.yzw = cb0[5].www + r1.yzw;
    r1.yzw = max(float3(0,0,0), r1.yzw);
    r3.xzw = cb0[5].xyz + cb0[5].www;
    r3.xzw = r3.xzw + -r2.xyz;
    r3.xzw = max(float3(0,0,0), r3.xzw);
    r1.yzw = min(r3.xzw, r1.yzw);
    r1.z = min(r1.z, r1.w);
    r1.y = min(r1.y, r1.z);
    r1.z = cb0[12].y * cb0[5].w;
    r1.y = cmp(r1.z < r1.y);
    if (r1.y != 0) {
      r1.yzw = r2.xyz * cb0[9].www + cb0[9].xyz;
      r0.w = t8.SampleLevel(s8_s, r1.yzw, 0).x;
    } else {
      r1.yzw = -cb0[6].xyz + r2.xyz;
      r1.yzw = cb0[6].www + r1.yzw;
      r1.yzw = max(float3(0,0,0), r1.yzw);
      r3.xzw = cb0[6].xyz + cb0[6].www;
      r3.xzw = r3.xzw + -r2.xyz;
      r3.xzw = max(float3(0,0,0), r3.xzw);
      r1.yzw = min(r3.xzw, r1.yzw);
      r1.z = min(r1.z, r1.w);
      r1.y = min(r1.y, r1.z);
      r3.xzw = -cb0[7].xyz + r2.xyz;
      r3.xzw = cb0[7].www + r3.xzw;
      r3.xzw = max(float3(0,0,0), r3.xzw);
      r9.xyz = cb0[7].xyz + cb0[7].www;
      r9.xyz = r9.xyz + -r2.xyz;
      r9.xyz = max(float3(0,0,0), r9.xyz);
      r3.xzw = min(r9.xyz, r3.xzw);
      r1.z = min(r3.z, r3.w);
      r1.z = min(r3.x, r1.z);
      r1.w = cb0[12].y * cb0[6].w;
      r1.y = cmp(r1.w < r1.y);
      if (r1.y != 0) {
        r3.xzw = r2.xyz * cb0[10].www + cb0[10].xyz;
        r0.w = t9.SampleLevel(s9_s, r3.xzw, 0).x;
      } else {
        r1.y = cb0[12].y * cb0[7].w;
        r1.y = cmp(r1.y < r1.z);
        if (r1.y != 0) {
          r1.yzw = r2.xyz * cb0[11].www + cb0[11].xyz;
          r0.w = t10.SampleLevel(s10_s, r1.yzw, 0).x;
        } else {
          r0.w = cb0[3].x;
        }
      }
    }
  }
  r1.y = abs(r0.w) / cb5[18].z;
  r8.y = abs(r0.w) / cb5[19].x;
  r8.x = 0;
  r1.zw = r8.zw + r8.xy;
  r1.zw = r1.zw + r4.ww;
  r1.z = t3.Sample(s2_s, r1.zw).x;
  r1.z = max(9.99999997e-007, abs(r1.z));
  r1.z = log2(r1.z);
  r1.z = cb5[19].w * r1.z;
  r1.z = exp2(r1.z);
  r0.w = abs(r0.w) / cb5[20].x;
  r0.w = r4.w + -r0.w;
  r0.w = r1.y * r1.z + r0.w;
  r0.w = saturate(1 + r0.w);
  r0.w = r0.w + -r3.y;
  r0.w = saturate(r0.w / r2.w);
  r0.x = -r0.x * r0.y + cb5[27].y;
  r0.w = saturate(r0.w * r0.x + r0.z);
  r1.yz = -cb5[10].xy + r2.xy;
  r1.yz = r1.yz / cb5[11].xy;
  r1.y = t4.Sample(s4_s, r1.yz).x;
  r1.y = -0.5 + r1.y;
  r1.y = cmp(r1.y < 0);
  if (r1.y != 0) discard;
  r7.y = saturate(cb5[21].w);
  o2.z = r1.x * cb2[8].y + cb2[8].x;
  r1.xyz = -r5.xyz * r7.xxx + r5.xyz;
  r1.w = 0.0799999982 * r7.y;
  r3.xyz = -r7.yyy * float3(0.0799999982,0.0799999982,0.0799999982) + r5.xyz;
  r3.xyz = r7.xxx * r3.xyz + r1.www;
  r1.xyz = r1.xyz * cb2[5].www + cb2[5].xyz;
  r3.xyz = r3.xyz * cb2[6].www + cb2[6].xyz;
  r1.xyz = r3.xyz + r1.xyz;
  r0.xyz = max(float3(0,0,0), r6.xzw);
  r1.w = cmp(0 < cb2[9].x);
  if (r1.w != 0) {
    r3.xyz = -cb3[8].xyz + r2.xyz;
    r6.xyz = float3(1,1,1) + cb3[9].xyz;
    r3.xyz = cmp(r6.xyz < abs(r3.xyz));
    r1.w = (int)r3.y | (int)r3.x;
    r1.w = (int)r3.z | (int)r1.w;
    r2.x = dot(r2.xyz, float3(0.577000022,0.577000022,0.577000022));
    r2.x = 0.00200000009 * r2.x;
    r2.x = frac(r2.x);
    r2.x = cmp(0.5 < r2.x);
    r2.yzw = r2.xxx ? float3(0,1,1) : float3(1,1,0);
    r2.x = 1;
    r0.xyzw = r1.wwww ? r2.yzwx : r0.xyzw;
    o0.w = r0.w;
  } else {
    o0.w = r0.w;
  }
  o0.xyz = cb2[13].xxx * r1.xyz + r0.xyz;
  o1.xyz = r4.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o1.w = cb3[11].x;
  o2.w = 0.694117665;
  o2.xy = r7.xy;
  o3.xyz = r5.xyz;
  o3.w = 1;
  return;
}
