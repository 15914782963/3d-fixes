// green algae
// ---- Created with 3Dmigoto v1.2.51 on Sat Dec 24 13:44:30 2016
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[9];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[4];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[57];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[30];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb0[2].xyzw * v0.yyyy;
  r0.xyzw = v0.xxxx * cb0[1].xyzw + r0.xyzw;
  r1.xy = cb2[3].zw * v0.xy;
  r1.x = t1.SampleLevel(s1_s, r1.xy, 0).x;
  r0.xyzw = r1.xxxx * cb0[3].xyzw + r0.xyzw;
  r0.xyzw = cb0[4].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;

float4 s = StereoParams.Load(0);
matrix m = MATRIX(cb0, 1);
matrix im = inverse(m);
float4 t = mul(float4(r0.xyz, 1), im);
t.x -= s.x * (t.w - s.y) * cb2[3].x / 2;
r0.xyz = mul(t, m);


  r1.yzw = float3(1,1,1) + r0.xyz;
  r1.yzw = cmp(r1.yzw < float3(0,0,0));
  r0.w = (int)r1.z | (int)r1.y;
  r0.w = (int)r1.w | (int)r0.w;
  if (r0.w != 0) discard;
  r1.yzw = float3(1,1,1) + -r0.xyz;
  r0.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r1.yzw = cmp(r1.yzw < float3(0,0,0));
  r0.w = (int)r1.z | (int)r1.y;
  r0.w = (int)r1.w | (int)r0.w;
  if (r0.w != 0) discard;
  r2.xyzw = cb1[37].xyzw * v0.yyyy;
  r2.xyzw = v0.xxxx * cb1[36].xyzw + r2.xyzw;
  r1.xyzw = r1.xxxx * cb1[38].xyzw + r2.xyzw;
  r1.xyzw = cb1[39].xyzw + r1.xyzw;
  r1.xyz = r1.xyz / r1.www;
  r1.xyz = -cb1[56].xyz + r1.xyz;
  r2.xyz = -cb3[1].xyz + r1.xyz;
  r1.xyz = cb3[1].xyz + -r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(r0.w);
  r0.w = saturate(-r0.w * cb4[7].w + 1);
  r1.x = dot(r2.xyz, r2.xyz);
  r1.x = sqrt(r1.x);
  r1.xy = r2.xy / r1.xx;
  r1.xy = cb4[8].xx * r1.xy;
  r1.xy = r1.xy * r0.ww;
  r0.yz = r1.xy * float2(0.5,0.5) + r0.zy;
  r0.x = r0.x * 2 + -1;
  r0.x = saturate(-abs(r0.x) * 4 + 4);
  r0.y = t0.Sample(s0_s, r0.yz).x;
  r0.y = max(9.99999997e-007, abs(r0.y));
  r0.y = log2(r0.y);
  r0.y = cb4[8].y * r0.y;
  r0.y = exp2(r0.y);
  r0.y = min(1, r0.y);
  r0.x = r0.y * r0.x;
  o0.w = cb0[29].x * r0.x;
  r0.xyz = cb4[4].xyz + cb4[3].xyz;
  o0.xyz = max(float3(0,0,0), r0.xyz);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sat Dec 24 13:44:30 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[30], immediateIndexed
dcl_constantbuffer cb1[57], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb4[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 3
mul r0.xyzw, v0.yyyy, cb0[2].xyzw
mad r0.xyzw, v0.xxxx, cb0[1].xyzw, r0.xyzw
mul r1.xy, v0.xyxx, cb2[3].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t1.xyzw, s1, l(0.000000)
mad r0.xyzw, r1.xxxx, cb0[3].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb0[4].xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r1.yzw, r0.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
lt r1.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r1.z, r1.y
or r0.w, r1.w, r0.w
discard_nz r0.w
add r1.yzw, -r0.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
lt r1.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r1.z, r1.y
or r0.w, r1.w, r0.w
discard_nz r0.w
mul r2.xyzw, v0.yyyy, cb1[37].xyzw
mad r2.xyzw, v0.xxxx, cb1[36].xyzw, r2.xyzw
mad r1.xyzw, r1.xxxx, cb1[38].xyzw, r2.xyzw
add r1.xyzw, r1.xyzw, cb1[39].xyzw
div r1.xyz, r1.xyzx, r1.wwww
add r1.xyz, r1.xyzx, -cb1[56].xyzx
add r2.xyz, r1.xyzx, -cb3[1].xyzx
add r1.xyz, -r1.xyzx, cb3[1].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
mad_sat r0.w, -r0.w, cb4[7].w, l(1.000000)
dp3 r1.x, r2.xyzx, r2.xyzx
sqrt r1.x, r1.x
div r1.xy, r2.xyxx, r1.xxxx
mul r1.xy, r1.xyxx, cb4[8].xxxx
mul r1.xy, r0.wwww, r1.xyxx
mad r0.yz, r1.xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), r0.zzyz
mad r0.x, r0.x, l(2.000000), l(-1.000000)
mad_sat r0.x, -|r0.x|, l(4.000000), l(4.000000)
sample_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.yxzw, s0
max r0.y, |r0.y|, l(0.000001)
log r0.y, r0.y
mul r0.y, r0.y, cb4[8].y
exp r0.y, r0.y
min r0.y, r0.y, l(1.000000)
mul r0.x, r0.x, r0.y
mul o0.w, r0.x, cb0[29].x
add r0.xyz, cb4[3].xyzx, cb4[4].xyzx
max o0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
