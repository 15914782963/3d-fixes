// green water fog volume
// ---- Created with 3Dmigoto v1.2.51 on Sun Dec 25 06:18:31 2016
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[10];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[10];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[11];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[57];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3 : SV_Position0,
  uint v4 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb1[1].xy + v3.xy;
  r1.xy = r1.xy * cb1[2].zw + float2(-0.5,-0.5);
  r1.xy = v3.ww * r1.xy;
  r1.z = v3.w;
  r1.xyw = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb0[37].xyzw * v3.yyyy;
  r2.xyzw = v3.xxxx * cb0[36].xyzw + r2.xyzw;
  r2.xyzw = v3.zzzz * cb0[38].xyzw + r2.xyzw;
  r2.xyzw = cb0[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

float4 s = StereoParams.Load(0);
matrix TranslatedWorldToClip = MATRIX(cb0, 0);
matrix ClipToTranslatedWorld = MATRIX(cb0, 32);
float4 t = mul(r2.xyz, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r2.xyz = mul(t, ClipToTranslatedWorld);

  r3.xyz = -cb0[56].xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r2.xyz = -r2.xyz / r0.www;
  r0.w = cb2[9].w * cb1[10].w;
  r2.w = v4.x ? 1 : -1;
  r0.w = r2.w * r0.w;
  r4.xyz = cb1[7].www * float3(0,0,1) + cb1[7].xyz;
  r4.xyz = r4.xyz * r0.www;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.xyz = r4.yyy * r0.xyz;
  r0.xyz = r4.xxx * v0.xyz + r0.xyz;
  r0.xyz = r4.zzz * v1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r4.xyz = cb3[4].xyz + cb3[3].xyz;
  r1.xy = r1.xy / r1.ww;
  r1.xy = r1.xy * cb0[52].xy + cb0[52].wz;
  r0.w = t0.SampleLevel(s0_s, r1.xy, 0).x;
  r0.w = r0.w * cb0[51].z + -cb0[51].w;
  r0.w = 1 / r0.w;
  r0.w = -r1.z * 1 + r0.w;
  r0.w = saturate(r0.w / cb3[7].z);
  r1.xyz = -cb0[53].xyz + r3.xyz;
  r1.x = dot(r1.xyz, r1.xyz);
  r1.x = sqrt(r1.x);
  r1.y = -cb3[7].w + r1.x;
  r1.y = saturate(r1.y / cb3[8].x);
  r1.z = cb3[8].y + -cb3[8].z;
  r1.x = r1.x + -r1.z;
  r1.z = cb3[8].y + -r1.z;
  r1.x = saturate(r1.x / r1.z);
  r1.x = 1 + -r1.x;
  r1.x = r1.y * r1.x;
  r1.x = max(9.99999997e-007, r1.x);
  r1.y = r1.x * r1.x;
  r1.x = dot(r1.xx, r1.yy);
  r1.x = r1.y * 3 + -r1.x;
  r0.w = r1.x * r0.w;
  r0.x = dot(r0.xyz, r2.xyz);
  r0.x = max(0, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = max(9.99999997e-007, abs(r0.x));
  r0.y = r0.x * r0.x;
  r0.y = r0.y * r0.y;
  r0.x = r0.x * r0.y;
  r0.x = r0.x * 0.959999979 + 0.0399999991;
  r0.x = 1 + -r0.x;
  r0.x = max(9.99999997e-007, abs(r0.x));
  r0.x = log2(r0.x);
  r0.x = cb3[8].w * r0.x;
  r0.x = exp2(r0.x);
  r0.yz = float2(3.14159274,3.14159274) * v2.xy;
  r0.yz = sin(r0.yz);
  r0.yz = max(float2(9.99999997e-007,9.99999997e-007), abs(r0.yz));
  r0.yz = log2(r0.yz);
  r0.yz = cb3[9].xy * r0.yz;
  r0.yz = exp2(r0.yz);
  r0.xy = r0.wy * r0.xz;
  r0.x = r0.x * r0.y;
  r0.w = saturate(cb3[9].z * r0.x);
  r0.xyz = max(float3(0,0,0), r4.xyz);
  r1.x = cmp(0 < cb1[9].x);
  if (r1.x != 0) {
    r1.xyz = -cb2[8].xyz + r3.xyz;
    r2.xyz = float3(1,1,1) + cb2[9].xyz;
    r1.xyz = cmp(r2.xyz < abs(r1.xyz));
    r1.x = (int)r1.y | (int)r1.x;
    r1.x = (int)r1.z | (int)r1.x;
    r1.y = dot(r3.xyz, float3(0.577000022,0.577000022,0.577000022));
    r1.y = 0.00200000009 * r1.y;
    r1.y = frac(r1.y);
    r1.y = cmp(0.5 < r1.y);
    r2.xyz = r1.yyy ? float3(0,1,1) : float3(1,1,0);
    r2.w = 1;
    o0.xyzw = r1.xxxx ? r2.xyzw : r0.xyzw;
  } else {
    o0.xyzw = r0.xyzw;
  }
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sun Dec 25 06:18:31 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// SV_Position              0   xyzw        3      POS   float   xyzw
// SV_IsFrontFace           0   x           4    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[57], immediateIndexed
dcl_constantbuffer cb1[11], immediateIndexed
dcl_constantbuffer cb2[10], immediateIndexed
dcl_constantbuffer cb3[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps_siv linear noperspective v3.xyzw, position
dcl_input_ps_sgv v4.x, is_front_face
dcl_output o0.xyzw
dcl_temps 5
mul r0.xyz, v0.yzxy, v1.zxyz
mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v1.wwww
add r1.xy, v3.xyxx, -cb1[1].xyxx
mad r1.xy, r1.xyxx, cb1[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.xy, r1.xyxx, v3.wwww
mov r1.z, v3.w
mul r1.xyw, r1.xyxz, l(2.000000, -2.000000, 0.000000, 1.000000)
mul r2.xyzw, v3.yyyy, cb0[37].xyzw
mad r2.xyzw, v3.xxxx, cb0[36].xyzw, r2.xyzw
mad r2.xyzw, v3.zzzz, cb0[38].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[39].xyzw
div r2.xyz, r2.xyzx, r2.wwww
add r3.xyz, r2.xyzx, -cb0[56].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
div r2.xyz, -r2.xyzx, r0.wwww
mul r0.w, cb1[10].w, cb2[9].w
movc r2.w, v4.x, l(1.000000), l(-1.000000)
mul r0.w, r0.w, r2.w
mad r4.xyz, cb1[7].wwww, l(0.000000, 0.000000, 1.000000, 0.000000), cb1[7].xyzx
mul r4.xyz, r0.wwww, r4.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
mul r0.xyz, r0.xyzx, r4.yyyy
mad r0.xyz, r4.xxxx, v0.xyzx, r0.xyzx
mad r0.xyz, r4.zzzz, v1.xyzx, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
add r4.xyz, cb3[3].xyzx, cb3[4].xyzx
div r1.xy, r1.xyxx, r1.wwww
mad r1.xy, r1.xyxx, cb0[52].xyxx, cb0[52].wzww
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t0.yzwx, s0, l(0.000000)
mad r0.w, r0.w, cb0[51].z, -cb0[51].w
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mad r0.w, -r1.z, l(1.000000), r0.w
div_sat r0.w, r0.w, cb3[7].z
add r1.xyz, r3.xyzx, -cb0[53].xyzx
dp3 r1.x, r1.xyzx, r1.xyzx
sqrt r1.x, r1.x
add r1.y, r1.x, -cb3[7].w
div_sat r1.y, r1.y, cb3[8].x
add r1.z, -cb3[8].z, cb3[8].y
add r1.x, -r1.z, r1.x
add r1.z, -r1.z, cb3[8].y
div_sat r1.x, r1.x, r1.z
add r1.x, -r1.x, l(1.000000)
mul r1.x, r1.x, r1.y
max r1.x, r1.x, l(0.000001)
mul r1.y, r1.x, r1.x
dp2 r1.x, r1.xxxx, r1.yyyy
mad r1.x, r1.y, l(3.000000), -r1.x
mul r0.w, r0.w, r1.x
dp3 r0.x, r0.xyzx, r2.xyzx
max r0.x, r0.x, l(0.000000)
add r0.x, -r0.x, l(1.000000)
max r0.x, |r0.x|, l(0.000001)
mul r0.y, r0.x, r0.x
mul r0.y, r0.y, r0.y
mul r0.x, r0.y, r0.x
mad r0.x, r0.x, l(0.960000), l(0.040000)
add r0.x, -r0.x, l(1.000000)
max r0.x, |r0.x|, l(0.000001)
log r0.x, r0.x
mul r0.x, r0.x, cb3[8].w
exp r0.x, r0.x
mul r0.yz, v2.xxyx, l(0.000000, 3.14159274, 3.14159274, 0.000000)
sincos r0.yz, null, r0.yyzy
max r0.yz, |r0.yyzy|, l(0.000000, 0.000001, 0.000001, 0.000000)
log r0.yz, r0.yyzy
mul r0.yz, r0.yyzy, cb3[9].xxyx
exp r0.yz, r0.yyzy
mul r0.xy, r0.xzxx, r0.wyww
mul r0.x, r0.y, r0.x
mul_sat r0.w, r0.x, cb3[9].z
max r0.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r1.x, l(0.000000), cb1[9].x
if_nz r1.x
  add r1.xyz, r3.xyzx, -cb2[8].xyzx
  add r2.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r1.xyz, r2.xyzx, |r1.xyzx|
  or r1.x, r1.y, r1.x
  or r1.x, r1.z, r1.x
  dp3 r1.y, r3.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.y, r1.y, l(0.002000)
  frc r1.y, r1.y
  lt r1.y, l(0.500000), r1.y
  movc r2.xyz, r1.yyyy, l(0,1.000000,1.000000,0), l(1.000000,1.000000,0,0)
  mov r2.w, l(1.000000)
  movc o0.xyzw, r1.xxxx, r2.xyzw, r0.xyzw
else 
  mov o0.xyzw, r0.xyzw
endif 
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
