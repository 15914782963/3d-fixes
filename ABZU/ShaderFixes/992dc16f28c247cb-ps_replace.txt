// ---- Created with 3Dmigoto v1.2.51 on Thu Jan 05 00:22:58 2017
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[7];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[12];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[10];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[60];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : COLOR0,
  float4 v3 : TEXCOORD0,
  float2 v4 : TEXCOORD1,
  float4 v5 : VELOCITY_PREV_POS0,
  float4 v6 : SV_Position0,
  uint v7 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4,
  out float4 o5 : SV_Target5)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb1[1].xy + v6.xy;
  r1.xy = r1.xy * cb1[2].zw + float2(-0.5,-0.5);
  r1.xy = v6.ww * r1.xy;
  r1.z = v6.w;
  r1.xyz = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb0[37].xyzw * v6.yyyy;
  r2.xyzw = v6.xxxx * cb0[36].xyzw + r2.xyzw;
  r2.xyzw = v6.zzzz * cb0[38].xyzw + r2.xyzw;
  r2.xyzw = cb0[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

// Common SVPositionToTranslatedWorld fix:
float4 s = StereoParams.Load(0);
matrix TranslatedWorldToClip = MATRIX(cb0, 0);
matrix ClipToTranslatedWorld = MATRIX(cb0, 32);
float4 t = mul(r2, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r2 = mul(t, ClipToTranslatedWorld);

  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r3.xyz = -r2.xyz / r0.www;
  r4.xyz = cb1[7].www * float3(0,0,1) + cb1[7].xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.xyz = r4.yyy * r0.xyz;
  r0.xyz = r4.xxx * v0.xyz + r0.xyz;
  r0.xyz = r4.zzz * v1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(r0.xyz, r3.xyz);
  r0.w = max(0, r0.w);
  r0.w = 1 + -r0.w;
  r0.w = max(9.99999997e-007, abs(r0.w));
  r0.w = log2(r0.w);
  r0.w = cb3[6].x * r0.w;
  r0.w = exp2(r0.w);
  r0.w = r0.w * 0.959999979 + 0.0399999991;
  r3.xyz = cb3[2].xyz * r0.www;
  r0.w = t0.Sample(s0_s, v4.xy).x;
  r0.w = 3 * r0.w;
  r3.xyz = r3.xyz * r0.www + r3.xyz;
  r3.xyz = r3.xyz * cb3[6].yyy + cb3[3].xyz;
  r3.xyz = max(float3(0,0,0), r3.xyz);
  r0.w = cmp(0 < cb1[9].x);
  if (r0.w != 0) {
    r2.xyz = -cb0[56].xyz + r2.xyz;
    r4.xyz = -cb2[8].xyz + r2.xyz;
    r5.xyz = float3(1,1,1) + cb2[9].xyz;
    r4.xyz = cmp(r5.xyz < abs(r4.xyz));
    r0.w = (int)r4.y | (int)r4.x;
    r0.w = (int)r4.z | (int)r0.w;
    r1.w = dot(r2.xyz, float3(0.577000022,0.577000022,0.577000022));
    r1.w = 0.00200000009 * r1.w;
    r1.w = frac(r1.w);
    r1.w = cmp(0.5 < r1.w);
    r2.xyz = r1.www ? float3(0,1,1) : float3(1,1,0);
    r3.xyz = r0.www ? r2.xyz : r3.xyz;
  }
  r1.xy = r1.xy / r1.zz;
  r1.xy = -cb0[26].xy + r1.xy;
  r1.zw = v5.xy / v5.ww;
  r1.zw = -cb0[59].xy + r1.zw;
  r1.xy = r1.xy + -r1.zw;
  r1.xy = r1.xy * float2(0.249500006,0.249500006) + float2(0.499992371,0.499992371);
  o4.xy = v5.zz * r1.xy;
  o4.zw = float2(0,0);
  o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.xyz = r3.xyz;
  o0.w = 0;
  o1.w = cb2[11].x;
  o2.xyzw = float4(0,0,0,0);
  o3.xyzw = float4(0,0,0,0);
  o5.xyzw = float4(0,0,0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Thu Jan 05 00:22:58 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float       
// TEXCOORD                 1   xy          4     NONE   float   xy  
// VELOCITY_PREV_POS        0   xyzw        5     NONE   float   xyzw
// SV_Position              0   xyzw        6      POS   float   xyzw
// SV_IsFrontFace           0   x           7    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
// SV_Target                5   xyzw        5   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[60], immediateIndexed
dcl_constantbuffer cb1[10], immediateIndexed
dcl_constantbuffer cb2[12], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v4.xy
dcl_input_ps linear v5.xyzw
dcl_input_ps_siv linear noperspective v6.xyzw, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 6
mul r0.xyz, v0.yzxy, v1.zxyz
mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v1.wwww
add r1.xy, v6.xyxx, -cb1[1].xyxx
mad r1.xy, r1.xyxx, cb1[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.xy, r1.xyxx, v6.wwww
mov r1.z, v6.w
mul r1.xyz, r1.xyzx, l(2.000000, -2.000000, 1.000000, 0.000000)
mul r2.xyzw, v6.yyyy, cb0[37].xyzw
mad r2.xyzw, v6.xxxx, cb0[36].xyzw, r2.xyzw
mad r2.xyzw, v6.zzzz, cb0[38].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[39].xyzw
div r2.xyz, r2.xyzx, r2.wwww
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
div r3.xyz, -r2.xyzx, r0.wwww
mad r4.xyz, cb1[7].wwww, l(0.000000, 0.000000, 1.000000, 0.000000), cb1[7].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
mul r0.xyz, r0.xyzx, r4.yyyy
mad r0.xyz, r4.xxxx, v0.xyzx, r0.xyzx
mad r0.xyz, r4.zzzz, v1.xyzx, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r0.xyzx, r3.xyzx
max r0.w, r0.w, l(0.000000)
add r0.w, -r0.w, l(1.000000)
max r0.w, |r0.w|, l(0.000001)
log r0.w, r0.w
mul r0.w, r0.w, cb3[6].x
exp r0.w, r0.w
mad r0.w, r0.w, l(0.960000), l(0.040000)
mul r3.xyz, r0.wwww, cb3[2].xyzx
sample_indexable(texture2d)(float,float,float,float) r0.w, v4.xyxx, t0.yzwx, s0
mul r0.w, r0.w, l(3.000000)
mad r3.xyz, r3.xyzx, r0.wwww, r3.xyzx
mad r3.xyz, r3.xyzx, cb3[6].yyyy, cb3[3].xyzx
max r3.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb1[9].x
if_nz r0.w
  add r2.xyz, r2.xyzx, -cb0[56].xyzx
  add r4.xyz, r2.xyzx, -cb2[8].xyzx
  add r5.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r4.xyz, r5.xyzx, |r4.xyzx|
  or r0.w, r4.y, r4.x
  or r0.w, r4.z, r0.w
  dp3 r1.w, r2.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.w, r1.w, l(0.002000)
  frc r1.w, r1.w
  lt r1.w, l(0.500000), r1.w
  movc r2.xyz, r1.wwww, l(0,1.000000,1.000000,0), l(1.000000,1.000000,0,0)
  movc r3.xyz, r0.wwww, r2.xyzx, r3.xyzx
endif 
div r1.xy, r1.xyxx, r1.zzzz
add r1.xy, r1.xyxx, -cb0[26].xyxx
div r1.zw, v5.xxxy, v5.wwww
add r1.zw, r1.zzzw, -cb0[59].xxxy
add r1.xy, -r1.zwzz, r1.xyxx
mad r1.xy, r1.xyxx, l(0.249500, 0.249500, 0.000000, 0.000000), l(0.499992371, 0.499992371, 0.000000, 0.000000)
mul o4.xy, r1.xyxx, v5.zzzz
mov o4.zw, l(0,0,0,0)
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.xyz, r3.xyzx
mov o0.w, l(0)
mov o1.w, cb2[11].x
mov o2.xyzw, l(0,0,0,0)
mov o3.xyzw, l(0,0,0,0)
mov o5.xyzw, l(0,0,0,0)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
