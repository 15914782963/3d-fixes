// Blue pool of light
// ---- Created with 3Dmigoto v1.2.44 on Mon Oct 03 03:13:49 2016
Texture3D<float4> t15 : register(t15);

Texture3D<float4> t14 : register(t14);

Texture3D<float4> t13 : register(t13);

Texture3D<float4> t12 : register(t12);

Texture3D<float4> t11 : register(t11);

Texture2D<float4> t10 : register(t10);

Texture2D<float4> t9 : register(t9);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s12_s : register(s12);

SamplerState s11_s : register(s11);

SamplerState s10_s : register(s10);

SamplerState s9_s : register(s9);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb5 : register(b5)
{
  float4 cb5[26];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[26];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[10];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[12];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[57];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[13];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD7,
  float4 v4 : SV_Position0,
  uint v5 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb2[1].xy + v4.xy;
  r1.xy = r1.xy * cb2[2].zw + float2(-0.5,-0.5);
  r1.xy = v4.ww * r1.xy;
  r1.z = v4.w;
  r1.xyw = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb1[37].xyzw * v4.yyyy;
  r2.xyzw = v4.xxxx * cb1[36].xyzw + r2.xyzw;
  r2.xyzw = v4.zzzz * cb1[38].xyzw + r2.xyzw;
  r2.xyzw = cb1[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

// Common SVPositionToTranslatedWorld fix:
float4 s = StereoParams.Load(0);
matrix TranslatedWorldToClip = MATRIX(cb1, 0);
matrix ClipToTranslatedWorld = MATRIX(cb1, 32);
float4 t = mul(r2.xyz, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r2.xyz = mul(t, ClipToTranslatedWorld);

  r3.xyz = -cb1[56].xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r2.xyz = -r2.xyz / r0.www;
  r0.w = r1.w / cb5[16].x;
  r0.w = max(9.99999997e-007, abs(r0.w));
  r0.w = log2(r0.w);
  r0.w = cb5[16].y * r0.w;
  r0.w = exp2(r0.w);
  r0.w = 1 + -r0.w;
  r0.w = max(0, r0.w);
  r0.w = 1 + -r0.w;
  r4.xyz = -cb0[4].xyz + r3.xyz;
  r4.xyz = cb0[4].www + r4.xyz;
  r4.xyz = max(float3(0,0,0), r4.xyz);
  r5.xyz = cb0[4].xyz + cb0[4].www;
  r5.xyz = r5.xyz + -r3.xyz;
  r5.xyz = max(float3(0,0,0), r5.xyz);
  r4.xyz = min(r5.xyz, r4.xyz);
  r2.w = min(r4.y, r4.z);
  r2.w = min(r4.x, r2.w);
  r3.w = cb0[12].y * cb0[4].w;
  r2.w = cmp(r3.w < r2.w);
  if (r2.w != 0) {
    r4.xyz = r3.xyz * cb0[8].www + cb0[8].xyz;
    r3.w = t12.SampleLevel(s9_s, r4.xyz, 0).x;
  } else {
    r4.xyz = -cb0[5].xyz + r3.xyz;
    r4.xyz = cb0[5].www + r4.xyz;
    r4.xyz = max(float3(0,0,0), r4.xyz);
    r5.xyz = cb0[5].xyz + cb0[5].www;
    r5.xyz = r5.xyz + -r3.xyz;
    r5.xyz = max(float3(0,0,0), r5.xyz);
    r4.xyz = min(r5.xyz, r4.xyz);
    r4.y = min(r4.y, r4.z);
    r4.x = min(r4.x, r4.y);
    r4.y = cb0[12].y * cb0[5].w;
    r4.x = cmp(r4.y < r4.x);
    if (r4.x != 0) {
      r4.xyz = r3.xyz * cb0[9].www + cb0[9].xyz;
      r3.w = t13.SampleLevel(s10_s, r4.xyz, 0).x;
    } else {
      r4.xyz = -cb0[6].xyz + r3.xyz;
      r4.xyz = cb0[6].www + r4.xyz;
      r4.xyz = max(float3(0,0,0), r4.xyz);
      r5.xyz = cb0[6].xyz + cb0[6].www;
      r5.xyz = r5.xyz + -r3.xyz;
      r5.xyz = max(float3(0,0,0), r5.xyz);
      r4.xyz = min(r5.xyz, r4.xyz);
      r4.y = min(r4.y, r4.z);
      r4.x = min(r4.x, r4.y);
      r4.yzw = -cb0[7].xyz + r3.xyz;
      r4.yzw = cb0[7].www + r4.yzw;
      r4.yzw = max(float3(0,0,0), r4.yzw);
      r5.xyz = cb0[7].xyz + cb0[7].www;
      r5.xyz = r5.xyz + -r3.xyz;
      r5.xyz = max(float3(0,0,0), r5.xyz);
      r4.yzw = min(r5.xyz, r4.yzw);
      r4.z = min(r4.z, r4.w);
      r4.y = min(r4.y, r4.z);
      r4.z = cb0[12].y * cb0[6].w;
      r4.x = cmp(r4.z < r4.x);
      if (r4.x != 0) {
        r4.xzw = r3.xyz * cb0[10].www + cb0[10].xyz;
        r3.w = t14.SampleLevel(s11_s, r4.xzw, 0).x;
      } else {
        r4.x = cb0[12].y * cb0[7].w;
        r4.x = cmp(r4.x < r4.y);
        if (r4.x != 0) {
          r4.xyz = r3.xyz * cb0[11].www + cb0[11].xyz;
          r3.w = t15.SampleLevel(s12_s, r4.xyz, 0).x;
        } else {
          r3.w = cb0[3].x;
        }
      }
    }
  }
  r3.w = r3.w / cb5[16].z;
  r3.w = saturate(1 + -r3.w);
  r3.w = max(9.99999997e-007, r3.w);
  r3.w = log2(r3.w);
  r3.w = cb5[16].w * r3.w;
  r3.w = exp2(r3.w);
  r1.xy = r1.xy / r1.ww;
  r1.xy = r1.xy * cb1[52].xy + cb1[52].wz;
  r4.x = t10.SampleLevel(s8_s, r1.xy, 0).x;
  r4.x = r4.x * cb1[51].z + -cb1[51].w;
  r4.x = 1 / r4.x;
  r4.x = -r1.z * 1 + r4.x;
  r4.y = saturate(r4.x / cb5[17].y);
  r4.y = 1 + -r4.y;
  r4.y = max(9.99999997e-007, r4.y);
  r4.y = log2(r4.y);
  r4.y = cb5[17].z * r4.y;
  r4.y = exp2(r4.y);
  r5.xyz = -cb5[6].xyz + cb5[5].xyz;
  r5.xyz = r4.yyy * r5.xyz + cb5[6].xyz;
  r4.y = 1 + -r4.y;
  r4.z = cb5[17].w * cb2[11].z;
  r6.xyzw = r3.xyxy / cb5[18].xxxx;
  r7.xyzw = r4.zzzz * float4(0.100000001,0.100000001,-0.100000001,-0.100000001) + r6.zwzw;
  r4.w = t4.Sample(s2_s, r7.xy).z;
  r7.zw = float2(0.418099999,0.354799986) + r7.zw;
  r5.w = t4.Sample(s2_s, r7.zw).z;
  r4.w = r5.w + r4.w;
  r6.xyzw = r4.zzzz * float4(-0.100000001,0.100000001,0.100000001,-0.100000001) + r6.xyzw;
  r6.xyzw = float4(0.864861012,0.148384005,0.651340008,0.751637995) + r6.xyzw;
  r4.z = t4.Sample(s2_s, r6.xy).z;
  r5.w = t4.Sample(s2_s, r6.zw).z;
  r4.z = r5.w + r4.z;
  r4.z = r4.w + r4.z;
  r4.z = 0.25 * r4.z;
  r4.z = max(9.99999997e-007, abs(r4.z));
  r4.z = log2(r4.z);
  r4.z = cb5[18].y * r4.z;
  r4.z = exp2(r4.z);
  r7.xy = t5.Sample(s3_s, r7.xy).xy;
  r8.xy = r7.xy * float2(2,2) + float2(-1,-1);
  r4.w = dot(r8.xy, r8.xy);
  r4.w = 1 + -r4.w;
  r4.w = max(0, r4.w);
  r8.z = sqrt(r4.w);
  r7.xy = t5.Sample(s3_s, r7.zw).xy;
  r7.xy = r7.xy * float2(2,2) + float2(-1,-1);
  r4.w = dot(r7.xy, r7.xy);
  r4.w = 1 + -r4.w;
  r4.w = max(0, r4.w);
  r7.z = sqrt(r4.w);
  r7.xyz = r8.xyz + r7.xyz;
  r6.xy = t5.Sample(s3_s, r6.xy).xy;
  r8.xy = r6.xy * float2(2,2) + float2(-1,-1);
  r4.w = dot(r8.xy, r8.xy);
  r4.w = 1 + -r4.w;
  r4.w = max(0, r4.w);
  r8.z = sqrt(r4.w);
  r6.xy = t5.Sample(s3_s, r6.zw).xy;
  r6.xy = r6.xy * float2(2,2) + float2(-1,-1);
  r4.w = dot(r6.xy, r6.xy);
  r4.w = 1 + -r4.w;
  r4.w = max(0, r4.w);
  r6.z = sqrt(r4.w);
  r6.xyz = r8.xyz + r6.xyz;
  r6.xyz = r7.xyz + r6.xyz;
  r6.xy = cb5[18].ww * r6.xy;
  r6.xyz = float3(0.25,0.25,0.25) * r6.xyz;
  r4.w = dot(r6.xyz, r6.xyz);
  r4.w = sqrt(r4.w);
  r6.xyz = r6.xyz / r4.www;
  r4.w = dot(r6.xyz, r2.xyz);
  r4.w = max(0, r4.w);
  r4.w = 1 + -r4.w;
  r4.w = max(9.99999997e-007, abs(r4.w));
  r5.w = r4.w * r4.w;
  r5.w = r5.w * r5.w;
  r4.w = r5.w * r4.w;
  r4.w = r4.w * 0.959999979 + 0.0399999991;
  r4.z = cb5[18].z * r4.z + r4.w;
  r6.xyz = cb5[8].xyz * r4.yyy + -r5.xyz;
  r5.xyz = r4.zzz * r6.xyz + r5.xyz;
  r4.y = cb5[19].x * cb2[11].z;
  r6.xyzw = r3.xyxy / cb5[19].yyyy;
  r7.xyzw = r4.yyyy * float4(0.100000001,0.100000001,-0.100000001,-0.100000001) + r6.zwzw;
  r7.xy = t6.Sample(s4_s, r7.xy).xy;
  r8.xy = r7.xy * float2(2,2) + float2(-1,-1);
  r4.z = dot(r8.xy, r8.xy);
  r4.z = 1 + -r4.z;
  r4.z = max(0, r4.z);
  r8.z = sqrt(r4.z);
  r7.xy = float2(0.418099999,0.354799986) + r7.zw;
  r7.xy = t6.Sample(s4_s, r7.xy).xy;
  r7.xy = r7.xy * float2(2,2) + float2(-1,-1);
  r4.z = dot(r7.xy, r7.xy);
  r4.z = 1 + -r4.z;
  r4.z = max(0, r4.z);
  r7.z = sqrt(r4.z);
  r7.xyz = r8.xyz + r7.xyz;
  r6.xyzw = r4.yyyy * float4(-0.100000001,0.100000001,0.100000001,-0.100000001) + r6.xyzw;
  r6.xyzw = float4(0.864861012,0.148384005,0.651340008,0.751637995) + r6.xyzw;
  r4.yz = t6.Sample(s4_s, r6.xy).xy;
  r8.xy = r4.yz * float2(2,2) + float2(-1,-1);
  r4.y = dot(r8.xy, r8.xy);
  r4.y = 1 + -r4.y;
  r4.y = max(0, r4.y);
  r8.z = sqrt(r4.y);
  r4.yz = t6.Sample(s4_s, r6.zw).xy;
  r6.xy = r4.yz * float2(2,2) + float2(-1,-1);
  r4.y = dot(r6.xy, r6.xy);
  r4.y = 1 + -r4.y;
  r4.y = max(0, r4.y);
  r6.z = sqrt(r4.y);
  r6.xyz = r8.xyz + r6.xyz;
  r6.xyz = r7.xyz + r6.xyz;
  r6.xy = cb5[19].zz * r6.xy;
  r6.xyz = float3(0.25,0.25,0.25) * r6.xyz;
  r4.y = dot(r6.xyz, r6.xyz);
  r4.y = sqrt(r4.y);
  r6.xyzw = r6.xyxy / r4.yyyy;
  r6.xyzw = r6.xyzw * cb5[19].wwww + v2.xyxy;
  r4.yz = cb5[20].xx * r6.zw;
  r4.yz = cb5[20].yy * r4.yz;
  r5.w = -0.5 * cb5[20].z;
  r7.x = cb5[20].z * cb5[20].w + r5.w;
  r8.x = dot(v0.xyz, r2.xyz);
  r8.y = dot(r0.xyz, r2.xyz);
  r0.xy = r8.xy * r7.xx + r4.yz;
  r0.xyz = t7.Sample(s5_s, r0.xy).xyz;
  r7.xyzw = cb5[21].xxzz * r6.zwzw;
  r7.xyzw = cb5[20].yyyy * r7.xyzw;
  r2.xy = cb5[20].zz * cb5[21].yw + r5.ww;
  r7.xyzw = r8.xyxy * r2.xxyy + r7.xyzw;
  r2.xyz = t7.Sample(s5_s, r7.xy).xyz;
  r0.xyz = r2.xyz * float3(0.75,0.75,0.75) + r0.xyz;
  r2.xyz = t7.Sample(s5_s, r7.zw).xyz;
  r6.xyzw = cb5[22].xxzz * r6.xyzw;
  r4.yz = cb5[20].yy * r6.xy;
  r5.w = cb5[20].z * cb5[22].y + r5.w;
  r4.yz = r8.xy * r5.ww + r4.yz;
  r7.xyz = t7.Sample(s5_s, r4.yz).xyz;
  r7.xyz = float3(0.25,0.25,0.25) * r7.xyz;
  r2.xyz = r2.xyz * float3(0.5,0.5,0.5) + r7.xyz;
  r0.xyz = r2.xyz + r0.xyz;
  r2.xy = r6.zw * r6.xy;
  r2.z = cb5[22].w * 0.0500000007 + -0.0250000004;
  r2.xy = r8.xy * r2.zz + r2.xy;
  r2.x = t8.Sample(s6_s, r2.xy).z;
  r0.xyz = r2.xxx * r0.xyz;
  r2.x = 1 + -r4.w;
  r0.xyz = r2.xxx * r0.xyz;
  r2.xyz = cb5[10].xyz + -r5.xyz;
  r0.xyz = r0.xyz * r2.xyz + r5.xyz;
  r0.xyz = r3.www * cb5[2].xyz + r0.xyz;
  if (r2.w != 0) {
    r2.xyz = r3.xyz * cb0[8].www + cb0[8].xyz;
    r2.x = t12.SampleLevel(s9_s, r2.xyz, 0).x;
  } else {
    r2.yzw = -cb0[5].xyz + r3.xyz;
    r2.yzw = cb0[5].www + r2.yzw;
    r2.yzw = max(float3(0,0,0), r2.yzw);
    r4.yzw = cb0[5].xyz + cb0[5].www;
    r4.yzw = r4.yzw + -r3.xyz;
    r4.yzw = max(float3(0,0,0), r4.yzw);
    r2.yzw = min(r4.yzw, r2.yzw);
    r2.z = min(r2.z, r2.w);
    r2.y = min(r2.y, r2.z);
    r2.z = cb0[12].y * cb0[5].w;
    r2.y = cmp(r2.z < r2.y);
    if (r2.y != 0) {
      r2.yzw = r3.xyz * cb0[9].www + cb0[9].xyz;
      r2.x = t13.SampleLevel(s10_s, r2.yzw, 0).x;
    } else {
      r2.yzw = -cb0[6].xyz + r3.xyz;
      r2.yzw = cb0[6].www + r2.yzw;
      r2.yzw = max(float3(0,0,0), r2.yzw);
      r4.yzw = cb0[6].xyz + cb0[6].www;
      r4.yzw = r4.yzw + -r3.xyz;
      r4.yzw = max(float3(0,0,0), r4.yzw);
      r2.yzw = min(r4.yzw, r2.yzw);
      r2.z = min(r2.z, r2.w);
      r2.y = min(r2.y, r2.z);
      r4.yzw = -cb0[7].xyz + r3.xyz;
      r4.yzw = cb0[7].www + r4.yzw;
      r4.yzw = max(float3(0,0,0), r4.yzw);
      r5.xyz = cb0[7].xyz + cb0[7].www;
      r5.xyz = r5.xyz + -r3.xyz;
      r5.xyz = max(float3(0,0,0), r5.xyz);
      r4.yzw = min(r5.xyz, r4.yzw);
      r2.z = min(r4.z, r4.w);
      r2.z = min(r4.y, r2.z);
      r2.w = cb0[12].y * cb0[6].w;
      r2.y = cmp(r2.w < r2.y);
      if (r2.y != 0) {
        r4.yzw = r3.xyz * cb0[10].www + cb0[10].xyz;
        r2.x = t14.SampleLevel(s11_s, r4.yzw, 0).x;
      } else {
        r2.y = cb0[12].y * cb0[7].w;
        r2.y = cmp(r2.y < r2.z);
        if (r2.y != 0) {
          r2.yzw = r3.xyz * cb0[11].www + cb0[11].xyz;
          r2.x = t15.SampleLevel(s12_s, r2.yzw, 0).x;
        } else {
          r2.x = cb0[3].x;
        }
      }
    }
  }
  r2.y = cb5[23].x * abs(r4.x);
  r2.x = min(r2.x, r2.y);
  r2.y = cb5[23].z * cb2[11].z;
  r4.y = frac(r2.y);
  r5.xy = r2.xx / cb5[23].yw;
  r4.xw = float2(0,0);
  r5.z = 0;
  r2.yz = r5.zy + r4.xy;
  r2.w = cb5[24].x * cb2[11].z;
  r4.z = 0.300000012 * r2.w;
  r4.xy = r3.xy / cb5[24].yy;
  r4.zw = r4.zw + r4.xy;
  r2.w = t8.Sample(s6_s, r4.zw).x;
  r4.xy = cb2[11].zz * float2(-0.0260000005,-0.0599999987) + r4.xy;
  r3.w = t8.Sample(s6_s, r4.xy).y;
  r2.w = -r2.w * r3.w + 1;
  r2.yz = r2.yz + r2.ww;
  r2.y = t9.Sample(s7_s, r2.yz).x;
  r2.y = max(9.99999997e-007, abs(r2.y));
  r2.y = log2(r2.y);
  r2.y = cb5[24].z * r2.y;
  r2.y = exp2(r2.y);
  r2.x = r2.x / cb5[24].w;
  r2.x = r2.w + -r2.x;
  r2.x = r5.x * r2.y + r2.x;
  r2.x = saturate(1 + r2.x);
  r2.y = saturate(cb5[25].x);
  r2.y = 1 + -r2.y;
  r2.z = max(9.99999975e-005, cb5[25].y);
  r2.w = -r2.z * 0.5 + r2.y;
  r2.x = r2.x + -r2.w;
  r2.y = r2.z * 0.5 + r2.y;
  r2.y = r2.y + -r2.w;
  r2.x = saturate(r2.x / r2.y);
  r2.yzw = cb5[12].xyz + -r0.xyz;
  r0.xyz = r2.xxx * r2.yzw + r0.xyz;
  r0.xyz = cb5[25].zzz * r0.xyz;
  r0.xyz = r0.www * r0.xyz + cb5[13].xyz;
  r0.w = t3.Sample(s1_s, r1.xy).x;
  r0.w = cmp(r0.w == 0.000000);
  if (r0.w != 0) {
    r2.xyz = -cb1[53].xyz + r3.xyz;
    r4.xyz = cb1[1].xyw * r2.yyy;
    r4.xyz = r2.xxx * cb1[0].xyw + r4.xyz;
    r4.xyz = r2.zzz * cb1[2].xyw + r4.xyz;
    r4.xyz = cb1[3].xyw + r4.xyz;
    r4.xy = r4.xy / r4.zz;
    r0.w = dot(r2.xyz, r2.xyz);
    r0.w = sqrt(r0.w);
    r0.w = saturate(cb4[10].z * r0.w);
    r0.w = log2(r0.w);
    r0.w = cb4[11].x * r0.w;
    r4.z = exp2(r0.w);
    r2.xyz = r4.xyz * float3(0.5,-0.5,1) + float3(0.5,0.5,0);
    r2.xyz = r2.xyz * cb4[15].xyz + cb4[14].xyz;
    r2.xyzw = t11.SampleLevel(s0_s, r2.xyz, 0).xyzw;
  } else {
    r0.w = -cb4[15].w + r3.z;
    r1.x = saturate(cb4[16].x * r0.w);
    r1.y = 0;
    r4.xyz = t0.SampleLevel(s0_s, r1.xy, 0).xyz;
    r5.xyz = cb4[23].xyz + -r4.xyz;
    r4.xyz = cb4[22].xxx * r5.xyz + r4.xyz;
    r5.xyz = t1.SampleLevel(s0_s, r1.xy, 0).yzw;
    r6.xyz = cb4[24].yzw + -r5.xyz;
    r5.xyz = cb4[22].yyy * r6.xyz + r5.xyz;
    r5.xz = float2(1,1) / r5.xz;
    r6.xyzw = t2.SampleLevel(s0_s, r1.xy, 0).xyzw;
    r7.xyzw = cb4[25].xyzw + -r6.xyzw;
    r6.xyzw = cb4[22].yyyy * r7.xyzw + r6.xyzw;
    r0.w = saturate(r5.x * r1.w);
    r0.w = log2(r0.w);
    r0.w = r6.x * r0.w;
    r0.w = exp2(r0.w);
    r1.x = r1.z * 1 + -r5.y;
    r1.x = saturate(r1.x * r5.z);
    r1.x = log2(r1.x);
    r1.x = r6.y * r1.x;
    r1.x = exp2(r1.x);
    r1.x = r1.x * r6.w;
    r0.w = saturate(r0.w * r6.z + r1.x);
    r2.xyz = r4.xyz * r0.www;
    r2.w = 1 + -r0.w;
  }
  r0.xyz = max(float3(0,0,0), r0.xyz);
  r0.w = cmp(0 < cb2[9].x);
  if (r0.w != 0) {
    r1.xyz = -cb3[8].xyz + r3.xyz;
    r4.xyz = float3(1,1,1) + cb3[9].xyz;
    r1.xyz = cmp(r4.xyz < abs(r1.xyz));
    r0.w = (int)r1.y | (int)r1.x;
    r0.w = (int)r1.z | (int)r0.w;
    r1.x = dot(r3.xyz, float3(0.577000022,0.577000022,0.577000022));
    r1.x = 0.00200000009 * r1.x;
    r1.x = frac(r1.x);
    r1.x = cmp(0.5 < r1.x);
    r1.xyz = r1.xxx ? float3(0,1,1) : float3(1,1,0);
    r0.xyz = r0.www ? r1.xyz : r0.xyz;
  }
  o0.xyz = r0.xyz * r2.www + r2.xyz;
  o0.w = 1;
  return;
}
