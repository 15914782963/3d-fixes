// Caustics on blue tiles above water
// ---- Created with 3Dmigoto v1.2.42 on Mon Dec 12 07:52:05 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[6];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[12];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[57];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[24];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 s = StereoParams.Load(0);

  r0.xy = cb2[3].zw * v0.xy;
  r0.x = t3.SampleLevel(s3_s, r0.xy, 0).x;
  r1.xyzw = cb0[19].xyzw * v0.yyyy;
  r1.xyzw = v0.xxxx * cb0[18].xyzw + r1.xyzw;
  r1.xyzw = r0.xxxx * cb0[20].xyzw + r1.xyzw;
  r1.xyzw = cb0[21].xyzw + r1.xyzw;
  r0.yzw = r1.yzx / r1.www;

// Fix caustics:
matrix m = MATRIX(cb0, 18);
matrix im = inverse(m);
float4 t = mul(float4(r0.wyz, 1), im);
t.x -= s.x * (t.w - s.y) * cb2[3].x / 2;
r0.yzw = mul(t, m).yzx;

  r1.xyzw = cb1[37].xyzw * v0.yyyy;
  r1.xyzw = v0.xxxx * cb1[36].xyzw + r1.xyzw;
  r1.xyzw = r0.xxxx * cb1[38].xyzw + r1.xyzw;
  r1.xyzw = cb1[39].xyzw + r1.xyzw;
  r1.xyz = r1.xyz / r1.www;

// Potentially fix ambient lighting (unconfirmed):
// Common SVPositionToTranslatedWorld fix:
matrix TranslatedWorldToClip = MATRIX(cb1, 0);
matrix ClipToTranslatedWorld = MATRIX(cb1, 32);
t = mul(r1.xyz, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r1.xyz = mul(t, ClipToTranslatedWorld);

  r1.xyz = -cb1[56].xyz + r1.xyz;
  r1.xyw = cb1[53].xyz + -r1.xyz;
  r0.x = dot(r1.xyw, r1.xyw);
  r0.x = sqrt(r0.x);
  r1.x = cb3[7].z * cb3[7].w + -cb0[23].x;
  r1.x = r1.z + -r1.x;
  r1.x = saturate(cb0[23].y * r1.x);
  r1.y = r1.x * r1.x;
  r1.x = r1.y * r1.x;
  r1.y = 1 + -cb0[23].z;
  r1.x = r1.x * r1.y + cb0[23].z;
  r0.x = cb0[22].x + -r0.x;
  r1.y = 0.200000003 * cb0[22].x;
  r0.x = saturate(r0.x / r1.y);
  r1.y = cmp(0 < r1.x);
  r1.z = cmp(0 < r0.x);
  r1.y = r1.z ? r1.y : 0;
  r1.z = cb0[13].x * r0.w;
  r2.xyzw = r0.zyzy / r1.zzzz;
  r2.xyzw = r2.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
  r1.zw = cmp(float2(0,0) < cb0[13].zw);
  r3.x = dot(r0.yzw, r0.yzw);
  r3.x = rsqrt(r3.x);
  r3.xyz = r3.xxx * r0.yzw;
  r0.w = min(abs(r3.x), abs(r3.y));
  r3.w = max(abs(r3.x), abs(r3.y));
  r3.w = 1 / r3.w;
  r0.w = r3.w * r0.w;
  r3.w = r0.w * r0.w;
  r4.x = r3.w * 0.0208350997 + -0.0851330012;
  r4.x = r3.w * r4.x + 0.180141002;
  r4.x = r3.w * r4.x + -0.330299497;
  r3.w = r3.w * r4.x + 0.999866009;
  r4.x = r3.w * r0.w;
  r4.y = cmp(abs(r3.y) < abs(r3.x));
  r4.x = r4.x * -2 + 1.57079637;
  r4.x = r4.y ? r4.x : 0;
  r0.w = r0.w * r3.w + r4.x;
  r4.xy = cmp(r3.yz < -r3.yz);
  r3.w = r4.x ? -3.141593 : 0;
  r0.w = r3.w + r0.w;
  r3.w = min(r3.x, r3.y);
  r3.x = max(r3.x, r3.y);
  r3.y = cmp(r3.w < -r3.w);
  r3.x = cmp(r3.x >= -r3.x);
  r3.x = r3.x ? r3.y : 0;
  r0.w = r3.x ? -r0.w : r0.w;
  r0.w = 3.14159274 + r0.w;
  r5.xz = float2(0.159154937,0.159154937) * r0.ww;
  r0.w = 1 + -abs(r3.z);
  r0.w = sqrt(r0.w);
  r3.x = abs(r3.z) * -0.0187292993 + 0.0742610022;
  r3.x = r3.x * abs(r3.z) + -0.212114394;
  r3.x = r3.x * abs(r3.z) + 1.57072878;
  r3.y = r3.x * r0.w;
  r3.y = r3.y * -2 + 3.14159274;
  r3.y = r4.y ? r3.y : 0;
  r0.w = r3.x * r0.w + r3.y;
  r5.yw = float2(0.318309873,0.318309873) * r0.ww;
  r3.xyzw = r1.wwww ? r5.xyzw : r0.zyzy;
  r2.xyzw = r1.zzzz ? r2.xyzw : r3.xyzw;
  r3.xyzw = cb4[4].yyzz * r2.xyzw;
  r4.xz = float2(-0.100000001,-0.0500000007) * cb2[11].zz;
  r4.yw = float2(0,0);
  r0.yz = r3.xy * float2(0.400000006,0.400000006) + r4.xy;
  r0.y = t0.Sample(s0_s, r0.yz).z;
  r0.zw = r2.zw * cb4[4].zz + r4.zw;
  r2.xz = float2(0.075000003,-0.075000003) * cb2[11].zz;
  r2.yw = float2(0,0);
  r2.xyzw = r3.zwzw * float4(0.300000012,0.300000012,0.300000012,0.300000012) + r2.xyzw;
  r1.z = t1.Sample(s1_s, r2.xy).z;
  r1.w = t1.Sample(s1_s, r2.zw).y;
  r1.z = r1.z + r1.w;
  r0.zw = cb4[4].ww * r1.zz + r0.zw;
  r2.xyz = t2.Sample(s2_s, r0.zw).xyz;
  if (r1.y != 0) {
    r0.z = cb4[4].x * 2 + 1;
    r0.y = saturate(r0.y * r0.z + -cb4[4].x);
    r0.y = max(9.99999997e-007, r0.y);
    r0.y = log2(r0.y);
    r0.y = 1.60000002 * r0.y;
    r0.y = exp2(r0.y);
    r1.yzw = cb4[5].xxx * r2.xyz;
    r0.yzw = r0.yyy * r1.yzw + cb4[5].yyy;
    r0.yzw = cb4[1].xyz + r0.yzw;
    r0.yzw = max(float3(0,0,0), r0.yzw);
    r0.y = dot(r0.yzw, float3(0.333299994,0.333299994,0.333299994));
    r0.y = -cb0[22].y + r0.y;
    r0.x = r0.x * r0.y;
    r0.x = cb0[13].y * r0.x + cb0[22].y;
    r0.x = r0.x * r1.x;
  } else {
    r0.x = cb0[22].y * r1.x;
  }
  r0.z = sqrt(r0.x);
  r0.xyw = float3(1,1,1);
  r1.xyzw = r0.zzzz + -r0.wwzw;
  o0.xyzw = cb0[22].zzzz * r1.xyzw + r0.xyzw;
  return;
}
