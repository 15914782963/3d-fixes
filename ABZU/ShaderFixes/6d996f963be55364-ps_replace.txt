// ---- Created with 3Dmigoto v1.2.51 on Sat Dec 24 22:03:10 2016
Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture3D<float4> t1 : register(t1);

Texture3D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[15];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[34];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[12];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[14];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[60];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3 : VELOCITY_PREV_POS0,
  float4 v4 : SV_Position0,
  uint v5 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4,
  out float4 o5 : SV_Target5)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb1[1].xy + v4.xy;
  r1.xy = r1.xy * cb1[2].zw + float2(-0.5,-0.5);
  r1.xy = v4.ww * r1.xy;
  r1.z = v4.w;
  r1.xyz = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb0[37].xyzw * v4.yyyy;
  r2.xyzw = v4.xxxx * cb0[36].xyzw + r2.xyzw;
  r2.xyzw = v4.zzzz * cb0[38].xyzw + r2.xyzw;
  r2.xyzw = cb0[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

// Common SVPositionToTranslatedWorld fix:
float4 s = StereoParams.Load(0);
matrix TranslatedWorldToClip = MATRIX(cb0, 0);
matrix ClipToTranslatedWorld = MATRIX(cb0, 32);
float4 t = mul(r2.xyz, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r2.xyz = mul(t, ClipToTranslatedWorld);

  r3.xyz = -cb0[56].xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r2.xyz = -r2.xyz / r0.www;
  r0.w = cb2[9].w * cb1[10].w;
  r1.w = v5.x ? 1 : -1;
  r0.w = r1.w * r0.w;
  r4.xy = cb4[11].xx * v2.xy;
  r4.xy = t3.Sample(s1_s, r4.xy).xy;
  r4.xy = r4.xy * float2(2,2) + float2(-1,-1);
  r1.w = dot(r4.xy, r4.xy);
  r1.w = 1 + -r1.w;
  r1.w = max(0, r1.w);
  r4.z = sqrt(r1.w);
  r5.x = cb4[11].y;
  r5.z = 1;
  r4.xyz = r5.xxz * r4.xyz;
  r1.w = dot(r4.xyz, r4.xyz);
  r1.w = sqrt(r1.w);
  r4.xyz = r4.xyz / r1.www;
  r4.xyz = r4.xyz * cb1[7].www + cb1[7].xyz;
  r4.xyz = r4.xyz * r0.www;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.xyz = r4.yyy * r0.xyz;
  r0.xyz = r4.xxx * v0.xyz + r0.xyz;
  r0.xyz = r4.zzz * v1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(r0.xyz, r2.xyz);
  r0.w = max(0, r0.w);
  r0.w = 1 + -r0.w;
  r0.w = max(9.99999997e-007, abs(r0.w));
  r1.w = log2(r0.w);
  r1.w = cb4[11].z * r1.w;
  r1.w = exp2(r1.w);
  r1.w = r1.w * 0.959999979 + 0.0399999991;
  r2.xyz = -cb3[4].xyz + r3.xyz;
  r2.xyz = saturate(cb3[5].xyz * r2.xyz);
  r4.xyz = t0.SampleLevel(s0_s, r2.xyz, 0).xyz;
  r5.xyz = cb3[32].xyz + -r4.xyz;
  r4.xyz = cb3[28].zzz * r5.xyz + r4.xyz;
  r2.xyz = t1.SampleLevel(s0_s, r2.xyz, 0).xyz;
  r5.xyz = cb3[33].xyz + -r2.xyz;
  r2.xyz = cb3[28].www * r5.xyz + r2.xyz;
  r2.w = cb3[6].w + -r3.z;
  r2.w = r2.w / -cb3[9].z;
  r5.xy = -cb3[9].xy * r2.ww + r3.xy;
  r5.xy = -cb3[4].xy + r5.xy;
  r5.xy = saturate(cb3[5].xy * r5.xy);
  r2.w = t2.SampleLevel(s0_s, r5.xy, 0).y;
  r2.xyz = r2.xyz + -r4.xyz;
  r2.xyz = r2.www * r2.xyz + r4.xyz;
  r4.xy = cb4[12].yy * v2.xy;
  r4.xyz = t4.Sample(s2_s, r4.xy).xyz;
  r4.xyz = max(float3(9.99999997e-007,9.99999997e-007,9.99999997e-007), abs(r4.xyz));
  r4.xyz = log2(r4.xyz);
  r4.xyz = cb4[12].zzz * r4.xyz;
  r4.xyz = exp2(r4.xyz);
  r4.xyz = cb4[12].www * r4.xyz;
  r4.xyz = r4.xyz * cb4[2].xyz + cb4[12].xxx;
  r4.xyz = cb4[5].xyz + r4.xyz;
  r2.xyz = r1.www * r2.xyz + r4.xyz;
  r1.w = r0.w * r0.w;
  r1.w = r1.w * r1.w;
  r0.w = r1.w * r0.w;
  r0.w = r0.w * 0.959999979 + 0.0399999991;
  r4.xyz = r0.www * float3(8,6.325912,0.871464014) + -r2.xyz;
  r2.xyz = cb4[13].yyy * r4.xyz + r2.xyz;
  r2.xyz = cb4[6].xyz + r2.xyz;
  r4.xy = cb4[13].zz * v2.xy;
  r4.xyz = t5.Sample(s3_s, r4.xy).xyz;
  r4.xyz = cb4[10].xyz * r4.xyz;
  r5.xyz = saturate(cb4[7].xyz * r4.xyz);
  r6.xy = cb4[14].xx * v2.xy;
  r6.y = t6.Sample(s4_s, r6.xy).x;
  r6.x = saturate(cb4[13].w);
  r6.y = saturate(r6.y);
  r7.xw = saturate(cb4[14].yz);
  o2.z = r7.x * cb1[8].y + cb1[8].x;
  r4.xyz = saturate(cb4[14].www * r4.xyz);
  r4.xyz = saturate(r4.xyz * cb1[5].www + cb1[5].xyz);
  r8.xyz = -r5.xyz * r6.xxx + r5.xyz;
  r0.w = 0.0799999982 * r6.y;
  r9.xyz = -r6.yyy * float3(0.0799999982,0.0799999982,0.0799999982) + r5.xyz;
  r9.xyz = r6.xxx * r9.xyz + r0.www;
  r8.xyz = r8.xyz * cb1[5].www + cb1[5].xyz;
  r9.xyz = r9.xyz * cb1[6].www + cb1[6].xyz;
  r8.xyz = r9.xyz + r8.xyz;
  r7.xyz = max(float3(0,0,0), r2.xyz);
  r0.w = cmp(0 < cb1[9].x);
  if (r0.w != 0) {
    r2.xyz = -cb2[8].xyz + r3.xyz;
    r9.xyz = float3(1,1,1) + cb2[9].xyz;
    r2.xyz = cmp(r9.xyz < abs(r2.xyz));
    r0.w = (int)r2.y | (int)r2.x;
    r0.w = (int)r2.z | (int)r0.w;
    r1.w = dot(r3.xyz, float3(0.577000022,0.577000022,0.577000022));
    r1.w = 0.00200000009 * r1.w;
    r1.w = frac(r1.w);
    r1.w = cmp(0.5 < r1.w);
    r2.yzw = r1.www ? float3(0,1,1) : float3(1,1,0);
    r2.x = 1;
    r7.xyzw = r0.wwww ? r2.yzwx : r7.xyzw;
    o5.w = r7.w;
  } else {
    o5.w = r7.w;
  }
  o0.xyz = cb1[13].xxx * r8.xyz + r7.xyz;
  o5.xyz = sqrt(r4.xyz);
  r1.xy = r1.xy / r1.zz;
  r1.xy = -cb0[26].xy + r1.xy;
  r1.zw = v3.xy / v3.ww;
  r1.zw = -cb0[59].xy + r1.zw;
  r1.xy = r1.xy + -r1.zw;
  r1.xy = r1.xy * float2(0.249500006,0.249500006) + float2(0.499992371,0.499992371);
  o4.xy = v3.zz * r1.xy;
  o4.zw = float2(0,0);
  o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.w = 0;
  o1.w = cb2[11].x;
  o2.w = 0.13333334;
  o2.xy = r6.xy;
  o3.xyz = r5.xyz;
  o3.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.51 on Sat Dec 24 22:03:10 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// VELOCITY_PREV_POS        0   xyzw        3     NONE   float   xyzw
// SV_Position              0   xyzw        4      POS   float   xyzw
// SV_IsFrontFace           0   x           5    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
// SV_Target                5   xyzw        5   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[60], immediateIndexed
dcl_constantbuffer cb1[14], immediateIndexed
dcl_constantbuffer cb2[12], immediateIndexed
dcl_constantbuffer cb3[34], immediateIndexed
dcl_constantbuffer cb4[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyzw
dcl_input_ps_siv linear noperspective v4.xyzw, position
dcl_input_ps_sgv v5.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 10
mul r0.xyz, v0.yzxy, v1.zxyz
mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v1.wwww
add r1.xy, v4.xyxx, -cb1[1].xyxx
mad r1.xy, r1.xyxx, cb1[2].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.xy, r1.xyxx, v4.wwww
mov r1.z, v4.w
mul r1.xyz, r1.xyzx, l(2.000000, -2.000000, 1.000000, 0.000000)
mul r2.xyzw, v4.yyyy, cb0[37].xyzw
mad r2.xyzw, v4.xxxx, cb0[36].xyzw, r2.xyzw
mad r2.xyzw, v4.zzzz, cb0[38].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[39].xyzw
div r2.xyz, r2.xyzx, r2.wwww
add r3.xyz, r2.xyzx, -cb0[56].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
div r2.xyz, -r2.xyzx, r0.wwww
mul r0.w, cb1[10].w, cb2[9].w
movc r1.w, v5.x, l(1.000000), l(-1.000000)
mul r0.w, r0.w, r1.w
mul r4.xy, v2.xyxx, cb4[11].xxxx
sample_indexable(texture2d)(float,float,float,float) r4.xy, r4.xyxx, t3.xyzw, s1
mad r4.xy, r4.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r4.xyxx, r4.xyxx
add r1.w, -r1.w, l(1.000000)
max r1.w, r1.w, l(0.000000)
sqrt r4.z, r1.w
mov r5.x, cb4[11].y
mov r5.z, l(1.000000)
mul r4.xyz, r4.xyzx, r5.xxzx
dp3 r1.w, r4.xyzx, r4.xyzx
sqrt r1.w, r1.w
div r4.xyz, r4.xyzx, r1.wwww
mad r4.xyz, r4.xyzx, cb1[7].wwww, cb1[7].xyzx
mul r4.xyz, r0.wwww, r4.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
mul r0.xyz, r0.xyzx, r4.yyyy
mad r0.xyz, r4.xxxx, v0.xyzx, r0.xyzx
mad r0.xyz, r4.zzzz, v1.xyzx, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r0.xyzx, r2.xyzx
max r0.w, r0.w, l(0.000000)
add r0.w, -r0.w, l(1.000000)
max r0.w, |r0.w|, l(0.000001)
log r1.w, r0.w
mul r1.w, r1.w, cb4[11].z
exp r1.w, r1.w
mad r1.w, r1.w, l(0.960000), l(0.040000)
add r2.xyz, r3.xyzx, -cb3[4].xyzx
mul_sat r2.xyz, r2.xyzx, cb3[5].xyzx
sample_l_indexable(texture3d)(float,float,float,float) r4.xyz, r2.xyzx, t0.xyzw, s0, l(0.000000)
add r5.xyz, -r4.xyzx, cb3[32].xyzx
mad r4.xyz, cb3[28].zzzz, r5.xyzx, r4.xyzx
sample_l_indexable(texture3d)(float,float,float,float) r2.xyz, r2.xyzx, t1.xyzw, s0, l(0.000000)
add r5.xyz, -r2.xyzx, cb3[33].xyzx
mad r2.xyz, cb3[28].wwww, r5.xyzx, r2.xyzx
add r2.w, -r3.z, cb3[6].w
div r2.w, r2.w, -cb3[9].z
mad r5.xy, -cb3[9].xyxx, r2.wwww, r3.xyxx
add r5.xy, r5.xyxx, -cb3[4].xyxx
mul_sat r5.xy, r5.xyxx, cb3[5].xyxx
sample_l_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t2.xzwy, s0, l(0.000000)
add r2.xyz, -r4.xyzx, r2.xyzx
mad r2.xyz, r2.wwww, r2.xyzx, r4.xyzx
mul r4.xy, v2.xyxx, cb4[12].yyyy
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t4.xyzw, s2
max r4.xyz, |r4.xyzx|, l(0.000001, 0.000001, 0.000001, 0.000000)
log r4.xyz, r4.xyzx
mul r4.xyz, r4.xyzx, cb4[12].zzzz
exp r4.xyz, r4.xyzx
mul r4.xyz, r4.xyzx, cb4[12].wwww
mad r4.xyz, r4.xyzx, cb4[2].xyzx, cb4[12].xxxx
add r4.xyz, r4.xyzx, cb4[5].xyzx
mad r2.xyz, r1.wwww, r2.xyzx, r4.xyzx
mul r1.w, r0.w, r0.w
mul r1.w, r1.w, r1.w
mul r0.w, r0.w, r1.w
mad r0.w, r0.w, l(0.960000), l(0.040000)
mad r4.xyz, r0.wwww, l(8.000000, 6.325912, 0.871464, 0.000000), -r2.xyzx
mad r2.xyz, cb4[13].yyyy, r4.xyzx, r2.xyzx
add r2.xyz, r2.xyzx, cb4[6].xyzx
mul r4.xy, v2.xyxx, cb4[13].zzzz
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t5.xyzw, s3
mul r4.xyz, r4.xyzx, cb4[10].xyzx
mul_sat r5.xyz, r4.xyzx, cb4[7].xyzx
mul r6.xy, v2.xyxx, cb4[14].xxxx
sample_indexable(texture2d)(float,float,float,float) r6.y, r6.xyxx, t6.yxzw, s4
mov_sat r6.x, cb4[13].w
mov_sat r6.y, r6.y
mov_sat r7.xw, cb4[14].yyyz
mad o2.z, r7.x, cb1[8].y, cb1[8].x
mul_sat r4.xyz, r4.xyzx, cb4[14].wwww
mad_sat r4.xyz, r4.xyzx, cb1[5].wwww, cb1[5].xyzx
mad r8.xyz, -r5.xyzx, r6.xxxx, r5.xyzx
mul r0.w, r6.y, l(0.080000)
mad r9.xyz, -r6.yyyy, l(0.080000, 0.080000, 0.080000, 0.000000), r5.xyzx
mad r9.xyz, r6.xxxx, r9.xyzx, r0.wwww
mad r8.xyz, r8.xyzx, cb1[5].wwww, cb1[5].xyzx
mad r9.xyz, r9.xyzx, cb1[6].wwww, cb1[6].xyzx
add r8.xyz, r8.xyzx, r9.xyzx
max r7.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb1[9].x
if_nz r0.w
  add r2.xyz, r3.xyzx, -cb2[8].xyzx
  add r9.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r2.xyz, r9.xyzx, |r2.xyzx|
  or r0.w, r2.y, r2.x
  or r0.w, r2.z, r0.w
  dp3 r1.w, r3.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.w, r1.w, l(0.002000)
  frc r1.w, r1.w
  lt r1.w, l(0.500000), r1.w
  movc r2.yzw, r1.wwww, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r2.x, l(1.000000)
  movc r7.xyzw, r0.wwww, r2.yzwx, r7.xyzw
  mov o5.w, r7.w
else 
  mov o5.w, r7.w
endif 
mad o0.xyz, cb1[13].xxxx, r8.xyzx, r7.xyzx
sqrt o5.xyz, r4.xyzx
div r1.xy, r1.xyxx, r1.zzzz
add r1.xy, r1.xyxx, -cb0[26].xyxx
div r1.zw, v3.xxxy, v3.wwww
add r1.zw, r1.zzzw, -cb0[59].xxxy
add r1.xy, -r1.zwzz, r1.xyxx
mad r1.xy, r1.xyxx, l(0.249500, 0.249500, 0.000000, 0.000000), l(0.499992371, 0.499992371, 0.000000, 0.000000)
mul o4.xy, r1.xyxx, v3.zzzz
mov o4.zw, l(0,0,0,0)
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0)
mov o1.w, cb2[11].x
mov o2.w, l(0.133333340)
mov o2.xy, r6.xyxx
mov o3.xyz, r5.xyzx
mov o3.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
