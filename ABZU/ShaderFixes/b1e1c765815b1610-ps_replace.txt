// ---- Created with 3Dmigoto v1.2.44 on Mon Oct 03 04:14:50 2016
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[6];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[12];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[14];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[60];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : COLOR0,
  float4 v3 : TEXCOORD0,
  float4 v4 : VELOCITY_PREV_POS0,
  float4 v5 : SV_Position0,
  uint v6 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4,
  out float4 o5 : SV_Target5)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xy = -cb1[1].xy + v5.xy;
  r1.xy = r1.xy * cb1[2].zw + float2(-0.5,-0.5);
  r1.xy = v5.ww * r1.xy;
  r1.z = v5.w;
  r1.xyz = float3(2,-2,1) * r1.xyz;
  r2.xyzw = cb0[37].xyzw * v5.yyyy;
  r2.xyzw = v5.xxxx * cb0[36].xyzw + r2.xyzw;
  r2.xyzw = v5.zzzz * cb0[38].xyzw + r2.xyzw;
  r2.xyzw = cb0[39].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

// Common SVPositionToTranslatedWorld fix:
float4 s = StereoParams.Load(0);
matrix TranslatedWorldToClip = MATRIX(cb0, 0);
matrix ClipToTranslatedWorld = MATRIX(cb0, 32);
float4 t = mul(r2.xyz, TranslatedWorldToClip);
t.x -= s.x * (t.w - s.y);
r2.xyz = mul(t, ClipToTranslatedWorld);

  r2.xyz = -cb0[56].xyz + r2.xyz;
  r3.xyz = cb1[7].www * float3(0,0,1) + cb1[7].xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.xyz = r3.yyy * r0.xyz;
  r0.xyz = r3.xxx * v0.xyz + r0.xyz;
  r0.xyz = r3.zzz * v1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r3.xy = cb2[5].xy * r2.yy;
  r3.xy = r2.xx * cb2[4].xy + r3.xy;
  r3.xy = r2.zz * cb2[6].xy + r3.xy;
  r3.xy = r3.xy / cb3[5].xx;
  r3.xyzw = t0.Sample(s0_s, r3.xy).xwyz;
  r4.xyzw = t1.Sample(s1_s, v3.xy).xyzw;
  r0.w = saturate(1 + -v2.x);
  r0.w = 1 + -r0.w;
  r0.w = r4.w + -r0.w;
  r0.w = ceil(r0.w);
  r4.xyz = r4.xyz + -r3.xzw;
  r3.xzw = r0.www * r4.xyz + r3.xzw;
  r3.xzw = saturate(cb3[3].xyz * r3.xzw);
  r3.y = saturate(r3.y);
  r4.xy = saturate(cb3[5].yz);
  o2.z = r4.y * cb1[8].y + cb1[8].x;
  r4.yzw = -r3.xzw * r4.xxx + r3.xzw;
  r0.w = 0.0799999982 * r3.y;
  r5.xyz = -r3.yyy * float3(0.0799999982,0.0799999982,0.0799999982) + r3.xzw;
  r5.xyz = r4.xxx * r5.xyz + r0.www;
  r4.yzw = r4.yzw * cb1[5].www + cb1[5].xyz;
  r5.xyz = r5.xyz * cb1[6].www + cb1[6].xyz;
  r4.yzw = r5.xyz + r4.yzw;
  r5.xyz = max(float3(0,0,0), cb3[2].xyz);
  r0.w = cmp(0 < cb1[9].x);
  if (r0.w != 0) {
    r6.xyz = -cb2[8].xyz + r2.xyz;
    r7.xyz = float3(1,1,1) + cb2[9].xyz;
    r6.xyz = cmp(r7.xyz < abs(r6.xyz));
    r0.w = (int)r6.y | (int)r6.x;
    r0.w = (int)r6.z | (int)r0.w;
    r1.w = dot(r2.xyz, float3(0.577000022,0.577000022,0.577000022));
    r1.w = 0.00200000009 * r1.w;
    r1.w = frac(r1.w);
    r1.w = cmp(0.5 < r1.w);
    r2.xyz = r1.www ? float3(0,1,1) : float3(1,1,0);
    r5.xyz = r0.www ? r2.xyz : r5.xyz;
  }
  o0.xyz = cb1[13].xxx * r4.yzw + r5.xyz;
  r1.xy = r1.xy / r1.zz;
  r1.xy = -cb0[26].xy + r1.xy;
  r1.zw = v4.xy / v4.ww;
  r1.zw = -cb0[59].xy + r1.zw;
  r1.xy = r1.xy + -r1.zw;
  r1.xy = r1.xy * float2(0.249500006,0.249500006) + float2(0.499992371,0.499992371);
  o4.xy = v4.zz * r1.xy;
  o4.zw = float2(0,0);
  o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.w = 0;
  o1.w = cb2[11].x;
  o2.x = r4.x;
  o2.w = 0.129411772;
  o2.y = r3.y;
  o3.xyz = r3.xzw;
  o3.w = 1;
  o5.xyzw = float4(0,0,0,0);
  return;
}
