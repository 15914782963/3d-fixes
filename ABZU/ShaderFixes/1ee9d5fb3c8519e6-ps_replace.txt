// "DiverFoam"

// ---- Created with 3Dmigoto v1.2.44 on Fri Sep 30 18:20:02 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[7];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[12];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[57];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[30];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb0[2].xyzw * v0.yyyy;
  r0.xyzw = v0.xxxx * cb0[1].xyzw + r0.xyzw;
  r1.xy = cb2[3].zw * v0.xy;
  r1.x = t3.SampleLevel(s4_s, r1.xy, 0).x;
  r0.xyzw = r1.xxxx * cb0[3].xyzw + r0.xyzw;
  r0.xyzw = cb0[4].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;

// Correct the foam depth:

float4 s = StereoParams.Load(0);
matrix m = matrix(cb0[1], cb0[2], cb0[3], cb0[4]);
matrix im = inverse(m);
float4 t = mul(float4(r0.xyz, 1), im);
float adj = s.x * (t.w - s.y) * cb2[3].x / 2; // cb2[3].x has the resolution width
t.x -= adj; // Adjusts foam depth
v0.x -= adj / t.w; // Adjusts foam outline (note extra divide by depth)
r0.xyz = mul(t, m);

  r1.yzw = float3(1,1,1) + r0.xyz;
  r1.yzw = cmp(r1.yzw < float3(0,0,0));
  r0.w = (int)r1.z | (int)r1.y;
  r0.w = (int)r1.w | (int)r0.w;
  if (r0.w != 0) discard;
  r1.yzw = float3(1,1,1) + -r0.xyz;
  r1.yzw = cmp(r1.yzw < float3(0,0,0));
  r0.w = (int)r1.z | (int)r1.y;
  r0.w = (int)r1.w | (int)r0.w;
  if (r0.w != 0) discard;
  r1.yzw = cb1[37].xyw * v0.yyy;
  r1.yzw = v0.xxx * cb1[36].xyw + r1.yzw;
  r1.xyz = r1.xxx * cb1[38].xyw + r1.yzw;
  r1.xyz = cb1[39].xyw + r1.xyz;
  r1.xy = r1.xy / r1.zz;
  r1.xy = -cb1[56].xy + r1.xy;
  r1.xy = cb3[4].xx * r1.xy;
  r0.w = t0.Sample(s0_s, r1.xy).x;
  r1.xy = float2(0.5,0.5) * r0.yz;
  r0.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r1.z = max(abs(r1.y), abs(r1.x));
  r1.z = 1 / r1.z;
  r1.w = min(abs(r1.y), abs(r1.x));
  r1.z = r1.w * r1.z;
  r1.w = r1.z * r1.z;
  r2.x = r1.w * 0.0208350997 + -0.0851330012;
  r2.x = r1.w * r2.x + 0.180141002;
  r2.x = r1.w * r2.x + -0.330299497;
  r1.w = r1.w * r2.x + 0.999866009;
  r2.x = r1.z * r1.w;
  r2.x = r2.x * -2 + 1.57079637;
  r2.y = cmp(abs(r1.x) < abs(r1.y));
  r2.x = r2.y ? r2.x : 0;
  r1.z = r1.z * r1.w + r2.x;
  r1.w = cmp(r1.x < -r1.x);
  r1.w = r1.w ? -3.141593 : 0;
  r1.z = r1.z + r1.w;
  r1.w = min(r1.y, r1.x);
  r1.w = cmp(r1.w < -r1.w);
  r2.x = max(r1.y, r1.x);
  r2.x = cmp(r2.x >= -r2.x);
  r1.w = r1.w ? r2.x : 0;
  r1.z = r1.w ? -r1.z : r1.z;
  r2.y = 0.318309963 * r1.z;
  r1.zw = cb3[5].yy * r1.yx;
  r1.zw = r1.zw * r1.zw;
  r1.z = r1.z + r1.w;
  r1.z = sqrt(r1.z);
  r2.x = cb3[5].x * cb2[11].z + r1.z;
  r1.z = t0.Sample(s0_s, r2.xy).x;
  r2.xy = r0.zy / cb3[4].zz;
  r2.xy = float2(0.5,0.5) + r2.xy;
  r1.w = 0.5 / cb3[4].z;
  r2.xy = r2.xy + -r1.ww;
  r1.w = t2.Sample(s2_s, r2.xy).x;
  r2.x = max(9.99999997e-007, abs(r1.w));
  r2.x = log2(r2.x);
  r2.x = cb3[4].w * r2.x;
  r2.x = exp2(r2.x);
  r1.z = saturate(r2.x + r1.z);
  r2.y = cb3[4].y * cb2[11].z;
  r2.yz = float2(0.25,-0.25) * r2.yy;
  sincos(r2.y, r3.x, r4.x);
  sincos(r2.z, r5.x, r6.x);
  r7.x = -r3.x;
  r7.y = r4.x;
  r7.z = r3.x;
  r3.y = dot(r7.yz, r1.xy);
  r3.x = dot(r7.xy, r1.xy);
  r2.yz = float2(0.5,0.5) + r3.xy;
  r2.y = t1.Sample(s1_s, r2.yz).x;
  r3.x = -r5.x;
  r3.y = r6.x;
  r3.z = r5.x;
  r4.y = dot(r3.yz, r1.xy);
  r4.x = dot(r3.xy, r1.xy);
  r1.xy = float2(0.5,0.5) + r4.xy;
  r1.x = t1.Sample(s1_s, r1.xy).x;
  r1.x = saturate(r2.y * r1.x + r2.x);
  r1.x = r1.x * r1.z;
  r1.x = r1.x * r1.w;
  r1.yz = r0.zy / cb3[5].ww;
  r1.yz = float2(0.5,0.5) + r1.yz;
  r1.w = 0.5 / cb3[5].w;
  r1.yz = r1.yz + -r1.ww;
  r1.y = t2.Sample(s3_s, r1.yz).x;
  r0.yz = r0.zy / cb3[6].xx;
  r0.x = r0.x * 2 + -1;
  r0.x = saturate(-abs(r0.x) * 4 + 4);
  r0.yz = float2(0.5,0.5) + r0.yz;
  r1.z = 0.5 / cb3[6].x;
  r0.yz = -r1.zz + r0.yz;
  r0.y = t1.Sample(s3_s, r0.yz).x;
  r0.y = saturate(r1.y + r0.y);
  r0.y = saturate(r0.w * r1.x + -r0.y);
  r0.y = max(9.99999997e-007, r0.y);
  r0.y = log2(r0.y);
  r0.y = cb3[6].y * r0.y;
  r0.y = exp2(r0.y);
  r0.z = saturate(cb3[6].z);
  r0.z = 1 + -r0.z;
  r0.y = r0.y + -r0.z;
  r0.y = ceil(r0.y);
  r1.xyz = cb3[1].xyz + r0.yyy;
  r0.y = saturate(r0.y);
  r0.x = r0.y * r0.x;
  r0.x = cb0[29].x * r0.x;
  o0.xyz = max(float3(0,0,0), r1.xyz);
  o0.w = r0.x;
  o2.w = r0.x;
  o3.w = r0.x;
  o2.z = cb2[8].y * 0.5 + cb2[8].x;
  o2.xy = float2(0,0.5);
  o3.xyz = saturate(cb3[3].xyz);
  return;
}
