// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9b2a267a6bff0745-ps.txt
// 3DMigoto: 9b2a267a6bff0745 | Matched 2 variants of 1 shaders: VFX/AndysGlowSteppedVertical
//
//       Unity headers extracted from VFX_AndysGlowSteppedVertical
//       Shader "VFX/AndysGlowSteppedVertical" {
//         SubShader 1/1 {
//           Tags { "IGNOREPROJECTOR"="true" "QUEUE"="Transparent+2" "RenderType"="Transparent" }
//           Pass 1/1 {
//             Tags { "IGNOREPROJECTOR"="true" "QUEUE"="Transparent+2" "RenderType"="Transparent" }
//             ZWrite Off
//             Program "fp" {
//               SubProgram "d3d11_9x" {
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from VFX_AndysGlowSteppedVertical:
//      API d3d11_9x
//      Shader model ps_4_0_level_9_1
//      undeciphered1: 201608170 31 2 0
//      undeciphered1a: 2
// 2:   Keywords { "SOFTPARTICLES_ON" }
//      undeciphered2: 1 2 2 2 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 112
//      Float 64 [_RimScale]
//      Float 68 [_RimPow]
//      Vector 80 [_Color]
//      Vector 96 [_FadeDistance] 2
//      Float 104 [_InvFade]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      Vector 112 [_ZBufferParams]
//      SetTexture 0 [_CameraDepthTexture] 2D 1
//      SetTexture 1 [_MainTex] 2D 0
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.61 on Wed Jan 03 05:07:12 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 4     z         1     NONE   float     z 
// TEXCOORD                 1   xyzw        2     NONE   float   x z 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             4         3  ( FLT, FLT, FLT, FLT)
// c3         cb1             4         1  ( FLT, FLT, FLT, FLT)
// c4         cb1             7         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t1               
// s1             s1              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
    def c5, 0, 1, 0.5, 0.125
    def c6, 3, 8, 0.25, 0
    dcl t0.xyz
    dcl t1
    dcl t2.xyz
    dcl t3
    dcl_2d s0
    dcl_2d s1
    rcp r0.w, t3.w
    mul r0.xy, r0.w, t3
    texld_pp r1, t0, s0
    texld r0, r0, s1
    mad r0.x, c4.z, r0.x, c4.w
    rcp r0.x, r0.x
    add r0.x, r0.x, -t3.z
    mul_sat r0.x, r0.x, c2.z
    add r0.y, -c2.x, c2.y
    rcp r0.y, r0.y
    add r0.z, t0.z, -c2.x
    mul_sat r0.y, r0.y, r0.z
    mul r0.x, r0.y, r0.x
    add r0.yz, -t1.xxzw, c3.xxzw
    dp2add r0.w, r0.yzzw, r0.yzzw, c5.x
    rsq r0.w, r0.w
    mul r0.yz, r0.w, r0
    dp3 r0.w, t2, t2
    rsq r0.w, r0.w
    mul r2.xy, r0.w, t2.xzzw
    dp2add r0.y, r2, r0.yzzw, c5.y
    mul r0.y, r0.y, c5.z
    pow r2.x, r0.y, c0.y
    mul_sat r0.y, r2.x, c0.x
    mul r0.yz, r0.y, c6.xxyw
    frc r0.w, r0.z
    add r0.z, -r0.w, r0.z
    mad r0.y, r0.z, c5.w, r0.y
    mul r0.y, r0.y, c6.z
    mul_pp r1.w, r0.y, r1.w
    mul_pp r1.w, r0.x, r1.w
    mul_pp r0.xyz, r1.w, r1
    mul_pp r0.xyz, r0, c1
    mov_pp r0.w, c5.y
    mov_pp oC0, r0

// approximately 39 instruction slots used (2 texture, 37 arithmetic)
ps_4_0
dcl_constantbuffer cb0[7], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.z
dcl_input_ps linear v2.xz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyzw
dcl_output o0.xyzw
dcl_temps 4
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r2.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9b2a267a6bff0745-ps.txt

mul r2.w, -r2.x, r2.y
mad r3.xyz, -r2.wwww, cb10[0].xyzw, cb1[4].xyzw

div r0.xy, v4.xyxx, v4.wwww
sample r0.xyzw, r0.xyxx, t0.xyzw, s1
mad r0.x, cb1[7].z, r0.x, cb1[7].w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r0.x, r0.x, -v4.z
mul_sat r0.x, r0.x, cb0[6].z
add r0.y, v1.z, -cb0[6].x
add r0.z, -cb0[6].x, cb0[6].y
div_sat r0.y, r0.y, r0.z
mul r0.x, r0.y, r0.x
add r0.yz, -v2.xxzx, r3.xxzx
dp2 r0.w, r0.yzyy, r0.yzyy
rsq r0.w, r0.w
mul r0.yz, r0.wwww, r0.yyzy
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r1.xy, r0.wwww, v3.xzxx
dp2 r0.y, r1.xyxx, r0.yzyy
add r0.y, r0.y, l(1.000000)
mul r0.y, r0.y, l(0.500000)
log r0.y, r0.y
mul r0.y, r0.y, cb0[4].y
exp r0.y, r0.y
mul_sat r0.y, r0.y, cb0[4].x
mul r0.yz, r0.yyyy, l(0.000000, 3.000000, 8.000000, 0.000000)
round_ni r0.z, r0.z
mad r0.y, r0.z, l(0.125000), r0.y
mul r0.y, r0.y, l(0.250000)
sample r1.xyzw, v1.xyxx, t1.xyzw, s0
mul r0.y, r0.y, r1.w
mul r0.x, r0.x, r0.y
mul r0.xyz, r0.xxxx, r1.xyzx
mul o0.xyz, r0.xyzx, cb0[5].xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used