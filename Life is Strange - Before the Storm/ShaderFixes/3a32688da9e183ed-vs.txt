// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 3a32688da9e183ed-vs.txt
// 3DMigoto: 3a32688da9e183ed | Matched 6 variants of 2 shaders: Dawn/Glows/AtmosphericGlowBlendNoTex, Dawn/Glows/AtmosphericGlowNoTex
//
// 0f:    Unity headers extracted from Dawn_Glows_AtmosphericGlowBlendNoTex
// 30:    Unity headers extracted from Dawn_Glows_AtmosphericGlowNoTex
// 0f:    Shader "Dawn/Glows/AtmosphericGlowBlendNoTex" {
// 30:    Shader "Dawn/Glows/AtmosphericGlowNoTex" {
//          SubShader 1/1 {
//            Tags { "IGNOREPROJECTOR"="true" "QUEUE"="Transparent+2" "RenderType"="Transparent" }
//            Pass 1/1 {
//              Tags { "IGNOREPROJECTOR"="true" "QUEUE"="Transparent+2" "RenderType"="Transparent" }
//              ZWrite Off
//              Program "vp" {
//                SubProgram "d3d11_9x" {
//                }
//              }
//            }
//          }
//        }
//
// 0f: Unity 5.3 headers extracted from Dawn_Glows_AtmosphericGlowBlendNoTex:
// 30: Unity 5.3 headers extracted from Dawn_Glows_AtmosphericGlowNoTex:
//       API d3d11_9x
//       Shader model vs_4_0_level_9_1
//       undeciphered1: 201608170 26 0 0
//       undeciphered1a: 2
// 2a:   Keywords { "SOFTPARTICLES_ON" }
//       undeciphered2: 1 0 2 0 0 0
//       undeciphered3: 3 2 0 0 1 2
//       ConstBuffer "UnityPerCamera" 144
//       Vector 64 [_WorldSpaceCameraPos] 3
//       Vector 80 [_ProjectionParams]
//       ConstBuffer "UnityPerDraw" 352
//       Matrix 0 [glstate_matrix_mvp]
//       Matrix 64 [glstate_matrix_modelview0]
//       Matrix 192 [unity_ObjectToWorld]
//       Matrix 256 [unity_WorldToObject]
//       BindCB "UnityPerCamera" 0
//       BindCB "UnityPerDraw" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.61 on Wed Jan 03 04:36:17 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             4         2  ( FLT, FLT, FLT, FLT)
// c3         cb1             0         8  ( FLT, FLT, FLT, FLT)
// c11        cb1            12         7  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    def c18, 0.5, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    mul r0, v0.y, c4
    mad r0, c3, v0.x, r0
    mad r0, c5, v0.z, r0
    mad r0, c6, v0.w, r0
    mul r1.x, r0.y, c2.x
    mul r1.w, r1.x, c18.x
    mul r1.xz, r0.xyww, c18.x
    add oT2.xy, r1.z, r1.xwzw
    mul r1.x, v0.y, c8.z
    mad r1.x, c7.z, v0.x, r1.x
    mad r1.x, c9.z, v0.z, r1.x
    add r1.x, r1.x, c10.z
    mov oT2.z, -r1.x
    dp3 r1.x, v1, c15
    dp3 r1.y, v1, c16
    dp3 r1.z, v1, c17
    dp3 r1.w, r1, r1
    rsq r1.w, r1.w
    mul oT1.xyz, r1.w, r1
    mul r1.xyz, v0.y, c12
    mad r1.xyz, c11, v0.x, r1
    mad r1.xyz, c13, v0.z, r1
    mad r1.xyz, c14, v0.w, r1
    add r1.xyz, -r1, c1
    dp3 r1.w, r1, r1
    rsq r1.w, r1.w
    mul oT0.xyz, r1.w, r1
    mad oPos.xy, r0.w, c0, r0
    mov oPos.zw, r0
    mov oT2.w, r0.w

// approximately 30 instruction slots used
vs_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[22], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_temps 4

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125
dcl_constantbuffer cb10[4], immediateIndexed

ld_indexable(texture2d)(float,float,float,float) r2.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 3a32688da9e183ed-vs.txt

mul r2.w, -r2.x, r2.y
mad r3.xyz, -r2.wwww, cb10[0].xyzw, cb0[4].xyzw

mul r0.xyzw, v0.yyyy, cb1[1].xyzw
mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
mad r0.xyzw, cb1[3].xyzw, v0.wwww, r0.xyzw
mov o0.xyzw, r0.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 3a32688da9e183ed-vs.txt
ne r2.w, r0.w, l(1.0)
if_nz r2.w
  add r2.w, r0.w, -r2.y
  mad r0.x, r2.w, r2.x, r0.x
endif

mul r1.xyz, v0.yyyy, cb1[13].xyzx
mad r1.xyz, cb1[12].xyzx, v0.xxxx, r1.xyzx
mad r1.xyz, cb1[14].xyzx, v0.zzzz, r1.xyzx
mad r1.xyz, cb1[15].xyzx, v0.wwww, r1.xyzx
add r1.xyz, -r1.xyzx, r3.xyzx
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mul o1.xyz, r0.zzzz, r1.xyzx
dp3 r1.x, v1.xyzx, cb1[16].xyzx
dp3 r1.y, v1.xyzx, cb1[17].xyzx
dp3 r1.z, v1.xyzx, cb1[18].xyzx
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mul o2.xyz, r0.zzzz, r1.xyzx
mul r0.y, r0.y, cb0[5].x
mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
mov o3.w, r0.w
add o3.xy, r1.zzzz, r1.xwxx
mul r0.x, v0.y, cb1[5].z
mad r0.x, cb1[4].z, v0.x, r0.x
mad r0.x, cb1[6].z, v0.z, r0.x
add r0.x, r0.x, cb1[7].z
mov o3.z, -r0.x
ret 
// Approximately 0 instruction slots used