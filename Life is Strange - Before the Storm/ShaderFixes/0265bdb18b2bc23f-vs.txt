// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 0265bdb18b2bc23f-vs.txt
// 3DMigoto: 0265bdb18b2bc23f |    Unity headers extracted from VFX_SmokeRibbon
//    Shader "VFX/SmokeRibbon" {
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent+10" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent+10" "RenderType"="Transparent" }
//          ZWrite Off
//          Program "vp" {
//            SubProgram "d3d11_9x" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VFX_SmokeRibbon:
//   API d3d11_9x
//   Shader model vs_4_0_level_9_1
//   undeciphered1: 201608170 50 0 0
//   undeciphered1a: 2
//   Keywords { "SOFTPARTICLES_ON" }
//   undeciphered2: 1 0 3 0 0 0
//   undeciphered3: 9 2 0 0 3 4
//   ConstBuffer "$Globals" 144
//   Vector 32 [_MainTex_ST]
//   Vector 48 [_Params]
//   Vector 64 [_Fade] 2
//   Vector 80 [_WorldRight] 3
//   Vector 112 [_MoveVector] 3
//   Vector 128 [_OtherFrame_T] 3
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityPerDraw" 352
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 64 [glstate_matrix_modelview0]
//   Matrix 256 [unity_WorldToObject]
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.68 on Sat Dec 30 11:33:44 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             2         4  ( FLT, FLT, FLT, FLT)
// c5         cb0             7         2  ( FLT, FLT, FLT, FLT)
// c7         cb1             0         1  ( FLT, FLT, FLT, FLT)
// c8         cb1             5         1  ( FLT, FLT, FLT, FLT)
// c9         cb2             0         8  ( FLT, FLT, FLT, FLT)
// c17        cb2            16         3  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    def c20, 4, 0.25, 6.19999981, 0.200000003
    def c21, 2.16000009, 22.2000008, 10.3999996, 1.70000005
    def c22, 0.300000012, 0.400000006, 0.699999988, 4.0999999
    def c23, 0.159154937, 0.5, 6.28318548, -3.14159274
    def c24, 0.200000003, 0.0199999996, 1, 0
    def c25, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
    def c26, -0.020833334, -0.125, 1, 0.5
    dcl_texcoord v0
    dcl_texcoord1 v1
    mad oT0.xy, v1, c1, c1.zwzw
    mov r0.x, c1.x
    mad oT0.zw, v1.xyyx, r0.x, c6.xyyx
    mov r0.xy, c2
    add r0.z, r0.x, c3.y
    mad r0.w, v0.y, c20.z, r0.z
    mad r0.w, r0.w, c23.x, c23.y
    frc r0.w, r0.w
    mad r0.w, r0.w, c23.z, c23.w
    sincos r1.y, r0.w, c25, c26
    mul r1.xzw, v0.y, c21.xyyz
    mad r1.xzw, r0.z, c22.xyyz, r1
    mad r1.xzw, r1, c23.x, c23.y
    frc r1.xzw, r1
    mad r1.xzw, r1, c23.z, c23.w
    sincos r2.y, r1.z, c25, c26
    mul r0.z, r2.y, c20.w
    sincos r2.x, r1.x, c25, c26
    sincos r3.y, r1.w, c25, c26
    mad r0.z, r1.y, r2.x, r0.z
    mul r0.w, c2.y, c2.x
    mad r0.y, r0.w, c20.y, -r0.y
    slt r0.x, r0.x, c20.x
    mad r0.x, r0.x, r0.y, c2.y
    mul r1.y, r0.x, v0.y
    mul r0.x, r0.x, r1.y
    mul r0.x, r0.x, r0.z
    mov r0.w, c21.w
    mul r0.y, r0.w, c7.x
    mad r0.y, v0.y, c22.w, r0.y
    mad r0.y, r0.y, c23.x, c23.y
    frc r0.y, r0.y
    mad r0.y, r0.y, c23.z, c23.w
    sincos r2.x, r0.y, c25, c26
    add r0.y, r2.x, r3.y
    mad r0.y, r0.y, c24.x, c24.y
    mul r0.y, r1.y, r0.y
    mad r0.y, r0.y, c2.z, c2.z
    mad r0.x, v0.x, r0.y, r0.x
    mov r2.xyz, c4
    mul r0.yzw, r2.y, c18.xxyz
    mad r0.yzw, c17.xxyz, r2.x, r0
    mad r0.yzw, c19.xxyz, r2.z, r0
    dp3 r0.z, r0.yzww, r0.yzww
    rsq r0.z, r0.z
    mul r0.yz, r0.z, r0.xyww
    mul r1.xz, r0.x, r0.yyzw
    mov r0.xyz, c5
    mul r2.xyz, r0.y, c18
    mad r0.xyw, c17.xyzz, r0.x, r2.xyzz
    mad r0.xyz, c19, r0.z, r0.xyww
    mul r0.w, v0.y, v0.y
    mad r0.xyz, r0, -r0.w, r1
    mul r1, r0.y, c10
    mad r1, c9, r0.x, r1
    mad r1, c11, r0.z, r1
    add r1, r1, c12
    mul r0.w, r1.y, c8.x
    mul r2.w, r0.w, c23.y
    mul r2.xz, r1.xyww, c23.y
    add oT1.xy, r2.z, r2.xwzw
    mul r0.y, r0.y, c14.z
    mad r0.x, c13.z, r0.x, r0.y
    mad r0.x, c15.z, r0.z, r0.x
    add r0.x, r0.x, c16.z
    mov oT1.z, -r0.x
    mad oT2.xyz, v0.y, -v0.y, c24.z
    mad oPos.xy, r1.w, c0, r1
    mov oPos.zw, r1
    mov oT1.w, r1.w
    mov oT2.w, c24.z

// approximately 106 instruction slots used
vs_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[19], immediateIndexed
dcl_input v0.xy
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.zw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r2.xyzw, l(0, 0, 0, 0), t125.xyzw

add r0.x, cb0[3].x, cb0[4].y
mad r0.y, v0.y, l(6.200000), r0.x
mul r1.xyz, v0.yyyy, l(2.160000, 22.200001, 10.400000, 0.000000)
mad r0.xzw, r0.xxxx, l(0.300000, 0.000000, 0.400000, 0.700000), r1.xxyz
sincos null, r0.x, r0.x
sincos r0.yzw, null, r0.yyzw
mul r0.z, r0.z, l(0.200000)
mad r0.x, r0.y, r0.x, r0.z
mul r0.y, cb0[3].y, cb0[3].x
mul r0.y, r0.y, l(0.250000)
lt r0.z, cb0[3].x, l(4.000000)
movc r0.y, r0.z, r0.y, cb0[3].y
mul r1.y, r0.y, v0.y
mul r0.y, r0.y, r1.y
mul r0.x, r0.y, r0.x
mul r0.y, cb1[0].x, l(1.700000)
mad r0.y, v0.y, l(4.100000), r0.y
sincos null, r0.y, r0.y
add r0.y, r0.y, r0.w
mad r0.y, r0.y, l(0.200000), l(0.020000)
mul r0.y, r1.y, r0.y
mad r0.y, r0.y, cb0[3].z, cb0[3].z
mad r0.x, v0.x, r0.y, r0.x
mul r0.yzw, cb0[5].yyyy, cb2[17].xxyz
mad r0.yzw, cb2[16].xxyz, cb0[5].xxxx, r0.yyzw
mad r0.yzw, cb2[18].xxyz, cb0[5].zzzz, r0.yyzw
dp3 r0.z, r0.yzwy, r0.yzwy
rsq r0.z, r0.z
mul r0.yz, r0.zzzz, r0.yywy
mul r1.xz, r0.xxxx, r0.yyzy
mul r0.xyz, cb0[7].yyyy, cb2[17].xyzx
mad r0.xyz, cb2[16].xyzx, cb0[7].xxxx, r0.xyzx
mad r0.xyz, cb2[18].xyzx, cb0[7].zzzz, r0.xyzx
mul r0.w, v0.y, v0.y
mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
mul r1.xyzw, r0.yyyy, cb2[1].xyzw
mad r1.xyzw, cb2[0].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb2[2].xyzw, r0.zzzz, r1.xyzw
add r1.xyzw, r1.xyzw, cb2[3].xyzw
mov o0.xyzw, r1.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 0265bdb18b2bc23f-vs.txt
ne r2.w, r1.w, l(1.0)
if_nz r2.w
  add r2.w, r1.w, -r2.y
  mad r1.x, r2.w, r2.x, r1.x
endif

mad o1.xy, v1.xyxx, cb0[2].xyxx, cb0[2].zwzz
mad o1.zw, v1.xxxy, cb0[2].xxxx, cb0[8].xxxy
mul r0.y, r0.y, cb2[5].z
mad r0.x, cb2[4].z, r0.x, r0.y
mad r0.x, cb2[6].z, r0.z, r0.x
add r0.x, r0.x, cb2[7].z
mov o2.z, -r0.x
mul r0.x, r1.y, cb1[5].x
mul r0.w, r0.x, l(0.500000)
mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
mov o2.w, r1.w
add o2.xy, r0.zzzz, r0.xwxx
mad o3.xyz, -v0.yyyy, v0.yyyy, l(1.000000, 1.000000, 1.000000, 0.000000)
mov o3.w, l(1.000000)
ret 
// Approximately 0 instruction slots used