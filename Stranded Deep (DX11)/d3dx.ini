;------------------------------------------------------------------------------------------------------
; Logging options.
; Comment line or set value to 0 for no logging.
;------------------------------------------------------------------------------------------------------
[Logging]

; Log all API usage
calls=0

; Log Input key actions
input=0

; Super verbose massive log
debug=0

; Unbuffered logging to avoid missing anything at file end
unbuffered=0

; Force the CPU affinity to use only a single CPU for debugging multi-threaded
force_cpu_affinity=0

; Log NVAPI convergence modifications
convergence=0
; Log NVAPI separation modifications
separation=0


; ------------------------------------------------------------------------------------------------------
; Default constants to pass directly to shaders as IniParams
; ------------------------------------------------------------------------------------------------------
[Constants]
; x = 0.8
; y = 1.0
; z = 1.2
; w = 2.0

; x7 is used by the 3DVision2SBS custom shader. To use, find the [Present]
; section below and uncomment the 'run = CustomShader3DVision2SBS' line.
; 0 = Regular 3D Vision
; 1 = Reversed 3D Vision
; 2 = Side by Side
; 3 = Reversed Side by Side
; 4 = Top and Bottom
; 5 = Reversed Top and Bottom
x7 = 0


;------------------------------------------------------------------------------------------------------
; Custom settings override for any of [convergence, separation, x, y, z, w]
;
; Four types are supported - by default the bindings will simply load the
; configured settings, but type=hold can be specified to have a preset
; active while the button is held, type=toggle can be used to make a simple
; on/off toggle, and type=cycle can be used to cycle between several presets.
;
; Delays (type=hold only) and linear or cosine trasition periods (any key type)
; can be used to better synchonrise setting changes to the game's animations,
; or to smoothly adjust UI elements over a short period of time.
;
; Key bindings: For A-Z and 0-9 on the number row, just use that single
; character. For everything else (including mouse buttons), use the virtual key
; name (with or without the VK_ prefix) or hex code from this article:
; http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
;
; Keys can also be from XBox controllers using:
;   XB_LEFT_TRIGGER, XB_RIGHT_TRIGGER,
;   XB_LEFT_SHOULDER, XB_RIGHT_SHOULDER,
;   XB_LEFT_THUMB, XB_RIGHT_THUMB,
;   XB_DPAD_UP, XB_DPAD_DOWN, XB_DPAD_LEFT, XB_DPAD_RIGHT,
;   XB_A, XB_B, XB_X, XB_Y, XB_START, XB_BACK, XB_GUIDE
; By default all attached controllers are used - to associate a binding with a
; specific controller add the controller number 1-4 to the prefix, like
; XB2_LEFT_TRIGGER, though this may be more useful for hunting than playing.
;------------------------------------------------------------------------------------------------------

; Example for changing default settings
;[Key1]
;Key = z
;separation = 100.0
;convergence = 4.0
;x = 0.98

; Example to support momentary hold type overrides, like aiming.
;[Key2]
;Key = RBUTTON
;convergence = 0.1
;type = hold

; Example for a toggle override.
;[Key3]
;Key = q
;separation = 0.1
;type = toggle
;y = 0.0

; Example for a momentary hold, but with a delay followed by a smooth
; transition (ms) on hold and release to sync better with the game. Note that
; delay only works with type=hold (for now), while transitions will work with
; all types.
;[Key4]
;Key = XB_LEFT_TRIGGER
;type = hold
;y = 0.25
;delay = 100
;transition = 100
;transition_type = linear
;release_delay = 0
;release_transition = 500
;release_transition_type = cosine

; Example of a cycle transition that might be used to provide several presets
; that set both convergence and UI depth to suit different scenes in a game.
; Cosine transitions are used to smooth the changes over 1/10 of a second.
;[Key5]
;Key = Q
;type = cycle
;convergence = 1.45, 1.13, 0.98
;z           = 0.25,  0.5, 0.75
;transition = 100
;transition_type = cosine


[KeyWatch]
key = F
type = hold
delay = 300
release_transition = 300
convergence = 0.086


[KeyConvergence]
key = L
convergence = 0.3


;------------------------------------------------------------------------------------------------------
; Shader hunting options.
; Default setup is to use keyboard similar to Helix presets
;------------------------------------------------------------------------------------------------------
[Hunting]

; 0: Release mode is with shader hunting disabled, optimized for speed.
; 1: Hunting mode enabled
; 2: Hunting mode "soft disabled" - can be turned on via the toggle_hunting key
hunting=0

; Highlight mode of currently selected shader / rendertarget.
; "skip" = skip shader. don't render anything using the currently selected shader.
; "original" = fall back to original shader if the currently selected shader was patched.
; "pink" = make the output hot pink to make it standout.
; "mono" = disable stereo for the selected shader / rendertarget.
; "zero" = shader output is all zero. NOTE: this has a big performance impact.
marking_mode=skip

; Key bindings: For A-Z and 0-9 on the number row, just use that single
; character. For everything else (including mouse buttons), use the virtual key
; name (with or without the VK_ prefix) or hex code from this article:
; http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
;
; XBox controllers are supported using the same bindings as the [Key] sections
; (see above). If the game already uses the first controller you might try
; using the second controller for hunting with e.g. XB2_LEFT_SHOULDER

; rotate through all VISIBLE pixel shaders at the current scene.
previous_pixelshader=VK_NUMPAD1
next_pixelshader=VK_NUMPAD2
mark_pixelshader=VK_NUMPAD3

; rotate through all VISIBLE vertex shaders at the current scene.
previous_vertexshader=VK_NUMPAD4
next_vertexshader=VK_NUMPAD5
mark_vertexshader=VK_NUMPAD6

; rotate through all USED index buffers at the current scene.
previous_indexbuffer=VK_NUMPAD7
next_indexbuffer=VK_NUMPAD8
mark_indexbuffer=VK_NUMPAD9

; rotate through all USED render targets at the current scene.
previous_rendertarget=VK_DIVIDE
next_rendertarget=VK_MULTIPLY
mark_rendertarget=VK_SUBTRACT

; rotate through all VISIBLE geometry shaders at the current scene.
; This is disabled since these keys are commonly pressed while alt+tabbed out
;previous_geometryshader = <
;next_geometryshader = >
;mark_geometryshader = /

; rotate through all VISIBLE domain shaders at the current scene.
; This is disabled since these keys are commonly pressed while alt+tabbed out
;previous_domainshader = [
;next_domainshader = ]
;mark_domainshader = \

; rotate through all VISIBLE hull shaders at the current scene.
; This is disabled only because it is rarely needed
;previous_hullshader = MINUS
;next_hullshader = EQUALS
;mark_hullshader = BACKSPACE

; rotate through all USED compute shaders at the current scene.
; Disabling compute shaders may cause crashes, so these are
; not enabled by default:
;previous_computeshader = PAGE_UP
;next_computeshader = PAGE_DOWN
;mark_computeshader = HOME

; Re-enable shaders once done with hunting:
done_hunting=VK_ADD

; Screenshot as pns
take_screenshot=VK_SNAPSHOT

; reload all fixes from ShaderFixes folder
reload_fixes=VK_F10

; Key to turn hunting itself on/off.  This will also show/hide overlay.
; Hunting must be set to either 1 or 2 to enable this toggle.
toggle_hunting=VK_NUMPAD0

; Key to reload the settings from the the d3dx.ini without restarting. This can
; be the same key as reload_fixes for convenience, or a different key may be
; used to avoid resetting the ini parameters every time the shaders are
; reloaded. Note that not all settings can be reloaded, so if something doesn't
; work as expected you may still have to restart the game:
reload_config=VK_F10

; Hold this key to temporarily disable the fix - useful to quickly check what
; an effect looked like in the original game.
show_original=VK_F9

; tunable parameter to use in modified shaders as variable (StereoParams.Load(int3(1,0,0)).xyzw)
; enabling tuning results in a small performance hit because the parameter texture
;tune_enable=1
;tune_step=0.1
;tune1_up=VK_INSERT
;tune1_down=VK_DELETE
;tune2_up=X
;tune2_down=Z

; Auto-repeat key rate in events per second.
repeat_rate=15

; Dumps out the contents of each render target after every immediate draw call
; for the next frame. Takes up a large amount of space, so disabled by default.
;analyse_frame=VK_F8

; Specifies options for the frame analysis feature. Options can be combined by
; separating them with a space.
;          log: Log draw calls and state changes (one log file per context)
;         hold: Continue analysing subsequent frames while the key is held
;  dump_rt_jps: Dumps out render targets as JPS files. These are the easiest to
;               work with and don't take up as much space as DDS files, but they
;               are not dumped for every render target and are missing some data.
;  dump_rt_dds: Dumps out render targets as DDS files. WARNING: This option may
;               require hundreds of gigabytes and a long time! Only use it if
;               you absolutely need more information than you can get otherwise.
;               Will also dump buffer type render targets & UAVs as .buf files.
;      dump_rt: Dumps render targets as JPS files when possible, or DDS when not.
;     clear_rt: Clears each render target the first time they are used in the
;               frame. Makes it easier to see what is being drawn if the game
;               doesn't clear them, but might cause some effects not to render.
;   dump_depth: Dumps depth/stencil targets as DDS files
; dump_tex_jps: Dumps textures as JPS files
; dump_tex_dds: Dumps textures as DDS files (Same warning as for dump_rt_dds)
;               Will also dump buffer type shader resource views as .buf files.
;     dump_tex: Dumps textures as JPS files when possible, or DDS when not.
;      dump_cb: Dumps constant buffers as binary .buf files
;  dump_cb_txt: Decodes constant buffers as an array of float4s
;      dump_vb: Dumps vertex buffers as binary .buf files
;  dump_vb_txt: Decodes vertex buffers as an array of float4s
;      dump_ib: Dumps index buffers as binary .buf files
;  dump_ib_txt: Decodes index buffers
; filename_reg: Normally the draw number is the first part of the filename so
;               that the files will be sorted in the order they were used in
;               the game. Sometimes it is more desirable to examine how a
;               specific output changed through the frame and this option will
;               place the register number first in the filename to allow that.
;         mono: Dump out mono textures instead of stereo. To dump both, specify
;               'mono stereo'. If neither are specified, defaults to stereo.
; analyse_options can also be specified in [ShaderOverride*] and
; [TextureOverride*] sections to set up triggers to change the options mid-way
; through a frame analysis, either for a single draw call (default), or
; permanently (by adding the 'persist' keyword).
analyse_options = log



;------------------------------------------------------------------------------------------------------
; Chain load other wrapper DLLs instead of system DLLs.
;------------------------------------------------------------------------------------------------------
[System]

;proxy_d3d9=d3d9_helix.dll
;proxy_d3d11=d3d11_helix.dll

; Options to use hooking instead of wrapping. Used in MGSV. Possible objects to hook include:
;   deferred_contexts
;   immediate_context
;   device
;   all - all of the above
; crash/hang workarounds:
;   except_set_shader_resources - work around crash on Win 7 with evil update
;   except_set_samplers - work around crash on Win 10
;   except_set_rasterizer_state - work around crash on Win 7 without evil update
;   skip_dxgi_factory - hack for MGSV, not recommended for other games as it
;                       may disable core 3DMigoto functionality in some cases
;   recommended - hook supported objects, safe workarounds enabled, skips not enabled
;hook=recommended

;------------------------------------------------------------------------------------------------------
; Settings to force display device to a specific mode.
; Uncomment a value to force the specific setting.
;------------------------------------------------------------------------------------------------------
[Device]

; overrides screen resolution.
;width=1280
;height=720

; overrides refresh rate set by game.
;refresh_rate=60

; filters available video modes to those providing given refresh rates.
; some games don't explicitely set the refresh rate, but use the video mode.
; use this if setting refresh_rate doesn't work.
;filter_refresh_rate=24,59,60

; full_screen=1 forces creation of full screen devices and swap chains.
; use this for 3dtvplay if game won't active stereo mode.
; full_screen=2 will also disable SetWindowPos which might help in some games.
;full_screen=1

; This toggles forcing the full screen mode on and off. It will not take effect
; immediately, but will change what happens the next time the game tries to
; change the fullscreen mode. This is a specific hack to workaround a bug in
; Unity games, which crash when alt+tabbing out from exclusive mode fullscreen.
;
; To switch out of a Unity game without it crashing:
; Enable this option, Press F7, Alt+Enter, Alt+Tab
;toggle_full_screen = VK_F7

; some games explicitely disable stereo, prohibiting any stereo attempts.
; settings this to 1 ignores all stereo disabling calls and also calls NvAPI_Stereo_Enable to force stereo on.
;force_stereo=1

; almost all DX11 games deactivate window message handling.
; setting this to 1 reenables print screen handling, alt-tab key handling etc.
;allow_windowcommands=1

; Indicates where the resolution is obtained for texture hashes. Comment this
; out to never special case hashes that match the resolution or a multiple.
; Possible values are swap_chain and depth_stencil. Recommended to test which
; works for a given game (e.g. CryEngine always creates a swap chain that
; matches the native resolution so has to use depth_stencil).
get_resolution_from = swap_chain


;------------------------------------------------------------------------------------------------------
; Settings for NVidia stereo driver.
;------------------------------------------------------------------------------------------------------
[Stereo]

; games which have their own stereo renderer disable the NVidia automatic
; stereo mode and render themselves into stereo buffers (Crysis 3 for example).
; Setting this to 1 disables the game stereo renderer and enables NVidia auto stereo mechanism.
; This also forces 'false' as a return for any request for NvAPI_Stereo_IsEnabled.
automatic_mode=0

; Some games (CryEngine games, for example) lock the separation & convergence
; to a specific value, which can be undesirable. Set this to 1 to ignore these
; requests from the game to unlock the separation:
unlock_separation=0
unlock_convergence=0

; games without predefined profiles can't save stereo settings.
; enabling this options automatically creates a profile for unknown games.
create_profile=0

; sets the global surface creation heuristic for NVidia stero driver.
; 0 = NVAPI_STEREO_SURFACECREATEMODE_AUTO - use driver registry profile settings for surface creation mode.
; 1 = NVAPI_STEREO_SURFACECREATEMODE_FORCESTEREO - Always create stereo surfaces.
; 2 = NVAPI_STEREO_SURFACECREATEMODE_FORCEMONO - Always create mono surfaces.
;surface_createmode=1

; overrides surface creation mode for square surfaces.
;surface_square_createmode=1

; Force the NvAPI_Initialize to return an error so that games think stereo and NVidia is unavailable.
force_no_nvapi=0


;------------------------------------------------------------------------------------------------------
; Settings for GPU manipulations.
; Render settings override
;------------------------------------------------------------------------------------------------------
[Rendering]

; GPU program manipulations.

; Type of shader hashes in use:
;   3dmigoto = Traditional hash used by 3DMigoto (unseeded software FNV-1)
;   embedded = Use the first half of the MD5-like hash embedded within the
;              shaders to skip the hash calculation altogether.
;   bytecode = Only hash bytecode and signatures with hardware accelerated
;              CRC32C. Used to minimise duplicate shaders in certain games, but
;              potentially carries a higher risk of hash collisions between
;              unrelated shaders in some games (e.g. that only differ in
;              variable names). May occasionally avoid hash changes on game
;              updates due to changes in the game developer's build environment
;              (shader compiler version, build path embedded in debug info,
;              constants renamed, etc). Will not avoid hash changes if the
;              shader code, constant values, etc are changed.
shader_hash = 3dmigoto

; Shaders in game will be replaced by these custom shaders.
override_directory=ShaderFixes

; Automatically patched shaders will be written here if caching is enabled.
cache_directory=ShaderCache

; Shaders that are directly compiled by the game, instead of binary, go here.
storage_directory=ShaderFromGame

; cache all compiled .txt shaders into .bin. this removes loading stalls.
cache_shaders=1

; thread save data structure access. required on multithreaded rendering.
use_criticalsection=1

; Setting this option disables scissor limits
rasterizer_disable_scissor=1

; Tracks copies and updates to textures which may cause their hash to become
; out of sync with their contents - enable if texture hashes seem unreliable:
;track_texture_updates=1

; Registers where the StereoParams and IniParams textures will be assigned -
; change if the game already uses these registers. Newly decompiled shaders
; will use the new registers, but existing shaders will not be updated - best
; workflow is to remove ShaderCache after changing these and run a search and
; replace on all shaders in ShaderFixes. Set to -1 to disable if not required.
stereo_params = 125
ini_params = 120

;------------------------------------------------------------------------------------------------------
; Analyzation options.
;
; save all autofixed shaders as HLSL
export_fixed=0

; save all shaders sent to DX11 as ASM, or as HLSL text files if compiled by game.
export_shaders=0

; save all shaders seen as HLSL code, autofixed or not. 1= HLSL only, 2=HLSL+OriginalASM, 3=HLSL+OriginalASM+RecompiledASM
export_hlsl=0

; stores a ShaderUsage.txt file on any marking button press.
dump_usage=0

;------------------------------------------------------------------------------------------------------
; Automatic shader fixes. Those settings here apply only on newly read shaders.
; All existing *_replace.txt or *_replace.bin files are not tampered with.
; If you change settings here, the best workflow is to delete all shaders in
; the shader cache directory and let them be fixed again.

; Stereoize all shader parameters with position semantic.
fix_sv_position=0

; Pixel depth evaluation.
;fix_ZRepair_DepthTexture1=SceneDepthTexture.x
;fix_ZRepair_Dependencies1=MinZ_MaxZRatio
;fix_ZRepair_ZPosCalc1=zTex * MinZ_MaxZRatio.z - MinZ_MaxZRatio.w
;fix_ZRepair_DepthTexture2=SceneDepthTexture.x
;fix_ZRepair_Dependencies2=
;fix_ZRepair_ZPosCalc2=zTex
;fix_ZRepair_PositionTexture=PositionTexture
;fix_ZRepair_PositionCalc=1024 * %s

; Inject depth texture if other depth sources are unavailable.
;fix_ZRepair_DepthTextureHash=8a19f087b004598f

; Correct inverse transformations in pixel shaders using evaluated depth.
;fix_InvTransform=ScreenToLight,InverseTranslatedViewProjectionMatrix

; Back projection coordinate fix.
;
; Available variables in expressions:
; stereoParams.x = Separation value in range [0..1] or [-0..-1] dependent on active eye
; stereoParams.y = Convergence value in w coordinates (1/z)
; stereoParams.z = -1/1 for left/right eye
; stereoParams.w = Separation value without eye separation
; stereoTune.x = tune value 1 (default is 1)
; stereoTune.y = tune value 2 (default is 1)
; stereoTune.z = tune value 3 (default is 1)
; stereoTune.w = tune value 4 (default is 1)
; stereoScreenRes.x = Primary swap chain backbuffer horizontal resolution
; stereoScreenRes.y = Primary swap chain backbuffer vertical resolution
; zpos = current pixel z position in pixel shader
; wpos = current pixel w position in pixel shader

; Send inverse transformations from vertex shaders to pixel shaders.
;fix_BackProjectionTransform1=ScreenToTranslatedWorldMatrix._m00,ScreenToTranslatedWorldMatrix._m02,ScreenToTranslatedWorldMatrix._m01
;fix_BackProjectionTransform2=ScreenToWorld._m00,ScreenToWorld._m02,ScreenToWorld._m01

; Position variables to correct in pixel shaders.
;fix_ObjectPosition1=PointPositionAndInverseRadius
;fix_ObjectPosition1Multiplier=1, (stereoScreenRes.x/stereoScreenRes.y)*0.5, -0.5
;fix_ObjectPosition2=SpotPositionAndInverseRadius
;fix_ObjectPosition2Multiplier=1, (stereoScreenRes.x/stereoScreenRes.y)*0.5, -0.5

; Matrix multiplications to correct in pixel shaders.
;fix_MatrixOperand1=TranslatedWorldToShadowMatrix
;fix_MatrixOperand1Multiplier=1, (stereoScreenRes.x/stereoScreenRes.y)*0.5 - viewDirection.z*0.05 + (0.02791946-stereoParams.x/stereoParams.w), 0

; autofix shader option: recompiles all vertex shaders. fixes minor differences in deferred rendering.
;recompile_all_vs=0

;------------------------------------------------------------------------------------------------------
; Shader manipulations without patches + shader filtering.
;------------------------------------------------------------------------------------------------------
;[ShaderOverride1]
;Hash=69732c4f23cb6c48
; Custom stereo separation value while rendering objects using this shader.
;Separation=0
; Custom stereo convergence value while rendering objects using this
; shader (e.g. convergence=0 will move an object to infinity).
;Convergence=0
; don't draw anything using this shader.
;Handling=skip
; advanced option: use this to override only if this shader is used rendering the given index buffer.
;IndexBufferFilter=b3e56ebc
; Use replaced shader only when there is no active depth buffer (for UI filtering)
;depth_filter = depth_inactive
; Use replaced shader only when there *IS* an active depth buffer (for UI filtering)
;depth_filter = depth_active
; Only use replaced shader when it is used in conjunction with a specific shader
; (e.g. to adjust a vertex shader ONLY when it is used with a specific pixel shader)
;partner=af7b880f07630615
; Assignes a dummy render target to o0. Use to fix one-eye rendering issues in
; shaders that only write to a depth target:
;fake_o0=1
; Override a value from [Constants] when this shader is used:
;x=2.0
; Pass the dimensions of the active render target and resolution (obtained with
; get_resolution_from) into the shader:
;x1=rt_width
;y1=rt_height
;z1=res_width
;w1=res_height
; Use t0 from active pixel shader for texture filtering. Will be 0 if no
; [TextureOverride*] section exists for the texture or 1 if one does. For advanced
; filtering, set a value for filter_index in the [TextureOverride] section.
;x2=ps-t0
; Override the shader model to allow using newer features like Texture2DMS:
;model=vs_5_0
; There's also support for copying textures, constant buffers, depth buffers,
; etc. from one shader to another. This is a complex topic - see this page:
;    https://github.com/bo3b/3Dmigoto/wiki/Resource-Copying

;;;;;;;;;;;;;; HUD ;;;;;;;;;;;;;;;;
[ShaderOverrideCrosshair]
hash = 9d1082755bb8ace6
vs-t110 = Resource_CameraDepthTexture
vs-cb13 = Resource_UnityPerCamera
analyse_options = dump_tex dump_vb_txt mono
x = ps-t0
y = cursor_showing
[TextureOverrideCrosshair]
; <Register orig_hash=019b2866 type=Texture2D Width=42 Height=42 MipLevels=1 ArraySize=1 RawFormat=29 Format="R8G8B8A8_UNORM_SRGB" SampleDesc.Count=1 SampleDesc.Quality=0 Usage=0 BindFlags=0x8 CPUAccessFlags=0x0 MiscFlags=0x0 hash_contaminated=true>
hash = 019b2866
[KeyCycleCrosshairMode]
key = v
type = cycle
z = 1, 2, 0

;------------------------------------------------------------------------------------------------------
; texture / render target manipulations
;------------------------------------------------------------------------------------------------------
;
; NOTE: If you are trying to match a texture the same size as the resolution (or
; a /2, x2, x4 or x8 multiple), you should confirm that the same hash is used
; on different resolutions, and adjust get_resolution_from if necessary.
;
; NOTE: If you find a texture hash seems to change inconsistently, try enabling
; track_texture_updates in the [Rendering] section.
;
;[TextureOverride1]
;Hash=c3e55ebd
; NVidia stores surface creation mode heuristics in the game profile. setting
; this option overrides the creation mode for a given texture / buffer.
; 0 = NVAPI_STEREO_SURFACECREATEMODE_AUTO - use driver registry profile settings.
; 1 = NVAPI_STEREO_SURFACECREATEMODE_FORCESTEREO - create stereo surface.
; 2 = NVAPI_STEREO_SURFACECREATEMODE_FORCEMONO - create mono surface.
;StereoMode=2

;[TextureOverride2]
;Hash = e27b9d07
; Prevent the game reading from this texture - will give the game a blank
; buffer instead. Used to prevent CryEngine games falsely culling objects. Use
; debug logging and look for Map calls to identify possible hashes.
;deny_cpu_read=1
; Expand the region copied to this texture with CopySubresourceRegion (similar
; issue to rasterizer_disable_scissor). Used to solve issues with transparent
; refraction effects (like glass) in CryEngine games.
;expand_region_copy=1

[TextureOverrideDepth]
; <DepthTarget orig_hash=a98c980a type=Texture2D Width=1920 Height=1080 MipLevels=1 ArraySize=1 RawFormat=44 Format="R24G8_TYPELESS" SampleDesc.Count=1 SampleDesc.Quality=0 Usage=0 BindFlags=0x48 CPUAccessFlags=0x0 MiscFlags=0x0>
; Fixes issues with the haze on the hoirzon:
hash = a98c980a
StereoMode = 1

;------------------------------------------------------------------------------------------------------
; Example of settings override by mouse button configuration
; Mapping of from game provided hard coded convergence values to custom values
; Those are values for L.A. Noir
; Example of settings override by mouse button configuration
;------------------------------------------------------------------------------------------------------
;[ConvergenceMap]

;Map1=from 3e99999a to 0.3
;Map2=from 3f800000 to 1.0
;Map3=from 3f666666 to 0.9




; The following custom shader can convert 3D Vision to Side-by-Side and
; Top-and-Bottom for use with 3D TVs & projectors - to enable this uncomment
; the 'run = CustomShader3DVision2SBS' in the [Present] section, set 3D Vision
; to output "checkerboard" in the control panel (which will remove the 720p
; limitation) and enable this either via the F11 key, or by setting a default
; for x7 in the [Constants] section.
[Resource3DVision2SBSBackupTexture]
[CustomShader3DVision2SBS]
; Load a custom vertex + pixel shader:
vs = ShaderFixes/3dvision2sbsvs.hlsl
ps = ShaderFixes/3dvision2sbsps.hlsl
; Explicitly unbind other shader types for safety:
hs = null
ds = null
gs = null
; Disable the OM blend stage that could interfere with the shader:
blend = disable
; Disable front/back face culling so the vertices can be in any rotation:
cull = none
; Use a triangle strip topology so we only have to output four vertices:
topology = triangle_strip
; Clear all render + depth targets to avoid compatibility issues:
o1 = null
o2 = null
o3 = null
o4 = null
o5 = null
o6 = null
o7 = null
oD = null
; Bind the back buffer as a render target. set_viewport ensures that the view
; port is the size of the buffer so the draw call will work, and no_view_cache
; is necessary for a few games like Mad Max:
o0 = set_viewport no_view_cache bb
; Back up any textures that were in the ps-t100 slot. The CustomResource
; section will already back up a lot of state, including shaders, render
; targets, depth targets, UAVs, viewports, blend state, rasterizer state,
; primitive topology, etc. but it does not back up textures:
Resource3DVision2SBSBackupTexture = reference ps-t100
; Use the reverse stereo blit to give the shader access to the back buffers of
; both eyes:
ps-t100 = stereo2mono bb
; Draw four vertices. The vertex shader will construct coordinates to cover the
; full screen using the SV_VertexID semantic so we don't need vertex buffers:
draw = 4, 0
; Restore the original texture from the ps-t100 slot:
post ps-t100 = reference Resource3DVision2SBSBackupTexture

[KeyChange3DVision2SBSOutputMode]
key = F11
; 0 = Regular 3D Vision
; 1 = Reversed 3D Vision
; 2 = Side by Side
; 3 = Reversed Side by Side
; 4 = Top and Bottom
; 5 = Reversed Top and Bottom
x7 = 1, 2, 3, 4, 5, 0
type = cycle
;;;;;;;;;;;;;;;;;;;;;;; DARKSTARSWORD'S UNITY 5 TEMPLATE ;;;;;;;;;;;;;;;;;;;;;;;

; Custom resource declarations
[Resource_UnityPerCameraRare]
max_copies_per_frame = 1

[Resource_CameraDepthTexture]
; I don't understand why, but if this is 1 it doesn't work. Frame analysis
; doesn't show any obvious reason this would be the case - the same shader is
; used twice in a row and ps-t0 is not changed in the meantime.
max_copies_per_frame = 2

[Resource_UnityPerCamera]
; Likewise
max_copies_per_frame = 2

[Resource_UnityPerDraw]
; Limiting the number of copies per frame is breaking the shadows & other fixes
; using this cb periodically, moreso when the camera is being rotated, moreso
; on the default island. Will need more analysis to determine exactly what is
; going on, but for now removing the limit seems to solve the issue.
;max_copies_per_frame = 1

[Resource_Inverse_MVP]
type = Buffer
format = R32G32B32A32_FLOAT
array = 4

;------------------------------------------------------------------------------------------------------
; Commands to run from the Present call at the start/end of each frame
;
; Useful to clear custom resources or ini params at the start of each frame, or
; to run a custom shader to do whatever you can dream up.
;------------------------------------------------------------------------------------------------------
[Present]
; Clear custom resources on the present call to ensure we don't use stale data:
; run = CustomShader3DVision2SBS
Resource_UnityPerCameraRare = null
Resource_CameraDepthTexture = null
Resource_UnityPerCamera = null
Resource_UnityPerDraw = null
Resource_Inverse_MVP = null

; Copy the FOV from the directional lighting shader to the point/spot/physical lighting shader:
[ShaderOverrideDirectional53]
Hash = bfae1ae6908d87a2
Resource_UnityPerCameraRare = vs-cb1
[ShaderOverrideDirectional53_9x]
Hash = f51c2a7085326040
Resource_UnityPerCameraRare = vs-cb1

[ShaderOverridePhysical50]
Hash = ca5cfc8e4d8b1ce5
vs-cb13 = Resource_UnityPerCameraRare

[CustomShader_Inverse_Unity_MVP]
max_executions_per_frame = 2
cs = ShaderFixes/inverse_unity_mvp.hlsl
cs-cb11 = Resource_UnityPerDraw
cs-u0 = Resource_Inverse_MVP
Dispatch = 1, 1, 1
post cs-cb11 = null
post cs-u0 = null

;;;;;;;;;;;;;; ALL LINES BELOW THIS POINT INSERTED BY HLSLTOOL.PY ;;;;;;;;;;;;;;

[ShaderOverride_025831690c1d75bc]
hash = 025831690c1d75bc
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_04372989164348df]
hash = 04372989164348df
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_0626ba64f2120bda]
hash = 0626ba64f2120bda
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_072fc9e03e8aeb0f]
hash = 072fc9e03e8aeb0f
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_0879a992b8a0e918]
hash = 0879a992b8a0e918
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_0d6720ed6118f3b9]
hash = 0d6720ed6118f3b9
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_0f9ec89e7e50b1b1]
hash = 0f9ec89e7e50b1b1
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_1103aa3a86dc3e7f]
hash = 1103aa3a86dc3e7f
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_1121317b0c89bc4c]
hash = 1121317b0c89bc4c
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_11978eb9d8603aff]
hash = 11978eb9d8603aff
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_120fca9045addefb]
hash = 120fca9045addefb
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_12faadfb11a48539]
hash = 12faadfb11a48539
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_168fd8dcb11e3e06]
hash = 168fd8dcb11e3e06
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_17332ec2eed1c352]
hash = 17332ec2eed1c352
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_1ac319584f028ea4]
hash = 1ac319584f028ea4
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_1b2f8896b1e8298a]
hash = 1b2f8896b1e8298a
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_1dfebb32db1208c4]
hash = 1dfebb32db1208c4
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_225057f9133a5d78]
hash = 225057f9133a5d78
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_242bfd87f6285c29]
hash = 242bfd87f6285c29
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_2843817e656f911c]
hash = 2843817e656f911c
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_299de477ccd96bd8]
hash = 299de477ccd96bd8
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_2d5ac60895a6eefa]
hash = 2d5ac60895a6eefa
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_2f2dde4cf8f2eca7]
hash = 2f2dde4cf8f2eca7
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_2f797e7390805358]
hash = 2f797e7390805358
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_3604c2a248521ffd]
hash = 3604c2a248521ffd
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_368370aa4b7a2b4b]
hash = 368370aa4b7a2b4b
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_3804483f52fae5eb]
hash = 3804483f52fae5eb
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_3aa57755594a5fd9]
hash = 3aa57755594a5fd9
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_3cfc6ad0c89b162b]
hash = 3cfc6ad0c89b162b
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_4beba67a1494f8e2]
hash = 4beba67a1494f8e2
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_52d8327b2df03375]
hash = 52d8327b2df03375
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_544a56207d08b1da]
hash = 544a56207d08b1da
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_54841071a139127e]
hash = 54841071a139127e
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_590362985c99f1fd]
hash = 590362985c99f1fd
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_5dbb74aef030336a]
hash = 5dbb74aef030336a
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_5e562da6223ed5e0]
hash = 5e562da6223ed5e0
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_5e5979bd8a4b9998]
hash = 5e5979bd8a4b9998
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_63dbf5f0a45108e1]
hash = 63dbf5f0a45108e1
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_63fd13340a85db11]
hash = 63fd13340a85db11
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_6a2cf6b4fbd97c25]
hash = 6a2cf6b4fbd97c25
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_6e4d8faebd55a9d0]
hash = 6e4d8faebd55a9d0
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_7339cad50f909489]
hash = 7339cad50f909489
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_73cbf99f415193bd]
hash = 73cbf99f415193bd
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_73cffa23e98145bf]
hash = 73cffa23e98145bf
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_73de6703f9df6580]
hash = 73de6703f9df6580
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_74040dc0bd0c3e38]
hash = 74040dc0bd0c3e38
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_74f413dc6910748d]
hash = 74f413dc6910748d
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_8065ee0555dc69c4]
hash = 8065ee0555dc69c4
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_812360f28418dd6f]
hash = 812360f28418dd6f
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_852dc8597099a716]
hash = 852dc8597099a716
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_86ef02a2c06c37e8]
hash = 86ef02a2c06c37e8
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_87ee7768826b0fee]
hash = 87ee7768826b0fee
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_8df1a8acd59d695d]
hash = 8df1a8acd59d695d
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_8e866ce2dd08dcd6]
hash = 8e866ce2dd08dcd6
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_8f33fb298f591b61]
hash = 8f33fb298f591b61
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_938cba2dcf25dd95]
hash = 938cba2dcf25dd95
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_9745544c74e3927c]
hash = 9745544c74e3927c
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_9a882f1fc00553e0]
hash = 9a882f1fc00553e0
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_9db9809d923c6309]
hash = 9db9809d923c6309
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_9e43b843c3516db0]
hash = 9e43b843c3516db0
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_a064fbb2448a4d96]
hash = a064fbb2448a4d96
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_a3a97ba8c1de8ff3]
hash = a3a97ba8c1de8ff3
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_a4834ab30236ccd5]
hash = a4834ab30236ccd5
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_a49b31bbb6f0c625]
hash = a49b31bbb6f0c625
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_a74f658ed0d472fb]
hash = a74f658ed0d472fb
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_ac6bee4593efc708]
hash = ac6bee4593efc708
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_adb8c8f1b20ba202]
hash = adb8c8f1b20ba202
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_b77e1979e3390791]
hash = b77e1979e3390791
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_b8ac3444dad31180]
hash = b8ac3444dad31180
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_ba36bb8a44f16668]
hash = ba36bb8a44f16668
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_bc162dbf20c68bf0]
hash = bc162dbf20c68bf0
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_bd751537715a6e17]
hash = bd751537715a6e17
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_bfa59a283cf25231]
hash = bfa59a283cf25231
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_c2a84359baccd9cb]
hash = c2a84359baccd9cb
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_c324790e24f57b93]
hash = c324790e24f57b93
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_c6ded83b8593ad2c]
hash = c6ded83b8593ad2c
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_ce18f31531e8159d]
hash = ce18f31531e8159d
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_d1f0d55372361c3c]
hash = d1f0d55372361c3c
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_d40fb2c9ff889ca9]
hash = d40fb2c9ff889ca9
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_d86b43f6db87105c]
hash = d86b43f6db87105c
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_d980ca4050088878]
hash = d980ca4050088878
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_db7531870e72b765]
hash = db7531870e72b765
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_dc6cb03bbcea6998]
hash = dc6cb03bbcea6998
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_de82b6db0be09001]
hash = de82b6db0be09001
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_e1ed6ac9a62fbb78]
hash = e1ed6ac9a62fbb78
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_e6cb17224a57c4c8]
hash = e6cb17224a57c4c8
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_e9a97d6e31713405]
hash = e9a97d6e31713405
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_ea4459e5b9c6ac3e]
hash = ea4459e5b9c6ac3e
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_eb15a25fc6273eff]
hash = eb15a25fc6273eff
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_f2dbbc2811d5d245]
hash = f2dbbc2811d5d245
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_f2fbd31f8cf80bf7]
hash = f2fbd31f8cf80bf7
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_f4dec414fb132893]
hash = f4dec414fb132893
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_f532d6a1d8ff2082]
hash = f532d6a1d8ff2082
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_f5cfa5229a5ec49e]
hash = f5cfa5229a5ec49e
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_f903e0f821cda8a8]
hash = f903e0f821cda8a8
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_f9b185f59b697f71]
hash = f9b185f59b697f71
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_fc2cec69e3f3ba5a]
hash = fc2cec69e3f3ba5a
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_fdcd691223d53623]
hash = fdcd691223d53623
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_2deb4baedad81ca1]
hash = 2deb4baedad81ca1
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_44904e567e587cab]
hash = 44904e567e587cab
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_5d0f4a41cc4ad446]
hash = 5d0f4a41cc4ad446
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_8bb3468e00a5f1b5]
hash = 8bb3468e00a5f1b5
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_996f9165c668dab7]
hash = 996f9165c668dab7
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_ac9be3fb7f3909c8]
hash = ac9be3fb7f3909c8
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_b3c0ee8bd67c89df]
hash = b3c0ee8bd67c89df
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_bda80b9e562d5031]
hash = bda80b9e562d5031
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_ca0079e101bba9c5]
hash = ca0079e101bba9c5
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_cde559dd84a6ea4d]
hash = cde559dd84a6ea4d
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_ec438fa268f752c1]
hash = ec438fa268f752c1
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_ffaf6067999e20ff]
hash = ffaf6067999e20ff
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

