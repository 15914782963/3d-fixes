// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe f9412109a5b20007-vs_replace.txt
// 3DMigoto: f9412109a5b20007 |    Unity headers extracted from Speedtree Tree - Billboard.shader
//    Shader "Beam Team/SpeedTree/Deferred/SpeedTree Tree - Billboard" {
//      Properties {
//       _Color ("Main Color", Color) = (1,1,1,1)
//       _SpecColor ("Specular Color", Color) = (0.5,0.5,0.5,0)
//       _MainTex ("Base (RGB)", 2D) = "white" { }
//       _BumpTex ("Normalmap", 2D) = "bump" { }
//       _Cutoff ("Alpha cutoff", Range(0,1)) = 0.5
//      [MaterialEnum(None,0,Fastest,1)]  _WindQuality ("Wind Quality", Range(0,1)) = 0
//      [HideInInspector]  _TreeInfo0 ("TreeInfo0", Vector) = (0,0,0,0)
//      [HideInInspector]  _TreeInfo1 ("TreeInfo1", Vector) = (0,0,0,0)
//      [HideInInspector]  _TreeInfo2 ("TreeInfo2", Vector) = (0,0,0,0)
//      [HideInInspector]  _TreeInfo3 ("TreeInfo3", Vector) = (0,0,0,0)
//      [HideInInspector]  _TreeSize0 ("TreeSize0", Vector) = (0,0,0,0)
//      [HideInInspector]  _TreeSize1 ("TreeSize1", Vector) = (0,0,0,0)
//      [HideInInspector]  _TreeSize2 ("TreeSize2", Vector) = (0,0,0,0)
//      [HideInInspector]  _TreeSize3 ("TreeSize3", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords0 ("ImageTexCoords0", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords1 ("ImageTexCoords1", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords2 ("ImageTexCoords2", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords3 ("ImageTexCoords3", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords4 ("ImageTexCoords4", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords5 ("ImageTexCoords5", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords6 ("ImageTexCoords6", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords7 ("ImageTexCoords7", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords8 ("ImageTexCoords8", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords9 ("ImageTexCoords9", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords10 ("ImageTexCoords10", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords11 ("ImageTexCoords11", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords12 ("ImageTexCoords12", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords13 ("ImageTexCoords13", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords14 ("ImageTexCoords14", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords15 ("ImageTexCoords15", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords16 ("ImageTexCoords16", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords17 ("ImageTexCoords17", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords18 ("ImageTexCoords18", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords19 ("ImageTexCoords19", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords20 ("ImageTexCoords20", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords21 ("ImageTexCoords21", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords22 ("ImageTexCoords22", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords23 ("ImageTexCoords23", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords24 ("ImageTexCoords24", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords25 ("ImageTexCoords25", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords26 ("ImageTexCoords26", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords27 ("ImageTexCoords27", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords28 ("ImageTexCoords28", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords29 ("ImageTexCoords29", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords30 ("ImageTexCoords30", Vector) = (0,0,0,0)
//      [HideInInspector]  _ImageTexCoords31 ("ImageTexCoords31", Vector) = (0,0,0,0)
//      [HideInInspector]  _InstanceData ("InstanceData", Vector) = (0,0,0,0)
//      }
//      SubShader 2/2 {
//        Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="SpeedTreeBillboard" }
//        Pass 1/1 {
//          Name "SHADOWCASTER"
//          Tags { "LIGHTMODE"="SHADOWCASTER" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "DisableBatching"="LodFading" "RenderType"="SpeedTreeBillboard" }
//          Cull Off
//          GpuProgramID 122044
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 133
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Speedtree Tree - Billboard.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 119 0 0
//   Keywords { "SHADOWS_DEPTH" "BILLBOARD_FACE_CAMERA_POS" }
//   undeciphered2: 1 0 8 0 0
//   undeciphered3: 29 4 0 0 2 1 3 4 4 5
//   ConstBuffer "$Globals" 160
//   Float 112 [_WindQuality]
//   Float 116 [_WindEnabled]
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   ConstBuffer "UnityShadows" 416
//   Vector 80 [unity_LightShadowBias]
//   ConstBuffer "UnityPerDraw" 352
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 192 [_Object2World]
//   Matrix 256 [_World2Object]
//   ConstBuffer "UnityPerFrame" 256
//   Matrix 144 [unity_MatrixVP]
//   ConstBuffer "SpeedTreeWind" 256
//   Vector 0 [_ST_WindVector]
//   Vector 16 [_ST_WindGlobal]
//   Vector 96 [_ST_WindBranchAdherences]
//   ConstBuffer "UnityBillboardPerCamera" 48
//   Vector 32 [unity_BillboardCameraParams]
//   ConstBuffer "UnityBillboardPerBatch" 288
//   Vector 0 [unity_BillboardInfo]
//   Vector 16 [unity_BillboardSize]
//   Vector 32 [unity_BillboardImageTexCoords0]
//   Vector 48 [unity_BillboardImageTexCoords1]
//   Vector 64 [unity_BillboardImageTexCoords2]
//   Vector 80 [unity_BillboardImageTexCoords3]
//   Vector 96 [unity_BillboardImageTexCoords4]
//   Vector 112 [unity_BillboardImageTexCoords5]
//   Vector 128 [unity_BillboardImageTexCoords6]
//   Vector 144 [unity_BillboardImageTexCoords7]
//   Vector 160 [unity_BillboardImageTexCoords8]
//   Vector 176 [unity_BillboardImageTexCoords9]
//   Vector 192 [unity_BillboardImageTexCoords10]
//   Vector 208 [unity_BillboardImageTexCoords11]
//   Vector 224 [unity_BillboardImageTexCoords12]
//   Vector 240 [unity_BillboardImageTexCoords13]
//   Vector 256 [unity_BillboardImageTexCoords14]
//   Vector 272 [unity_BillboardImageTexCoords15]
//   BindCB "$Globals" 0
//   BindCB "UnityLighting" 1
//   BindCB "UnityShadows" 2
//   BindCB "UnityPerDraw" 3
//   BindCB "UnityPerFrame" 4
//   BindCB "SpeedTreeWind" 5
//   BindCB "UnityBillboardPerCamera" 6
//   BindCB "UnityBillboardPerBatch" 7
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:11:49 2016
cbuffer cb7 : register(b7)
{
  float4 cb7[18];
}

cbuffer cb6 : register(b6)
{
  float4 cb6[3];
}

cbuffer cb5 : register(b5)
{
  float4 cb5[7];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[13];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[19];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[6];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[1];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[8];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : NORMAL0,
  float4 v4 : TANGENT0,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD1)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.xyz = cb3[15].xyz + v0.xyz;
  r1.x = v2.w + r0.x;
  r1.y = v2.w * 0.800000012 + r0.y;
  r0.xyz = cb6[2].xyz + -r0.xyz;
  r1.xy = float2(0.5,0.5) + r1.xy;
  r1.xy = frac(r1.xy);
  r1.xy = r1.xy * float2(2,2) + float2(-1,-1);
  r1.zw = abs(r1.xy) * abs(r1.xy);
  r1.xy = -abs(r1.xy) * float2(2,2) + float2(3,3);
  r1.xy = r1.zw * r1.xy + float2(-0.5,-0.5);
  r1.xy = r1.xy + r1.xy;
  r0.w = r1.y * r1.y + r1.x;
  r1.x = cb5[6].x / cb5[1].z;
  r0.w = cb5[1].y * r0.w + r1.x;
  r1.x = 1 / cb5[1].z;
  r1.y = v1.y * cb7[1].y + cb7[1].z;
  r2.y = v2.y * r1.y;
  r1.x = -r1.x * 0.25 + r2.y;
  r1.x = max(0, r1.x);
  r1.x = cb5[1].z * r1.x;
  r1.y = log2(r1.x);
  r1.y = cb5[1].w * r1.y;
  r1.y = exp2(r1.y);
  r1.z = cmp(r1.x != 0.000000);
  r1.x = r1.z ? r1.y : r1.x;
  r0.w = r1.x * r0.w;
  r1.x = -0.5 + v1.x;
  r1.x = cb7[1].x * r1.x;
  r1.x = v2.x * r1.x;
  r0.y = dot(r0.xyz, r0.xyz);
  r0.y = rsqrt(r0.y);
  r3.xy = r0.xz * r0.yy;
  r3.zw = -r3.yy;
  r0.x = dot(r3.xz, r3.xw);
  r0.yz = float2(-1,1) * r3.yx;
  r0.x = rsqrt(r0.x);
  r0.xy = r0.yz * r0.xx;
  r2.xz = r1.xx * r0.xy;
  r1.xz = cb5[0].xz * r0.ww + r2.xz;
  r1.y = r2.y;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = r1.xyz * r0.zzz;
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = sqrt(r0.z);
  r1.xyz = r1.xyz * r0.zzz;
  r0.z = cb0[7].x * cb0[7].y;
  r0.z = cmp(0 < r0.z);
  r1.xyz = r0.zzz ? r1.xyz : r2.xyz;
  r1.xyz = v0.xyz + r1.xyz;
  r2.xyz = cb3[13].xyz * r1.yyy;
  r2.xyz = cb3[12].xyz * r1.xxx + r2.xyz;
  r2.xyz = cb3[14].xyz * r1.zzz + r2.xyz;
  r2.xyz = cb3[15].xyz + r2.xyz;
  r3.xyz = -r2.xyz * cb1[0].www + cb1[0].xyz;
  r0.z = dot(r3.xyz, r3.xyz);
  r0.z = rsqrt(r0.z);
  r3.xyz = r3.xyz * r0.zzz;
  r4.x = cb3[16].x * r0.y;
  r4.y = cb3[17].x * r0.y;
  r4.z = cb3[18].x * r0.y;
  r5.x = cb3[16].z * -r0.x;
  r5.y = cb3[17].z * -r0.x;
  r5.z = cb3[18].z * -r0.x;
  r4.xyz = r5.xyz + r4.xyz;
  r0.z = dot(r4.xyz, r4.xyz);
  r0.z = rsqrt(r0.z);
  r4.xyz = r4.xyz * r0.zzz;
  r0.z = dot(r4.xyz, r3.xyz);
  r0.z = -r0.z * r0.z + 1;
  r0.z = sqrt(r0.z);
  r0.z = cb2[5].z * r0.z;
  r2.xyz = -r4.xyz * r0.zzz + r2.xyz;
  r3.xyzw = cb4[10].xyzw * r2.yyyy;
  r3.xyzw = cb4[9].xyzw * r2.xxxx + r3.xyzw;
  r2.xyzw = cb4[11].xyzw * r2.zzzz + r3.xyzw;
  r2.xyzw = cb4[12].xyzw + r2.xyzw;
  r3.xyzw = cb3[1].xyzw * r1.yyyy;
  r3.xyzw = cb3[0].xyzw * r1.xxxx + r3.xyzw;
  r1.xyzw = cb3[2].xyzw * r1.zzzz + r3.xyzw;
  r1.xyzw = cb3[3].xyzw + r1.xyzw;
  r0.z = cmp(cb2[5].z != 0.000000);
  r1.xyzw = r0.zzzz ? r2.xyzw : r1.xyzw;

o0.xyw = r1.xyw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe f9412109a5b20007-vs_replace.txt
if (r1.w != 1.0) { r1.x += separation * (r1.w - convergence); }

  r0.z = saturate(cb2[5].x / r1.w);
  r0.z = r1.z + r0.z;

  // o0.xyw = r1.xyw; // Relocated from here with hlsltool.py

  r0.w = max(0, r0.z);
  r0.w = r0.w + -r0.z;
  o0.z = cb2[5].y * r0.w + r0.z;
  r0.z = max(abs(r0.x), abs(r0.y));
  r0.z = 1 / r0.z;
  r0.w = min(abs(r0.x), abs(r0.y));
  r0.z = r0.w * r0.z;
  r0.w = r0.z * r0.z;
  r1.x = r0.w * 0.0208350997 + -0.0851330012;
  r1.x = r0.w * r1.x + 0.180141002;
  r1.x = r0.w * r1.x + -0.330299497;
  r0.w = r0.w * r1.x + 0.999866009;
  r1.x = r0.z * r0.w;
  r1.x = r1.x * -2 + 1.57079637;
  r1.y = cmp(abs(r0.y) < abs(r0.x));
  r1.x = r1.y ? r1.x : 0;
  r0.z = r0.z * r0.w + r1.x;
  r0.w = cmp(r0.y < -r0.y);
  r0.w = r0.w ? -3.141593 : 0;
  r0.z = r0.z + r0.w;
  r0.w = min(-r0.x, r0.y);
  r0.x = max(-r0.x, r0.y);
  r0.x = cmp(r0.x >= -r0.x);
  r0.y = cmp(r0.w < -r0.w);
  r0.x = r0.x ? r0.y : 0;
  r0.x = r0.x ? -r0.z : r0.z;
  r0.y = cmp(r0.x < 0);
  r0.y = r0.y ? 6.283185 : 0;
  r0.x = r0.x + r0.y;
  r0.x = v2.z + r0.x;
  r0.x = r0.x * cb7[0].y + 0.5;
  r0.x = floor(r0.x);
  r0.x = r0.x / cb7[0].x;
  r0.y = cmp(r0.x >= -r0.x);
  r0.x = frac(abs(r0.x));
  r0.x = r0.y ? r0.x : -r0.x;
  r0.x = cb7[0].x * r0.x;
  r0.x = (uint)r0.x;
  r0.y = cmp(cb7[r0.x+2].w < 0);
  r0.zw = -cb7[r0.x+2].zw * v1.yx + cb7[r0.x+2].xy;
  r1.xy = cb7[r0.x+2].zw * v1.xy + cb7[r0.x+2].xy;
  o1.xy = r0.yy ? r0.zw : r1.xy;
  return;
}
