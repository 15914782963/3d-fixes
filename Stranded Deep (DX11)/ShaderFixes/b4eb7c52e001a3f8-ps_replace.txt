// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe b4eb7c52e001a3f8-ps_replace.txt
// 3DMigoto: b4eb7c52e001a3f8 |    Unity headers extracted from Glass - Bumped Specular Refractive Forward.shader
//    Shader "Beam Team/Standard/Transparent/Glass - Bumped Specular Refractive Forward" {
//      Properties {
//       _Color ("Glass Color (RGB)", Color) = (1,1,1,1)
//       _NormalStrength ("Normal Map Strength", Range(0,128)) = 64
//       _Abberation ("Abberation", Float) = 0.0015
//       _MainTex ("Diffuse Albedo (NOT IN USE)", 2D) = "white" { }
//       _SpecTex ("Specular Albedo (RGB) Gloss (A)", 2D) = "white" { }
//       _BumpTex ("Normal Map", 2D) = "bump" { }
//       _HighlightRimColor ("Highlight Rim Color", Color) = (0,0,0,0)
//      }
//      Fallback "VertexLit"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "FORCENOSHADOWCASTING"="true" "RenderType"="Transparent" }
//        GrabPass {
//         }
//        Pass 1/2 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Transparent" "FORCENOSHADOWCASTING"="true" "SHADOWSUPPORT"="true" "RenderType"="Transparent" }
//          GpuProgramID 10435
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 35
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Glass - Bumped Specular Refractive Forward.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 132 6 4
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "SUNSHINE_DISABLED" }
//   undeciphered2: 1 6 4 6 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 608
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Vector 512 [_GrabTexture_TexelSize]
//   Vector 528 [_Color]
//   Float 544 [_NormalStrength]
//   Float 548 [_Abberation]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   SetTexture 0 [_BumpTex] 2D 4
//   SetTexture 1 [_GrabTexture] 2D 3
//   SetTexture 2 [_SpecTex] 2D 5
//   SetTexture 3 [_ShadowMapTexture] 2D 2
//   SetTexture 4 [unity_SpecCube0] CUBE 0
//   SetTexture 5 [unity_SpecCube1] CUBE 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:03:47 2016
TextureCube<float4> t5 : register(t5);

TextureCube<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[35];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe b4eb7c52e001a3f8-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = v2.w;
  r0.y = v3.w;
  r0.z = v4.w;
  r1.xyz = _WorldSpaceCameraPos.xyz + -r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r1.xyz * r0.www;
  r3.xyzw = t0.Sample(s4_s, v1.xy).xyzw;
  r3.xy = r3.wy * float2(2,2) + float2(-1,-1);
  r1.w = dot(r3.xy, r3.xy);
  r1.w = min(1, r1.w);
  r1.w = 1 + -r1.w;
  r3.z = sqrt(r1.w);
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r4.xy = cb0[32].xy * r3.xy;
  r4.xy = cb0[34].xx * r4.xy;
  r4.xy = r4.xy * v5.zz + v5.xy;
  r5.xy = r4.xy / v5.ww;
  r5.xyzw = t1.Sample(s3_s, r5.xy).xyzw;
  r4.z = v5.w;
  r6.x = cb0[34].y;
  r6.z = 0;
  r5.yzw = r6.xxz + r4.xyz;
  r5.yz = r5.yz / r5.ww;
  r7.xyzw = t1.Sample(s3_s, r5.yz).xyzw;
  r4.xyz = r6.xxz * float3(2,2,2) + r4.xyz;
  r4.xy = r4.xy / r4.zz;
  r4.xyzw = t1.Sample(s3_s, r4.xy).xyzw;
  r4.x = r5.x;
  r4.y = r7.y;
  r5.xyzw = t2.Sample(s5_s, v1.xy).xyzw;
  r4.xyz = r4.xyz * cb0[33].xyz + v6.xyz;
  r5.xy = v9.xy / v9.ww;
  r6.xyzw = t3.Sample(s2_s, r5.xy).xyzw;
  r5.x = dot(v2.xyz, r3.xyz);
  r5.y = dot(v3.xyz, r3.xyz);
  r5.z = dot(v4.xyz, r3.xyz);
  r1.w = 1 + -r5.w;
  r2.w = dot(-r2.xyz, r5.xyz);
  r2.w = r2.w + r2.w;
  r3.xyz = r5.xyz * -r2.www + -r2.xyz;
  r6.xyz = cb0[6].xyz * r6.xxx;
  r2.w = cmp(0 < cb3[2].w);
  if (r2.w != 0) {
    r2.w = dot(r3.xyz, r3.xyz);
    r2.w = rsqrt(r2.w);
    r7.xyz = r3.xyz * r2.www;
    r8.xyz = cb3[0].xyz + -r0.xyz;
    r8.xyz = r8.xyz / r7.xyz;
    r9.xyz = cb3[1].xyz + -r0.xyz;
    r9.xyz = r9.xyz / r7.xyz;
    r10.xyz = cmp(float3(0,0,0) < r7.xyz);
    r8.xyz = r10.xyz ? r8.xyz : r9.xyz;
    r2.w = min(r8.x, r8.y);
    r2.w = min(r2.w, r8.z);
    r8.xyz = -cb3[2].xyz + r0.xyz;
    r7.xyz = r7.xyz * r2.www + r8.xyz;
  } else {
    r7.xyz = r3.xyz;
  }
  r2.w = -r1.w * 0.699999988 + 1.70000005;
  r2.w = r2.w * r1.w;
  r2.w = 6 * r2.w;
  r7.xyzw = t4.SampleLevel(s0_s, r7.xyz, r2.w).xyzw;
  r3.w = log2(r7.w);
  r3.w = cb3[3].y * r3.w;
  r3.w = exp2(r3.w);
  r3.w = cb3[3].x * r3.w;
  r8.xyz = r3.www * r7.xyz;
  r4.w = cmp(cb3[1].w < 0.999989986);
  if (r4.w != 0) {
    r4.w = cmp(0 < cb3[6].w);
    if (r4.w != 0) {
      r4.w = dot(r3.xyz, r3.xyz);
      r4.w = rsqrt(r4.w);
      r9.xyz = r4.www * r3.xyz;
      r10.xyz = cb3[4].xyz + -r0.xyz;
      r10.xyz = r10.xyz / r9.xyz;
      r11.xyz = cb3[5].xyz + -r0.xyz;
      r11.xyz = r11.xyz / r9.xyz;
      r12.xyz = cmp(float3(0,0,0) < r9.xyz);
      r10.xyz = r12.xyz ? r10.xyz : r11.xyz;
      r4.w = min(r10.x, r10.y);
      r4.w = min(r4.w, r10.z);
      r0.xyz = -cb3[6].xyz + r0.xyz;
      r3.xyz = r9.xyz * r4.www + r0.xyz;
    }
    r9.xyzw = t5.SampleLevel(s1_s, r3.xyz, r2.w).xyzw;
    r0.x = log2(r9.w);
    r0.x = cb3[7].y * r0.x;
    r0.x = exp2(r0.x);
    r0.x = cb3[7].x * r0.x;
    r0.xyz = r0.xxx * r9.xyz;
    r3.xyz = r3.www * r7.xyz + -r0.xyz;
    r8.xyz = cb3[1].www * r3.xyz + r0.xyz;
  }
  r0.x = dot(r5.xyz, r5.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r5.xyz * r0.xxx;
  r1.xyz = r1.xyz * r0.www + cb2[0].xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = dot(r0.xyz, r2.xyz);
  r2.w = cmp(r0.w < 0);
  r0.w = 9.99999975e-006 + -r0.w;
  r3.xyz = r2.xyz * r0.www + r0.xyz;
  r0.xyz = r2.www ? r3.xyz : r0.xyz;
  r0.w = dot(r0.xyz, cb2[0].xyz);
  r2.w = dot(r0.xyz, r1.xyz);
  r2.w = max(0, r2.w);
  r0.x = dot(r0.xyz, r2.xyz);
  r0.y = dot(cb2[0].xyz, r1.xyz);
  r0.xyw = max(float3(0,0,0), r0.xyw);
  r0.z = r1.w * r1.w;
  r1.x = -r1.w * r1.w + 1;
  r1.y = r0.x * r1.x + r0.z;
  r1.x = r0.w * r1.x + r0.z;
  r1.x = r1.x * r0.x;
  r1.x = r0.w * r1.y + r1.x;
  r1.x = 9.99999975e-006 + r1.x;
  r1.x = 2 / r1.x;
  r1.y = r0.z * r0.z;
  r1.z = r2.w * r2.w;
  r2.xy = r0.zz * r0.zz + float2(-1,1);
  r1.z = r1.z * r2.x + 1;
  r2.x = 3.14159274 * r1.z;
  r1.z = r2.x * r1.z + 1.00000001e-007;
  r1.y = r1.y / r1.z;
  r1.x = r1.x * r1.y;
  r1.x = 0.785398185 * r1.x;
  r1.y = cmp(cb0[3].w == 0.000000);
  r1.z = max(9.99999975e-005, r1.x);
  r1.z = sqrt(r1.z);
  r1.x = r1.y ? r1.z : r1.x;
  r0.zw = r1.wx * r0.zw;
  r0.w = max(0, r0.w);
  r0.z = -r0.z * 0.280000001 + 1;
  r1.x = 1 / r2.y;
  r0.z = r1.y ? r0.z : r1.x;
  r1.x = -cb0[2].w + r5.w;
  r1.x = saturate(1 + r1.x);
  r1.yzw = r0.www * r6.xyz;
  r0.xy = float2(1,1) + -r0.xy;
  r0.w = r0.y * r0.y;
  r0.w = r0.w * r0.w;
  r0.y = r0.w * r0.y;
  r2.xyz = float3(1,1,1) + -cb0[2].xyz;
  r2.xyz = r2.xyz * r0.yyy + cb0[2].xyz;
  r0.yzw = r0.zzz * r8.xyz;
  r2.w = r0.x * r0.x;
  r2.w = r2.w * r2.w;
  r0.x = r2.w * r0.x;
  r3.xyz = -cb0[2].xyz + r1.xxx;
  r3.xyz = r0.xxx * r3.xyz + cb0[2].xyz;
  r0.xyz = r3.xyz * r0.yzw;
  r0.xyz = r1.yzw * r2.xyz + r0.xyz;
  o0.xyz = r0.xyz + r4.xyz;
  o0.w = 1;
  return;
}
