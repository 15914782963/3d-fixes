// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe a7b1b6a413b0a7cc-vs_replace.txt
// 3DMigoto: a7b1b6a413b0a7cc |    Unity headers extracted from AFS Foliage V4 - Deferred.shader
//    Shader "Beam Team/Standard/Terrain/AFS/Foliage Shader v4 - Deferred" {
//      Properties {
//      [LM_Albedo] [LM_Transparency]  _MainTex ("Base (RGB)", 2D) = "white" { }
//      [LM_TransparencyCutOff]  _Cutoff ("Alpha cutoff", Range(0,1)) = 0.3
//      [LM_Glossiness]  _BumpTransSpecMap ("Normal (GA) Trans(R) Smoothness(B)", 2D) = "bump" { }
//      [LM_Specular]  _SpecularReflectivity ("Specular Reflectivity", Color) = (0.2,0.2,0.2,1)
//       _TranslucencyColor ("Translucency Color", Color) = (0.73,0.85,0.41,1)
//       _TranslucencyViewDependency ("Translucency View Dependency", Range(0,1)) = 0.5
//       _LeafTurbulence ("Leaf Turbulence", Range(0,1)) = 0.5
//      [KeywordEnum(Vertex Colors, Vertex Colors And UV4)]  _BendingControls ("Bending Parameters", Float) = 0
//      [HideInInspector]  _HighlightRimColor ("Highlight Rim Color", Color) = (0,0,0,0)
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="AFSFoliageBending" "AfsMode"="Foliage" }
//        Pass 2/2 {
//          Name "DEFERRED"
//          Tags { "LIGHTMODE"="Deferred" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="AFSFoliageBending" "AfsMode"="Foliage" }
//          GpuProgramID 99802
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 23
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from AFS Foliage V4 - Deferred.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 119 0 0
//   Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
//   undeciphered2: 1 0 3 0 0
//   undeciphered3: 207 6 0 0 2 1 1 2 3 4 6 7 7 8
//   ConstBuffer "$Globals" 704
//   Vector 128 [_Wind]
//   Float 144 [_AfsWaveSize]
//   Vector 160 [_AfsTimeFrequency]
//   Float 176 [_LeafTurbulence]
//   Float 180 [_BendingControls]
//   Vector 576 [_MainTex_ST]
//   Vector 608 [_TranslucencyColor]
//   Float 624 [_TranslucencyViewDependency]
//   Vector 632 [_AfsSpecFade] 2
//   Vector 640 [_AfsDirectSunDir]
//   Vector 672 [_HighlightRimColor] 3
//   Float 684 [_HighlightRimPower]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityPerDraw" 352
//   Vector 336 [unity_WorldTransformParams]
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 192 [_Object2World]
//   Matrix 256 [_World2Object]
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 10:58:29 2016
cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[43];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : TEXCOORD8)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe a7b1b6a413b0a7cc-vs_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xy = cmp(float2(0,0) < v2.xz);
  r0.zw = cmp(v2.xz < float2(0,0));
  r0.xy = (int2)-r0.xy + (int2)r0.zw;
  r0.xy = (int2)r0.xy;
  r0.z = 0.100000001 * v7.y;
  r0.zw = v2.xz * r0.zz;
  r0.xz = r0.zw * r0.xy;
  r1.xyz = cb2[13].xyz * v0.yyy;
  r1.xyz = cb2[12].xyz * v0.xxx + r1.xyz;
  r1.xyz = cb2[14].xyz * v0.zzz + r1.xyz;
  r1.xyz = cb2[15].xyz * v0.www + r1.xyz;
  r0.w = r1.x + r1.z;
  r0.w = cb0[9].x * r0.w;
  r0.w = frac(r0.w);
  r1.w = v7.z + v7.z;
  r2.x = cmp(cb0[11].y == 0.000000);
  r1.w = r2.x ? 1 : r1.w;
  r2.xy = r2.xx ? v7.zz : v6.xy;
  r0.w = r1.w + r0.w;
  r1.w = cb0[10].x + r1.w;
  r3.y = v7.x + r0.w;
  r0.w = v7.y + r3.y;
  r3.x = dot(r1.xyz, r0.www);
  r3.xyzw = cb0[10].yyyy + r3.xxyy;
  r2.zw = float2(-0.375,-0.193000004) + cb0[10].zw;
  r4.zw = cb0[11].xx * r2.zw + float2(0.375,0.193000004);
  r4.xy = float2(1.97500002,0.792999983);
  r3.xyzw = r4.xyzw * r3.xyzw;
  r3.xyzw = frac(r3.xyzw);
  r3.xyzw = r3.xyzw * float4(2,2,2,2) + float4(-0.5,-0.5,-0.5,-0.5);
  r3.xyzw = frac(r3.xyzw);
  r3.xyzw = r3.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
  r4.xyzw = abs(r3.xyzw) * abs(r3.xyzw);
  r3.xyzw = -abs(r3.xyzw) * float4(2,2,2,2) + float4(3,3,3,3);
  r3.xyzw = r4.xyzw * r3.xyzw;
  r3.xy = r3.xz + r3.yw;
  r4.xyz = cb0[8].xyz * r3.yyy;
  r4.xyz = r4.xyz * r2.yyy;
  r0.y = r3.y * r2.y;
  r2.xyz = cb0[8].xyz * r2.xxx;
  r3.z = 0.300000012;
  r0.xyz = r3.xzx * r0.xyz + r4.xyz;
  r3.xy = cb0[9].xx * r1.xz;
  r3.xy = frac(r3.xy);
  r4.x = r3.x + r1.w;
  r4.y = r1.w * 0.800000012 + r3.y;
  r3.xy = float2(0.5,0.5) + r4.xy;
  r3.xy = frac(r3.xy);
  r3.xy = r3.xy * float2(2,2) + float2(-1,-1);
  r3.zw = abs(r3.xy) * abs(r3.xy);
  r3.xy = -abs(r3.xy) * float2(2,2) + float2(3,3);
  r3.xy = r3.zw * r3.xy;
  r0.w = r3.y * r3.y + r3.x;
  r0.w = 3 + r0.w;
  r0.w = cb0[8].w * r0.w;
  r0.w = 0.330000013 * r0.w;
  r0.xyz = r0.xyz * r0.www + r1.xyz;
  r0.xyz = r2.xyz * r0.www + r0.xyz;
  r1.xyz = cb2[17].xyz * r0.yyy;
  r0.xyw = cb2[16].xyz * r0.xxx + r1.xyz;
  r0.xyz = cb2[18].xyz * r0.zzz + r0.xyw;
  r0.xyz = cb2[19].xyz * v0.www + r0.xyz;
  r1.xyzw = cb2[1].xyzw * r0.yyyy;
  r1.xyzw = cb2[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb2[2].xyzw * r0.zzzz + r1.xyzw;
  o0.xyzw = cb2[3].xyzw * v0.wwww + r1.xyzw;
  r1.xyz = cb2[13].xyz * r0.yyy;
  r1.xyz = cb2[12].xyz * r0.xxx + r1.xyz;
  r1.xyz = cb2[14].xyz * r0.zzz + r1.xyz;
  r1.xyz = cb2[15].xyz * v0.www + r1.xyz;
  o1.w = r1.x;
  r2.y = cb2[16].x;
  r2.z = cb2[17].x;
  r2.x = cb2[18].x;
  r3.y = cb2[16].y;
  r3.z = cb2[17].y;
  r3.x = cb2[18].y;
  r0.w = dot(v2.xyz, v2.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = v2.xyz * r0.www;
  r3.xyz = r4.yyy * r3.xyz;
  r2.xyz = r2.xyz * r4.xxx + r3.xyz;
  r3.y = cb2[16].z;
  r3.z = cb2[17].z;
  r3.x = cb2[18].z;
  r2.xyz = r3.xyz * r4.zzz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = dot(v1.xyz, v1.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = v1.xyz * r0.www;
  r5.xyz = cb2[13].yzx * r3.yyy;
  r3.xyw = cb2[12].yzx * r3.xxx + r5.xyz;
  r3.xyz = cb2[14].yzx * r3.zzz + r3.xyw;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r5.xyz = r3.xyz * r2.xyz;
  r5.xyz = r2.zxy * r3.yzx + -r5.xyz;
  r0.w = cb2[21].w * v1.w;
  r5.xyz = r5.xyz * r0.www;
  o1.y = r5.x;
  o1.z = r2.y;
  o1.x = r3.z;
  o2.w = r1.y;
  o2.x = r3.x;
  o3.x = r3.y;
  o2.z = r2.z;
  o2.y = r5.y;
  o3.y = r5.z;
  o3.w = r1.z;
  r1.xyz = _WorldSpaceCameraPos.xyz + -r1.xyz;
  o3.z = r2.x;
  r0.w = dot(r1.xyz, r1.xyz);
  r1.w = sqrt(r0.w);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = cb0[39].z + -r1.w;
  o4.w = saturate(r0.w / cb0[39].w);
  o4.xy = v3.xy * cb0[36].xy + cb0[36].zw;
  o4.z = 0;
  r0.w = saturate(dot(r1.xyz, cb0[40].xyz));
  r1.x = dot(r2.yzx, r1.xyz);
  r1.y = saturate(dot(r2.yzx, cb0[40].xyz));
  r0.w = -r1.y + r0.w;
  r0.w = cb0[39].x * r0.w + r1.y;
  r0.w = v7.w * r0.w;
  r0.w = cb0[40].w * r0.w;
  o5.xyz = cb0[38].xyz * r0.www;
  r0.w = cmp(0 < r1.x);
  r1.x = saturate(r1.x * 2 + 1);
  o5.w = r0.w ? 1 : r1.x;
  r1.xyz = cb2[17].xyz * _WorldSpaceCameraPos.yyy;
  r1.xyz = cb2[16].xyz * _WorldSpaceCameraPos.xxx + r1.xyz;
  r1.xyz = cb2[18].xyz * _WorldSpaceCameraPos.zzz + r1.xyz;
  r1.xyz = cb2[19].xyz + r1.xyz;
  r0.xyz = r1.xyz + -r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.x = saturate(dot(r4.xyz, r0.xyz));
  r0.x = 1 + -r0.x;
  r0.xyz = cb0[42].xyz * r0.xxx;
  r0.xyz = log2(r0.xyz);
  r0.xyz = cb0[42].www * r0.xyz;
  o6.xyz = exp2(r0.xyz);
  o7.xyzw = float4(0,0,0,0);
  o8.xyzw = float4(0,0,0,0);
  return;
}

/****************************** COMPILE WARNINGS ******************************
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\a7b1b6a413b0a7cc-vs_replace.txt(122,14-15): warning X3578: Output value 'o6' is not completely initialized

****************************** COMPILE WARNINGS ******************************/
