// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 5ee8a2e0abe9d11f-ps_replace.txt
// 3DMigoto: 5ee8a2e0abe9d11f |    Unity headers extracted from Foliage - Double-Sided 2PASS Metallic.shader
//    Shader "Beam Team/Foliage/Foliage - Forward Cull Off 2PASS Metallic" {
//      Properties {
//      [Header(Diffuse)]  _Color ("Color", Color) = (1,1,1,1)
//       _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//       _MainTex ("Diffuse Albedo (RGB)", 2D) = "white" { }
//      [Header(Packed Normals)]  _PackedTex ("Gloss (R) Normal X (G) Translucency (B) Normal Y (A)", 2D) = "white" { }
//      [Header(Translucency)] [Toggle(BEAM_SPEEDTREE_TRANSLUCENCY)]  _Translucent ("Translucent", Float) = 0
//       _TranslucencyColor ("Translucency Tint", Color) = (0.73,0.85,0.41,1)
//       _TranslucencyIntensity ("Translucency Intensity", Range(1,5)) = 1
//       _TranslucencyViewDependency ("Translucency View Dependency", Range(0,1)) = 0.5
//      [Header(Wind)] [MaterialEnum(None, 0, Fastest, 1, Fast, 2, Better, 3, Best, 4, Palm, 5)]  _WindQuality ("Wind Quality", Range(0,5)) = 0
//      }
//      Fallback "Legacy Shaders/Transparent/Cutout/VertexLit"
//      SubShader 1/1 {
//        Tags { "QUEUE"="AlphaTest" "RenderType"="Foliage" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="AlphaTest" "RenderType"="Foliage" }
//          Cull Front
//          GpuProgramID 54878
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 17
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Foliage - Double-Sided 2PASS Metallic.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 142 2 5
//   Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "SUNSHINE_DISABLED" }
//   undeciphered2: 1 4 4 4 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 656
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Float 528 [_Cutoff]
//   Vector 544 [_Color]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 608 [unity_SHAr]
//   Vector 624 [unity_SHAg]
//   Vector 640 [unity_SHAb]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   SetTexture 0 [_MainTex] 2D 2
//   SetTexture 1 [_PackedTex] 2D 3
//   SetTexture 2 [unity_SpecCube0] CUBE 0
//   SetTexture 3 [unity_SpecCube1] CUBE 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:02:49 2016
TextureCube<float4> t3 : register(t3);

TextureCube<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[41];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[35];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float3 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 5ee8a2e0abe9d11f-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = v1.w;
  r0.y = v2.w;
  r0.z = v3.w;
  r1.xyz = _WorldSpaceCameraPos.xyz + -r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r1.xyz * r0.www;
  r3.xyzw = t0.Sample(s2_s, v4.xy).xyzw;
  r3.xyz = cb0[34].xyz * r3.xyz;
  r1.w = r3.w * cb0[34].w + -cb0[33].x;
  r1.w = cmp(r1.w < 0);
  if (r1.w != 0) discard;
  r4.xyzw = t1.Sample(s3_s, v4.xy).xyzw;
  r5.xy = r4.wy * float2(2,2) + float2(-1,-1);
  r1.w = dot(r5.xy, r5.xy);
  r1.w = min(1, r1.w);
  r1.w = 1 + -r1.w;
  r5.z = sqrt(r1.w);
  r6.x = dot(v1.xyz, r5.xyz);
  r6.y = dot(v2.xyz, r5.xyz);
  r6.z = dot(v3.xyz, r5.xyz);
  r1.w = -r4.x * v4.z + 1;
  r6.w = 1;
  r5.x = dot(cb2[38].xyzw, r6.xyzw);
  r5.y = dot(cb2[39].xyzw, r6.xyzw);
  r5.z = dot(cb2[40].xyzw, r6.xyzw);
  r4.yzw = v6.xyz + r5.xyz;
  r4.yzw = max(float3(0,0,0), r4.yzw);
  r2.w = cmp(cb0[3].w == 0.000000);
  r5.xyz = log2(r4.yzw);
  r5.xyz = float3(0.416666657,0.416666657,0.416666657) * r5.xyz;
  r5.xyz = exp2(r5.xyz);
  r5.xyz = r5.xyz * float3(1.05499995,1.05499995,1.05499995) + float3(-0.0549999997,-0.0549999997,-0.0549999997);
  r5.xyz = max(float3(0,0,0), r5.xyz);
  r4.yzw = r2.www ? r5.xyz : r4.yzw;
  r3.w = cmp(0 < cb3[2].w);
  if (r3.w != 0) {
    r3.w = dot(r6.xyz, r6.xyz);
    r3.w = rsqrt(r3.w);
    r5.xyz = r6.xyz * r3.www;
    r7.xyz = cb3[0].xyz + -r0.xyz;
    r7.xyz = r7.xyz / r5.xyz;
    r8.xyz = cb3[1].xyz + -r0.xyz;
    r8.xyz = r8.xyz / r5.xyz;
    r9.xyz = cmp(float3(0,0,0) < r5.xyz);
    r7.xyz = r9.xyz ? r7.xyz : r8.xyz;
    r3.w = min(r7.x, r7.y);
    r3.w = min(r3.w, r7.z);
    r7.xyz = -cb3[2].xyz + r0.xyz;
    r5.xyz = r5.xyz * r3.www + r7.xyz;
  } else {
    r5.xyz = r6.xyz;
  }
  r3.w = -r1.w * 0.699999988 + 1.70000005;
  r3.w = r3.w * r1.w;
  r3.w = 6 * r3.w;
  r5.xyzw = t2.SampleLevel(s0_s, r5.xyz, r3.w).xyzw;
  r5.w = log2(r5.w);
  r5.w = cb3[3].y * r5.w;
  r5.w = exp2(r5.w);
  r5.w = cb3[3].x * r5.w;
  r7.xyz = r5.www * r5.xyz;
  r6.w = cmp(cb3[1].w < 0.999989986);
  if (r6.w != 0) {
    r6.w = cmp(0 < cb3[6].w);
    if (r6.w != 0) {
      r6.w = dot(r6.xyz, r6.xyz);
      r6.w = rsqrt(r6.w);
      r8.xyz = r6.xyz * r6.www;
      r9.xyz = cb3[4].xyz + -r0.xyz;
      r9.xyz = r9.xyz / r8.xyz;
      r10.xyz = cb3[5].xyz + -r0.xyz;
      r10.xyz = r10.xyz / r8.xyz;
      r11.xyz = cmp(float3(0,0,0) < r8.xyz);
      r9.xyz = r11.xyz ? r9.xyz : r10.xyz;
      r6.w = min(r9.x, r9.y);
      r6.w = min(r6.w, r9.z);
      r0.xyz = -cb3[6].xyz + r0.xyz;
      r0.xyz = r8.xyz * r6.www + r0.xyz;
    } else {
      r0.xyz = r6.xyz;
    }
    r8.xyzw = t3.SampleLevel(s1_s, r0.xyz, r3.w).xyzw;
    r0.x = log2(r8.w);
    r0.x = cb3[7].y * r0.x;
    r0.x = exp2(r0.x);
    r0.x = cb3[7].x * r0.x;
    r0.xyz = r0.xxx * r8.xyz;
    r5.xyz = r5.www * r5.xyz + -r0.xyz;
    r7.xyz = cb3[1].www * r5.xyz + r0.xyz;
  }
  r0.x = dot(r6.xyz, r6.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r6.xyz * r0.xxx;
  r3.xyz = cb0[2].www * r3.xyz;
  r1.xyz = r1.xyz * r0.www + cb2[0].xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = dot(r0.xyz, r2.xyz);
  r3.w = cmp(r0.w < 0);
  r0.w = 9.99999975e-006 + -r0.w;
  r5.xyz = r2.xyz * r0.www + r0.xyz;
  r0.xyz = r3.www ? r5.xyz : r0.xyz;
  r0.w = dot(r0.xyz, cb2[0].xyz);
  r3.w = dot(r0.xyz, r1.xyz);
  r3.w = max(0, r3.w);
  r0.x = dot(r0.xyz, r2.xyz);
  r0.y = dot(cb2[0].xyz, r1.xyz);
  r0.xyw = max(float3(0,0,0), r0.xyw);
  r0.z = r1.w * r1.w;
  r1.x = -r1.w * r1.w + 1;
  r1.y = r0.x * r1.x + r0.z;
  r1.x = r0.w * r1.x + r0.z;
  r1.x = r1.x * r0.x;
  r1.x = r0.w * r1.y + r1.x;
  r1.x = 9.99999975e-006 + r1.x;
  r1.x = 2 / r1.x;
  r1.y = r0.z * r0.z;
  r1.z = r3.w * r3.w;
  r2.xy = r0.zz * r0.zz + float2(-1,1);
  r1.z = r1.z * r2.x + 1;
  r2.x = 3.14159274 * r1.z;
  r1.z = r2.x * r1.z + 1.00000001e-007;
  r1.y = r1.y / r1.z;
  r1.z = 1 + -r0.w;
  r2.x = r1.z * r1.z;
  r2.x = r2.x * r2.x;
  r1.z = r2.x * r1.z;
  r0.x = 1 + -r0.x;
  r2.x = r0.x * r0.x;
  r2.x = r2.x * r2.x;
  r0.x = r2.x * r0.x;
  r2.x = r0.y * r0.y;
  r2.x = dot(r2.xx, r1.ww);
  r2.x = -0.5 + r2.x;
  r1.z = r2.x * r1.z + 1;
  r2.x = r2.x * r0.x + 1;
  r1.z = r2.x * r1.z;
  r1.x = r1.x * r1.y;
  r1.x = 0.785398185 * r1.x;
  r1.y = max(9.99999975e-005, r1.x);
  r1.y = sqrt(r1.y);
  r1.x = r2.w ? r1.y : r1.x;
  r1.x = r1.x * r0.w;
  r1.x = max(0, r1.x);
  r0.zw = r1.wz * r0.zw;
  r0.z = -r0.z * 0.280000001 + 1;
  r1.y = 1 / r2.y;
  r0.z = r2.w ? r0.z : r1.y;
  r1.y = r4.x * v4.z + -cb0[2].w;
  r1.y = saturate(1 + r1.y);
  r2.xyz = cb0[6].xyz * r0.www + r4.yzw;
  r1.xzw = cb0[6].xyz * r1.xxx;
  r0.y = 1 + -r0.y;
  r0.w = r0.y * r0.y;
  r0.w = r0.w * r0.w;
  r0.y = r0.w * r0.y;
  r4.xyz = float3(1,1,1) + -cb0[2].xyz;
  r4.xyz = r4.xyz * r0.yyy + cb0[2].xyz;
  r1.xzw = r4.xyz * r1.xzw;
  r1.xzw = r3.xyz * r2.xyz + r1.xzw;
  r0.yzw = r0.zzz * r7.xyz;
  r2.xyz = -cb0[2].xyz + r1.yyy;
  r2.xyz = r0.xxx * r2.xyz + cb0[2].xyz;
  o0.xyz = r0.yzw * r2.xyz + r1.xzw;
  o0.w = 1;
  return;
}
