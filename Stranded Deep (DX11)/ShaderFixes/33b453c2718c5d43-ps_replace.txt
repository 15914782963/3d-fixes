// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 33b453c2718c5d43-ps_replace.txt
// 3DMigoto: 33b453c2718c5d43 |    Unity headers extracted from Standard - Cull Off.shader
//    Shader "Custom/Standard - Cull Off" {
//      Properties {
//       _Color ("Color", Color) = (1,1,1,1)
//       _MainTex ("Albedo (RGB)", 2D) = "white" { }
//       _BumpMap ("Normal (RGB)", 2D) = "bump" { }
//       _Glossiness ("Smoothness", Range(0,1)) = 0.5
//       _Metallic ("Metallic", Range(0,1)) = 0
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "RenderType"="Opaque" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          Cull Off
//          GpuProgramID 22400
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 47
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Standard - Cull Off.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 185 6 4
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_ON" }
//   undeciphered2: 1 8 4 6 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 176
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 80 [unity_DynamicLightmap_HDR]
//   Vector 96 [_LightColor0]
//   Float 128 [_Glossiness]
//   Float 132 [_Metallic]
//   Vector 144 [_Color]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   SetTexture 0 [_MainTex] 2D 4
//   SetTexture 1 [_BumpMap] 2D 5
//   SetTexture 2 [_ShadowMapTexture] 2D 3
//   SetTexture 3 [unity_DynamicLightmap] 2D 0
//   SetTexture 4 [unity_DynamicDirectionality] 2D -1
//   SetTexture 5 [unity_DynamicNormal] 2D -1
//   SetTexture 6 [unity_SpecCube0] CUBE 1
//   SetTexture 7 [unity_SpecCube1] CUBE 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:15:58 2016
TextureCube<float4> t7 : register(t7);

TextureCube<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[10];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD5,
  float4 v6 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 33b453c2718c5d43-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = v2.w;
  r0.y = v3.w;
  r0.z = v4.w;
  r1.xyz = _WorldSpaceCameraPos.xyz + -r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r1.xyz * r0.www;
  r3.xyzw = t0.Sample(s4_s, v1.xy).xyzw;
  r4.xyz = cb0[9].xyz * r3.xyz;
  r5.xyzw = t1.Sample(s5_s, v1.xy).xyzw;
  r5.xy = r5.wy * float2(2,2) + float2(-1,-1);
  r1.w = dot(r5.xy, r5.xy);
  r1.w = min(1, r1.w);
  r1.w = 1 + -r1.w;
  r5.z = sqrt(r1.w);
  r6.xy = v5.xy / v5.ww;
  r6.xyzw = t2.Sample(s3_s, r6.xy).xyzw;
  r7.x = dot(v2.xyz, r5.xyz);
  r7.y = dot(v3.xyz, r5.xyz);
  r7.z = dot(v4.xyz, r5.xyz);
  r1.w = 1 + -cb0[8].x;
  r2.w = dot(-r2.xyz, r7.xyz);
  r2.w = r2.w + r2.w;
  r5.xyz = r7.xyz * -r2.www + -r2.xyz;
  r6.xyz = cb0[6].xyz * r6.xxx;
  r8.xyzw = t3.Sample(s0_s, v6.zw).xyzw;
  r2.w = cb0[5].x * r8.w;
  r8.xyz = r2.www * r8.xyz;
  r8.xyz = log2(r8.xyz);
  r8.xyz = cb0[5].yyy * r8.xyz;
  r8.xyz = exp2(r8.xyz);
  r9.xyzw = t4.Sample(s0_s, v6.zw).xyzw;
  r10.xyzw = t5.Sample(s0_s, v6.zw).xyzw;
  r9.xyz = r9.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r2.w = dot(r9.xyz, r9.xyz);
  r2.w = sqrt(r2.w);
  r2.w = max(0.00100000005, r2.w);
  r9.xyz = r9.xyz / r2.www;
  r10.xyz = r10.zyx * float3(2,2,2) + float3(-1,-1,-1);
  r3.w = dot(r10.xyz, r9.xyz);
  r3.w = max(0.125, r3.w);
  r8.xyz = r8.xyz / r3.www;
  r3.w = dot(r7.xyz, r9.xyz);
  r3.w = max(0, r3.w);
  r4.w = 1 + -r2.w;
  r10.xyz = r8.xyz * r4.www;
  r8.xyz = r8.xyz * r2.www;
  r2.w = cmp(0 < cb3[2].w);
  if (r2.w != 0) {
    r2.w = dot(r5.xyz, r5.xyz);
    r2.w = rsqrt(r2.w);
    r11.xyz = r5.xyz * r2.www;
    r12.xyz = cb3[0].xyz + -r0.xyz;
    r12.xyz = r12.xyz / r11.xyz;
    r13.xyz = cb3[1].xyz + -r0.xyz;
    r13.xyz = r13.xyz / r11.xyz;
    r14.xyz = cmp(float3(0,0,0) < r11.xyz);
    r12.xyz = r14.xyz ? r12.xyz : r13.xyz;
    r2.w = min(r12.x, r12.y);
    r2.w = min(r2.w, r12.z);
    r12.xyz = -cb3[2].xyz + r0.xyz;
    r11.xyz = r11.xyz * r2.www + r12.xyz;
  } else {
    r11.xyz = r5.xyz;
  }
  r2.w = -r1.w * 0.699999988 + 1.70000005;
  r2.w = r2.w * r1.w;
  r2.w = 6 * r2.w;
  r11.xyzw = t6.SampleLevel(s1_s, r11.xyz, r2.w).xyzw;
  r4.w = log2(r11.w);
  r4.w = cb3[3].y * r4.w;
  r4.w = exp2(r4.w);
  r4.w = cb3[3].x * r4.w;
  r12.xyz = r4.www * r11.xyz;
  r5.w = cmp(cb3[1].w < 0.999989986);
  if (r5.w != 0) {
    r5.w = cmp(0 < cb3[6].w);
    if (r5.w != 0) {
      r5.w = dot(r5.xyz, r5.xyz);
      r5.w = rsqrt(r5.w);
      r13.xyz = r5.xyz * r5.www;
      r14.xyz = cb3[4].xyz + -r0.xyz;
      r14.xyz = r14.xyz / r13.xyz;
      r15.xyz = cb3[5].xyz + -r0.xyz;
      r15.xyz = r15.xyz / r13.xyz;
      r16.xyz = cmp(float3(0,0,0) < r13.xyz);
      r14.xyz = r16.xyz ? r14.xyz : r15.xyz;
      r5.w = min(r14.x, r14.y);
      r5.w = min(r5.w, r14.z);
      r0.xyz = -cb3[6].xyz + r0.xyz;
      r5.xyz = r13.xyz * r5.www + r0.xyz;
    }
    r5.xyzw = t7.SampleLevel(s2_s, r5.xyz, r2.w).xyzw;
    r0.x = log2(r5.w);
    r0.x = cb3[7].y * r0.x;
    r0.x = exp2(r0.x);
    r0.x = cb3[7].x * r0.x;
    r0.xyz = r0.xxx * r5.xyz;
    r5.xyz = r4.www * r11.xyz + -r0.xyz;
    r12.xyz = cb3[1].www * r5.xyz + r0.xyz;
  }
  r0.x = dot(r7.xyz, r7.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r7.xyz * r0.xxx;
  r3.xyz = r3.xyz * cb0[9].xyz + -cb0[2].xyz;
  r3.xyz = cb0[8].yyy * r3.xyz + cb0[2].xyz;
  r2.w = -cb0[8].y * cb0[2].w + cb0[2].w;
  r4.xyz = r4.xyz * r2.www;
  r5.xyz = r1.xyz * r0.www + cb2[0].xyz;
  r4.w = dot(r5.xyz, r5.xyz);
  r4.w = max(0.00100000005, r4.w);
  r4.w = rsqrt(r4.w);
  r5.xyz = r5.xyz * r4.www;
  r4.w = dot(r0.xyz, r2.xyz);
  r5.w = cmp(r4.w < 0);
  r4.w = 9.99999975e-006 + -r4.w;
  r7.xyz = r2.xyz * r4.www + r0.xyz;
  r7.xyz = r5.www ? r7.xyz : r0.xyz;
  r4.w = dot(r7.xyz, cb2[0].xyz);
  r4.w = max(0, r4.w);
  r5.w = dot(r7.xyz, r5.xyz);
  r5.w = max(0, r5.w);
  r2.x = dot(r7.xyz, r2.xyz);
  r2.y = dot(cb2[0].xyz, r5.xyz);
  r2.xy = max(float2(0,0), r2.xy);
  r2.z = r1.w * r1.w;
  r5.x = -r1.w * r1.w + 1;
  r5.y = r2.x * r5.x + r2.z;
  r5.x = r4.w * r5.x + r2.z;
  r5.x = r5.x * r2.x;
  r5.x = r4.w * r5.y + r5.x;
  r5.x = 9.99999975e-006 + r5.x;
  r5.x = 2 / r5.x;
  r5.y = r2.z * r2.z;
  r5.z = r5.w * r5.w;
  r7.xy = r2.zz * r2.zz + float2(-1,1);
  r5.z = r5.z * r7.x + 1;
  r5.w = 3.14159274 * r5.z;
  r5.z = r5.w * r5.z + 1.00000001e-007;
  r5.y = r5.y / r5.z;
  r5.z = 1 + -r4.w;
  r5.w = r5.z * r5.z;
  r5.w = r5.w * r5.w;
  r5.z = r5.w * r5.z;
  r2.x = 1 + -r2.x;
  r5.w = r2.x * r2.x;
  r5.w = r5.w * r5.w;
  r2.x = r5.w * r2.x;
  r5.w = r2.y * r2.y;
  r5.w = dot(r5.ww, r1.ww);
  r5.w = -0.5 + r5.w;
  r5.z = r5.w * r5.z + 1;
  r5.w = r5.w * r2.x + 1;
  r5.xz = r5.xz * r5.yw;
  r5.x = 0.785398185 * r5.x;
  r5.y = cmp(cb0[3].w == 0.000000);
  r5.w = max(9.99999975e-005, r5.x);
  r5.w = sqrt(r5.w);
  r5.x = r5.y ? r5.w : r5.x;
  r5.x = r5.x * r4.w;
  r5.x = max(0, r5.x);
  r4.w = r5.z * r4.w;
  r1.w = r2.z * r1.w;
  r1.w = -r1.w * 0.280000001 + 1;
  r5.z = 1 / r7.y;
  r1.w = r5.y ? r1.w : r5.z;
  r2.w = cb0[8].x + -r2.w;
  r2.w = saturate(1 + r2.w);
  r7.xyz = r6.xyz * r4.www;
  r7.xyz = r10.xyz * r3.www + r7.xyz;
  r5.xzw = r5.xxx * r6.xyz;
  r2.y = 1 + -r2.y;
  r4.w = r2.y * r2.y;
  r4.w = r4.w * r4.w;
  r2.y = r4.w * r2.y;
  r6.xyz = float3(1,1,1) + -r3.xyz;
  r6.xyz = r6.xyz * r2.yyy + r3.xyz;
  r5.xzw = r6.xyz * r5.xzw;
  r5.xzw = r4.xyz * r7.xyz + r5.xzw;
  r6.xyz = r1.www * r12.xyz;
  r7.xyz = r2.www + -r3.xyz;
  r2.xyw = r2.xxx * r7.xyz + r3.xyz;
  r2.xyw = r6.xyz * r2.xyw + r5.xzw;
  r1.xyz = r1.xyz * r0.www + r9.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.x = dot(r0.xyz, r1.xyz);
  r0.y = dot(r9.xyz, r1.xyz);
  r0.xy = max(float2(0,0), r0.xy);
  r0.z = max(9.99999975e-005, r2.z);
  r0.zw = r0.zy * r0.zy;
  r0.z = 2 / r0.z;
  r0.z = -2 + r0.z;
  r0.z = max(9.99999975e-005, r0.z);
  r0.w = r0.w * cb0[8].x + r2.z;
  r1.x = 1 + r0.z;
  r0.x = log2(r0.x);
  r0.xy = r0.zy * r0.xw;
  r0.x = exp2(r0.x);
  r0.x = r1.x * r0.x;
  r0.y = r0.y * 8 + 9.99999975e-005;
  r0.x = r0.x / r0.y;
  r0.y = max(9.99999975e-005, r0.x);
  r0.y = sqrt(r0.y);
  r0.x = r5.y ? r0.y : r0.x;
  r0.xyz = r0.xxx * r3.xyz + r4.xyz;
  r0.xyz = r0.xyz * r8.xyz;
  o0.xyz = r0.xyz * r3.www + r2.xyw;
  o0.w = 1;
  return;
}
