// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 0afa498255d44c1f-vs_replace.txt
// 3DMigoto: 0afa498255d44c1f |    Unity headers extracted from Camera-CustomDepthNormalTexture.shader
//    Shader "Hidden/Camera-DepthNormalTexture" {
//      Properties {
//       _MainTex ("", 2D) = "white" { }
//       _Cutoff ("", Float) = 0.5
//       _Color ("", Color) = (1,1,1,1)
//      }
//      Fallback Off
//      SubShader 11/13 {
//        Tags { "RenderType"="SpeedTree" }
//        Pass 1/1 {
//          Tags { "RenderType"="SpeedTree" }
//          Cull Off
//          GpuProgramID 840842
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 92
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Camera-CustomDepthNormalTexture.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 59 0 0
//   Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_MESH" }
//   undeciphered2: 1 0 4 0 0
//   undeciphered3: 15 4 0 0 2 1 1 2 3 4
//   ConstBuffer "$Globals" 144
//   Float 96 [_WindQuality]
//   Float 100 [_WindEnabled]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 80 [_ProjectionParams]
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityPerDraw" 352
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 64 [glstate_matrix_modelview0]
//   Matrix 128 [glstate_matrix_invtrans_modelview0]
//   Matrix 192 [_Object2World]
//   Matrix 256 [_World2Object]
//   ConstBuffer "SpeedTreeWind" 256
//   Vector 0 [_ST_WindVector]
//   Vector 16 [_ST_WindGlobal]
//   Vector 96 [_ST_WindBranchAdherences]
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//   BindCB "SpeedTreeWind" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 10:33:52 2016
cbuffer cb3 : register(b3)
{
  float4 cb3[7];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[19];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[7];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[7];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float2 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.x = cb3[1].x + cb2[15].x;
  r0.y = cb3[1].x * 0.800000012 + cb2[15].y;
  r0.xy = float2(0.5,0.5) + r0.xy;
  r0.xy = frac(r0.xy);
  r0.xy = r0.xy * float2(2,2) + float2(-1,-1);
  r0.zw = abs(r0.xy) * abs(r0.xy);
  r0.xy = -abs(r0.xy) * float2(2,2) + float2(3,3);
  r0.xy = r0.zw * r0.xy + float2(-0.5,-0.5);
  r0.xy = r0.xy + r0.xy;
  r0.x = r0.y * r0.y + r0.x;
  r0.y = cb3[6].x / cb3[1].z;
  r0.x = cb3[1].y * r0.x + r0.y;
  r0.y = 1 / cb3[1].z;
  r0.y = -r0.y * 0.25 + v0.y;
  r0.y = max(0, r0.y);
  r0.y = cb3[1].z * r0.y;
  r0.z = log2(r0.y);
  r0.z = cb3[1].w * r0.z;
  r0.z = exp2(r0.z);
  r0.w = cmp(r0.y != 0.000000);
  r0.y = r0.w ? r0.z : r0.y;
  r0.x = r0.x * r0.y;
  r0.yzw = cb3[0].yyy * cb2[17].xyz;
  r0.yzw = cb2[16].xyz * cb3[0].xxx + r0.yzw;
  r0.yzw = cb2[18].xyz * cb3[0].zzz + r0.yzw;
  r0.z = dot(r0.yzw, r0.yzw);
  r0.z = rsqrt(r0.z);
  r0.yz = r0.yw * r0.zz;
  r0.w = cb0[6].x * cb0[6].y;
  r1.x = cmp(0 >= r0.w);
  r0.w = cmp(0 < r0.w);
  r0.yz = r1.xx ? float2(0,0) : r0.yz;
  r0.xz = r0.yz * r0.xx + v0.xz;
  r0.y = v0.y;
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r1.x);
  r0.xyz = r1.xxx * r0.xyz;
  r1.x = dot(v0.xyz, v0.xyz);
  r1.x = sqrt(r1.x);
  r0.xyz = r1.xxx * r0.xyz;
  r0.xyz = r0.www ? r0.xyz : v0.xyz;
  r1.xyzw = cb2[1].xyzw * r0.yyyy;
  r1.xyzw = cb2[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb2[2].xyzw * r0.zzzz + r1.xyzw;
  r1.xyzw = cb2[3].xyzw * v0.wwww + r1.xyzw;
  o0.xyzw = r1.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 0afa498255d44c1f-vs_replace.txt
if (r1.w != 1.0) { r1.x += separation * (r1.w - convergence); }

  o1.xy = v3.xy;
  r0.y = cb2[5].z * r0.y;
  r0.x = cb2[4].z * r0.x + r0.y;
  r0.x = cb2[6].z * r0.z + r0.x;
  r0.x = cb2[7].z * v0.w + r0.x;
  r0.x = cb1[5].w * r0.x;
  o2.w = -r0.x;
  r0.xyz = cb2[9].xyz * v2.yyy;
  r0.xyz = cb2[8].xyz * v2.xxx + r0.xyz;
  r0.xyz = cb2[10].xyz * v2.zzz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  o2.xyz = r0.xyz * r0.www;
  r0.x = cb1[5].x * r1.y;
  r0.w = 0.5 * r0.x;
  r0.xz = float2(0.5,0.5) * r1.xw;
  o3.z = r1.w;
  r0.xy = r0.xw + r0.zz;
  r0.zw = float2(0.25,0.25) * cb1[6].xy;
  o3.xy = r0.xy * r0.zw;
  return;
}

/****************************** COMPILE WARNINGS ******************************
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\0afa498255d44c1f-vs_replace.txt(96,14-15): warning X3578: Output value 'o1' is not completely initialized

****************************** COMPILE WARNINGS ******************************/
