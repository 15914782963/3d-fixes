// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 40e32b05cd473227-ps_replace.txt
// 3DMigoto: 40e32b05cd473227 |    Unity headers extracted from Foliage - Double-Sided VFACE Metallic.shader
//    Shader "Beam Team/Foliage/Foliage - Forward Cull Off VFACE Metallic" {
//      Properties {
//      [Header(Diffuse)]  _Color ("Color", Color) = (1,1,1,1)
//       _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//       _MainTex ("Diffuse Albedo (RGB)", 2D) = "white" { }
//      [Header(Packed Normals)]  _PackedTex ("Gloss (R) Normal Y (G) Translucency (B) Normal X (A)", 2D) = "white" { }
//      [Header(Translucency)] [Toggle(BEAM_SPEEDTREE_TRANSLUCENCY)]  _Translucent ("Translucent", Float) = 0
//       _TranslucencyColor ("Translucency Tint", Color) = (0.73,0.85,0.41,1)
//       _TranslucencyIntensity ("Translucency Intensity", Range(1,5)) = 1
//       _TranslucencyViewDependency ("Translucency View Dependency", Range(0,1)) = 0.5
//      [Header(Wind)] [MaterialEnum(None, 0, Fastest, 1, Fast, 2, Better, 3, Best, 4, Palm, 5)]  _WindQuality ("Wind Quality", Range(0,5)) = 0
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="AlphaTest" "RenderType"="Foliage" }
//        Pass 2/3 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="AlphaTest" "RenderType"="Foliage" }
//          ZWrite Off
//          Cull Off
//          Blend One One
//          GpuProgramID 120738
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 203
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Foliage - Double-Sided VFACE Metallic.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 110 4 0
//   Keywords { "SPOT" "SUNSHINE_FILTER_HARD" "BEAM_SPEEDTREE_TRANSLUCENCY" }
//   undeciphered2: 1 4 3 4 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 720
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Float 592 [_Cutoff]
//   Vector 608 [_Color]
//   Vector 640 [_TranslucencyColor]
//   Float 656 [_TranslucencyIntensity]
//   Float 660 [_TranslucencyViewDependency]
//   Matrix 128 [_LightMatrix0]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   SetTexture 0 [_MainTex] 2D 2
//   SetTexture 1 [_PackedTex] 2D 3
//   SetTexture 2 [_LightTexture0] 2D 0
//   SetTexture 3 [_LightTextureB0] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:03:15 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[42];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  uint v7 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 40e32b05cd473227-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = t0.Sample(s2_s, v5.xy).xyzw;
  r0.w = r0.w * cb0[38].w + -cb0[37].x;
  r0.xyz = cb0[38].xyz * r0.xyz;
  r0.xyz = cb0[2].www * r0.xyz;
  r0.w = cmp(r0.w < 0);
  if (r0.w != 0) discard;
  r1.xyzw = t1.Sample(s3_s, v5.xy).xyzw;
  r2.xy = r1.wy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r2.xy, r2.xy);
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r2.z = sqrt(r0.w);
  r2.xyz = v7.xxx ? r2.xyz : -r2.xyz;
  r3.x = dot(v1.xyz, r2.xyz);
  r3.y = dot(v2.xyz, r2.xyz);
  r3.z = dot(v3.xyz, r2.xyz);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r3.xyz * r0.www;
  r3.xyz = _WorldSpaceCameraPos.xyz + -v4.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.w = dot(r2.xyz, r3.xyz);
  r1.y = 9.99999975e-006 + -r0.w;
  r0.w = cmp(r0.w < 0);
  r4.xyz = r3.xyz * r1.yyy + r2.xyz;
  r4.xyz = r0.www ? r4.xyz : r2.xyz;
  r5.xyz = cb2[0].xyz + -v4.xyz;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = rsqrt(r0.w);
  r6.xyz = r5.xyz * r0.www + r3.xyz;
  r5.xyz = r5.xyz * r0.www;
  r0.w = dot(r6.xyz, r6.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r6.xyz = r6.xyz * r0.www;
  r0.w = dot(r4.xyz, r6.xyz);
  r1.y = dot(r5.xyz, r6.xyz);
  r1.y = max(0, r1.y);
  r0.w = max(0, r0.w);
  r0.w = r0.w * r0.w;
  r1.x = -r1.x * v5.z + 1;
  r1.z = v5.z * r1.z;
  r1.w = r1.x * r1.x;
  r2.w = r1.w * r1.w + -1;
  r0.w = r0.w * r2.w + 1;
  r2.w = 3.14159274 * r0.w;
  r0.w = r2.w * r0.w + 1.00000001e-007;
  r2.w = r1.w * r1.w;
  r0.w = r2.w / r0.w;
  r2.w = dot(r4.xyz, r3.xyz);
  r3.w = dot(r4.xyz, r5.xyz);
  r3.w = max(0, r3.w);
  r3.x = saturate(dot(r3.xyz, -r5.xyz));
  r2.x = dot(r2.xyz, r5.xyz);
  r2.x = saturate(-r2.x);
  r2.y = r3.x + -r2.x;
  r2.x = cb0[41].y * r2.y + r2.x;
  r2.y = max(0, r2.w);
  r2.z = -r1.x * r1.x + 1;
  r2.w = r2.y * r2.z + r1.w;
  r1.w = r3.w * r2.z + r1.w;
  r1.w = r2.y * r1.w;
  r2.y = 1 + -r2.y;
  r1.w = r3.w * r2.w + r1.w;
  r1.w = 9.99999975e-006 + r1.w;
  r1.w = 2 / r1.w;
  r0.w = r1.w * r0.w;
  r0.w = 0.785398185 * r0.w;
  r1.w = max(9.99999975e-005, r0.w);
  r1.w = sqrt(r1.w);
  r2.z = cmp(cb0[3].w == 0.000000);
  r0.w = r2.z ? r1.w : r0.w;
  r0.w = r0.w * r3.w;
  r0.w = max(0, r0.w);
  r4.xyzw = cb0[9].xyzw * v4.yyyy;
  r4.xyzw = cb0[8].xyzw * v4.xxxx + r4.xyzw;
  r4.xyzw = cb0[10].xyzw * v4.zzzz + r4.xyzw;
  r4.xyzw = cb0[11].xyzw + r4.xyzw;
  r2.zw = r4.xy / r4.ww;
  r2.zw = float2(0.5,0.5) + r2.zw;
  r5.xyzw = t2.Sample(s0_s, r2.zw).xyzw;
  r1.w = cmp(0 < r4.z);
  r2.z = dot(r4.xyz, r4.xyz);
  r4.xyzw = t3.Sample(s1_s, r2.zz).xyzw;
  r1.w = r1.w ? 1.000000 : 0;
  r1.w = r1.w * r5.w;
  r1.w = r1.w * r4.x;
  r3.xyz = cb0[6].xyz * r1.www;
  r4.xyz = r3.xyz * r0.www;
  r0.w = 1 + -r1.y;
  r1.y = r1.y * r1.y;
  r1.x = dot(r1.yy, r1.xx);
  r1.x = -0.5 + r1.x;
  r1.y = r0.w * r0.w;
  r1.y = r1.y * r1.y;
  r0.w = r1.y * r0.w;
  r5.xyz = float3(1,1,1) + -cb0[2].xyz;
  r5.xyz = r5.xyz * r0.www + cb0[2].xyz;
  r4.xyz = r5.xyz * r4.xyz;
  r0.w = r2.y * r2.y;
  r0.w = r0.w * r0.w;
  r0.w = r0.w * r2.y;
  r0.w = r1.x * r0.w + 1;
  r1.y = 1 + -r3.w;
  r1.w = r1.y * r1.y;
  r1.w = r1.w * r1.w;
  r1.y = r1.w * r1.y;
  r1.x = r1.x * r1.y + 1;
  r0.w = r1.x * r0.w;
  r0.w = r0.w * r3.w;
  r1.xyw = r3.xyz * r0.www;
  r2.xyz = r3.xyz * r2.xxx;
  r1.xyw = r0.xyz * r1.xyw + r4.xyz;
  r3.xyz = cb0[41].xxx * cb0[40].xyz;
  r0.xyz = r3.xyz * r0.xyz;
  r0.xyz = r2.xyz * r0.xyz;
  o0.xyz = r0.xyz * r1.zzz + r1.xyw;
  o0.w = 1;
  return;
}
