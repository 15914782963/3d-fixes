// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 06a00645fb170f62-ps_replace.txt
// 3DMigoto: 06a00645fb170f62 |    Unity headers extracted from Rocks - MaskyMix Standard.shader
//    Shader "Volund/Standard MaskyMix Scatter (Specular, Surface)" {
//      Properties {
//       _Color ("Color", Color) = (1,1,1,1)
//       _MainTex ("Albedo", 2D) = "white" { }
//       _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//       _Glossiness ("Smoothness", Range(0,1)) = 0.5
//       _SpecColor ("Specular", Color) = (0.2,0.2,0.2,1)
//       _SpecGlossMap ("Specular", 2D) = "white" { }
//       _BumpScale ("Scale", Float) = 1
//       _BumpMap ("Normal Map", 2D) = "bump" { }
//       _Parallax ("Height Scale", Range(0.005,0.08)) = 0.02
//       _ParallaxMap ("Height Map", 2D) = "black" { }
//       _OcclusionStrength ("Strength", Range(0,1)) = 1
//       _OcclusionMap ("Occlusion", 2D) = "white" { }
//       _EmissionColor ("Color", Color) = (0,0,0,1)
//       _EmissionMap ("Emission", 2D) = "white" { }
//       _DetailMask ("Detail Mask", 2D) = "white" { }
//       _DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" { }
//       _DetailNormalMapScale ("Scale", Float) = 1
//       _DetailNormalMap ("Normal Map", 2D) = "bump" { }
//      [Enum(UV0,0,UV1,1)]  _UVSec ("UV Set for secondary textures", Float) = 0
//      [HideInInspector]  _Mode ("__mode", Float) = 0
//      [HideInInspector]  _SrcBlend ("__src", Float) = 1
//      [HideInInspector]  _DstBlend ("__dst", Float) = 0
//      [HideInInspector]  _ZWrite ("__zw", Float) = 1
//      [HideInInspector]  _SmoothnessInAlbedo ("__smoothnessinalbedo", Float) = 0
//       _MaskyMixAlbedo ("MaskyMix Albedo (RGB) Gloss(A)", 2D) = "white" { }
//       _MaskyMixUVTile ("MaskyMix UV Tile", Range(1,200)) = 10
//       _MaskyMixColor ("MaskyMix Color (2x)", Color) = (0.5,0.5,0.5,0.5)
//       _MaskyMixSpecColor ("MaskyMix Spec Color", Color) = (0.2,0.2,0.2,1)
//       _MaskyMixBumpMap ("MaskyMix Bump", 2D) = "bump" { }
//       _MaskyMixBumpScale ("MaskyMix Bump Scale", Range(0.1,2)) = 1
//       _MaskyMixWorldDirection ("MaskyMix World Dir", Vector) = (0,1,0,0)
//       _MaskyMixMask ("MaskyMix Mask (R)", 2D) = "white" { }
//       _MaskyMixMaskTile ("MaskyMix Mask UV Tile", Range(1,100)) = 10
//       _MaskyMixMaskFalloff ("MaskyMix Mask Falloff", Range(0.0001,2.5)) = 0.1
//       _MaskyMixMaskThresholdLow ("MaskyMix Mask Threshold Low", Range(0,1)) = 0.5
//       _MaskyMixMaskThresholdHi ("MaskyMix Mask Threshold Hi", Range(0,1)) = 0.6
//       _MetaAlbedoDesaturation ("Meta Albedo Desaturation", Range(0,1)) = 0
//      [HDR]  _MetaAlbedoTint ("Meta Albedo Tint", Color) = (1,1,1,1)
//      [HDR]  _MetaAlbedoAdd ("Meta Albedo Add", Color) = (0,0,0,0)
//      }
//      Fallback "Diffuse"
//      SubShader 1/2 {
//        LOD 400
//        Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "RenderType"="Opaque" "PerformanceChecks"="False" }
//          ZWrite [_ZWrite]
//          Blend [_SrcBlend] [_DstBlend]
//          GpuProgramID 14791
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 21
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Rocks - MaskyMix Standard.shader.decompressed:
//   API d3d11
//   Shader model ps_5_0
//   undeciphered1: 203 10 4
//   Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "_NORMALMAP" "_DETAIL_MULX2" }
//   undeciphered2: 1 12 4 12 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 352
//   Vector 16 [unity_ColorSpaceDouble]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 80 [unity_DynamicLightmap_HDR]
//   Vector 96 [_LightColor0]
//   Vector 112 [_SpecColor]
//   Vector 128 [_Color]
//   Float 192 [_BumpScale]
//   Float 196 [_DetailNormalMapScale]
//   Float 204 [_Glossiness]
//   Float 208 [_OcclusionStrength]
//   Vector 240 [_MaskyMixColor]
//   Vector 256 [_MaskyMixSpecColor]
//   Float 272 [_MaskyMixUVTile]
//   Float 276 [_MaskyMixBumpScale]
//   Vector 288 [_MaskyMixWorldDirection] 3
//   Float 300 [_MaskyMixMaskTile]
//   Float 304 [_MaskyMixMaskFalloff]
//   Float 308 [_MaskyMixMaskThresholdLow]
//   Float 312 [_MaskyMixMaskThresholdHi]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   SetTexture 0 [_MainTex] 2D 3
//   SetTexture 1 [_DetailMask] 2D 6
//   SetTexture 2 [_DetailAlbedoMap] 2D 4
//   SetTexture 3 [_BumpMap] 2D 5
//   SetTexture 4 [_DetailNormalMap] 2D 7
//   SetTexture 5 [_OcclusionMap] 2D 8
//   SetTexture 6 [_MaskyMixBumpMap] 2D 10
//   SetTexture 7 [_MaskyMixAlbedo] 2D 9
//   SetTexture 8 [_MaskyMixMask] 2D 11
//   SetTexture 9 [unity_DynamicLightmap] 2D 0
//   SetTexture 10 [unity_SpecCube0] CUBE 1
//   SetTexture 11 [unity_SpecCube1] CUBE 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:06:59 2016
TextureCube<float4> t11 : register(t11);

TextureCube<float4> t10 : register(t10);

Texture2D<float4> t9 : register(t9);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s11_s : register(s11);

SamplerState s10_s : register(s10);

SamplerState s9_s : register(s9);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[20];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD6,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 06a00645fb170f62-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = v1.w;
  r0.y = v2.w;
  r0.z = v3.w;
  r1.xyz = _WorldSpaceCameraPos.xyz + -r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r1.xyz * r0.www;
  r3.xyz = t0.Sample(s3_s, v4.xy).xyz;
  r3.xyz = cb0[8].xyz * r3.xyz;
  r1.w = t1.Sample(s6_s, v4.xy).w;
  r4.xyz = t2.Sample(s4_s, v4.zw).xyz;
  r4.xyz = cb0[1].xyz * r4.xyz;
  r2.w = 1 + -r1.w;
  r4.xyz = r4.xyz * r1.www + r2.www;
  r3.xyz = r4.xyz * r3.xyz;
  r4.xy = t3.Sample(s5_s, v4.xy).yw;
  r4.xy = r4.yx * float2(2,2) + float2(-1,-1);
  r5.xy = cb0[12].xx * r4.xy;
  r2.w = dot(r5.xy, r5.xy);
  r2.w = min(1, r2.w);
  r2.w = 1 + -r2.w;
  r5.z = sqrt(r2.w);
  r4.zw = t4.Sample(s7_s, v4.zw).yw;
  r4.zw = r4.wz * float2(2,2) + float2(-1,-1);
  r4.zw = cb0[12].yy * r4.zw;
  r2.w = dot(r4.zw, r4.zw);
  r2.w = min(1, r2.w);
  r2.w = 1 + -r2.w;
  r2.w = sqrt(r2.w);
  r6.xy = r4.xy * cb0[12].xx + r4.zw;
  r6.z = r5.z * r2.w;
  r2.w = dot(r6.xyz, r6.xyz);
  r2.w = rsqrt(r2.w);
  r6.xyz = r6.xyz * r2.www + -r5.xyz;
  r6.xyz = r1.www * r6.xyz + r5.xyz;
  r1.w = t5.Sample(s8_s, v4.xy).y;
  r2.w = 1 + -cb0[13].x;
  r1.w = r1.w * cb0[13].x + r2.w;
  r4.zw = cb0[17].xx * v4.xy;
  r5.xy = cb0[18].ww * v4.xy;
  r7.xy = t6.Sample(s10_s, r4.zw).yw;
  r7.xy = r7.yx * float2(2,2) + float2(-1,-1);
  r7.xy = cb0[17].yy * r7.xy;
  r2.w = dot(r7.xy, r7.xy);
  r2.w = min(1, r2.w);
  r2.w = 1 + -r2.w;
  r2.w = sqrt(r2.w);
  r7.xy = r4.xy * cb0[12].xx + r7.xy;
  r7.z = r5.z * r2.w;
  r2.w = dot(r7.xyz, r7.xyz);
  r2.w = rsqrt(r2.w);
  r4.xyzw = t7.Sample(s9_s, r4.zw).xyzw;
  r8.xyz = cb0[15].xyz + cb0[15].xyz;
  r3.w = t8.Sample(s11_s, r5.xy).x;
  r5.x = dot(v1.xyz, r6.xyz);
  r5.y = dot(v2.xyz, r6.xyz);
  r5.z = dot(v3.xyz, r6.xyz);
  r5.x = dot(cb0[18].xyz, r5.xyz);
  r3.w = v5.x * r3.w;
  r5.x = max(9.99999975e-006, r5.x);
  r3.w = r5.x * r3.w;
  r3.w = log2(r3.w);
  r3.w = cb0[19].x * r3.w;
  r3.w = exp2(r3.w);
  r5.x = cmp(cb0[19].y < r3.w);
  r5.y = cb0[19].z + -cb0[19].y;
  r3.w = -cb0[19].y + r3.w;
  r5.y = 1 / r5.y;
  r3.w = saturate(r5.y * r3.w);
  r5.y = r3.w * -2 + 3;
  r3.w = r3.w * r3.w;
  r3.w = r5.y * r3.w;
  r5.yzw = r7.xyz * r2.www + -r6.xyz;
  r7.xyz = r3.www * r5.yzw + r6.xyz;
  r4.xyz = r4.xyz * r8.xyz + -r3.xyz;
  r4.xyz = r3.www * r4.xyz + r3.xyz;
  r5.yzw = cb0[16].xyz + -cb0[7].xyz;
  r5.yzw = r3.www * r5.yzw + cb0[7].xyz;
  r2.w = -cb0[12].w + r4.w;
  r7.w = r3.w * r2.w + cb0[12].w;
  r3.xyz = r5.xxx ? r4.xyz : r3.xyz;
  r4.xyz = r5.xxx ? r5.yzw : cb0[7].xyz;
  r6.w = cb0[12].w;
  r5.xyzw = r5.xxxx ? r7.xyzw : r6.xyzw;
  r6.x = dot(v1.xyz, r5.xyz);
  r6.y = dot(v2.xyz, r5.xyz);
  r6.z = dot(v3.xyz, r5.xyz);
  r2.w = 1 + -r5.w;
  r3.w = dot(-r2.xyz, r6.xyz);
  r3.w = r3.w + r3.w;
  r5.xyz = r6.xyz * -r3.www + -r2.xyz;
  r7.xyzw = t9.Sample(s0_s, v6.zw).xyzw;
  r3.w = cb0[5].x * r7.w;
  r7.xyz = r3.www * r7.xyz;
  r7.xyz = log2(r7.xyz);
  r7.xyz = cb0[5].yyy * r7.xyz;
  r7.xyz = exp2(r7.xyz);
  r3.w = cmp(0 < cb3[2].w);
  if (r3.w != 0) {
    r3.w = dot(r5.xyz, r5.xyz);
    r3.w = rsqrt(r3.w);
    r8.xyz = r5.xyz * r3.www;
    r9.xyz = cb3[0].xyz + -r0.xyz;
    r9.xyz = r9.xyz / r8.xyz;
    r10.xyz = cb3[1].xyz + -r0.xyz;
    r10.xyz = r10.xyz / r8.xyz;
    r11.xyz = cmp(float3(0,0,0) < r8.xyz);
    r9.xyz = r11.xyz ? r9.xyz : r10.xyz;
    r3.w = min(r9.x, r9.y);
    r3.w = min(r3.w, r9.z);
    r9.xyz = -cb3[2].xyz + r0.xyz;
    r8.xyz = r8.xyz * r3.www + r9.xyz;
  } else {
    r8.xyz = r5.xyz;
  }
  r3.w = -r2.w * 0.699999988 + 1.70000005;
  r3.w = r3.w * r2.w;
  r3.w = 6 * r3.w;
  r8.xyzw = t10.SampleLevel(s1_s, r8.xyz, r3.w).xyzw;
  r4.w = log2(r8.w);
  r4.w = cb3[3].y * r4.w;
  r4.w = exp2(r4.w);
  r4.w = cb3[3].x * r4.w;
  r9.xyz = r4.www * r8.xyz;
  r6.w = cmp(cb3[1].w < 0.999989986);
  if (r6.w != 0) {
    r6.w = cmp(0 < cb3[6].w);
    if (r6.w != 0) {
      r6.w = dot(r5.xyz, r5.xyz);
      r6.w = rsqrt(r6.w);
      r10.xyz = r6.www * r5.xyz;
      r11.xyz = cb3[4].xyz + -r0.xyz;
      r11.xyz = r11.xyz / r10.xyz;
      r12.xyz = cb3[5].xyz + -r0.xyz;
      r12.xyz = r12.xyz / r10.xyz;
      r13.xyz = cmp(float3(0,0,0) < r10.xyz);
      r11.xyz = r13.xyz ? r11.xyz : r12.xyz;
      r6.w = min(r11.x, r11.y);
      r6.w = min(r6.w, r11.z);
      r0.xyz = -cb3[6].xyz + r0.xyz;
      r5.xyz = r10.xyz * r6.www + r0.xyz;
    }
    r10.xyzw = t11.SampleLevel(s2_s, r5.xyz, r3.w).xyzw;
    r0.x = log2(r10.w);
    r0.x = cb3[7].y * r0.x;
    r0.x = exp2(r0.x);
    r0.x = cb3[7].x * r0.x;
    r0.xyz = r0.xxx * r10.xyz;
    r5.xyz = r4.www * r8.xyz + -r0.xyz;
    r9.xyz = cb3[1].www * r5.xyz + r0.xyz;
  }
  r0.xyz = r9.xyz * r1.www;
  r3.w = dot(r6.xyz, r6.xyz);
  r3.w = rsqrt(r3.w);
  r5.xyz = r6.xyz * r3.www;
  r3.w = max(r4.x, r4.y);
  r3.w = max(r3.w, r4.z);
  r3.w = 1 + -r3.w;
  r3.xyz = r3.xyz * r3.www;
  r1.xyz = r1.xyz * r0.www + cb2[0].xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = dot(r5.xyz, r2.xyz);
  r4.w = cmp(r0.w < 0);
  r0.w = 9.99999975e-006 + -r0.w;
  r6.xyz = r2.xyz * r0.www + r5.xyz;
  r5.xyz = r4.www ? r6.xyz : r5.xyz;
  r0.w = dot(r5.xyz, cb2[0].xyz);
  r0.w = max(0, r0.w);
  r4.w = dot(r5.xyz, r1.xyz);
  r4.w = max(0, r4.w);
  r2.x = dot(r5.xyz, r2.xyz);
  r2.x = max(0, r2.x);
  r1.x = dot(cb2[0].xyz, r1.xyz);
  r1.x = max(0, r1.x);
  r1.y = r2.w * r2.w;
  r1.z = -r2.w * r2.w + 1;
  r2.y = r2.x * r1.z + r1.y;
  r1.z = r0.w * r1.z + r1.y;
  r1.z = r2.x * r1.z;
  r1.z = r0.w * r2.y + r1.z;
  r1.z = 9.99999975e-006 + r1.z;
  r1.z = 2 / r1.z;
  r2.y = r1.y * r1.y;
  r2.z = r4.w * r4.w;
  r5.xy = r1.yy * r1.yy + float2(-1,1);
  r2.z = r2.z * r5.x + 1;
  r4.w = 3.14159274 * r2.z;
  r2.z = r4.w * r2.z + 1.00000001e-007;
  r2.y = r2.y / r2.z;
  r2.z = 1 + -r0.w;
  r4.w = r2.z * r2.z;
  r4.w = r4.w * r4.w;
  r2.z = r4.w * r2.z;
  r2.x = 1 + -r2.x;
  r4.w = r2.x * r2.x;
  r4.w = r4.w * r4.w;
  r2.x = r4.w * r2.x;
  r4.w = r1.x * r1.x;
  r4.w = dot(r4.ww, r2.ww);
  r4.w = -0.5 + r4.w;
  r2.z = r4.w * r2.z + 1;
  r4.w = r4.w * r2.x + 1;
  r2.z = r4.w * r2.z;
  r1.z = r2.y * r1.z;
  r1.z = 0.785398185 * r1.z;
  r2.y = cmp(cb0[3].w == 0.000000);
  r4.w = max(9.99999975e-005, r1.z);
  r4.w = sqrt(r4.w);
  r1.z = r2.y ? r4.w : r1.z;
  r1.z = r1.z * r0.w;
  r1.z = max(0, r1.z);
  r0.w = r2.z * r0.w;
  r1.y = r2.w * r1.y;
  r1.y = -r1.y * 0.280000001 + 1;
  r2.z = 1 / r5.y;
  r1.y = r2.y ? r1.y : r2.z;
  r2.y = r5.w + -r3.w;
  r2.y = saturate(1 + r2.y);
  r5.xyz = cb0[6].xyz * r0.www;
  r5.xyz = r7.xyz * r1.www + r5.xyz;
  r6.xyz = cb0[6].xyz * r1.zzz;
  r0.w = 1 + -r1.x;
  r1.x = r0.w * r0.w;
  r1.x = r1.x * r1.x;
  r0.xyzw = r1.yyyx * r0.xyzw;
  r1.xzw = float3(1,1,1) + -r4.xyz;
  r1.xzw = r1.xzw * r0.www + r4.xyz;
  r1.xzw = r6.xyz * r1.xzw;
  r1.xzw = r3.xyz * r5.xyz + r1.xzw;
  r2.yzw = r2.yyy + -r4.xyz;
  r2.xyz = r2.xxx * r2.yzw + r4.xyz;
  o0.xyz = r0.xyz * r2.xyz + r1.xzw;
  o0.w = 1;
  return;
}
