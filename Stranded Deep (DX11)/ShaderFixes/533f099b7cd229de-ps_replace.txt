// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 533f099b7cd229de-ps_replace.txt
// 3DMigoto: 533f099b7cd229de |    Unity headers extracted from generic_Tess.shader
//    Shader "Eisko/Generic_Tess" {
//      Properties {
//       _ColorAlbedo ("RGB: Color ", Color) = (1,1,1,0.02)
//      [NoScaleOffset]  _AlbedoTex ("Albedo", 2D) = "white" { }
//      [NoScaleOffset]  _NormalMap ("NormalMap", 2D) = "bump" { }
//      [NoScaleOffset]  _SpecMap ("Multimap: (R=Specular, G=Empty, B=AO, A=Roughness)", 2D) = "white" { }
//       _AOsaturation ("AO Strenght", Range(0.1,3)) = 1
//       _SpecStrength ("Specular Strength", Range(0.001,5)) = 1
//       _Roughness ("Roughness", Range(0.001,10)) = 1
//      [NoScaleOffset]  _DispMap ("Displacement Map", 2D) = "black" { }
//       _DisplacementFactor ("Displacement Factor", Range(0,5)) = 0
//       _TessEdge ("Edge Tesselation", Range(1,20)) = 1
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
//        Pass 1/3 {
//          Name "FORWARD_BASE_UBER"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
//          Lighting On
//          GpuProgramID 23818
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 23
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from generic_Tess.shader.decompressed:
//   API d3d11
//   Shader model ps_5_0
//   undeciphered1: 150 7 4
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_ON" }
//   undeciphered2: 1 9 4 7 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 432
//   Float 0 [_Roughness]
//   Float 4 [_AOsaturation]
//   Float 8 [_SpecStrength]
//   Vector 16 [_ColorAlbedo]
//   Vector 240 [unity_DynamicLightmap_HDR]
//   Vector 256 [_LightColor0]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   SetTexture 0 [_NormalMap] 2D 4
//   SetTexture 1 [_AlbedoTex] 2D 3
//   SetTexture 2 [_SpecMap] 2D 5
//   SetTexture 3 [_ShadowMapTexture] 2D 6
//   SetTexture 4 [unity_DynamicLightmap] 2D 0
//   SetTexture 5 [unity_DynamicDirectionality] 2D -1
//   SetTexture 6 [unity_DynamicNormal] 2D -1
//   SetTexture 7 [unity_SpecCube0] CUBE 1
//   SetTexture 8 [unity_SpecCube1] CUBE 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:03:28 2016
TextureCube<float4> t8 : register(t8);

TextureCube<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[17];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD9,
  float4 v8 : TEXCOORD8,
  float4 v9 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 533f099b7cd229de-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xy = t0.Sample(s4_s, v1.xy).yw;
  r0.xy = r0.yx * float2(2,2) + float2(-1,-1);
  r0.z = dot(r0.xy, r0.xy);
  r0.z = min(1, r0.z);
  r0.z = 1 + -r0.z;
  r0.z = sqrt(r0.z);
  r1.xyz = v5.xyz * r0.yyy;
  r0.xyw = r0.xxx * v4.xyz + r1.xyz;
  r0.xyz = r0.zzz * v3.xyz + r0.xyw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = t1.Sample(s3_s, v1.xy).xyz;
  r1.xyz = cb0[1].xyz * r1.xyz;
  r2.xyz = t2.Sample(s5_s, v1.xy).xzw;
  r2.xyz = log2(r2.xzy);
  r2.xyz = cb0[0].zxy * r2.xyz;
  r2.xyz = exp2(r2.xyz);
  r2.xyz = min(float3(1,1,1), r2.xyz);
  r3.xyz = _WorldSpaceCameraPos.xyz + -v2.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r3.xyz * r0.www;
  r5.xy = v9.xy / v9.ww;
  r1.w = t3.Sample(s6_s, r5.xy).x;
  r2.w = dot(r0.xyz, cb2[0].xyz);
  r3.w = max(0, r2.w);
  r5.xy = float2(1,1) + -r2.yx;
  r4.w = dot(-r4.xyz, r0.xyz);
  r4.w = r4.w + r4.w;
  r6.xyz = r0.xyz * -r4.www + -r4.xyz;
  r7.xyz = cb0[16].xyz * r1.www;
  r8.xyzw = t4.Sample(s0_s, v6.zw).xyzw;
  r1.w = cb0[15].x * r8.w;
  r8.xyz = r1.www * r8.xyz;
  r8.xyz = log2(r8.xyz);
  r8.xyz = cb0[15].yyy * r8.xyz;
  r8.xyz = exp2(r8.xyz);
  r9.xyz = t5.Sample(s0_s, v6.zw).xyz;
  r10.xyz = t6.Sample(s0_s, v6.zw).xyz;
  r9.xyz = r9.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.w = dot(r9.xyz, r9.xyz);
  r1.w = sqrt(r1.w);
  r1.w = max(0.00100000005, r1.w);
  r9.xyz = r9.xyz / r1.www;
  r10.xyz = r10.zyx * float3(2,2,2) + float3(-1,-1,-1);
  r4.w = dot(r10.xyz, r9.xyz);
  r4.w = max(0.125, r4.w);
  r8.xyz = r8.xyz / r4.www;
  r4.w = dot(r0.xyz, r9.xyz);
  r4.w = max(0, r4.w);
  r5.z = 1 + -r1.w;
  r9.xyz = r8.xyz * r5.zzz;
  r8.xyz = r8.xyz * r1.www;
  r9.xyz = r9.xyz * r4.www;
  r1.w = cmp(0 < cb3[2].w);
  if (r1.w != 0) {
    r1.w = dot(r6.xyz, r6.xyz);
    r1.w = rsqrt(r1.w);
    r10.xyz = r6.xyz * r1.www;
    r11.xyz = cb3[0].xyz + -v2.xyz;
    r11.xyz = r11.xyz / r10.xyz;
    r12.xyz = cb3[1].xyz + -v2.xyz;
    r12.xyz = r12.xyz / r10.xyz;
    r13.xyz = cmp(float3(0,0,0) < r10.xyz);
    r11.xyz = r13.xyz ? r11.xyz : r12.xyz;
    r1.w = min(r11.x, r11.y);
    r1.w = min(r1.w, r11.z);
    r11.xyz = -cb3[2].xyz + v2.xyz;
    r10.xyz = r10.xyz * r1.www + r11.xyz;
  } else {
    r10.xyz = r6.xyz;
  }
  r1.w = -r5.x * 0.699999988 + 1.70000005;
  r1.w = r5.x * r1.w;
  r1.w = 6 * r1.w;
  r10.xyzw = t7.SampleLevel(s1_s, r10.xyz, r1.w).xyzw;
  r5.z = log2(r10.w);
  r5.z = cb3[3].y * r5.z;
  r5.z = exp2(r5.z);
  r5.z = cb3[3].x * r5.z;
  r11.xyz = r5.zzz * r10.xyz;
  r5.w = cmp(cb3[1].w < 0.999989986);
  if (r5.w != 0) {
    r5.w = cmp(0 < cb3[6].w);
    if (r5.w != 0) {
      r5.w = dot(r6.xyz, r6.xyz);
      r5.w = rsqrt(r5.w);
      r12.xyz = r6.xyz * r5.www;
      r13.xyz = cb3[4].xyz + -v2.xyz;
      r13.xyz = r13.xyz / r12.xyz;
      r14.xyz = cb3[5].xyz + -v2.xyz;
      r14.xyz = r14.xyz / r12.xyz;
      r15.xyz = cmp(float3(0,0,0) < r12.xyz);
      r13.xyz = r15.xyz ? r13.xyz : r14.xyz;
      r5.w = min(r13.x, r13.y);
      r5.w = min(r5.w, r13.z);
      r13.xyz = -cb3[6].xyz + v2.xyz;
      r6.xyz = r12.xyz * r5.www + r13.xyz;
    }
    r6.xyzw = t8.SampleLevel(s2_s, r6.xyz, r1.w).xyzw;
    r1.w = log2(r6.w);
    r1.w = cb3[7].y * r1.w;
    r1.w = exp2(r1.w);
    r1.w = cb3[7].x * r1.w;
    r6.xyz = r1.www * r6.xyz;
    r10.xyz = r5.zzz * r10.xyz + -r6.xyz;
    r11.xyz = cb3[1].www * r10.xyz + r6.xyz;
  }
  r6.xyz = r3.www * r1.xyz;
  r6.xyz = r6.xyz * r7.xyz;
  r6.xyz = r6.xyz * r5.yyy;
  r1.w = min(1, r4.w);
  r10.xyz = r1.xyz * r1.www;
  r8.xyz = r10.xyz * r8.xyz;
  r5.yzw = r8.xyz * r5.yyy;
  r5.yzw = r5.yzw * r2.zzz;
  r5.yzw = r6.xyz * r2.zzz + r5.yzw;
  r1.w = dot(r0.xyz, r4.xyz);
  r3.xyz = r3.xyz * r0.www + cb2[0].xyz;
  r3.xyz = float3(0.5,0.5,0.5) * r3.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.x = saturate(dot(r0.xyz, r3.xyz));
  r0.y = saturate(dot(r4.xyz, r3.xyz));
  r0.z = r2.w * r2.w;
  r0.z = r5.x * r0.z + r2.y;
  r0.z = sqrt(r0.z);
  r0.z = r2.w + r0.z;
  r0.z = 1 / r0.z;
  r0.w = r1.w * r1.w;
  r0.w = r5.x * r0.w + r2.y;
  r0.w = sqrt(r0.w);
  r0.w = r1.w + r0.w;
  r0.w = 1 / r0.w;
  r0.z = r0.z * r0.w;
  r0.w = r2.y * r2.y;
  r0.w = 2 / r0.w;
  r0.w = -2 + r0.w;
  r0.w = log2(r0.w);
  r0.w = saturate(0.0769230798 * r0.w);
  r1.w = 13 * r0.w;
  r1.w = exp2(r1.w);
  r2.y = 2 + r1.w;
  r2.y = 0.159155071 * r2.y;
  r0.x = log2(r0.x);
  r0.x = r1.w * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r2.y * r0.x;
  r0.x = 0.78539753 * r0.x;
  r0.w = max(r2.x, r0.w);
  r0.w = r0.w + -r2.x;
  r0.y = 1 + -r0.y;
  r1.w = r0.y * r0.y;
  r1.w = r1.w * r1.w;
  r0.y = r1.w * r0.y;
  r0.y = r0.w * r0.y + r2.x;
  r0.x = r0.x * r0.y;
  r0.x = r0.x * r0.z;
  r0.xyz = r0.xxx * r7.xyz;
  r0.w = 0.5 * r2.x;
  r1.xyz = r9.xyz * r1.xyz;
  r1.w = -r2.x * 0.5 + 1;
  r1.xyz = r1.xyz * r1.www;
  r2.xyw = r11.xyz * r0.www;
  r0.xyz = r0.xyz * r2.zzz + r5.yzw;
  r0.xyz = r2.zzz * r1.xyz + r0.xyz;
  o0.xyz = r2.xyw * r2.zzz + r0.xyz;
  o0.w = 1;
  return;
}
