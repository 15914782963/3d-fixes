// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 43449940177def81-ps_replace.txt
// 3DMigoto: 43449940177def81 |    Unity headers extracted from Atmosphere BRDF.shader
//    Shader "Beam Team/Atmosphere/Atmosphere BRDF" {
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZTest Always
//          GpuProgramID 17233
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 3
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Atmosphere BRDF.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 113 0 2
//   undeciphered2: 1 1 2 1 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 176
//   Float 96 [Rg]
//   Float 100 [Rt]
//   Float 108 [RES_R]
//   Float 112 [RES_MU]
//   Float 116 [RES_MU_S]
//   Float 120 [RES_NU]
//   Vector 128 [_SunDirection] 3
//   Float 140 [_MieG]
//   Vector 144 [_SunPosition] 3
//   Float 160 [_StormFade]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   SetTexture 0 [_Inscatter] 3D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 10:59:10 2016
Texture3D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[11];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 43449940177def81-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.y = dot(v1.xy, v1.xy);
  r0.w = cmp(1 < r0.y);
  r1.xz = v1.xy / r0.yy;
  r1.y = 1 / r0.y;
  r0.xz = v1.xy;
  r0.xyz = r0.www ? r1.xyz : r0.xyz;
  r0.w = 1 + r0.y;
  r0.xyz = r0.xyz * float3(2,-1,2) + float3(0,1,0);
  r0.xyz = r0.xyz / r0.www;
  r1.xyz = float3(0,6360010,0) + _WorldSpaceCameraPos.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r2.x = sqrt(r0.w);
  r2.y = dot(r1.xyz, r0.xyz);
  r0.w = r2.y * r2.y + -r0.w;
  r0.w = cb0[6].y * cb0[6].y + r0.w;
  r0.w = sqrt(r0.w);
  r0.w = -r2.y + -r0.w;
  r0.w = max(0, r0.w);
  r1.w = cmp(0 < r0.w);
  r3.y = r2.y + r0.w;
  r3.x = cb0[6].y;
  r2.xy = r1.ww ? r3.xy : r2.xy;
  r2.z = cmp(cb0[6].y >= r2.x);
  if (r2.z != 0) {
    r3.xyz = r0.www * r0.xyz + r1.xyz;
    r1.xyz = r1.www ? r3.xyz : r1.xyz;
    r0.x = dot(r0.xyz, cb0[8].xyz);
    r0.y = dot(r1.xyz, cb0[8].xyz);
    r0.y = r0.y / r2.x;
    r0.z = cb0[6].x * cb0[6].x;
    r0.w = cb0[6].y * cb0[6].y + -r0.z;
    r1.z = sqrt(r0.w);
    r0.w = r2.x * r2.x;
    r0.z = r2.x * r2.x + -r0.z;
    r0.z = sqrt(r0.z);
    r0.w = r2.y * r2.y + -r0.w;
    r0.w = cb0[6].x * cb0[6].x + r0.w;
    r2.x = cmp(r2.y < 0);
    r2.z = cmp(0 < r0.w);
    r2.x = r2.z ? r2.x : 0;
    r2.zw = float2(0.5,0.5) / cb0[7].xy;
    r3.w = 0.5 + -r2.z;
    r1.y = r1.z * r1.z;
    r1.w = 0.5 + r2.z;
    r3.xyz = float3(1,0,0);
    r1.x = -1;
    r3.xyzw = r2.xxxx ? r3.xyzw : r1.xyzw;
    r1.x = 0.5 / cb0[6].w;
    r1.y = r0.z / r1.z;
    r1.z = 1 / cb0[6].w;
    r1.z = 1 + -r1.z;
    r1.w = r1.y * r1.z + r1.x;
    r0.zw = r3.zy + r0.zw;
    r0.w = sqrt(r0.w);
    r0.w = r2.y * r3.x + r0.w;
    r0.z = r0.w / r0.z;
    r2.xy = float2(1,1) / cb0[7].xy;
    r2.xy = float2(0.5,1) + -r2.xy;
    r1.z = r0.z * r2.x + r3.w;
    r0.y = max(-0.197500005, r0.y);
    r0.y = 5.34962368 * r0.y;
    r0.z = min(1, abs(r0.y));
    r0.w = max(1, abs(r0.y));
    r0.w = 1 / r0.w;
    r0.z = r0.z * r0.w;
    r0.w = r0.z * r0.z;
    r2.x = r0.w * 0.0208350997 + -0.0851330012;
    r2.x = r0.w * r2.x + 0.180141002;
    r2.x = r0.w * r2.x + -0.330299497;
    r0.w = r0.w * r2.x + 0.999866009;
    r2.x = r0.z * r0.w;
    r2.z = cmp(1 < abs(r0.y));
    r2.x = r2.x * -2 + 1.57079637;
    r2.x = r2.z ? r2.x : 0;
    r0.z = r0.z * r0.w + r2.x;
    r0.y = min(1, r0.y);
    r0.y = cmp(r0.y < -r0.y);
    r0.y = r0.y ? -r0.z : r0.z;
    r0.y = r0.y * 0.909090877 + 0.74000001;
    r0.y = 0.5 * r0.y;
    r0.y = r0.y * r2.y + r2.w;
    r0.z = 1 + r0.x;
    r0.z = 0.5 * r0.z;
    r0.w = -1 + cb0[7].z;
    r2.x = r0.z * r0.w;
    r2.x = floor(r2.x);
    r0.z = r0.z * r0.w + -r2.x;
    r0.y = r2.x + r0.y;
    r1.y = r0.y / cb0[7].z;
    r0.w = 1 + -r0.z;
    r2.xyz = r1.yzw * r0.www;
    r2.xyzw = t0.SampleLevel(s0_s, r2.xyz, 0).xyzw;
    r0.y = 1 + r0.y;
    r1.x = r0.y / cb0[7].z;
    r0.yzw = r1.xzw * r0.zzz;
    r1.xyzw = t0.SampleLevel(s0_s, r0.yzw, 0).xyzw;
    r1.xyzw = r2.xyzw + r1.xyzw;
    r0.yzw = r1.xyz * r1.www;
    r1.w = max(9.99999975e-005, r1.x);
    r0.yzw = r0.yzw / r1.www;
    r1.w = r0.x * r0.x + 1;
    r2.x = 0.0596831031 * r1.w;
    r2.y = -cb0[8].w * cb0[8].w + 1;
    r2.y = 0.119366206 * r2.y;
    r2.zw = cb0[8].ww * cb0[8].ww + float2(1,2);
    r0.x = dot(r0.xx, cb0[8].ww);
    r0.x = r2.z + -r0.x;
    r0.x = log2(r0.x);
    r0.xyzw = float4(-1.5,1,0.429629624,0.175226584) * r0.xyzw;
    r0.x = exp2(r0.x);
    r0.x = r2.y * r0.x;
    r0.x = r0.x * r1.w;
    r0.x = r0.x / r2.w;
    r0.xyz = r0.yzw * r0.xxx;
    r0.xyz = r1.xyz * r2.xxx + r0.xyz;
  } else {
    r0.xyz = float3(0,0,0);
  }
  r0.w = saturate(-0.0199999996 * cb0[9].y);
  r0.xyz = -r0.xyz * float3(15.2999992,15.2999992,15.2999992) + float3(1,1,1);
  r1.xyz = -r0.www * float3(0,0.00300000003,0.00449999981) + float3(1,1,1);
  r0.xyz = -r0.xyz * r1.xyz + float3(1,1,1);
  r0.w = 100 + -cb0[9].y;
  r0.w = saturate(0.0090909088 * r0.w);
  r0.w = 1 + -r0.w;
  r1.xyz = r0.www * float3(0.0910000056,0.0890000015,0.0879999995) + float3(0.00899999961,0.0109999999,0.0120000001);
  r1.xyz = r1.xyz + -r0.xyz;
  o0.xyz = cb0[10].xxx * r1.xyz + r0.xyz;
  o0.w = 1;
  return;
}
