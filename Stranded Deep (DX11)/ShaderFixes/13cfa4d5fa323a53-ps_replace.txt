// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 13cfa4d5fa323a53-ps_replace.txt
// 3DMigoto: 13cfa4d5fa323a53 | Matched 2 variants of 1 shaders: Hidden/Beam-DeferredShading
//
//       Unity headers extracted from Beam-DeferredShading.shader
//       Shader "Hidden/Beam-DeferredShading" {
//         Properties {
//          _LightTexture0 ("", any) = "" { }
//          _LightTextureB0 ("", 2D) = "" { }
//          _ShadowMapTexture ("", any) = "" { }
//          _SrcBlend ("", Float) = 1.000000
//          _DstBlend ("", Float) = 1.000000
//         }
//         Fallback Off
//         SubShader 1/1 {
//           Pass 1/2 {
//             Tags { "SHADOWSUPPORT"="true" }
//             ZWrite Off
//             Blend [_SrcBlend] [_DstBlend]
//             GpuProgramID 56168
//             Program "fp" {
//               SubProgram "d3d11 " {
//                 GpuProgramIndex 169
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Beam-DeferredShading.shader.decompressed:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201510240 99 6 2
//      Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" "BEAM_TRANSLUCENCY_ON" }
//      undeciphered2: 1 6 4 6 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 272
//      Vector 48 [unity_ColorSpaceLuminance]
//      Vector 112 [_LightDir]
//      Vector 144 [_LightColor]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      Vector 80 [_ProjectionParams]
//      Vector 112 [_ZBufferParams]
//      ConstBuffer "UnityPerCameraRare" 352
//      Matrix 288 [unity_CameraToWorld]
//      ConstBuffer "UnityShadows" 416
//      Vector 384 [_LightShadowData]
//      Vector 400 [unity_ShadowFadeCenterAndType]
//      SetTexture 0 [_CameraDepthTexture] 2D 0
//      SetTexture 1 [_ShadowMapTexture] 2D 1
//      SetTexture 2 [_CameraGBufferTexture0] 2D 2
//      SetTexture 3 [_CameraGBufferTexture1] 2D 3
//      SetTexture 4 [_CameraGBufferTexture2] 2D 4
//      SetTexture 5 [Beam_EmissionTexture] 2D 5
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityPerCameraRare" 2
//      BindCB "UnityShadows" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

// ---- Created with 3Dmigoto v1.2.42 on Sat Dec 10 03:48:05 2016
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[26];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[10];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 13cfa4d5fa323a53-ps_replace.txt
matrix _CameraToWorld = matrix(cb2[18], cb2[19], cb2[20], cb2[21]);
float4 _WorldSpaceCameraPos = cb1[4];
if (fov) {
  _WorldSpaceCameraPos.xyz -= mul(float4(-separation * convergence * fov, 0, 0, 0), _CameraToWorld).xyz;
} else {
  float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  _WorldSpaceCameraPos.xyz -= world_space_adj.xyz;
}

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s0_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r2.xyz = r0.xyz * r0.www;
float depth = r2.z;

// Unity light/shadow fix (pixel shader stage) inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 13cfa4d5fa323a53-ps_replace.txt
if (fov) {
  r2.x -= separation * (depth - convergence) * fov;
}

  r3.xyz = cb2[19].xyz * r2.yyy;
  r2.xyw = cb2[18].xyz * r2.xxx + r3.xyz;
  r2.xyw = cb2[20].xyz * r2.zzz + r2.xyw; // depth in r2.z
  r2.xyw = cb2[21].xyz + r2.xyw;

// Fallback adjustment if the FOV was not passed from the VS:
if (!fov) {
  float4 clip_space_adj = float4(separation * (depth - convergence), 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  r2.xyw -= world_space_adj.xyz;
}

  r3.xyz = -cb3[25].xyz + r2.xyw;
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = sqrt(r0.x);
  r0.x = -r0.z * r0.w + r0.x;
  r0.x = cb3[25].w * r0.x + r2.z;
  r0.x = saturate(r0.x * cb3[24].z + cb3[24].w);
  r3.xyzw = t1.Sample(s1_s, r1.xy).xyzw;
  r0.x = saturate(r3.x + r0.x);
  r3.xyzw = t2.Sample(s2_s, r1.xy).xyzw;
  r4.xyzw = t3.Sample(s3_s, r1.xy).xyzw;
  r5.xyzw = t4.Sample(s4_s, r1.xy).xyzw;
  r0.xyz = cb0[9].xyz * r0.xxx;
  r5.xyz = r5.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r5.xyz * r0.www;
  r2.xyz = -_WorldSpaceCameraPos.xyz + r2.xyw;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r6.xyz = r2.xyz * r0.www;
  r1.z = dot(r5.xyz, -cb0[7].xyz);
  r1.w = 3 * r5.w;
  r1.w = (int)r1.w;
  r1.w = cmp((int)r1.w == 1);
  if (r1.w != 0) {
    r7.xyz = r3.xyz;
  } else {
    r1.w = max(0, r1.z);
    r8.xyzw = float4(1,1,1,1) + -r4.wxyz;
    r2.xyz = -r2.xyz * r0.www + -cb0[7].xyz;
    r0.w = dot(r2.xyz, r2.xyz);
    r0.w = max(0.00100000005, r0.w);
    r0.w = rsqrt(r0.w);
    r2.xyz = r2.xyz * r0.www;
    r0.w = dot(r5.xyz, r2.xyz);
    r0.w = max(0, r0.w);
    r2.w = dot(r5.xyz, -r6.xyz);
    r2.x = dot(-cb0[7].xyz, r2.xyz);
    r2.xw = max(float2(0,0), r2.xw);
    r2.y = r8.x * r8.x;
    r2.z = -r8.x * r8.x + 1;
    r3.w = r2.w * r2.z + r2.y;
    r2.z = r1.w * r2.z + r2.y;
    r2.z = r2.w * r2.z;
    r2.z = r1.w * r3.w + r2.z;
    r2.z = 9.99999975e-006 + r2.z;
    r2.z = 2 / r2.z;
    r3.w = r2.y * r2.y;
    r0.w = r0.w * r0.w;
    r2.y = r2.y * r2.y + -1;
    r0.w = r0.w * r2.y + 1;
    r2.y = 3.14159274 * r0.w;
    r0.w = r2.y * r0.w + 1.00000001e-007;
    r0.w = r3.w / r0.w;
    r2.y = 1 + -r1.w;
    r3.w = r2.y * r2.y;
    r3.w = r3.w * r3.w;
    r2.y = r3.w * r2.y;
    r2.w = 1 + -r2.w;
    r3.w = r2.w * r2.w;
    r3.w = r3.w * r3.w;
    r2.w = r3.w * r2.w;
    r3.w = r2.x * r2.x;
    r3.w = dot(r3.ww, r8.xx);
    r3.w = -0.5 + r3.w;
    r2.y = r3.w * r2.y + 1;
    r2.w = r3.w * r2.w + 1;
    r2.y = r2.y * r2.w;
    r0.w = r2.z * r0.w;
    r0.w = 0.785398185 * r0.w;
    r2.z = cmp(cb0[3].w == 0.000000);
    r2.w = max(9.99999975e-005, r0.w);
    r2.w = sqrt(r2.w);
    r0.w = r2.z ? r2.w : r0.w;
    r0.w = r0.w * r1.w;
    r0.w = max(0, r0.w);
    r1.w = r2.y * r1.w;
    r2.y = dot(r4.xyz, r4.xyz);
    r2.y = cmp(r2.y != 0.000000);
    r2.y = r2.y ? 1.000000 : 0;
    r0.w = r2.y * r0.w;
    r2.yzw = r1.www * r0.xyz;
    r5.xyz = r0.www * r0.xyz;
    r0.w = 1 + -r2.x;
    r1.w = r0.w * r0.w;
    r1.w = r1.w * r1.w;
    r0.w = r1.w * r0.w;
    r4.xyz = r8.yzw * r0.www + r4.xyz;
    r4.xyz = r5.xyz * r4.xyz;
    r7.xyz = r3.xyz * r2.yzw + r4.xyz;
  }
  r0.w = saturate(dot(r6.xyz, -cb0[7].xyz));
  r1.z = saturate(-r1.z);
  r0.w = -r1.z + r0.w;
  r0.w = r0.w * 0.300000012 + r1.z;
  r1.xyzw = t5.Sample(s5_s, r1.xy).xyzw;
  r1.xz = saturate(r1.xx);
  r0.xyz = r0.xyz * r0.www;
  r1.y = 1;
  r2.xyz = r3.xyz * r1.xyz;
  r2.w = r2.y * r1.z;
  r0.xyz = r2.xwz * r0.xyz;
  o0.xyz = r0.xyz * float3(4.25,5,3.5) + r7.xyz;
  o0.w = 1;
  return;
}
