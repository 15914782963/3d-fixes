// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 9eb84337c7b30e61-vs_replace.txt
// 3DMigoto: 9eb84337c7b30e61 |    Unity headers extracted from Speedtree Foliage - Forward Cull Off.shader
//    Shader "Beam Team/SpeedTree/SpeedTree Foliage - Forward Cull Off VFACE Metallic" {
//      Properties {
//      [Header(Diffuse)]  _Color ("Color", Color) = (1,1,1,1)
//       _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//       _MainTex ("Diffuse Albedo (RGB)", 2D) = "white" { }
//      [Header(Packed Normals)]  _PackedTex ("Gloss (R) Normal Y (G) Translucency (B) Normal X (A)", 2D) = "white" { }
//      [Header(Translucency)] [Toggle(BEAM_SPEEDTREE_TRANSLUCENCY)]  _Translucent ("Translucent", Float) = 0
//       _TranslucencyColor ("Translucency Tint", Color) = (0.73,0.85,0.41,1)
//       _TranslucencyIntensity ("Translucency Intensity", Range(1,5)) = 1
//       _TranslucencyViewDependency ("Translucency View Dependency", Range(0,1)) = 0.5
//      [Header(Wind)] [MaterialEnum(None, 0, Fastest, 1, Fast, 2, Better, 3, Best, 4, Palm, 5)]  _WindQuality ("Wind Quality", Range(0,5)) = 0
//      }
//      Fallback "Legacy Shaders/Transparent/Cutout/VertexLit"
//      SubShader 1/2 {
//        Tags { "QUEUE"="AlphaTest" "DisableBatching"="LodFading" "RenderType"="SpeedTree" }
//        Pass 1/2 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="AlphaTest" "DisableBatching"="LodFading" "RenderType"="SpeedTree" }
//          Cull Off
//          GpuProgramID 27360
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 119
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Speedtree Foliage - Forward Cull Off.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 213 0 3
//   Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "SUNSHINE_FILTER_HARD" "GEOM_TYPE_FROND" "BEAM_SPEEDTREE_TRANSLUCENCY" }
//   undeciphered2: 1 0 5 0 0
//   undeciphered3: 191 7 0 0 2 1 1 2 3 4 4 5 5 6 7 8
//   ConstBuffer "$Globals" 656
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 512 [_MainTex_ST]
//   Float 532 [_WindQuality]
//   Float 536 [_WindEnabled]
//   Vector 608 [_AfsSpecFade] 2
//   Matrix 192 [sunshine_CameraVToSunVP]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 32 [unity_4LightPosX0]
//   Vector 48 [unity_4LightPosY0]
//   Vector 64 [unity_4LightPosZ0]
//   Vector 80 [unity_4LightAtten0]
//   Vector 96 [unity_LightColor0]
//   Vector 112 [unity_LightColor1]
//   Vector 128 [unity_LightColor2]
//   Vector 144 [unity_LightColor3]
//   Vector 160 [unity_LightColor4]
//   Vector 176 [unity_LightColor5]
//   Vector 192 [unity_LightColor6]
//   Vector 208 [unity_LightColor7]
//   Vector 656 [unity_SHBr]
//   Vector 672 [unity_SHBg]
//   Vector 688 [unity_SHBb]
//   Vector 704 [unity_SHC]
//   ConstBuffer "UnityPerDraw" 352
//   Vector 320 [unity_LODFade]
//   Vector 336 [unity_WorldTransformParams]
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 64 [glstate_matrix_modelview0]
//   Matrix 192 [_Object2World]
//   Matrix 256 [_World2Object]
//   ConstBuffer "SpeedTreeWind" 256
//   Vector 0 [_ST_WindVector]
//   Vector 16 [_ST_WindGlobal]
//   Vector 32 [_ST_WindBranch]
//   Vector 48 [_ST_WindBranchTwitch]
//   Vector 64 [_ST_WindBranchWhip]
//   Vector 80 [_ST_WindBranchAnchor]
//   Vector 96 [_ST_WindBranchAdherences]
//   Vector 112 [_ST_WindTurbulences]
//   Vector 224 [_ST_WindFrondRipple]
//   Vector 240 [_ST_WindAnimation]
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityPerDraw" 3
//   BindCB "SpeedTreeWind" 4
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:10:05 2016
cbuffer cb4 : register(b4)
{
  float4 cb4[16];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[22];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[45];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[39];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float2 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float3 o6 : TEXCOORD5)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 9eb84337c7b30e61-vs_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyz = cb3[5].xyz * v0.yyy;
  r0.xyz = cb3[4].xyz * v0.xxx + r0.xyz;
  r0.xyz = cb3[6].xyz * v0.zzz + r0.xyz;
  r0.xyz = cb3[7].xyz * v0.www + r0.xyz;
  r1.xyzw = cb0[13].xyzw * r0.yyyy;
  r1.xyzw = cb0[12].xyzw * r0.xxxx + r1.xyzw;
  r0.xyzw = cb0[14].xyzw * r0.zzzz + r1.xyzw;
  o5.xyzw = cb0[15].xyzw + r0.xyzw;
  o4.xy = v3.xy * cb0[32].xy + cb0[32].zw;
  r0.x = cb0[33].y * cb0[33].z;
  r0.y = cmp(0 < r0.x);
  r1.xyz = cb4[0].yyy * cb3[17].xyz;
  r1.xyz = cb3[16].xyz * cb4[0].xxx + r1.xyz;
  r1.xyz = cb3[18].xyz * cb4[0].zzz + r1.xyz;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = rsqrt(r0.z);
  r0.zw = r1.xz * r0.zz;
  r0.zw = r0.yy ? r0.zw : 0;
  r1.xyz = v4.xyz + -v0.xyz;
  r1.xyz = cb3[20].xxx * r1.xyz + v0.xyz;
  r1.w = cmp(r0.x == 5.000000);
  r2.x = cmp(v3.x < 0.5);
  r2.x = r2.x ? 0.750000 : 0;
  r2.y = cb4[14].x + v3.y;
  r2.x = r2.y * cb4[14].z + r2.x;
  r2.x = 0.5 + r2.x;
  r2.x = frac(r2.x);
  r2.x = r2.x * 2 + -1;
  r2.y = abs(r2.x) * abs(r2.x);
  r2.x = -abs(r2.x) * 2 + 3;
  r2.x = r2.y * r2.x + -0.5;
  r2.x = v5.y * r2.x;
  r2.x = dot(cb4[14].yy, r2.xx);
  r2.xyz = r2.xxx * v2.xyz + r1.xyz;
  r1.xyz = r1.www ? r2.xyz : r1.xyz;
  r0.x = cmp(r0.x >= 3);
  if (r0.x != 0) {
    if (r1.w != 0) {
      r2.xyz = cb4[5].yyy * cb3[17].xyz;
      r2.xyz = cb3[16].xyz * cb4[5].xxx + r2.xyz;
      r2.xyz = cb3[18].xyz * cb4[5].zzz + r2.xyz;
      r0.x = dot(r2.xyz, r2.xyz);
      r0.x = rsqrt(r0.x);
      r2.xyz = r2.xyz * r0.xxx;
      r3.xyz = float3(0.0625,1,16) * v3.www;
      r3.xyz = frac(r3.xyz);
      r3.xyz = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
      r3.xyz = v3.zzz * r3.xyz;
      r0.x = cb3[15].x + cb3[15].y;
      r0.x = cb4[2].x + r0.x;
      r4.x = v3.w + r0.x;
      r4.y = r0.x * cb4[3].y + v3.w;
      r1.w = cb4[3].y * r4.x;
      r4.z = 0.5 * r1.w;
      r4.w = -v3.z + r4.x;
      r4.xyzw = float4(0.5,0.5,0.5,1.5) + r4.xyzw;
      r4.xyzw = frac(r4.xyzw);
      r4.xyzw = r4.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
      r5.xyzw = abs(r4.xyzw) * abs(r4.xyzw);
      r4.xyzw = -abs(r4.xyzw) * float4(2,2,2,2) + float4(3,3,3,3);
      r4.xyzw = r5.xyzw * r4.xyzw + float4(-0.5,-0.5,-0.5,-0.5);
      r4.xyzw = r4.xyzw + r4.xyzw;
      r5.w = r4.y * r4.z;
      r1.w = cmp(r5.w < 0);
      r5.y = -r5.w;
      r5.xz = float2(-1,1);
      r5.xy = r1.ww ? r5.xy : r5.zw;
      r1.w = -r4.y * r4.z + r5.x;
      r1.w = r5.y * r1.w + r5.w;
      r2.w = r5.x + -r1.w;
      r1.w = r5.y * r2.w + r1.w;
      r1.w = cb4[3].x * r1.w;
      r2.w = 1 + -cb4[0].w;
      r3.w = 1 + -cb4[3].x;
      r3.w = r4.x * r3.w;
      r1.w = r1.w * r2.w + r3.w;
      r2.w = r4.w * cb4[4].x + 1;
      r1.w = r2.w * r1.w;
      r3.xyz = r3.xyz * r1.www;
      r3.xyz = r3.xyz * cb4[2].yyy + r1.xyz;
      r4.x = r0.x * 0.100000001 + v3.w;
      r0.x = cb4[15].x * cb4[7].x;
      r4.y = r0.x * 0.100000001 + v3.w;
      r4.xy = float2(0.5,0.5) + r4.xy;
      r4.xy = frac(r4.xy);
      r4.xy = r4.xy * float2(2,2) + float2(-1,-1);
      r5.xy = abs(r4.xy) * abs(r4.xy);
      r4.xy = -abs(r4.xy) * float2(2,2) + float2(3,3);
      r4.xy = r5.xy * r4.xy + float2(-0.5,-0.5);
      r4.xy = r4.xy + r4.xy;
      r4.xy = r4.xy * r4.xy;
      r0.x = r4.y * r4.x;
      r0.x = -r0.x * cb4[7].x + 1;
      r1.w = cb4[0].w * r4.w;
      r0.x = r1.w * cb4[4].x + r0.x;
      r2.xyz = r2.xyz * cb4[5].www + -r3.xyz;
      r2.xyz = cb4[6].yyy * r2.xyz;
      r2.xyz = r2.xyz * r0.xxx;
      r1.xyz = r2.xyz * v3.zzz + r3.xyz;
    } else {
      r2.xyz = float3(0.0625,1,16) * v3.www;
      r2.xyz = frac(r2.xyz);
      r2.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
      r2.xyz = v3.zzz * r2.xyz;
      r0.x = cb3[15].x + cb3[15].y;
      r0.x = cb4[2].x + r0.x;
      r3.x = v3.w + r0.x;
      r3.y = r0.x * cb4[3].y + v3.w;
      r0.x = cb4[3].y * r3.x;
      r3.z = 0.5 * r0.x;
      r3.xyz = float3(0.5,0.5,0.5) + r3.xyz;
      r3.xyz = frac(r3.xyz);
      r3.xyz = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
      r4.xyz = abs(r3.xyz) * abs(r3.xyz);
      r3.xyz = -abs(r3.xyz) * float3(2,2,2) + float3(3,3,3);
      r3.xyz = r4.xyz * r3.xyz + float3(-0.5,-0.5,-0.5);
      r3.xyz = r3.xyz + r3.xyz;
      r4.w = r3.y * r3.z;
      r0.x = cmp(r4.w < 0);
      r4.y = -r4.w;
      r4.xz = float2(-1,1);
      r4.xy = r0.xx ? r4.xy : r4.zw;
      r0.x = -r3.y * r3.z + r4.x;
      r0.x = r4.y * r0.x + r4.w;
      r1.w = r4.x + -r0.x;
      r0.x = r4.y * r1.w + r0.x;
      r0.x = cb4[3].x * r0.x;
      r1.w = 1 + -cb4[0].w;
      r2.w = 1 + -cb4[3].x;
      r2.w = r3.x * r2.w;
      r0.x = r0.x * r1.w + r2.w;
      r2.xyz = r2.xyz * r0.xxx;
      r1.xyz = r2.xyz * cb4[2].yyy + r1.xyz;
    }
  }
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = sqrt(r0.x);
  r1.w = 1 / cb4[1].z;
  r1.w = -r1.w * 0.25 + r1.y;
  r1.w = max(0, r1.w);
  r1.w = cb4[1].z * r1.w;
  r2.x = cmp(r1.w != 0.000000);
  r2.y = log2(r1.w);
  r2.y = cb4[1].w * r2.y;
  r2.y = exp2(r2.y);
  r1.w = r2.x ? r2.y : r1.w;
  r2.x = cb4[1].x + cb3[15].x;
  r2.y = cb4[1].x * 0.800000012 + cb3[15].y;
  r2.xy = float2(0.5,0.5) + r2.xy;
  r2.xy = frac(r2.xy);
  r2.xy = r2.xy * float2(2,2) + float2(-1,-1);
  r2.zw = abs(r2.xy) * abs(r2.xy);
  r2.xy = -abs(r2.xy) * float2(2,2) + float2(3,3);
  r2.xy = r2.zw * r2.xy + float2(-0.5,-0.5);
  r2.xy = r2.xy + r2.xy;
  r2.x = r2.y * r2.y + r2.x;
  r2.y = cb4[6].x / cb4[1].z;
  r2.x = cb4[1].y * r2.x + r2.y;
  r1.w = r2.x * r1.w;
  r2.xz = r0.zw * r1.ww + r1.xz;
  r2.y = r1.y;
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = r2.xyz * r0.zzz;
  r0.xzw = r2.xyz * r0.xxx;
  r0.xyz = r0.yyy ? r0.xzw : r1.xyz;
  r1.xyz = cb3[13].xyz * r0.yyy;
  r1.xyz = cb3[12].xyz * r0.xxx + r1.xyz;
  r1.xyz = cb3[14].xyz * r0.zzz + r1.xyz;
  r1.xyz = cb3[15].xyz * v0.www + r1.xyz;
  r2.xyz = _WorldSpaceCameraPos.xyz + -r1.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r0.w = cb0[38].x + -r0.w;
  o4.z = saturate(r0.w / cb0[38].y);
  r2.xyzw = cb3[1].xyzw * r0.yyyy;
  r2.xyzw = cb3[0].xyzw * r0.xxxx + r2.xyzw;
  r0.xyzw = cb3[2].xyzw * r0.zzzz + r2.xyzw;
  o0.xyzw = cb3[3].xyzw * v0.wwww + r0.xyzw;
  r0.x = cb3[16].x;
  r0.y = cb3[17].x;
  r0.zw = cb3[18].xx;
  r2.x = cb3[16].y;
  r2.y = cb3[17].y;
  r2.zw = cb3[18].yy;
  r2.xyzw = v2.yyyy * r2.xyzw;
  r0.xyzw = r0.xyzw * v2.xxxx + r2.xyzw;
  r2.x = cb3[16].z;
  r2.y = cb3[17].z;
  r2.zw = cb3[18].zz;
  r0.xyzw = r2.xyzw * v2.zzzz + r0.xyzw;
  r1.w = dot(r0.xyw, r0.xyw);
  r1.w = rsqrt(r1.w);
  r0.xyzw = r1.wwww * r0.xyzw;
  r2.xyz = cb3[13].yzx * v1.yyy;
  r2.xyz = cb3[12].yzx * v1.xxx + r2.xyz;
  r2.xyz = cb3[14].yzx * v1.zzz + r2.xyz;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r1.w = cb3[21].w * v1.w;
  r3.xyz = r2.xyz * r0.wxy;
  r3.xyz = r0.ywx * r2.yzx + -r3.xyz;
  r3.xyz = r3.xyz * r1.www;
  r4.xyzw = cb2[2].xyzw + -r1.xxxx;
  r5.xyzw = cb2[3].xyzw + -r1.yyyy;
  r6.xyzw = cb2[4].xyzw + -r1.zzzz;
  r7.xyzw = r5.xyzw * r5.xyzw;
  r7.xyzw = r4.xyzw * r4.xyzw + r7.xyzw;
  r7.xyzw = r6.xyzw * r6.xyzw + r7.xyzw;
  r5.xyzw = r5.xyzw * r0.yyyy;
  r4.xyzw = r4.xyzw * r0.xxxx + r5.xyzw;
  r4.xyzw = r6.xyzw * r0.wwzw + r4.xyzw;
  r5.xyzw = rsqrt(r7.xyzw);
  r4.xyzw = r5.xyzw * r4.xyzw;
  r4.xyzw = max(float4(0,0,0,0), r4.xyzw);
  r5.xyzw = r7.xyzw * cb2[5].xyzw + float4(1,1,1,1);
  r5.xyzw = float4(1,1,1,1) / r5.xyzw;
  r4.xyzw = r5.xyzw * r4.xyzw;
  r5.xyz = cb2[7].xyz * r4.yyy;
  r5.xyz = cb2[6].xyz * r4.xxx + r5.xyz;
  r4.xyz = cb2[8].xyz * r4.zzz + r5.xyz;
  r4.xyz = cb2[9].xyz * r4.www + r4.xyz;
  r1.w = cmp(cb0[3].w == 0.000000);
  r5.xyz = r4.xyz * float3(0.305306017,0.305306017,0.305306017) + float3(0.682171106,0.682171106,0.682171106);
  r5.xyz = r4.xyz * r5.xyz + float3(0.0125228781,0.0125228781,0.0125228781);
  r5.xyz = r5.xyz * r4.xyz;
  r4.xyz = r1.www ? r5.xyz : r4.xyz;
  r5.xyzw = r0.xyzw * r0.ywzx;
  r6.x = dot(cb2[41].xyzw, r5.xyzw);
  r6.y = dot(cb2[42].xyzw, r5.xyzw);
  r6.z = dot(cb2[43].xyzw, r5.xyzw);
  r0.z = r0.y * r0.y;
  r0.z = r0.x * r0.x + -r0.z;
  r5.xyz = cb2[44].xyz * r0.zzz + r6.xyz;
  o6.xyz = r5.xyz + r4.xyz;
  o1.x = r2.z;
  o1.y = r3.x;
  o1.z = r0.x;
  o1.w = r1.x;
  o2.x = r2.x;
  o2.y = r3.y;
  o2.z = r0.y;
  o2.w = r1.y;
  o3.x = r2.y;
  o3.y = r3.z;
  o3.z = r0.w;
  o3.w = r1.z;
  return;
}

/****************************** COMPILE WARNINGS ******************************
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\9eb84337c7b30e61-vs_replace.txt(158,14-15): warning X3578: Output value 'o4' is not completely initialized

****************************** COMPILE WARNINGS ******************************/
