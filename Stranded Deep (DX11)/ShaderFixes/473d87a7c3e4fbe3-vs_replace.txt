// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 473d87a7c3e4fbe3-vs_replace.txt
// 3DMigoto: 473d87a7c3e4fbe3 |    Unity headers extracted from CumulusCloud.shader
//    Shader "Beam Team/Sky/Cumulus Particle" {
//      Properties {
//       _MainTex ("Particle Texture", 2D) = "white" { }
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      Fallback Off
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Blend One OneMinusSrcAlpha
//          GpuProgramID 55518
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 1
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from CumulusCloud.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 37 0 0
//   Keywords { "SOFTPARTICLES_OFF" }
//   undeciphered2: 1 0 3 0 0
//   undeciphered3: 13 3 0 0 2 1 3 4
//   ConstBuffer "$Globals" 240
//   Float 96 [ambientBoost]
//   Vector 100 [ambient] 3
//   Vector 128 [lightDir] 3
//   Float 140 [extinction]
//   Vector 144 [fog]
//   Float 160 [fade]
//   Vector 164 [cloudPos] 3
//   Float 176 [minPhase]
//   Float 180 [maxPhase]
//   Vector 208 [_MainTex_ST]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityPerDraw" 352
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 64 [glstate_matrix_modelview0]
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:01:43 2016
cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[14];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR0,
  out float2 o2 : TEXCOORD0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 473d87a7c3e4fbe3-vs_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = cb2[1].xyzw * v0.yyyy;
  r0.xyzw = cb2[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb2[2].xyzw * v0.zzzz + r0.xyzw;
  o0.xyzw = cb2[3].xyzw * v0.wwww + r0.xyzw;
  r0.xyz = -_WorldSpaceCameraPos.xyz + cb0[10].yzw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.x = dot(r0.xyz, cb0[8].xyz);
  r0.xy = -r0.xx * float2(1.70000005,-0.200000003) + float2(1.72250009,1.00999999);
  r0.xy = log2(r0.xy);
  r0.xy = float2(1.5,1.5) * r0.xy;
  r0.xy = exp2(r0.xy);
  r0.xy = float2(0.277499974,0.99000001) / r0.xy;
  r0.xy = float2(0.850000024,0.149999976) * r0.xy;
  r0.x = r0.x + r0.y;
  r0.x = max(cb0[11].x, r0.x);
  r0.x = min(cb0[11].y, r0.x);
  r0.yzw = cb0[6].yzw * cb0[6].xxx;
  r0.xyz = v1.xyz * r0.xxx + r0.yzw;
  r0.xyz = saturate(v1.www * r0.xyz);
  r0.xyz = -cb0[9].xyz + r0.xyz;
  r1.xyz = cb2[5].xyz * v0.yyy;
  r1.xyz = cb2[4].xyz * v0.xxx + r1.xyz;
  r1.xyz = cb2[6].xyz * v0.zzz + r1.xyz;
  r1.xyz = cb2[7].xyz * v0.www + r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(r0.w);
  r0.w = saturate(cb0[9].w * r0.w);
  r1.x = -1.44269502 * r0.w;
  r0.w = -r0.w * r0.w + 1;
  r0.w = cb0[10].x * r0.w;
  r1.x = exp2(r1.x);
  r0.xyz = r1.xxx * r0.xyz + cb0[9].xyz;
  o1.xyz = r0.www * r0.xyz;
  o1.w = cb0[8].w * r0.w;
  o2.xy = v2.xy * cb0[13].xy + cb0[13].zw;
  return;
}
