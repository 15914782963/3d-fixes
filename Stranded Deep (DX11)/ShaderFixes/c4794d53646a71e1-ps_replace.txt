// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe c4794d53646a71e1-ps_replace.txt
// 3DMigoto: c4794d53646a71e1 |    Unity headers extracted from BeamUnderWaterPostEffect.shader
//    Shader "Ceto/BeamUnderWaterPostEffect" {
//      Properties {
//       _MainTex ("Base (RGB)", 2D) = "black" { }
//      }
//      Fallback Off
//      SubShader 1/1 {
//        Pass 1/2 {
//          ZTest Always
//          ZWrite Off
//          Cull Off
//          GpuProgramID 46079
//          Program "fp" {
//            SubProgram "d3d11_9x " {
//              GpuProgramIndex 35
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from BeamUnderWaterPostEffect.shader.decompressed:
//   API d3d11_9x
//   Shader model ps_4_0_level_9_1
//   undeciphered1: 29 2 0
//   Keywords { "INGAME" "CETO_USE_OCEAN_DEPTHS_BUFFER" "CETO_UNDERWATER_ON" }
//   undeciphered2: 1 2 2 2 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 896
//   Vector 432 [Ceto_SunDir] 3
//   Float 732 [_BelowVisibility]
//   Vector 768 [_Beam_UnderwaterColor]
//   Vector 784 [_Beam_UnderwaterInscatterColor]
//   Float 892 [_StormFade]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_BeamTeamDepthTexture] 2D 1
//   SetTexture 1 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 10:59:32 2016
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[56];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float2 w1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe c4794d53646a71e1-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = t0.Sample(s1_s, w1.xy).xyzw;
  r0.x = cb1[7].x * r0.x + cb1[7].y;
  r0.x = 1 / r0.x;
  r0.y = cb1[5].z / cb0[45].w;
  r0.x = saturate(r0.x * r0.y);
  r0.yzw = v2.xyz * r0.xxx;
  r1.xyz = r0.xxx * v2.xyz + _WorldSpaceCameraPos.xyz;
  r0.x = dot(r0.yzw, r0.yzw);
  r0.x = sqrt(r0.x);
  r0.x = saturate(r0.x / cb0[45].w);
  r0.yzw = cb0[55].www * float3(0.350000024,0.0500000119,0) + float3(0.5,0.899999976,1);
  r2.xyz = saturate(r0.xxx / r0.yzw);
  r1.xzw = _WorldSpaceCameraPos.xyz + -r1.xyz;
  r0.x = cb0[45].w * 3 + r1.y;
  r1.y = dot(r1.xzw, r1.xzw);
  r1.y = rsqrt(r1.y);
  r1.xyz = r1.xzw * r1.yyy;
  r1.x = dot(r1.xyz, -cb0[27].xyz);
  r1.y = saturate(r1.y * -0.5 + 0.5);
  r1.x = r1.x * 0.699999988 + 0.300000012;
  r1.x = r1.x * r1.x;
  r1.xzw = cb0[49].xyz * r1.xxx;
  r0.yzw = r1.xzw * r0.yzw + cb0[48].xyz;
  r0.yzw = r0.yzw * r1.yyy;
  r1.xyzw = t1.Sample(s0_s, v1.xy).xyzw;
  r0.yzw = r0.yzw * float3(2,2,2) + -r1.xyz;
  r0.yzw = r2.xyz * r0.yzw + r1.xyz;
  o0.w = r1.w;
  r1.x = 3 * cb0[45].w;
  r0.x = saturate(r0.x / r1.x);
  r0.xyz = r0.yzw * r0.xxx;
  o0.xyz = float3(0.699999988,0.899999976,1) * r0.xyz;
  return;
}
