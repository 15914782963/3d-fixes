// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe a0763a88871d44c8-ps_replace.txt
// 3DMigoto: a0763a88871d44c8 |    Unity headers extracted from Standard-AddPass.shader
//    Shader "Hidden/TerrainEngine/Splatmap/Standard-AddPass" {
//      Properties {
//      [HideInInspector]  _Control ("Control (RGBA)", 2D) = "red" { }
//      [HideInInspector]  _Splat3 ("Layer 3 (A)", 2D) = "white" { }
//      [HideInInspector]  _Splat2 ("Layer 2 (B)", 2D) = "white" { }
//      [HideInInspector]  _Splat1 ("Layer 1 (G)", 2D) = "white" { }
//      [HideInInspector]  _Splat0 ("Layer 0 (R)", 2D) = "white" { }
//      [HideInInspector]  _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
//      [HideInInspector]  _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
//      [HideInInspector]  _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
//      [HideInInspector]  _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
//      [HideInInspector] [Gamma]  _Metallic0 ("Metallic 0", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic1 ("Metallic 1", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic2 ("Metallic 2", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic3 ("Metallic 3", Range(0,1)) = 0
//      [HideInInspector]  _Smoothness0 ("Smoothness 0", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness1 ("Smoothness 1", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness2 ("Smoothness 2", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness3 ("Smoothness 3", Range(0,1)) = 1
//      }
//      Fallback "Hidden/TerrainEngine/Splatmap/Diffuse-AddPass"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          ZWrite Off
//          Blend One One
//          GpuProgramID 5046
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 77
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Standard-AddPass.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 159 8 4
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
//   undeciphered2: 1 10 4 9 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 240
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 80 [unity_DynamicLightmap_HDR]
//   Vector 96 [_LightColor0]
//   Float 144 [_Metallic0]
//   Float 148 [_Metallic1]
//   Float 152 [_Metallic2]
//   Float 156 [_Metallic3]
//   Float 160 [_Smoothness0]
//   Float 164 [_Smoothness1]
//   Float 168 [_Smoothness2]
//   Float 172 [_Smoothness3]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   SetTexture 0 [_Control] 2D 4
//   SetTexture 1 [_Splat0] 2D 5
//   SetTexture 2 [_Splat1] 2D 6
//   SetTexture 3 [_Splat2] 2D 7
//   SetTexture 4 [_Splat3] 2D 8
//   SetTexture 5 [_ShadowMapTexture] 2D 3
//   SetTexture 6 [unity_DynamicLightmap] 2D 0
//   SetTexture 7 [unity_DynamicDirectionality] 2D -1
//   SetTexture 8 [unity_SpecCube0] CUBE 1
//   SetTexture 9 [unity_SpecCube1] CUBE 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:16:11 2016
TextureCube<float4> t9 : register(t9);

TextureCube<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[11];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD6,
  float4 v7 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe a0763a88871d44c8-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyz = _WorldSpaceCameraPos.xyz + -v4.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r0.xyz * r0.www;
  r2.xyzw = t0.Sample(s4_s, v5.xy).xyzw;
  r1.w = dot(r2.xyzw, float4(1,1,1,1));
  r3.xy = float2(-0.00389999989,0.00100000005) + r1.ww;
  r3.x = cmp(r3.x < 0);
  if (r3.x != 0) discard;
  r2.xyzw = r2.xyzw / r3.yyyy;
  r3.xyzw = t1.Sample(s5_s, v1.xy).xyzw;
  r3.xyzw = r3.xyzw * r2.xxxx;
  r3.w = cb0[10].x * r3.w;
  r4.xyzw = t2.Sample(s6_s, v1.zw).xyzw;
  r4.xyzw = r4.xyzw * r2.yyyy;
  r4.w = cb0[10].y * r4.w;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = t3.Sample(s7_s, v2.xy).xyzw;
  r4.xyzw = r4.xyzw * r2.zzzz;
  r4.w = cb0[10].z * r4.w;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = t4.Sample(s8_s, v2.zw).xyzw;
  r4.xyzw = r4.xyzw * r2.wwww;
  r4.w = cb0[10].w * r4.w;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r2.x = dot(r2.xyzw, cb0[9].xyzw);
  r2.yz = v6.xy / v6.ww;
  r4.xyzw = t5.Sample(s3_s, r2.yz).xyzw;
  r2.y = 1 + -r3.w;
  r2.z = dot(-r1.xyz, v3.xyz);
  r2.z = r2.z + r2.z;
  r4.yzw = v3.xyz * -r2.zzz + -r1.xyz;
  r5.xyz = cb0[6].xyz * r4.xxx;
  r6.xyzw = t6.Sample(s0_s, v7.zw).xyzw;
  r2.z = cb0[5].x * r6.w;
  r6.xyz = r2.zzz * r6.xyz;
  r6.xyz = log2(r6.xyz);
  r6.xyz = cb0[5].yyy * r6.xyz;
  r6.xyz = exp2(r6.xyz);
  r7.xyzw = t7.Sample(s0_s, v7.zw).xyzw;
  r7.xyz = float3(-0.5,-0.5,-0.5) + r7.xyz;
  r2.z = dot(v3.xyz, r7.xyz);
  r2.z = 0.5 + r2.z;
  r6.xyz = r6.xyz * r2.zzz;
  r2.z = max(9.99999975e-005, r7.w);
  r6.xyz = r6.xyz / r2.zzz;
  r2.z = cmp(0 < cb3[2].w);
  if (r2.z != 0) {
    r2.z = dot(r4.yzw, r4.yzw);
    r2.z = rsqrt(r2.z);
    r7.xyz = r4.yzw * r2.zzz;
    r8.xyz = cb3[0].xyz + -v4.xyz;
    r8.xyz = r8.xyz / r7.xyz;
    r9.xyz = cb3[1].xyz + -v4.xyz;
    r9.xyz = r9.xyz / r7.xyz;
    r10.xyz = cmp(float3(0,0,0) < r7.xyz);
    r8.xyz = r10.xyz ? r8.xyz : r9.xyz;
    r2.z = min(r8.x, r8.y);
    r2.z = min(r2.z, r8.z);
    r8.xyz = -cb3[2].xyz + v4.xyz;
    r7.xyz = r7.xyz * r2.zzz + r8.xyz;
  } else {
    r7.xyz = r4.yzw;
  }
  r2.z = -r2.y * 0.699999988 + 1.70000005;
  r2.z = r2.y * r2.z;
  r2.z = 6 * r2.z;
  r7.xyzw = t8.SampleLevel(s1_s, r7.xyz, r2.z).xyzw;
  r2.w = log2(r7.w);
  r2.w = cb3[3].y * r2.w;
  r2.w = exp2(r2.w);
  r2.w = cb3[3].x * r2.w;
  r8.xyz = r2.www * r7.xyz;
  r4.x = cmp(cb3[1].w < 0.999989986);
  if (r4.x != 0) {
    r4.x = cmp(0 < cb3[6].w);
    if (r4.x != 0) {
      r4.x = dot(r4.yzw, r4.yzw);
      r4.x = rsqrt(r4.x);
      r9.xyz = r4.yzw * r4.xxx;
      r10.xyz = cb3[4].xyz + -v4.xyz;
      r10.xyz = r10.xyz / r9.xyz;
      r11.xyz = cb3[5].xyz + -v4.xyz;
      r11.xyz = r11.xyz / r9.xyz;
      r12.xyz = cmp(float3(0,0,0) < r9.xyz);
      r10.xyz = r12.xyz ? r10.xyz : r11.xyz;
      r4.x = min(r10.x, r10.y);
      r4.x = min(r4.x, r10.z);
      r10.xyz = -cb3[6].xyz + v4.xyz;
      r4.yzw = r9.xyz * r4.xxx + r10.xyz;
    }
    r4.xyzw = t9.SampleLevel(s2_s, r4.yzw, r2.z).xyzw;
    r2.z = log2(r4.w);
    r2.z = cb3[7].y * r2.z;
    r2.z = exp2(r2.z);
    r2.z = cb3[7].x * r2.z;
    r4.xyz = r2.zzz * r4.xyz;
    r7.xyz = r2.www * r7.xyz + -r4.xyz;
    r8.xyz = cb3[1].www * r7.xyz + r4.xyz;
  }
  r2.z = dot(v3.xyz, v3.xyz);
  r2.z = rsqrt(r2.z);
  r4.xyz = v3.xyz * r2.zzz;
  r7.xyz = -cb0[2].xyz + r3.xyz;
  r7.xyz = r2.xxx * r7.xyz + cb0[2].xyz;
  r2.x = -r2.x * cb0[2].w + cb0[2].w;
  r3.xyz = r3.xyz * r2.xxx;
  r0.xyz = r0.xyz * r0.www + cb2[0].xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(r4.xyz, r1.xyz);
  r2.z = cmp(r0.w < 0);
  r0.w = 9.99999975e-006 + -r0.w;
  r9.xyz = r1.xyz * r0.www + r4.xyz;
  r4.xyz = r2.zzz ? r9.xyz : r4.xyz;
  r0.w = dot(r4.xyz, cb2[0].xyz);
  r2.z = dot(r4.xyz, r0.xyz);
  r2.z = max(0, r2.z);
  r1.x = dot(r4.xyz, r1.xyz);
  r1.x = max(0, r1.x);
  r0.x = dot(cb2[0].xyz, r0.xyz);
  r0.xw = max(float2(0,0), r0.xw);
  r0.y = r2.y * r2.y;
  r0.z = -r2.y * r2.y + 1;
  r1.y = r1.x * r0.z + r0.y;
  r0.z = r0.w * r0.z + r0.y;
  r0.z = r1.x * r0.z;
  r0.z = r0.w * r1.y + r0.z;
  r0.z = 9.99999975e-006 + r0.z;
  r0.z = 2 / r0.z;
  r1.y = r0.y * r0.y;
  r1.z = r2.z * r2.z;
  r2.zw = r0.yy * r0.yy + float2(-1,1);
  r1.z = r1.z * r2.z + 1;
  r2.z = 3.14159274 * r1.z;
  r1.z = r2.z * r1.z + 1.00000001e-007;
  r1.y = r1.y / r1.z;
  r1.z = 1 + -r0.w;
  r2.z = r1.z * r1.z;
  r2.z = r2.z * r2.z;
  r1.z = r2.z * r1.z;
  r1.x = 1 + -r1.x;
  r2.z = r1.x * r1.x;
  r2.z = r2.z * r2.z;
  r1.x = r2.z * r1.x;
  r2.z = r0.x * r0.x;
  r2.z = dot(r2.zz, r2.yy);
  r2.z = -0.5 + r2.z;
  r1.z = r2.z * r1.z + 1;
  r2.z = r2.z * r1.x + 1;
  r1.z = r2.z * r1.z;
  r0.z = r1.y * r0.z;
  r0.z = 0.785398185 * r0.z;
  r1.y = cmp(cb0[3].w == 0.000000);
  r2.z = max(9.99999975e-005, r0.z);
  r2.z = sqrt(r2.z);
  r0.z = r1.y ? r2.z : r0.z;
  r0.z = r0.z * r0.w;
  r0.z = max(0, r0.z);
  r0.w = r1.z * r0.w;
  r0.y = r2.y * r0.y;
  r0.y = -r0.y * 0.280000001 + 1;
  r1.z = 1 / r2.w;
  r0.y = r1.y ? r0.y : r1.z;
  r1.y = r3.w + -r2.x;
  r1.y = saturate(1 + r1.y);
  r2.xyz = r5.xyz * r0.www + r6.xyz;
  r4.xyz = r0.zzz * r5.xyz;
  r0.x = 1 + -r0.x;
  r0.z = r0.x * r0.x;
  r0.z = r0.z * r0.z;
  r0.x = r0.z * r0.x;
  r5.xyz = float3(1,1,1) + -r7.xyz;
  r0.xzw = r5.xyz * r0.xxx + r7.xyz;
  r0.xzw = r4.xyz * r0.xzw;
  r0.xzw = r3.xyz * r2.xyz + r0.xzw;
  r2.xyz = r0.yyy * r8.xyz;
  r3.xyz = r1.yyy + -r7.xyz;
  r1.xyz = r1.xxx * r3.xyz + r7.xyz;
  r0.xyz = r2.xyz * r1.xyz + r0.xzw;
  o0.xyz = r0.xyz * r1.www;
  o0.w = 1;
  return;
}
