// Text - objective

// 3DMigoto: 1ad58a57ad2ec06e |    Unity headers extracted from TMP_SDF.shader
//    Shader "TextMeshPro/Distance Field" {
//      Properties {
//       _FaceTex ("Face Texture", 2D) = "white" { }
//       _FaceUVSpeedX ("Face UV Speed X", Range(-5.000000,5.000000)) = 0.000000
//       _FaceUVSpeedY ("Face UV Speed Y", Range(-5.000000,5.000000)) = 0.000000
//       _FaceColor ("Face Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//       _FaceDilate ("Face Dilate", Range(-1.000000,1.000000)) = 0.000000
//       _OutlineColor ("Outline Color", Color) = (0.000000,0.000000,0.000000,1.000000)
//       _OutlineTex ("Outline Texture", 2D) = "white" { }
//       _OutlineUVSpeedX ("Outline UV Speed X", Range(-5.000000,5.000000)) = 0.000000
//       _OutlineUVSpeedY ("Outline UV Speed Y", Range(-5.000000,5.000000)) = 0.000000
//       _OutlineWidth ("Outline Thickness", Range(0.000000,1.000000)) = 0.000000
//       _OutlineSoftness ("Outline Softness", Range(0.000000,1.000000)) = 0.000000
//       _Bevel ("Bevel", Range(0.000000,1.000000)) = 0.500000
//       _BevelOffset ("Bevel Offset", Range(-0.500000,0.500000)) = 0.000000
//       _BevelWidth ("Bevel Width", Range(-0.500000,0.500000)) = 0.000000
//       _BevelClamp ("Bevel Clamp", Range(0.000000,1.000000)) = 0.000000
//       _BevelRoundness ("Bevel Roundness", Range(0.000000,1.000000)) = 0.000000
//       _LightAngle ("Light Angle", Range(0.000000,6.283185)) = 3.141600
//       _SpecularColor ("Specular", Color) = (1.000000,1.000000,1.000000,1.000000)
//       _SpecularPower ("Specular", Range(0.000000,4.000000)) = 2.000000
//       _Reflectivity ("Reflectivity", Range(5.000000,15.000000)) = 10.000000
//       _Diffuse ("Diffuse", Range(0.000000,1.000000)) = 0.500000
//       _Ambient ("Ambient", Range(1.000000,0.000000)) = 0.500000
//       _BumpMap ("Normal map", 2D) = "bump" { }
//       _BumpOutline ("Bump Outline", Range(0.000000,1.000000)) = 0.000000
//       _BumpFace ("Bump Face", Range(0.000000,1.000000)) = 0.000000
//       _ReflectFaceColor ("Reflection Color", Color) = (0.000000,0.000000,0.000000,1.000000)
//       _ReflectOutlineColor ("Reflection Color", Color) = (0.000000,0.000000,0.000000,1.000000)
//       _Cube ("Reflection Cubemap", CUBE) = "black" { }
//       _EnvMatrixRotation ("Texture Rotation", Vector) = (0.000000,0.000000,0.000000,0.000000)
//       _UnderlayColor ("Border Color", Color) = (0.000000,0.000000,0.000000,0.500000)
//       _UnderlayOffsetX ("Border OffsetX", Range(-1.000000,1.000000)) = 0.000000
//       _UnderlayOffsetY ("Border OffsetY", Range(-1.000000,1.000000)) = 0.000000
//       _UnderlayDilate ("Border Dilate", Range(-1.000000,1.000000)) = 0.000000
//       _UnderlaySoftness ("Border Softness", Range(0.000000,1.000000)) = 0.000000
//       _GlowColor ("Color", Color) = (0.000000,1.000000,0.000000,0.500000)
//       _GlowOffset ("Offset", Range(-1.000000,1.000000)) = 0.000000
//       _GlowInner ("Inner", Range(0.000000,1.000000)) = 0.050000
//       _GlowOuter ("Outer", Range(0.000000,1.000000)) = 0.050000
//       _GlowPower ("Falloff", Range(1.000000,0.000000)) = 0.750000
//       _WeightNormal ("Weight Normal", Float) = 0.000000
//       _WeightBold ("Weight Bold", Float) = 0.500000
//       _ShaderFlags ("Flags", Float) = 0.000000
//       _ScaleRatioA ("Scale RatioA", Float) = 1.000000
//       _ScaleRatioB ("Scale RatioB", Float) = 1.000000
//       _ScaleRatioC ("Scale RatioC", Float) = 1.000000
//       _MainTex ("Font Atlas", 2D) = "white" { }
//       _TextureWidth ("Texture Width", Float) = 512.000000
//       _TextureHeight ("Texture Height", Float) = 512.000000
//       _GradientScale ("Gradient Scale", Float) = 5.000000
//       _ScaleX ("Scale X", Float) = 1.000000
//       _ScaleY ("Scale Y", Float) = 1.000000
//       _PerspectiveFilter ("Perspective Correction", Range(0.000000,1.000000)) = 0.875000
//       _VertexOffsetX ("Vertex OffsetX", Float) = 0.000000
//       _VertexOffsetY ("Vertex OffsetY", Float) = 0.000000
//       _MaskCoord ("Mask Coordinates", Vector) = (0.000000,0.000000,10000.000000,10000.000000)
//       _ClipRect ("Clip Rect", Vector) = (-10000.000000,-10000.000000,10000.000000,10000.000000)
//       _MaskSoftnessX ("Mask SoftnessX", Float) = 0.000000
//       _MaskSoftnessY ("Mask SoftnessY", Float) = 0.000000
//       _StencilComp ("Stencil Comparison", Float) = 8.000000
//       _Stencil ("Stencil ID", Float) = 0.000000
//       _StencilOp ("Stencil Operation", Float) = 0.000000
//       _StencilWriteMask ("Stencil Write Mask", Float) = 255.000000
//       _StencilReadMask ("Stencil Read Mask", Float) = 255.000000
//       _ColorMask ("Color Mask", Float) = 15.000000
//      }
//      CustomEditor "TMPro.EditorUtilities.TMP_SDFShaderGUI"
//      Fallback "TextMeshPro/Mobile/Distance Field"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZTest [unity_GUIZTestMode]
//          ZWrite Off
//          Cull [_CullMode]
//          Stencil {
//             Ref [_Stencil]
//             ReadMask [_StencilReadMask]
//             WriteMask [_StencilWriteMask]
//             Comp [_StencilComp]
//             Pass [_StencilOp]
//            }
//          Blend One OneMinusSrcAlpha
//          ColorMask [_ColorMask]
//          GpuProgramID 41078
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 3
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from TMP_SDF.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 201510240 79 0 0
//   Keywords { "UNDERLAY_ON" }
//   undeciphered2: 1 0 4 0 0 0
//   undeciphered3: 31 5 0 0 2 1 1 2 3 4 4 5
//   ConstBuffer "$Globals" 528
//   Float 128 [_FaceDilate]
//   Float 132 [_OutlineSoftness]
//   Float 160 [_OutlineWidth]
//   Vector 352 [_UnderlayColor]
//   Float 368 [_UnderlayOffsetX]
//   Float 372 [_UnderlayOffsetY]
//   Float 376 [_UnderlayDilate]
//   Float 380 [_UnderlaySoftness]
//   Float 420 [_WeightNormal]
//   Float 424 [_WeightBold]
//   Float 428 [_ScaleRatioA]
//   Float 436 [_ScaleRatioC]
//   Float 440 [_VertexOffsetX]
//   Float 444 [_VertexOffsetY]
//   Vector 480 [_ClipRect]
//   Float 496 [_MaskSoftnessX]
//   Float 500 [_MaskSoftnessY]
//   Float 504 [_TextureWidth]
//   Float 508 [_TextureHeight]
//   Float 512 [_GradientScale]
//   Float 516 [_ScaleX]
//   Float 520 [_ScaleY]
//   Float 524 [_PerspectiveFilter]
//   Matrix 240 [_EnvMatrix]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityPerDraw" 352
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 192 [unity_ObjectToWorld]
//   Matrix 256 [unity_WorldToObject]
//   ConstBuffer "UnityPerFrame" 352
//   Matrix 80 [glstate_matrix_projection]
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//   BindCB "UnityPerFrame" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

// ---- Created with 3Dmigoto v1.2.42 on Sat Dec 10 03:48:09 2016
cbuffer cb3 : register(b3)
{
  float4 cb3[9];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[19];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[7];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[33];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include <crosshair.hlsl>

void main( 
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float4 v2 : COLOR0,
  float4 v3 : TEXCOORD0,
  float2 v4 : TEXCOORD1,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : COLOR0,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD1,
  out float4 o4 : TEXCOORD2,
  out float4 o5 : TEXCOORD3,
  out float4 o6 : TEXCOORD4,
  out float4 o7 : COLOR1)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cb0[27].zw + v0.xy;
  r1.xyzw = cb2[1].xyzw * r0.yyyy;
  r1.xyzw = cb2[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb2[2].xyzw * v0.zzzz + r1.xyzw;
  r1.xyzw = cb2[3].xyzw * v0.wwww + r1.xyzw;
  o0.xyzw = r1.xyzw;
  o1.xyzw = v2.xyzw;
  r0.z = 0.000244140625 * v4.x;
  r0.z = floor(r0.z);
  r0.w = -r0.z * 4096 + v4.x;
  o2.zw = float2(0.001953125,0.001953125) * r0.zw;
  o2.xy = v3.xy;
  r1.x = cb2[16].x * v1.x;
  r1.y = cb2[17].x * v1.x;
  r1.z = cb2[18].x * v1.x;
  r2.x = cb2[16].y * v1.y;
  r2.y = cb2[17].y * v1.y;
  r2.z = cb2[18].y * v1.y;
  r1.xyz = r2.xyz + r1.xyz;
  r2.x = cb2[16].z * v1.z;
  r2.y = cb2[17].z * v1.z;
  r2.z = cb2[18].z * v1.z;
  r1.xyz = r2.xyz + r1.xyz;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = r1.xyz * r0.zzz;
  r2.xyz = cb2[13].xyz * r0.yyy;
  r2.xyz = cb2[12].xyz * r0.xxx + r2.xyz;
  r2.xyz = cb2[14].xyz * v0.zzz + r2.xyz;
  r2.xyz = cb2[15].xyz * v0.www + r2.xyz;
  r2.xyz = cb1[4].xyz + -r2.xyz;
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r3.xyz = r2.xyz * r0.zzz;
  r0.z = dot(r1.xyz, r3.xyz);
  r1.xy = cb3[6].xy * cb1[6].yy;
  r1.xy = cb3[5].xy * cb1[6].xx + r1.xy;
  r1.xy = cb0[32].yz * abs(r1.xy);
  r1.xy = r1.ww / r1.xy;
  r0.w = dot(r1.xy, r1.xy);
  r1.xy = cb0[31].xy * float2(0.25,0.25) + r1.xy;
  o4.zw = float2(0.25,0.25) / r1.xy;
  r0.w = rsqrt(r0.w);
  r1.x = cb0[32].x * abs(v4.y);
  r0.w = r1.x * r0.w;
  r1.x = 1.5 * r0.w;
  r1.y = 1 + -cb0[32].w;
  r1.y = abs(r1.x) * r1.y;
  r0.w = r0.w * 1.5 + -r1.y;
  r0.z = abs(r0.z) * r0.w + r1.y;
  r0.w = cmp(cb3[8].w == 0.000000);
  r1.y = r0.w ? r0.z : r1.x;
  r0.z = cmp(0 >= v4.y);
  r0.z = r0.z ? 1.000000 : 0;
  r0.w = cb0[26].z + -cb0[26].y;
  r0.z = r0.z * r0.w + cb0[26].y;
  r0.z = r0.z / cb0[32].x;
  r0.w = cb0[26].w * cb0[8].x;
  r1.w = r0.w * 0.5 + r0.z;
  o3.yw = r1.yw;
  r0.z = 0.5 / r1.y;
  r0.w = -cb0[10].x * cb0[26].w + 1;
  r0.w = -cb0[8].y * cb0[26].w + r0.w;
  r0.w = r0.w * 0.5 + -r0.z;
  o3.x = r0.w + -r1.w;
  r0.w = 0.5 + -r1.w;
  o3.z = r0.w + r0.z;
  r3.xyzw = max(float4(-2e+010,-2e+010,-2e+010,-2e+010), cb0[30].xyzw);
  r3.xyzw = min(float4(2e+010,2e+010,2e+010,2e+010), r3.xyzw);
  r0.xy = r0.xy * float2(2,2) + -r3.xy;
  o4.xy = r0.xy + -r3.zw;
  r0.xyz = cb0[16].xyz * r2.yyy;
  r0.xyz = cb0[15].xyz * r2.xxx + r0.xyz;
  o5.xyz = cb0[17].xyz * r2.zzz + r0.xyz;
  r2.xyzw = cb0[27].yyyy * cb0[23].wzxy;
  r0.x = r2.x * r1.y + 1;
  r0.x = r1.y / r0.x;
  r0.y = r0.w * r0.x + -0.5;
  r0.z = r2.y * r0.x;
  r1.xy = cb0[32].xx * -r2.zw;
  r1.xy = r1.xy / cb0[31].zw;
  o6.xy = v3.xy + r1.xy;
  o6.z = r0.x;
  o6.w = -r0.z * 0.5 + r0.y;
  o7.xyz = cb0[22].xyz * cb0[22].www;
  o7.w = cb0[22].w;

float4 params = IniParams.Load(0);
int action = !params.y;

switch(action) {
	case 1:
		o0.x += adjust_from_depth_buffer(0, 0);
		break;
	case 2:
		o0 = 0;
		break;
}

  return;
}
