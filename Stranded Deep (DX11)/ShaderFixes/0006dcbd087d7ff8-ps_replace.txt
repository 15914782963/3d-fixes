// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 0006dcbd087d7ff8-ps_replace.txt
// 3DMigoto: 0006dcbd087d7ff8 |    Unity headers extracted from Glass - Bumped Specular Refractive Forward.shader
//    Shader "Beam Team/Standard/Transparent/Glass - Bumped Specular Refractive Forward" {
//      Properties {
//       _Color ("Glass Color (RGB)", Color) = (1,1,1,1)
//       _NormalStrength ("Normal Map Strength", Range(0,128)) = 64
//       _Abberation ("Abberation", Float) = 0.0015
//       _MainTex ("Diffuse Albedo (NOT IN USE)", 2D) = "white" { }
//       _SpecTex ("Specular Albedo (RGB) Gloss (A)", 2D) = "white" { }
//       _BumpTex ("Normal Map", 2D) = "bump" { }
//       _HighlightRimColor ("Highlight Rim Color", Color) = (0,0,0,0)
//      }
//      Fallback "VertexLit"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "FORCENOSHADOWCASTING"="true" "RenderType"="Transparent" }
//        GrabPass {
//         }
//        Pass 2/2 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Transparent" "FORCENOSHADOWCASTING"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Blend One One
//          GpuProgramID 81760
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 123
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Glass - Bumped Specular Refractive Forward.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 81 4 0
//   Keywords { "SPOT" "SUNSHINE_FILTER_HARD" }
//   undeciphered2: 1 4 3 4 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 672
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Matrix 128 [_LightMatrix0]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   SetTexture 0 [_BumpTex] 2D 2
//   SetTexture 1 [_SpecTex] 2D 3
//   SetTexture 2 [_LightTexture0] 2D 0
//   SetTexture 3 [_LightTextureB0] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:03:53 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[12];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 0006dcbd087d7ff8-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = t0.Sample(s2_s, v1.xy).xyzw;
  r0.xy = r0.wy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r0.xy, r0.xy);
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r0.z = sqrt(r0.w);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.x = dot(v2.xyz, r0.xyz);
  r1.y = dot(v3.xyz, r0.xyz);
  r1.z = dot(v4.xyz, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r1.xyz * r0.xxx;
  r1.xyz = _WorldSpaceCameraPos.xyz + -v5.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = dot(r0.xyz, r1.xyz);
  r1.w = 9.99999975e-006 + -r0.w;
  r0.w = cmp(r0.w < 0);
  r2.xyz = r1.xyz * r1.www + r0.xyz;
  r0.xyz = r0.www ? r2.xyz : r0.xyz;
  r0.w = dot(r0.xyz, r1.xyz);
  r0.w = max(0, r0.w);
  r2.xyzw = t1.Sample(s3_s, v1.xy).xyzw;
  r1.w = 1 + -r2.w;
  r2.x = -r1.w * r1.w + 1;
  r1.w = r1.w * r1.w;
  r2.y = r0.w * r2.x + r1.w;
  r3.xyz = cb2[0].xyz + -v5.xyz;
  r2.z = dot(r3.xyz, r3.xyz);
  r2.z = rsqrt(r2.z);
  r4.xyz = r3.xyz * r2.zzz;
  r1.xyz = r3.xyz * r2.zzz + r1.xyz;
  r2.z = dot(r0.xyz, r4.xyz);
  r2.z = max(0, r2.z);
  r2.x = r2.z * r2.x + r1.w;
  r0.w = r2.x * r0.w;
  r0.w = r2.z * r2.y + r0.w;
  r0.w = 9.99999975e-006 + r0.w;
  r0.w = 2 / r0.w;
  r2.x = dot(r1.xyz, r1.xyz);
  r2.x = max(0.00100000005, r2.x);
  r2.x = rsqrt(r2.x);
  r1.xyz = r2.xxx * r1.xyz;
  r0.x = dot(r0.xyz, r1.xyz);
  r0.y = dot(r4.xyz, r1.xyz);
  r0.xy = max(float2(0,0), r0.xy);
  r0.y = 1 + -r0.y;
  r0.x = r0.x * r0.x;
  r0.z = r1.w * r1.w + -1;
  r1.x = r1.w * r1.w;
  r0.x = r0.x * r0.z + 1;
  r0.z = 3.14159274 * r0.x;
  r0.x = r0.z * r0.x + 1.00000001e-007;
  r0.x = r1.x / r0.x;
  r0.x = r0.w * r0.x;
  r0.x = 0.785398185 * r0.x;
  r0.z = max(9.99999975e-005, r0.x);
  r0.z = sqrt(r0.z);
  r0.w = cmp(cb0[3].w == 0.000000);
  r0.x = r0.w ? r0.z : r0.x;
  r0.x = r0.x * r2.z;
  r0.x = max(0, r0.x);
  r1.xyzw = cb0[9].xyzw * v5.yyyy;
  r1.xyzw = cb0[8].xyzw * v5.xxxx + r1.xyzw;
  r1.xyzw = cb0[10].xyzw * v5.zzzz + r1.xyzw;
  r1.xyzw = cb0[11].xyzw + r1.xyzw;
  r0.zw = r1.xy / r1.ww;
  r0.zw = float2(0.5,0.5) + r0.zw;
  r2.xyzw = t2.Sample(s0_s, r0.zw).xyzw;
  r0.z = cmp(0 < r1.z);
  r0.w = dot(r1.xyz, r1.xyz);
  r1.xyzw = t3.Sample(s1_s, r0.ww).xyzw;
  r0.z = r0.z ? 1.000000 : 0;
  r0.z = r0.z * r2.w;
  r0.z = r0.z * r1.x;
  r1.xyz = cb0[6].xyz * r0.zzz;
  r0.xzw = r1.xyz * r0.xxx;
  r1.x = r0.y * r0.y;
  r1.x = r1.x * r1.x;
  r0.y = r1.x * r0.y;
  r1.xyz = float3(1,1,1) + -cb0[2].xyz;
  r1.xyz = r1.xyz * r0.yyy + cb0[2].xyz;
  o0.xyz = r1.xyz * r0.xzw;
  o0.w = 1;
  return;
}
