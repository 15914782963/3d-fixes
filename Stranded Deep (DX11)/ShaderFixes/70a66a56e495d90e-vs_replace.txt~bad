// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 70a66a56e495d90e-vs_replace.txt
// 3DMigoto: 70a66a56e495d90e |    Unity headers extracted from Clouds.shader
//    Shader "Beam Team/Atmosphere/Clouds" {
//      Properties {
//       _CloudTex ("Volumetric Clouds Texture", 2D) = "white" { }
//      [HideInInspector]  _CloudColor ("Cloud Color", Color) = (1,1,1,1)
//       _AltoCumulusIntensity ("Alto-Cumulus: Intensity", Range(1,10)) = 1
//       _AltoCumulusScatteringIntensity ("Alto-Cumulus: Scattering Intensity", Range(1,20)) = 10
//       _AltoCumulusCloudLayer ("Alto-Cumulus: Cloud Layer", 2D) = "white" { }
//       _AltoCumulusCloudNormals ("Alto-Cumulus: Cloud Normals", 2D) = "bump" { }
//       _AltoCumulusCloudDensity ("Alto-Cumulus: Density", Float) = 1
//       _AltoCumulusCloudShading ("Alto-Cumulus: Shading Contribution", Float) = 1
//       _AltoCumulusCloudSpeed1 ("Alto-Cumulus: Plane 1 Speed", Float) = 1
//       _AltoCumulusCloudSpeed2 ("Alto-Cumulus: Plane 2 Speed", Float) = 1.5
//       _AltoCumulusCloudScale1 ("Alto-Cumulus: Plane 1 Scale", Float) = 12
//       _AltoCumulusCloudScale2 ("Alto-Cumulus: Plane 2 Scale", Float) = 13
//       _CirrusCloudLayer ("Cirrus Cloud Layer", 2D) = "white" { }
//       _CirrusCloudDensity ("Cirrus Cloud Density", Float) = 1
//       _CirrusCloudShading ("Cirrus Cloud Shading", Float) = 1
//       _CirrusCloudSpeed1 ("Cirrus Cloud Plane 1 Speed", Float) = 1
//       _CirrusCloudSpeed2 ("Cirrus Cloud Plane 2 Speed", Float) = 1.5
//       _CirrusCloudScale1 ("Cirrus Cloud Plane 1 Scale", Float) = 12
//       _CirrusCloudScale2 ("Cirrus Cloud Plane 2 Scale", Float) = 13
//       _WindDirection ("Wind Direction", Vector) = (2,1,2,1)
//      }
//      Fallback Off
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent-150" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 2/2 {
//          Tags { "QUEUE"="Transparent-150" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Front
//          Blend SrcAlpha OneMinusSrcAlpha
//          GpuProgramID 107803
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 10
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Clouds.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 55 0 0
//   Keywords { "VOLUMETRIC_CLOUDS_OFF" }
//   undeciphered2: 1 0 3 0 0
//   undeciphered3: 131 3 0 0 1 2 7 8
//   ConstBuffer "$Globals" 256
//   Float 112 [_AltoCumulusCloudSpeed1]
//   Float 116 [_AltoCumulusCloudSpeed2]
//   Float 120 [_AltoCumulusCloudScale1]
//   Float 124 [_AltoCumulusCloudScale2]
//   Vector 128 [_CloudColor]
//   Vector 176 [_SunDirection] 3
//   Vector 192 [_MoonDirection] 3
//   Vector 208 [_WindDirection]
//   Float 224 [_RandomSeed]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityPerDraw" 352
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 256 [_World2Object]
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:01:39 2016
cbuffer cb2 : register(b2)
{
  float4 cb2[19];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[15];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float4 v2 : TANGENT0,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR0,
  out float2 o2 : TEXCOORD0,
  out float2 p2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.xyzw = cb2[1].xyzw * v0.yyyy;
  r0.xyzw = cb2[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb2[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = cb2[3].xyzw * v0.wwww + r0.xyzw;
  o0.xyzw = r0.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 70a66a56e495d90e-vs_replace.txt
if (r0.w != 1.0) { r0.x += separation * (r0.w - convergence); }

  r1.x = dot(v0.xyz, v0.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = v0.xyz * r1.xxx;
  r1.w = rsqrt(r1.y);
  o1.w = 1 / r1.w;
  o1.xyz = cb0[8].xyz;
  r1.y = max(0.0500000007, r1.y);
  r1.xy = r1.zx / r1.yy;
  r1.zw = float2(1,0.800000012) * cb0[13].zw;
  r2.x = dot(r1.zw, r1.zw);
  r2.x = rsqrt(r2.x);
  r1.zw = r2.xx * r1.zw;
  r2.xy = cb1[0].xx * cb0[7].xy + cb0[14].xx;
  r1.zw = r2.yy * r1.zw + r1.xy;
  p2.xy = r1.zw / cb0[7].ww;
  r1.z = dot(cb0[13].xy, cb0[13].xy);
  r1.z = rsqrt(r1.z);
  r1.zw = cb0[13].xy * r1.zz;
  r1.xy = r2.xx * r1.zw + r1.xy;
  o2.xy = r1.xy / cb0[7].zz;
  r1.x = dot(v2.xyz, v2.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = v2.yzx * r1.xxx;
  r1.w = dot(v1.xyz, v1.xyz);
  r2.x = rsqrt(r1.w);
  o4.z = r1.w;
  r2.xyz = v1.zxy * r2.xxx;
  r3.xyz = r2.xyz * r1.xyz;
  r1.xyz = r2.zxy * r1.yzx + -r3.xyz;
  r1.xyz = v2.www * r1.xyz;
  r2.xyz = cb2[17].xyz * cb0[11].yyy;
  r2.xyz = cb2[16].xyz * cb0[11].xxx + r2.xyz;
  r2.xyz = cb2[18].xyz * cb0[11].zzz + r2.xyz;
  r3.y = dot(r1.xyz, r2.xyz);
  r3.x = dot(v2.xyz, r2.xyz);
  r3.z = dot(v1.xyz, r2.xyz);
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  o3.xyz = r3.xyz * r1.www;
  o4.y = dot(r1.xyz, v1.xyz);
  o4.x = dot(v2.xyz, v1.xyz);
  r2.xyz = cb2[17].xyz * cb0[12].yyy;
  r2.xyz = cb2[16].xyz * cb0[12].xxx + r2.xyz;
  r2.xyz = cb2[18].xyz * cb0[12].zzz + r2.xyz;
  r1.y = dot(r1.xyz, r2.xyz);
  r1.x = dot(v2.xyz, r2.xyz);
  r1.z = dot(v1.xyz, r2.xyz);
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  o5.xyz = r1.xyz * r1.www;
  r0.y = cb1[5].x * r0.y;
  r1.xzw = float3(0.5,0.5,0.5) * r0.xwy;
  o6.zw = r0.zw;
  o6.xy = r1.xw + r1.zz;
  return;
}

/****************************** COMPILE WARNINGS ******************************
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\70a66a56e495d90e-vs_replace.txt(107,14-15): warning X3578: Output value 'o3' is not completely initialized
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\70a66a56e495d90e-vs_replace.txt(108,14-15): warning X3578: Output value 'o4' is not completely initialized
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\70a66a56e495d90e-vs_replace.txt(109,14-15): warning X3578: Output value 'o5' is not completely initialized

****************************** COMPILE WARNINGS ******************************/
