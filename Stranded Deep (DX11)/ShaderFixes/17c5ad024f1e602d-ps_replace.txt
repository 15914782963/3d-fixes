// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 17c5ad024f1e602d-ps_replace.txt
// 3DMigoto: 17c5ad024f1e602d |    Unity headers extracted from MapEditorGizmos.shader
//    Shader "MapEditor/MapEditorGizmos" {
//      Properties {
//       _Color ("Color", Color) = (1,1,1,1)
//       _MainTex ("Albedo (RGB)", 2D) = "white" { }
//       _Glossiness ("Smoothness", Range(0,1)) = 0.5
//       _Metallic ("Metallic", Range(0,1)) = 0
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "RenderType"="Opaque" }
//        Pass 2/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          ZTest Always
//          ZWrite Off
//          Blend One One
//          GpuProgramID 122428
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 95
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from MapEditorGizmos.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 100 3 0
//   Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
//   undeciphered2: 1 4 4 4 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 304
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Vector 128 [_ShadowOffsets0]
//   Vector 144 [_ShadowOffsets1]
//   Vector 160 [_ShadowOffsets2]
//   Vector 176 [_ShadowOffsets3]
//   Float 256 [_Glossiness]
//   Float 260 [_Metallic]
//   Vector 272 [_Color]
//   Matrix 192 [_LightMatrix0]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   SetTexture 0 [_MainTex] 2D 3
//   SetTexture 1 [_LightTexture0] 2D 1
//   SetTexture 2 [_LightTextureB0] 2D 2
//   SetTexture 3 [_ShadowMapTexture] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:04:42 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerComparisonState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[25];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[18];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 17c5ad024f1e602d-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = cb0[13].xyzw * v3.yyyy;
  r0.xyzw = cb0[12].xyzw * v3.xxxx + r0.xyzw;
  r0.xyzw = cb0[14].xyzw * v3.zzzz + r0.xyzw;
  r0.xyzw = cb0[15].xyzw + r0.xyzw;
  r1.xy = r0.xy / r0.ww;
  r1.xy = float2(0.5,0.5) + r1.xy;
  r1.xyzw = t1.Sample(s1_s, r1.xy).xyzw;
  r0.w = cmp(0 < r0.z);
  r0.x = dot(r0.xyz, r0.xyz);
  r2.xyzw = t2.Sample(s2_s, r0.xx).xyzw;
  r0.x = r0.w ? 1.000000 : 0;
  r0.x = r0.x * r1.w;
  r0.x = r0.x * r2.x;
  r0.y = 1 + -cb3[24].x;
  r1.xyz = v4.xyz / v4.www;
  r2.xyz = cb0[8].xyz + r1.xyz;
  r2.x = t3.SampleCmpLevelZero(s0_s, r2.xy, r2.z).x;
  r3.xyz = cb0[9].xyz + r1.xyz;
  r2.y = t3.SampleCmpLevelZero(s0_s, r3.xy, r3.z).x;
  r3.xyz = cb0[10].xyz + r1.xyz;
  r1.xyz = cb0[11].xyz + r1.xyz;
  r2.w = t3.SampleCmpLevelZero(s0_s, r1.xy, r1.z).x;
  r2.z = t3.SampleCmpLevelZero(s0_s, r3.xy, r3.z).x;
  r1.xyzw = r2.xyzw * r0.yyyy + cb3[24].xxxx;
  r0.y = dot(r1.xyzw, float4(0.25,0.25,0.25,0.25));
  r0.x = r0.x * r0.y;
  r0.xyz = cb0[6].xyz * r0.xxx;
  r0.w = dot(v2.xyz, v2.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v2.xyz * r0.www;
  r2.xyz = _WorldSpaceCameraPos.xyz + -v3.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = dot(r1.xyz, r2.xyz);
  r1.w = 9.99999975e-006 + -r0.w;
  r0.w = cmp(r0.w < 0);
  r3.xyz = r2.xyz * r1.www + r1.xyz;
  r1.xyz = r0.www ? r3.xyz : r1.xyz;
  r3.xyz = cb2[0].xyz + -v3.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r3.xyz * r0.www + r2.xyz;
  r1.w = dot(r1.xyz, r2.xyz);
  r2.xyz = r3.xyz * r0.www;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r3.xyz = r4.xyz * r0.www;
  r0.w = dot(r1.xyz, r3.xyz);
  r1.x = dot(r1.xyz, r2.xyz);
  r1.y = dot(r2.xyz, r3.xyz);
  r1.xyw = max(float3(0,0,0), r1.xyw);
  r0.w = max(0, r0.w);
  r0.w = r0.w * r0.w;
  r1.z = 1 + -cb0[16].x;
  r2.x = r1.z * r1.z;
  r2.y = r2.x * r2.x + -1;
  r0.w = r0.w * r2.y + 1;
  r2.y = 3.14159274 * r0.w;
  r0.w = r2.y * r0.w + 1.00000001e-007;
  r2.y = r2.x * r2.x;
  r0.w = r2.y / r0.w;
  r2.y = -r1.z * r1.z + 1;
  r2.z = r1.w * r2.y + r2.x;
  r2.x = r1.x * r2.y + r2.x;
  r2.x = r2.x * r1.w;
  r1.w = 1 + -r1.w;
  r2.x = r1.x * r2.z + r2.x;
  r2.x = 9.99999975e-006 + r2.x;
  r2.x = 2 / r2.x;
  r0.w = r2.x * r0.w;
  r0.w = 0.785398185 * r0.w;
  r2.x = max(9.99999975e-005, r0.w);
  r2.x = sqrt(r2.x);
  r2.y = cmp(cb0[3].w == 0.000000);
  r0.w = r2.y ? r2.x : r0.w;
  r0.w = r0.w * r1.x;
  r0.w = max(0, r0.w);
  r2.xyz = r0.www * r0.xyz;
  r0.w = 1 + -r1.y;
  r1.y = r1.y * r1.y;
  r1.y = dot(r1.yy, r1.zz);
  r1.y = -0.5 + r1.y;
  r1.z = r0.w * r0.w;
  r1.z = r1.z * r1.z;
  r0.w = r1.z * r0.w;
  r3.xyzw = t0.Sample(s3_s, v1.xy).xyzw;
  r4.xyz = r3.xyz * cb0[17].xyz + -cb0[2].xyz;
  r3.xyz = cb0[17].xyz * r3.xyz;
  r4.xyz = cb0[16].yyy * r4.xyz + cb0[2].xyz;
  r5.xyz = float3(1,1,1) + -r4.xyz;
  r4.xyz = r5.xyz * r0.www + r4.xyz;
  r2.xyz = r4.xyz * r2.xyz;
  r0.w = r1.w * r1.w;
  r0.w = r0.w * r0.w;
  r0.w = r0.w * r1.w;
  r0.w = r1.y * r0.w + 1;
  r1.z = 1 + -r1.x;
  r1.w = r1.z * r1.z;
  r1.w = r1.w * r1.w;
  r1.z = r1.w * r1.z;
  r1.y = r1.y * r1.z + 1;
  r0.w = r1.y * r0.w;
  r0.w = r0.w * r1.x;
  r0.xyz = r0.xyz * r0.www;
  r0.w = -cb0[16].y * cb0[2].w + cb0[2].w;
  r1.xyz = r3.xyz * r0.www;
  o0.xyz = r1.xyz * r0.xyz + r2.xyz;
  o0.w = 1;
  return;
}
