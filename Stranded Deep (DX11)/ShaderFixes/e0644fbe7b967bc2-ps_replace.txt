// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe e0644fbe7b967bc2-ps_replace.txt
// 3DMigoto: e0644fbe7b967bc2 |    Unity headers extracted from Skydome.shader
//    Shader "Beam Team/Atmosphere/Skydome" {
//      Properties {
//       _Color ("Stars Color", Color) = (0,0,0,1)
//       _StarTex ("Stars (RGB)", 2D) = "white" { }
//       _Speed ("Stars Rotation Speed", Float) = 0.1
//      }
//      Fallback Off
//      SubShader 1/1 {
//        Pass 1/1 {
//          Tags { "QUEUE"="Background" "RenderType"="Opaque" }
//          ZWrite Off
//          Cull Front
//          GpuProgramID 380
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 3
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Skydome.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 32 2 0
//   undeciphered2: 1 2 3 2 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 224
//   Vector 144 [_Color]
//   Vector 180 [_SunPosition] 3
//   Vector 192 [_SunColor] 3
//   Float 204 [_StormFade]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   SetTexture 0 [_StarTex] 2D 0
//   SetTexture 1 [_SkyMap] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:07:48 2016
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[13];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe e0644fbe7b967bc2-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = t0.Sample(s0_s, v2.xy).xyzw;
  r0.xyz = r0.xyz * cb0[9].xyz + float3(0,0.00200000009,0.00350000011);
  r0.xyz = float3(1,1,1) + -r0.xyz;
  r1.xz = _WorldSpaceCameraPos.xz + -v1.xz;
  r1.y = -v1.y;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xzw = r1.xyz * r0.www;
  r0.w = -r1.y * r0.w + 1;
  r2.xy = -r1.xw / r0.ww;
  r0.w = dot(cb2[0].xyz, r1.xzw);
  r1.xy = r2.xy * float2(0.453999996,0.453999996) + float2(0.5,0.5);
  r1.xyzw = t1.Sample(s1_s, r1.xy).xyzw;
  r2.xyz = float3(1,1,1) + -r1.xyz;
  r0.xyz = -r2.xyz * r0.xyz + float3(1,1,1);
  r0.xyz = r0.xyz + -r1.xyz;
  r1.w = -10 + cb0[11].z;
  r1.w = saturate(0.100000001 * r1.w);
  r1.w = 1 + -r1.w;
  r0.xyz = r1.www * r0.xyz + r1.xyz;
  r1.x = 100 + -cb0[11].z;
  r1.x = saturate(0.0090909088 * r1.x);
  r1.x = 1 + -r1.x;
  r1.xyz = r1.xxx * float3(0.0910000056,0.0890000015,0.0879999995) + float3(0.00899999961,0.0109999999,0.0120000001);
  r1.xyz = r1.xyz + -r0.xyz;
  r0.xyz = cb0[12].www * r1.xyz + r0.xyz;
  r1.x = -r0.w * -1.98000002 + 1.98010004;
  r0.w = r0.w * r0.w + 1;
  r0.w = 0.0100164423 * r0.w;
  r1.x = log2(r1.x);
  r1.x = 0.909203291 * r1.x;
  r1.x = exp2(r1.x);
  r1.x = max(9.99999975e-005, r1.x);
  r0.w = r0.w / r1.x;
  o0.xyz = r0.www * cb0[12].xyz + r0.xyz;
  o0.w = 1;
  return;
}
