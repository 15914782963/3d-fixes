// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 66fb3b5bf9b36941-ps_replace.txt
// 3DMigoto: 66fb3b5bf9b36941 |    Unity headers extracted from BeamTeamAtmosphericSphericalFogVolume.shader
//    Shader "Beam Team/Atmosphere/Atmospheric Spherical Fog Volume" {
//      Fallback Off
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent-100" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent-100" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Transparent" }
//          ZTest Always
//          ZWrite Off
//          Cull Front
//          Blend SrcAlpha OneMinusSrcAlpha
//          GpuProgramID 60193
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 95
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from BeamTeamAtmosphericSphericalFogVolume.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 35 2 0
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_ON" "STORM_ON" }
//   undeciphered2: 1 2 2 2 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 224
//   Float 176 [_Height]
//   Float 180 [_StartDistance]
//   Vector 192 [_SunPosition] 3
//   Vector 208 [_WeatherSkyColor] 3
//   Float 220 [_StormFade]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_BeamTeamDepthTexture] 2D 0
//   SetTexture 1 [_SkyMap] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 10:59:24 2016
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[14];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 66fb3b5bf9b36941-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xz = _WorldSpaceCameraPos.xz + -v2.xz;
  r0.y = -v2.y;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = r0.yyy * float3(0,2,0) + -r0.xyz;
  r0.y = 1 + r0.y;
  r0.xy = r0.xz / r0.yy;
  r0.xy = r0.xy * float2(0.453999996,0.453999996) + float2(0.5,0.5);
  r0.xyzw = t1.Sample(s1_s, r0.xy).xyzw;
  r1.xyz = cb0[13].xyz + -r0.xyz;
  r1.xyz = cb0[13].www * r1.xyz + r0.xyz;
  r0.xyz = float3(1,1,1) + -r0.xyz;
  r2.xyz = float3(-0,-0,-0.00100000005) + cb0[13].xyz;
  r2.xyz = cb0[13].www * r2.xyz + float3(0,0,0.00100000005);
  r2.xyz = r2.xyz + -r1.xyz;
  r0.w = 12 + -cb0[12].y;
  r0.w = saturate(0.0350000001 * r0.w);
  r1.xyz = r0.www * r2.xyz + r1.xyz;
  r2.xyz = -r0.www * float3(0,0,0.00100000005) + float3(1,1,1);
  r0.xyz = -r0.xyz * r2.xyz + float3(1,1,1);
  r1.xyz = r1.xyz + -r0.xyz;
  o0.xyz = cb0[13].www * r1.xyz + r0.xyz;
  r0.xy = v1.xy / v1.ww;
  r0.xyzw = t0.Sample(s0_s, r0.xy).xyzw;
  r0.x = cb1[7].z * r0.x + cb1[7].w;
  r0.x = 1 / r0.x;
  r0.x = cb0[11].y * r0.x;
  r0.x = -1.44269502 * r0.x;
  r0.x = exp2(r0.x);
  r0.x = 1 + -r0.x;
  r0.y = cb0[11].x * v2.y;
  r0.y = max(0, r0.y);
  r0.xy = r0.xy * r0.xy;
  r0.y = -1.44269502 * r0.y;
  r0.y = exp2(r0.y);
  r0.x = r0.x * r0.y;
  o0.w = min(1, r0.x);
  return;
}
