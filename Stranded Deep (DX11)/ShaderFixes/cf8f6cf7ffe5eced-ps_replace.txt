// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe cf8f6cf7ffe5eced-ps_replace.txt
// 3DMigoto: cf8f6cf7ffe5eced |    Unity headers extracted from OceanTopSide_Transparent.shader
//    Shader "Ceto/OceanTopSide_Transparent" {
//      Fallback Off
//      SubShader 1/1 {
//        LOD 200
//        Tags { "QUEUE"="Transparent-150" "IGNOREPROJECTOR"="true" "RenderType"="Ceto_ProjectedGrid_Top" "OceanMask"="Ceto_ProjectedGrid_Top" }
//        GrabPass {
//          "Ceto_RefractionGrab"
//         }
//        Pass 1/2 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Transparent-150" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Ceto_ProjectedGrid_Top" "OceanMask"="Ceto_ProjectedGrid_Top" }
//          Blend SrcAlpha OneMinusSrcAlpha
//          GpuProgramID 16470
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 189
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from OceanTopSide_Transparent.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 253 14 0
//   Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "CETO_USE_OCEAN_DEPTHS_BUFFER" "CETO_UNDERWATER_ON" "CETO_USE_4_SPECTRUM_GRIDS" "CETO_REFLECTION_ON" }
//   undeciphered2: 1 11 3 11 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 832
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Float 128 [Ceto_SpecularRoughness]
//   Float 132 [Ceto_SpecularIntensity]
//   Float 136 [Ceto_MinFresnel]
//   Vector 144 [Ceto_ReflectionTint] 3
//   Float 156 [Ceto_ReflectionDistortion]
//   Vector 176 [Ceto_PosOffset] 3
//   Vector 320 [Ceto_GridSizes]
//   Vector 352 [Ceto_GridScale] 2
//   Float 384 [Ceto_GridEdgeBorder]
//   Float 388 [Ceto_OceanLevel]
//   Vector 464 [Ceto_SunDir] 3
//   Float 508 [Ceto_MaxDepthDist]
//   Float 512 [Ceto_RefractionIntensity]
//   Float 516 [Ceto_RefractionDistortion]
//   Vector 528 [Ceto_FoamTint] 3
//   Float 540 [Ceto_DepthBlend]
//   Float 544 [Ceto_EdgeFade]
//   Vector 560 [Ceto_SSSCof]
//   Vector 592 [Ceto_AbsCof]
//   Vector 608 [Ceto_AbsTint] 3
//   Float 652 [Ceto_AboveInscatterScale]
//   Vector 656 [Ceto_AboveInscatterMode] 3
//   Vector 672 [Ceto_AboveInscatterColor]
//   Vector 720 [Ceto_FoamTextureScale0]
//   Vector 736 [Ceto_FoamTextureScale1]
//   Float 752 [Ceto_TextureWaveFoam]
//   Vector 784 [_Beam_OceanScatterColor]
//   Matrix 192 [Ceto_Interpolation]
//   Matrix 256 [Ceto_ProjectorVP]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 608 [unity_SHAr]
//   Vector 624 [unity_SHAg]
//   Vector 640 [unity_SHAb]
//   SetTexture 0 [Ceto_Overlay_ClipMap] 2D 6
//   SetTexture 1 [Ceto_SlopeMap0] 2D 2
//   SetTexture 2 [Ceto_SlopeMap1] 2D 3
//   SetTexture 3 [Ceto_FoamMap0] 2D 1
//   SetTexture 4 [Ceto_Overlay_NormalMap] 2D 4
//   SetTexture 5 [Ceto_Overlay_FoamMap] 2D 5
//   SetTexture 6 [Ceto_Reflections] 2D 0
//   SetTexture 7 [Ceto_OceanDepth] 2D 7
//   SetTexture 8 [Ceto_RefractionGrab] 2D 8
//   SetTexture 9 [Ceto_FoamTexture0] 2D 9
//   SetTexture 10 [Ceto_FoamTexture1] 2D 10
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:05:27 2016
Texture2D<float4> t10 : register(t10);

Texture2D<float4> t9 : register(t9);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s10_s : register(s10);

SamplerState s9_s : register(s9);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[41];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[50];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float3 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe cf8f6cf7ffe5eced-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyz = cb0[24].yyy * cb0[17].xyw;
  r0.xyz = cb0[16].xyw * v4.xxx + r0.xyz;
  r0.xyz = cb0[18].xyw * v4.zzz + r0.xyz;
  r0.xyz = cb0[19].xyw + r0.xyz;
  r0.xy = r0.xy / r0.zz;
  r1.xyzw = t0.SampleLevel(s6_s, r0.xy, 0).xyzw;
  r1.x = saturate(r1.x);
  r0.z = 0.5 + -r1.x;
  r0.z = cmp(r0.z < 0);
  if (r0.z != 0) discard;
  r0.z = max(0, v4.y);
  r0.z = -1.44269502 * r0.z;
  r0.z = exp2(r0.z);
  r0.z = max(0.200000003, r0.z);
  r1.xyz = -cb0[35].xyz * r0.zzz;
  r1.xyz = cb0[35].www * r1.xyz;
  r1.xyz = float3(1.44269502,1.44269502,1.44269502) * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  r1.xyz = cb0[49].xyz * r1.xyz;
  r2.x = cb0[12].w;
  r3.x = cb0[12].z + -r2.x;
  r2.y = cb0[13].w;
  r3.y = cb0[13].z + -r2.y;
  r2.z = cb0[14].w;
  r3.z = cb0[14].z + -r2.z;
  r2.w = cb0[15].w;
  r3.w = cb0[15].z + -r2.w;
  r4.xyzw = r3.xyzw * float4(0.5,0.5,0.5,0.5) + r2.xyzw;
  r5.x = cb0[12].x;
  r6.x = cb0[12].y + -r5.x;
  r5.y = cb0[13].x;
  r6.y = cb0[13].y + -r5.y;
  r5.z = cb0[14].x;
  r6.z = cb0[14].y + -r5.z;
  r5.w = cb0[15].x;
  r6.w = cb0[15].y + -r5.w;
  r7.xyzw = r6.xyzw * float4(0.5,0.5,0.5,0.5) + r5.xyzw;
  r4.xyzw = -r7.xyzw + r4.xyzw;
  r4.xyzw = r4.xyzw * float4(0.5,0.5,0.5,0.5) + r7.xyzw;
  r4.xyz = r4.xyz / r4.www;
  r0.zw = saturate(v7.xy);
  r2.xyzw = r0.zzzz * r3.xyzw + r2.xyzw;
  r3.xyzw = r0.zzzz * r6.xyzw + r5.xyzw;
  r2.xyzw = -r3.xyzw + r2.xyzw;
  r2.xyzw = r0.wwww * r2.xyzw + r3.xyzw;
  r2.xyz = r2.xyz / r2.www;
  r3.xyz = r2.xyz + -r4.xyz;
  r0.z = dot(r3.xyz, r3.xyz);
  r0.z = rsqrt(r0.z);
  r3.xyzw = r3.xzxz * r0.zzzz;
  r3.xyzw = max(float4(-1,-1,-1,-1), r3.xyzw);
  r3.xyzw = min(float4(1,1,1,1), r3.xyzw);
  r0.z = saturate(v7.z + v7.w);
  r3.xyzw = r3.xyzw * r0.zzzz;
  r2.xyzw = r3.xyzw * cb0[24].xxxx + r2.xzxz;
  r2.xyzw = cb0[11].xzxz + r2.xyzw;
  r3.xyzw = cb0[22].xxxx * cb0[20].xyzw;
  r3.xyzw = float4(1,1,1,1) / r3.xyzw;
  r4.xyzw = r3.xxyy * r2.zwzw;
  r2.xyzw = r3.zzww * r2.xyzw;
  r3.xyzw = t1.Sample(s2_s, r4.xy).xyzw;
  r5.xyzw = t1.Sample(s2_s, r4.zw).xyzw;
  r0.zw = r5.zw + r3.xy;
  r3.xyzw = t4.SampleLevel(s4_s, r0.xy, 0).wxyz;
  r5.xyzw = t5.SampleLevel(s5_s, r0.xy, 0).wxyz;
  r3.x = saturate(r3.x);
  r0.x = 1 + -r3.x;
  r6.xz = -r0.zw * r0.xx;
  r6.y = 1;
  r6.xyz = r6.xyz + r3.yzw;
  r0.y = dot(r6.xyz, r6.xyz);
  r0.y = rsqrt(r0.y);
  r6.xyz = r6.xyz * r0.yyy;
  r7.xyz = _WorldSpaceCameraPos.xyz + -v4.xyz;
  r0.y = dot(r7.xyz, r7.xyz);
  r1.w = rsqrt(r0.y);
  r0.y = sqrt(r0.y);
  r0.y = 0.00999999978 * r0.y;
  r0.y = max(9.99999975e-005, r0.y);
  r0.y = min(1, r0.y);
  r0.y = 1 + -r0.y;
  r7.xyz = r7.xyz * r1.www;
  r1.w = dot(r7.xyz, r6.xyz);
  r3.x = r1.w + r1.w;
  r1.w = cmp(r1.w < 0);
  r8.xyz = r7.xyz * -r3.xxx + r6.xyz;
  r6.xyz = r1.www ? r8.xyz : r6.xyz;
  r8.xyzw = t2.Sample(s3_s, r2.xy).xyzw;
  r0.zw = r8.xy + r0.zw;
  r8.xz = -r0.zw * r0.xx;
  r8.y = 1;
  r8.xyz = r8.xyz + r3.yzw;
  r1.w = dot(r8.xyz, r8.xyz);
  r1.w = rsqrt(r1.w);
  r8.xyz = r8.xyz * r1.www;
  r1.w = dot(r7.xyz, r8.xyz);
  r3.x = r1.w + r1.w;
  r1.w = cmp(r1.w < 0);
  r9.xyz = r7.xyz * -r3.xxx + r8.xyz;
  r8.xyz = r1.www ? r9.xyz : r8.xyz;
  r6.xyz = r8.xyz + r6.xyz;
  r1.w = dot(r6.xyz, r6.xyz);
  r1.w = rsqrt(r1.w);
  r1.w = r6.x * r1.w;
  r3.x = max(0, r7.y);
  r3.x = 1 + -r3.x;
  r3.x = r3.x * r3.x;
  r1.w = r3.x * abs(r1.w);
  r6.xyzw = float4(10,-1,1,-1) * r7.yxyz;
  r3.x = dot(r6.yzw, cb0[29].xyz);
  r6.x = saturate(r6.x);
  r3.x = max(0, r3.x);
  r3.x = r3.x * r3.x;
  r3.x = r3.x * r3.x;
  r3.x = r3.x * r1.w;
  r1.w = r1.w * 0.200000003 + r3.x;
  r6.yz = cb0[32].yy * r8.xz;
  r6.yz = r6.yz * r0.yy;
  r8.yw = float2(1,0) * r6.yz;
  r9.xy = v5.xy / v5.ww;
  r6.yz = saturate(r6.yz * float2(1,0) + r9.xy);
  r10.xyzw = t7.Sample(s7_s, r6.yz).xyzw;
  r0.y = cmp(v4.w >= r10.y);
  r6.yz = r0.yy ? float2(0,0) : r8.yw;
  r8.yw = saturate(r9.xy + r6.yz);
  r10.xyzw = t7.Sample(s7_s, r8.yw).xyzw;
  r0.y = cb1[5].z * r10.y;
  r0.y = r0.y / cb0[31].w;
  r3.x = cb1[5].z * v4.w;
  r3.x = r3.x / cb0[31].w;
  r0.y = -r3.x + r0.y;
  r0.y = max(0, r0.y);
  r3.x = -cb0[24].y + v4.y;
  r5.w = r10.x * cb0[31].w + r3.x;
  r5.w = max(0, r5.w);
  r5.w = r5.w / cb0[31].w;
  r0.y = -r5.w + r0.y;
  r0.y = cb0[33].w * r0.y + r5.w;
  r5.w = -r0.y * r0.y;
  r5.w = cb0[40].w * r5.w;
  r5.w = 1.44269502 * r5.w;
  r5.w = exp2(r5.w);
  r5.w = 1 + -r5.w;
  r10.z = max(0, r5.w);
  r5.w = cb0[40].w * -r0.y;
  r5.w = 1.44269502 * r5.w;
  r5.w = exp2(r5.w);
  r5.w = 1 + -r5.w;
  r10.y = max(0, r5.w);
  r10.x = saturate(cb0[40].w * r0.y);
  r11.xyz = -cb0[37].xyz * r0.yyy;
  r11.xyz = cb0[31].www * r11.xyz;
  r11.xyz = cb0[37].www * r11.xyz;
  r11.xyz = float3(1.44269502,1.44269502,1.44269502) * r11.xyz;
  r11.xyz = exp2(r11.xyz);
  r0.y = dot(r10.xyz, cb0[41].xyz);
  r0.y = cb0[42].w * r0.y;
  r8.yw = v6.xy / v6.ww;
  r6.yz = saturate(r8.yw + r6.yz);
  r10.xyzw = t8.Sample(s8_s, r6.yz).xyzw;
  r6.yzw = cb0[32].xxx * r10.xyz;
  r6.yzw = cb0[38].xyz * r6.yzw;
  r10.xyz = r6.yzw * r11.xyz;
  r6.yzw = -r6.yzw * r11.xyz + cb0[42].xyz;
  r6.yzw = r0.yyy * r6.yzw + r10.xyz;
  r1.xyz = r1.xyz * r1.www + r6.yzw;
  r10.xyzw = t2.Sample(s3_s, r2.zw).xyzw;
  r0.yz = r10.zw + r0.zw;
  r0.xz = -r0.yz * r0.xx;
  r0.y = 1;
  r0.xyz = r0.xyz + r3.yzw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(r7.xyz, r0.xyz);
  r1.w = r0.w + r0.w;
  r0.w = cmp(r0.w < 0);
  r3.yzw = r7.xyz * -r1.www + r0.xyz;
  r0.xyz = r0.www ? r3.yzw : r0.xyz;
  r1.w = dot(r7.xyz, r0.xyz);
  r3.y = abs(r1.w) * abs(r1.w) + 0.768900156;
  r3.z = sqrt(r3.y);
  r3.y = cmp(0 < r3.y);
  r3.w = r3.z + abs(r1.w);
  r3.z = r3.z + -abs(r1.w);
  r5.w = abs(r1.w) * r3.w + -1;
  r1.w = abs(r1.w) * r3.z + 1;
  r3.z = r3.z / r3.w;
  r3.z = r3.z * r3.z;
  r3.z = 0.5 * r3.z;
  r1.w = r5.w / r1.w;
  r1.w = r1.w * r1.w + 1;
  r1.w = r3.z * r1.w;
  r1.w = r3.y ? r1.w : 1;
  r3.y = 1 + -cb0[8].z;
  r1.w = saturate(r3.y * r1.w + cb0[8].z);
  r3.y = 1 + -r1.w;
  r1.xyz = r3.yyy * r1.xyz;
  r3.zw = r8.xz * cb0[9].ww + r9.xy;
  r7.xyzw = t7.Sample(s7_s, r9.xy).xyzw;
  r3.x = r7.x * cb0[31].w + r3.x;
  r3.x = max(0, r3.x);
  r3.x = cb0[34].x * -r3.x;
  r3.x = 1.44269502 * r3.x;
  r3.x = exp2(r3.x);
  r3.x = r3.x + r3.x;
  r3.x = min(1, r3.x);
  o0.w = r6.x * -r3.x + 1;
  r6.xyzw = t6.SampleLevel(s0_s, r3.zw, 0).xyzw;
  r3.xzw = cb0[9].xyz * r6.xyz;
  r1.xyz = r3.xzw * r1.www + r1.xyz;
  r6.xyzw = t3.Sample(s1_s, r4.xy).xyzw;
  r4.xyzw = t3.Sample(s1_s, r4.zw).xyzw;
  r3.x = r6.x + r4.y;
  r4.xyzw = t3.Sample(s1_s, r2.xy).xyzw;
  r2.xyzw = t3.Sample(s1_s, r2.zw).xyzw;
  r2.x = r4.z + r3.x;
  r2.x = r2.x + r2.w;
  r2.x = saturate(-r2.x);
  r5.x = saturate(r5.x);
  r2.y = 1 + -r5.x;
  r2.x = r2.x * r2.y;
  r2.yz = cb0[46].zz + v4.xz;
  r2.yz = cb0[46].xy * r2.yz;
  r4.xyzw = t10.Sample(s10_s, r2.yz).xyzw;
  r2.y = 0.5 * r4.w;
  r2.zw = cb0[45].zz + v4.xz;
  r2.zw = cb0[45].xy * r2.zw;
  r4.xyzw = t9.Sample(s9_s, r2.zw).xyzw;
  r2.y = r4.w * 0.5 + r2.y;
  r2.z = r2.x * r2.y + -r2.x;
  r2.x = cb0[47].x * r2.z + r2.x;
  r2.x = r5.y * r2.y + r2.x;
  r2.x = r2.x + r5.z;
  r2.y = 1 + -r2.x;
  r2.yzw = -cb0[37].xyz * r2.yyy;
  r2.yzw = float3(1.44269502,1.44269502,1.44269502) * r2.yzw;
  r2.yzw = exp2(r2.yzw);
  r3.xzw = cb0[33].xyz * r2.xxx;
  r2.yzw = r3.xzw * r2.yzw + -r1.xyz;
  r1.xyz = r2.xxx * r2.yzw + r1.xyz;
  r2.xyz = cb0[6].xyz * r1.xyz;
  r0.w = -r0.z;
  r4.x = dot(v1.xzy, r0.xyw);
  r4.y = dot(v2.xzy, r0.xyw);
  r4.z = dot(v3.xzy, r0.xyw);
  r2.w = dot(cb2[0].xyz, r4.xyz);
  r2.w = max(0.00999999978, r2.w);
  r5.x = v1.w;
  r5.y = v2.w;
  r5.z = v3.w;
  r3.xzw = _WorldSpaceCameraPos.xyz + -r5.xyz;
  r4.w = dot(r3.xzw, r3.xzw);
  r4.w = rsqrt(r4.w);
  r5.xyz = r4.www * r3.xzw;
  r3.xzw = r3.xzw * r4.www + cb2[0].xyz;
  r4.w = dot(r5.xyz, r4.xyz);
  r4.w = max(0.00999999978, r4.w);
  r2.w = r2.w / r4.w;
  r2.w = sqrt(r2.w);
  r4.w = dot(r3.xzw, r3.xzw);
  r4.w = rsqrt(r4.w);
  r3.xzw = r4.www * r3.xzw;
  r3.x = dot(r3.xzw, r4.xyz);
  r3.z = 1 + r3.x;
  r3.x = -r3.x * r3.x + 1;
  r3.x = r3.x / cb0[8].x;
  r3.x = -2 * r3.x;
  r3.x = r3.x / r3.z;
  r3.x = 1.44269502 * r3.x;
  r3.x = exp2(r3.x);
  r3.z = 12.566371 * cb0[8].x;
  r3.x = r3.x / r3.z;
  r3.x = cb0[8].y * r3.x;
  r2.w = r3.x * r2.w;
  r2.w = max(0, r2.w);
  r3.xzw = cb0[6].xyz * r2.www;
  r2.w = cmp(cb2[0].y < 0);
  r3.xzw = r2.www ? float3(0,0,0) : r3.xzw;
  r2.w = dot(r0.xyz, cb2[0].xyz);
  r2.w = max(0, r2.w);
  r2.xyz = r2.xyz * r2.www + r3.xzw;
  r3.xzw = r3.xzw + r1.xyz;
  r2.xyz = r2.xyz * r3.yyy;
  r2.xyz = r3.xzw * r1.www + r2.xyz;
  r0.w = 1;
  r4.x = dot(cb2[38].xyzw, r0.xyzw);
  r4.y = dot(cb2[39].xyzw, r0.xyzw);
  r4.z = dot(cb2[40].xyzw, r0.xyzw);
  r0.xyz = v8.xyz + r4.xyz;
  r0.xyz = max(float3(0,0,0), r0.xyz);
  r3.xzw = log2(r0.xyz);
  r3.xzw = float3(0.416666657,0.416666657,0.416666657) * r3.xzw;
  r3.xzw = exp2(r3.xzw);
  r3.xzw = r3.xzw * float3(1.05499995,1.05499995,1.05499995) + float3(-0.0549999997,-0.0549999997,-0.0549999997);
  r3.xzw = max(float3(0,0,0), r3.xzw);
  r0.w = cmp(cb0[3].w == 0.000000);
  r0.xyz = r0.www ? r3.xzw : r0.xyz;
  r0.xyz = r1.xyz * r0.xyz;
  o0.xyz = r0.xyz * r3.yyy + r2.xyz;
  return;
}
