// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe e495f717fb910248-ps_replace.txt
// 3DMigoto: e495f717fb910248 |    Unity headers extracted from OceanUnderSide_Transparent.shader
//    Shader "Ceto/OceanUnderSide_Transparent" {
//      Fallback Off
//      SubShader 1/1 {
//        LOD 200
//        Tags { "QUEUE"="Transparent-151" "IGNOREPROJECTOR"="true" "RenderType"="Ceto_ProjectedGrid_Under" "OceanMask"="Ceto_ProjectedGrid_Under" }
//        GrabPass {
//          "Ceto_RefractionGrab"
//         }
//        Pass 1/2 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Transparent-151" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Ceto_ProjectedGrid_Under" "OceanMask"="Ceto_ProjectedGrid_Under" }
//          Cull Front
//          GpuProgramID 28275
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 177
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from OceanUnderSide_Transparent.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 265 8 0
//   Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "CETO_UNDERWATER_ON" "CETO_REFLECTION_ON" }
//   undeciphered2: 1 9 3 9 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 832
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Float 128 [Ceto_SpecularRoughness]
//   Float 132 [Ceto_SpecularIntensity]
//   Vector 176 [Ceto_PosOffset] 3
//   Vector 320 [Ceto_GridSizes]
//   Vector 352 [Ceto_GridScale] 2
//   Float 384 [Ceto_GridEdgeBorder]
//   Float 388 [Ceto_OceanLevel]
//   Vector 464 [Ceto_SunDir] 3
//   Float 512 [Ceto_RefractionIntensity]
//   Float 516 [Ceto_RefractionDistortion]
//   Vector 528 [Ceto_FoamTint] 3
//   Vector 592 [Ceto_AbsCof]
//   Vector 720 [Ceto_FoamTextureScale0]
//   Vector 736 [Ceto_FoamTextureScale1]
//   Float 752 [Ceto_TextureWaveFoam]
//   Float 756 [_SunFade]
//   Vector 800 [_Beam_UnderwaterColor]
//   Vector 816 [_Beam_UnderwaterInscatterColor]
//   Matrix 192 [Ceto_Interpolation]
//   Matrix 256 [Ceto_ProjectorVP]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 608 [unity_SHAr]
//   Vector 624 [unity_SHAg]
//   Vector 640 [unity_SHAb]
//   SetTexture 0 [Ceto_Overlay_ClipMap] 2D 4
//   SetTexture 1 [Ceto_SlopeMap0] 2D 1
//   SetTexture 2 [Ceto_FoamMap0] 2D 0
//   SetTexture 3 [Ceto_Overlay_NormalMap] 2D 2
//   SetTexture 4 [Ceto_Overlay_FoamMap] 2D 3
//   SetTexture 5 [Ceto_DepthBuffer] 2D 5
//   SetTexture 6 [Ceto_RefractionGrab] 2D 6
//   SetTexture 7 [Ceto_FoamTexture0] 2D 7
//   SetTexture 8 [Ceto_FoamTexture1] 2D 8
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:05:42 2016
Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[41];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[52];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float3 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe e495f717fb910248-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyz = cb0[24].yyy * cb0[17].xyw;
  r0.xyz = cb0[16].xyw * v4.xxx + r0.xyz;
  r0.xyz = cb0[18].xyw * v4.zzz + r0.xyz;
  r0.xyz = cb0[19].xyw + r0.xyz;
  r0.xy = r0.xy / r0.zz;
  r1.xyzw = t0.SampleLevel(s4_s, r0.xy, 0).xyzw;
  r1.x = saturate(r1.x);
  r0.z = 0.5 + -r1.x;
  r0.z = cmp(r0.z < 0);
  if (r0.z != 0) discard;
  r1.x = cb0[12].w;
  r2.x = cb0[12].z + -r1.x;
  r1.y = cb0[13].w;
  r2.y = cb0[13].z + -r1.y;
  r1.z = cb0[14].w;
  r2.z = cb0[14].z + -r1.z;
  r1.w = cb0[15].w;
  r2.w = cb0[15].z + -r1.w;
  r3.xyzw = r2.xyzw * float4(0.5,0.5,0.5,0.5) + r1.xyzw;
  r4.x = cb0[12].x;
  r5.x = cb0[12].y + -r4.x;
  r4.y = cb0[13].x;
  r5.y = cb0[13].y + -r4.y;
  r4.z = cb0[14].x;
  r5.z = cb0[14].y + -r4.z;
  r4.w = cb0[15].x;
  r5.w = cb0[15].y + -r4.w;
  r6.xyzw = r5.xyzw * float4(0.5,0.5,0.5,0.5) + r4.xyzw;
  r3.xyzw = -r6.xyzw + r3.xyzw;
  r3.xyzw = r3.xyzw * float4(0.5,0.5,0.5,0.5) + r6.xyzw;
  r3.xyz = r3.xyz / r3.www;
  r0.zw = saturate(v7.xy);
  r1.xyzw = r0.zzzz * r2.xyzw + r1.xyzw;
  r2.xyzw = r0.zzzz * r5.xyzw + r4.xyzw;
  r1.xyzw = -r2.xyzw + r1.xyzw;
  r1.xyzw = r0.wwww * r1.xyzw + r2.xyzw;
  r1.xyz = r1.xyz / r1.www;
  r2.xyz = r1.xyz + -r3.xyz;
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyzw = r2.xzxz * r0.zzzz;
  r2.xyzw = max(float4(-1,-1,-1,-1), r2.xyzw);
  r2.xyzw = min(float4(1,1,1,1), r2.xyzw);
  r0.z = saturate(v7.z + v7.w);
  r2.xyzw = r2.xyzw * r0.zzzz;
  r1.xyzw = r2.xyzw * cb0[24].xxxx + r1.xzxz;
  r1.xyzw = cb0[11].xzxz + r1.xyzw;
  r2.xyzw = cb0[22].xxxx * cb0[20].xxyy;
  r2.xyzw = float4(1,1,1,1) / r2.xyzw;
  r1.xyzw = r2.xyzw * r1.xyzw;
  r2.xyzw = t1.Sample(s1_s, r1.xy).xyzw;
  r3.xyzw = t1.Sample(s1_s, r1.zw).xyzw;
  r0.zw = r3.zw + r2.xy;
  r2.xyzw = t3.SampleLevel(s2_s, r0.xy, 0).wxyz;
  r3.xyzw = t4.SampleLevel(s3_s, r0.xy, 0).wxyz;
  r2.x = saturate(r2.x);
  r0.x = 1 + -r2.x;
  r0.xz = -r0.zw * r0.xx;
  r0.y = 1;
  r0.xyz = r0.xyz + r2.yzw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = -r0.y;
  r2.xyz = _WorldSpaceCameraPos.xyz + -v4.xyz;
  r0.y = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r0.y);
  r0.y = sqrt(r0.y);
  r0.y = 0.00999999978 * r0.y;
  r0.y = max(9.99999975e-005, r0.y);
  r0.y = min(1, r0.y);
  r0.y = 1 + -r0.y;
  r2.xyz = r2.xyz * r2.www;
  r2.w = dot(r2.xzy, r0.xzw);
  r3.w = r2.w + r2.w;
  r2.w = cmp(r2.w < 0);
  r4.xyz = r2.xyz * -r3.www + r0.xwz;
  r4.xyz = r2.www ? r4.xyz : r0.xwz;
  r4.w = -r4.z;
  r5.w = dot(v1.xzy, r4.xyw);
  r5.y = dot(v2.xzy, r4.xyw);
  r5.x = dot(v3.xzy, r4.xyw);
  r0.xzw = float3(1,-1,1) * r5.wyx;
  r6.xz = r5.yx * r0.zx;
  r5.z = -0;
  r6.y = 0;
  r6.xyz = r5.xyz * r5.xwy + -r6.xyz;
  r2.w = dot(cb2[0].xyz, r6.xyz);
  r3.w = dot(cb2[0].yz, r5.xy);
  r5.z = max(abs(r3.w), abs(r2.w));
  r5.z = 1 / r5.z;
  r5.w = min(abs(r3.w), abs(r2.w));
  r5.z = r5.w * r5.z;
  r5.w = r5.z * r5.z;
  r6.w = r5.w * 0.0208350997 + -0.0851330012;
  r6.w = r5.w * r6.w + 0.180141002;
  r6.w = r5.w * r6.w + -0.330299497;
  r5.w = r5.w * r6.w + 0.999866009;
  r6.w = r5.z * r5.w;
  r6.w = r6.w * -2 + 1.57079637;
  r7.x = cmp(abs(r2.w) < abs(r3.w));
  r6.w = r7.x ? r6.w : 0;
  r5.z = r5.z * r5.w + r6.w;
  r5.w = cmp(r2.w < -r2.w);
  r5.w = r5.w ? -3.141593 : 0;
  r5.z = r5.z + r5.w;
  r5.w = min(r3.w, r2.w);
  r2.w = max(r3.w, r2.w);
  r2.w = cmp(r2.w >= -r2.w);
  r3.w = cmp(r5.w < -r5.w);
  r2.w = r2.w ? r3.w : 0;
  r2.w = r2.w ? -r5.z : r5.z;
  r2.w = r2.w * r2.w + 1;
  r2.w = 1 / r2.w;
  r3.w = 1 + -r2.w;
  r3.w = cb0[8].x * r3.w;
  r2.w = cb0[8].x * r2.w + r3.w;
  r2.w = r2.w + r2.w;
  r3.w = dot(cb2[0].xyz, r0.xzw);
  r3.w = max(0.00999999978, r3.w);
  r5.z = -r3.w * r3.w + 1;
  r2.w = r5.z * r2.w;
  r2.w = sqrt(r2.w);
  r2.w = r3.w / r2.w;
  r3.w = -r2.w * r2.w;
  r2.w = 3.54490757 * r2.w;
  r3.w = 1.44269502 * r3.w;
  r3.w = exp2(r3.w);
  r2.w = r3.w / r2.w;
  r2.w = 1 + r2.w;
  r7.x = v1.w;
  r7.y = v2.w;
  r7.z = v3.w;
  r7.xyz = _WorldSpaceCameraPos.xyz + -r7.xyz;
  r3.w = dot(r7.xyz, r7.xyz);
  r3.w = rsqrt(r3.w);
  r7.xyz = r7.xyz * r3.www;
  r5.zw = float2(-1,1) * r7.yz;
  r3.w = dot(r5.zw, r5.xy);
  r7.w = -r7.y;
  r5.z = dot(r7.xwz, r6.xyz);
  r5.w = max(abs(r5.z), abs(r3.w));
  r5.w = 1 / r5.w;
  r6.w = min(abs(r5.z), abs(r3.w));
  r5.w = r6.w * r5.w;
  r6.w = r5.w * r5.w;
  r7.y = r6.w * 0.0208350997 + -0.0851330012;
  r7.y = r6.w * r7.y + 0.180141002;
  r7.y = r6.w * r7.y + -0.330299497;
  r6.w = r6.w * r7.y + 0.999866009;
  r7.y = r6.w * r5.w;
  r7.y = r7.y * -2 + 1.57079637;
  r8.x = cmp(abs(r5.z) < abs(r3.w));
  r7.y = r8.x ? r7.y : 0;
  r5.w = r5.w * r6.w + r7.y;
  r6.w = cmp(r5.z < -r5.z);
  r6.w = r6.w ? -3.141593 : 0;
  r5.w = r6.w + r5.w;
  r6.w = min(r5.z, r3.w);
  r3.w = max(r5.z, r3.w);
  r3.w = cmp(r3.w >= -r3.w);
  r5.z = cmp(r6.w < -r6.w);
  r3.w = r3.w ? r5.z : 0;
  r3.w = r3.w ? -r5.w : r5.w;
  r3.w = r3.w * r3.w + 1;
  r3.w = 1 / r3.w;
  r5.z = 1 + -r3.w;
  r5.z = cb0[8].x * r5.z;
  r3.w = cb0[8].x * r3.w + r5.z;
  r3.w = r3.w + r3.w;
  r5.z = dot(r7.xwz, r0.xzw);
  r7.xyz = cb2[0].xyz + r7.xwz;
  r5.z = max(0.00999999978, r5.z);
  r5.w = -r5.z * r5.z + 1;
  r3.w = r5.w * r3.w;
  r3.w = sqrt(r3.w);
  r3.w = r5.z / r3.w;
  r5.w = -r3.w * r3.w;
  r3.w = 3.54490757 * r3.w;
  r5.w = 1.44269502 * r5.w;
  r5.w = exp2(r5.w);
  r3.w = r5.w / r3.w;
  r2.w = r3.w + r2.w;
  r2.w = r2.w * r5.z;
  r3.w = dot(r7.xyz, r7.xyz);
  r3.w = rsqrt(r3.w);
  r7.xyz = r7.xyz * r3.www;
  r0.x = dot(r7.xyz, r0.xzw);
  r0.z = r0.x * r0.x;
  r0.x = 1 / r0.x;
  r0.z = r0.z * r0.z;
  r0.z = r0.z * r2.w;
  r0.w = dot(r7.yz, r5.xy);
  r2.w = dot(r7.xyz, r6.xyz);
  r2.w = r2.w * r0.x;
  r0.x = r0.w * r0.x;
  r0.x = r0.x * r0.x;
  r0.w = r2.w * r2.w;
  r0.xw = r0.xw / cb0[8].xx;
  r0.x = r0.w + r0.x;
  r0.xz = float2(-0.721347511,4) * r0.xz;
  r0.x = exp2(r0.x);
  r0.w = 6.28318548 * cb0[8].x;
  r0.x = r0.x / r0.w;
  r0.x = cb0[8].y * r0.x;
  r0.x = r0.x / r0.z;
  r0.xzw = cb0[6].xyz * r0.xxx;
  r2.w = cmp(cb2[0].y < 0);
  r0.xzw = r2.www ? float3(0,0,0) : r0.xzw;
  r5.xyzw = t2.Sample(s0_s, r1.xy).xyzw;
  r1.xyzw = t2.Sample(s0_s, r1.zw).xyzw;
  r1.x = r5.x + r1.y;
  r1.x = saturate(-r1.x);
  r3.x = saturate(r3.x);
  r1.y = 1 + -r3.x;
  r1.x = r1.x * r1.y;
  r1.yz = cb0[46].zz + v4.xz;
  r1.yz = cb0[46].xy * r1.yz;
  r5.xyzw = t8.Sample(s8_s, r1.yz).xyzw;
  r1.y = 0.5 * r5.w;
  r1.zw = cb0[45].zz + v4.xz;
  r1.zw = cb0[45].xy * r1.zw;
  r5.xyzw = t7.Sample(s7_s, r1.zw).xyzw;
  r1.y = r5.w * 0.5 + r1.y;
  r1.z = r1.x * r1.y + -r1.x;
  r1.x = cb0[47].x * r1.z + r1.x;
  r1.x = r3.y * r1.y + r1.x;
  r1.x = r1.x + r3.z;
  r1.y = dot(r2.xyz, -cb0[29].xyz);
  r1.y = r1.y * 0.699999988 + 0.300000012;
  r1.y = r1.y * r1.y;
  r1.yzw = cb0[51].xyz * r1.yyy;
  r1.yzw = r1.yzw * float3(0.600000024,0.899999976,1) + cb0[50].xyz;
  r2.w = saturate(r2.y * -0.5 + 0.5);
  r2.x = dot(-r2.xyz, r4.xyz);
  r1.yzw = r2.www * r1.yzw;
  r2.yzw = -cb0[47].yyy * r1.yzw;
  r1.yzw = r1.yzw * float3(2,2,2) + -r2.yzw;
  r3.xyz = float3(0.649212778,0.793482304,1.0098865) * cb0[47].yyy;
  r3.xyz = exp2(r3.xyz);
  r3.xyz = min(float3(1,1,1), r3.xyz);
  r1.yzw = r3.xyz * r1.yzw + r2.yzw;
  r2.yz = cb0[32].yy * r4.xz;
  r2.yz = r2.yz * r0.yy;
  r3.xy = v5.xy / v5.ww;
  r3.xy = saturate(r2.yz * float2(1,0) + r3.xy);
  r2.yz = float2(1,0) * r2.yz;
  r3.xyzw = t5.Sample(s5_s, r3.xy).xyzw;
  r0.y = cb1[7].x * r3.x + cb1[7].y;
  r0.y = 1 / r0.y;
  r0.y = cmp(v4.w >= r0.y);
  r2.yz = r0.yy ? float2(0,0) : r2.yz;
  r3.xy = v6.xy / v6.ww;
  r2.yz = saturate(r3.xy + r2.yz);
  r3.xyzw = t6.Sample(s6_s, r2.yz).xyzw;
  r2.yzw = cb0[32].xxx * r3.xyz;
  r0.y = abs(r2.x) * abs(r2.x) + -0.4375;
  r3.x = sqrt(r0.y);
  r0.y = cmp(0 < r0.y);
  r3.y = r3.x + abs(r2.x);
  r3.x = r3.x + -abs(r2.x);
  r3.z = abs(r2.x) * r3.y + -1;
  r3.y = r3.x / r3.y;
  r2.x = abs(r2.x) * r3.x + 1;
  r2.x = r3.z / r2.x;
  r2.x = r2.x * r2.x + 1;
  r3.x = r3.y * r3.y;
  r3.x = 0.5 * r3.x;
  r2.x = r3.x * r2.x;
  r2.x = r2.x * 0.980000019 + 0.0199999996;
  r0.y = r0.y ? r2.x : 1;
  r2.x = 1 + -r0.y;
  r2.yzw = r2.yzw * r2.xxx;
  r1.yzw = r1.yzw * r0.yyy + r2.yzw;
  r2.y = 1 + -r1.x;
  r2.yzw = -cb0[37].xyz * r2.yyy;
  r2.yzw = float3(1.44269502,1.44269502,1.44269502) * r2.yzw;
  r2.yzw = exp2(r2.yzw);
  r3.xyz = cb0[33].xyz * r1.xxx;
  r2.yzw = r3.xyz * r2.yzw + -r1.yzw;
  r1.xyz = r1.xxx * r2.yzw + r1.yzw;
  r2.yzw = cb0[6].xyz * r1.xyz;
  r3.xyz = float3(1,-1,1) * r4.xyz;
  r1.w = dot(r3.xyz, cb2[0].xyz);
  r1.w = max(0, r1.w);
  r2.yzw = r2.yzw * r1.www + r0.xzw;
  r0.xzw = r1.xyz + r0.xzw;
  r2.yzw = r2.yzw * r2.xxx;
  r0.xyz = r0.xzw * r0.yyy + r2.yzw;
  r4.w = 1;
  r3.x = dot(cb2[38].xyzw, r4.xyzw);
  r3.y = dot(cb2[39].xyzw, r4.xyzw);
  r3.z = dot(cb2[40].xyzw, r4.xyzw);
  r2.yzw = v8.xyz + r3.xyz;
  r2.yzw = max(float3(0,0,0), r2.yzw);
  r3.xyz = log2(r2.yzw);
  r3.xyz = float3(0.416666657,0.416666657,0.416666657) * r3.xyz;
  r3.xyz = exp2(r3.xyz);
  r3.xyz = r3.xyz * float3(1.05499995,1.05499995,1.05499995) + float3(-0.0549999997,-0.0549999997,-0.0549999997);
  r3.xyz = max(float3(0,0,0), r3.xyz);
  r0.w = cmp(cb0[3].w == 0.000000);
  r2.yzw = r0.www ? r3.xyz : r2.yzw;
  r1.xyz = r2.yzw * r1.xyz;
  o0.xyz = r1.xyz * r2.xxx + r0.xyz;
  o0.w = 1;
  return;
}
