// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe d676e332bd22a6de-ps_replace.txt
// 3DMigoto: d676e332bd22a6de | Matched 4 variants of 1 shaders: Hidden/Beam-DeferredShading
//
//       Unity headers extracted from Beam-DeferredShading.shader
//       Shader "Hidden/Beam-DeferredShading" {
//         Properties {
//          _LightTexture0 ("", any) = "" { }
//          _LightTextureB0 ("", 2D) = "" { }
//          _ShadowMapTexture ("", any) = "" { }
//          _SrcBlend ("", Float) = 1.000000
//          _DstBlend ("", Float) = 1.000000
//         }
//         Fallback Off
//         SubShader 1/1 {
//           Pass 1/2 {
//             Tags { "SHADOWSUPPORT"="true" }
//             ZWrite Off
//             Blend [_SrcBlend] [_DstBlend]
//             GpuProgramID 56168
//             Program "fp" {
//               SubProgram "d3d11 " {
// 5:              GpuProgramIndex 115
// a:              GpuProgramIndex 141
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Beam-DeferredShading.shader.decompressed:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201510240 112 5 1
// a:   Keywords { "SPOT" "SHADOWS_DEPTH" "BEAM_TRANSLUCENCY_OFF" }
// 5:   Keywords { "SPOT" "SHADOWS_DEPTH" "BEAM_TRANSLUCENCY_ON" }
//      undeciphered2: 1 7 4 7 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 272
//      Vector 48 [unity_ColorSpaceLuminance]
//      Vector 128 [_LightPos]
//      Vector 144 [_LightColor]
//      Matrix 176 [unity_WorldToLight]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      Vector 80 [_ProjectionParams]
//      Vector 112 [_ZBufferParams]
//      ConstBuffer "UnityPerCameraRare" 352
//      Matrix 288 [unity_CameraToWorld]
//      ConstBuffer "UnityShadows" 416
//      Vector 384 [_LightShadowData]
//      Vector 400 [unity_ShadowFadeCenterAndType]
//      Matrix 128 [unity_WorldToShadow0]
//      Matrix 192 [unity_WorldToShadow1]
//      Matrix 256 [unity_WorldToShadow2]
//      Matrix 320 [unity_WorldToShadow3]
//      SetTexture 0 [_CameraDepthTexture] 2D 0
//      SetTexture 1 [_LightTexture0] 2D 2
//      SetTexture 2 [_LightTextureB0] 2D 1
//      SetTexture 3 [_CameraGBufferTexture0] 2D 4
//      SetTexture 4 [_CameraGBufferTexture1] 2D 5
//      SetTexture 5 [_CameraGBufferTexture2] 2D 6
//      SetTexture 6 [_ShadowMapTexture] 2D 3
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityPerCameraRare" 2
//      BindCB "UnityShadows" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

// ---- Created with 3Dmigoto v1.2.42 on Sat Dec 10 03:50:23 2016
Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerComparisonState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[26];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[15];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe d676e332bd22a6de-ps_replace.txt
matrix _CameraToWorld = matrix(cb2[18], cb2[19], cb2[20], cb2[21]);
float4 _WorldSpaceCameraPos = cb1[4];
if (fov) {
  _WorldSpaceCameraPos.xyz -= mul(float4(-separation * convergence * fov, 0, 0, 0), _CameraToWorld).xyz;
} else {
  float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  _WorldSpaceCameraPos.xyz -= world_space_adj.xyz;
}

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s0_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r2.xyz = r0.xyz * r0.www;
float depth = r2.z;

// Unity light/shadow fix (pixel shader stage) inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe d676e332bd22a6de-ps_replace.txt
if (fov) {
  r2.x -= separation * (depth - convergence) * fov;
}

  r3.xyz = cb2[19].xyz * r2.yyy;
  r2.xyw = cb2[18].xyz * r2.xxx + r3.xyz;
  r2.xyw = cb2[20].xyz * r2.zzz + r2.xyw; // depth in r2.z
  r2.xyw = cb2[21].xyz + r2.xyw;

// Fallback adjustment if the FOV was not passed from the VS:
if (!fov) {
  float4 clip_space_adj = float4(separation * (depth - convergence), 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  r2.xyw -= world_space_adj.xyz;
}

  r3.xyz = cb0[8].xyz + -r2.xyw;
  r0.x = dot(r3.xyz, r3.xyz);
  r4.xyz = cb0[12].xyw * r2.yyy;
  r4.xyz = cb0[11].xyw * r2.xxx + r4.xyz;
  r4.xyz = cb0[13].xyw * r2.www + r4.xyz;
  r4.xyz = cb0[14].xyw + r4.xyz;
  r1.zw = r4.xy / r4.zz;
  r5.xyzw = t1.SampleBias(s2_s, r1.zw, -8).xyzw;
  r0.y = cb0[8].w * r0.x;
  r6.xyzw = t2.Sample(s1_s, r0.yy).xyzw;
  r7.xyzw = t3.Sample(s4_s, r1.xy).xyzw;
  r8.xyzw = t4.Sample(s5_s, r1.xy).xyzw;
  r1.xyzw = t5.Sample(s6_s, r1.xy).xyzw;
  r0.y = 3 * r1.w;
  r0.y = (int)r0.y;
  r0.y = cmp((int)r0.y == 1);
  if (r0.y == 0) {
    r4.xyw = -cb3[25].xyz + r2.xyw;
    r0.y = dot(r4.xyw, r4.xyw);
    r0.y = sqrt(r0.y);
    r0.y = -r0.z * r0.w + r0.y;
    r0.y = cb3[25].w * r0.y + r2.z;
    r0.x = rsqrt(r0.x);
    r4.xyw = r3.xyz * r0.xxx;
    r0.z = cmp(r4.z < 0);
    r0.z = r0.z ? 1.000000 : 0;
    r0.z = r5.w * r0.z;
    r0.z = r0.z * r6.x;
    r0.y = saturate(r0.y * cb3[24].z + cb3[24].w);
    r5.xyzw = cb3[9].xyzw * r2.yyyy;
    r5.xyzw = cb3[8].xyzw * r2.xxxx + r5.xyzw;
    r5.xyzw = cb3[10].xyzw * r2.wwww + r5.xyzw;
    r5.xyzw = cb3[11].xyzw + r5.xyzw;
    r5.xyz = r5.xyz / r5.www;
    r0.w = t6.SampleCmpLevelZero(s3_s, r5.xy, r5.z).x;
    r1.w = 1 + -cb3[24].x;
    r0.w = r0.w * r1.w + cb3[24].x;
    r0.y = saturate(r0.w + r0.y);
    r0.y = r0.z * r0.y;
    r0.yzw = cb0[9].xyz * r0.yyy;
    r1.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
    r1.w = dot(r1.xyz, r1.xyz);
    r1.w = rsqrt(r1.w);
    r1.xyz = r1.xyz * r1.www;
    r2.xyz = -_WorldSpaceCameraPos.xyz + r2.xyw;
    r1.w = dot(r2.xyz, r2.xyz);
    r1.w = rsqrt(r1.w);
    r2.xyz = r2.xyz * r1.www;
    r1.w = dot(r1.xyz, r4.xyw);
    r5.xyzw = float4(1,1,1,1) + -r8.wxyz;
    r3.xyz = r3.xyz * r0.xxx + -r2.xyz;
    r0.x = dot(r3.xyz, r3.xyz);
    r0.x = max(0.00100000005, r0.x);
    r0.x = rsqrt(r0.x);
    r3.xyz = r3.xyz * r0.xxx;
    r0.x = dot(r1.xyz, r3.xyz);
    r0.x = max(0, r0.x);
    r1.x = dot(r1.xyz, -r2.xyz);
    r1.y = dot(r4.xyw, r3.xyz);
    r1.xyw = max(float3(0,0,0), r1.xyw);
    r1.z = r5.x * r5.x;
    r2.x = -r5.x * r5.x + 1;
    r2.y = r1.x * r2.x + r1.z;
    r2.x = r1.w * r2.x + r1.z;
    r2.x = r2.x * r1.x;
    r2.x = r1.w * r2.y + r2.x;
    r2.x = 9.99999975e-006 + r2.x;
    r2.x = 2 / r2.x;
    r2.y = r1.z * r1.z;
    r0.x = r0.x * r0.x;
    r1.z = r1.z * r1.z + -1;
    r0.x = r0.x * r1.z + 1;
    r1.z = 3.14159274 * r0.x;
    r0.x = r1.z * r0.x + 1.00000001e-007;
    r0.x = r2.y / r0.x;
    r1.xz = float2(1,1) + -r1.xw;
    r2.y = r1.z * r1.z;
    r2.y = r2.y * r2.y;
    r1.z = r2.y * r1.z;
    r2.y = r1.x * r1.x;
    r2.y = r2.y * r2.y;
    r1.x = r2.y * r1.x;
    r2.y = r1.y * r1.y;
    r2.y = dot(r2.yy, r5.xx);
    r2.y = -0.5 + r2.y;
    r1.z = r2.y * r1.z + 1;
    r1.x = r2.y * r1.x + 1;
    r1.x = r1.z * r1.x;
    r0.x = r2.x * r0.x;
    r0.x = 0.785398185 * r0.x;
    r1.z = cmp(cb0[3].w == 0.000000);
    r2.x = max(9.99999975e-005, r0.x);
    r2.x = sqrt(r2.x);
    r0.x = r1.z ? r2.x : r0.x;
    r0.x = r0.x * r1.w;
    r0.x = max(0, r0.x);
    r1.x = r1.x * r1.w;
    r1.z = dot(r8.xyz, r8.xyz);
    r1.z = cmp(r1.z != 0.000000);
    r1.z = r1.z ? 1.000000 : 0;
    r0.x = r1.z * r0.x;
    r1.xzw = r1.xxx * r0.yzw;
    r0.xyz = r0.xxx * r0.yzw;
    r0.w = 1 + -r1.y;
    r1.y = r0.w * r0.w;
    r1.y = r1.y * r1.y;
    r0.w = r1.y * r0.w;
    r2.xyz = r5.yzw * r0.www + r8.xyz;
    r0.xyz = r2.xyz * r0.xyz;
    r7.xyz = r7.xyz * r1.xzw + r0.xyz;
  }
  r7.w = 1;
  o0.xyzw = exp2(-r7.xyzw);
  return;
}
