// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 72a85e9dc540e091-ps_replace.txt
// 3DMigoto: 72a85e9dc540e091 |    Unity headers extracted from Bumped Specular - Procedural.shader
//    Shader "Beam Team/Standard/Terrain/Bumped Specular - Procedural" {
//      Properties {
//      [Header(Noise Texture)]  _NoiseTex ("Noise Texture", 2D) = "white" { }
//      [Header(Diffuse Maps)]  _Tex1 ("Texture 1 (RGB)", 2D) = "white" { }
//       _Tex2 ("Texture 2 (RGB)", 2D) = "white" { }
//       _Tex3 ("Texture 3 (RGB)", 2D) = "white" { }
//       _Tex4 ("Texture 4 (RGB)", 2D) = "white" { }
//       _Tex5 ("Texture 5 (RGB)", 2D) = "white" { }
//       _Tex6 ("Texture 6 (RGB)", 2D) = "white" { }
//      [Header(Packed Maps)]  _Pack1 ("Packed 1", 2D) = "white" { }
//       _Pack2 ("Packed 2", 2D) = "white" { }
//       _Pack3 ("Packed 3", 2D) = "white" { }
//       _Pack4 ("Packed 4", 2D) = "white" { }
//       _Pack5 ("Packed 5", 2D) = "white" { }
//       _Pack6 ("Packed 6", 2D) = "white" { }
//      [Header(Blending)]  _Blend1 ("Blend Height 1", Float) = 0
//       _Blend2 ("Blend Height 2", Float) = 0
//       _Blend3 ("Blend Height 3", Float) = 0
//       _Blend4 ("Blend Height 4", Float) = 0
//       _Blend5 ("Blend Height 5", Float) = 0
//       _Blend6 ("Blend Height 6", Float) = 0
//      [Header(Parallax)]  _Height1 ("Height 1", Float) = 0.02
//       _Height2 ("Height 2", Float) = 0.02
//       _Height3 ("Height 3", Float) = 0.02
//       _Height4 ("Height 4", Float) = 0.02
//      [Header(Specular)]  _Contrast1 ("Contrast 1", Float) = 1
//       _Contrast2 ("Contrast 2", Float) = 1
//       _Contrast3 ("Contrast 3", Float) = 1
//       _Contrast4 ("Contrast 4", Float) = 1
//      }
//      Dependency "BaseMapShader" = "Beam Team/Standard/Terrain/Base Map"
//      Fallback "Beam Team/Standard/Terrain/Vertex Lit"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" }
//        Pass 1/2 {
//          Name "DEFERRED"
//          Tags { "LIGHTMODE"="Deferred" "QUEUE"="Geometry-100" "RenderType"="Opaque" }
//          GpuProgramID 29534
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 159
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Bumped Specular - Procedural.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 217 15 0
//   Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "SHADER_QUALITY_ULTRA" }
//   undeciphered2: 1 15 2 2 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 288
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 80 [unity_DynamicLightmap_HDR]
//   Float 148 [_Blend2]
//   Float 152 [_Blend3]
//   Float 156 [_Blend4]
//   Float 160 [_Blend5]
//   Float 164 [_Blend6]
//   Float 172 [_Contrast2]
//   Float 176 [_Contrast3]
//   Float 180 [_Contrast4]
//   Float 184 [_AfsRainamount]
//   Float 188 [_AfsSpecPower]
//   Float 192 [_WaterHeight]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   SetTexture 0 [unity_DynamicLightmap] 2D 0
//   SetTexture 1 [unity_DynamicDirectionality] 2D -1
//   SetTexture 2 [unity_DynamicNormal] 2D -1
//   SetTexture 3 [_Tex1] 2D 1
//   SetTexture 4 [_Tex2] 2D -1
//   SetTexture 5 [_Tex3] 2D -1
//   SetTexture 6 [_Tex4] 2D -1
//   SetTexture 7 [_Tex5] 2D -1
//   SetTexture 8 [_Tex6] 2D -1
//   SetTexture 9 [_Pack1] 2D -1
//   SetTexture 10 [_Pack2] 2D -1
//   SetTexture 11 [_Pack3] 2D -1
//   SetTexture 12 [_Pack4] 2D -1
//   SetTexture 13 [_Pack5] 2D -1
//   SetTexture 14 [_Pack6] 2D -1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:01:19 2016
Texture2D<float4> t14 : register(t14);

Texture2D<float4> t13 : register(t13);

Texture2D<float4> t12 : register(t12);

Texture2D<float4> t11 : register(t11);

Texture2D<float4> t10 : register(t10);

Texture2D<float4> t9 : register(t9);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[13];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 72a85e9dc540e091-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = cb0[11].w * cb0[11].z;
  r0.x = saturate(r0.x);
  r0.x = 0.300000012 * r0.x;
  r0.y = cb0[12].x + -v6.x;
  r0.yz = float2(1.20000005,0.0700000003) + r0.yy;
  r0.yz = saturate(float2(0.909090877,7.14285707) * r0.yz);
  r1.xy = r0.yz * float2(-2,-2) + float2(3,3);
  r0.yz = r0.yz * r0.yz;
  r0.w = -r1.x * r0.y + 1;
  r0.yz = r1.xy * r0.yz;
  r0.x = r0.x * r0.w + r0.y;
  r0.yw = -cb0[10].xy + v6.xx;
  r0.yw = float2(2.5,2) + r0.yw;
  r0.yw = saturate(float2(0.200000003,0.25) * r0.yw);
  r1.xy = r0.yw * float2(-2,-2) + float2(3,3);
  r0.yw = r0.yw * r0.yw;
  r1.zw = r1.xy * r0.yw;
  r0.yw = -r1.xy * r0.yw + float2(1,2);
  r1.x = min(1, r1.z);
  r2.xyzw = t7.Sample(s1_s, v1.xy).xyzw;
  r1.x = r2.w + r1.x;
  r1.y = max(r1.x, r0.y);
  r1.y = -0.00999999978 + r1.y;
  r1.x = r1.x + -r1.y;
  r0.y = -r1.y + r0.y;
  r0.y = max(0, r0.y);
  r1.x = max(0, r1.x);
  r2.xyz = r2.xyz * r1.xxx;
  r3.xyz = -cb0[9].yzw + v6.xxx;
  r3.xyz = float3(0.5,1,1) + r3.zxy;
  r3.x = saturate(r3.x);
  r1.yz = saturate(float2(0.5,0.5) * r3.yz);
  r2.w = r3.x * -2 + 3;
  r3.x = r3.x * r3.x;
  r3.y = -r2.w * r3.x + 2;
  r2.w = r2.w * r3.x + 1;
  r3.x = max(r3.y, r2.w);
  r3.x = -0.200000003 + r3.x;
  r3.y = r3.y + -r3.x;
  r2.w = -r3.x + r2.w;
  r2.w = max(0, r2.w);
  r3.x = max(0, r3.y);
  r4.xyzw = t3.Sample(s1_s, v1.xy).xyzw;
  r3.yz = r1.yz * float2(-2,-2) + float2(3,3);
  r1.yz = r1.yz * r1.yz;
  r5.xyzw = t4.Sample(s1_s, v1.zw).xyzw;
  r3.w = r3.y * r1.y + r5.w;
  r6.xy = -r3.yz * r1.yz + float2(2,2);
  r4.w = max(r6.x, r3.w);
  r4.w = -0.200000003 + r4.w;
  r5.w = -r4.w + r3.w;
  r3.w = saturate(r3.w);
  r1.y = r3.y * r1.y + r3.w;
  r1.z = r3.z * r1.z + 1;
  r3.y = r6.x + -r4.w;
  r3.y = max(0, r3.y);
  r3.z = max(0, r5.w);
  r7.xyz = r5.xyz * r3.zzz;
  r4.xyz = r4.xyz * r3.yyy + r7.xyz;
  r3.w = r3.y + r3.z;
  r4.xyz = r4.xyz / r3.www;
  r4.w = max(r6.y, r1.z);
  r4.w = -0.200000003 + r4.w;
  r5.w = r6.y + -r4.w;
  r1.z = -r4.w + r1.z;
  r1.z = max(0, r1.z);
  r4.w = max(0, r5.w);
  r7.xyzw = t5.Sample(s1_s, v2.xy).xyzw;
  r6.yzw = r7.xyz * r1.zzz;
  r4.xyz = r4.xyz * r4.www + r6.yzw;
  r5.w = r4.w + r1.z;
  r4.xyz = r4.xyz / r5.www;
  r8.xyzw = t6.Sample(s1_s, v2.zw).xyzw;
  r6.yzw = r8.xyz * r2.www;
  r4.xyz = r4.xyz * r3.xxx + r6.yzw;
  r6.y = r3.x + r2.w;
  r4.xyz = r4.xyz / r6.yyy;
  r2.xyz = r4.xyz * r0.yyy + r2.xyz;
  r4.x = r1.x + r0.y;
  r2.xyz = r2.xyz / r4.xxx;
  r9.xyzw = t8.Sample(s1_s, v1.xy).xyzw;
  r1.w = r9.w * r1.w + r1.w;
  r4.y = max(r1.w, r0.w);
  r4.y = -0.0199999996 + r4.y;
  r1.w = -r4.y + r1.w;
  r0.w = -r4.y + r0.w;
  r0.w = max(0, r0.w);
  r1.w = max(0, r1.w);
  r9.xyz = r9.xyz * r1.www;
  r2.xyz = r2.xyz * r0.www + r9.xyz;
  r4.y = r1.w + r0.w;
  r2.xyz = r2.xyz / r4.yyy;
  r9.xyz = r2.xyz * r0.xxx;
  r2.xyz = r9.xyz * float3(-0.699999988,-0.699999988,-0.699999988) + r2.xyz;
  r2.xyz = cb0[2].www * r2.xyz;
  o0.xyz = r2.xyz;
  o0.w = 1;
  r9.xyz = cb0[3].xyz * r5.xyz;
  r5.xy = r9.xx + r9.yz;
  r0.x = r9.y * r5.y;
  r4.z = r5.z * cb0[3].z + r5.x;
  r0.x = sqrt(r0.x);
  r0.x = dot(cb0[3].ww, r0.xx);
  r0.x = r4.z + r0.x;
  r0.x = cb0[10].w * r0.x;
  r4.z = 0.25 + v6.x;
  r4.z = saturate(2.5 * r4.z);
  r5.x = r4.z * -2 + 3;
  r4.z = r4.z * r4.z;
  r4.z = r5.x * r4.z;
  r0.x = r4.z * r0.x;
  r4.z = max(r6.x, r1.y);
  r4.z = -0.200000003 + r4.z;
  r1.y = -r4.z + r1.y;
  r4.z = r6.x + -r4.z;
  r4.z = max(0, r4.z);
  r1.y = max(0, r1.y);
  r0.x = r1.y * r0.x;
  r1.y = r4.z + r1.y;
  r0.x = r0.x / r1.y;
  r5.xyz = cb0[3].xyz * r7.xyz;
  r5.xz = r5.xx + r5.yz;
  r1.y = r5.y * r5.z;
  r4.z = r7.z * cb0[3].z + r5.x;
  r1.y = sqrt(r1.y);
  r1.y = dot(cb0[3].ww, r1.yy);
  r1.y = r4.z + r1.y;
  r1.y = cb0[11].x * r1.y;
  r1.y = r1.y * r1.z;
  r0.x = r0.x * r4.w + r1.y;
  r0.x = r0.x / r5.w;
  r5.xyz = cb0[3].xyz * r8.xyz;
  r5.xz = r5.xx + r5.yz;
  r1.y = r5.y * r5.z;
  r4.z = r8.z * cb0[3].z + r5.x;
  r1.y = sqrt(r1.y);
  r1.y = dot(cb0[3].ww, r1.yy);
  r1.y = r4.z + r1.y;
  r1.y = cb0[11].y * r1.y;
  r1.y = r1.y * r2.w;
  r0.x = r0.x * r3.x + r1.y;
  r0.x = r0.x / r6.y;
  r7.xyzw = t13.Sample(s1_s, v1.xy).xyzw;
  r5.xyz = r7.ywx * r1.xxx;
  r0.x = r0.x * r0.y + r5.z;
  r0.x = r0.x / r4.x;
  r7.xyzw = t14.Sample(s1_s, v1.xy).xyzw;
  r1.xyw = r7.ywx * r1.www;
  r0.x = r0.x * r0.w + r1.w;
  r0.x = r0.x / r4.y;
  r1.w = cb0[11].w * cb0[11].z + 1;
  r0.x = r1.w * r0.x;
  r0.x = max(0, r0.x);
  r0.x = min(0.949999988, r0.x);
  r0.x = r0.z * -r0.x + r0.x;
  o1.w = r0.x;
  o1.xyz = cb0[2].xyz;
  r7.xyzw = t10.Sample(s1_s, v1.zw).xyzw;
  r6.xz = r7.wy * r3.zz;
  r7.xyzw = t9.Sample(s1_s, v1.xy).xyzw;
  r3.yz = r7.wy * r3.yy + r6.xz;
  r3.yz = r3.yz / r3.ww;
  r7.xyzw = t11.Sample(s1_s, v2.xy).xyzw;
  r1.zw = r7.wy * r1.zz;
  r1.zw = r3.yz * r4.ww + r1.zw;
  r1.zw = r1.zw / r5.ww;
  r7.xyzw = t12.Sample(s1_s, v2.zw).xyzw;
  r3.yz = r7.wy * r2.ww;
  r1.zw = r1.zw * r3.xx + r3.yz;
  r1.zw = r1.zw / r6.yy;
  r0.yz = r1.zw * r0.yy + r5.yx;
  r0.yz = r0.yz / r4.xx;
  r0.yz = r0.yz * r0.ww + r1.yx;
  r0.yz = r0.yz / r4.yy;
  r1.xy = r0.yz * float2(2,2) + float2(-1,-1);
  r0.y = dot(r1.xy, r1.xy);
  r0.y = min(1, r0.y);
  r0.y = 1 + -r0.y;
  r1.z = sqrt(r0.y);
  r3.x = dot(v3.xyz, r1.xyz);
  r3.y = dot(v4.xyz, r1.xyz);
  r3.z = dot(v5.xyz, r1.xyz);
  o2.xyz = r3.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o2.w = 1;
  r0.y = 1 + -r0.x;
  r0.y = r0.y * r0.y;
  r1.x = v3.w;
  r1.y = v4.w;
  r1.z = v5.w;
  r1.xyz = _WorldSpaceCameraPos.xyz + -r1.xyz;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = rsqrt(r0.z);
  r4.xyzw = t1.Sample(s0_s, v8.zw).xyzw;
  r4.xyz = r4.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = sqrt(r0.w);
  r0.w = max(0.00100000005, r0.w);
  r4.xyz = r4.xyz / r0.www;
  r1.xyz = r1.xyz * r0.zzz + r4.xyz;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = max(0.00100000005, r0.z);
  r0.z = rsqrt(r0.z);
  r1.xyz = r1.xyz * r0.zzz;
  r0.z = dot(r4.xyz, r1.xyz);
  r1.x = dot(r3.xyz, r1.xyz);
  r1.y = dot(r3.xyz, r4.xyz);
  r1.xy = max(float2(0,0), r1.xy);
  r1.x = log2(r1.x);
  r0.z = max(0, r0.z);
  r1.z = r0.z * r0.z;
  r0.x = r1.z * r0.x + r0.y;
  r0.xy = r0.zy * r0.xy;
  r0.y = 2 / r0.y;
  r0.y = -2 + r0.y;
  r0.y = max(9.99999975e-005, r0.y);
  r0.x = r0.x * 8 + 9.99999975e-005;
  r0.z = 1 + r0.y;
  r0.y = r0.y * r1.x;
  r0.y = exp2(r0.y);
  r0.y = r0.z * r0.y;
  r0.x = r0.y / r0.x;
  r0.y = max(9.99999975e-005, r0.x);
  r0.y = sqrt(r0.y);
  r0.z = cmp(cb0[3].w == 0.000000);
  r0.x = r0.z ? r0.y : r0.x;
  r0.xyz = r0.xxx * cb0[2].xyz + r2.xyz;
  r3.xyzw = t0.Sample(s0_s, v8.zw).xyzw;
  r1.x = cb0[5].x * r3.w;
  r1.xzw = r1.xxx * r3.xyz;
  r1.xzw = log2(r1.xzw);
  r1.xzw = cb0[5].yyy * r1.xzw;
  r1.xzw = exp2(r1.xzw);
  r3.xyzw = t2.Sample(s0_s, v8.zw).xyzw;
  r3.xyz = r3.zyx * float3(2,2,2) + float3(-1,-1,-1);
  r2.w = dot(r3.xyz, r4.xyz);
  r2.w = max(0.125, r2.w);
  r1.xzw = r1.xzw / r2.www;
  r3.xyz = r1.xzw * r0.www;
  r0.w = 1 + -r0.w;
  r1.xzw = r1.xzw * r0.www;
  r1.xzw = r1.xzw * r1.yyy;
  r0.xyz = r3.xyz * r0.xyz;
  r0.xyz = r0.xyz * r1.yyy;
  o3.xyz = r2.xyz * r1.xzw + r0.xyz;
  o3.w = 1;
  return;
}
