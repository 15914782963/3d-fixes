// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 430042b99239b9d1-ps_replace.txt
// 3DMigoto: 430042b99239b9d1 |    Unity headers extracted from Rocks - MaskyMix Standard.shader
//    Shader "Volund/Standard MaskyMix Scatter (Specular, Surface)" {
//      Properties {
//       _Color ("Color", Color) = (1,1,1,1)
//       _MainTex ("Albedo", 2D) = "white" { }
//       _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//       _Glossiness ("Smoothness", Range(0,1)) = 0.5
//       _SpecColor ("Specular", Color) = (0.2,0.2,0.2,1)
//       _SpecGlossMap ("Specular", 2D) = "white" { }
//       _BumpScale ("Scale", Float) = 1
//       _BumpMap ("Normal Map", 2D) = "bump" { }
//       _Parallax ("Height Scale", Range(0.005,0.08)) = 0.02
//       _ParallaxMap ("Height Map", 2D) = "black" { }
//       _OcclusionStrength ("Strength", Range(0,1)) = 1
//       _OcclusionMap ("Occlusion", 2D) = "white" { }
//       _EmissionColor ("Color", Color) = (0,0,0,1)
//       _EmissionMap ("Emission", 2D) = "white" { }
//       _DetailMask ("Detail Mask", 2D) = "white" { }
//       _DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" { }
//       _DetailNormalMapScale ("Scale", Float) = 1
//       _DetailNormalMap ("Normal Map", 2D) = "bump" { }
//      [Enum(UV0,0,UV1,1)]  _UVSec ("UV Set for secondary textures", Float) = 0
//      [HideInInspector]  _Mode ("__mode", Float) = 0
//      [HideInInspector]  _SrcBlend ("__src", Float) = 1
//      [HideInInspector]  _DstBlend ("__dst", Float) = 0
//      [HideInInspector]  _ZWrite ("__zw", Float) = 1
//      [HideInInspector]  _SmoothnessInAlbedo ("__smoothnessinalbedo", Float) = 0
//       _MaskyMixAlbedo ("MaskyMix Albedo (RGB) Gloss(A)", 2D) = "white" { }
//       _MaskyMixUVTile ("MaskyMix UV Tile", Range(1,200)) = 10
//       _MaskyMixColor ("MaskyMix Color (2x)", Color) = (0.5,0.5,0.5,0.5)
//       _MaskyMixSpecColor ("MaskyMix Spec Color", Color) = (0.2,0.2,0.2,1)
//       _MaskyMixBumpMap ("MaskyMix Bump", 2D) = "bump" { }
//       _MaskyMixBumpScale ("MaskyMix Bump Scale", Range(0.1,2)) = 1
//       _MaskyMixWorldDirection ("MaskyMix World Dir", Vector) = (0,1,0,0)
//       _MaskyMixMask ("MaskyMix Mask (R)", 2D) = "white" { }
//       _MaskyMixMaskTile ("MaskyMix Mask UV Tile", Range(1,100)) = 10
//       _MaskyMixMaskFalloff ("MaskyMix Mask Falloff", Range(0.0001,2.5)) = 0.1
//       _MaskyMixMaskThresholdLow ("MaskyMix Mask Threshold Low", Range(0,1)) = 0.5
//       _MaskyMixMaskThresholdHi ("MaskyMix Mask Threshold Hi", Range(0,1)) = 0.6
//       _MetaAlbedoDesaturation ("Meta Albedo Desaturation", Range(0,1)) = 0
//      [HDR]  _MetaAlbedoTint ("Meta Albedo Tint", Color) = (1,1,1,1)
//      [HDR]  _MetaAlbedoAdd ("Meta Albedo Add", Color) = (0,0,0,0)
//      }
//      Fallback "Diffuse"
//      SubShader 1/2 {
//        LOD 400
//        Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
//        Pass 3/4 {
//          Name "DEFERRED"
//          Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" "PerformanceChecks"="False" }
//          ZWrite [_ZWrite]
//          Blend [_SrcBlend] [_DstBlend]
//          GpuProgramID 172326
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 67
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Rocks - MaskyMix Standard.shader.decompressed:
//   API d3d11
//   Shader model ps_5_0
//   undeciphered1: 109 9 0
//   Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
//   undeciphered2: 1 9 2 7 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 368
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 80 [unity_DynamicLightmap_HDR]
//   Vector 112 [_SpecColor]
//   Vector 128 [_Color]
//   Float 192 [_BumpScale]
//   Float 204 [_Glossiness]
//   Float 208 [_OcclusionStrength]
//   Vector 240 [_MaskyMixColor]
//   Vector 256 [_MaskyMixSpecColor]
//   Float 272 [_MaskyMixUVTile]
//   Float 276 [_MaskyMixBumpScale]
//   Float 300 [_MaskyMixMaskTile]
//   Float 304 [_MaskyMixMaskFalloff]
//   Float 308 [_MaskyMixMaskThresholdLow]
//   Float 312 [_MaskyMixMaskThresholdHi]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   SetTexture 0 [_MainTex] 2D 1
//   SetTexture 1 [_OcclusionMap] 2D 3
//   SetTexture 2 [_MaskyMixBumpMap] 2D 5
//   SetTexture 3 [_BumpMap] 2D 2
//   SetTexture 4 [_MaskyMixAlbedo] 2D 4
//   SetTexture 5 [_MaskyMixMask] 2D 6
//   SetTexture 6 [unity_DynamicLightmap] 2D 0
//   SetTexture 7 [unity_DynamicDirectionality] 2D -1
//   SetTexture 8 [unity_DynamicNormal] 2D -1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:07:02 2016
Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[20];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float v5 : TEXCOORD4,
  float3 w5 : TEXCOORD5,
  float4 v6 : TEXCOORD6,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 430042b99239b9d1-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xy = cb0[18].ww * v4.xy;
  r0.x = t5.Sample(s6_s, r0.xy).x;
  r0.x = v5.x * r0.x;
  r0.x = 9.99999975e-006 * r0.x;
  r0.x = log2(r0.x);
  r0.x = cb0[19].x * r0.x;
  r0.x = exp2(r0.x);
  r0.y = -cb0[19].y + r0.x;
  r0.x = cmp(cb0[19].y < r0.x);
  r0.z = cb0[19].z + -cb0[19].y;
  r0.z = 1 / r0.z;
  r0.y = saturate(r0.y * r0.z);
  r0.z = r0.y * -2 + 3;
  r0.y = r0.y * r0.y;
  r0.y = r0.z * r0.y;
  r1.xyz = cb0[15].xyz + cb0[15].xyz;
  r2.xyz = t0.Sample(s1_s, v4.xy).xyz;
  r2.xyz = cb0[8].xyz * r2.xyz;
  r0.zw = cb0[17].xx * v4.xy;
  r3.xyzw = t4.Sample(s4_s, r0.zw).xyzw;
  r0.zw = t2.Sample(s5_s, r0.zw).yw;
  r0.zw = r0.wz * float2(2,2) + float2(-1,-1);
  r0.zw = cb0[17].yy * r0.zw;
  r1.xyz = r3.xyz * r1.xyz + -r2.xyz;
  r1.w = -cb0[12].w + r3.w;
  r3.w = r0.y * r1.w + cb0[12].w;
  r1.xyz = r0.yyy * r1.xyz + r2.xyz;
  r1.xyz = r0.xxx ? r1.xyz : r2.xyz;
  r2.xyz = cb0[16].xyz + -cb0[7].xyz;
  r3.xyz = r0.yyy * r2.xyz + cb0[7].xyz;
  r2.xyz = cb0[7].xyz;
  r2.w = cb0[12].w;
  r2.xyzw = r0.xxxx ? r3.xyzw : r2.xyzw;
  r1.w = max(r2.x, r2.y);
  r1.w = max(r1.w, r2.z);
  r1.w = 1 + -r1.w;
  r1.xyz = r1.xyz * r1.www;
  r3.x = t1.Sample(s3_s, v4.xy).y;
  r3.y = 1 + -cb0[13].x;
  r1.w = r3.x * cb0[13].x + r3.y;
  o0.xyzw = r1.xyzw;
  o1.xyzw = r2.xyzw;
  r3.x = dot(r0.zw, r0.zw);
  r3.x = min(1, r3.x);
  r3.x = 1 + -r3.x;
  r3.x = sqrt(r3.x);
  r3.yz = t3.Sample(s2_s, v4.xy).yw;
  r3.yz = r3.zy * float2(2,2) + float2(-1,-1);
  r4.xy = cb0[12].xx * r3.yz;
  r5.xy = r3.yz * cb0[12].xx + r0.zw;
  r0.z = dot(r4.xy, r4.xy);
  r0.z = min(1, r0.z);
  r0.z = 1 + -r0.z;
  r0.z = sqrt(r0.z);
  r5.z = r0.z * r3.x;
  r0.z = dot(r5.xyz, r5.xyz);
  r0.z = rsqrt(r0.z);
  r3.xyz = r5.xyz * r0.zzz;
  r0.yzw = r3.xyz * r0.yyy;
  r0.xyz = r0.xxx ? r0.yzw : 0;
  r3.x = dot(v1.xyz, r0.xyz);
  r3.y = dot(v2.xyz, r0.xyz);
  r3.z = dot(v3.xyz, r0.xyz);
  o2.xyz = r3.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o2.w = 1;
  r0.x = 1 + -r2.w;
  r0.x = r0.x * r0.x;
  r0.y = max(9.99999975e-005, r0.x);
  r0.y = r0.y * r0.y;
  r0.y = 2 / r0.y;
  r0.y = -2 + r0.y;
  r0.y = max(9.99999975e-005, r0.y);
  r0.z = 1 + r0.y;
  r4.x = v1.w;
  r4.y = v2.w;
  r4.z = v3.w;
  r4.xyz = _WorldSpaceCameraPos.xyz + -r4.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = t7.Sample(s0_s, v6.zw).xyz;
  r5.xyz = r5.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r3.w = dot(r5.xyz, r5.xyz);
  r3.w = sqrt(r3.w);
  r3.w = max(0.00100000005, r3.w);
  r5.xyz = r5.xyz / r3.www;
  r4.xyz = r4.xyz * r0.www + r5.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.w = dot(r3.xyz, r4.xyz);
  r3.x = dot(r3.xyz, r5.xyz);
  r3.y = dot(r5.xyz, r4.xyz);
  r3.xy = max(float2(0,0), r3.xy);
  r0.w = max(0, r0.w);
  r0.w = log2(r0.w);
  r0.y = r0.y * r0.w;
  r0.y = exp2(r0.y);
  r0.y = r0.z * r0.y;
  r0.z = r3.y * r3.y;
  r0.x = r0.z * r2.w + r0.x;
  r0.x = r3.y * r0.x;
  r0.x = r0.x * 8 + 9.99999975e-005;
  r0.x = r0.y / r0.x;
  r0.y = max(9.99999975e-005, r0.x);
  r0.y = sqrt(r0.y);
  r0.z = cmp(cb0[3].w == 0.000000);
  r0.x = r0.z ? r0.y : r0.x;
  r0.xyz = r0.xxx * r2.xyz + r1.xyz;
  r2.xyzw = t6.Sample(s0_s, v6.zw).xyzw;
  r0.w = cb0[5].x * r2.w;
  r2.xyz = r0.www * r2.xyz;
  r2.xyz = log2(r2.xyz);
  r2.xyz = cb0[5].yyy * r2.xyz;
  r2.xyz = exp2(r2.xyz);
  r4.xyz = t8.Sample(s0_s, v6.zw).xyz;
  r4.xyz = r4.zyx * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r4.xyz, r5.xyz);
  r0.w = max(0.125, r0.w);
  r2.xyz = r2.xyz / r0.www;
  r4.xyz = r2.xyz * r3.www;
  r0.w = 1 + -r3.w;
  r2.xyz = r2.xyz * r0.www;
  r2.xyz = r2.xyz * r3.xxx;
  r2.xyz = r2.xyz * r1.www;
  r0.xyz = r4.xyz * r0.xyz;
  r0.xyz = r0.xyz * r3.xxx;
  r0.xyz = r0.xyz * r1.www;
  o3.xyz = r1.xyz * r2.xyz + r0.xyz;
  o3.w = 1;
  return;
}
