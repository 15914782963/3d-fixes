// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 2936b16d04f9d8a2-ps_replace.txt
// 3DMigoto: 2936b16d04f9d8a2 |    Unity headers extracted from Standard-Base.shader
//    Shader "Hidden/TerrainEngine/Splatmap/Standard-Base" {
//      Properties {
//       _MainTex ("Base (RGB) Smoothness (A)", 2D) = "white" { }
//       _MetallicTex ("Metallic (R)", 2D) = "white" { }
//       _Color ("Main Color", Color) = (1,1,1,1)
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          GpuProgramID 45827
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 47
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Standard-Base.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 177 6 4
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_ON" }
//   undeciphered2: 1 8 4 6 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 144
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 80 [unity_DynamicLightmap_HDR]
//   Vector 96 [_LightColor0]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   SetTexture 0 [_MainTex] 2D 4
//   SetTexture 1 [_MetallicTex] 2D 5
//   SetTexture 2 [_ShadowMapTexture] 2D 3
//   SetTexture 3 [unity_DynamicLightmap] 2D 0
//   SetTexture 4 [unity_DynamicDirectionality] 2D -1
//   SetTexture 5 [unity_DynamicNormal] 2D -1
//   SetTexture 6 [unity_SpecCube0] CUBE 1
//   SetTexture 7 [unity_SpecCube1] CUBE 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:16:30 2016
TextureCube<float4> t7 : register(t7);

TextureCube<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[7];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD4,
  float4 v5 : TEXCOORD6,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 2936b16d04f9d8a2-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyz = _WorldSpaceCameraPos.xyz + -v3.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r0.xyz * r0.www;
  r2.xyzw = t0.Sample(s4_s, v1.xy).xyzw;
  r3.xyzw = t1.Sample(s5_s, v1.xy).xyzw;
  r3.yz = v4.xy / v4.ww;
  r4.xyzw = t2.Sample(s3_s, r3.yz).xyzw;
  r1.w = 1 + -r2.w;
  r3.y = dot(-r1.xyz, v2.xyz);
  r3.y = r3.y + r3.y;
  r3.yzw = v2.xyz * -r3.yyy + -r1.xyz;
  r4.xyz = cb0[6].xyz * r4.xxx;
  r5.xyzw = t3.Sample(s0_s, v5.zw).xyzw;
  r4.w = cb0[5].x * r5.w;
  r5.xyz = r4.www * r5.xyz;
  r5.xyz = log2(r5.xyz);
  r5.xyz = cb0[5].yyy * r5.xyz;
  r5.xyz = exp2(r5.xyz);
  r6.xyzw = t4.Sample(s0_s, v5.zw).xyzw;
  r7.xyzw = t5.Sample(s0_s, v5.zw).xyzw;
  r6.xyz = r6.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r4.w = dot(r6.xyz, r6.xyz);
  r4.w = sqrt(r4.w);
  r4.w = max(0.00100000005, r4.w);
  r6.xyz = r6.xyz / r4.www;
  r7.xyz = r7.zyx * float3(2,2,2) + float3(-1,-1,-1);
  r5.w = dot(r7.xyz, r6.xyz);
  r5.w = max(0.125, r5.w);
  r5.xyz = r5.xyz / r5.www;
  r5.w = dot(v2.xyz, r6.xyz);
  r5.w = max(0, r5.w);
  r6.w = 1 + -r4.w;
  r7.xyz = r6.www * r5.xyz;
  r5.xyz = r5.xyz * r4.www;
  r4.w = cmp(0 < cb3[2].w);
  if (r4.w != 0) {
    r4.w = dot(r3.yzw, r3.yzw);
    r4.w = rsqrt(r4.w);
    r8.xyz = r4.www * r3.yzw;
    r9.xyz = cb3[0].xyz + -v3.xyz;
    r9.xyz = r9.xyz / r8.xyz;
    r10.xyz = cb3[1].xyz + -v3.xyz;
    r10.xyz = r10.xyz / r8.xyz;
    r11.xyz = cmp(float3(0,0,0) < r8.xyz);
    r9.xyz = r11.xyz ? r9.xyz : r10.xyz;
    r4.w = min(r9.x, r9.y);
    r4.w = min(r4.w, r9.z);
    r9.xyz = -cb3[2].xyz + v3.xyz;
    r8.xyz = r8.xyz * r4.www + r9.xyz;
  } else {
    r8.xyz = r3.yzw;
  }
  r4.w = -r1.w * 0.699999988 + 1.70000005;
  r4.w = r4.w * r1.w;
  r4.w = 6 * r4.w;
  r8.xyzw = t6.SampleLevel(s1_s, r8.xyz, r4.w).xyzw;
  r6.w = log2(r8.w);
  r6.w = cb3[3].y * r6.w;
  r6.w = exp2(r6.w);
  r6.w = cb3[3].x * r6.w;
  r9.xyz = r6.www * r8.xyz;
  r7.w = cmp(cb3[1].w < 0.999989986);
  if (r7.w != 0) {
    r7.w = cmp(0 < cb3[6].w);
    if (r7.w != 0) {
      r7.w = dot(r3.yzw, r3.yzw);
      r7.w = rsqrt(r7.w);
      r10.xyz = r7.www * r3.yzw;
      r11.xyz = cb3[4].xyz + -v3.xyz;
      r11.xyz = r11.xyz / r10.xyz;
      r12.xyz = cb3[5].xyz + -v3.xyz;
      r12.xyz = r12.xyz / r10.xyz;
      r13.xyz = cmp(float3(0,0,0) < r10.xyz);
      r11.xyz = r13.xyz ? r11.xyz : r12.xyz;
      r7.w = min(r11.x, r11.y);
      r7.w = min(r7.w, r11.z);
      r11.xyz = -cb3[6].xyz + v3.xyz;
      r3.yzw = r10.xyz * r7.www + r11.xyz;
    }
    r10.xyzw = t7.SampleLevel(s2_s, r3.yzw, r4.w).xyzw;
    r3.y = log2(r10.w);
    r3.y = cb3[7].y * r3.y;
    r3.y = exp2(r3.y);
    r3.y = cb3[7].x * r3.y;
    r3.yzw = r3.yyy * r10.xyz;
    r8.xyz = r6.www * r8.xyz + -r3.yzw;
    r9.xyz = cb3[1].www * r8.xyz + r3.yzw;
  }
  r3.y = dot(v2.xyz, v2.xyz);
  r3.y = rsqrt(r3.y);
  r3.yzw = v2.xyz * r3.yyy;
  r8.xyz = -cb0[2].xyz + r2.xyz;
  r8.xyz = r3.xxx * r8.xyz + cb0[2].xyz;
  r3.x = -r3.x * cb0[2].w + cb0[2].w;
  r2.xyz = r3.xxx * r2.xyz;
  r10.xyz = r0.xyz * r0.www + cb2[0].xyz;
  r4.w = dot(r10.xyz, r10.xyz);
  r4.w = max(0.00100000005, r4.w);
  r4.w = rsqrt(r4.w);
  r10.xyz = r10.xyz * r4.www;
  r4.w = dot(r3.yzw, r1.xyz);
  r6.w = cmp(r4.w < 0);
  r4.w = 9.99999975e-006 + -r4.w;
  r11.xyz = r1.xyz * r4.www + r3.yzw;
  r11.xyz = r6.www ? r11.xyz : r3.yzw;
  r4.w = dot(r11.xyz, cb2[0].xyz);
  r4.w = max(0, r4.w);
  r6.w = dot(r11.xyz, r10.xyz);
  r6.w = max(0, r6.w);
  r1.x = dot(r11.xyz, r1.xyz);
  r1.y = dot(cb2[0].xyz, r10.xyz);
  r1.xy = max(float2(0,0), r1.xy);
  r1.z = r1.w * r1.w;
  r7.w = -r1.w * r1.w + 1;
  r8.w = r1.x * r7.w + r1.z;
  r7.w = r4.w * r7.w + r1.z;
  r7.w = r7.w * r1.x;
  r7.w = r4.w * r8.w + r7.w;
  r7.w = 9.99999975e-006 + r7.w;
  r7.w = 2 / r7.w;
  r8.w = r1.z * r1.z;
  r6.w = r6.w * r6.w;
  r10.xy = r1.zz * r1.zz + float2(-1,1);
  r6.w = r6.w * r10.x + 1;
  r9.w = 3.14159274 * r6.w;
  r6.w = r9.w * r6.w + 1.00000001e-007;
  r6.w = r8.w / r6.w;
  r8.w = 1 + -r4.w;
  r9.w = r8.w * r8.w;
  r9.w = r9.w * r9.w;
  r8.w = r9.w * r8.w;
  r1.x = 1 + -r1.x;
  r9.w = r1.x * r1.x;
  r9.w = r9.w * r9.w;
  r1.x = r9.w * r1.x;
  r9.w = r1.y * r1.y;
  r9.w = dot(r9.ww, r1.ww);
  r9.w = -0.5 + r9.w;
  r8.w = r9.w * r8.w + 1;
  r9.w = r9.w * r1.x + 1;
  r8.w = r9.w * r8.w;
  r6.w = r7.w * r6.w;
  r6.w = 0.785398185 * r6.w;
  r7.w = cmp(cb0[3].w == 0.000000);
  r9.w = max(9.99999975e-005, r6.w);
  r9.w = sqrt(r9.w);
  r6.w = r7.w ? r9.w : r6.w;
  r6.w = r6.w * r4.w;
  r6.w = max(0, r6.w);
  r4.w = r8.w * r4.w;
  r1.w = r1.w * r1.z;
  r1.w = -r1.w * 0.280000001 + 1;
  r8.w = 1 / r10.y;
  r1.w = r7.w ? r1.w : r8.w;
  r3.x = -r3.x + r2.w;
  r3.x = saturate(1 + r3.x);
  r10.xyz = r4.xyz * r4.www;
  r7.xyz = r7.xyz * r5.www + r10.xyz;
  r4.xyz = r6.www * r4.xyz;
  r1.y = 1 + -r1.y;
  r4.w = r1.y * r1.y;
  r4.w = r4.w * r4.w;
  r1.y = r4.w * r1.y;
  r10.xyz = float3(1,1,1) + -r8.xyz;
  r10.xyz = r10.xyz * r1.yyy + r8.xyz;
  r4.xyz = r10.xyz * r4.xyz;
  r4.xyz = r2.xyz * r7.xyz + r4.xyz;
  r7.xyz = r1.www * r9.xyz;
  r9.xyz = r3.xxx + -r8.xyz;
  r1.xyw = r1.xxx * r9.xyz + r8.xyz;
  r1.xyw = r7.xyz * r1.xyw + r4.xyz;
  r0.xyz = r0.xyz * r0.www + r6.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(r3.yzw, r0.xyz);
  r0.x = dot(r6.xyz, r0.xyz);
  r0.xw = max(float2(0,0), r0.xw);
  r0.y = max(9.99999975e-005, r1.z);
  r0.yz = r0.yx * r0.yx;
  r0.y = 2 / r0.y;
  r0.y = -2 + r0.y;
  r0.y = max(9.99999975e-005, r0.y);
  r0.z = r0.z * r2.w + r1.z;
  r1.z = 1 + r0.y;
  r0.w = log2(r0.w);
  r0.xy = r0.xy * r0.zw;
  r0.y = exp2(r0.y);
  r0.y = r1.z * r0.y;
  r0.x = r0.x * 8 + 9.99999975e-005;
  r0.x = r0.y / r0.x;
  r0.y = max(9.99999975e-005, r0.x);
  r0.y = sqrt(r0.y);
  r0.x = r7.w ? r0.y : r0.x;
  r0.xyz = r0.xxx * r8.xyz + r2.xyz;
  r0.xyz = r0.xyz * r5.xyz;
  o0.xyz = r0.xyz * r5.www + r1.xyw;
  o0.w = 1;
  return;
}
