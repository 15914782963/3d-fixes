// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 1c697e71916df7a1-ps_replace.txt
// 3DMigoto: 1c697e71916df7a1 |    Unity headers extracted from Foliage - Double-Sided VFACE Metallic.shader
//    Shader "Beam Team/Foliage/Foliage - Forward Cull Off VFACE Metallic" {
//      Properties {
//      [Header(Diffuse)]  _Color ("Color", Color) = (1,1,1,1)
//       _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//       _MainTex ("Diffuse Albedo (RGB)", 2D) = "white" { }
//      [Header(Packed Normals)]  _PackedTex ("Gloss (R) Normal Y (G) Translucency (B) Normal X (A)", 2D) = "white" { }
//      [Header(Translucency)] [Toggle(BEAM_SPEEDTREE_TRANSLUCENCY)]  _Translucent ("Translucent", Float) = 0
//       _TranslucencyColor ("Translucency Tint", Color) = (0.73,0.85,0.41,1)
//       _TranslucencyIntensity ("Translucency Intensity", Range(1,5)) = 1
//       _TranslucencyViewDependency ("Translucency View Dependency", Range(0,1)) = 0.5
//      [Header(Wind)] [MaterialEnum(None, 0, Fastest, 1, Fast, 2, Better, 3, Best, 4, Palm, 5)]  _WindQuality ("Wind Quality", Range(0,5)) = 0
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="AlphaTest" "RenderType"="Foliage" }
//        Pass 2/3 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="AlphaTest" "RenderType"="Foliage" }
//          ZWrite Off
//          Cull Off
//          Blend One One
//          GpuProgramID 120738
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 201
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Foliage - Double-Sided VFACE Metallic.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 93 2 0
//   Keywords { "DIRECTIONAL" "SUNSHINE_FILTER_HARD" "BEAM_SPEEDTREE_TRANSLUCENCY" }
//   undeciphered2: 1 2 3 2 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 656
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Float 528 [_Cutoff]
//   Vector 544 [_Color]
//   Vector 576 [_TranslucencyColor]
//   Float 592 [_TranslucencyIntensity]
//   Float 596 [_TranslucencyViewDependency]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_PackedTex] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:03:15 2016
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[38];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  uint v7 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 1c697e71916df7a1-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = t0.Sample(s0_s, v5.xy).xyzw;
  r0.w = r0.w * cb0[34].w + -cb0[33].x;
  r0.xyz = cb0[34].xyz * r0.xyz;
  r0.xyz = cb0[2].www * r0.xyz;
  r0.w = cmp(r0.w < 0);
  if (r0.w != 0) discard;
  r1.xyzw = t1.Sample(s1_s, v5.xy).xyzw;
  r2.xy = r1.wy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r2.xy, r2.xy);
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r2.z = sqrt(r0.w);
  r2.xyz = v7.xxx ? r2.xyz : -r2.xyz;
  r3.x = dot(v1.xyz, r2.xyz);
  r3.y = dot(v2.xyz, r2.xyz);
  r3.z = dot(v3.xyz, r2.xyz);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r3.xyz * r0.www;
  r3.xyz = _WorldSpaceCameraPos.xyz + -v4.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r3.xyz * r0.www;
  r3.xyz = r3.xyz * r0.www + cb2[0].xyz;
  r0.w = dot(r2.xyz, r4.xyz);
  r1.y = 9.99999975e-006 + -r0.w;
  r0.w = cmp(r0.w < 0);
  r5.xyz = r4.xyz * r1.yyy + r2.xyz;
  r5.xyz = r0.www ? r5.xyz : r2.xyz;
  r0.w = dot(r2.xyz, cb2[0].xyz);
  r0.w = saturate(-r0.w);
  r1.y = dot(r3.xyz, r3.xyz);
  r1.y = max(0.00100000005, r1.y);
  r1.y = rsqrt(r1.y);
  r2.xyz = r3.xyz * r1.yyy;
  r1.y = dot(r5.xyz, r2.xyz);
  r1.w = dot(cb2[0].xyz, r2.xyz);
  r1.yw = max(float2(0,0), r1.yw);
  r1.y = r1.y * r1.y;
  r1.x = -r1.x * v5.z + 1;
  r1.z = v5.z * r1.z;
  r2.x = r1.x * r1.x;
  r2.y = r2.x * r2.x + -1;
  r1.y = r1.y * r2.y + 1;
  r2.y = 3.14159274 * r1.y;
  r1.y = r2.y * r1.y + 1.00000001e-007;
  r2.y = r2.x * r2.x;
  r1.y = r2.y / r1.y;
  r2.y = dot(r5.xyz, r4.xyz);
  r2.z = dot(r5.xyz, cb2[0].xyz);
  r2.z = max(0, r2.z);
  r2.w = saturate(dot(r4.xyz, -cb2[0].xyz));
  r2.w = r2.w + -r0.w;
  r0.w = cb0[37].y * r2.w + r0.w;
  r3.xyz = cb0[6].xyz * r0.www;
  r0.w = max(0, r2.y);
  r2.y = -r1.x * r1.x + 1;
  r2.w = r0.w * r2.y + r2.x;
  r2.x = r2.z * r2.y + r2.x;
  r2.x = r2.x * r0.w;
  r0.w = 1 + -r0.w;
  r2.x = r2.z * r2.w + r2.x;
  r2.x = 9.99999975e-006 + r2.x;
  r2.x = 2 / r2.x;
  r1.y = r2.x * r1.y;
  r1.y = 0.785398185 * r1.y;
  r2.x = max(9.99999975e-005, r1.y);
  r2.x = sqrt(r2.x);
  r2.y = cmp(cb0[3].w == 0.000000);
  r1.y = r2.y ? r2.x : r1.y;
  r1.y = r1.y * r2.z;
  r1.y = max(0, r1.y);
  r2.xyw = cb0[6].xyz * r1.yyy;
  r1.y = 1 + -r1.w;
  r1.w = r1.w * r1.w;
  r1.x = dot(r1.ww, r1.xx);
  r1.x = -0.5 + r1.x;
  r1.w = r1.y * r1.y;
  r1.w = r1.w * r1.w;
  r1.y = r1.w * r1.y;
  r4.xyz = float3(1,1,1) + -cb0[2].xyz;
  r4.xyz = r4.xyz * r1.yyy + cb0[2].xyz;
  r2.xyw = r4.xyz * r2.xyw;
  r1.y = r0.w * r0.w;
  r1.y = r1.y * r1.y;
  r0.w = r1.y * r0.w;
  r0.w = r1.x * r0.w + 1;
  r1.y = 1 + -r2.z;
  r1.w = r1.y * r1.y;
  r1.w = r1.w * r1.w;
  r1.y = r1.w * r1.y;
  r1.x = r1.x * r1.y + 1;
  r0.w = r1.x * r0.w;
  r0.w = r0.w * r2.z;
  r1.xyw = cb0[6].xyz * r0.www;
  r1.xyw = r0.xyz * r1.xyw + r2.xyw;
  r2.xyz = cb0[37].xxx * cb0[36].xyz;
  r0.xyz = r2.xyz * r0.xyz;
  r0.xyz = r3.xyz * r0.xyz;
  o0.xyz = r0.xyz * r1.zzz + r1.xyw;
  o0.w = 1;
  return;
}
