// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 9a49f50bb65bd23e-ps_replace.txt
// 3DMigoto: 9a49f50bb65bd23e |    Unity headers extracted from Bumped Diffuse - Cutout and Crafting.shader
//    Shader "Beam Team/Standard/Transparent/Bumped Diffuse - Cutout and Crafting" {
//      Properties {
//       _Color ("Diffuse Color", Color) = (1,1,1,1)
//       _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//       _MainTex ("Diffuse Albedo (RGB) Alpha (A)", 2D) = "white" { }
//       _BumpMap ("Normal Map", 2D) = "bump" { }
//      [HideInInspector]  _HighlightRimColor ("Highlight Rim Color", Color) = (0,0,0,0)
//      }
//      Fallback Off
//      SubShader 1/1 {
//        LOD 400
//        Tags { "QUEUE"="AlphaTest" "FORCENOSHADOWCASTING"="true" "RenderType"="TransparentCutout" }
//        Pass 1/1 {
//          Name "DEFERRED"
//          Tags { "LIGHTMODE"="Deferred" "QUEUE"="AlphaTest" "FORCENOSHADOWCASTING"="true" "RenderType"="TransparentCutout" }
//          GpuProgramID 55215
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 119
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Bumped Diffuse - Cutout and Crafting.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 59 5 0
//   Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_ON" "SUNSHINE_FILTER_HARD" "HDR_LIGHT_PREPASS_OFF" }
//   undeciphered2: 1 5 2 3 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 640
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 80 [unity_DynamicLightmap_HDR]
//   Vector 528 [_Color]
//   Float 624 [_Cutoff]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   SetTexture 0 [_MainTex] 2D 1
//   SetTexture 1 [_BumpMap] 2D 2
//   SetTexture 2 [unity_DynamicLightmap] 2D 0
//   SetTexture 3 [unity_DynamicDirectionality] 2D -1
//   SetTexture 4 [unity_DynamicNormal] 2D -1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:00:17 2016
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[40];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 9a49f50bb65bd23e-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = t0.Sample(s1_s, v1.xy).xyzw;
  r0.w = r0.w * cb0[33].w + -cb0[39].x;
  r0.xyz = cb0[33].xyz * r0.xyz;
  r0.xyz = cb0[2].www * r0.xyz;
  r0.w = cmp(r0.w < 0);
  if (r0.w != 0) discard;
  o0.xyz = r0.xyz;
  o0.w = 1;
  o1.xyz = cb0[2].xyz;
  o1.w = 0;
  o2.w = 1;
  r1.xyzw = t1.Sample(s2_s, v1.xy).xyzw;
  r1.xy = r1.wy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r1.xy, r1.xy);
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r1.z = sqrt(r0.w);
  r2.x = dot(v2.xyz, r1.xyz);
  r2.y = dot(v3.xyz, r1.xyz);
  r2.z = dot(v4.xyz, r1.xyz);
  o2.xyz = r2.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r1.x = v2.w;
  r1.y = v3.w;
  r1.z = v4.w;
  r1.xyz = _WorldSpaceCameraPos.xyz + -r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyzw = t3.Sample(s0_s, v8.zw).xyzw;
  r3.xyz = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = sqrt(r1.w);
  r1.w = max(0.00100000005, r1.w);
  r3.xyz = r3.xyz / r1.www;
  r1.xyz = r1.xyz * r0.www + r3.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = dot(r2.xyz, r1.xyz);
  r2.x = dot(r2.xyz, r3.xyz);
  r2.x = max(0, r2.x);
  r1.x = dot(r3.xyz, r1.xyz);
  r1.x = max(0, r1.x);
  r1.x = r1.x * 8 + 9.99999975e-005;
  r0.w = max(0, r0.w);
  r0.w = log2(r0.w);
  r0.w = 9.99999975e-005 * r0.w;
  r0.w = exp2(r0.w);
  r0.w = 1.00010002 * r0.w;
  r0.w = r0.w / r1.x;
  r1.x = max(9.99999975e-005, r0.w);
  r1.x = sqrt(r1.x);
  r1.y = cmp(cb0[3].w == 0.000000);
  r0.w = r1.y ? r1.x : r0.w;
  r1.xyz = r0.www * cb0[2].xyz + r0.xyz;
  r4.xyzw = t2.Sample(s0_s, v8.zw).xyzw;
  r0.w = cb0[5].x * r4.w;
  r2.yzw = r0.www * r4.xyz;
  r2.yzw = log2(r2.yzw);
  r2.yzw = cb0[5].yyy * r2.yzw;
  r2.yzw = exp2(r2.yzw);
  r4.xyzw = t4.Sample(s0_s, v8.zw).xyzw;
  r4.xyz = r4.zyx * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r4.xyz, r3.xyz);
  r0.w = max(0.125, r0.w);
  r2.yzw = r2.yzw / r0.www;
  r3.xyz = r2.yzw * r1.www;
  r0.w = 1 + -r1.w;
  r2.yzw = r2.yzw * r0.www;
  r2.yzw = r2.yzw * r2.xxx;
  r1.xyz = r3.xyz * r1.xyz;
  r1.xyz = r1.xyz * r2.xxx;
  r0.xyz = r0.xyz * r2.yzw + r1.xyz;
  o3.xyz = exp2(-r0.xyz);
  o3.w = 1;
  return;
}
