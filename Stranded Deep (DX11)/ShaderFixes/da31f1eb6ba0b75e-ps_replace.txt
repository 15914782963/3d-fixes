// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe da31f1eb6ba0b75e-ps_replace.txt
// 3DMigoto: da31f1eb6ba0b75e |    Unity headers extracted from Skin.shader
//    Shader "Eisko/Skin" {
//      Properties {
//       _ColorAlbedo ("RGB: Color skin", Color) = (1,1,1,0.02)
//      [NoScaleOffset]  _AlbedoTex ("Albedo", 2D) = "white" { }
//       _AlbedoDesaturation ("Light luminance", Range(0,1)) = 0.5
//      [NoScaleOffset]  _NormalMap ("NormalMap", 2D) = "bump" { }
//      [NoScaleOffset]  _MicrostructureV ("Microstructure RG - Variance B", 2D) = "bump" { }
//       _VarianceDetailMultiplier ("Variance Detail Multiplier", Range(0,50)) = 1
//       _MicrostructureTile ("Microstructure tile", Float) = 0
//      [NoScaleOffset]  _SpecularMap ("Multimap:(R=F0, G=Thickness, B=AO, A=Roughness)", 2D) = "white" { }
//       _tColor ("Translucency color", Color) = (1,0.5,0,1)
//       thickness ("Thickness", Range(0.001,2)) = 1
//       _ColorAO ("RGB: Color AO", Color) = (0.4,0.15,0.13,1)
//       AOsaturation ("AO Strenght", Range(0.01,3)) = 0.5
//       _LobeBlend ("Lobe Blend", Range(0,1)) = 0.85
//       Roughness ("Roughness", Range(0.0001,3)) = 1
//       _SpecStrength ("Specular Strength", Range(0,5)) = 1
//      [HideInInspector]  _DispMap ("Displacement Map", 2D) = "bump" { }
//      [HideInInspector]  _isSkin ("HIDDEN--IS SKIN", Range(0,1)) = 1
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry" "RenderType"="Opaque" "PerformanceChecks"="False" }
//        Pass 2/3 {
//          Name "FORWARD_ADD_SKIN"
//          Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
//          Lighting On
//          ZWrite Off
//          Blend One One
//          GpuProgramID 67680
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 87
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Skin.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 162 10 2
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
//   undeciphered2: 1 7 3 7 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 464
//   Float 0 [Roughness]
//   Float 4 [_MicrostructureTile]
//   Float 8 [_LobeBlend]
//   Float 12 [AOsaturation]
//   Float 20 [_VarianceDetailMultiplier]
//   Float 24 [_SpecStrength]
//   Vector 304 [_LightColor0]
//   ScalarInt 452 [_blendShape]
//   Matrix 144 [_bindPose]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   SetTexture 0 [_NormalMap] 2D 1
//   SetTexture 1 [_MicrostructureV] 2D 0
//   SetTexture 2 [_normalMapBSUNC] 2D 5
//   SetTexture 3 [_normalMapBSCPR] 2D 6
//   SetTexture 4 [_SpecularMap] 2D 2
//   SetTexture 5 [_DispMap] 2D 3
//   SetTexture 6 [_ShadowMapTexture] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:07:36 2016
Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[29];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD8,
  float4 v7 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe da31f1eb6ba0b75e-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = asint(cb0[28].y);
  r0.x = cmp(r0.x == 1.000000);
  if (r0.x != 0) {
    r0.xyzw = t0.Sample(s1_s, v1.xy).xyzw;
    r0.xy = r0.wy * float2(2,2) + float2(-1,-1);
    r1.x = dot(r0.xy, r0.xy);
    r1.x = min(1, r1.x);
    r1.x = 1 + -r1.x;
    r0.w = sqrt(r1.x);
    r0.z = 1 + r0.w;
    r1.xy = cb0[0].yy * v1.xy;
    r1.xyzw = t1.Sample(s0_s, r1.xy).xyzw;
    r1.xy = float2(-0.5,-0.5) + r1.xy;
    r1.xy = r1.xy + r1.xy;
    r1.w = -r1.x * r1.x + 1;
    r1.w = -r1.y * r1.y + r1.w;
    r1.z = sqrt(r1.w);
    r1.w = dot(r1.xyz, r1.xyz);
    r1.w = rsqrt(r1.w);
    r1.xyz = r1.xyz * r1.www;
    r1.xyz = float3(-1,-1,1) * r1.xyz;
    r2.xyz = r0.xyz / r0.zzz;
    r0.z = dot(r0.xyz, r1.xyz);
    r1.xyz = r2.xyz * r0.zzz + -r1.xyz;
    r0.z = dot(r1.xyz, r1.xyz);
    r0.z = rsqrt(r0.z);
    r1.xyz = r1.xyz * r0.zzz + -r0.xyw;
    r0.xyz = cb0[0].zzz * r1.xyz + r0.xyw;
    r1.xyz = v5.xyz * r0.yyy;
    r0.xyw = r0.xxx * v4.xyz + r1.xyz;
    r0.xyz = r0.zzz * v3.xyz + r0.xyw;
    r0.w = dot(r0.xyz, r0.xyz);
    r0.w = rsqrt(r0.w);
    r1.xyzw = t2.Sample(s5_s, v1.xy).xyzw;
    r2.xyzw = t3.Sample(s6_s, v1.xy).xyzw;
    r1.xyz = float3(-0.5,-0.5,-0.5) + r1.xyz;
    r1.xyz = r1.xyz + r1.xyz;
    r3.xyz = r1.xyz * r1.www;
    r1.xyz = r3.xyz * float3(0.25,0.25,0.25) + r1.xyz;
    r2.xyz = float3(-0.5,-0.5,-0.5) + r2.xyz;
    r2.xyz = r2.xyz + r2.xyz;
    r3.xyz = r2.xyz * r2.www;
    r2.xyz = r3.xyz * float3(0.25,0.25,0.25) + r2.xyz;
    r3.xyz = cb0[10].xyz * r1.yyy;
    r1.xyw = cb0[9].xyz * r1.xxx + r3.xyz;
    r1.xyz = cb0[11].xyz * r1.zzz + r1.xyw;
    r1.xyz = v6.yyy * r1.xyz;
    r0.xyz = r0.xyz * r0.www + r1.xyz;
    r1.xyz = cb0[10].xyz * r2.yyy;
    r1.xyz = cb0[9].xyz * r2.xxx + r1.xyz;
    r1.xyz = cb0[11].xyz * r2.zzz + r1.xyz;
    r0.xyz = v6.xxx * r1.xyz + r0.xyz;
    r0.w = dot(r0.xyz, r0.xyz);
    r0.w = rsqrt(r0.w);
    r0.xyz = r0.xyz * r0.www;
  } else {
    r1.xyzw = t0.Sample(s1_s, v1.xy).xyzw;
    r1.xy = r1.wy * float2(2,2) + float2(-1,-1);
    r0.w = dot(r1.xy, r1.xy);
    r0.w = min(1, r0.w);
    r0.w = 1 + -r0.w;
    r1.w = sqrt(r0.w);
    r1.z = 1 + r1.w;
    r2.xy = cb0[0].yy * v1.xy;
    r2.xyzw = t1.Sample(s0_s, r2.xy).xyzw;
    r2.xy = float2(-0.5,-0.5) + r2.xy;
    r2.xy = r2.xy + r2.xy;
    r0.w = -r2.x * r2.x + 1;
    r0.w = -r2.y * r2.y + r0.w;
    r2.z = sqrt(r0.w);
    r0.w = dot(r2.xyz, r2.xyz);
    r0.w = rsqrt(r0.w);
    r2.xyz = r2.xyz * r0.www;
    r2.xyz = float3(-1,-1,1) * r2.xyz;
    r3.xyz = r1.xyz / r1.zzz;
    r0.w = dot(r1.xyz, r2.xyz);
    r2.xyz = r3.xyz * r0.www + -r2.xyz;
    r0.w = dot(r2.xyz, r2.xyz);
    r0.w = rsqrt(r0.w);
    r2.xyz = r2.xyz * r0.www + -r1.xyw;
    r1.xyz = cb0[0].zzz * r2.xyz + r1.xyw;
    r2.xyz = v5.xyz * r1.yyy;
    r1.xyw = r1.xxx * v4.xyz + r2.xyz;
    r1.xyz = r1.zzz * v3.xyz + r1.xyw;
    r0.w = dot(r1.xyz, r1.xyz);
    r0.w = rsqrt(r0.w);
    r0.xyz = r1.xyz * r0.www;
  }
  r1.xyzw = t4.Sample(s2_s, v1.xy).xyzw;
  r1.xyz = log2(r1.xwz);
  r0.w = cb0[1].z * r1.x;
  r0.w = exp2(r0.w);
  r0.w = min(1, r0.w);
  r1.xy = cb0[0].xw * r1.yz;
  r1.xy = exp2(r1.xy);
  r1.xy = min(float2(1,1), r1.xy);
  r2.xyzw = t5.Sample(s3_s, v1.xy).xyzw;
  r1.zw = cb0[0].yy * v1.xy;
  r3.xyzw = t1.Sample(s0_s, r1.zw).xyzw;
  r1.z = saturate(cb0[1].y * r3.z);
  r2.yzw = _WorldSpaceCameraPos.xyz + -v2.xyz;
  r1.w = dot(r2.yzw, r2.yzw);
  r1.w = rsqrt(r1.w);
  r3.xyz = r2.yzw * r1.www;
  r4.xy = v7.xy / v7.ww;
  r4.xyzw = t6.Sample(s4_s, r4.xy).xyzw;
  r4.yzw = -v2.xyz * cb2[0].www + cb2[0].xyz;
  r3.w = dot(r4.yzw, r4.yzw);
  r3.w = rsqrt(r3.w);
  r4.yzw = r4.yzw * r3.www;
  r5.xyz = cb0[19].xyz * r4.xxx;
  r3.w = dot(r0.xyz, r4.yzw);
  r4.x = dot(r0.xyz, r3.xyz);
  r2.yzw = r2.yzw * r1.www + r4.yzw;
  r2.yzw = float3(0.5,0.5,0.5) * r2.yzw;
  r1.w = dot(r2.yzw, r2.yzw);
  r1.w = rsqrt(r1.w);
  r2.yzw = r2.yzw * r1.www;
  r0.x = saturate(dot(r0.xyz, r2.yzw));
  r0.y = saturate(dot(r3.xyz, r2.yzw));
  r0.z = 1 + -r1.x;
  r1.w = r3.w * r3.w;
  r1.w = r0.z * r1.w + r1.x;
  r1.w = sqrt(r1.w);
  r1.w = r3.w + r1.w;
  r1.w = 1 / r1.w;
  r2.y = r4.x * r4.x;
  r0.z = r0.z * r2.y + r1.x;
  r0.z = sqrt(r0.z);
  r0.z = r4.x + r0.z;
  r0.z = 1 / r0.z;
  r0.z = r1.w * r0.z;
  r1.x = r1.x * r1.x;
  r1.x = 2 / r1.x;
  r1.x = -2 + r1.x;
  r1.x = log2(r1.x);
  r1.x = saturate(0.0769230798 * r1.x);
  r1.w = 13 * r1.x;
  r1.w = exp2(r1.w);
  r2.y = 2 + r1.w;
  r2.y = 0.159155071 * r2.y;
  r0.x = log2(r0.x);
  r2.z = r1.w * r0.x;
  r2.z = exp2(r2.z);
  r2.y = r2.y * r2.z;
  r2.y = 0.78539753 * r2.y;
  r2.z = max(r1.x, r0.w);
  r2.z = r2.z + -r0.w;
  r0.y = 1 + -r0.y;
  r2.w = r0.y * r0.y;
  r2.w = r2.w * r2.w;
  r0.y = r2.w * r0.y;
  r2.z = r2.z * r0.y + r0.w;
  r2.y = r2.y * r2.z;
  r2.y = r2.y * r0.z;
  r2.y = max(0, r2.y);
  r1.z = r1.z * r1.z;
  r1.z = r1.w * r1.z + 1;
  r1.z = r1.w / r1.z;
  r1.w = 2 + r1.z;
  r1.w = 0.159155071 * r1.w;
  r0.x = r1.z * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r1.w * r0.x;
  r0.x = 0.78539753 * r0.x;
  r1.z = r2.x * r0.w;
  r1.x = max(r1.z, r1.x);
  r0.w = -r0.w * r2.x + r1.x;
  r0.y = r0.w * r0.y + r1.z;
  r0.x = r0.x * r0.y;
  r0.x = r0.x * r0.z;
  r0.x = max(0, r0.x);
  r0.x = r0.x + -r2.y;
  r0.x = cb0[0].z * r0.x + r2.y;
  r0.xyz = r0.xxx * r5.xyz;
  o0.xyz = r0.xyz * r1.yyy;
  o0.w = 1;
  return;
}
