// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe b72fb6c74fd54d14-ps_replace.txt
// 3DMigoto: b72fb6c74fd54d14 |    Unity headers extracted from Standard-FirstPass.shader
//    Shader "Nature/Terrain/Standard" {
//      Properties {
//      [HideInInspector]  _Control ("Control (RGBA)", 2D) = "red" { }
//      [HideInInspector]  _Splat3 ("Layer 3 (A)", 2D) = "white" { }
//      [HideInInspector]  _Splat2 ("Layer 2 (B)", 2D) = "white" { }
//      [HideInInspector]  _Splat1 ("Layer 1 (G)", 2D) = "white" { }
//      [HideInInspector]  _Splat0 ("Layer 0 (R)", 2D) = "white" { }
//      [HideInInspector]  _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
//      [HideInInspector]  _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
//      [HideInInspector]  _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
//      [HideInInspector]  _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
//      [HideInInspector] [Gamma]  _Metallic0 ("Metallic 0", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic1 ("Metallic 1", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic2 ("Metallic 2", Range(0,1)) = 0
//      [HideInInspector] [Gamma]  _Metallic3 ("Metallic 3", Range(0,1)) = 0
//      [HideInInspector]  _Smoothness0 ("Smoothness 0", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness1 ("Smoothness 1", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness2 ("Smoothness 2", Range(0,1)) = 1
//      [HideInInspector]  _Smoothness3 ("Smoothness 3", Range(0,1)) = 1
//      [HideInInspector]  _MainTex ("BaseMap (RGB)", 2D) = "white" { }
//      [HideInInspector]  _Color ("Main Color", Color) = (1,1,1,1)
//      }
//      Dependency "AddPassShader" = "Hidden/TerrainEngine/Splatmap/Standard-AddPass"
//      Dependency "BaseMapShader" = "Hidden/TerrainEngine/Splatmap/Standard-Base"
//      Fallback "Nature/Terrain/Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          GpuProgramID 35214
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 87
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Standard-FirstPass.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 202 12 4
//   Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_ON" "_TERRAIN_NORMAL_MAP" }
//   undeciphered2: 1 14 4 12 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 240
//   Vector 32 [unity_ColorSpaceDielectricSpec]
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 80 [unity_DynamicLightmap_HDR]
//   Vector 96 [_LightColor0]
//   Float 144 [_Metallic0]
//   Float 148 [_Metallic1]
//   Float 152 [_Metallic2]
//   Float 156 [_Metallic3]
//   Float 160 [_Smoothness0]
//   Float 164 [_Smoothness1]
//   Float 168 [_Smoothness2]
//   Float 172 [_Smoothness3]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   SetTexture 0 [_Control] 2D 3
//   SetTexture 1 [_Splat0] 2D 4
//   SetTexture 2 [_Splat1] 2D 5
//   SetTexture 3 [_Splat2] 2D 6
//   SetTexture 4 [_Splat3] 2D 7
//   SetTexture 5 [_Normal0] 2D 8
//   SetTexture 6 [_Normal1] 2D 9
//   SetTexture 7 [_Normal2] 2D 10
//   SetTexture 8 [_Normal3] 2D 11
//   SetTexture 9 [unity_DynamicLightmap] 2D 0
//   SetTexture 10 [unity_DynamicDirectionality] 2D -1
//   SetTexture 11 [unity_DynamicNormal] 2D -1
//   SetTexture 12 [unity_SpecCube0] CUBE 1
//   SetTexture 13 [unity_SpecCube1] CUBE 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:16:44 2016
TextureCube<float4> t13 : register(t13);

TextureCube<float4> t12 : register(t12);

Texture2D<float4> t11 : register(t11);

Texture2D<float4> t10 : register(t10);

Texture2D<float4> t9 : register(t9);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s11_s : register(s11);

SamplerState s10_s : register(s10);

SamplerState s9_s : register(s9);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[11];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD8,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe b72fb6c74fd54d14-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = v3.w;
  r0.y = v4.w;
  r0.z = v5.w;
  r1.xyz = _WorldSpaceCameraPos.xyz + -r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r1.xyz * r0.www;
  r3.xyzw = t0.Sample(s3_s, v6.xy).xyzw;
  r1.w = dot(r3.xyzw, float4(1,1,1,1));
  r2.w = 0.00100000005 + r1.w;
  r3.xyzw = r3.xyzw / r2.wwww;
  r4.xyzw = t1.Sample(s4_s, v1.xy).xyzw;
  r4.xyzw = r4.xyzw * r3.xxxx;
  r4.w = cb0[10].x * r4.w;
  r5.xyzw = t2.Sample(s5_s, v1.zw).xyzw;
  r5.xyzw = r5.xyzw * r3.yyyy;
  r5.w = cb0[10].y * r5.w;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r5.xyzw = t3.Sample(s6_s, v2.xy).xyzw;
  r5.xyzw = r5.xyzw * r3.zzzz;
  r5.w = cb0[10].z * r5.w;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r5.xyzw = t4.Sample(s7_s, v2.zw).xyzw;
  r5.xyzw = r5.xyzw * r3.wwww;
  r5.w = cb0[10].w * r5.w;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r5.xyzw = t5.Sample(s8_s, v1.xy).xyzw;
  r6.xyzw = t6.Sample(s9_s, v1.zw).xyzw;
  r5.xz = r6.wy * r3.yy;
  r5.xy = r3.xx * r5.wy + r5.xz;
  r6.xyzw = t7.Sample(s10_s, v2.xy).xyzw;
  r5.xy = r3.zz * r6.wy + r5.xy;
  r6.xyzw = t8.Sample(s11_s, v2.zw).xyzw;
  r5.xy = r3.ww * r6.wy + r5.xy;
  r5.xy = r5.xy * float2(2,2) + float2(-1,-1);
  r2.w = dot(r5.xy, r5.xy);
  r2.w = min(1, r2.w);
  r2.w = 1 + -r2.w;
  r5.z = sqrt(r2.w);
  r2.w = dot(r3.xyzw, cb0[9].xyzw);
  r3.x = dot(v3.xyz, r5.xyz);
  r3.y = dot(v4.xyz, r5.xyz);
  r3.z = dot(v5.xyz, r5.xyz);
  r3.w = 1 + -r4.w;
  r5.x = dot(-r2.xyz, r3.xyz);
  r5.x = r5.x + r5.x;
  r5.xyz = r3.xyz * -r5.xxx + -r2.xyz;
  r6.xyzw = t9.Sample(s0_s, v7.zw).xyzw;
  r5.w = cb0[5].x * r6.w;
  r6.xyz = r5.www * r6.xyz;
  r6.xyz = log2(r6.xyz);
  r6.xyz = cb0[5].yyy * r6.xyz;
  r6.xyz = exp2(r6.xyz);
  r7.xyzw = t10.Sample(s0_s, v7.zw).xyzw;
  r8.xyzw = t11.Sample(s0_s, v7.zw).xyzw;
  r7.xyz = r7.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r5.w = dot(r7.xyz, r7.xyz);
  r5.w = sqrt(r5.w);
  r5.w = max(0.00100000005, r5.w);
  r7.xyz = r7.xyz / r5.www;
  r8.xyz = r8.zyx * float3(2,2,2) + float3(-1,-1,-1);
  r6.w = dot(r8.xyz, r7.xyz);
  r6.w = max(0.125, r6.w);
  r6.xyz = r6.xyz / r6.www;
  r6.w = dot(r3.xyz, r7.xyz);
  r6.w = max(0, r6.w);
  r7.w = 1 + -r5.w;
  r8.xyz = r7.www * r6.xyz;
  r6.xyz = r6.xyz * r5.www;
  r5.w = cmp(0 < cb3[2].w);
  if (r5.w != 0) {
    r5.w = dot(r5.xyz, r5.xyz);
    r5.w = rsqrt(r5.w);
    r9.xyz = r5.xyz * r5.www;
    r10.xyz = cb3[0].xyz + -r0.xyz;
    r10.xyz = r10.xyz / r9.xyz;
    r11.xyz = cb3[1].xyz + -r0.xyz;
    r11.xyz = r11.xyz / r9.xyz;
    r12.xyz = cmp(float3(0,0,0) < r9.xyz);
    r10.xyz = r12.xyz ? r10.xyz : r11.xyz;
    r5.w = min(r10.x, r10.y);
    r5.w = min(r5.w, r10.z);
    r10.xyz = -cb3[2].xyz + r0.xyz;
    r9.xyz = r9.xyz * r5.www + r10.xyz;
  } else {
    r9.xyz = r5.xyz;
  }
  r5.w = -r3.w * 0.699999988 + 1.70000005;
  r5.w = r5.w * r3.w;
  r5.w = 6 * r5.w;
  r9.xyzw = t12.SampleLevel(s1_s, r9.xyz, r5.w).xyzw;
  r7.w = log2(r9.w);
  r7.w = cb3[3].y * r7.w;
  r7.w = exp2(r7.w);
  r7.w = cb3[3].x * r7.w;
  r10.xyz = r7.www * r9.xyz;
  r8.w = cmp(cb3[1].w < 0.999989986);
  if (r8.w != 0) {
    r8.w = cmp(0 < cb3[6].w);
    if (r8.w != 0) {
      r8.w = dot(r5.xyz, r5.xyz);
      r8.w = rsqrt(r8.w);
      r11.xyz = r8.www * r5.xyz;
      r12.xyz = cb3[4].xyz + -r0.xyz;
      r12.xyz = r12.xyz / r11.xyz;
      r13.xyz = cb3[5].xyz + -r0.xyz;
      r13.xyz = r13.xyz / r11.xyz;
      r14.xyz = cmp(float3(0,0,0) < r11.xyz);
      r12.xyz = r14.xyz ? r12.xyz : r13.xyz;
      r8.w = min(r12.x, r12.y);
      r8.w = min(r8.w, r12.z);
      r0.xyz = -cb3[6].xyz + r0.xyz;
      r5.xyz = r11.xyz * r8.www + r0.xyz;
    }
    r5.xyzw = t13.SampleLevel(s2_s, r5.xyz, r5.w).xyzw;
    r0.x = log2(r5.w);
    r0.x = cb3[7].y * r0.x;
    r0.x = exp2(r0.x);
    r0.x = cb3[7].x * r0.x;
    r0.xyz = r0.xxx * r5.xyz;
    r5.xyz = r7.www * r9.xyz + -r0.xyz;
    r10.xyz = cb3[1].www * r5.xyz + r0.xyz;
  }
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r3.xyz * r0.xxx;
  r3.xyz = -cb0[2].xyz + r4.xyz;
  r3.xyz = r2.www * r3.xyz + cb0[2].xyz;
  r2.w = -r2.w * cb0[2].w + cb0[2].w;
  r4.xyz = r4.xyz * r2.www;
  r5.xyz = r1.xyz * r0.www + cb2[0].xyz;
  r5.w = dot(r5.xyz, r5.xyz);
  r5.w = max(0.00100000005, r5.w);
  r5.w = rsqrt(r5.w);
  r5.xyz = r5.xyz * r5.www;
  r5.w = dot(r0.xyz, r2.xyz);
  r7.w = cmp(r5.w < 0);
  r5.w = 9.99999975e-006 + -r5.w;
  r9.xyz = r2.xyz * r5.www + r0.xyz;
  r9.xyz = r7.www ? r9.xyz : r0.xyz;
  r5.w = dot(r9.xyz, cb2[0].xyz);
  r5.w = max(0, r5.w);
  r7.w = dot(r9.xyz, r5.xyz);
  r7.w = max(0, r7.w);
  r2.x = dot(r9.xyz, r2.xyz);
  r2.y = dot(cb2[0].xyz, r5.xyz);
  r2.xy = max(float2(0,0), r2.xy);
  r2.z = r3.w * r3.w;
  r5.x = -r3.w * r3.w + 1;
  r5.y = r2.x * r5.x + r2.z;
  r5.x = r5.w * r5.x + r2.z;
  r5.x = r5.x * r2.x;
  r5.x = r5.w * r5.y + r5.x;
  r5.x = 9.99999975e-006 + r5.x;
  r5.x = 2 / r5.x;
  r5.y = r2.z * r2.z;
  r5.z = r7.w * r7.w;
  r9.xy = r2.zz * r2.zz + float2(-1,1);
  r5.z = r5.z * r9.x + 1;
  r7.w = 3.14159274 * r5.z;
  r5.z = r7.w * r5.z + 1.00000001e-007;
  r5.y = r5.y / r5.z;
  r5.z = 1 + -r5.w;
  r7.w = r5.z * r5.z;
  r7.w = r7.w * r7.w;
  r5.z = r7.w * r5.z;
  r2.x = 1 + -r2.x;
  r7.w = r2.x * r2.x;
  r7.w = r7.w * r7.w;
  r2.x = r7.w * r2.x;
  r7.w = r2.y * r2.y;
  r7.w = dot(r7.ww, r3.ww);
  r7.w = -0.5 + r7.w;
  r5.z = r7.w * r5.z + 1;
  r7.w = r7.w * r2.x + 1;
  r5.z = r7.w * r5.z;
  r5.xz = r5.xz * r5.yw;
  r5.x = 0.785398185 * r5.x;
  r5.y = cmp(cb0[3].w == 0.000000);
  r7.w = max(9.99999975e-005, r5.x);
  r7.w = sqrt(r7.w);
  r5.x = r5.y ? r7.w : r5.x;
  r5.x = r5.x * r5.w;
  r5.x = max(0, r5.x);
  r3.w = r3.w * r2.z;
  r3.w = -r3.w * 0.280000001 + 1;
  r5.w = 1 / r9.y;
  r3.w = r5.y ? r3.w : r5.w;
  r2.w = r4.w + -r2.w;
  r2.w = saturate(1 + r2.w);
  r9.xyz = cb0[6].xyz * r5.zzz;
  r8.xyz = r8.xyz * r6.www + r9.xyz;
  r5.xzw = cb0[6].xyz * r5.xxx;
  r2.y = 1 + -r2.y;
  r7.w = r2.y * r2.y;
  r7.w = r7.w * r7.w;
  r2.y = r7.w * r2.y;
  r9.xyz = float3(1,1,1) + -r3.xyz;
  r9.xyz = r9.xyz * r2.yyy + r3.xyz;
  r5.xzw = r9.xyz * r5.xzw;
  r5.xzw = r4.xyz * r8.xyz + r5.xzw;
  r8.xyz = r3.www * r10.xyz;
  r9.xyz = r2.www + -r3.xyz;
  r2.xyw = r2.xxx * r9.xyz + r3.xyz;
  r2.xyw = r8.xyz * r2.xyw + r5.xzw;
  r1.xyz = r1.xyz * r0.www + r7.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.x = dot(r0.xyz, r1.xyz);
  r0.y = dot(r7.xyz, r1.xyz);
  r0.xy = max(float2(0,0), r0.xy);
  r0.z = max(9.99999975e-005, r2.z);
  r0.zw = r0.zy * r0.zy;
  r0.z = 2 / r0.z;
  r0.z = -2 + r0.z;
  r0.z = max(9.99999975e-005, r0.z);
  r0.w = r0.w * r4.w + r2.z;
  r1.x = 1 + r0.z;
  r0.x = log2(r0.x);
  r0.xy = r0.zy * r0.xw;
  r0.x = exp2(r0.x);
  r0.x = r1.x * r0.x;
  r0.y = r0.y * 8 + 9.99999975e-005;
  r0.x = r0.x / r0.y;
  r0.y = max(9.99999975e-005, r0.x);
  r0.y = sqrt(r0.y);
  r0.x = r5.y ? r0.y : r0.x;
  r0.xyz = r0.xxx * r3.xyz + r4.xyz;
  r0.xyz = r0.xyz * r6.xyz;
  r0.xyz = r0.xyz * r6.www + r2.xyw;
  o0.xyz = r0.xyz * r1.www;
  o0.w = 1;
  return;
}
