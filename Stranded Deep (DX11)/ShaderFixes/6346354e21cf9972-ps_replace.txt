// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 6346354e21cf9972-ps_replace.txt
// 3DMigoto: 6346354e21cf9972 |    Unity headers extracted from generic.shader
//    Shader "Eisko/Generic" {
//      Properties {
//       _ColorAlbedo ("RGB: Color ", Color) = (1,1,1,0.02)
//      [NoScaleOffset]  _AlbedoTex ("Albedo", 2D) = "white" { }
//      [NoScaleOffset]  _NormalMap ("NormalMap", 2D) = "bump" { }
//      [NoScaleOffset]  _SpecMap ("Multimap: (R=Specular, G=Empty, B=AO, A=Roughness)", 2D) = "white" { }
//       _AOsaturation ("AO Strenght", Range(0.1,3)) = 1
//       _SpecStrength ("Specular Strength", Range(0.001,3)) = 1
//       _Roughness ("Roughness", Range(0.001,5)) = 1
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
//        Pass 2/3 {
//          Name "FORWARD_ADD_UBER"
//          Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
//          Lighting On
//          ZWrite Off
//          Blend One One
//          GpuProgramID 121391
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 91
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from generic.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 82 5 0
//   Keywords { "POINT" "SHADOWS_CUBE" }
//   undeciphered2: 1 5 4 5 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 480
//   Float 0 [_Roughness]
//   Float 4 [_AOsaturation]
//   Float 8 [_SpecStrength]
//   Vector 16 [_ColorAlbedo]
//   Vector 256 [_LightColor0]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 16 [_LightPositionRange]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   SetTexture 0 [_NormalMap] 2D 1
//   SetTexture 1 [_AlbedoTex] 2D 0
//   SetTexture 2 [_SpecMap] 2D 2
//   SetTexture 3 [_LightTexture0] 2D 4
//   SetTexture 4 [_ShadowMapTexture] CUBE 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:03:25 2016
TextureCube<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[25];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[2];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[17];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD8,
  float4 v7 : TEXCOORD5,
  float3 v8 : TEXCOORD6,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 6346354e21cf9972-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyz = -v2.xyz * cb2[0].www + cb2[0].xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = _WorldSpaceCameraPos.xyz + -v2.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r1.xyz * r0.www + r0.xyz;
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = float3(0.5,0.5,0.5) * r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = saturate(dot(r1.xyz, r2.xyz));
  r0.w = 1 + -r0.w;
  r1.w = r0.w * r0.w;
  r1.w = r1.w * r1.w;
  r0.w = r1.w * r0.w;
  r3.xyzw = t2.Sample(s2_s, v1.xy).xyzw;
  r3.xyz = log2(r3.xwz);
  r3.xyz = cb0[0].zxy * r3.xyz;
  r3.xyz = exp2(r3.xyz);
  r3.xyz = min(float3(1,1,1), r3.xyz);
  r1.w = r3.y * r3.y;
  r1.w = 2 / r1.w;
  r1.w = -2 + r1.w;
  r1.w = log2(r1.w);
  r1.w = saturate(0.0769230798 * r1.w);
  r2.w = max(r3.x, r1.w);
  r1.w = 13 * r1.w;
  r1.w = exp2(r1.w);
  r2.w = r2.w + -r3.x;
  r0.w = r2.w * r0.w + r3.x;
  r4.xyzw = t0.Sample(s1_s, v1.xy).xyzw;
  r4.xy = r4.wy * float2(2,2) + float2(-1,-1);
  r5.xyz = v5.xyz * r4.yyy;
  r5.xyz = r4.xxx * v4.xyz + r5.xyz;
  r2.w = dot(r4.xy, r4.xy);
  r2.w = min(1, r2.w);
  r2.w = 1 + -r2.w;
  r2.w = sqrt(r2.w);
  r4.xyz = r2.www * v3.xyz + r5.xyz;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = rsqrt(r2.w);
  r4.xyz = r4.xyz * r2.www;
  r2.x = saturate(dot(r4.xyz, r2.xyz));
  r2.x = log2(r2.x);
  r2.x = r2.x * r1.w;
  r1.w = 2 + r1.w;
  r1.w = 0.159155071 * r1.w;
  r2.x = exp2(r2.x);
  r1.w = r2.x * r1.w;
  r1.w = 0.78539753 * r1.w;
  r0.w = r1.w * r0.w;
  r1.x = dot(r4.xyz, r1.xyz);
  r0.x = dot(r4.xyz, r0.xyz);
  r0.y = r1.x * r1.x;
  r1.yz = float2(1,1) + -r3.yx;
  r0.y = r1.y * r0.y + r3.y;
  r0.y = sqrt(r0.y);
  r0.y = r1.x + r0.y;
  r0.y = 1 / r0.y;
  r0.z = r0.x * r0.x;
  r0.z = r1.y * r0.z + r3.y;
  r0.z = sqrt(r0.z);
  r0.z = r0.x + r0.z;
  r0.x = max(0, r0.x);
  r0.z = 1 / r0.z;
  r0.y = r0.z * r0.y;
  r0.y = r0.w * r0.y;
  r0.z = dot(v8.xyz, v8.xyz);
  r0.z = sqrt(r0.z);
  r0.z = cb2[1].w * r0.z;
  r0.z = 0.970000029 * r0.z;
  r2.xyzw = t4.Sample(s3_s, v8.xyz).xyzw;
  r0.z = cmp(r2.x < r0.z);
  r0.z = r0.z ? cb3[24].x : 1;
  r0.w = dot(v7.xyz, v7.xyz);
  r2.xyzw = t3.Sample(s4_s, r0.ww).xyzw;
  r0.z = r2.x * r0.z;
  r1.xyw = cb0[16].xyz * r0.zzz;
  r0.yzw = r1.xyw * r0.yyy;
  r0.yzw = r0.yzw * r3.zzz;
  r2.xyzw = t1.Sample(s0_s, v1.xy).xyzw;
  r2.xyz = cb0[1].xyz * r2.xyz;
  r2.xyz = r2.xyz * r0.xxx;
  r1.xyw = r2.xyz * r1.xyw;
  o0.xyz = r1.xyw * r1.zzz + r0.yzw;
  o0.w = 1;
  return;
}
