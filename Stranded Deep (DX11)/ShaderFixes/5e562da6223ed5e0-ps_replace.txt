// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe -f 5e562da6223ed5e0-ps_replace.txt
// 3DMigoto: 5e562da6223ed5e0 |    Unity headers extracted from Sunshine-DeferredShading.shader
//    Shader "Hidden/Sunshine-DeferredShading" {
//      Properties {
//       _LightTexture0 ("", any) = "" { }
//       _LightTextureB0 ("", 2D) = "" { }
//       _ShadowMapTexture ("", any) = "" { }
//       _SrcBlend ("", Float) = 1
//       _DstBlend ("", Float) = 1
//      }
//      Fallback "Hidden/Internal-DeferredShading"
//      SubShader 1/1 {
//        Pass 1/2 {
//          Tags { "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Blend [_SrcBlend] [_DstBlend]
//          GpuProgramID 60668
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 429
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Sunshine-DeferredShading.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 189 22 0
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" "SUNSHINE_FILTER_PCF_4x4" }
//   undeciphered2: 1 7 4 7 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 656
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 112 [_LightDir]
//   Vector 144 [_LightColor]
//   Vector 272 [sunshine_Lightmap_TexelSize]
//   Vector 288 [sunshine_ShadowParamsAndHalfTexel]
//   Vector 304 [sunshine_OvercastCoord] 2
//   Vector 320 [sunshine_OvercastVectorsUV]
//   Vector 464 [sunshine_ShadowCoordDepthStart]
//   Vector 528 [sunshine_ShadowToWorldScale] 3
//   Vector 544 [sunshine_CascadeNearRatiosSq]
//   Vector 560 [sunshine_CascadeFarRatiosSq]
//   Vector 640 [sunshine_ShadowFadeParams] 3
//   Float 652 [_ShadowFade]
//   Matrix 400 [sunshine_WorldToSunVP]
//   Matrix 576 [sunshine_CascadeRanges]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 112 [_ZBufferParams]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   ConstBuffer "UnityPerCamera2" 64
//   Matrix 0 [_CameraToWorld]
//   SetTexture 0 [_CameraDepthTexture] 2D 0
//   SetTexture 1 [_ShadowMapTexture] 2D 1
//   SetTexture 2 [sunshine_OvercastMap] 2D 3
//   SetTexture 3 [sunshine_Lightmap] 2D 2
//   SetTexture 4 [_CameraGBufferTexture0] 2D 4
//   SetTexture 5 [_CameraGBufferTexture1] 2D 5
//   SetTexture 6 [_CameraGBufferTexture2] 2D 6
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityShadows" 2
//   BindCB "UnityPerCamera2" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 10:34:36 2016
Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[4];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[26];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[41];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe -f 5e562da6223ed5e0-ps_replace.txt
matrix _CameraToWorld = matrix(cb3[0], cb3[1], cb3[2], cb3[3]);
float4 _WorldSpaceCameraPos = cb1[4];
if (fov) {
  _WorldSpaceCameraPos.xyz -= mul(float4(-separation * convergence * fov, 0, 0, 0), _CameraToWorld).xyz;
} else {
  float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  _WorldSpaceCameraPos.xyz -= world_space_adj.xyz;
}

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s0_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r2.xyz = r0.xyz * r0.www;
float depth = r2.z;

// Unity light/shadow fix (pixel shader stage) inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe -f 5e562da6223ed5e0-ps_replace.txt
if (fov) {
  r2.x -= separation * (depth - convergence) * fov;
}

  r3.xyz = cb3[1].xyz * r2.yyy;
  r2.xyw = cb3[0].xyz * r2.xxx + r3.xyz;
  r2.xyw = cb3[2].xyz * r2.zzz + r2.xyw; // depth in r2.z
  r2.xyw = cb3[3].xyz + r2.xyw;

// Fallback adjustment if the FOV was not passed from the VS:
if (!fov) {
  float4 clip_space_adj = float4(separation * (depth - convergence), 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  r2.xyw -= world_space_adj.xyz;
}

  r3.xyz = cb0[26].xyz * r2.yyy;
  r3.xyz = cb0[25].xyz * r2.xxx + r3.xyz;
  r3.xyz = cb0[27].xyz * r2.www + r3.xyz;
  r3.xyz = cb0[28].xyz + r3.xyz;
  r4.xyz = -cb0[29].xyz + r3.xyz;
  r4.xyz = cb0[33].xyz * r4.xyz;
  r0.x = dot(r4.xyz, r4.xyz);
  r0.y = 123456792 * r0.x;
  r0.y = frac(r0.y);
  r0.y = -r0.y * cb0[18].y + 1;
  r0.y = r0.x * r0.y;
  r0.x = saturate(-r0.x * cb0[40].y + cb0[40].x);
  r4.xyzw = cmp(r0.yyyy >= cb0[34].xyzw);
  r5.xyzw = cmp(cb0[35].xyzw >= r0.yyyy);
  r5.xyzw = r5.xyzw ? 1.000000 : 0;
  r4.xyzw = r4.xyzw ? 1.000000 : 0;
  r4.xyzw = r4.xyzw * r5.xyzw;
  r5.x = cb0[36].x * r4.x;
  r5.y = cb0[37].x * r4.x;
  r5.z = cb0[38].x * r4.x;
  r5.w = cb0[39].x * r4.x;
  r6.x = cb0[36].y * r4.y;
  r6.y = cb0[37].y * r4.y;
  r6.z = cb0[38].y * r4.y;
  r6.w = cb0[39].y * r4.y;
  r5.xyzw = r6.xyzw + r5.xyzw;
  r6.x = cb0[36].z * r4.z;
  r6.y = cb0[37].z * r4.z;
  r6.z = cb0[38].z * r4.z;
  r6.w = cb0[39].z * r4.z;
  r5.xyzw = r6.xyzw + r5.xyzw;
  r6.x = cb0[36].w * r4.w;
  r6.y = cb0[37].w * r4.w;
  r6.z = cb0[38].w * r4.w;
  r6.w = cb0[39].w * r4.w;
  r4.xyzw = r6.xyzw + r5.xyzw;
  r1.zw = r4.zw * r3.xy + r4.xy;
  r1.zw = -cb0[18].zw + r1.zw;
  r1.zw = cb0[17].zw * r1.zw;
  r4.xy = floor(r1.zw);
  r5.xy = frac(r1.zw);
  r1.zw = r4.xy * cb0[17].xy + cb0[18].zw;
  r4.xy = cb0[17].xy + r1.zw;
  r4.xyzw = t3.Sample(s2_s, r4.xy).xyzw;
  r4.x = dot(r4.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r6.xy = cb0[17].xy * float2(2,2) + r1.zw;
  r6.xyzw = t3.Sample(s2_s, r6.xy).xyzw;
  r4.w = dot(r6.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r6.xyzw = cb0[17].xyxy * float4(2,1,1,2) + r1.zwzw;
  r7.xyzw = t3.Sample(s2_s, r6.xy).xyzw;
  r6.xyzw = t3.Sample(s2_s, r6.zw).xyzw;
  r4.z = dot(r6.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r4.y = dot(r7.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r4.xyzw = cmp(r3.zzzz >= r4.xyzw);
  r4.xyzw = r4.xyzw ? 1.000000 : 0;
  r5.z = 1;
  r0.y = dot(r4.yx, r5.xz);
  r3.w = dot(r4.wz, r5.xz);
  r4.xyzw = cb0[17].xyxy * float4(-1,1,0,1) + r1.zwzw;
  r6.xyzw = t3.Sample(s2_s, r4.xy).xyzw;
  r4.xyzw = t3.Sample(s2_s, r4.zw).xyzw;
  r4.y = dot(r4.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r4.x = dot(r6.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r6.xyzw = cb0[17].xyxy * float4(-1,2,0,2) + r1.zwzw;
  r7.xyzw = t3.Sample(s2_s, r6.xy).xyzw;
  r6.xyzw = t3.Sample(s2_s, r6.zw).xyzw;
  r4.w = dot(r6.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r4.z = dot(r7.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r4.xyzw = cmp(r3.zzzz >= r4.xyzw);
  r4.xyzw = r4.xyzw ? 1.000000 : 0;
  r5.w = 1 + -r5.x;
  r4.x = dot(r4.yx, r5.zw);
  r6.z = r4.x + r0.y;
  r4.xy = r5.xz * float2(-1,1) + float2(1,0);
  r0.y = dot(r4.zw, r4.xy);
  r6.w = r0.y + r3.w;
  r4.xy = -cb0[17].xy + r1.zw;
  r4.xyzw = t3.Sample(s2_s, r4.xy).xyzw;
  r4.x = dot(r4.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r7.xyzw = t3.Sample(s2_s, r1.zw).xyzw;
  r4.w = dot(r7.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r7.xyzw = cb0[17].xyxy * float4(0,-1,-1,0) + r1.zwzw;
  r8.xyzw = t3.Sample(s2_s, r7.xy).xyzw;
  r7.xyzw = t3.Sample(s2_s, r7.zw).xyzw;
  r4.z = dot(r7.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r4.y = dot(r8.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r4.xyzw = cmp(r3.zzzz >= r4.xyzw);
  r4.xyzw = r4.xyzw ? 1.000000 : 0;
  r7.x = 1 + -r5.x;
  r7.z = 1;
  r0.y = dot(r4.xy, r7.xz);
  r3.w = dot(r4.zw, r7.xz);
  r4.xyzw = cb0[17].xyxy * float4(1,-1,2,-1) + r1.zwzw;
  r7.xyzw = cb0[17].xyxy * float4(1,0,2,0) + r1.zwzw;
  r8.xyzw = t3.Sample(s2_s, r4.xy).xyzw;
  r4.xyzw = t3.Sample(s2_s, r4.zw).xyzw;
  r4.y = dot(r4.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r4.x = dot(r8.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r8.xyzw = t3.Sample(s2_s, r7.xy).xyzw;
  r7.xyzw = t3.Sample(s2_s, r7.zw).xyzw;
  r4.w = dot(r7.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r4.z = dot(r8.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r4.xyzw = cmp(r3.zzzz >= r4.xyzw);
  r4.xyzw = r4.xyzw ? 1.000000 : 0;
  r1.z = dot(r4.yx, r5.xz);
  r1.w = dot(r4.wz, r5.xz);
  r4.xyzw = r5.yzzy * float4(-1,1,1,1) + float4(1,0,0,0);
  r4.xyzw = float4(0.111110002,0.111110002,0.111110002,0.111110002) * r4.xyzw;
  r6.y = r3.w + r1.w;
  r6.x = r1.z + r0.y;
  r0.y = dot(r6.xyzw, r4.xyzw);
  r0.x = -r0.y * r0.x + 1;
  r1.zw = cb0[20].xy * r3.xx + cb0[19].xy;
  r1.zw = cb0[20].zw * r3.yy + r1.zw;
  r3.xyzw = t2.Sample(s3_s, r1.zw).xyzw;
  r0.y = 1 + -cb0[40].w;
  r0.y = max(r0.y, r3.w);
  r0.x = -r0.x * r0.y + 1;
  r0.x = -r0.x * cb0[18].x + 1;
  r3.xyz = -cb2[25].xyz + r2.xyw;
  r2.xyw = -_WorldSpaceCameraPos.xyz + r2.xyw;
  r0.y = dot(r3.xyz, r3.xyz);
  r0.y = sqrt(r0.y);
  r0.y = -r0.z * r0.w + r0.y;
  r0.y = cb2[25].w * r0.y + r2.z;
  r0.y = saturate(r0.y * cb2[24].z + cb2[24].w);
  r3.xyzw = t1.Sample(s1_s, r1.xy).xyzw;
  r0.y = saturate(r3.x + r0.y);
  r0.x = r0.y * r0.x;
  r0.xyz = cb0[9].xyz * r0.xxx;
  r0.w = dot(r2.xyw, r2.xyw);
  r0.w = rsqrt(r0.w);
  r3.xyz = r2.xyw * r0.www;
  r2.xyz = -r2.xyw * r0.www + -cb0[7].xyz;
  r4.xyzw = t6.Sample(s6_s, r1.xy).xyzw;
  r4.xyz = r4.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.w = dot(r4.xyz, -r3.xyz);
  r1.z = 9.99999975e-006 + -r0.w;
  r0.w = cmp(r0.w < 0);
  r5.xyz = -r3.xyz * r1.zzz + r4.xyz;
  r4.xyz = r0.www ? r5.xyz : r4.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = dot(r4.xyz, r2.xyz);
  r1.z = dot(-cb0[7].xyz, r2.xyz);
  r0.w = max(0, r0.w);
  r0.w = r0.w * r0.w;
  r2.xyzw = t5.Sample(s5_s, r1.xy).xyzw;
  r5.xyzw = t4.Sample(s4_s, r1.xy).xyzw;
  r6.xyzw = float4(1,1,1,1) + -r2.wxyz;
  r1.x = r6.x * r6.x;
  r1.y = r1.x * r1.x + -1;
  r0.w = r0.w * r1.y + 1;
  r1.y = 3.14159274 * r0.w;
  r0.w = r1.y * r0.w + 1.00000001e-007;
  r1.y = r1.x * r1.x;
  r0.w = r1.y / r0.w;
  r1.y = dot(r4.xyz, -r3.xyz);
  r1.w = dot(r4.xyz, -cb0[7].xyz);
  r1.yzw = max(float3(0,0,0), r1.yzw);
  r2.w = -r6.x * r6.x + 1;
  r3.x = r1.y * r2.w + r1.x;
  r1.x = r1.w * r2.w + r1.x;
  r1.x = r1.y * r1.x;
  r1.y = 1 + -r1.y;
  r1.x = r1.w * r3.x + r1.x;
  r1.x = 9.99999975e-006 + r1.x;
  r1.x = 2 / r1.x;
  r0.w = r1.x * r0.w;
  r0.w = 0.785398185 * r0.w;
  r1.x = max(9.99999975e-005, r0.w);
  r1.x = sqrt(r1.x);
  r2.w = cmp(cb0[3].w == 0.000000);
  r0.w = r2.w ? r1.x : r0.w;
  r0.w = r0.w * r1.w;
  r0.w = max(0, r0.w);
  r3.xyz = r0.www * r0.xyz;
  r0.w = 1 + -r1.z;
  r1.x = r0.w * r0.w;
  r1.x = r1.x * r1.x;
  r0.w = r1.x * r0.w;
  r2.xyz = r6.yzw * r0.www + r2.xyz;
  r2.xyz = r3.xyz * r2.xyz;
  r0.w = r1.z + r1.z;
  r0.w = r0.w * r1.z;
  r0.w = r0.w * r6.x + -0.5;
  r1.x = r1.y * r1.y;
  r1.x = r1.x * r1.x;
  r1.x = r1.x * r1.y;
  r1.x = r0.w * r1.x + 1;
  r1.y = 1 + -r1.w;
  r1.z = r1.y * r1.y;
  r1.z = r1.z * r1.z;
  r1.y = r1.z * r1.y;
  r0.w = r0.w * r1.y + 1;
  r0.w = r0.w * r1.x;
  r0.w = r0.w * r1.w;
  r0.xyz = r0.xyz * r0.www;
  o0.xyz = r5.xyz * r0.xyz + r2.xyz;
  o0.w = 1;
  return;
}
