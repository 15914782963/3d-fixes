// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 4809c37c98ac317b-ps_replace.txt
// 3DMigoto: 4809c37c98ac317b |    Unity headers extracted from BeamTeamCausticsOverlay.shader
//    Shader "Beam Team/Post Effects/Caustics Overlay" {
//      Properties {
//       _MainTex ("Water Composition: Above water (RGB)", 2D) = "black" { }
//      }
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZTest Always
//          ZWrite Off
//          Cull Off
//          GpuProgramID 51279
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 7
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from BeamTeamCausticsOverlay.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 24 4 0
//   Keywords { "WATER_BELOW" }
//   undeciphered2: 1 2 2 2 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 176
//   Vector 128 [_SunColor] 3
//   Float 140 [_SunFade]
//   Float 144 [_Abberation]
//   Float 148 [_BelowVisibility]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_CausticsBump] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 10:59:25 2016
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[10];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 4809c37c98ac317b-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyz = -_WorldSpaceCameraPos.xyz + v2.xyz;
  r0.xyz = r0.xyz * float3(20,20,20) + v2.xyz;
  r0.w = -r0.y / v4.y;
  r0.xyz = v4.xyz * r0.www + r0.xyz;
  r1.xy = r0.xz * float2(0.200000003,0.200000003) + cb0[9].xx;
  r1.xyzw = t1.Sample(s1_s, r1.xy).yxzw;
  r0.w = dot(v3.xyz, v4.xyz);
  r0.w = saturate(r0.w * 0.600000024 + 0.400000006);
  r1.w = 1 + -r0.w;
  r1.w = 0.600000024 * r1.w;
  r2.xy = float2(0.200000003,0.200000003) * r0.xz;
  r0.xyz = -v2.xyz + r0.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.yz = cb0[9].xx * float2(2,2) + r2.xy;
  r2.xyzw = t1.Sample(s1_s, r2.xy).xyzw;
  r1.x = r2.x;
  r2.xyzw = t1.Sample(s1_s, r0.yz).xyzw;
  r1.z = r2.x;
  r1.xyz = r1.xyz * r1.www;
  r1.xyz = r1.xyz + r1.xyz;
  r2.xyz = float3(4,3.79999995,2.4000001) * cb0[8].xyz;
  r1.xyz = r2.xyz * r1.xyz;
  r0.y = 0.5 * cb0[9].y;
  r0.x = saturate(r0.x / r0.y);
  r0.x = 1 + -r0.x;
  r0.x = r0.w * r0.x;
  r0.x = cb0[8].w * r0.x;
  r2.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  o0.xyz = r1.xyz * r0.xxx + r2.xyz;
  o0.w = 1;
  return;
}
