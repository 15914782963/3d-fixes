// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe fc344b7a1294eae2-ps_replace.txt
// 3DMigoto: fc344b7a1294eae2 |    Unity headers extracted from lightPrepass.shader
//    Shader "Eisko/lightPrepass" {
//      Properties {
//       _ColorAlbedo ("RGB: Color A: F0", Color) = (0.784,0.784,0.784,0.1)
//       _ColorAO ("RGB: Color AO", Color) = (0.4,0.15,0.13,1)
//       _tColor ("Translucency color", Color) = (1,0.5,0,1)
//      [NoScaleOffset]  _AlbedoTex ("Albedo", 2D) = "white" { }
//       AOsaturation ("AO", Range(0.01,3)) = 1
//       Roughness ("Roughness", Range(0.0001,3)) = 1
//      [NoScaleOffset]  _NormalMap ("NormalMap", 2D) = "bump" { }
//      [NoScaleOffset]  _SpecularMap ("All in One: SpecularMap (R=F0 G=Thickness B=AO A=Roughness", 2D) = "white" { }
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry" "RenderType"="Opaque" "PerformanceChecks"="False" }
//        Pass 1/3 {
//          Name "FORWARD_BASE_LIGHTPREPASS"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
//          Lighting On
//          GpuProgramID 58208
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 37
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from lightPrepass.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 36 2 2
//   Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
//   undeciphered2: 1 2 3 2 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 448
//   Float 0 [AOsaturation]
//   Float 4 [_isSkin]
//   Float 8 [_thickness]
//   Vector 32 [_tColor]
//   Vector 48 [_ColorAO]
//   Vector 288 [_LightColor0]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   SetTexture 0 [_NormalMap] 2D 0
//   SetTexture 1 [_SpecularMap] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:04:21 2016
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[19];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD9,
  float4 v8 : TEXCOORD8,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe fc344b7a1294eae2-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = cmp(cb0[0].y == 0.000000);
  if (r0.x != 0) {
    o0.xyzw = float4(0,0,0,0);
    return;
  }
  r0.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  r0.xy = r0.wy * float2(2,2) + float2(-1,-1);
  r0.z = dot(r0.xy, r0.xy);
  r0.z = min(1, r0.z);
  r0.z = 1 + -r0.z;
  r0.z = sqrt(r0.z);
  r1.xyz = v5.xyz * r0.yyy;
  r0.xyw = r0.xxx * v4.xyz + r1.xyz;
  r0.xyz = r0.zzz * v3.xyz + r0.xyw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r0.xyz * r0.www;
  r2.xyzw = t1.Sample(s1_s, v1.xy).xyzw;
  r2.xy = log2(r2.yz);
  r2.xy = cb0[0].zx * r2.xy;
  r2.xy = exp2(r2.xy);
  r2.xy = min(float2(1,1), r2.xy);
  r3.xyz = float3(1,1,1) + -cb0[3].xyz;
  r2.yzw = r2.yyy * r3.xyz + cb0[3].xyz;
  r3.xyz = _WorldSpaceCameraPos.xyz + -v2.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r1.x = dot(r1.xyz, cb2[0].xyz);
  r1.x = max(0, r1.x);
  r1.y = dot(cb0[18].xyz, cb0[18].xyz);
  r1.y = sqrt(r1.y);
  r0.xyz = r0.xyz * r0.www + cb2[0].xyz;
  r0.x = saturate(dot(r3.xyz, -r0.xyz));
  r0.x = r0.x * r0.x;
  r0.x = r0.x * r1.y;
  r0.y = max(0.00999999978, r2.x);
  r0.x = r0.x * r0.y;
  r0.yzw = cb0[18].xyz * cb0[2].xyz;
  r0.xyz = r0.yzw * r0.xxx;
  r1.xyz = r1.xxx * r2.yzw;
  o0.xyz = r1.xyz * cb0[18].xyz + r0.xyz;
  o0.w = 1;
  return;
}
