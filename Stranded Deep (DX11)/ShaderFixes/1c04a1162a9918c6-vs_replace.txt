// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 1c04a1162a9918c6-vs_replace.txt
// 3DMigoto: 1c04a1162a9918c6 |    Unity headers extracted from Speedtree Foliage - Forward Cull Off.shader
//    Shader "Beam Team/SpeedTree/SpeedTree Foliage - Forward Cull Off VFACE Metallic" {
//      Properties {
//      [Header(Diffuse)]  _Color ("Color", Color) = (1,1,1,1)
//       _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//       _MainTex ("Diffuse Albedo (RGB)", 2D) = "white" { }
//      [Header(Packed Normals)]  _PackedTex ("Gloss (R) Normal Y (G) Translucency (B) Normal X (A)", 2D) = "white" { }
//      [Header(Translucency)] [Toggle(BEAM_SPEEDTREE_TRANSLUCENCY)]  _Translucent ("Translucent", Float) = 0
//       _TranslucencyColor ("Translucency Tint", Color) = (0.73,0.85,0.41,1)
//       _TranslucencyIntensity ("Translucency Intensity", Range(1,5)) = 1
//       _TranslucencyViewDependency ("Translucency View Dependency", Range(0,1)) = 0.5
//      [Header(Wind)] [MaterialEnum(None, 0, Fastest, 1, Fast, 2, Better, 3, Best, 4, Palm, 5)]  _WindQuality ("Wind Quality", Range(0,5)) = 0
//      }
//      Fallback "Legacy Shaders/Transparent/Cutout/VertexLit"
//      SubShader 1/2 {
//        Tags { "QUEUE"="AlphaTest" "DisableBatching"="LodFading" "RenderType"="SpeedTree" }
//        Pass 2/2 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="AlphaTest" "DisableBatching"="LodFading" "RenderType"="SpeedTree" }
//          ZWrite Off
//          Cull Off
//          Blend One One
//          GpuProgramID 77160
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 767
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Speedtree Foliage - Forward Cull Off.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 285 0 7
//   Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "SUNSHINE_FILTER_HARD" "GEOM_TYPE_LEAF" "BEAM_SPEEDTREE_TRANSLUCENCY" }
//   undeciphered2: 1 0 4 0 0
//   undeciphered3: 191 7 0 0 2 1 1 2 3 4 4 5 5 6 7 8
//   ConstBuffer "$Globals" 720
//   Vector 576 [_MainTex_ST]
//   Float 596 [_WindQuality]
//   Float 600 [_WindEnabled]
//   Vector 672 [_AfsSpecFade] 2
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityPerDraw" 352
//   Vector 336 [unity_WorldTransformParams]
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 192 [_Object2World]
//   Matrix 256 [_World2Object]
//   ConstBuffer "SpeedTreeWind" 256
//   Vector 0 [_ST_WindVector]
//   Vector 16 [_ST_WindGlobal]
//   Vector 32 [_ST_WindBranch]
//   Vector 48 [_ST_WindBranchTwitch]
//   Vector 64 [_ST_WindBranchWhip]
//   Vector 80 [_ST_WindBranchAnchor]
//   Vector 96 [_ST_WindBranchAdherences]
//   Vector 112 [_ST_WindTurbulences]
//   Vector 128 [_ST_WindLeaf1Ripple]
//   Vector 144 [_ST_WindLeaf1Tumble]
//   Vector 160 [_ST_WindLeaf1Twitch]
//   Vector 176 [_ST_WindLeaf2Ripple]
//   Vector 192 [_ST_WindLeaf2Tumble]
//   Vector 208 [_ST_WindLeaf2Twitch]
//   Vector 240 [_ST_WindAnimation]
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//   BindCB "SpeedTreeWind" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:10:58 2016
cbuffer cb3 : register(b3)
{
  float4 cb3[16];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[43];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float2 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float3 o7 : TEXCOORD6)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 1c04a1162a9918c6-vs_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  o5.xy = v3.xy * cb0[36].xy + cb0[36].zw;
  r0.x = cb0[37].y * cb0[37].z;
  r0.yz = cmp(float2(0,1) < r0.xx);
  r1.xyz = cb3[0].yyy * cb2[17].xyz;
  r1.xyz = cb2[16].xyz * cb3[0].xxx + r1.xyz;
  r1.xyz = cb2[18].xyz * cb3[0].zzz + r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r1.xyz = r0.yyy ? r1.xyz : 0;
  r2.xyz = -v4.xyz + v0.xyz;
  r0.w = cmp(r0.x < 5);
  r0.z = r0.w ? r0.z : 0;
  if (r0.z != 0) {
    r0.z = v4.x + v4.y;
    r0.w = cmp(r0.x == 4.000000);
    r1.w = cmp(0 < v5.w);
    r3.xy = r1.ww ? cb3[11].xy : cb3[8].xy;
    r0.z = r3.x + r0.z;
    r0.z = 0.5 + r0.z;
    r0.z = frac(r0.z);
    r0.z = r0.z * 2 + -1;
    r2.w = abs(r0.z) * abs(r0.z);
    r0.z = -abs(r0.z) * 2 + 3;
    r0.z = r2.w * r0.z + -0.5;
    r0.z = dot(r0.zz, r3.yy);
    r3.xyz = float3(0.0625,1,16) * v5.zzz;
    r3.xyz = frac(r3.xyz);
    r3.xyz = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
    r3.xyz = r3.xyz * r0.zzz;
    r2.xyz = r3.xyz * v5.xxx + r2.xyz;
    if (r0.w != 0) {
      r3.xyzw = float4(0.0625,1,16,30.2999992) * v5.yyyy;
      r3.xyzw = frac(r3.xyzw);
      r3.xyz = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
      r4.xyzw = r1.wwww ? cb3[12].xyzw : cb3[9].xyzw;
      r5.xyz = r1.www ? cb3[13].xyz : cb3[10].xyz;
      r0.z = 3 * r3.w;
      r6.y = r3.w * 3 + r4.x;
      r6.x = r4.x * 0.75 + -r0.z;
      r0.zw = float2(0.5,0.5) + r6.xy;
      r0.zw = frac(r0.zw);
      r0.zw = r0.zw * float2(2,2) + float2(-1,-1);
      r6.xy = abs(r0.zw) * abs(r0.zw);
      r0.zw = -abs(r0.zw) * float2(2,2) + float2(3,3);
      r0.zw = r6.xy * r0.zw + float2(-0.5,-0.5);
      r0.zw = r0.zw + r0.zw;
      r1.w = dot(r2.xyz, r2.xyz);
      r1.w = sqrt(r1.w);
      r2.w = r0.z * r0.z + r0.w;
      r4.x = v5.x * r4.z;
      r2.w = r4.x * r2.w;
      sincos(r2.w, r4.x, r6.x);
      r2.w = 1 + -r6.x;
      r7.xyzw = r2.wwww * r3.xxxy;
      r6.yzw = r4.xxx * r3.zxy;
      r8.xy = r7.zy * r3.zy + r6.wy;
      r9.xy = r7.xw * r3.xy + r6.xx;
      r8.z = r7.w * r3.z + -r6.z;
      r10.xy = r7.yz * r3.yz + -r6.yw;
      r10.z = r7.w * r3.z + r6.z;
      r4.x = r3.z * r3.z;
      r10.w = r4.x * r2.w + r6.x;
      r6.xyz = r3.zxy * r1.yzx;
      r6.xyz = r3.yzx * r1.zxy + -r6.xyz;
      r1.y = dot(r1.xyz, r3.xyz);
      r1.y = max(-1, r1.y);
      r1.y = min(1, r1.y);
      r6.w = r6.y + r1.y;
      r2.w = dot(r6.xzw, r6.xzw);
      r2.w = rsqrt(r2.w);
      r3.xyz = r6.zxw * r2.www;
      r2.w = 1 + -abs(r1.y);
      r2.w = sqrt(r2.w);
      r4.x = abs(r1.y) * -0.0187292993 + 0.0742610022;
      r4.x = r4.x * abs(r1.y) + -0.212114394;
      r4.x = r4.x * abs(r1.y) + 1.57072878;
      r4.z = r4.x * r2.w;
      r4.z = r4.z * -2 + 3.14159274;
      r1.y = cmp(r1.y < -r1.y);
      r1.y = r1.y ? r4.z : 0;
      r1.y = r4.x * r2.w + r1.y;
      r0.z = -r0.w * r0.w + r0.z;
      r6.x = r3.w * 3 + r5.z;
      r6.y = 0.870000005 * r6.x;
      r4.xz = float2(0.5,0.5) + r6.xy;
      r4.xz = frac(r4.xz);
      r4.xz = r4.xz * float2(2,2) + float2(-1,-1);
      r5.zw = abs(r4.xz) * abs(r4.xz);
      r4.xz = -abs(r4.xz) * float2(2,2) + float2(3,3);
      r4.xz = r5.zw * r4.xz + float2(-0.5,-0.5);
      r4.xz = r4.xz + r4.xz;
      r0.w = r4.z * r4.z;
      r0.w = r0.w * r4.x + 1;
      r0.w = saturate(0.5 * r0.w);
      r0.w = log2(r0.w);
      r0.w = r5.y * r0.w;
      r0.w = exp2(r0.w);
      r0.z = r0.z * r4.y;
      r0.z = r1.y * r4.w + r0.z;
      r0.z = r5.x * r0.w + r0.z;
      r0.z = v5.x * r0.z;
      sincos(r0.z, r4.x, r5.x);
      r0.z = 1 + -r5.x;
      r6.xyzw = r0.zzzz * r3.yyyz;
      r4.xyz = r4.xxx * r3.xyz;
      r7.xy = r6.zy * r3.xz + r4.zx;
      r11.xy = r6.xw * r3.yz + r5.xx;
      r7.z = r6.w * r3.x + -r4.y;
      r12.xy = r6.yz * r3.zx + -r4.xz;
      r12.z = r6.w * r3.x + r4.y;
      r0.w = r3.x * r3.x;
      r7.w = r0.w * r0.z + r5.x;
      r9.z = r10.x;
      r9.w = r8.x;
      r11.z = r7.y;
      r11.w = r12.y;
      r3.x = dot(r9.xzw, r11.xzw);
      r12.w = r11.y;
      r3.y = dot(r9.xwz, r12.xzw);
      r3.z = dot(r9.xzw, r7.xzw);
      r8.w = r9.y;
      r4.x = dot(r8.ywz, r11.xzw);
      r4.y = dot(r8.yzw, r12.xzw);
      r4.z = dot(r8.ywz, r7.xzw);
      r5.x = dot(r10.yzw, r11.xzw);
      r5.y = dot(r10.ywz, r12.xzw);
      r5.z = dot(r10.yzw, r7.xzw);
      r0.z = dot(r3.xyz, v2.xyz);
      r0.w = dot(r4.xyz, v2.xyz);
      r1.y = dot(r5.xyz, v2.xyz);
      r3.x = dot(r3.xyz, r2.xyz);
      r3.y = dot(r4.xyz, r2.xyz);
      r3.z = dot(r5.xyz, r2.xyz);
      r2.w = dot(r3.xyz, r3.xyz);
      r2.w = rsqrt(r2.w);
      r3.xyz = r3.xyz * r2.www;
      r2.xyz = r3.xyz * r1.www;
    } else {
      r0.zw = v2.xy;
      r1.y = v2.z;
    }
  } else {
    r0.zw = v2.xy;
    r1.y = v2.z;
  }
  r2.xyz = v4.xyz + r2.xyz;
  r1.w = cmp(r0.x >= 3);
  if (r1.w != 0) {
    r0.x = cmp(r0.x == 5.000000);
    if (r0.x != 0) {
      r3.xyz = cb3[5].yyy * cb2[17].xyz;
      r3.xyz = cb2[16].xyz * cb3[5].xxx + r3.xyz;
      r3.xyz = cb2[18].xyz * cb3[5].zzz + r3.xyz;
      r0.x = dot(r3.xyz, r3.xyz);
      r0.x = rsqrt(r0.x);
      r3.xyz = r3.xyz * r0.xxx;
      r4.xyz = float3(0.0625,1,16) * v3.www;
      r4.xyz = frac(r4.xyz);
      r4.xyz = r4.xyz * float3(2,2,2) + float3(-1,-1,-1);
      r4.xyz = v3.zzz * r4.xyz;
      r0.x = cb2[15].x + cb2[15].y;
      r0.x = cb3[2].x + r0.x;
      r5.x = v3.w + r0.x;
      r5.y = r0.x * cb3[3].y + v3.w;
      r1.w = cb3[3].y * r5.x;
      r5.z = 0.5 * r1.w;
      r5.w = -v3.z + r5.x;
      r5.xyzw = float4(0.5,0.5,0.5,1.5) + r5.xyzw;
      r5.xyzw = frac(r5.xyzw);
      r5.xyzw = r5.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
      r6.xyzw = abs(r5.xyzw) * abs(r5.xyzw);
      r5.xyzw = -abs(r5.xyzw) * float4(2,2,2,2) + float4(3,3,3,3);
      r5.xyzw = r6.xyzw * r5.xyzw + float4(-0.5,-0.5,-0.5,-0.5);
      r5.xyzw = r5.xyzw + r5.xyzw;
      r6.w = r5.y * r5.z;
      r1.w = cmp(r6.w < 0);
      r6.y = -r6.w;
      r6.xz = float2(-1,1);
      r6.xy = r1.ww ? r6.xy : r6.zw;
      r1.w = -r5.y * r5.z + r6.x;
      r1.w = r6.y * r1.w + r6.w;
      r2.w = r6.x + -r1.w;
      r1.w = r6.y * r2.w + r1.w;
      r1.w = cb3[3].x * r1.w;
      r2.w = 1 + -cb3[0].w;
      r3.w = 1 + -cb3[3].x;
      r3.w = r5.x * r3.w;
      r1.w = r1.w * r2.w + r3.w;
      r2.w = r5.w * cb3[4].x + 1;
      r1.w = r2.w * r1.w;
      r4.xyz = r4.xyz * r1.www;
      r4.xyz = r4.xyz * cb3[2].yyy + r2.xyz;
      r5.x = r0.x * 0.100000001 + v3.w;
      r0.x = cb3[15].x * cb3[7].x;
      r5.y = r0.x * 0.100000001 + v3.w;
      r5.xy = float2(0.5,0.5) + r5.xy;
      r5.xy = frac(r5.xy);
      r5.xy = r5.xy * float2(2,2) + float2(-1,-1);
      r6.xy = abs(r5.xy) * abs(r5.xy);
      r5.xy = -abs(r5.xy) * float2(2,2) + float2(3,3);
      r5.xy = r6.xy * r5.xy + float2(-0.5,-0.5);
      r5.xy = r5.xy + r5.xy;
      r5.xy = r5.xy * r5.xy;
      r0.x = r5.y * r5.x;
      r0.x = -r0.x * cb3[7].x + 1;
      r1.w = cb3[0].w * r5.w;
      r0.x = r1.w * cb3[4].x + r0.x;
      r3.xyz = r3.xyz * cb3[5].www + -r4.xyz;
      r3.xyz = cb3[6].yyy * r3.xyz;
      r3.xyz = r3.xyz * r0.xxx;
      r2.xyz = r3.xyz * v3.zzz + r4.xyz;
    } else {
      r3.xyz = float3(0.0625,1,16) * v3.www;
      r3.xyz = frac(r3.xyz);
      r3.xyz = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
      r3.xyz = v3.zzz * r3.xyz;
      r0.x = cb2[15].x + cb2[15].y;
      r0.x = cb3[2].x + r0.x;
      r4.x = v3.w + r0.x;
      r4.y = r0.x * cb3[3].y + v3.w;
      r0.x = cb3[3].y * r4.x;
      r4.z = 0.5 * r0.x;
      r4.xyz = float3(0.5,0.5,0.5) + r4.xyz;
      r4.xyz = frac(r4.xyz);
      r4.xyz = r4.xyz * float3(2,2,2) + float3(-1,-1,-1);
      r5.xyz = abs(r4.xyz) * abs(r4.xyz);
      r4.xyz = -abs(r4.xyz) * float3(2,2,2) + float3(3,3,3);
      r4.xyz = r5.xyz * r4.xyz + float3(-0.5,-0.5,-0.5);
      r4.xyz = r4.xyz + r4.xyz;
      r5.w = r4.y * r4.z;
      r0.x = cmp(r5.w < 0);
      r5.y = -r5.w;
      r5.xz = float2(-1,1);
      r5.xy = r0.xx ? r5.xy : r5.zw;
      r0.x = -r4.y * r4.z + r5.x;
      r0.x = r5.y * r0.x + r5.w;
      r1.w = r5.x + -r0.x;
      r0.x = r5.y * r1.w + r0.x;
      r0.x = cb3[3].x * r0.x;
      r1.w = 1 + -cb3[0].w;
      r2.w = 1 + -cb3[3].x;
      r2.w = r4.x * r2.w;
      r0.x = r0.x * r1.w + r2.w;
      r3.xyz = r3.xyz * r0.xxx;
      r2.xyz = r3.xyz * cb3[2].yyy + r2.xyz;
    }
  }
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = sqrt(r0.x);
  r1.w = 1 / cb3[1].z;
  r1.w = -r1.w * 0.25 + r2.y;
  r1.w = max(0, r1.w);
  r1.w = cb3[1].z * r1.w;
  r2.w = cmp(r1.w != 0.000000);
  r3.x = log2(r1.w);
  r3.x = cb3[1].w * r3.x;
  r3.x = exp2(r3.x);
  r1.w = r2.w ? r3.x : r1.w;
  r3.x = cb3[1].x + cb2[15].x;
  r3.y = cb3[1].x * 0.800000012 + cb2[15].y;
  r3.xy = float2(0.5,0.5) + r3.xy;
  r3.xy = frac(r3.xy);
  r3.xy = r3.xy * float2(2,2) + float2(-1,-1);
  r3.zw = abs(r3.xy) * abs(r3.xy);
  r3.xy = -abs(r3.xy) * float2(2,2) + float2(3,3);
  r3.xy = r3.zw * r3.xy + float2(-0.5,-0.5);
  r3.xy = r3.xy + r3.xy;
  r2.w = r3.y * r3.y + r3.x;
  r3.x = cb3[6].x / cb3[1].z;
  r2.w = cb3[1].y * r2.w + r3.x;
  r1.w = r2.w * r1.w;
  r3.xz = r1.xz * r1.ww + r2.xz;
  r3.y = r2.y;
  r1.x = dot(r3.xyz, r3.xyz);
  r1.x = rsqrt(r1.x);
  r1.xzw = r3.xyz * r1.xxx;
  r1.xzw = r1.xzw * r0.xxx;
  r1.xzw = r0.yyy ? r1.xzw : r2.xyz;
  r2.xyz = cb2[1].xyw * r1.zzz;
  r2.xyz = cb2[0].xyw * r1.xxx + r2.xyz;
  r2.xyz = cb2[2].xyw * r1.www + r2.xyz;
  r2.xyz = cb2[3].xyw * v0.www + r2.xyz;
  r3.xz = float2(0.5,0.5) * r2.xz;
  r0.x = cb1[5].x * r2.y;
  r3.w = 0.5 * r0.x;
  r0.xy = r3.xw + r3.zz;
  r2.xy = float2(0.25,0.25) * cb1[6].xy;
  o7.xy = r2.xy * r0.xy;
  r2.xyw = cb2[13].xyz * r1.zzz;
  r2.xyw = cb2[12].xyz * r1.xxx + r2.xyw;
  r2.xyw = cb2[14].xyz * r1.www + r2.xyw;
  r2.xyw = cb2[15].xyz * v0.www + r2.xyw;
  r3.xyz = _WorldSpaceCameraPos.xyz + -r2.xyw;
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = sqrt(r0.x);
  r0.x = cb0[42].x + -r0.x;
  o5.z = saturate(r0.x / cb0[42].y);
  r3.xyzw = cb2[1].xyzw * r1.zzzz;
  r3.xyzw = cb2[0].xyzw * r1.xxxx + r3.xyzw;
  r3.xyzw = cb2[2].xyzw * r1.wwww + r3.xyzw;
  o0.xyzw = cb2[3].xyzw * v0.wwww + r3.xyzw;
  r3.y = cb2[16].x;
  r3.z = cb2[17].x;
  r3.x = cb2[18].x;
  r4.y = cb2[16].y;
  r4.z = cb2[17].y;
  r4.x = cb2[18].y;
  r0.xyw = r4.xyz * r0.www;
  r0.xyz = r3.xyz * r0.zzz + r0.xyw;
  r3.y = cb2[16].z;
  r3.z = cb2[17].z;
  r3.x = cb2[18].z;
  r0.xyz = r3.xyz * r1.yyy + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = cb2[13].yzx * v1.yyy;
  r1.xyz = cb2[12].yzx * v1.xxx + r1.xyz;
  r1.xyz = cb2[14].yzx * v1.zzz + r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = cb2[21].w * v1.w;
  r3.xyz = r1.xyz * r0.xyz;
  r3.xyz = r0.zxy * r1.yzx + -r3.xyz;
  r3.xyz = r3.xyz * r0.www;
  o6.xyzw = float4(0,0,0,0);
  o1.x = r1.z;
  o1.y = r3.x;
  o1.z = r0.y;
  o2.x = r1.x;
  o2.y = r3.y;
  o2.z = r0.z;
  o3.x = r1.y;
  o3.y = r3.z;
  o3.z = r0.x;
  o4.xyz = r2.xyw;
  o7.z = r2.z;
  return;
}

/****************************** COMPILE WARNINGS ******************************
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\1c04a1162a9918c6-vs_replace.txt(137,14-15): warning X3578: Output value 'o1' is not completely initialized
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\1c04a1162a9918c6-vs_replace.txt(138,14-15): warning X3578: Output value 'o2' is not completely initialized
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\1c04a1162a9918c6-vs_replace.txt(139,14-15): warning X3578: Output value 'o3' is not completely initialized
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\1c04a1162a9918c6-vs_replace.txt(140,14-15): warning X3578: Output value 'o4' is not completely initialized
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\1c04a1162a9918c6-vs_replace.txt(141,14-15): warning X3578: Output value 'o5' is not completely initialized

****************************** COMPILE WARNINGS ******************************/
