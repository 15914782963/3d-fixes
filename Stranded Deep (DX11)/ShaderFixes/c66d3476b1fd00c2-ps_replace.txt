// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe c66d3476b1fd00c2-ps_replace.txt
// 3DMigoto: c66d3476b1fd00c2 |    Unity headers extracted from Specular-FirstPass.shader
//    Shader "Nature/Terrain/Specular" {
//      Properties {
//       _SpecColor ("Specular Color", Color) = (0.5,0.5,0.5,1)
//       _Shininess ("Shininess", Range(0.03,1)) = 0.078125
//      [HideInInspector]  _Control ("Control (RGBA)", 2D) = "red" { }
//      [HideInInspector]  _Splat3 ("Layer 3 (A)", 2D) = "white" { }
//      [HideInInspector]  _Splat2 ("Layer 2 (B)", 2D) = "white" { }
//      [HideInInspector]  _Splat1 ("Layer 1 (G)", 2D) = "white" { }
//      [HideInInspector]  _Splat0 ("Layer 0 (R)", 2D) = "white" { }
//      [HideInInspector]  _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
//      [HideInInspector]  _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
//      [HideInInspector]  _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
//      [HideInInspector]  _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
//      [HideInInspector]  _MainTex ("BaseMap (RGB)", 2D) = "white" { }
//      [HideInInspector]  _Color ("Main Color", Color) = (1,1,1,1)
//      }
//      Dependency "AddPassShader" = "Hidden/TerrainEngine/Splatmap/Specular-AddPass"
//      Dependency "BaseMapShader" = "Hidden/TerrainEngine/Splatmap/Specular-Base"
//      Fallback "Nature/Terrain/Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" }
//        Pass 1/6 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          GpuProgramID 18155
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 87
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Specular-FirstPass.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 76 12 0
//   Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_ON" "_TERRAIN_NORMAL_MAP" }
//   undeciphered2: 1 12 3 10 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 224
//   Vector 80 [unity_DynamicLightmap_HDR]
//   Vector 96 [_LightColor0]
//   Vector 112 [_SpecColor]
//   Float 144 [_Shininess]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   SetTexture 0 [_Control] 2D 1
//   SetTexture 1 [_Splat0] 2D 2
//   SetTexture 2 [_Splat1] 2D 3
//   SetTexture 3 [_Splat2] 2D 4
//   SetTexture 4 [_Splat3] 2D 5
//   SetTexture 5 [_Normal0] 2D 6
//   SetTexture 6 [_Normal1] 2D 7
//   SetTexture 7 [_Normal2] 2D 8
//   SetTexture 8 [_Normal3] 2D 9
//   SetTexture 9 [unity_DynamicLightmap] 2D 0
//   SetTexture 10 [unity_DynamicDirectionality] 2D -1
//   SetTexture 11 [unity_DynamicNormal] 2D -1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:08:35 2016
Texture2D<float4> t11 : register(t11);

Texture2D<float4> t10 : register(t10);

Texture2D<float4> t9 : register(t9);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s9_s : register(s9);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[10];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD8,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe c66d3476b1fd00c2-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = t9.Sample(s0_s, v7.zw).xyzw;
  r0.w = cb0[5].x * r0.w;
  r0.xyz = r0.www * r0.xyz;
  r0.xyz = log2(r0.xyz);
  r0.xyz = cb0[5].yyy * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r1.xyzw = t11.Sample(s0_s, v7.zw).xyzw;
  r1.xyz = r1.zyx * float3(2,2,2) + float3(-1,-1,-1);
  r2.xyzw = t10.Sample(s0_s, v7.zw).xyzw;
  r2.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r0.w = max(0.00100000005, r0.w);
  r2.xyz = r2.xyz / r0.www;
  r1.x = dot(r1.xyz, r2.xyz);
  r1.x = max(0.125, r1.x);
  r0.xyz = r0.xyz / r1.xxx;
  r1.xyz = r0.xyz * r0.www;
  r0.w = 1 + -r0.w;
  r0.xyz = r0.xyz * r0.www;
  r3.xyz = cb0[7].xyz * r1.xyz;
  r4.x = v3.w;
  r4.y = v4.w;
  r4.z = v5.w;
  r4.xyz = _WorldSpaceCameraPos.xyz + -r4.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r4.xyz * r0.www + r2.xyz;
  r4.xyz = r4.xyz * r0.www + cb2[0].xyz;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r5.xyz * r0.www;
  r6.xyzw = t8.Sample(s9_s, v2.zw).xyzw;
  r7.xyzw = t7.Sample(s8_s, v2.xy).xyzw;
  r8.xyzw = t5.Sample(s6_s, v1.xy).xyzw;
  r9.xyzw = t6.Sample(s7_s, v1.zw).xyzw;
  r10.xyzw = t0.Sample(s1_s, v6.xy).xyzw;
  r0.w = dot(r10.xyzw, float4(1,1,1,1));
  r1.w = 0.00100000005 + r0.w;
  r10.xyzw = r10.xyzw / r1.wwww;
  r6.xz = r10.yy * r9.wy;
  r6.xz = r10.xx * r8.wy + r6.xz;
  r6.xz = r10.zz * r7.wy + r6.xz;
  r6.xy = r10.ww * r6.wy + r6.xz;
  r6.xy = r6.xy * float2(2,2) + float2(-1,-1);
  r1.w = dot(r6.xy, r6.xy);
  r1.w = min(1, r1.w);
  r1.w = 1 + -r1.w;
  r6.z = sqrt(r1.w);
  r7.x = dot(v3.xyz, r6.xyz);
  r7.y = dot(v4.xyz, r6.xyz);
  r7.z = dot(v5.xyz, r6.xyz);
  r1.w = dot(r7.xyz, r5.xyz);
  r1.w = max(0, r1.w);
  r1.w = log2(r1.w);
  r2.w = 128 * cb0[9].x;
  r1.w = r2.w * r1.w;
  r1.w = exp2(r1.w);
  r5.xyzw = t1.Sample(s2_s, v1.xy).xyzw;
  r6.xyzw = t2.Sample(s3_s, v1.zw).xyzw;
  r6.xyzw = r10.yyyy * r6.xyzw;
  r5.xyzw = r10.xxxx * r5.xyzw + r6.xyzw;
  r6.xyzw = t3.Sample(s4_s, v2.xy).xyzw;
  r5.xyzw = r10.zzzz * r6.xyzw + r5.xyzw;
  r6.xyzw = t4.Sample(s5_s, v2.zw).xyzw;
  r5.xyzw = r10.wwww * r6.xyzw + r5.xyzw;
  r1.w = r5.w * r1.w;
  r3.xyz = r3.xyz * r1.www;
  r1.xyz = r5.xyz * r1.xyz;
  r1.w = dot(r7.xyz, r2.xyz);
  r1.w = max(0, r1.w);
  r1.xyz = r1.xyz * r1.www + r3.xyz;
  r0.xyz = r1.www * r0.xyz;
  r1.w = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r4.xyz * r1.www;
  r1.w = dot(r7.xyz, r2.xyz);
  r2.x = dot(r7.xyz, cb2[0].xyz);
  r2.x = max(0, r2.x);
  r1.w = max(0, r1.w);
  r1.w = log2(r1.w);
  r1.w = r2.w * r1.w;
  r1.w = exp2(r1.w);
  r1.w = r1.w * r5.w;
  r2.yzw = cb0[7].xyz * cb0[6].xyz;
  r2.yzw = r2.yzw * r1.www;
  r3.xyz = cb0[6].xyz * r5.xyz;
  r2.xyz = r3.xyz * r2.xxx + r2.yzw;
  r1.xyz = r2.xyz + r1.xyz;
  r0.xyz = r5.xyz * r0.xyz + r1.xyz;
  o0.xyz = r0.xyz * r0.www;
  o0.w = 1;
  return;
}
