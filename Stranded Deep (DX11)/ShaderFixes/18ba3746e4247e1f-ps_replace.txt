// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 18ba3746e4247e1f-ps_replace.txt
// 3DMigoto: 18ba3746e4247e1f |    Unity headers extracted from AFS Foliage V4 - Deferred.shader
//    Shader "Beam Team/Standard/Terrain/AFS/Foliage Shader v4 - Deferred" {
//      Properties {
//      [LM_Albedo] [LM_Transparency]  _MainTex ("Base (RGB)", 2D) = "white" { }
//      [LM_TransparencyCutOff]  _Cutoff ("Alpha cutoff", Range(0,1)) = 0.3
//      [LM_Glossiness]  _BumpTransSpecMap ("Normal (GA) Trans(R) Smoothness(B)", 2D) = "bump" { }
//      [LM_Specular]  _SpecularReflectivity ("Specular Reflectivity", Color) = (0.2,0.2,0.2,1)
//       _TranslucencyColor ("Translucency Color", Color) = (0.73,0.85,0.41,1)
//       _TranslucencyViewDependency ("Translucency View Dependency", Range(0,1)) = 0.5
//       _LeafTurbulence ("Leaf Turbulence", Range(0,1)) = 0.5
//      [KeywordEnum(Vertex Colors, Vertex Colors And UV4)]  _BendingControls ("Bending Parameters", Float) = 0
//      [HideInInspector]  _HighlightRimColor ("Highlight Rim Color", Color) = (0,0,0,0)
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="AFSFoliageBending" "AfsMode"="Foliage" }
//        Pass 2/2 {
//          Name "DEFERRED"
//          Tags { "LIGHTMODE"="Deferred" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="AFSFoliageBending" "AfsMode"="Foliage" }
//          GpuProgramID 99802
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 43
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from AFS Foliage V4 - Deferred.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 128 7 0
//   Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
//   undeciphered2: 1 7 2 5 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 704
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 80 [unity_DynamicLightmap_HDR]
//   Vector 208 [sunshine_ShadowParamsAndHalfTexel]
//   Vector 224 [sunshine_OvercastCoord] 2
//   Vector 240 [sunshine_OvercastVectorsUV]
//   Vector 384 [sunshine_ShadowCoordDepthStart]
//   Vector 448 [sunshine_ShadowToWorldScale] 3
//   Vector 464 [sunshine_CascadeNearRatiosSq]
//   Vector 480 [sunshine_CascadeFarRatiosSq]
//   Vector 560 [sunshine_ShadowFadeParams] 3
//   Float 572 [_ShadowFade]
//   Vector 592 [_SpecularReflectivity] 3
//   Float 604 [_Cutoff]
//   Float 628 [_AfsRainamount]
//   Matrix 496 [sunshine_CascadeRanges]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   SetTexture 0 [_MainTex] 2D 3
//   SetTexture 1 [_BumpTransSpecMap] 2D 4
//   SetTexture 2 [sunshine_OvercastMap] 2D 2
//   SetTexture 3 [sunshine_Lightmap] 2D 1
//   SetTexture 4 [unity_DynamicLightmap] 2D 0
//   SetTexture 5 [unity_DynamicDirectionality] 2D -1
//   SetTexture 6 [unity_DynamicNormal] 2D -1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 10:58:31 2016
Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[40];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 18ba3746e4247e1f-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = t0.Sample(s3_s, v4.xy).xyzw;
  r0.w = -cb0[37].w + r0.w;
  r0.w = cmp(r0.w < 0);
  if (r0.w != 0) discard;
  r0.w = cmp(0 < cb0[39].y);
  r1.xyzw = t1.Sample(s4_s, v4.xy).xyzw;
  r2.xy = float2(1,0.5) + -r1.zz;
  r2.y = saturate(2.5 * r2.y);
  r2.y = -0.800000012 * r2.y;
  r3.xy = r1.wy * float2(2,2) + float2(-1,-1);
  r1.y = dot(r3.xy, r3.xy);
  r1.y = min(1, r1.y);
  r1.y = 1 + -r1.y;
  r3.z = sqrt(r1.y);
  r4.y = dot(v2.xyz, r3.xyz);
  r1.y = saturate(cb0[39].y * r4.y);
  r1.w = r1.y * r2.y + 1;
  r2.yzw = r1.www * r0.xyz;
  r0.xyz = r0.www ? r2.yzw : r0.xyz;
  r5.xyz = cb0[37].xyz;
  r2.w = r1.y * r2.x + r1.z;
  r5.w = r1.z;
  r6.xyz = float3(0.0199999996,0.0199999996,0.0199999996) + -cb0[37].xyz;
  r2.xyz = r1.yyy * r6.xyz + cb0[37].xyz;
  r2.xyzw = r0.wwww ? r2.xyzw : r5.xyzw;
  r0.w = max(r2.x, r2.y);
  r0.w = max(r0.w, r2.z);
  r0.w = 1 + -r0.w;
  r0.xyz = r0.xyz * r0.www;
  o0.xyz = r0.xyz;
  o0.w = 1;
  o1.xyz = r2.xyz;
  r0.w = v4.w * r2.w;
  o1.w = r0.w;
  r4.x = dot(v1.xyz, r3.xyz);
  r4.z = dot(v3.xyz, r3.xyz);
  o2.xyz = r4.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o2.w = 1;
  r1.y = -r2.w * v4.w + 1;
  r1.y = r1.y * r1.y;
  r1.z = max(9.99999975e-005, r1.y);
  r1.z = r1.z * r1.z;
  r1.z = 2 / r1.z;
  r1.z = -2 + r1.z;
  r1.z = max(9.99999975e-005, r1.z);
  r3.x = v1.w;
  r3.y = v2.w;
  r3.z = v3.w;
  r3.xyz = _WorldSpaceCameraPos.xyz + -r3.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r5.xyzw = t5.Sample(s0_s, v9.zw).xyzw;
  r5.xyz = r5.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r2.w = dot(r5.xyz, r5.xyz);
  r2.w = sqrt(r2.w);
  r2.w = max(0.00100000005, r2.w);
  r5.xyz = r5.xyz / r2.www;
  r3.xyz = r3.xyz * r1.www + r5.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = max(0.00100000005, r1.w);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r1.w = dot(r4.xyz, r3.xyz);
  r3.x = dot(r5.xyz, r3.xyz);
  r3.y = dot(r4.xyz, r5.xyz);
  r3.xy = max(float2(0,0), r3.xy);
  r1.w = max(0, r1.w);
  r1.w = log2(r1.w);
  r1.w = r1.z * r1.w;
  r1.z = 1 + r1.z;
  r1.w = exp2(r1.w);
  r1.z = r1.z * r1.w;
  r1.w = r3.x * r3.x;
  r0.w = r1.w * r0.w + r1.y;
  r0.w = r3.x * r0.w;
  r0.w = r0.w * 8 + 9.99999975e-005;
  r0.w = r1.z / r0.w;
  r1.y = max(9.99999975e-005, r0.w);
  r1.y = sqrt(r1.y);
  r1.z = cmp(cb0[3].w == 0.000000);
  r0.w = r1.z ? r1.y : r0.w;
  r1.yzw = r0.www * r2.xyz + r0.xyz;
  r4.xyzw = t4.Sample(s0_s, v9.zw).xyzw;
  r0.w = cb0[5].x * r4.w;
  r2.xyz = r0.www * r4.xyz;
  r2.xyz = log2(r2.xyz);
  r2.xyz = cb0[5].yyy * r2.xyz;
  r2.xyz = exp2(r2.xyz);
  r4.xyzw = t6.Sample(s0_s, v9.zw).xyzw;
  r3.xzw = r4.zyx * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r3.xzw, r5.xyz);
  r0.w = max(0.125, r0.w);
  r2.xyz = r2.xyz / r0.www;
  r3.xzw = r2.xyz * r2.www;
  r0.w = 1 + -r2.w;
  r2.xyz = r2.xyz * r0.www;
  r2.xyz = r2.xyz * r3.yyy;
  r1.yzw = r3.xzw * r1.yzw;
  r1.yzw = r1.yzw * r3.yyy;
  r0.xyz = r0.xyz * r2.xyz + r1.yzw;
  r1.yzw = -cb0[24].xyz + v7.xyz;
  r1.yzw = cb0[28].xyz * r1.yzw;
  r0.w = dot(r1.yzw, r1.yzw);
  r1.y = 123456792 * r0.w;
  r1.y = frac(r1.y);
  r1.y = -r1.y * cb0[13].y + 1;
  r1.y = r1.y * r0.w;
  r0.w = saturate(-r0.w * cb0[35].y + cb0[35].x);
  r2.xyzw = cmp(r1.yyyy >= cb0[29].xyzw);
  r3.xyzw = cmp(cb0[30].xyzw >= r1.yyyy);
  r3.xyzw = r3.xyzw ? 1.000000 : 0;
  r2.xyzw = r2.xyzw ? 1.000000 : 0;
  r2.xyzw = r2.xyzw * r3.xyzw;
  r3.x = cb0[31].x * r2.x;
  r3.y = cb0[32].x * r2.x;
  r3.z = cb0[33].x * r2.x;
  r3.w = cb0[34].x * r2.x;
  r4.x = cb0[31].y * r2.y;
  r4.y = cb0[32].y * r2.y;
  r4.z = cb0[33].y * r2.y;
  r4.w = cb0[34].y * r2.y;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.x = cb0[31].z * r2.z;
  r4.y = cb0[32].z * r2.z;
  r4.z = cb0[33].z * r2.z;
  r4.w = cb0[34].z * r2.z;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.x = cb0[31].w * r2.w;
  r4.y = cb0[32].w * r2.w;
  r4.z = cb0[33].w * r2.w;
  r4.w = cb0[34].w * r2.w;
  r2.xyzw = r4.xyzw + r3.xyzw;
  r1.yz = r2.zw * v7.xy + r2.xy;
  r2.xyzw = t3.Sample(s1_s, r1.yz).xyzw;
  r1.y = dot(r2.xyzw, float4(1,0.00392156886,1.53787005e-005,6.03086292e-008));
  r1.y = cmp(v7.z >= r1.y);
  r1.y = r1.y ? 1.000000 : 0;
  r0.w = -r1.y * r0.w + 1;
  r1.yz = cb0[15].xy * v7.xx + cb0[14].xy;
  r1.yz = cb0[15].zw * v7.yy + r1.yz;
  r2.xyzw = t2.Sample(s2_s, r1.yz).xyzw;
  r1.y = 1 + -cb0[35].w;
  r1.y = max(r1.y, r2.w);
  r0.w = -r0.w * r1.y + 1;
  r0.w = -r0.w * cb0[13].x + 1;
  r0.w = r0.w * r1.x;
  r1.xyz = v5.xyz * r1.xxx;
  r1.xyz = r1.xyz * r0.www + v6.xyz;
  o3.xyz = r1.xyz + r0.xyz;
  o3.w = 1;
  return;
}
