// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe fbac0f4d25810a11-ps_replace.txt
// 3DMigoto: fbac0f4d25810a11 |    Unity headers extracted from Rocks - MaskyMix Standard.shader
//    Shader "Volund/Standard MaskyMix Scatter (Specular, Surface)" {
//      Properties {
//       _Color ("Color", Color) = (1,1,1,1)
//       _MainTex ("Albedo", 2D) = "white" { }
//       _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//       _Glossiness ("Smoothness", Range(0,1)) = 0.5
//       _SpecColor ("Specular", Color) = (0.2,0.2,0.2,1)
//       _SpecGlossMap ("Specular", 2D) = "white" { }
//       _BumpScale ("Scale", Float) = 1
//       _BumpMap ("Normal Map", 2D) = "bump" { }
//       _Parallax ("Height Scale", Range(0.005,0.08)) = 0.02
//       _ParallaxMap ("Height Map", 2D) = "black" { }
//       _OcclusionStrength ("Strength", Range(0,1)) = 1
//       _OcclusionMap ("Occlusion", 2D) = "white" { }
//       _EmissionColor ("Color", Color) = (0,0,0,1)
//       _EmissionMap ("Emission", 2D) = "white" { }
//       _DetailMask ("Detail Mask", 2D) = "white" { }
//       _DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" { }
//       _DetailNormalMapScale ("Scale", Float) = 1
//       _DetailNormalMap ("Normal Map", 2D) = "bump" { }
//      [Enum(UV0,0,UV1,1)]  _UVSec ("UV Set for secondary textures", Float) = 0
//      [HideInInspector]  _Mode ("__mode", Float) = 0
//      [HideInInspector]  _SrcBlend ("__src", Float) = 1
//      [HideInInspector]  _DstBlend ("__dst", Float) = 0
//      [HideInInspector]  _ZWrite ("__zw", Float) = 1
//      [HideInInspector]  _SmoothnessInAlbedo ("__smoothnessinalbedo", Float) = 0
//       _MaskyMixAlbedo ("MaskyMix Albedo (RGB) Gloss(A)", 2D) = "white" { }
//       _MaskyMixUVTile ("MaskyMix UV Tile", Range(1,200)) = 10
//       _MaskyMixColor ("MaskyMix Color (2x)", Color) = (0.5,0.5,0.5,0.5)
//       _MaskyMixSpecColor ("MaskyMix Spec Color", Color) = (0.2,0.2,0.2,1)
//       _MaskyMixBumpMap ("MaskyMix Bump", 2D) = "bump" { }
//       _MaskyMixBumpScale ("MaskyMix Bump Scale", Range(0.1,2)) = 1
//       _MaskyMixWorldDirection ("MaskyMix World Dir", Vector) = (0,1,0,0)
//       _MaskyMixMask ("MaskyMix Mask (R)", 2D) = "white" { }
//       _MaskyMixMaskTile ("MaskyMix Mask UV Tile", Range(1,100)) = 10
//       _MaskyMixMaskFalloff ("MaskyMix Mask Falloff", Range(0.0001,2.5)) = 0.1
//       _MaskyMixMaskThresholdLow ("MaskyMix Mask Threshold Low", Range(0,1)) = 0.5
//       _MaskyMixMaskThresholdHi ("MaskyMix Mask Threshold Hi", Range(0,1)) = 0.6
//       _MetaAlbedoDesaturation ("Meta Albedo Desaturation", Range(0,1)) = 0
//      [HDR]  _MetaAlbedoTint ("Meta Albedo Tint", Color) = (1,1,1,1)
//      [HDR]  _MetaAlbedoAdd ("Meta Albedo Add", Color) = (0,0,0,0)
//      }
//      Fallback "Diffuse"
//      SubShader 1/2 {
//        LOD 400
//        Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
//        Pass 2/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardAdd" "RenderType"="Opaque" "PerformanceChecks"="False" }
//          ZWrite Off
//          Blend One One
//          GpuProgramID 117219
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 34
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Rocks - MaskyMix Standard.shader.decompressed:
//   API d3d11
//   Shader model ps_5_0
//   undeciphered1: 127 6 0
//   Keywords { "POINT" }
//   undeciphered2: 1 6 3 6 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 416
//   Vector 48 [unity_ColorSpaceLuminance]
//   Vector 96 [_LightColor0]
//   Vector 112 [_SpecColor]
//   Vector 192 [_Color]
//   Float 256 [_BumpScale]
//   Float 268 [_Glossiness]
//   Vector 304 [_MaskyMixColor]
//   Vector 320 [_MaskyMixSpecColor]
//   Float 336 [_MaskyMixUVTile]
//   Float 340 [_MaskyMixBumpScale]
//   Float 364 [_MaskyMixMaskTile]
//   Float 368 [_MaskyMixMaskFalloff]
//   Float 372 [_MaskyMixMaskThresholdLow]
//   Float 376 [_MaskyMixMaskThresholdHi]
//   Matrix 128 [_LightMatrix0]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 720
//   Vector 0 [_WorldSpaceLightPos0]
//   SetTexture 0 [_MainTex] 2D 1
//   SetTexture 1 [_MaskyMixBumpMap] 2D 4
//   SetTexture 2 [_BumpMap] 2D 2
//   SetTexture 3 [_MaskyMixAlbedo] 2D 3
//   SetTexture 4 [_MaskyMixMask] 2D 5
//   SetTexture 5 [_LightTexture0] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:07:00 2016
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[24];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float3 v1 : TEXCOORD0,
  float w1 : TEXCOORD5,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe fbac0f4d25810a11-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xy = t2.Sample(s2_s, v5.xy).yw;
  r0.xy = r0.yx * float2(2,2) + float2(-1,-1);
  r0.zw = cb0[16].xx * r0.xy;
  r0.z = dot(r0.zw, r0.zw);
  r0.z = min(1, r0.z);
  r0.z = 1 + -r0.z;
  r1.xy = cb0[21].xx * v5.xy;
  r1.zw = t1.Sample(s4_s, r1.xy).yw;
  r2.xyzw = t3.Sample(s3_s, r1.xy).xyzw;
  r1.xy = r1.wz * float2(2,2) + float2(-1,-1);
  r1.xy = cb0[21].yy * r1.xy;
  r0.w = dot(r1.xy, r1.xy);
  r1.xy = r0.xy * cb0[16].xx + r1.xy;
  r0.x = min(1, r0.w);
  r0.x = 1 + -r0.x;
  r0.xz = sqrt(r0.xz);
  r1.z = r0.z * r0.x;
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r1.xyz * r0.xxx;
  r1.xy = cb0[22].ww * v5.xy;
  r0.w = t4.Sample(s5_s, r1.xy).x;
  r0.w = w1.x * r0.w;
  r0.w = 9.99999975e-006 * r0.w;
  r0.w = log2(r0.w);
  r0.w = cb0[23].x * r0.w;
  r0.w = exp2(r0.w);
  r1.x = -cb0[23].y + r0.w;
  r0.w = cmp(cb0[23].y < r0.w);
  r1.y = cb0[23].z + -cb0[23].y;
  r1.y = 1 / r1.y;
  r1.x = saturate(r1.x * r1.y);
  r1.y = r1.x * -2 + 3;
  r1.x = r1.x * r1.x;
  r1.x = r1.y * r1.x;
  r3.xyz = r1.xxx * r0.xyz;
  r0.x = -cb0[16].w + r2.w;
  r3.w = r1.x * r0.x + cb0[16].w;
  r4.x = 0;
  r4.w = cb0[16].w;
  r3.xyzw = r0.wwww ? r3.xyzw : r4.xxxw;
  r0.x = dot(v1.xyz, r3.xyz);
  r0.y = dot(v2.xyz, r3.xyz);
  r0.z = dot(v3.xyz, r3.xyz);
  r1.y = 1 + -r3.w;
  r1.z = dot(r0.xyz, r0.xyz);
  r1.z = rsqrt(r1.z);
  r0.xyz = r1.zzz * r0.xyz;
  r3.xyz = _WorldSpaceCameraPos.xyz + -v4.xyz;
  r1.z = dot(r3.xyz, r3.xyz);
  r1.z = rsqrt(r1.z);
  r3.xyz = r3.xyz * r1.zzz;
  r1.z = dot(r0.xyz, r3.xyz);
  r1.w = 9.99999975e-006 + -r1.z;
  r1.z = cmp(r1.z < 0);
  r4.xyz = r3.xyz * r1.www + r0.xyz;
  r0.xyz = r1.zzz ? r4.xyz : r0.xyz;
  r4.xyz = cb2[0].xyz + -v4.xyz;
  r1.z = dot(r4.xyz, r4.xyz);
  r1.z = rsqrt(r1.z);
  r5.xyz = r4.xyz * r1.zzz + r3.xyz;
  r1.w = dot(r0.xyz, r3.xyz);
  r3.xyz = r4.xyz * r1.zzz;
  r1.z = dot(r5.xyz, r5.xyz);
  r1.zw = max(float2(0.00100000005,0), r1.zw);
  r1.z = rsqrt(r1.z);
  r4.xyz = r5.xyz * r1.zzz;
  r1.z = dot(r0.xyz, r4.xyz);
  r0.x = dot(r0.xyz, r3.xyz);
  r0.y = dot(r3.xyz, r4.xyz);
  r0.xy = max(float2(0,0), r0.xy);
  r0.z = max(0, r1.z);
  r0.z = r0.z * r0.z;
  r1.z = r1.y * r1.y;
  r2.w = r1.z * r1.z + -1;
  r0.z = r0.z * r2.w + 1;
  r2.w = 3.14159274 * r0.z;
  r0.z = r2.w * r0.z + 1.00000001e-007;
  r2.w = r1.z * r1.z;
  r0.z = r2.w / r0.z;
  r2.w = -r1.y * r1.y + 1;
  r3.x = r1.w * r2.w + r1.z;
  r1.z = r0.x * r2.w + r1.z;
  r1.z = r1.w * r1.z;
  r1.w = 1 + -r1.w;
  r1.z = r0.x * r3.x + r1.z;
  r1.z = 9.99999975e-006 + r1.z;
  r1.z = 2 / r1.z;
  r0.z = r1.z * r0.z;
  r0.z = 0.785398185 * r0.z;
  r1.z = max(9.99999975e-005, r0.z);
  r1.z = sqrt(r1.z);
  r2.w = cmp(cb0[3].w == 0.000000);
  r0.z = r2.w ? r1.z : r0.z;
  r0.z = r0.z * r0.x;
  r0.z = max(0, r0.z);
  r3.xyz = cb0[9].xyz * v4.yyy;
  r3.xyz = cb0[8].xyz * v4.xxx + r3.xyz;
  r3.xyz = cb0[10].xyz * v4.zzz + r3.xyz;
  r3.xyz = cb0[11].xyz + r3.xyz;
  r1.z = dot(r3.xyz, r3.xyz);
  r1.z = t5.Sample(s0_s, r1.zz).x;
  r3.xyz = cb0[6].xyz * r1.zzz;
  r4.xyz = r3.xyz * r0.zzz;
  r0.z = 1 + -r0.y;
  r0.y = r0.y * r0.y;
  r0.y = dot(r0.yy, r1.yy);
  r0.y = -0.5 + r0.y;
  r1.y = r0.z * r0.z;
  r1.y = r1.y * r1.y;
  r0.z = r1.y * r0.z;
  r5.xyz = cb0[20].xyz + -cb0[7].xyz;
  r5.xyz = r1.xxx * r5.xyz + cb0[7].xyz;
  r5.xyz = r0.www ? r5.xyz : cb0[7].xyz;
  r6.xyz = float3(1,1,1) + -r5.xyz;
  r6.xyz = r6.xyz * r0.zzz + r5.xyz;
  r4.xyz = r6.xyz * r4.xyz;
  r0.z = r1.w * r1.w;
  r0.z = r0.z * r0.z;
  r0.z = r0.z * r1.w;
  r0.z = r0.y * r0.z + 1;
  r1.y = 1 + -r0.x;
  r1.z = r1.y * r1.y;
  r1.z = r1.z * r1.z;
  r1.y = r1.z * r1.y;
  r0.y = r0.y * r1.y + 1;
  r0.y = r0.y * r0.z;
  r0.x = r0.y * r0.x;
  r0.xyz = r3.xyz * r0.xxx;
  r1.yzw = cb0[19].xyz + cb0[19].xyz;
  r3.xyz = t0.Sample(s1_s, v5.xy).xyz;
  r3.xyz = cb0[12].xyz * r3.xyz;
  r1.yzw = r2.xyz * r1.yzw + -r3.xyz;
  r1.xyz = r1.xxx * r1.yzw + r3.xyz;
  r1.xyz = r0.www ? r1.xyz : r3.xyz;
  r0.w = max(r5.x, r5.y);
  r0.w = max(r0.w, r5.z);
  r0.w = 1 + -r0.w;
  r1.xyz = r1.xyz * r0.www;
  o0.xyz = r1.xyz * r0.xyz + r4.xyz;
  o0.w = 1;
  return;
}
