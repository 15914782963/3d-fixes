// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 56d6389a76737b84-vs_replace.txt
// 3DMigoto: 56d6389a76737b84 |    Unity headers extracted from OceanTopSide_Transparent.shader
//    Shader "Ceto/OceanTopSide_Transparent" {
//      Fallback Off
//      SubShader 1/1 {
//        LOD 200
//        Tags { "QUEUE"="Transparent-150" "IGNOREPROJECTOR"="true" "RenderType"="Ceto_ProjectedGrid_Top" "OceanMask"="Ceto_ProjectedGrid_Top" }
//        GrabPass {
//          "Ceto_RefractionGrab"
//         }
//        Pass 1/2 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Transparent-150" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Ceto_ProjectedGrid_Top" "OceanMask"="Ceto_ProjectedGrid_Top" }
//          Blend SrcAlpha OneMinusSrcAlpha
//          GpuProgramID 16470
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 123
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from OceanTopSide_Transparent.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 122 0 0
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "CETO_USE_OCEAN_DEPTHS_BUFFER" "CETO_UNDERWATER_ON" "CETO_USE_4_SPECTRUM_GRIDS" "CETO_REFLECTION_ON" }
//   undeciphered2: 1 4 4 4 0
//   undeciphered3: 9 2 0 0 3 4
//   ConstBuffer "$Globals" 832
//   Vector 176 [Ceto_PosOffset] 3
//   Vector 320 [Ceto_GridSizes]
//   Vector 336 [Ceto_Choppyness]
//   Vector 352 [Ceto_GridScale] 2
//   Vector 360 [Ceto_ScreenGridSize] 2
//   Float 376 [Ceto_WaveSmoothing]
//   Float 380 [Ceto_MapSize]
//   Float 384 [Ceto_GridEdgeBorder]
//   Float 392 [Ceto_MaxWaveHeight]
//   Matrix 192 [Ceto_Interpolation]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 720
//   Vector 656 [unity_SHBr]
//   Vector 672 [unity_SHBg]
//   Vector 688 [unity_SHBb]
//   Vector 704 [unity_SHC]
//   ConstBuffer "UnityPerDraw" 352
//   Vector 336 [unity_WorldTransformParams]
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 64 [glstate_matrix_modelview0]
//   Matrix 192 [_Object2World]
//   Matrix 256 [_World2Object]
//   SetTexture 0 [Ceto_DisplacementMap0] 2D 0
//   SetTexture 1 [Ceto_DisplacementMap1] 2D 1
//   SetTexture 2 [Ceto_DisplacementMap2] 2D 2
//   SetTexture 3 [Ceto_Overlay_HeightMap] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityPerDraw" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.36 on Fri May 06 11:05:21 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[22];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[45];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[25];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float2 v3 : TEXCOORD0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : TEXCOORD7,
  out float4 o9 : TEXCOORD8)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 56d6389a76737b84-vs_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = saturate(v3.x + v3.y);
  r1.y = cb0[13].w;
  r2.y = cb0[13].z + -r1.y;
  r1.x = cb0[12].w;
  r1.z = cb0[14].w;
  r1.w = cb0[15].w;
  r2.x = cb0[12].z + -r1.x;
  r2.z = cb0[14].z + -r1.z;
  r2.w = cb0[15].z + -r1.w;
  r3.xyzw = r2.xyzw * float4(0.5,0.5,0.5,0.5) + r1.xyzw;
  r4.y = cb0[13].x;
  r5.y = cb0[13].y + -r4.y;
  r4.x = cb0[12].x;
  r4.z = cb0[14].x;
  r4.w = cb0[15].x;
  r5.x = cb0[12].y + -r4.x;
  r5.z = cb0[14].y + -r4.z;
  r5.w = cb0[15].y + -r4.w;
  r6.xyzw = r5.xyzw * float4(0.5,0.5,0.5,0.5) + r4.xyzw;
  r3.xyzw = -r6.xyzw + r3.xyzw;
  r3.xyzw = r3.xyzw * float4(0.5,0.5,0.5,0.5) + r6.xyzw;
  r0.yzw = r3.xyz / r3.www;
  r3.xy = saturate(v0.xy);
  r6.xyzw = r3.xxxx * r2.xyzw + r1.xyzw;
  r7.xyzw = r3.xxxx * r5.xyzw + r4.xyzw;
  r6.xyzw = -r7.xyzw + r6.xyzw;
  r3.xyzw = r3.yyyy * r6.xyzw + r7.xyzw;
  r3.xyz = r3.xyz / r3.www;
  r0.yzw = r3.xyz + -r0.yzw;
  r0.z = dot(r0.yzw, r0.yzw);
  r0.z = rsqrt(r0.z);
  r0.yz = r0.yw * r0.zz;
  r0.yz = max(float2(-1,-1), r0.yz);
  r0.yz = min(float2(1,1), r0.yz);
  r0.xy = r0.yz * r0.xx;
  r3.xz = r0.xy * cb0[24].xx + r3.xz;
  r0.xy = saturate(cb0[22].zw + v0.xy);
  r6.xyz = r0.xxx * r2.xzw + r1.xzw;
  r0.xzw = r0.xxx * r5.xzw + r4.xzw;
  r6.xyz = r6.xyz + -r0.xzw;
  r7.xy = saturate(v0.yx);
  r0.xzw = r7.xxx * r6.xyz + r0.xzw;
  r0.xz = r0.xz / r0.ww;
  r0.xz = r0.xz + -r3.xz;
  r0.xz = cb0[23].zz * r0.xz;
  r6.xyz = cb0[22].xxx * cb0[20].xyz;
  r6.xyz = float3(1,1,1) / r6.xyz;
  r8.xyzw = r6.xxyy * r0.xzxz;
  r0.xz = r6.zz * r0.xz;
  r0.xz = cb0[23].ww * r0.xz;
  r0.x = dot(r0.xz, r0.xz);
  r8.xyzw = cb0[23].wwww * r8.xyzw;
  r0.z = dot(r8.xy, r8.xy);
  r0.w = dot(r8.zw, r8.zw);
  r1.xyz = r7.yyy * r2.xzw + r1.xzw;
  r2.xyz = r7.yyy * r5.xzw + r4.xzw;
  r1.xyz = -r2.xyz + r1.xyz;
  r1.xyz = r0.yyy * r1.xyz + r2.xyz;
  r1.xy = r1.xy / r1.zz;
  r1.xy = r1.xy + -r3.xz;
  r1.xy = cb0[23].zz * r1.xy;
  r2.xyzw = r1.xyxy * r6.xxyy;
  r1.xy = r1.xy * r6.zz;
  r1.xy = cb0[23].ww * r1.xy;
  r0.y = dot(r1.xy, r1.xy);
  r0.x = max(r0.x, r0.y);
  r0.x = log2(r0.x);
  r1.xyzw = cb0[23].wwww * r2.xyzw;
  r0.y = dot(r1.xy, r1.xy);
  r1.x = dot(r1.zw, r1.zw);
  r0.w = max(r1.x, r0.w);
  r0.w = log2(r0.w);
  r0.y = max(r0.z, r0.y);
  r0.y = log2(r0.y);
  r0.xyw = float3(0.5,0.5,0.5) * r0.xyw;
  r1.xy = cb0[11].xz + r3.xz;
  r2.xyzw = r1.xyxy * r6.xxyy;
  r1.xy = r1.xy * r6.zz;
  r1.xyzw = t2.SampleLevel(s2_s, r1.xy, r0.x).xyzw;
  r4.xyzw = t0.SampleLevel(s0_s, r2.xy, r0.y).xyzw;
  r0.xyzw = t1.SampleLevel(s1_s, r2.zw, r0.w).xyzw;
  r4.xz = cb0[21].xx * r4.xz;
  r0.xz = cb0[21].yy * r0.xz;
  r0.xyz = r4.xyz + r0.xyz;
  r1.xz = cb0[21].zz * r1.xz;
  r0.xyz = r1.xyz + r0.xyz;
  r0.xyz = cb0[22].yyy * r0.xyz;
  r0.y = max(-cb0[24].z, r0.y);
  r0.y = min(cb0[24].z, r0.y);
  r1.xyzw = t3.SampleLevel(s3_s, v0.xy, 0).yxzw;
  r1.x = saturate(r1.x);
  r0.w = 1 + -r1.x;
  r1.w = r0.y * r0.w + r1.y;
  r1.xz = r0.xz * r0.ww;
  r0.xy = _WorldSpaceCameraPos.xz + -r3.xz;
  r0.x = dot(r0.xy, r0.xy);
  r0.x = sqrt(r0.x);
  r0.x = cb1[5].w * r0.x;
  r0.x = 0.800000012 * r0.x;
  r0.x = -r0.x * r0.x + 1;
  r0.x = max(0, r0.x);
  r0.xyz = r1.xwz * r0.xxx + r3.xyz;
  r1.xyzw = cb3[1].xyzw * r0.yyyy;
  r1.xyzw = cb3[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb3[2].xyzw * r0.zzzz + r1.xyzw;
  r1.xyzw = cb3[3].xyzw * v0.wwww + r1.xyzw;
  o0.xyzw = r1.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 56d6389a76737b84-vs_replace.txt
if (r1.w != 1.0) { r1.x += separation * (r1.w - convergence); }

  r2.xyz = cb3[13].xyz * r0.yyy;
  r2.xyz = cb3[12].xyz * r0.xxx + r2.xyz;
  r2.xyz = cb3[14].xyz * r0.zzz + r2.xyz;
  r2.xyz = cb3[15].xyz * v0.www + r2.xyz;
  o1.w = r2.x;
  r3.x = cb3[16].y;
  r3.y = cb3[17].y;
  r3.zw = cb3[18].yy;
  r0.w = dot(r3.xyw, r3.xyw);
  r0.w = rsqrt(r0.w);
  r3.xyzw = r3.xyzw * r0.wwww;
  r0.w = dot(cb3[12].xyz, cb3[12].xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = cb3[12].yzx * r0.www;
  r5.xyz = r4.xyz * r3.wxy;
  r5.xyz = r3.ywx * r4.yzx + -r5.xyz;
  r5.xyz = cb3[21].www * r5.xyz;
  o1.y = r5.x;
  o1.x = r4.z;
  o1.z = r3.x;
  o2.w = r2.y;
  o3.w = r2.z;
  o2.x = r4.x;
  o3.x = r4.y;
  o2.z = r3.y;
  o2.y = r5.y;
  o3.y = r5.z;
  o3.z = r3.w;
  r0.w = cb3[5].z * r0.y;
  r0.w = cb3[4].z * r0.x + r0.w;
  r0.w = cb3[6].z * r0.z + r0.w;
  o4.xyz = r0.xyz;
  r0.x = cb3[7].z * v0.w + r0.w;
  r0.x = cb1[5].w * r0.x;
  o4.w = -r0.x;
  r0.x = cb1[5].x * r1.y;
  r0.w = 0.5 * r0.x;
  r0.xz = float2(0.5,0.5) * r1.xw;
  r2.xy = r0.xw + r0.zz;
  o6.xy = r1.xy * float2(0.5,-0.5) + r0.zz;
  r2.zw = r1.zw;
  o5.xyzw = r2.xyzw;
  o9.xyzw = r2.xyzw;
  o6.zw = r2.zw;
  o7.xy = v0.xy;
  o7.zw = v3.xy;
  r0.x = r3.y * r3.y;
  r0.x = r3.x * r3.x + -r0.x;
  r1.xyzw = r3.xyzw * r3.ywzx;
  r2.x = dot(cb2[41].xyzw, r1.xyzw);
  r2.y = dot(cb2[42].xyzw, r1.xyzw);
  r2.z = dot(cb2[43].xyzw, r1.xyzw);
  o8.xyz = cb2[44].xyz * r0.xxx + r2.xyz;
  return;
}

/****************************** COMPILE WARNINGS ******************************
C:\Steam\SteamApps\common\Stranded Deep\ShaderFixes\56d6389a76737b84-vs_replace.txt(146,14-15): warning X3578: Output value 'o8' is not completely initialized

****************************** COMPILE WARNINGS ******************************/
