// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed aec9235d20539800-ps.txt
// 3DMigoto: aec9235d20539800 |    Unity headers extracted from Atmosphere BRDF.shader
//    Shader "Beam Team/Atmosphere/Atmosphere BRDF" {
//      Properties {
//       _PolarisingColor ("", Color) = (0,0,0,1)
//      }
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZTest Always
//          GpuProgramID 56085
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 3
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Atmosphere BRDF.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 114 0 2
//   undeciphered2: 1 1 2 1 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 192
//   Float 96 [Rg]
//   Float 100 [Rt]
//   Float 108 [RES_R]
//   Float 112 [RES_MU]
//   Float 116 [RES_MU_S]
//   Float 120 [RES_NU]
//   Vector 128 [_SunDirection] 3
//   Float 140 [_MieG]
//   Vector 144 [_SunPosition] 3
//   Float 160 [_StormFade]
//   Vector 176 [_PolarisingColor] 3
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   SetTexture 0 [_Inscatter] 3D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.40 on Sun Jul 10 17:33:54 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[12], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 9
dcl_constantbuffer cb10[4], immediateIndexed
dcl_constantbuffer cb11[22], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r4.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed aec9235d20539800-ps.txt
mov r5.xyzw, cb1[4].xyzw
mov r6.xyzw, l(0)
mul r6.x, -r4.x, r4.y
mul r8.xyzw, cb10[0].xyzw, r6.xxxx
mad r8.xyzw, cb10[1].xyzw, r6.yyyy, r8.xyzw
mad r8.xyzw, cb10[2].xyzw, r6.zzzz, r8.xyzw
mad r8.xyzw, cb10[3].xyzw, r6.wwww, r8.xyzw
mul r7.xyzw, cb11[12].xyzw, r8.xxxx
mad r7.xyzw, cb11[13].xyzw, r8.yyyy, r7.xyzw
mad r7.xyzw, cb11[14].xyzw, r8.zzzz, r7.xyzw
mad r7.xyzw, cb11[15].xyzw, r8.wwww, r7.xyzw
add r5.xyz, r5.xyz, -r7.xyz

dp2 r0.y, v1.xyxx, v1.xyxx
lt r0.w, l(1.000000), r0.y
div r1.xz, v1.xxyx, r0.yyyy
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mov r0.xz, v1.xxyx
movc r0.xyz, r0.wwww, r1.xyzx, r0.xyzx
add r0.w, r0.y, l(1.000000)
mad r0.xyz, r0.xyzx, l(2.000000, -1.000000, 2.000000, 0.000000), l(0.000000, 1.000000, 0.000000, 0.000000)
div r0.xyz, r0.xyzx, r0.wwww
add r1.xyz, r5.xyzx, l(0.000000, 6360010.000000, 0.000000, 0.000000)
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r2.x, r0.w
dp3 r2.y, r1.xyzx, r0.xyzx
mad r0.w, r2.y, r2.y, -r0.w
mad r0.w, cb0[6].y, cb0[6].y, r0.w
sqrt r0.w, r0.w
add r0.w, -r0.w, -r2.y
max r0.w, r0.w, l(0.000000)
lt r1.w, l(0.000000), r0.w
add r3.y, r0.w, r2.y
mov r3.x, cb0[6].y
movc r2.xy, r1.wwww, r3.xyxx, r2.xyxx
ge r2.z, cb0[6].y, r2.x
if_nz r2.z
  mad r3.xyz, r0.wwww, r0.xyzx, r1.xyzx
  movc r1.xyz, r1.wwww, r3.xyzx, r1.xyzx
  dp3 r0.x, r0.xyzx, cb0[8].xyzx
  dp3 r0.y, r1.xyzx, cb0[8].xyzx
  div r0.y, r0.y, r2.x
  mul r0.z, cb0[6].x, cb0[6].x
  mad r0.w, cb0[6].y, cb0[6].y, -r0.z
  sqrt r1.z, r0.w
  mul r0.w, r2.x, r2.x
  mad r0.z, r2.x, r2.x, -r0.z
  sqrt r0.z, r0.z
  mad r0.w, r2.y, r2.y, -r0.w
  mad r0.w, cb0[6].x, cb0[6].x, r0.w
  lt r2.x, r2.y, l(0.000000)
  lt r2.z, l(0.000000), r0.w
  and r2.x, r2.z, r2.x
  div r2.zw, l(0.000000, 0.000000, 0.500000, 0.500000), cb0[7].xxxy
  add r3.w, -r2.z, l(0.500000)
  mul r1.y, r1.z, r1.z
  add r1.w, r2.z, l(0.500000)
  mov r3.xyz, l(1.000000,0,0,0)
  mov r1.x, l(-1.000000)
  movc r3.xyzw, r2.xxxx, r3.xyzw, r1.xyzw
  div r1.x, l(0.500000), cb0[6].w
  div r1.y, r0.z, r1.z
  div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[6].w
  add r1.z, -r1.z, l(1.000000)
  mad r1.w, r1.y, r1.z, r1.x
  add r0.zw, r0.zzzw, r3.zzzy
  sqrt r0.w, r0.w
  mad r0.w, r2.y, r3.x, r0.w
  div r0.z, r0.w, r0.z
  div r2.xy, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[7].xyxx
  add r2.xy, -r2.xyxx, l(0.500000, 1.000000, 0.000000, 0.000000)
  mad r1.z, r0.z, r2.x, r3.w
  max r0.y, r0.y, l(-0.197500)
  mul r0.y, r0.y, l(5.34962368)
  min r0.z, |r0.y|, l(1.000000)
  max r0.w, |r0.y|, l(1.000000)
  div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
  mul r0.z, r0.w, r0.z
  mul r0.w, r0.z, r0.z
  mad r2.x, r0.w, l(0.0208350997), l(-0.085133)
  mad r2.x, r0.w, r2.x, l(0.180141)
  mad r2.x, r0.w, r2.x, l(-0.330299497)
  mad r0.w, r0.w, r2.x, l(0.999866)
  mul r2.x, r0.w, r0.z
  lt r2.z, l(1.000000), |r0.y|
  mad r2.x, r2.x, l(-2.000000), l(1.57079637)
  and r2.x, r2.z, r2.x
  mad r0.z, r0.z, r0.w, r2.x
  min r0.y, r0.y, l(1.000000)
  lt r0.y, r0.y, -r0.y
  movc r0.y, r0.y, -r0.z, r0.z
  mad r0.y, r0.y, l(0.909090877), l(0.740000)
  mul r0.y, r0.y, l(0.500000)
  mad r0.y, r0.y, r2.y, r2.w
  add r0.z, r0.x, l(1.000000)
  mul r0.z, r0.z, l(0.500000)
  add r0.w, cb0[7].z, l(-1.000000)
  mul r2.x, r0.w, r0.z
  round_ni r2.x, r2.x
  mad r0.z, r0.z, r0.w, -r2.x
  add r0.y, r0.y, r2.x
  div r1.y, r0.y, cb0[7].z
  add r0.w, -r0.z, l(1.000000)
  mul r2.xyz, r0.wwww, r1.yzwy
  sample_l r2.xyzw, r2.xyzx, t0.xyzw, s0, l(0.000000)
  add r0.y, r0.y, l(1.000000)
  div r1.x, r0.y, cb0[7].z
  mul r0.yzw, r0.zzzz, r1.xxzw
  sample_l r1.xyzw, r0.yzwy, t0.xyzw, s0, l(0.000000)
  add r1.xyzw, r1.xyzw, r2.xyzw
  mul r0.yzw, r1.wwww, r1.xxyz
  max r1.w, r1.x, l(0.000100)
  div r0.yzw, r0.yyzw, r1.wwww
  mad r1.w, r0.x, r0.x, l(1.000000)
  mul r2.x, r1.w, l(0.0596831031)
  mad r2.y, -cb0[8].w, cb0[8].w, l(1.000000)
  mul r2.y, r2.y, l(0.119366206)
  mad r2.zw, cb0[8].wwww, cb0[8].wwww, l(0.000000, 0.000000, 1.000000, 2.000000)
  dp2 r0.x, r0.xxxx, cb0[8].wwww
  add r0.x, -r0.x, r2.z
  log r0.x, r0.x
  mul r0.xyzw, r0.xyzw, l(-1.500000, 1.000000, 0.429629624, 0.175226584)
  exp r0.x, r0.x
  mul r0.x, r0.x, r2.y
  mul r0.x, r1.w, r0.x
  div r0.x, r0.x, r2.w
  mul r0.xyz, r0.xxxx, r0.yzwy
  mad r0.xyz, r1.xyzx, r2.xxxx, r0.xyzx
else 
  mov r0.xyz, l(0,0,0,0)
endif 
mul_sat r0.w, cb0[9].y, l(-0.020000)
mad r0.xyz, -r0.xyzx, l(15.299999, 15.299999, 15.299999, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mad r1.xyz, -r0.wwww, l(0.000000, 0.003000, 0.004500, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mad r0.xyz, -r0.xyzx, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r0.w, -cb0[9].y, l(100.000000)
mul_sat r0.w, r0.w, l(0.00909090880)
add r0.w, -r0.w, l(1.000000)
mad r1.xyz, r0.wwww, l(0.0910000056, 0.089000, 0.088000, 0.000000), l(0.009000, 0.011000, 0.012000, 0.000000)
add r1.xyz, -r0.xyzx, r1.xyzx
mad r0.xyz, cb0[10].xxxx, r1.xyzx, r0.xyzx
mul o0.xyz, r0.xyzx, cb0[11].xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used