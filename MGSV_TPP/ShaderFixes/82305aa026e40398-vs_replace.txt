// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:43:38 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR0,
  out float4 o2 : COLOR1,
  out float4 o3 : TEXCOORD0,
  out float4 o4 : TEXCOORD1,
  out float4 o5 : TEXCOORD2,
  out float3 o6 : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = v1.xyzw;
  r1.xyz = v0.xyz;
  r1.xyz = r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r1.xyz = r1.xyz;
  r2.xy = v0.xy;
  r0.xyzw = r0.xyzw;
  r2.zw = v2.xy;
  r2.xy = r2.xy;
  r0.xyzw = r0.xyzw;
  r2.zw = r2.zw;
  r3.xyzw = g_vsObject.m_localParam[3].xyzw;
  r3.xyzw = r3.xyzw;
  r4.xyzw = g_vsObject.m_localParam[2].yyyy;
  r4.xyzw = r4.xyzw;
  r5.w = 1;
  r5.xyz = v0.xyz;
  r6.x = dot(r5.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r6.y = dot(r5.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r6.z = dot(r5.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r6.w = dot(r5.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r5.x = dot(r6.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r5.y = dot(r6.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r5.z = dot(r6.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r5.w = dot(r6.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r5.xyzw = r5.xyzw;
  r0.xyzw = r3.xyzw * r0.xyzw;
  r0.xyz = r0.xyz;
  r3.xyz = cmp(float3(0.0392800011,0.0392800011,0.0392800011) >= r0.xyz);
  r3.xyz = r3.xyz ? float3(1,1,1) : float3(0,0,0);
  r6.xyz = r0.xyz / float3(12.9200001,12.9200001,12.9200001);
  r6.xyz = r6.xyz * r3.xyz;
  r3.xyz = -r3.xyz;
  r3.xyz = float3(1,1,1) + r3.xyz;
  r7.xyz = float3(0.0549999997,0.0549999997,0.0549999997) + r0.xyz;
  r7.xyz = r7.xyz / float3(1.05499995,1.05499995,1.05499995);
  r7.xyz = max(float3(9.99999975e-006,9.99999975e-006,9.99999975e-006), r7.xyz);
  r7.xyz = log2(r7.xyz);
  r7.xyz = float3(2.4000001,2.4000001,2.4000001) * r7.xyz;
  r7.xyz = exp2(r7.xyz);
  r3.xyz = r7.xyz * r3.xyz;
  r0.xyz = r6.xyz + r3.xyz;
  r0.xyz = r0.xyz;
  r4.xyzw = r4.xyzw;
  r2.zw = r2.zw;
  r1.w = 2 * r2.x;
  r3.x = -1 + r1.w;
  r1.w = -2 * r2.y;
  r3.y = 1 + r1.w;
  r3.z = r5.w;
  r5.xyzw = r5.xyzw;
  r0.xyz = r0.xyz;
  r0.w = r0.w;
  r4.xyzw = r4.xyzw;
  r2.zw = r2.zw;
  r3.x = r3.x;
  r3.y = r3.y;
  r3.z = r3.z;
  o0.xyzw = r5.xyzw;
  o1.xyzw = r0.xyzw;
  o2.xyzw = r4.xyzw;
  o3.xy = r2.zw;
  o4.xyz = r3.xyz;
  o6.xyz = r1.xyz;
  o5.xyz = float3(1,1,1);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float       
// TEXCOORD                 2   xyzw        4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
// TEXCOORD                 2   xyz         5     NONE   float   xyz 
// TEXCOORD                 3   xyz         6     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[8], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xy
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyz
dcl_temps 8

#line 83 "d:\work\master\git_clone\_intermediate\win64\GrSystemShaders_dx11_win64\Release\Primitive_Cubemap_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inColor<0,1,2,3>

#line 98
mov r1.xyz, v0.xyzx  // NGetNormal_getNormal_inPosition<0,1,2>
nop 
mov r1.xyz, r1.xyzx  // inPosition<0,1,2>

#line 52
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 99
mov r1.xyz, r1.xyzx  // NGetNormal_getNormal_outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 87
mov r2.xy, v0.xyxx  // NTransformInput_transform_inPosition<0,1>
mov r0.xyzw, r0.xyzw  // NTransformInput_transform_inColor<0,1,2,3>
mov r2.zw, v2.xxxy  // NTransformInput_transform_inUV<0,1>

#line 92
nop 
mov r2.xy, r2.xyxx  // inPosition<0,1>
mov r0.xyzw, r0.xyzw  // inColor<0,1,2,3>
mov r2.zw, r2.zzzw  // inUV<0,1>

#line 60
nop 

#line 48
mov r3.xyzw, cb5[12].xyzw  // GetBaseColor<0,1,2,3>

#line 60
mov r3.xyzw, r3.xyzw  // baseColor<0,1,2,3>
nop 

#line 55
mov r4.xyzw, cb5[11].yyyy  // GetTextureMask<0,0,0,0>

#line 61
mov r4.xyzw, r4.xyzw  // textureMask<0,1,2,3>

#line 64
nop 
mov r5.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r5.xyz, v0.xyzx
dp4 r6.x, r5.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r6.y, r5.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r6.z, r5.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r6.w, r5.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 65
nop 

#line 408
dp4 r5.x, r6.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r5.y, r6.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r5.z, r6.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r5.w, r6.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 65
mov r5.xyzw, r5.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mul r0.xyzw, r0.xyzw, r3.xyzw  // outColor<0:Inf,1:Inf,2:Inf,3:Inf>
nop 
mov r0.xyz, r0.xyzx  // inSRGB<0:Inf,1:Inf,2:Inf>

#line 48
ge r3.xyz, l(0.039280, 0.039280, 0.039280, 0.000000), r0.xyzx
movc r3.xyz, r3.xyzx, l(1.000000,1.000000,1.000000,0), l(0,0,0,0)  // mask<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f]>
div r6.xyz, r0.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
mul r6.xyz, r3.xyzx, r6.xyzx
mov r3.xyz, -r3.xyzx
add r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r7.xyz, r0.xyzx, l(0.055000, 0.055000, 0.055000, 0.000000)
div r7.xyz, r7.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000)
max r7.xyz, r7.xyzx, l(0.000010, 0.000010, 0.000010, 0.000000)
log r7.xyz, r7.xyzx
mul r7.xyz, r7.xyzx, l(2.400000, 2.400000, 2.400000, 0.000000)
exp r7.xyz, r7.xyzx
mul r3.xyz, r3.xyzx, r7.xyzx
add r0.xyz, r3.xyzx, r6.xyzx  // GammaDecode<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 67
mov r0.xyz, r0.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyzw, r4.xyzw  // outMask<0,1,2,3>
mov r2.zw, r2.zzzw  // outBaseUV<0,1>
mul r1.w, r2.x, l(2.000000)
add r3.x, r1.w, l(-1.000000)  // outBasePos<0:Inf>
mul r1.w, r2.y, l(-2.000000)
add r3.y, r1.w, l(1.000000)  // outBasePos<1:Inf>
mov r3.z, r5.w  // outBasePos<2:NaN:Inf>

#line 92
mov r5.xyzw, r5.xyzw  // NTransformInput_transform_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyz, r0.xyzx  // NTransformInput_transform_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, r0.w  // NTransformInput_transform_outColor<3:Inf>
mov r4.xyzw, r4.xyzw  // NTransformInput_transform_outMask<0,1,2,3>
mov r2.zw, r2.zzzw  // NTransformInput_transform_outBaseUV<0,1>
mov r3.x, r3.x  // NTransformInput_transform_outBasePos<0:Inf>
mov r3.y, r3.y  // NTransformInput_transform_outBasePos<1:Inf>
mov r3.z, r3.z  // NTransformInput_transform_outBasePos<2:NaN:Inf>
mov o0.xyzw, r5.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xyzw, r0.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:Inf>
mov o2.xyzw, r4.xyzw  // outMask<0,1,2,3>
mov o3.xy, r2.zwzz  // outBaseUV<0,1>
mov o4.xyz, r3.xyzx  // outBasePos<0:Inf,1:Inf,2:NaN:Inf>

#line 99
mov o6.xyz, r1.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 67
mov o5.xyz, l(1.000000,1.000000,1.000000,0)  // outTangent<0: 1f,1: 1f,2: 1f>
ret 
// Approximately 75 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(55,14-15): warning X3578: Output value 'o3' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(56,14-15): warning X3578: Output value 'o4' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(57,14-15): warning X3578: Output value 'o5' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
