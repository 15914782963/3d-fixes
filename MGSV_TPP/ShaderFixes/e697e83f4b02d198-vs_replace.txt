// ---- Created with 3Dmigoto v1.2.27 on Mon Jan 25 23:08:44 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : POSITION0,
  out float4 o0 : TEXCOORD0,
  out float3 o1 : TEXCOORD1,
  out float4 o2 : SV_Position0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = float3(-1,0,0) * g_vsObject.m_localParam[0].xxx;
  r1.xyz = float3(0,0,-1) * g_vsObject.m_localParam[0].yyy;
  r0.xyz = r1.xyz + r0.xyz;
  r1.xyz = float3(0,1,0) * g_vsObject.m_localParam[0].zzz;
  r0.xyz = r1.xyz + r0.xyz;
  r1.xyz = float3(1,1,1) * g_vsMaterial.m_materials[4].xyw;
  r0.xyz = r1.xyz + r0.xyz;
  r0.xy = float2(0.0299999993,0.0299999993) * r0.xy;
  r0.xy = float2(0.5,-0.5) * r0.xy;
  r1.xy = float2(0.5,0.5) + r0.xy;
  r0.x = 0.0199999996 * r0.z;
  r0.x = max(0, r0.x);
  r0.x = min(1, r0.x);
  r0.x = -r0.x;
  r1.z = 1 + r0.x;
  r0.xyz = v0.zxy;
  r2.xy = float2(2,-2) * r0.yz;
  r2.xy = float2(-1,1) + r2.xy;
  r0.w = 4 * r0.x;
  r1.w = floor(r0.w);
  r1.w = 0.25 * r1.w;
  r0.w = frac(r0.w);
  r0.w = -r0.w;
  r0.y = r0.y + r0.w;
  r3.x = 32 * r0.y;
  r0.y = -r1.w;
  r0.y = r0.z + r0.y;
  r3.y = 4 * r0.y;
  r0.y = 1 / g_vsScene.m_fogParam[1].x;
  r0.x = r0.x * r0.y;
  r0.z = exp2(r0.x);
  r4.z = r0.z;
  r3.xy = float2(2,2) * r3.xy;
  r3.xy = float2(-1,-1) + r3.xy;
  r4.xy = float2(1.06666672,1.01587307) * r3.xy;
  r2.zw = float2(1,1);
  r3.xy = g_vsScene.m_projectionParam.xy * r4.xy;
  r0.xy = r3.xy * r4.zz;
  r0.w = 1;
  r3.x = dot(r0.xyzw, g_vsScene.m_view._m00_m10_m20_m30);
  r3.y = dot(r0.xyzw, g_vsScene.m_view._m01_m11_m21_m31);
  r3.z = dot(r0.xyzw, g_vsScene.m_view._m02_m12_m22_m32);
  o2.xyzw = r2.xyzw;
  o0.xyz = r3.xyz;
  o1.xyz = r1.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// SV_Position              0   xyzw        2      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[26], immediateIndexed
dcl_constantbuffer cb5[10], immediateIndexed
dcl_constantbuffer cb4[5], immediateIndexed
dcl_input v0.xyz
dcl_output o0.xyz
dcl_output o1.xyz
dcl_output_siv o2.xyzw, position
dcl_temps 5

#line 135 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\VolFog_TppVolFog_vs.hlsl"
nop 

#line 119
nop 

#line 30
nop 

#line 408
mul r0.xyz, cb5[9].xxxx, l(-1.000000, 0.000000, 0.000000, 0.000000)
mul r1.xyz, cb5[9].yyyy, l(0.000000, 0.000000, -1.000000, 0.000000)
add r0.xyz, r0.xyzx, r1.xyzx
mul r1.xyz, cb5[9].zzzz, l(0.000000, 1.000000, 0.000000, 0.000000)
add r0.xyz, r0.xyzx, r1.xyzx
mul r1.xyz, cb4[4].xywx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r0.xyz, r0.xyzx, r1.xyzx  // ApplyMatrixT<0:Inf,1:Inf,3:Inf>

#line 30
mov r0.xyz, r0.xyzx  // ssPos<0:Inf,1:Inf,3:Inf>
mul r0.xy, r0.xyxx, l(0.030000, 0.030000, 0.000000, 0.000000)  // ssPos<0:[-2.04169e+037f,2.04169e+037f],1:[-2.04169e+037f,2.04169e+037f]>
mul r0.xy, r0.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000)
add r1.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // ssPos<0:[-1.02085e+037f,1.02085e+037f],1:[-1.02085e+037f,1.02085e+037f]>
mul r0.x, r0.z, l(0.020000)
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)
mov r0.x, -r0.x
add r1.z, r0.x, l(1.000000)  // ssPos<2:[0f,1f]>
mov r1.xy, r1.xyxx  // WorldPosToTopViewScreenSpacePos<0:[-1.02085e+037f,1.02085e+037f],1:[-1.02085e+037f,1.02085e+037f]>
mov r1.z, r1.z  // WorldPosToTopViewScreenSpacePos<2:[0f,1f]>

#line 119
mov r1.xyz, r1.xyzx  // ssPos<0:[-1.02085e+037f,1.02085e+037f],1:[-1.02085e+037f,1.02085e+037f],2:[0f,1f]>
mov r1.xyz, r1.xyzx  // outPosition<0:[-1.02085e+037f,1.02085e+037f],1:[-1.02085e+037f,1.02085e+037f],2:[0f,1f]>

#line 135
mov r1.xyz, r1.xyzx  // NScreenSpaceCameraPosOnRainViewport_getRainSsPos_outPosition<0:[-1.02085e+037f,1.02085e+037f],1:[-1.02085e+037f,1.02085e+037f],2:[0f,1f]>

#line 139
mov r0.xyz, v0.zxyz  // NGetVoxelCoordinate_voxelCoordinate_inPosition<2,0,1>
nop 
mov r0.xyz, r0.xyzx  // inPosition<2,0,1>

#line 86
mul r2.xy, r0.yzyy, l(2.000000, -2.000000, 0.000000, 0.000000)
add r2.xy, r2.xyxx, l(-1.000000, 1.000000, 0.000000, 0.000000)  // outDrawCoord<0:Inf,1:Inf>

#line 90
mul r0.w, r0.x, l(4.000000)  // zSlice<0:Inf>
round_ni r1.w, r0.w
mul r1.w, r1.w, l(0.250000)  // vOffset<0>
frc r0.w, r0.w  // uOffset<0:NaN>
mov r0.w, -r0.w
add r0.y, r0.w, r0.y
mul r3.x, r0.y, l(32.000000)  // outClipCoord<0:NaN:Inf>
mov r0.y, -r1.w
add r0.y, r0.y, r0.z
mul r3.y, r0.y, l(4.000000)  // outClipCoord<1:Inf>
nop 
mov r0.x, r0.x  // inEncodedZ<0>

#line 40
div r0.y, l(1.000000), cb2[25].x  // logFarDistance<0:Inf>
mul r0.x, r0.y, r0.x
exp r0.z, r0.x  // DecodeFogCameraZ<0:NaN:Inf>
mov r4.z, r0.z  // DecodeFogCameraZ<0:NaN:Inf>

#line 95
mov r4.z, r4.z  // outClipCoord<2:NaN:Inf>

#line 99
mul r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
add r3.xy, r3.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // outClipCoord<0:NaN:Inf,1:Inf>
mul r4.xy, r3.xyxx, l(1.066667, 1.015873, 0.000000, 0.000000)  // outClipCoord<0:NaN:Inf,1:Inf>

#line 141
mov r2.xy, r2.xyxx  // NGetVoxelCoordinate_voxelCoordinate_outDrawCoord<0:Inf,1:Inf>
mov r2.zw, l(0,0,1.000000,1.000000)  // NGetVoxelCoordinate_voxelCoordinate_outDrawCoord<2: 1f,3: 1f>
mov r4.xy, r4.xyxx  // NGetVoxelCoordinate_voxelCoordinate_outClipCoord<0:NaN:Inf,1:Inf>
mov r4.z, r4.z  // NGetVoxelCoordinate_voxelCoordinate_outClipCoord<2:NaN:Inf>
mov r4.xyz, r4.xyzx  // NGetViewPos_getViewPos_inClipPos<0:NaN:Inf,1:Inf,2:NaN:Inf>
nop 
mov r4.xyz, r4.xyzx  // inClipPos<0:NaN:Inf,1:Inf,2:NaN:Inf>

#line 56
mul r3.xy, r4.xyxx, cb2[21].xyxx
mul r0.xy, r4.zzzz, r3.xyxx  // outViewPos<0:NaN:Inf,1:NaN:Inf>

#line 143
nop 

#line 71
nop 

#line 408
mov r0.w, l(1.000000)
dp4 r3.x, r0.xyzw, cb2[8].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r0.xyzw, cb2[9].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r0.xyzw, cb2[10].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 71
mov r3.xyz, r3.xyzx  // outWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 143
mov r3.xyz, r3.xyzx  // NGetWorldPos_getWorldPos_outWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o2.xyzw, r2.xyzw  // outPosition<0:Inf,1:Inf,2: 1f,3: 1f>
mov o0.xyz, r3.xyzx  // outWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o1.xyz, r1.xyzx  // outRainSsPos<0:[-1.02085e+037f,1.02085e+037f],1:[-1.02085e+037f,1.02085e+037f],2:[0f,1f]>

#line 126
ret 
// Approximately 70 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(58,14-15): warning X3578: Output value 'o0' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
