// Blue highlight of enemies behind cover. Broken around the hips (game bug?) - optionally disable
// ---- Created with 3Dmigoto v1.2.27 on Mon Jan 25 23:08:32 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer VSBones : register(b6)
{

  struct
  {
    float4x3 m_boneMatrices[32];
  } g_vsBone : packoffset(c0);


  struct
  {
    float4x3 m_boneMatrices[32];
  } g_vsPrevBone : packoffset(c96);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : NORMAL0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  uint4 v4 : BLENDINDICES0,
  float4 v5 : BLENDWEIGHT0,
  out float2 o0 : TEXCOORD1,
  out float p0 : TEXCOORD4,
  out float4 o1 : TEXCOORD2,
  out float4 o2 : TEXCOORD3,
  out float4 o3 : TEXCOORD5,
  out float3 o4 : TEXCOORD6,
  out float4 o5 : SV_Position0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v0.xyz;
  r1.xyz = v1.xyz;
  r2.xyzw = v5.xyzw;
  r3.x = cmp(g_vsObject.m_useWeightCount.x != 0.000000);
  if (r3.x != 0) {
    r2.xyzw = r2.xyzw;
    r3.x = (int)v4.x * 3;
    r4.xyzw = g_vsBone.m_boneMatrices[v4.x]._m00_m10_m20_m30 * r2.xxxx;
    r5.xyzw = g_vsBone.m_boneMatrices[v4.x]._m01_m11_m21_m31 * r2.xxxx;
    r3.xyzw = g_vsBone.m_boneMatrices[v4.x]._m02_m12_m22_m32 * r2.xxxx;
    r2.x = (int)v4.y * 3;
    r6.xyzw = g_vsBone.m_boneMatrices[v4.y]._m00_m10_m20_m30 * r2.yyyy;
    r7.xyzw = g_vsBone.m_boneMatrices[v4.y]._m01_m11_m21_m31 * r2.yyyy;
    r8.xyzw = g_vsBone.m_boneMatrices[v4.y]._m02_m12_m22_m32 * r2.yyyy;
    r4.xyzw = r6.xyzw + r4.xyzw;
    r5.xyzw = r7.xyzw + r5.xyzw;
    r3.xyzw = r8.xyzw + r3.xyzw;
    r2.x = (int)v4.z * 3;
    r6.xyzw = g_vsBone.m_boneMatrices[v4.y]._m00_m10_m20_m30 * r2.zzzz;
    r7.xyzw = g_vsBone.m_boneMatrices[v4.y]._m01_m11_m21_m31 * r2.zzzz;
    r8.xyzw = g_vsBone.m_boneMatrices[v4.y]._m02_m12_m22_m32 * r2.zzzz;
    r4.xyzw = r6.xyzw + r4.xyzw;
    r5.xyzw = r7.xyzw + r5.xyzw;
    r3.xyzw = r8.xyzw + r3.xyzw;
    r2.x = (int)v4.w * 3;
    r6.xyzw = g_vsBone.m_boneMatrices[v4.y]._m00_m10_m20_m30 * r2.wwww;
    r7.xyzw = g_vsBone.m_boneMatrices[v4.y]._m01_m11_m21_m31 * r2.wwww;
    r2.xyzw = g_vsBone.m_boneMatrices[v4.y]._m02_m12_m22_m32 * r2.wwww;
    r4.xyzw = r6.xyzw + r4.xyzw;
    r5.xyzw = r7.xyzw + r5.xyzw;
    r2.xyzw = r3.xyzw + r2.xyzw;
    r0.x = dot(v0.xyzw, r4.xyzw);
    r0.y = dot(v0.xyzw, r5.xyzw);
    r0.z = dot(v0.xyzw, r2.xyzw);

// r0.xyz is already broken by this point. v0 is fine (at least the 2D outline
// is, not confirmed if it's fine in 3D), suggesting that it's the bone
// matrices that are breaking this effect.
    r3.w = 0;
    r3.xyz = v1.xyz;
    r1.x = dot(r3.xyzw, r4.xyzw);
    r1.y = dot(r3.xyzw, r5.xyzw);
    r1.z = dot(r3.xyzw, r2.xyzw);
  }
  r1.w = 0;
  r2.x = dot(r1.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r2.z = dot(r1.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r1.w = 0;
  r3.x = dot(r1.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r3.y = dot(r1.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r3.z = dot(r1.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r1.x = dot(r3.xyz, r3.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = r3.xyz * r1.xxx;
  r0.w = v0.w;
  r3.x = dot(r0.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r3.y = dot(r0.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r3.z = dot(r0.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r3.w = dot(r0.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r4.x = r3.x;
  r4.y = r3.y;
  r4.z = r3.z;
  r5.x = dot(r3.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r5.y = dot(r3.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r5.z = dot(r3.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r5.w = dot(r3.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r3.x = dot(r0.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r3.y = dot(r0.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r3.z = dot(r0.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r0.x = dot(float4(0,0,0,1), g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r0.y = dot(float4(0,0,0,1), g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r0.z = dot(float4(0,0,0,1), g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.y = r5.w;
  r0.y = g_vsScene.m_fogParam[0].x * r0.y;
  r0.y = g_vsScene.m_fogParam[0].y + r0.y;
  o5.xyzw = r5.xyzw;
  o1.xyz = r2.xyz;
  o2.xyz = r3.xyz;
  p0.x = r0.x;
  o3.xyz = r4.xyz;
  o4.xyz = r1.xyz;
  o0.x = r0.y;
  o0.y = r5.w;

// Effect is broken (even in 2D), disable:
float4 params = IniParams.Load(int2(2,0));
if (IniParams.Load(int2(2, 0)).x)
	o5 = 0;

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer VSBones
// {
//
//   struct VSBone
//   {
//       
//       float4x3 m_boneMatrices[32];   // Offset:    0
//
//   } g_vsBone;                        // Offset:    0 Size:  1536
//   
//   struct VSBone
//   {
//       
//       float4x3 m_boneMatrices[32];   // Offset: 1536
//
//   } g_vsPrevBone;                    // Offset: 1536 Size:  1536 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSObject                         cbuffer      NA          NA    5        1
// VSBones                           cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float       
// BLENDINDICES             0   xyzw        4     NONE    uint   xyzw
// BLENDWEIGHT              0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 4     z         0     NONE   float     z 
// TEXCOORD                 2   xyz         1     NONE   float   xyz 
// TEXCOORD                 3   xyz         2     NONE   float   xyz 
// TEXCOORD                 5   xyz         3     NONE   float   xyz 
// TEXCOORD                 6   xyz         4     NONE   float   xyz 
// SV_Position              0   xyzw        5      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[25], immediateIndexed
dcl_constantbuffer cb5[9], immediateIndexed
dcl_constantbuffer cb6[96], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output o0.xy
dcl_output o0.z
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output_siv o5.xyzw, position
dcl_temps 9

#line 157 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\tpp3dfw_TargetMaker_vs.hlsl"
mov r0.xyz, v0.xyzx  // NTransformInput_transform_inPosition<0,1,2>
mov r1.xyz, v1.xyzx  // NTransformInput_transform_inNormal<0,1,2>

#line 161
mov r2.xyzw, v5.xyzw  // NTransformInput_transform_inBlendWeights<0,1,2,3>
nop 
mov r0.xyz, r0.xyzx  // inPosition<0,1,2>
mov r1.xyz, r1.xyzx  // inNormal<0,1,2>
mov r2.xyzw, r2.xyzw  // inBlendWeights<0,1,2,3>

#line 54
ne r3.x, cb5[8].x, l(0.000000)
if_nz r3.x
  nop 
  mov r2.xyzw, r2.xyzw  // blendWeights<0,1,2,3>

#line 22
  imul null, r3.x, v4.x, l(3)
  mul r4.xyzw, r2.xxxx, cb6[r3.x + 0].xyzw  // blendMatrix<0:Inf,3:Inf,6:Inf,9:Inf>
  mul r5.xyzw, r2.xxxx, cb6[r3.x + 1].xyzw  // blendMatrix<1:Inf,4:Inf,7:Inf,10:Inf>
  mul r3.xyzw, r2.xxxx, cb6[r3.x + 2].xyzw  // blendMatrix<2:Inf,5:Inf,8:Inf,11:Inf>
  imul null, r2.x, v4.y, l(3)
  mul r6.xyzw, r2.yyyy, cb6[r2.x + 0].xyzw
  mul r7.xyzw, r2.yyyy, cb6[r2.x + 1].xyzw
  mul r8.xyzw, r2.yyyy, cb6[r2.x + 2].xyzw
  add r4.xyzw, r4.xyzw, r6.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r5.xyzw, r5.xyzw, r7.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r3.xyzw, r3.xyzw, r8.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  imul null, r2.x, v4.z, l(3)
  mul r6.xyzw, r2.zzzz, cb6[r2.x + 0].xyzw
  mul r7.xyzw, r2.zzzz, cb6[r2.x + 1].xyzw
  mul r8.xyzw, r2.zzzz, cb6[r2.x + 2].xyzw
  add r4.xyzw, r4.xyzw, r6.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r5.xyzw, r5.xyzw, r7.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r3.xyzw, r3.xyzw, r8.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  imul null, r2.x, v4.w, l(3)
  mul r6.xyzw, r2.wwww, cb6[r2.x + 0].xyzw
  mul r7.xyzw, r2.wwww, cb6[r2.x + 1].xyzw
  mul r2.xyzw, r2.wwww, cb6[r2.x + 2].xyzw
  add r4.xyzw, r4.xyzw, r6.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r5.xyzw, r5.xyzw, r7.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r2.xyzw, r2.xyzw, r3.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  nop 

#line 416
  dp4 r0.x, v0.xyzw, r4.xyzw  // ApplyMatrixT<0:NaN:Inf>
  dp4 r0.y, v0.xyzw, r5.xyzw  // ApplyMatrixT<1:NaN:Inf>
  dp4 r0.z, v0.xyzw, r2.xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 27
  mov r0.xyz, r0.xyzx  // position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  nop 

#line 420
  mov r3.w, l(0)
  mov r3.xyz, v1.xyzx
  dp4 r1.x, r3.xyzw, r4.xyzw  // ApplyMatrixT<0:NaN:Inf>
  dp4 r1.y, r3.xyzw, r5.xyzw  // ApplyMatrixT<1:NaN:Inf>
  dp4 r1.z, r3.xyzw, r2.xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 28
  mov r1.xyz, r1.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  nop 

#line 56
  mov r0.xyz, r0.xyzx  // inPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r1.xyz, r1.xyzx  // inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
endif 

#line 65
nop 

#line 412
mov r1.w, l(0)
dp4 r2.x, r1.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r2.y, r1.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r2.z, r1.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 65
mov r2.xyz, r2.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 70
nop 

#line 412
mov r1.w, l(0)
dp4 r3.x, r1.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r1.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r1.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 70
dp3 r1.x, r3.xyzx, r3.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, r3.xyzx  // outNormalOnView<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r1.xyz, r1.xyzx  // outVertexNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 161
mov r2.xyz, r2.xyzx  // NTransformInput_transform_outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NTransformInput_transform_outVertexNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 164
nop 

#line 99
nop 

#line 145
nop 

#line 408
mov r0.w, v0.w
dp4 r3.x, r0.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r0.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r0.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r3.w, r0.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>
mov r4.x, r3.x  // ApplyMatrixT<0:NaN:Inf>
mov r4.y, r3.y  // ApplyMatrixT<1:NaN:Inf>
mov r4.z, r3.z  // ApplyMatrixT<2:NaN:Inf>

#line 145
mov r4.xyz, r4.xyzx  // onCameraRelative<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 408
dp4 r5.x, r3.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r5.y, r3.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r5.z, r3.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r5.w, r3.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 146
mov r5.xyzw, r5.xyzw  // hPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 

#line 408
dp4 r3.x, r0.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r0.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r0.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 147
mov r3.xyz, r3.xyzx  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // viewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.xyz, r3.xyzx  // TransformPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 99
mov r5.xyzw, r5.xyzw  // outProjectionPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r4.xyz, r4.xyzx  // outViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.xyz, r3.xyzx  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
nop 

#line 408
dp4 r0.x, l(0.000000, 0.000000, 0.000000, 1.000000), cb5[0].xyzw  // ApplyMatrixT<0>
dp4 r0.y, l(0.000000, 0.000000, 0.000000, 1.000000), cb5[1].xyzw  // ApplyMatrixT<1>
dp4 r0.z, l(0.000000, 0.000000, 0.000000, 1.000000), cb5[2].xyzw  // ApplyMatrixT<2>

#line 103
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x  // outRange<0:NaN:Inf>

#line 164
mov r3.xyz, r3.xyzx  // NGetProjection2_getProjection_outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.xyzw, r5.xyzw  // NGetProjection2_getProjection_outProjectionPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r4.xyz, r4.xyzx  // NGetProjection2_getProjection_outViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.x, r0.x  // NGetProjection2_getProjection_outRange<0:NaN:Inf>

#line 177
mov r0.y, r5.w  // NCalcFogFactor_calcFogFactor_inDepth<0:NaN:Inf>
nop 
mov r0.y, r0.y  // inDepth<0:NaN:Inf>

#line 144
mul r0.y, r0.y, cb2[24].x
add r0.y, r0.y, cb2[24].y  // outFactor<0:NaN:Inf>

#line 178
mov r0.y, r0.y  // NCalcFogFactor_calcFogFactor_outFactor<0:NaN:Inf>

#line 167
mov o5.xyzw, r5.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xyz, r2.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o2.xyz, r3.xyzx  // outWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o0.z, r0.x  // outRange<0:NaN:Inf>
mov o3.xyz, r4.xyzx  // outViewPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o4.xyz, r1.xyzx  // outVertexNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 178
mov o0.x, r0.y  // outFogFactor<0:NaN:Inf>
mov o0.y, r5.w  // outFogFactor<1:NaN:Inf>

#line 133
ret 
// Approximately 125 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(71,14-15): warning X3578: Output value 'o1' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(72,14-15): warning X3578: Output value 'o2' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(73,14-15): warning X3578: Output value 'o3' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
