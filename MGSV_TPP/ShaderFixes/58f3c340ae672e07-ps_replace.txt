// Full screen Blur
// ---- Created with 3Dmigoto v1.2.25 on Thu Jan 21 01:30:37 2016

cbuffer cPSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_psObject : packoffset(c0);

}

cbuffer cPSSystem : register(b0)
{

  struct
  {
    float4 m_param;
    float4 m_renderInfo;
    float4 m_renderBuffer;
    float4 m_dominantLightDir;
  } g_psSystem : packoffset(c0);

}

SamplerState g_samplerLinear_Clamp_s : register(s11);
Texture2D<float4> inImage : register(t0);
Texture2D<float4> inImageBlurred0 : register(t1);
Texture2D<float4> inImageBlurred1 : register(t2);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

// Disable blur to make hunting easier:
float4 params = IniParams.Load(int2(1,0));
if (params.y)
	discard;

  r0.xy = float2(-0.5,-0.5) + v0.xy;
  r0.xy = float2(0.49609375,0.49609375) + r0.xy;
  r0.xy = g_psSystem.m_renderBuffer.zw * r0.xy;
  r1.xyzw = inImage.Sample(g_samplerLinear_Clamp_s, r0.xy).xyzw;
  r2.xyzw = inImageBlurred0.Sample(g_samplerLinear_Clamp_s, r0.xy).wxyz;
  r0.xyz = inImageBlurred1.Sample(g_samplerLinear_Clamp_s, r0.xy).xyz;
  r0.w = g_psObject.m_localParam[0].y;
  r3.x = g_psObject.m_localParam[0].w;
  r0.w = -r0.w;
  r2.x = r2.x + r0.w;
  r0.w = r2.x / r0.w;
  r0.w = max(0, r0.w);
  r0.w = min(1, r0.w);
  r0.w = -r0.w;
  r0.w = 1 + r0.w;
  r3.xyz = r0.www * r3.xxx;
  r0.w = -0.5 + r1.w;
  r0.w = 2 * r0.w;
  r0.w = max(0, r0.w);
  r0.w = min(1, r0.w);
  r1.w = g_psObject.m_localParam[0].x;
  r2.x = g_psObject.m_localParam[0].z;
  r1.w = -r1.w;
  r0.w = r1.w + r0.w;
  r0.w = r0.w / r1.w;
  r0.w = max(0, r0.w);
  r0.w = min(1, r0.w);
  r0.w = -r0.w;
  r0.w = 1 + r0.w;
  r4.xyz = r0.www * r2.xxx;
  r5.xyz = -r1.xyz;
  r0.xyz = r5.xyz + r0.xyz;
  r0.xyz = r4.xyz * r0.xyz;
  r0.xyz = r1.xyz + r0.xyz;
  r1.xyz = -r0.xyz;
  r1.xyz = r2.yzw + r1.xyz;
  r1.xyz = r3.xyz * r1.xyz;
  r0.xyz = r1.xyz + r0.xyz;
  r0.w = 1;
  o0.xyzw = r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.25 on Thu Jan 21 01:30:37 2016
//
//
// Buffer Definitions: 
//
// cbuffer cPSObject
// {
//
//   struct PSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_psObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cPSSystem
// {
//
//   struct PSSystem
//   {
//       
//       float4 m_param;                // Offset:    0
//       float4 m_renderInfo;           // Offset:   16
//       float4 m_renderBuffer;         // Offset:   32
//       float4 m_dominantLightDir;     // Offset:   48
//
//   } g_psSystem;                      // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerLinear_Clamp             sampler      NA          NA   11        1
// inImage                           texture  float4          2d    0        1
// inImageBlurred0                   texture  float4          2d    1        1
// inImageBlurred1                   texture  float4          2d    2        1
// cPSSystem                         cbuffer      NA          NA    0        1
// cPSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb5[10], immediateIndexed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_sampler s11, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 6

#line 37 "d:\work\master\git_clone\_intermediate\win64\GrSystemShaders_dx11_win64\Release\DOF_0_ImageBlend_ps.hlsl"
add r0.xy, v0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)  // inVPos<0,1>

#line 52
nop 

#line 49
mov r0.xy, r0.xyxx  // NScreenToTextureCoordinate_screenToTexcoord_inPixelPosition<0,1>
nop 
mov r0.xy, r0.xyxx  // inPixelPosition<0,1>

#line 56
add r0.xy, r0.xyxx, l(0.496094, 0.496094, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, cb0[2].zwzz  // outTexcoord<0:Inf,1:Inf>

#line 50
mov r0.xy, r0.xyxx  // NScreenToTextureCoordinate_screenToTexcoord_outTexcoord<0:Inf,1:Inf>
mov r0.xy, r0.xyxx  // NDepthOfFieldBlend_depthOfFieldBlend_inTexcoord<0:Inf,1:Inf>
nop 
mov r0.xy, r0.xyxx  // inTexcoord<0:Inf,1:Inf>

#line 29
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t0.xyzw, s11  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t1.wxyz, s11  // c1<3:Inf,0:Inf,1:Inf,2:Inf>
sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t2.xyzw, s11
mov r0.xyz, r0.xyzx  // c2<0:Inf,1:Inf,2:Inf>

#line 38
mov r2.x, r2.x  // wFocustoNear<0:Inf>
mov r0.w, cb5[9].y  // nearOnePixelRate<0>
mov r3.x, cb5[9].w  // nearCurveScale<0>

#line 43
mov r0.w, -r0.w
add r2.x, r0.w, r2.x
div r0.w, r2.x, r0.w
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
mul r3.xyz, r3.xxxx, r0.wwww  // nearBlend<0,0,0>

#line 47
add r0.w, r1.w, l(-0.500000)
mul r0.w, r0.w, l(2.000000)
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)  // toFarPoint<0:[0f,1f]>
mov r1.w, cb5[9].x  // farOnePixelRate<0>
mov r2.x, cb5[9].z  // farCurveScale<0>

#line 52
mov r1.w, -r1.w
add r0.w, r0.w, r1.w
div r0.w, r0.w, r1.w
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
mul r4.xyz, r2.xxxx, r0.wwww  // farBlend<0,0,0>

#line 55
mov r5.xyz, -r1.xyzx
add r0.xyz, r0.xyzx, r5.xyzx
mul r0.xyz, r0.xyzx, r4.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
mov r1.xyz, -r0.xyzx
add r1.xyz, r1.xyzx, r2.yzwy
mul r1.xyz, r1.xyzx, r3.xyzx
add r0.xyz, r0.xyzx, r1.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // NDepthOfFieldBlend_depthOfFieldBlend_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, l(1.000000)  // NDepthOfFieldBlend_depthOfFieldBlend_outColor<3: 1f>

#line 58
mov o0.xyzw, r0.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 30
ret 
// Approximately 52 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
