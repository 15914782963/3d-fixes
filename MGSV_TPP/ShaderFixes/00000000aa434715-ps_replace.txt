// Main menu blur - disable
// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:48:10 2016

cbuffer cPSSystem : register(b0)
{

  struct
  {
    float4 m_param;
    float4 m_renderInfo;
    float4 m_renderBuffer;
    float4 m_dominantLightDir;
  } g_psSystem : packoffset(c0);

}

SamplerState g_samplerLinear_Clamp_s : register(s11);
Texture2D<float4> inTexture0 : register(t0);
Texture2D<float4> inTexture1 : register(t1);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 params = IniParams.Load(int2(1,0));
if (params.y)
  discard;

  r0.xy = v1.xy;
  r0.xy = g_psSystem.m_renderInfo.xy * r0.xy;
  r0.xy = g_psSystem.m_renderBuffer.zw * r0.xy;
  r1.xyzw = inTexture0.Sample(g_samplerLinear_Clamp_s, r0.xy).wxyz;
  r0.xyzw = inTexture1.Sample(g_samplerLinear_Clamp_s, r0.xy).xyzw;
  r1.x = max(0, r1.x);
  r1.x = min(1, r1.x);
  r1.x = -r1.x;
  r1.x = 1 + r1.x;
  r2.xyz = cmp(float3(0.0392800011,0.0392800011,0.0392800011) >= r0.xyz);
  r2.xyz = r2.xyz ? float3(1,1,1) : float3(0,0,0);
  r3.xyz = r0.xyz / float3(12.9200001,12.9200001,12.9200001);
  r3.xyz = r3.xyz * r2.xyz;
  r2.xyz = -r2.xyz;
  r2.xyz = float3(1,1,1) + r2.xyz;
  r4.xyz = float3(0.0549999997,0.0549999997,0.0549999997) + r0.xyz;
  r4.xyz = r4.xyz / float3(1.05499995,1.05499995,1.05499995);
  r4.xyz = max(float3(9.99999975e-006,9.99999975e-006,9.99999975e-006), r4.xyz);
  r4.xyz = log2(r4.xyz);
  r4.xyz = float3(2.4000001,2.4000001,2.4000001) * r4.xyz;
  r4.xyz = exp2(r4.xyz);
  r2.xyz = r4.xyz * r2.xyz;
  r2.xyz = r3.xyz + r2.xyz;
  r2.xyz = r2.xyz * r1.xxx;
  r1.xyz = r2.xyz + r1.yzw;
  r2.xyz = cmp(float3(0.00313080009,0.00313080009,0.00313080009) >= r1.xyz);
  r2.xyz = r2.xyz ? float3(1,1,1) : float3(0,0,0);
  r3.xyz = float3(12.9200001,12.9200001,12.9200001) * r1.xyz;
  r3.xyz = r3.xyz * r2.xyz;
  r2.xyz = -r2.xyz;
  r2.xyz = float3(1,1,1) + r2.xyz;
  r1.xyz = max(float3(9.99999975e-006,9.99999975e-006,9.99999975e-006), r1.xyz);
  r1.xyz = log2(r1.xyz);
  r1.xyz = float3(0.416666657,0.416666657,0.416666657) * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  r1.xyz = float3(1.05499995,1.05499995,1.05499995) * r1.xyz;
  r1.xyz = float3(-0.0549999997,-0.0549999997,-0.0549999997) + r1.xyz;
  r1.xyz = r2.xyz * r1.xyz;
  r0.xyz = r3.xyz + r1.xyz;
  o0.xyzw = r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.24 on Tue Jan 19 04:48:10 2016
//
//
// Buffer Definitions: 
//
// cbuffer cPSSystem
// {
//
//   struct PSSystem
//   {
//       
//       float4 m_param;                // Offset:    0
//       float4 m_renderInfo;           // Offset:   16
//       float4 m_renderBuffer;         // Offset:   32
//       float4 m_dominantLightDir;     // Offset:   48
//
//   } g_psSystem;                      // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerLinear_Clamp             sampler      NA          NA   11        1
// inTexture0                        texture  float4          2d    0        1
// inTexture1                        texture  float4          2d    1        1
// cPSSystem                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_sampler s11, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5

#line 230 "d:\work\master\git_clone\_intermediate\win64\GrSystemShaders_dx11_win64\Release\DOF_ScatterCompositeFinal_ps.hlsl"
mov r0.xy, v1.xyxx  // NScatterCompositeFinal_scatterCompositeFinal_inTexcoord<0,1>
nop 
mov r0.xy, r0.xyxx  // inTexcoord<0,1>

#line 145
mul r0.xy, r0.xyxx, cb0[1].xyxx
mul r0.xy, r0.xyxx, cb0[2].zwzz  // uv<0:NaN:Inf,1:NaN:Inf>

#line 149
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t0.wxyz, s11  // srcColor0<3:Inf,0:Inf,1:Inf,2:Inf>
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t1.xyzw, s11  // srcColor1<0:Inf,1:Inf,2:Inf,3:Inf>

#line 162
max r1.x, r1.x, l(0.000000)
min r1.x, r1.x, l(1.000000)  // srcColor0<3:[0f,1f]>
mov r1.x, -r1.x
add r1.x, r1.x, l(1.000000)  // baseFactor<0:[0f,1f]>
nop 
mov r0.xyz, r0.xyzx  // inSRGB<0:Inf,1:Inf,2:Inf>

#line 48
ge r2.xyz, l(0.039280, 0.039280, 0.039280, 0.000000), r0.xyzx
movc r2.xyz, r2.xyzx, l(1.000000,1.000000,1.000000,0), l(0,0,0,0)  // mask<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f]>
div r3.xyz, r0.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
mul r3.xyz, r2.xyzx, r3.xyzx
mov r2.xyz, -r2.xyzx
add r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r4.xyz, r0.xyzx, l(0.055000, 0.055000, 0.055000, 0.000000)
div r4.xyz, r4.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000)
max r4.xyz, r4.xyzx, l(0.000010, 0.000010, 0.000010, 0.000000)
log r4.xyz, r4.xyzx
mul r4.xyz, r4.xyzx, l(2.400000, 2.400000, 2.400000, 0.000000)
exp r4.xyz, r4.xyzx
mul r2.xyz, r2.xyzx, r4.xyzx
add r2.xyz, r2.xyzx, r3.xyzx  // GammaDecode<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 166
mul r2.xyz, r1.xxxx, r2.xyzx
add r1.xyz, r1.yzwy, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r1.xyz, r1.xyzx  // linearRGB<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 24
ge r2.xyz, l(0.003131, 0.003131, 0.003131, 0.000000), r1.xyzx
movc r2.xyz, r2.xyzx, l(1.000000,1.000000,1.000000,0), l(0,0,0,0)  // mask<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f]>
mul r3.xyz, r1.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
mul r3.xyz, r2.xyzx, r3.xyzx
mov r2.xyz, -r2.xyzx
add r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
max r1.xyz, r1.xyzx, l(0.000010, 0.000010, 0.000010, 0.000000)
log r1.xyz, r1.xyzx
mul r1.xyz, r1.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
exp r1.xyz, r1.xyzx
mul r1.xyz, r1.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000)
add r1.xyz, r1.xyzx, l(-0.055000, -0.055000, -0.055000, 0.000000)
mul r1.xyz, r1.xyzx, r2.xyzx
add r0.xyz, r1.xyzx, r3.xyzx  // GammaCorrection<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 167
mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, r0.w  // outColor<3:Inf>

#line 231
mov r0.xyz, r0.xyzx  // NScatterCompositeFinal_scatterCompositeFinal_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, r0.w  // NScatterCompositeFinal_scatterCompositeFinal_outColor<3:Inf>
mov o0.xyzw, r0.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:Inf>

#line 195
ret 
// Approximately 52 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
