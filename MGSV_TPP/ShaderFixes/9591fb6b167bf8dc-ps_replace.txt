// Mirror with inverted left + right eyes
// ---- Created with 3Dmigoto v1.2.25 on Thu Jan 21 04:14:57 2016

cbuffer cPSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_psScene : packoffset(c0);

}

cbuffer cPSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_psMaterial : packoffset(c0);

}

SamplerState inDiffuseSampler_s : register(s0);
SamplerState g_sampler_height_s : register(s1);
SamplerState inMaskSampler_s : register(s2);
SamplerState g_samplerPoint_Wrap_s : register(s8);
SamplerState g_samplerLinear_Clamp_s : register(s11);
Texture2D<float4> inDiffuseTexture : register(t0);
Texture2D<float4> g_tex_height : register(t1);
Texture2D<float4> inMaskTexture : register(t2);
Texture2D<float4> g_tex_fog : register(t12);
Texture2D<float4> inMesh : register(t15);

Texture2D<float4> stereo2mono : register(t100);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = float2(-0.5,-0.5) + v0.xy;
  r0.z = inMaskTexture.Sample(inMaskSampler_s, v1.zw).y;
  r0.w = v4.z;
  r1.w = r0.w * r0.z;
  r0.zw = v1.xy;
  r2.xyz = v3.xyz;
  r2.w = -1 * r2.y;
  r2.y = g_tex_height.Sample(g_sampler_height_s, v1.zw).y;
  r2.y = -r2.y;
  r2.y = 1 + r2.y;
  r2.y = 1 + r2.y;
  r3.x = dot(r2.xzw, r2.xzw);
  r3.x = rsqrt(r3.x);
  r2.xzw = r3.xxx * r2.xwz;
  r2.xy = r2.xz * r2.yy;
  r3.xy = -g_psMaterial.m_materials[0].xx;
  r3.xy = max(g_psMaterial.m_materials[0].xx, r3.xy);
  r2.xy = r3.xy * r2.xy;
  r2.xy = float2(0.25,0.25) * r2.xy;
  r2.xy = r2.xy / r2.ww;
  r0.zw = r2.xy + r0.zw;
  r2.x = g_psMaterial.m_materials[0].x;
  r2.x = cmp(r2.x < 0);
  if (r2.x != 0) {
    r2.yz = r0.yx / g_psScene.m_viewportSize.yx;
    r2.z = -r2.z;
    r2.x = 1 + r2.z;
  } else {
    r0.zw = max(float2(0,0), r0.zw);
    r2.xy = min(float2(1,1), r0.zw);
  }

  //r2.xyz = inDiffuseTexture.Sample(inDiffuseSampler_s, r2.xy).xyz;

// Reverse eyes for mirror
float4 stereo = StereoParams.Load(0);
float2 pos = r2.xy;
pos.x = pos.x / 2;
if (stereo.z == -1)
	pos.x += 0.5;
r2.xyz = stereo2mono.Sample(inDiffuseSampler_s, pos).xyz;
  r0.z = v4.y;
  r3.xyzw = r0.xyxy;
  r4.xyzw = g_psScene.m_viewportSize.xyxy;
  r4.xyzw = r3.xyzw / r4.xyzw;
  r4.xyzw = float4(2,-2,2,-2) * r4.xyzw;
  r4.xyzw = float4(-1,1,-1,1) + r4.xyzw;
  r0.x = g_psScene.m_fogParam[1].x;
  r0.y = log2(r0.z);
  r0.x = r0.x * r0.y;
  r0.x = max(0, r0.x);
  r0.x = min(1, r0.x);
  r0.x = 127 * r0.x;
  r4.xyzw = float4(0.0146484375,0.123046875,0.0146484375,0.123046875) * r4.xyzw;
  r4.xyzw = float4(0.015625,0.125,0.015625,0.125) + r4.xyzw;
  r0.y = 1 + r0.x;
  r0.y = max(0, r0.y);
  r0.w = min(127, r0.y);
  r0.y = r0.x;
  r0.yz = floor(r0.yw);
  r0.yz = r0.yz / float2(32,32);
  r3.zw = frac(r0.yz);
  r5.xz = float2(32,32) * r3.zw;
  r5.yw = floor(r0.yz);
  r5.xyzw = float4(0.03125,0.25,0.03125,0.25) * r5.xyzw;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r0.xyzw = frac(r0.xxxx);
  r5.xyzw = g_tex_fog.Sample(g_samplerLinear_Clamp_s, r4.xy).xyzw;
  r4.xyzw = g_tex_fog.Sample(g_samplerLinear_Clamp_s, r4.zw).xyzw;
  r6.xyzw = -r0.xyzw;
  r6.xyzw = float4(1,1,1,1) + r6.xyzw;
  r5.xyzw = r6.xyzw * r5.xyzw;
  r0.xyzw = r4.xyzw * r0.xyzw;
  r0.xyzw = r5.xyzw + r0.xyzw;
  r2.w = g_psScene.m_fogParam[1].y;
  r0.xyz = r2.www * r0.xyz;
  r3.xy = float2(0.125,0.125) * r3.xy;
  r3.xy = frac(r3.xy);
  r2.w = inMesh.Sample(g_samplerPoint_Wrap_s, r3.xy).w;
  r2.w = r2.w / 128;
  r0.xyzw = r2.wwww + r0.xyzw;
  r2.xyz = r2.xyz * r0.www;
  r0.xyz = r2.xyz + r0.xyz;
  r1.xyz = r1.www * r0.xyz;
  o0.xyzw = r1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.25 on Thu Jan 21 04:14:57 2016
//
//
// Buffer Definitions: 
//
// cbuffer cPSScene
// {
//
//   struct PSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_psScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cPSMaterial
// {
//
//   struct PSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_psMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// inDiffuseSampler                  sampler      NA          NA    0        1
// g_sampler_height                  sampler      NA          NA    1        1
// inMaskSampler                     sampler      NA          NA    2        1
// g_samplerPoint_Wrap               sampler      NA          NA    8        1
// g_samplerLinear_Clamp             sampler      NA          NA   11        1
// inDiffuseTexture                  texture  float4          2d    0        1
// g_tex_height                      texture  float4          2d    1        1
// inMaskTexture                     texture  float4          2d    2        1
// g_tex_fog                         texture  float4          2d   12        1
// inMesh                            texture  float4          2d   15        1
// cPSScene                          cbuffer      NA          NA    2        1
// cPSMaterial                       cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float    yz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[26], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s8, mode_default
dcl_sampler s11, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.yz
dcl_output o0.xyzw
dcl_temps 7

#line 347 "d:\work\master\git_clone\_intermediate\win64\GrModelShaders_dx11_win64\Release\fox3dfw_parallax_refrection_ps.hlsl"
add r0.xy, v0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)  // inVPos<0,1>

#line 412
nop 

#line 253
sample_indexable(texture2d)(float,float,float,float) r0.z, v1.zwzz, t2.xzyw, s2
mov r0.z, r0.z  // outColor<0:Inf>

#line 412
mov r0.z, r0.z  // NFetchMaskMap_fetchMask_outColor<0:Inf>

#line 428
mov r0.w, v4.z  // NMulVertexAlpha_mulVertexAlpha_inVertexAlpha<0>
mov r0.z, r0.z  // NMulVertexAlpha_mulVertexAlpha_inAlpha<0:Inf>
nop 
mov r0.w, r0.w  // inVertexAlpha<0>
mov r0.z, r0.z  // inAlpha<0:Inf>

#line 299
mul r1.w, r0.z, r0.w  // outAlpha<0:NaN:Inf>

#line 430
mov r1.w, r1.w  // NMulVertexAlpha_mulVertexAlpha_outAlpha<0:NaN:Inf>

#line 400
mov r0.zw, v1.xxxy  // NGetParallaxUV_getParallaxUV_inTexcoord<0,1>

#line 403
mov r2.xyz, v3.xyzx  // NGetParallaxUV_getParallaxUV_inViewTS<0,1,2>
nop 
mov r0.zw, r0.zzzw  // inTexcoord<0,1>
mov r2.xyz, r2.xyzx  // inViewTS<0,1,2>

#line 320
mul r2.w, r2.y, l(-1.000000)  // inViewTS<1>

#line 324
sample_indexable(texture2d)(float,float,float,float) r2.y, v1.zwzz, t1.xyzw, s1
mov r2.y, -r2.y
add r2.y, r2.y, l(1.000000)
add r2.y, r2.y, l(1.000000)  // fCurrHeight<0:Inf>
dp3 r3.x, r2.xzwx, r2.xzwx
rsq r3.x, r3.x
mul r2.xzw, r2.xxwz, r3.xxxx  // vViewTS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r2.xy, r2.yyyy, r2.xzxx
mov r3.xy, -cb4[0].xxxx
max r3.xy, r3.xyxx, cb4[0].xxxx
mul r2.xy, r2.xyxx, r3.xyxx
mul r2.xy, r2.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)  // vParallaxVec<0:NaN:Inf,1:NaN:Inf>
div r2.xy, r2.xyxx, r2.wwww  // vParallaxVec<0:NaN:Inf,1:NaN:Inf>
add r0.zw, r0.zzzw, r2.xxxy  // outUV<0:NaN:Inf,1:NaN:Inf>

#line 404
mov r0.zw, r0.zzzw  // NGetParallaxUV_getParallaxUV_outUV<0:NaN:Inf,1:NaN:Inf>
mov r0.zw, r0.zzzw  // NFetchAlbedoMap_fetchAlbedoMap_inTexcoord<0:NaN:Inf,1:NaN:Inf>
mov r0.xy, r0.xyxx  // NFetchAlbedoMap_fetchAlbedoMap_inVPos<0,1>
nop 
mov r0.zw, r0.zzzw  // inTexcoord<0:NaN:Inf,1:NaN:Inf>
mov r0.xy, r0.xyxx  // inVPos<0,1>

#line 228
mov r2.x, cb4[0].x  // heightScale<0>
lt r2.x, r2.x, l(0.000000)
if_nz r2.x
  div r2.yz, r0.yyxy, cb2[22].yyxy  // inTexcoord<1:NaN:Inf,0:NaN:Inf>
  mov r2.z, -r2.z
  add r2.x, r2.z, l(1.000000)  // inTexcoord<0:NaN:Inf>

#line 229
else 

#line 235
  max r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r2.xy, r0.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)  // inTexcoord<0:[0f,1f],1:[0f,1f]>

#line 229
endif 

#line 238
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t0.xyzw, s0
mov r2.xyz, r2.xyzx  // outColor<0:Inf,1:Inf,2:Inf>

#line 407
mov r2.xyz, r2.xyzx  // NFetchAlbedoMap_fetchAlbedoMap_outColor<0:Inf,1:Inf,2:Inf>

#line 417
mov r2.xyz, r2.xyzx  // NApplyVolFog_calcFogColor_inColor<0:Inf,1:Inf,2:Inf>
mov r0.z, v4.y  // NApplyVolFog_calcFogColor_inViewZ<0>
nop 
mov r2.xyz, r2.xyzx  // inColor<0:Inf,1:Inf,2:Inf>
mov r0.z, r0.z  // inViewZ<0>

#line 23
mov r3.xyzw, r0.xyxy
mov r4.xyzw, cb2[22].xyxy
div r4.xyzw, r3.xyzw, r4.xyzw  // clipTexcoord<0:NaN:Inf,1:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
mul r4.xyzw, r4.xyzw, l(2.000000, -2.000000, 2.000000, -2.000000)
add r4.xyzw, r4.xyzw, l(-1.000000, 1.000000, -1.000000, 1.000000)  // clipTexcoord<0:NaN:Inf,1:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
nop 
mov r4.xyzw, r4.xyzw  // inClipPos<0:NaN:Inf,1:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
mov r0.z, r0.z  // inViewZ<0>

#line 142
nop 
mov r4.xyzw, r4.xyzw  // inClipPos<0:NaN:Inf,1:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
mov r0.z, r0.z  // inViewZ<0>

#line 50
nop 
mov r0.z, r0.z  // inViewZ<0>

#line 27
mov r0.x, cb2[25].x  // invLogFarDistance<0>

#line 30
log r0.y, r0.z
mul r0.x, r0.y, r0.x  // EncodeFogCameraZ<0:NaN:Inf>

#line 50
mov r0.x, r0.x  // zEncoded<0:NaN:Inf>
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)  // zEncoded<0:[0f,1f]>
mul r0.x, r0.x, l(127.000000)  // zEncoded<0:[0f,127f]>

#line 56
mul r4.xyzw, r4.xyzw, l(0.014648, 0.123047, 0.014648, 0.123047)
add r4.xyzw, r4.xyzw, l(0.015625, 0.125000, 0.015625, 0.125000)  // uv<0:NaN:Inf,1:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
add r0.y, r0.x, l(1.000000)
max r0.y, r0.y, l(0.000000)
min r0.w, r0.y, l(127.000000)
mov r0.y, r0.x
round_ni r0.yz, r0.yywy  // zInt<0:[0f,127f],1:[1f,127f]>
div r0.yz, r0.yyzy, l(0.000000, 32.000000, 32.000000, 0.000000)
frc r3.zw, r0.yyyz
mul r5.xz, r3.zzwz, l(32.000000, 0.000000, 32.000000, 0.000000)  // layerOffset<0:[0f,32f],2:[0f,32f]>
round_ni r5.yw, r0.yyyz  // layerOffset<1:[0f,3f],3:[0f,3f]>
mul r5.xyzw, r5.xyzw, l(0.031250, 0.250000, 0.031250, 0.250000)
add r4.xyzw, r4.xyzw, r5.xyzw  // uv_lerp<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
frc r0.xyzw, r0.xxxx  // zBlend<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r4.xyxx, t12.xyzw, s11  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r4.zwzz, t12.xyzw, s11  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
mov r6.xyzw, -r0.xyzw
add r6.xyzw, r6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
mul r5.xyzw, r5.xyzw, r6.xyzw
mul r0.xyzw, r0.xyzw, r4.xyzw
add r0.xyzw, r0.xyzw, r5.xyzw  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 69
mov r2.w, cb2[25].y  // normalizeFactor<0>
mul r0.xyz, r0.xyzx, r2.wwww  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // GetVolumetricFog2D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, r0.w  // GetVolumetricFog2D<3:NaN:Inf>

#line 142
mov r0.xyzw, r0.xyzw  // GetVolumetricFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 25
mov r0.xyzw, r0.xyzw  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 30
mul r3.xy, r3.xyxx, l(0.125000, 0.125000, 0.000000, 0.000000)
frc r3.xy, r3.xyxx  // texcoord<0:[0f,1f],1:[0f,1f]>
sample_indexable(texture2d)(float,float,float,float) r2.w, r3.xyxx, t15.xyzw, s8
div r2.w, r2.w, l(128.000000)
add r0.xyzw, r0.xyzw, r2.wwww  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 40
mul r2.xyz, r0.wwww, r2.xyzx
add r0.xyz, r0.xyzx, r2.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 420
mov r0.xyz, r0.xyzx  // NApplyVolFog_calcFogColor_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 426
mov r0.xyz, r0.xyzx  // NGammaEncodeF3_gammaEncode_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r0.xyz, r0.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 295
mov r0.xyz, r0.xyzx  // outColorSRGB<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 427
mov r0.xyz, r0.xyzx  // NGammaEncodeF3_gammaEncode_outColorSRGB<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 441
mov r0.xyz, r0.xyzx  // NPremultipliedAlpha_premultipliedAlpha_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.w, r1.w  // NPremultipliedAlpha_premultipliedAlpha_inAlpha<0:NaN:Inf>
nop 
mov r0.xyz, r0.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.w, r1.w  // inAlpha<0:NaN:Inf>

#line 319
mul r1.xyz, r0.xyzx, r1.wwww  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.w, r1.w  // outColor<3:NaN:Inf>

#line 443
mov r1.xyzw, r1.xyzw  // NPremultipliedAlpha_premultipliedAlpha_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o0.xyzw, r1.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 337
ret 
// Approximately 126 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
