// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:41 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : TEXCOORD7,
  out float3 o9 : TEXCOORD8)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[3];
  r0.xyzw = v1.xyzw;
  r1.x = dot(v0.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r1.y = dot(v0.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r1.z = dot(v0.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r1.w = dot(v0.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r2.x = dot(r1.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r2.x = r2.x;
  r2.x = r2.x;
  r2.x = r2.x;
  r2.x = r2.x;
  r2.x = r2.x;
  r2.y = g_vsScene.m_shadowProjection2._m31;
  r2.y = r2.y;
  r2.z = g_vsScene.m_shadowProjection2._m32;
  r2.z = r2.z;
  r1.w = 1;
  r3.x = dot(r1.xyzw, g_vsScene.m_shadowProjection._m00_m10_m20_m30);
  r3.y = dot(r1.xyzw, g_vsScene.m_shadowProjection._m01_m11_m21_m31);
  r3.z = dot(r1.xyzw, g_vsScene.m_shadowProjection._m02_m12_m22_m32);
  r3.w = dot(r1.xyzw, g_vsScene.m_shadowProjection._m03_m13_m23_m33);
  r3.xyzw = r3.xyzw;
  r1.xyz = r3.xyz / r3.www;
  r2.y = -r2.y;
  r2.x = r2.x + r2.y;
  r2.x = r2.x * r2.z;
  r1.w = 1 + r2.x;
  r1.w = r1.w;
  r1.xyz = r1.xyz;
  r1.w = r1.w;
  r2.xy = v0.xy;
  r0.xyzw = r0.xyzw;
  r2.zw = v2.xy;
  r2.xy = r2.xy;
  r0.xyzw = r0.xyzw;
  r2.zw = r2.zw;
  r3.w = 1;
  r3.xyz = v0.xyz;
  r4.x = dot(r3.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r4.y = dot(r3.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r5.x = dot(r3.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r4.w = dot(r3.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r5.x = r5.x;
  r3.x = g_vsObject.m_localParam[3].w;
  r3.x = r3.x;
  r4.z = r5.x + r3.x;
  r3.x = dot(r4.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r3.y = dot(r4.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r3.z = dot(r4.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r3.w = dot(r4.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r3.xyzw = r3.xyzw;
  r0.xyzw = r0.xyzw;
  r2.zw = r2.zw;
  r2.x = 2 * r2.x;
  r4.x = -1 + r2.x;
  r2.x = -2 * r2.y;
  r4.y = 1 + r2.x;
  r4.z = r3.w;
  r3.xyzw = r3.xyzw;
  r0.xyzw = r0.xyzw;
  r2.zw = r2.zw;
  r4.x = r4.x;
  r4.y = r4.y;
  r4.z = r4.z;
  o0.xyzw = r3.xyzw;
  o5.xyzw = r0.xyzw;
  o1.xy = r2.zw;
  o2.xyz = r4.xyz;
  r0.xyz = -g_vsScene.m_view._m00_m10_m20;
  x0[0].xyz = r0.xyz;
  x0[1].xyz = g_vsScene.m_view._m01_m11_m21;
  r0.xyz = -g_vsScene.m_view._m02_m12_m22;
  x0[2].xyz = r0.xyz;
  o6.xyzw = r1.xyzw;
  o3.xyz = v4.xyz;
  o4.xyzw = v0.xyzw;
  r0.xyz = x0[0].xyz;
  r1.xyz = x0[1].xyz;
  r2.xyz = x0[2].xyz;
  o7.xyz = r0.xyz;
  o8.xyz = r1.xyz;
  o9.xyz = r2.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float       
// TEXCOORD                 2   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyz         7     NONE   float   xyz 
// TEXCOORD                 7   xyz         8     NONE   float   xyz 
// TEXCOORD                 8   xyz         9     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[19], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyz
dcl_output o8.xyz
dcl_output o9.xyz
dcl_temps 6
dcl_indexableTemp x0[3], 4

#line 44 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Primitive_TppFxSpecLight_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inColor<0,1,2,3>

#line 66
nop 

#line 25
nop 

#line 145
nop 

#line 408
dp4 r1.x, v0.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r1.y, v0.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r1.z, v0.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r1.w, v0.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 146
nop 

#line 408
dp4 r2.x, r1.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 146
mov r2.x, r2.x  // hPosition<3:NaN:Inf>
nop 

#line 25
mov r2.x, r2.x  // outProjectionPosition<3:NaN:Inf>
nop 

#line 66
mov r2.x, r2.x  // NGetProjection_getProjection_outProjectionPosition<3:NaN:Inf>
mov r2.x, r2.x  // NMakeShadowPos_makeShadowPos_inProjectionPos<3:NaN:Inf>
nop 
mov r2.x, r2.x  // inProjectionPos<3:NaN:Inf>

#line 50
nop 

#line 302
mov r2.y, cb2[17].w  // GetShadowNearRange<0>

#line 50
mov r2.y, r2.y  // near_range<0>
nop 

#line 313
mov r2.z, cb2[18].w  // GetShadowInvBlockUnitRange<0>

#line 51
mov r2.z, r2.z  // inv_block_unit_range<0>
nop 
nop 

#line 408
mov r1.w, l(1.000000)
dp4 r3.x, r1.xyzw, cb2[12].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r1.xyzw, cb2[13].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r1.xyzw, cb2[14].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r3.w, r1.xyzw, cb2[15].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 53
mov r3.xyzw, r3.xyzw  // outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
div r1.xyz, r3.xyzx, r3.wwww  // outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.y, -r2.y
add r2.x, r2.y, r2.x
mul r2.x, r2.z, r2.x
add r1.w, r2.x, l(1.000000)  // cascade_level<0:NaN:Inf>
mov r1.w, r1.w  // outShadowPos<3:NaN:Inf>

#line 69
mov r1.xyz, r1.xyzx  // NMakeShadowPos_makeShadowPos_outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.w, r1.w  // NMakeShadowPos_makeShadowPos_outShadowPos<3:NaN:Inf>

#line 866
nop 

#line 50
mov r2.xy, v0.xyxx  // NTransformInputNoBaseColor_transform_inPosition<0,1>
mov r0.xyzw, r0.xyzw  // NTransformInputNoBaseColor_transform_inColor<0,1,2,3>
mov r2.zw, v2.xxxy  // NTransformInputNoBaseColor_transform_inUV<0,1>

#line 55
nop 
mov r2.xy, r2.xyxx  // inPosition<0,1>
mov r0.xyzw, r0.xyzw  // inColor<0,1,2,3>
mov r2.zw, r2.zzzw  // inUV<0,1>

#line 90
nop 
nop 
mov r3.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r3.xyz, v0.xyzx
dp4 r4.x, r3.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r4.y, r3.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r5.x, r3.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r4.w, r3.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 91
mov r5.x, r5.x  // viewPosition<2:NaN:Inf>
nop 

#line 152
nop 

#line 48
mov r3.x, cb5[12].w  // GetBaseColor<3>

#line 152
mov r3.x, r3.x  // GetCameraZOffset<0>

#line 92
add r4.z, r3.x, r5.x  // viewPosition<2:NaN:Inf>
nop 

#line 408
dp4 r3.x, r4.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r4.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r4.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r3.w, r4.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 93
mov r3.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // outColor<0,1,2,3>
mov r2.zw, r2.zzzw  // outBaseUV<0,1>
mul r2.x, r2.x, l(2.000000)
add r4.x, r2.x, l(-1.000000)  // outBasePos<0:Inf>
mul r2.x, r2.y, l(-2.000000)
add r4.y, r2.x, l(1.000000)  // outBasePos<1:Inf>
mov r4.z, r3.w  // outBasePos<2:NaN:Inf>

#line 55
mov r3.xyzw, r3.xyzw  // NTransformInputNoBaseColor_transform_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // NTransformInputNoBaseColor_transform_outColor<0,1,2,3>
mov r2.zw, r2.zzzw  // NTransformInputNoBaseColor_transform_outBaseUV<0,1>
mov r4.x, r4.x  // NTransformInputNoBaseColor_transform_outBasePos<0:Inf>
mov r4.y, r4.y  // NTransformInputNoBaseColor_transform_outBasePos<1:Inf>
mov r4.z, r4.z  // NTransformInputNoBaseColor_transform_outBasePos<2:NaN:Inf>
mov o0.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o5.xyzw, r0.xyzw  // outColor<0,1,2,3>
mov o1.xy, r2.zwzz  // outBaseUV<0,1>
mov o2.xyz, r4.xyzx  // outBasePos<0:Inf,1:Inf,2:NaN:Inf>

#line 62
mov r0.xyz, -cb2[8].xyzx
mov x0[0].xyz, r0.xyzx  // outTangentToWorld<0,1,2>
mov x0[1].xyz, cb2[9].xyzx  // outTangentToWorld<3,4,5>
mov r0.xyz, -cb2[10].xyzx
mov x0[2].xyz, r0.xyzx  // outTangentToWorld<6,7,8>

#line 70
mov o6.xyzw, r1.xyzw  // outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 60
mov o3.xyz, v4.xyzx  // outNormalUVR<0,1,2>
mov o4.xyzw, v0.xyzw  // outWorldPos<0,1,2,3>

#line 27
mov r0.xyz, x0[0].xyzx  // outTangentToWorld<0,1,2>
mov r1.xyz, x0[1].xyzx  // outTangentToWorld<3,4,5>
mov r2.xyz, x0[2].xyzx  // outTangentToWorld<6,7,8>
mov o7.xyz, r0.xyzx  // outTangentToWorld<0,1,2>
mov o8.xyz, r1.xyzx  // outTangentToWorld<3,4,5>
mov o9.xyz, r2.xyzx  // outTangentToWorld<6,7,8>
ret 
// Approximately 100 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(53,14-15): warning X3578: Output value 'o1' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(54,14-15): warning X3578: Output value 'o2' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(55,14-15): warning X3578: Output value 'o3' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(59,14-15): warning X3578: Output value 'o7' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(60,14-15): warning X3578: Output value 'o8' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
