// ---- Created with 3Dmigoto v1.2.27 on Mon Jan 25 23:08:46 2016

cbuffer cPSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_psScene : packoffset(c0);

}

cbuffer cPSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_psObject : packoffset(c0);

}

cbuffer cPSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_psMaterial : packoffset(c0);

}

cbuffer cPSSystem : register(b0)
{

  struct
  {
    float4 m_param;
    float4 m_renderInfo;
    float4 m_renderBuffer;
    float4 m_dominantLightDir;
  } g_psSystem : packoffset(c0);

}

SamplerState inMoonSampler_s : register(s0);
SamplerState g_samplerPoint_Wrap_s : register(s8);
SamplerState g_samplerLinear_Clamp_s : register(s11);
Texture2D<float4> inMoonTexture : register(t0);
Texture2D<float4> inInscattering : register(t3);
Texture2D<float4> inMesh : register(t8);
Texture2D<float4> g_tex_fog : register(t12);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = float2(-0.5,-0.5) + v0.xy;
  r0.zw = float2(0.125,0.125) * r0.xy;
  r0.zw = frac(r0.zw);
  r0.xy = r0.xy / g_psSystem.m_renderInfo.xy;
  r0.xy = float2(2,-2) * r0.xy;
  r0.xy = float2(-1,1) + r0.xy;
  r1.xyz = v1.xyz;
  r1.w = g_psMaterial.m_materials[2].y;
  r2.x = g_psMaterial.m_materials[2].w;
  r2.y = g_psMaterial.m_materials[6].z;
  r2.z = dot(r1.xyz, r1.xyz);
  r2.z = rsqrt(r2.z);
  r1.xyz = r2.zzz * r1.xyz;
  r1.w = 1 / r1.w;
  r2.x = g_psScene.m_eyepos.y * r2.x;
  r2.y = -r2.y;
  r2.y = r2.x + r2.y;
  r2.xz = float2(0,0);
  r2.xyz = r2.xyz * r1.www;
  r1.xyz = r2.xyz + r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.yxz * r1.www;
  r1.x = max(0, r1.x);
  r2.xyzw = v3.xyzw;
  r1.w = r1.x;
  r3.xy = v2.zw;
  r4.xyzw = inMoonTexture.Sample(inMoonSampler_s, v2.zw).xyzw;
  r2.xyzw = r4.xyzw * r2.xyzw;
  r3.zw = cmp(float2(1,1) >= r3.xy);
  r3.zw = r3.zw ? float2(1,1) : float2(0,0);
  r3.xy = cmp(r3.xy >= float2(0,0));
  r3.xy = r3.xy ? float2(1,1) : float2(0,0);
  r4.xy = cmp(float2(0,0) != r3.zw);
  r4.zw = cmp(float2(0,0) != r3.xy);
  r3.xyzw = cmp((int4)r4.xyzw != int4(0,0,0,0));
  r3.xy = r3.zw ? r3.xy : 0;
  r3.x = r3.y ? r3.x : 0;
  r3.x = r3.x ? 1.000000 : 0;
  r3.y = cmp(r1.w < 9.99999975e-005);
  r3.y = r3.y ? 0 : 1;
  r3.x = r3.x * r3.y;
  r3.yzw = r2.xyz * r2.www;
  r3.yzw = max(float3(0,0,0), r3.yzw);
  r2.xyz = min(float3(1,1,1), r3.yzw);
  r2.xyzw = r2.xyzw * r3.xxxx;
  r3.xyzw = g_psMaterial.m_materials[3].xyzw;
  r4.x = g_psScene.m_exposure.z;
  r3.w = r4.x * r3.w;
  r3.w = min(1000, r3.w);
  r4.y = g_psMaterial.m_materials[7].x;
  r4.yzw = float3(0.00328400009,0.0041100001,0.00624000002) * r4.yyy;
  r4.xyz = r4.yzw * r4.xxx;
  r5.xyz = r1.yxz;
  r1.y = dot(r5.xyz, r3.xyz);
  r1.z = r1.y * r1.y;
  r1.z = 1 + r1.z;
  r1.z = 0.0596831031 * r1.z;
  r3.x = g_psMaterial.m_materials[2].x;
  r3.y = r3.x * r3.x;
  r3.y = -r3.y;
  r3.y = 1 + r3.y;
  r3.y = 0.0795774683 * r3.y;
  r3.x = r3.x * r1.y;
  r3.x = -r3.x;
  r3.x = 1 + r3.x;
  r3.x = r3.x * r3.x;
  r3.x = r3.y / r3.x;
  r1.x = 6360.00977 * r1.x;
  r3.y = r1.x * r1.x;
  r3.y = -40449728 + r3.y;
  r3.y = 40449600 + r3.y;
  r1.x = -1 * r1.x;
  r3.y = 766800 + r3.y;
  r3.y = sqrt(r3.y);
  r1.x = r3.y + r1.x;
  r1.x = r1.x / 886.949463;
  r1.x = 0.4921875 * r1.x;
  r5.y = 0.50390625 + r1.x;
  r1.x = g_psMaterial.m_materials[3].y;
  r1.x = max(-0.197500005, r1.x);
  r1.x = 5.34962368 * r1.x;
  r3.y = -r1.x;
  r3.y = max(r3.y, r1.x);
  r3.z = min(1, r3.y);
  r4.w = max(1, r3.y);
  r4.w = 1 / r4.w;
  r3.z = r4.w * r3.z;
  r4.w = r3.z * r3.z;
  r5.z = 0.0208350997 * r4.w;
  r5.z = -0.0851330012 + r5.z;
  r5.z = r5.z * r4.w;
  r5.z = 0.180141002 + r5.z;
  r5.z = r5.z * r4.w;
  r5.z = -0.330299497 + r5.z;
  r4.w = r5.z * r4.w;
  r4.w = 0.999866009 + r4.w;
  r3.z = r4.w * r3.z;
  r3.y = cmp(1 < r3.y);
  r4.w = -2 * r3.z;
  r4.w = 1.57079637 + r4.w;
  r3.y = r3.y ? r4.w : 0;
  r3.y = r3.y + r3.z;
  r3.y = 0 + r3.y;
  r1.x = min(1, r1.x);
  r3.z = -r1.x;
  r1.x = cmp(r1.x < r3.z);
  r1.x = r1.x ? -1 : 0;
  r3.z = -r3.y;
  r1.x = r1.x ? r3.z : r3.y;
  r1.x = r1.x / 1.10000002;
  r1.x = 0.74000001 + r1.x;
  r1.x = 0.5 * r1.x;
  r1.x = 0.96875 * r1.x;
  r1.x = 0.015625 + r1.x;
  r1.y = 1 + r1.y;
  r1.y = r1.y / 2;
  r1.y = 7 * r1.y;
  r3.y = floor(r1.y);
  r3.z = -r3.y;
  r1.y = r3.z + r1.y;
  r1.x = r3.y + r1.x;
  r5.x = r1.x / 8;
  r1.x = 1 + r1.x;
  r6.x = r1.x / 8;
  r6.y = r5.y;
  r5.xyzw = inInscattering.Sample(g_samplerLinear_Clamp_s, r5.xy).xyzw;
  r1.x = -r1.y;
  r1.x = 1 + r1.x;
  r5.xyzw = r5.xyzw * r1.xxxx;
  r6.xyzw = inInscattering.Sample(g_samplerLinear_Clamp_s, r6.xy).xyzw;
  r6.xyzw = r6.xyzw * r1.yyyy;
  r5.xyzw = r6.xyzw + r5.xyzw;
  r5.xyzw = max(float4(0,0,0,0), r5.xyzw);
  r6.xyz = g_psMaterial.m_materials[0].xyz;
  r7.xyz = r5.xyz * r5.www;
  r1.x = max(9.99999975e-005, r5.x);
  r7.xyz = r7.xyz / r1.xxx;
  r6.xyz = r6.xxx / r6.xyz;
  r6.xyz = r7.xyz * r6.xyz;
  r1.x = dot(r5.xyz, r5.xyz);
  r1.x = sqrt(r1.x);
  r1.x = 0.800000012 * r1.x;
  r3.xyz = r6.xyz * r3.xxx;
  r6.xyz = float3(0.200000003,0.200000003,0.200000003) * r3.xyz;
  r6.xyz = r6.xyz + r1.xxx;
  r6.xyz = float3(0.100000001,0.100000001,0.100000001) * r6.xyz;
  r1.xyz = r5.xyz * r1.zzz;
  r4.w = g_psObject.m_localParam[1].x;
  r4.w = -r4.w;
  r5.xyz = float3(1,1,1) + r4.www;
  r1.xyz = r5.xyz * r1.xyz;
  r5.xyz = g_psObject.m_localParam[1].xxx;
  r5.xyz = r6.xyz * r5.xyz;
  r1.xyz = r5.xyz + r1.xyz;
  r1.xyz = r1.xyz + r3.xyz;
  r1.xyz = max(float3(0,0,0), r1.xyz);
  r1.xyz = r1.xyz * r3.www;
  r1.xyz = r4.xyz + r1.xyz;
  r2.w = -r2.w;
  r2.w = 1 + r2.w;
  r1.xyz = r2.www * r1.xyz;
  r1.xyz = r2.xyz + r1.xyz;
  r2.x = g_psMaterial.m_materials[0].w;
  r2.y = g_psMaterial.m_materials[4].w;
  r2.z = g_psMaterial.m_materials[6].w;
  r1.xyz = r2.xyz * r1.xyz;
  r0.xy = float2(0.0146484375,0.123046875) * r0.xy;
  r0.xy = float2(0.015625,0.125) + r0.xy;
  r0.xy = float2(0.96875,0.75) + r0.xy;
  r2.xyzw = g_tex_fog.Sample(g_samplerLinear_Clamp_s, r0.xy).xyzw;
  r0.x = g_psScene.m_fogParam[1].y;
  r2.xyz = r2.xyz * r0.xxx;
  r0.x = g_psMaterial.m_materials[1].w;
  r0.y = g_psMaterial.m_materials[5].w;
  r3.x = g_psMaterial.m_materials[6].x;
  r3.y = g_psMaterial.m_materials[6].y;
  r1.w = -1 + r1.w;
  r1.w = r3.y * r1.w;
  r1.w = max(0, r1.w);
  r1.w = min(1, r1.w);
  r3.x = r3.x * r1.w;
  r1.w = r3.x + r1.w;
  r3.x = 1 + r3.x;
  r1.w = r1.w / r3.x;
  r0.y = r1.w * r0.y;
  r0.x = r0.x + r0.y;
  r2.xyz = r2.xyz * r0.xxx;
  r0.y = -r2.w;
  r0.y = 1 + r0.y;
  r0.x = r0.y * r0.x;
  r0.x = -r0.x;
  r0.x = 1 + r0.x;
  r1.xyz = r1.xyz * r0.xxx;
  r1.xyz = r1.xyz + r2.xyz;
  r0.x = inMesh.Sample(g_samplerPoint_Wrap_s, r0.zw).x;
  r0.x = -0.5 + r0.x;
  r0.x = r0.x / 128;
  r0.xyz = r1.xyz + r0.xxx;
  r1.xyz = g_psMaterial.m_materials[1].xyz;
  r2.xyz = r1.yyy;
  r2.xzw = cmp(r2.xyz >= r0.xyz);
  r2.xzw = r2.xzw ? float3(1,1,1) : float3(0,0,0);
  r3.xyz = r2.xzw * r0.xyz;
  r2.xzw = -r2.xzw;
  r2.xzw = float3(1,1,1) + r2.xzw;
  r0.xyz = r0.xyz + r1.zzz;
  r4.xyz = -r2.yyy;
  r0.xyz = r4.xyz + r0.xyz;
  r0.xyz = r1.xxx * r0.xyz;
  r0.xyz = float3(-1,-1,-1) / r0.xyz;
  r0.xyz = r0.xyz + r1.zzz;
  r0.xyz = r0.xyz + r2.yyy;
  r0.xyz = r2.xzw * r0.xyz;
  r0.xyz = r3.xyz + r0.xyz;
  r0.xyz = max(float3(0,0,0), r0.xyz);
  r0.xyz = min(float3(1,1,1), r0.xyz);
  r1.xyz = cmp(float3(0.00313080009,0.00313080009,0.00313080009) >= r0.xyz);
  r1.xyz = r1.xyz ? float3(1,1,1) : float3(0,0,0);
  r2.xyz = float3(12.9200001,12.9200001,12.9200001) * r0.xyz;
  r2.xyz = r2.xyz * r1.xyz;
  r1.xyz = -r1.xyz;
  r1.xyz = float3(1,1,1) + r1.xyz;
  r0.xyz = max(float3(9.99999975e-006,9.99999975e-006,9.99999975e-006), r0.xyz);
  r0.xyz = log2(r0.xyz);
  r0.xyz = float3(0.416666657,0.416666657,0.416666657) * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r0.xyz = float3(1.05499995,1.05499995,1.05499995) * r0.xyz;
  r0.xyz = float3(-0.0549999997,-0.0549999997,-0.0549999997) + r0.xyz;
  r0.xyz = r1.xyz * r0.xyz;
  r0.xyz = r2.xyz + r0.xyz;
  r0.w = 0;
  o0.xyzw = r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cPSScene
// {
//
//   struct PSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_psScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cPSObject
// {
//
//   struct PSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_psObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cPSMaterial
// {
//
//   struct PSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_psMaterial;                    // Offset:    0 Size:   128
//
// }
//
// cbuffer cPSSystem
// {
//
//   struct PSSystem
//   {
//       
//       float4 m_param;                // Offset:    0
//       float4 m_renderInfo;           // Offset:   16
//       float4 m_renderBuffer;         // Offset:   32
//       float4 m_dominantLightDir;     // Offset:   48
//
//   } g_psSystem;                      // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// inMoonSampler                     sampler      NA          NA    0        1
// g_samplerPoint_Wrap               sampler      NA          NA    8        1
// g_samplerLinear_Clamp             sampler      NA          NA   11        1
// inMoonTexture                     texture  float4          2d    0        1
// inInscattering                    texture  float4          2d    3        1
// inMesh                            texture  float4          2d    8        1
// g_tex_fog                         texture  float4          2d   12        1
// cPSSystem                         cbuffer      NA          NA    0        1
// cPSScene                          cbuffer      NA          NA    2        1
// cPSMaterial                       cbuffer      NA          NA    4        1
// cPSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyzw        2     NONE   float     zw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[26], immediateIndexed
dcl_constantbuffer cb5[11], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_constantbuffer cb0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s8, mode_default
dcl_sampler s11, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.zw
dcl_input_ps linear v3.xyzw
dcl_output o0.xyzw
dcl_temps 8

#line 445 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Sky_Draw_TppBaked_ps.hlsl"
add r0.xy, v0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)  // inVPos<0,1>

#line 471
mov r0.xy, r0.xyxx  // NCalculateTextureCordinate_calculateTexcoord_inVPos<0,1>
nop 
mov r0.xy, r0.xyxx  // inVPos<0,1>

#line 356
mul r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.125000, 0.125000)
frc r0.zw, r0.zzzw  // outDitherTexcoord<0:[0f,1f],1:[0f,1f]>

#line 472
mov r0.zw, r0.zzzw  // NCalculateTextureCordinate_calculateTexcoord_outDitherTexcoord<0:[0f,1f],1:[0f,1f]>

#line 502
nop 

#line 72
div r0.xy, r0.xyxx, cb0[1].xyxx  // outClipPosition<0:NaN:Inf,1:NaN:Inf>
mul r0.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000)
add r0.xy, r0.xyxx, l(-1.000000, 1.000000, 0.000000, 0.000000)  // outClipPosition<0:NaN:Inf,1:NaN:Inf>

#line 502
mov r0.xy, r0.xyxx  // NScreenToClipCoordinate_screenToClipcoord_outClipPosition<0:NaN:Inf,1:NaN:Inf>

#line 475
mov r1.xyz, v1.xyzx  // NViewRay_viewRay_inRay<0,1,2>
nop 
mov r1.xyz, r1.xyzx  // inRay<0,1,2>

#line 394
mov r1.w, cb4[2].y  // dist<0>
mov r2.x, cb4[2].w  // isNotFollowCam<0>
mov r2.y, cb4[6].z  // offsetPosY<0>
dp3 r2.z, r1.xyzx, r1.xyzx
rsq r2.z, r2.z
mul r1.xyz, r1.xyzx, r2.zzzz
div r1.w, l(1.000000), r1.w
mul r2.x, r2.x, cb2[20].y
mov r2.y, -r2.y
add r2.y, r2.y, r2.x
mov r2.xz, l(0,0,0,0)
mul r2.xyz, r1.wwww, r2.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.yxzy  // outViewRay<1:NaN:Inf,0:NaN:Inf,2:NaN:Inf>
max r1.x, r1.x, l(0.000000)  // outViewRay<1:Inf:[-0f,1.#INFf]>

#line 476
mov r1.yz, r1.yyzy  // NViewRay_viewRay_outViewRay<0:NaN:Inf,2:NaN:Inf>
mov r1.x, r1.x  // NViewRay_viewRay_outViewRay<1:Inf:[-0f,1.#INFf]>

#line 487
mov r2.xyzw, v3.xyzw  // NSunDirectColor_sunDirectColor_inColor<0,1,2,3>
mov r1.w, r1.x  // NSunDirectColor_sunDirectColor_inViewZenith<0:Inf:[-0f,1.#INFf]>
mov r3.xy, v2.zwzz  // NSunDirectColor_sunDirectColor_inTexcoord<0,1>
nop 
mov r2.xyzw, r2.xyzw  // inColor<0,1,2,3>
mov r1.w, r1.w  // inViewZenith<0:Inf:[-0f,1.#INFf]>
mov r3.xy, r3.xyxx  // inTexcoord<0,1>

#line 279
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.zwzz, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
mul r2.xyzw, r2.xyzw, r4.xyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
ge r3.zw, l(0.000000, 0.000000, 1.000000, 1.000000), r3.xxxy
movc r3.zw, r3.zzzw, l(0,0,1.000000,1.000000), l(0,0,0,0)  // t0<0:[-0f,1f],1:[-0f,1f]>
ge r3.xy, r3.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
movc r3.xy, r3.xyxx, l(1.000000,1.000000,0,0), l(0,0,0,0)  // t1<0:[-0f,1f],1:[-0f,1f]>
ne r4.xy, l(0.000000, 0.000000, 0.000000, 0.000000), r3.zwzz
ne r4.zw, l(0.000000, 0.000000, 0.000000, 0.000000), r3.xxxy
ine r3.xyzw, r4.xyzw, l(0, 0, 0, 0)
and r3.xy, r3.zwzz, r3.xyxx
and r3.x, r3.y, r3.x
and r3.x, r3.x, l(0x3f800000)  // isVisible<0:[0f,1f]>
lt r3.y, r1.w, l(0.000100)
movc r3.y, r3.y, l(0), l(1.000000)
mul r3.x, r3.y, r3.x  // isVisible<0:[-0f,1f]>
mul r3.yzw, r2.wwww, r2.xxyz
max r3.yzw, r3.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r2.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // outColor<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
mov r2.w, r2.w  // outColor<3:NaN:Inf>
mul r2.xyzw, r3.xxxx, r2.xyzw  // outColor<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f],3:NaN:Inf>

#line 490
mov r2.xyzw, r2.xyzw  // NSunDirectColor_sunDirectColor_outColor<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f],3:NaN:Inf>

#line 496
nop 

#line 372
mov r3.xyzw, cb4[3].xyzw  // sun<0,1,2,3>

#line 375
mov r4.x, cb2[23].z  // exposure<0>
mul r3.w, r3.w, r4.x
min r3.w, r3.w, l(1000.000000)  // outSun<3:Inf:[-1.#INFf,1000f]>
mov r3.xyz, r3.xyzx  // outSun<0,1,2>
mov r4.y, cb4[7].x  // backgroundIntensity<0>
mul r4.yzw, r4.yyyy, l(0.000000, 0.003284, 0.004110, 0.006240)
mul r4.xyz, r4.xxxx, r4.yzwy  // outBackground<0:Inf,1:Inf,2:Inf>

#line 496
mov r3.xyz, r3.xyzx  // NLightSource2_lightSource_outSun<0,1,2>
mov r4.xyz, r4.xyzx  // NLightSource2_lightSource_outBackground<0:Inf,1:Inf,2:Inf>

#line 501
nop 

#line 478
mov r5.xyz, r1.yxzy  // NInscatterColor2_sunInscatterColor_inViewRay<0:NaN:Inf,1:Inf:[-0f,1.#INFf],2:NaN:Inf>
mov r3.xyz, r3.xyzx  // NInscatterColor2_sunInscatterColor_inLightSource<0,1,2>
nop 
mov r5.xyz, r5.xyzx  // inViewRay<0:NaN:Inf,1:Inf:[-0f,1.#INFf],2:NaN:Inf>
mov r3.xyz, r3.xyzx  // inLightSource<0,1,2>

#line 260
dp3 r1.y, r5.xyzx, r3.xyzx  // nu<0:NaN:Inf>
nop 

#line 228
nop 

#line 243
mul r1.z, r1.y, r1.y
add r1.z, r1.z, l(1.000000)
mul r1.z, r1.z, l(0.059683)  // phaseFunctionR_Half<0:NaN:Inf>

#line 228
mov r1.z, r1.z  // phaseR<0:NaN:Inf>
nop 

#line 91
mov r3.x, cb4[2].x
mul r3.y, r3.x, r3.x
mov r3.y, -r3.y
add r3.y, r3.y, l(1.000000)
mul r3.y, r3.y, l(0.079577)
mul r3.x, r1.y, r3.x
mov r3.x, -r3.x
add r3.x, r3.x, l(1.000000)
mul r3.x, r3.x, r3.x
div r3.x, r3.y, r3.x  // phaseFunctionM_Approx<0:NaN:Inf>

#line 229
mov r3.x, r3.x  // phaseM<0:NaN:Inf>
nop 

#line 170
nop 
nop 
mul r1.x, r1.x, l(6360.009766)  // rmu<0:Inf:[-0f,1.#INFf]>
mul r3.y, r1.x, r1.x
add r3.y, r3.y, l(-40449728.000000)
add r3.y, r3.y, l(40449600.000000)  // delta<0:NaN:Inf>

#line 176
mul r1.x, r1.x, l(-1.000000)
add r3.y, r3.y, l(766800.000000)
sqrt r3.y, r3.y
add r1.x, r1.x, r3.y
div r1.x, r1.x, l(886.949463)
mul r1.x, r1.x, l(0.492188)
add r5.y, r1.x, l(0.503906)  // uMu<0:NaN:Inf>

#line 181
mov r1.x, cb4[3].y
max r1.x, r1.x, l(-0.197500)
mul r1.x, r1.x, l(5.349624)
mov r3.y, -r1.x
max r3.y, r1.x, r3.y
min r3.z, r3.y, l(1.000000)
max r4.w, r3.y, l(1.000000)
div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
mul r3.z, r3.z, r4.w
mul r4.w, r3.z, r3.z
mul r5.z, r4.w, l(0.020835)
add r5.z, r5.z, l(-0.085133)
mul r5.z, r4.w, r5.z
add r5.z, r5.z, l(0.180141)
mul r5.z, r4.w, r5.z
add r5.z, r5.z, l(-0.330299)
mul r4.w, r4.w, r5.z
add r4.w, r4.w, l(0.999866)
mul r3.z, r3.z, r4.w
lt r3.y, l(1.000000), r3.y
mul r4.w, r3.z, l(-2.000000)
add r4.w, r4.w, l(1.570796)
and r3.y, r3.y, r4.w
add r3.y, r3.z, r3.y
add r3.y, r3.y, l(0.000000)
min r1.x, r1.x, l(1.000000)
mov r3.z, -r1.x
lt r1.x, r1.x, r3.z
and r1.x, r1.x, l(-1)
mov r3.z, -r3.y
movc r1.x, r1.x, r3.z, r3.y
div r1.x, r1.x, l(1.100000)
add r1.x, r1.x, l(0.740000)
mul r1.x, r1.x, l(0.500000)
mul r1.x, r1.x, l(0.968750)
add r1.x, r1.x, l(0.015625)  // uMuS<0:[-0.757905f,1.50603f]>
add r1.y, r1.y, l(1.000000)
div r1.y, r1.y, l(2.000000)
mul r1.y, r1.y, l(7.000000)  // lerp1<0:NaN:Inf>
round_ni r3.y, r1.y  // uNu<0:NaN:Inf>
mov r3.z, -r3.y
add r1.y, r1.y, r3.z  // lerp1<0:NaN:Inf>
add r1.x, r1.x, r3.y
div r5.x, r1.x, l(8.000000)  // uv1<0:NaN:Inf>
mov r5.y, r5.y  // uv1<1:NaN:Inf>
add r1.x, r1.x, l(1.000000)
div r6.x, r1.x, l(8.000000)  // uv2<0:NaN:Inf>
mov r6.y, r5.y  // uv2<1:NaN:Inf>
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t3.xyzw, s11
mov r1.x, -r1.y
add r1.x, r1.x, l(1.000000)
mul r5.xyzw, r1.xxxx, r5.xyzw
sample_indexable(texture2d)(float,float,float,float) r6.xyzw, r6.xyxx, t3.xyzw, s11
mul r6.xyzw, r1.yyyy, r6.xyzw
add r5.xyzw, r5.xyzw, r6.xyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 208
mov r5.xyzw, r5.xyzw  // texture4D_Half_fixed_eyepos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 230
mov r5.xyzw, r5.xyzw  // inscatterColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
max r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // inscatterColor<0:Inf:[-0f,1.#INFf],1:Inf:[-0f,1.#INFf],2:Inf:[-0f,1.#INFf],3:Inf:[-0f,1.#INFf]>

#line 234
nop 
mov r5.xyzw, r5.xyzw  // rayMie<0:Inf:[-0f,1.#INFf],1:Inf:[-0f,1.#INFf],2:Inf:[-0f,1.#INFf],3:Inf:[-0f,1.#INFf]>
mov r6.xyz, cb4[0].xyzx  // betaR<0,1,2>

#line 484
mul r7.xyz, r5.wwww, r5.xyzx
max r1.x, r5.x, l(0.000100)
div r7.xyz, r7.xyzx, r1.xxxx
div r6.xyz, r6.xxxx, r6.xyzx
mul r6.xyz, r6.xyzx, r7.xyzx  // getMie<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 234
mov r6.xyz, r6.xyzx  // mie<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.xyz, r5.xyzx  // rayleigh<0:Inf:[-0f,1.#INFf],1:Inf:[-0f,1.#INFf],2:Inf:[-0f,1.#INFf]>
dp3 r1.x, r5.xyzx, r5.xyzx
sqrt r1.x, r1.x
mul r1.x, r1.x, l(0.800000)
mul r3.xyz, r3.xxxx, r6.xyzx
mul r6.xyz, r3.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000)
add r6.xyz, r1.xxxx, r6.xyzx
mul r6.xyz, r6.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)  // cloudy<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r1.xyz, r1.zzzz, r5.xyzx
mov r4.w, cb5[10].x
mov r4.w, -r4.w
add r5.xyz, r4.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r1.xyz, r1.xyzx, r5.xyzx
mov r5.xyz, cb5[10].xxxx
mul r5.xyz, r5.xyzx, r6.xyzx
add r1.xyz, r1.xyzx, r5.xyzx
add r1.xyz, r3.xyzx, r1.xyzx
max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // result<0:Inf:[-0f,1.#INFf],1:Inf:[-0f,1.#INFf],2:Inf:[-0f,1.#INFf]>
mul r1.xyz, r3.wwww, r1.xyzx  // inscatterApprox<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 261
mov r1.xyz, r1.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 482
mov r1.xyz, r1.xyzx  // NInscatterColor2_sunInscatterColor_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NAddColor4_addInscatter_inColorA<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // NAddColor4_addInscatter_inColorB<0:Inf,1:Inf,2:Inf>
nop 
mov r1.xyz, r1.xyzx  // inColorA<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // inColorB<0:Inf,1:Inf,2:Inf>

#line 248
add r1.xyz, r1.xyzx, r4.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 485
mov r1.xyz, r1.xyzx  // NAddColor4_addInscatter_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 494
mov r1.xyz, r1.xyzx  // NLightContribution_sunContribution_inInscatterColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyzw, r2.xyzw  // NLightContribution_sunContribution_inDirectColor<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f],3:NaN:Inf>
nop 
mov r1.xyz, r1.xyzx  // inInscatterColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyzw, r2.xyzw  // inDirectColor<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f],3:NaN:Inf>

#line 303
mov r2.w, -r2.w
add r2.w, r2.w, l(1.000000)
mul r1.xyz, r1.xyzx, r2.wwww
add r1.xyz, r1.xyzx, r2.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 496
mov r1.xyz, r1.xyzx  // NLightContribution_sunContribution_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NSkyColor2_skyColor_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r1.xyz, r1.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 348
mov r1.xyz, r1.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 351
mov r2.x, cb4[0].w  // mulSkyColor<0>
mov r2.y, cb4[4].w  // mulSkyColor<1>
mov r2.z, cb4[6].w  // mulSkyColor<2>
mul r1.xyz, r1.xyzx, r2.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 498
mov r1.xyz, r1.xyzx  // NSkyColor2_skyColor_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 503
mov r1.xyz, r1.xyzx  // NApplyFurthestFog2_applyFog_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xy, r0.xyxx  // NApplyFurthestFog2_applyFog_inClipCoord<0:NaN:Inf,1:NaN:Inf>
nop 
mov r1.xyz, r1.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xy, r0.xyxx  // inClipCoord<0:NaN:Inf,1:NaN:Inf>

#line 317
nop 
mov r0.xy, r0.xyxx  // inClipPos<0:NaN:Inf,1:NaN:Inf>

#line 156
nop 
mov r0.xy, r0.xyxx  // inClipPos<0:NaN:Inf,1:NaN:Inf>

#line 79
mul r0.xy, r0.xyxx, l(0.014648, 0.123047, 0.000000, 0.000000)
add r0.xy, r0.xyxx, l(0.015625, 0.125000, 0.000000, 0.000000)  // uv<0:NaN:Inf,1:NaN:Inf>

#line 84
add r0.xy, r0.xyxx, l(0.968750, 0.750000, 0.000000, 0.000000)  // uv_lerp<0:NaN:Inf,1:NaN:Inf>
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t12.xyzw, s11  // fogColor<0:Inf,1:Inf,2:Inf,3:Inf>

#line 90
mov r0.x, cb2[25].y  // normalizeFactor<0>
mul r2.xyz, r0.xxxx, r2.xyzx  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyz, r2.xyzx  // GetFurthestVolumetricFog2D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.w, r2.w  // GetFurthestVolumetricFog2D<3:Inf>

#line 156
mov r2.xyzw, r2.xyzw  // GetFurthestVolumetricFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:Inf>

#line 317
mov r2.xyzw, r2.xyzw  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:Inf>

#line 320
mov r0.x, cb4[1].w  // influenceOfFogFix<0>
mov r0.y, cb4[5].w  // influenceOfFogVar<0>
mov r3.x, cb4[6].x  // falloff<0>
mov r3.y, cb4[6].y  // invFalloffStart<0>
nop 
add r1.w, r1.w, l(-1.000000)  // elevationAngle<0:Inf:[-1f,1.#INFf]>
mov r0.x, r0.x  // influenceOfFogFix<0>
mov r0.y, r0.y  // influenceOfFogVar<0>
mov r3.x, r3.x  // falloff<0>
mov r3.y, r3.y  // invFalloffStart<0>

#line 26
mul r1.w, r1.w, r3.y
max r1.w, r1.w, l(0.000000)
min r1.w, r1.w, l(1.000000)  // t<0:[0f,1f]>
mul r3.x, r1.w, r3.x
add r1.w, r1.w, r3.x
add r3.x, r3.x, l(1.000000)
div r1.w, r1.w, r3.x
mul r0.y, r0.y, r1.w
add r0.x, r0.y, r0.x  // influenceOfFog<0:NaN:Inf>
mov r0.x, r0.x  // CalcInfluenceOfFog<0:NaN:Inf>

#line 324
mov r0.x, r0.x  // influenceOfFog<0:NaN:Inf>

#line 327
mul r2.xyz, r0.xxxx, r2.xyzx  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.y, -r2.w
add r0.y, r0.y, l(1.000000)
mul r0.x, r0.x, r0.y
mov r0.x, -r0.x
add r0.x, r0.x, l(1.000000)  // fogColor<3:NaN:Inf>
mul r1.xyz, r0.xxxx, r1.xyzx
add r1.xyz, r2.xyzx, r1.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 505
mov r1.xyz, r1.xyzx  // NApplyFurthestFog2_applyFog_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NDithering2_dithering_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.zw, r0.zzzw  // NDithering2_dithering_inTexcoord<0:[0f,1f],1:[0f,1f]>
nop 
mov r1.xyz, r1.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.zw, r0.zzzw  // inTexcoord<0:[0f,1f],1:[0f,1f]>

#line 328
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.zwzz, t8.xyzw, s8
add r0.x, r0.x, l(-0.500000)
div r0.x, r0.x, l(128.000000)
add r0.xyz, r0.xxxx, r1.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 509
mov r0.xyz, r0.xyzx  // NDithering2_dithering_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // NCalcurateOutputColor_calcOutputColor_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r0.xyz, r0.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 419
mov r0.xyz, r0.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 422
mov r1.xyz, cb4[1].xyzx  // tonemapParam<0,1,2>
nop 
mov r1.xyz, r1.xyzx  // params<0,1,2>
mov r0.xyz, r0.xyzx  // x<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 11
mov r2.xyz, r1.yyyy
ge r2.xzw, r2.xxyz, r0.xxyz
movc r2.xzw, r2.xxzw, l(1.000000,0,1.000000,1.000000), l(0,0,0,0)  // mask<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f]>
mul r3.xyz, r0.xyzx, r2.xzwx
mov r2.xzw, -r2.xxzw
add r2.xzw, r2.xxzw, l(1.000000, 0.000000, 1.000000, 1.000000)
add r0.xyz, r1.zzzz, r0.xyzx
mov r4.xyz, -r2.yyyy
add r0.xyz, r0.xyzx, r4.xyzx
mul r0.xyz, r0.xyzx, r1.xxxx
div r0.xyz, l(-1.000000, -1.000000, -1.000000, 0.000000), r0.xyzx
add r0.xyz, r1.zzzz, r0.xyzx
add r0.xyz, r2.yyyy, r0.xyzx
mul r0.xyz, r0.xyzx, r2.xzwx
add r0.xyz, r0.xyzx, r3.xyzx  // TppTonemap<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 423
mov r0.xyz, r0.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // outColor<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 427
nop 
mov r0.xyz, r0.xyzx  // linearRGB<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 24
ge r1.xyz, l(0.003131, 0.003131, 0.003131, 0.000000), r0.xyzx
movc r1.xyz, r1.xyzx, l(1.000000,1.000000,1.000000,0), l(0,0,0,0)  // mask<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f]>
mul r2.xyz, r0.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
mul r2.xyz, r1.xyzx, r2.xyzx
mov r1.xyz, -r1.xyzx
add r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
max r0.xyz, r0.xyzx, l(0.000010, 0.000010, 0.000010, 0.000000)
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
exp r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000)
add r0.xyz, r0.xyzx, l(-0.055000, -0.055000, -0.055000, 0.000000)
mul r0.xyz, r0.xyzx, r1.xyzx
add r0.xyz, r0.xyzx, r2.xyzx  // GammaCorrection<0:[-0.046292f,13.92f],1:[-0.046292f,13.92f],2:[-0.046292f,13.92f]>

#line 427
mov r0.xyz, r0.xyzx  // outColor<0:[-0.046292f,13.92f],1:[-0.046292f,13.92f],2:[-0.046292f,13.92f]>

#line 512
mov r0.xyz, r0.xyzx  // NCalcurateOutputColor_calcOutputColor_outColor<0:[-0.046292f,13.92f],1:[-0.046292f,13.92f],2:[-0.046292f,13.92f]>
mov r0.w, l(0)  // NCalcurateOutputColor_calcOutputColor_outColor<3: 0f>
mov o0.xyzw, r0.xyzw  // outColor<0:[-0.046292f,13.92f],1:[-0.046292f,13.92f],2:[-0.046292f,13.92f],3: 0f>

#line 436
ret 
// Approximately 332 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
