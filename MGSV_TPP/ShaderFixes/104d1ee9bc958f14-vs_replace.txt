// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:43:44 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSLight : register(b3)
{

  struct
  {
    float4 m_lightParams[11];
  } g_vsLight : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float3 v2 : TANGENT0,
  float2 v3 : TEXCOORD0,
  float4 v4 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR0,
  out float4 o2 : COLOR1,
  out float4 o3 : TEXCOORD0,
  out float4 o4 : TEXCOORD5,
  out float4 o5 : TEXCOORD6,
  out float3 o6 : TEXCOORD7)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[3];
  r0.xyzw = v4.xyzw;
  r1.xyz = v1.yzx;
  r2.xy = v3.xy;
  r3.xyz = v2.yzx;
  r0.xyzw = r0.xyzw;
  r1.xyz = r1.xyz;
  r2.xy = r2.xy;
  r3.xyz = r3.xyz;
  r0.xyzw = r0.xyzw;
  r4.xyzw = g_vsObject.m_localParam[1].xyzw;
  r4.xyzw = r4.xyzw;
  r5.xyzw = g_vsLight.m_lightParams[1].xyzw;
  r5.xyzw = r5.xyzw;
  r6.w = 1;
  r6.xyz = v0.xyz;
  r7.x = dot(r6.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r7.y = dot(r6.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r7.z = dot(r6.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r7.w = dot(r6.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r6.x = dot(r7.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r6.y = dot(r7.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r6.z = dot(r7.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r6.w = dot(r7.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r6.xyzw = r6.xyzw;
  r6.z = 1.00000024 * r6.z;
  r0.xyzw = r4.xyzw * r0.xyzw;
  r5.xyzw = r5.xyzw;
  r2.xy = r2.xy;
  r4.xyz = r3.yzx * r1.xyz;
  r3.xyz = r3.xyz * r1.yzx;
  r3.xyz = -r3.xyz;
  r3.xyz = r4.xyz + r3.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r4.xyz = r3.zxy;
  r7.xyz = r4.zxy * r1.yzx;
  r1.xyz = r4.xyz * r1.xyz;
  r1.xyz = -r1.xyz;
  r1.xyz = r7.xyz + r1.xyz;
  r6.xyw = r6.xyw;
  r6.z = r6.z;
  r0.xyzw = r0.xyzw;
  r5.xyzw = r5.xyzw;
  r2.xy = r2.xy;
  r1.w = 0;
  r4.x = dot(r1.xyzw, g_vsScene.m_view._m00_m10_m20_m30);
  r4.y = dot(r1.xyzw, g_vsScene.m_view._m01_m11_m21_m31);
  r4.z = dot(r1.xyzw, g_vsScene.m_view._m02_m12_m22_m32);
  r3.w = 0;
  r1.x = dot(r3.xyzw, g_vsScene.m_view._m00_m10_m20_m30);
  r1.y = dot(r3.xyzw, g_vsScene.m_view._m01_m11_m21_m31);
  r1.z = dot(r3.xyzw, g_vsScene.m_view._m02_m12_m22_m32);
  r3.w = 0;
  r3.xyz = v1.xyz;
  r7.x = dot(r3.xyzw, g_vsScene.m_view._m00_m10_m20_m30);
  r7.y = dot(r3.xyzw, g_vsScene.m_view._m01_m11_m21_m31);
  r7.z = dot(r3.xyzw, g_vsScene.m_view._m02_m12_m22_m32);
  o0.xyzw = r6.xyzw;
  o1.xyzw = r0.xyzw;
  o2.xyzw = r5.xyzw;
  o3.xy = r2.xy;
  x0[0].xyz = r4.xyz;
  x0[1].xyz = r1.xyz;
  x0[2].xyz = r7.xyz;
  r0.xyz = x0[0].xyz;
  r1.xyz = x0[1].xyz;
  r2.xyz = x0[2].xyz;
  o4.xyz = r0.xyz;
  o5.xyz = r1.xyz;
  o6.xyz = r2.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSLight
// {
//
//   struct VSLight
//   {
//       
//       float4 m_lightParams[11];      // Offset:    0
//
//   } g_vsLight;                       // Offset:    0 Size:   176
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSLight                          cbuffer      NA          NA    3        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// TEXCOORD                 5   xyz         4     NONE   float   xyz 
// TEXCOORD                 6   xyz         5     NONE   float   xyz 
// TEXCOORD                 7   xyz         6     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[11], immediateIndexed
dcl_constantbuffer cb5[11], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xyz
dcl_input v3.xy
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xy
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyz
dcl_temps 8
dcl_indexableTemp x0[3], 4

#line 114 "d:\work\master\git_clone\_intermediate\win64\GrModelShaders_dx11_win64\Release\Decal2_User_ln_vs.hlsl"
mov r0.xyzw, v4.xyzw  // inColor<0,1,2,3>

#line 119
mov r1.xyz, v1.yzxy  // NTransformInput_transform_inNormal<1,2,0>
mov r2.xy, v3.xyxx  // NTransformInput_transform_inBaseUV<0,1>
mov r3.xyz, v2.yzxy  // NTransformInput_transform_inTangent<1,2,0>
mov r0.xyzw, r0.xyzw  // NTransformInput_transform_inColor<0,1,2,3>
nop 
mov r1.xyz, r1.xyzx  // inNormal<1,2,0>
mov r2.xy, r2.xyxx  // inBaseUV<0,1>
mov r3.xyz, r3.xyzx  // inTangent<1,2,0>
mov r0.xyzw, r0.xyzw  // inColor<0,1,2,3>

#line 47
nop 

#line 10
mov r4.xyzw, cb5[10].xyzw  // GetBaseColor<0,1,2,3>

#line 47
mov r4.xyzw, r4.xyzw  // baseColor<0,1,2,3>
nop 

#line 21
mov r5.xyzw, cb3[1].xyzw  // GetTextureMask<0,1,2,3>

#line 48
mov r5.xyzw, r5.xyzw  // textureMask<0,1,2,3>

#line 51
nop 
mov r6.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r6.xyz, v0.xyzx
dp4 r7.x, r6.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r7.y, r6.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r7.z, r6.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r7.w, r6.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 52
nop 

#line 408
dp4 r6.x, r7.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r6.y, r7.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r6.z, r7.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r6.w, r7.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 52
mov r6.xyzw, r6.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mul r6.z, r6.z, l(1.000000)  // outPosition<2:NaN:Inf>
mul r0.xyzw, r0.xyzw, r4.xyzw  // outColor<0:Inf,1:Inf,2:Inf,3:Inf>
mov r5.xyzw, r5.xyzw  // outMask<0,1,2,3>
mov r2.xy, r2.xyxx  // outBaseUV<0,1>

#line 62
mul r4.xyz, r1.xyzx, r3.yzxy
mul r3.xyz, r1.yzxy, r3.xyzx
mov r3.xyz, -r3.xyzx
add r3.xyz, r3.xyzx, r4.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx  // outBinormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r3.zxyz  // outBinormal<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
mul r7.xyz, r1.yzxy, r4.zxyz
mul r1.xyz, r1.xyzx, r4.xyzx
mov r1.xyz, -r1.xyzx
add r1.xyz, r1.xyzx, r7.xyzx  // outTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 123
mov r6.xyw, r6.xyxw  // NTransformInput_transform_outPosition<0:NaN:Inf,1:NaN:Inf,3:NaN:Inf>
mov r6.z, r6.z  // NTransformInput_transform_outPosition<2:NaN:Inf>
mov r0.xyzw, r0.xyzw  // NTransformInput_transform_outColor<0:Inf,1:Inf,2:Inf,3:Inf>
mov r5.xyzw, r5.xyzw  // NTransformInput_transform_outMask<0,1,2,3>
mov r2.xy, r2.xyxx  // NTransformInput_transform_outBaseUV<0,1>

#line 126
nop 

#line 84
nop 

#line 412
mov r1.w, l(0)
dp4 r4.x, r1.xyzw, cb2[8].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r4.y, r1.xyzw, cb2[9].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r4.z, r1.xyzw, cb2[10].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 85
nop 

#line 412
mov r3.w, l(0)
dp4 r1.x, r3.xyzw, cb2[8].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r1.y, r3.xyzw, cb2[9].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r1.z, r3.xyzw, cb2[10].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 86
nop 

#line 412
mov r3.w, l(0)
mov r3.xyz, v1.xyzx
dp4 r7.x, r3.xyzw, cb2[8].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r7.y, r3.xyzw, cb2[9].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r7.z, r3.xyzw, cb2[10].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 128
mov o0.xyzw, r6.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xyzw, r0.xyzw  // outColor<0:Inf,1:Inf,2:Inf,3:Inf>
mov o2.xyzw, r5.xyzw  // outMask<0,1,2,3>
mov o3.xy, r2.xyxx  // outBaseUV<0,1>
mov x0[0].xyz, r4.xyzx  // outTangentToView<0,1,2>
mov x0[1].xyz, r1.xyzx  // outTangentToView<3,4,5>
mov x0[2].xyz, r7.xyzx  // outTangentToView<6,7,8>

#line 100
mov r0.xyz, x0[0].xyzx  // outTangentToView<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, x0[1].xyzx  // outTangentToView<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
mov r2.xyz, x0[2].xyzx  // outTangentToView<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
mov o4.xyz, r0.xyzx  // outTangentToView<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o5.xyz, r1.xyzx  // outTangentToView<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
mov o6.xyz, r2.xyzx  // outTangentToView<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
ret 
// Approximately 81 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(65,14-15): warning X3578: Output value 'o3' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(66,14-15): warning X3578: Output value 'o4' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(67,14-15): warning X3578: Output value 'o5' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
