// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i e10956f7446336e0-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:21 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float3 v4 : TEXCOORD2,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float3 o7 : TEXCOORD6,
  out float4 o8 : COLOR0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[3];
  r0.xyzw = v1.xyzw;
  r1.xy = v0.xy;
  r1.zw = v2.xy;
  r2.xyzw = v3.xyzw;
  r3.xyz = v4.xyz;
  r4.w = 1;
  r4.xyz = v0.xyz;
  r5.x = dot(r4.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r5.y = dot(r4.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r5.z = dot(r4.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r5.w = dot(r4.xyzw, g_vsObject.m_world._m03_m13_m23_m33);
  r4.xyz = float3(0,0,0) + r5.xyz;
  r5.xyz = r4.xyz;
  r4.w = 1;
  r6.x = dot(r4.xyzw, g_vsScene.m_view._m00_m10_m20_m30);
  r6.y = dot(r4.xyzw, g_vsScene.m_view._m01_m11_m21_m31);
  r6.z = dot(r4.xyzw, g_vsScene.m_view._m02_m12_m22_m32);
  r6.w = dot(r4.xyzw, g_vsScene.m_view._m03_m13_m23_m33);
  r4.x = dot(r6.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r4.y = dot(r6.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r4.z = dot(r6.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r4.w = dot(r6.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r3.w = g_vsObject.m_localParam[3].w;
  r0.w = r3.w * r0.w;
  r1.z = 1 * r1.z;
  r6.x = 0 + r1.z;
  r1.z = 1 * r1.w;
  r6.y = 0 + r1.z;
  r1.x = 2 * r1.x;
  r7.x = -1 + r1.x;
  r1.x = -2 * r1.y;
  r7.y = 1 + r1.x;

o0.xyzw = r4.xyzw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i e10956f7446336e0-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r4.w != 1.0)
  r4.x += stereo.x * (r4.w - stereo.y);

  r7.z = r4.w;
  r7.w = r2.w;
  r1.x = dot(r3.xyz, r3.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = r3.xyz * r1.xxx;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r3.xyz = r2.zxy * r1.yzx;
  r8.xyz = r2.yzx * r1.zxy;
  r8.xyz = -r8.xyz;
  r3.xyz = r8.xyz + r3.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r8.x = dot(v0.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r8.y = dot(v0.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r8.z = dot(v0.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r8.w = dot(v0.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r1.w = dot(r8.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r2.w = g_vsScene.m_shadowProjection2._m31;
  r3.w = g_vsScene.m_shadowProjection2._m32;
  r8.w = 1;
  r9.x = dot(r8.xyzw, g_vsScene.m_shadowProjection._m00_m10_m20_m30);
  r9.y = dot(r8.xyzw, g_vsScene.m_shadowProjection._m01_m11_m21_m31);
  r9.z = dot(r8.xyzw, g_vsScene.m_shadowProjection._m02_m12_m22_m32);
  r9.w = dot(r8.xyzw, g_vsScene.m_shadowProjection._m03_m13_m23_m33);
  r8.xyz = r9.xyz / r9.www;
  r2.w = -r2.w;
  r1.w = r2.w + r1.w;
  r1.w = r1.w * r3.w;
  r8.w = 1 + r1.w;
  o4.xyzw = r8.xyzw;

  // o0.xyzw = r4.xyzw; // Relocated from here with hlsltool.py

  o8.xyzw = r0.xyzw;
  o1.xy = r6.xy;
  o2.xyzw = r7.xyzw;
  o3.xyzw = r5.xyzw;
  x0[0].xyz = r1.xyz;
  x0[1].xyz = r2.xyz;
  x0[2].xyz = r3.xyz;
  r0.xyz = x0[0].xyz;
  r1.xyz = x0[1].xyz;
  r2.xyz = x0[2].xyz;
  o5.xyz = r0.xyz;
  o6.xyz = r1.xyz;
  o7.xyz = r2.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xyz         7     NONE   float   xyz 
// COLOR                    0   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[19], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_output o8.xyzw
dcl_temps 10
dcl_indexableTemp x0[3], 4

#line 154 "d:\work\master\git_clone\_intermediate\win64\FxShaders_dx11_win64\Release\Prim_Decal_BloodAnm_VF_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inColor<0,1,2,3>

#line 161
mov r1.xy, v0.xyxx  // NTransformInputDecal_transform_inPosition<0,1>
mov r0.xyzw, r0.xyzw  // NTransformInputDecal_transform_inColor<0,1,2,3>
mov r1.zw, v2.xxxy  // NTransformInputDecal_transform_inUV<0,1>
mov r2.xyzw, v3.xyzw  // NTransformInputDecal_transform_inWorldNormal<0,1,2,3>
mov r3.xyz, v4.xyzx  // NTransformInputDecal_transform_inWorldTangent<0,1,2>
nop 
mov r1.xy, r1.xyxx  // inPosition<0,1>
mov r0.xyzw, r0.xyzw  // inColor<0,1,2,3>
mov r1.zw, r1.zzzw  // inUV<0,1>
mov r2.xyzw, r2.xyzw  // inWorldNormal<0,1,2,3>
mov r3.xyz, r3.xyzx  // inWorldTangent<0,1,2>

#line 60
nop 
mov r4.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r4.xyz, v0.xyzx
dp4 r5.x, r4.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r5.y, r4.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r5.z, r4.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r5.w, r4.xyzw, cb5[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 60
mov r5.xyzw, r5.xyzw  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
add r4.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.xyz, r4.xyzx  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r4.w, l(1.000000)  // vec<3: 1f>

#line 408
dp4 r6.x, r4.xyzw, cb2[8].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r6.y, r4.xyzw, cb2[9].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r6.z, r4.xyzw, cb2[10].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r6.w, r4.xyzw, cb2[11].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 64
nop 

#line 408
dp4 r4.x, r6.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r4.y, r6.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r4.z, r6.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r4.w, r6.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 64
mov r4.xyzw, r4.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 67
nop 

#line 48
mov r3.w, cb5[12].w  // GetBaseColor<3>

#line 67
mul r0.w, r0.w, r3.w  // inColor<3:Inf>
mov r0.xyz, r0.xyzx  // outColor<0,1,2>
mov r0.w, r0.w  // outColor<3:Inf>

#line 90
mov r1.zw, r1.zzzw  // newUV<0,1>

#line 96
nop 

#line 110
mul r1.z, r1.z, l(1.000000)
add r6.x, r1.z, l(0.000000)  // newUV<0>
mul r1.z, r1.w, l(1.000000)
add r6.y, r1.z, l(0.000000)  // newUV<1>
mov r6.x, r6.x  // outBaseUV<0>
mov r6.y, r6.y  // outBaseUV<1>
mul r1.x, r1.x, l(2.000000)
add r7.x, r1.x, l(-1.000000)  // outBasePos_NDotPos<0:Inf>
mul r1.x, r1.y, l(-2.000000)
add r7.y, r1.x, l(1.000000)  // outBasePos_NDotPos<1:Inf>
mov r7.z, r4.w  // outBasePos_NDotPos<2:NaN:Inf>
mov r7.w, r2.w  // outBasePos_NDotPos<3>
dp3 r1.x, r3.xyzx, r3.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, r3.xyzx  // worldTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 121
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx  // worldNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r3.xyz, r1.yzxy, r2.zxyz
mul r8.xyz, r1.zxyz, r2.yzxy
mov r8.xyz, -r8.xyzx
add r3.xyz, r3.xyzx, r8.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx  // worldBinormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 166
mov r4.xyzw, r4.xyzw  // NTransformInputDecal_transform_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // NTransformInputDecal_transform_outColor<0,1,2,3:Inf>
mov r6.xy, r6.xyxx  // NTransformInputDecal_transform_outBaseUV<0,1>
mov r7.x, r7.x  // NTransformInputDecal_transform_outBasePos_NDotPos<0:Inf>
mov r7.y, r7.y  // NTransformInputDecal_transform_outBasePos_NDotPos<1:Inf>
mov r7.z, r7.z  // NTransformInputDecal_transform_outBasePos_NDotPos<2:NaN:Inf>
mov r7.w, r7.w  // NTransformInputDecal_transform_outBasePos_NDotPos<3>
mov r5.xyz, r5.xyzx  // NTransformInputDecal_transform_outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.w, r5.w  // NTransformInputDecal_transform_outWorldPosition<3:NaN:Inf>
nop 

#line 25
nop 

#line 145
nop 

#line 408
dp4 r8.x, v0.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r8.y, v0.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r8.z, v0.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r8.w, v0.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 146
nop 

#line 408
dp4 r1.w, r8.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 146
mov r1.w, r1.w  // hPosition<3:NaN:Inf>
nop 

#line 25
mov r1.w, r1.w  // outProjectionPosition<3:NaN:Inf>
nop 

#line 168
mov r1.w, r1.w  // NGetProjection_getProjection_outProjectionPosition<3:NaN:Inf>
mov r1.w, r1.w  // NMakeShadowPos_makeShadowPos_inProjectionPos<3:NaN:Inf>
nop 
mov r1.w, r1.w  // inProjectionPos<3:NaN:Inf>

#line 50
nop 

#line 302
mov r2.w, cb2[17].w  // GetShadowNearRange<0>

#line 50
mov r2.w, r2.w  // near_range<0>
nop 

#line 313
mov r3.w, cb2[18].w  // GetShadowInvBlockUnitRange<0>

#line 51
mov r3.w, r3.w  // inv_block_unit_range<0>
nop 
nop 

#line 408
mov r8.w, l(1.000000)
dp4 r9.x, r8.xyzw, cb2[12].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r9.y, r8.xyzw, cb2[13].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r9.z, r8.xyzw, cb2[14].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r9.w, r8.xyzw, cb2[15].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 53
mov r9.xyzw, r9.xyzw  // outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
div r8.xyz, r9.xyzx, r9.wwww  // outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.w, -r2.w
add r1.w, r1.w, r2.w
mul r1.w, r3.w, r1.w
add r8.w, r1.w, l(1.000000)  // cascade_level<0:NaN:Inf>
mov r8.w, r8.w  // outShadowPos<3:NaN:Inf>

#line 171
mov r8.xyz, r8.xyzx  // NMakeShadowPos_makeShadowPos_outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r8.w, r8.w  // NMakeShadowPos_makeShadowPos_outShadowPos<3:NaN:Inf>
mov o4.xyzw, r8.xyzw  // outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 175
mov o0.xyzw, r4.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o8.xyzw, r0.xyzw  // outColor<0,1,2,3:Inf>
mov o1.xy, r6.xyxx  // outBaseUV<0,1>
mov o2.xyzw, r7.xyzw  // outBasePos_NDotPos<0:Inf,1:Inf,2:NaN:Inf,3>
mov o3.xyzw, r5.xyzw  // outWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov x0[0].xyz, r1.xyzx  // outTangentToWorld<0,1,2>
mov x0[1].xyz, r2.xyzx  // outTangentToWorld<3,4,5>
mov x0[2].xyz, r3.xyzx  // outTangentToWorld<6,7,8>

#line 138
mov r0.xyz, x0[0].xyzx  // outTangentToWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, x0[1].xyzx  // outTangentToWorld<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
mov r2.xyz, x0[2].xyzx  // outTangentToWorld<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
mov o5.xyz, r0.xyzx  // outTangentToWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o6.xyz, r1.xyzx  // outTangentToWorld<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
mov o7.xyz, r2.xyzx  // outTangentToWorld<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
ret 
// Approximately 130 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(53,14-15): warning X3578: Output value 'o1' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(57,14-15): warning X3578: Output value 'o5' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(58,14-15): warning X3578: Output value 'o6' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
