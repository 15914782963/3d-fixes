// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i e76b2c17c81eaea0-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:47 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}

SamplerState g_samplerLinear_Wrap_s : register(s10);
Texture2D<float4> inDisplacementTexture2 : register(t0);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = g_vsMaterial.m_materials[1].xy;
  r0.z = g_vsMaterial.m_materials[5].x;
  r0.w = g_vsMaterial.m_materials[5].y;
  r1.x = 1.35000002 * g_vsMaterial.m_materials[2].w;
  r1.y = 1 / g_vsMaterial.m_materials[1].w;
  r1.z = g_vsMaterial.m_materials[2].x;
  r2.w = 1;
  r2.xyz = v0.xzy;
  r3.x = dot(r2.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r3.z = dot(r2.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r2.w = dot(r2.xyzw, g_vsObject.m_world._m03_m13_m23_m33);
  r1.yw = r3.xz * r1.yy;
  r4.xyz = inDisplacementTexture2.SampleLevel(g_samplerLinear_Wrap_s, r1.yw, 0).xzy;
  r5.xy = g_vsScene.m_eyepos.xz;
  r5.xy = -r5.xy;
  r5.xy = r5.xy + r3.xz;
  r3.w = dot(r5.xy, r5.xy);
  r4.w = sqrt(r3.w);
  r0.z = -r0.z;
  r0.z = r4.w + r0.z;
  r0.z = r0.z / r0.w;
  r0.z = max(0, r0.z);
  r0.z = min(1, r0.z);
  r0.z = -r0.z;
  r0.z = 1 + r0.z;
  r0.w = r4.w / 2500;
  r0.w = max(0, r0.w);
  r0.w = min(1, r0.w);
  r4.w = -r0.w;
  r4.w = 1 + r4.w;
  r0.w = r4.w * r0.w;
  r4.w = dot(r0.xy, r0.xy);
  r4.w = rsqrt(r4.w);
  r0.xy = r4.ww * r0.xy;
  r3.w = rsqrt(r3.w);
  r5.xy = r5.xy * r3.ww;
  r0.x = dot(r0.xy, r5.xy);
  r0.y = -r0.x;
  r0.x = max(r0.x, r0.y);
  r0.x = -r0.x;
  r0.x = 1 + r0.x;
  r0.y = 0.5 * r0.x;
  r0.y = 0.5 + r0.y;
  r0.y = r0.z * r0.y;
  r5.xy = float2(0.200000003,0.200000003) * r1.wy;
  r5.xyz = inDisplacementTexture2.SampleLevel(g_samplerLinear_Wrap_s, r5.xy, 0).xzy;
  r5.xyz = r5.xyz * r1.xxx;
  r5.xyz = r5.xyz * r0.www;
  r6.xyz = -r5.xyz;
  r4.xyz = r6.xyz + r4.xyz;
  r0.yzw = r4.xyz * r0.yyy;
  r0.yzw = r5.xyz + r0.yzw;
  r0.yzw = r0.yzw * r1.zzz;
  r2.xyz = r3.xyz + r0.yzw;
  r0.yzw = r2.xyz;
  r3.x = dot(r2.xyzw, g_vsScene.m_projectionView._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, g_vsScene.m_projectionView._m01_m11_m21_m31);
  r3.z = dot(r2.xyzw, g_vsScene.m_projectionView._m02_m12_m22_m32);
  r3.w = dot(r2.xyzw, g_vsScene.m_projectionView._m03_m13_m23_m33);
  o0.xyzw = r3.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i e76b2c17c81eaea0-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r3.w != 1.0)
  r3.x += stereo.x * (r3.w - stereo.y);

  o1.xy = r1.yw;
  o1.z = r3.w;
  o2.xyz = r0.yzw;
  o2.w = r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerLinear_Wrap              sampler      NA          NA   10        1
// inDisplacementTexture2            texture  float4          2d    0        1
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[21], immediateIndexed
dcl_constantbuffer cb5[8], immediateIndexed
dcl_constantbuffer cb4[6], immediateIndexed
dcl_sampler s10, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input v0.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_temps 7

#line 128 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Primitive_TppFourierOceanLQ_vs.hlsl"
nop 

#line 56
mov r0.xy, cb4[1].xyxx  // windDirection<0,1>
mov r0.z, cb4[5].x  // patchBlendBegin<0>
mov r0.w, cb4[5].y  // patchBlendEnd<0>
mul r1.x, cb4[2].w, l(1.350000)  // farAmplitude<0:Inf>
div r1.y, l(1.000000), cb4[1].w  // projectionScale<0:Inf>
mov r1.z, cb4[2].x  // displacementScale<0>

#line 65
nop 
mov r2.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r2.xyz, v0.xzyx
dp4 r3.x, r2.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r2.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r2.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r2.w, r2.xyzw, cb5[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 65
mov r3.xyz, r3.xyzx  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r1.yw, r1.yyyy, r3.xxxz  // outBaseUV<0:NaN:Inf,1:NaN:Inf>

#line 72
sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r1.ywyy, t0.xzyw, s10, l(0.000000)
mov r4.xyz, r4.xyzx  // displacement<0:Inf,1:Inf,2:Inf>

#line 75
nop 

#line 64
mov r5.xy, cb2[20].xzxx  // GetEyePosition<0,2>

#line 75
mov r5.xy, -r5.xyxx
add r5.xy, r3.xzxx, r5.xyxx  // eye_vec<0:NaN:Inf,2:NaN:Inf>
dp2 r3.w, r5.xyxx, r5.xyxx
sqrt r4.w, r3.w  // dist_2d<0:NaN:Inf>
mov r0.z, -r0.z
add r0.z, r0.z, r4.w
div r0.z, r0.z, r0.w
max r0.z, r0.z, l(0.000000)
min r0.z, r0.z, l(1.000000)  // blendFactor<0:[0f,1f]>
mov r0.z, -r0.z
add r0.z, r0.z, l(1.000000)  // blendFactor<0:[0f,1f]>

#line 81
div r0.w, r4.w, l(2500.000000)
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)  // amplitudAttenuation<0:[0f,1f]>
mov r4.w, -r0.w
add r4.w, r4.w, l(1.000000)
mul r0.w, r0.w, r4.w  // amplitudAttenuation<0:[0f,1f]>

#line 85
dp2 r4.w, r0.xyxx, r0.xyxx
rsq r4.w, r4.w
mul r0.xy, r0.xyxx, r4.wwww
rsq r3.w, r3.w
mul r5.xy, r3.wwww, r5.xyxx
dp2 r0.x, r0.xyxx, r5.xyxx
mov r0.y, -r0.x
max r0.x, r0.y, r0.x
mov r0.x, -r0.x
add r0.x, r0.x, l(1.000000)  // outWindDirectionAttenuation<0:NaN:Inf>
mul r0.y, r0.x, l(0.500000)
add r0.y, r0.y, l(0.500000)
mul r0.y, r0.y, r0.z  // blendFactor<0:NaN:Inf>
mul r5.xy, r1.wyww, l(0.200000, 0.200000, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r5.xyxx, t0.xzyw, s10, l(0.000000)
mov r5.xyz, r5.xyzx  // farDisplacement<0:Inf,1:Inf,2:Inf>
mul r5.xyz, r1.xxxx, r5.xyzx  // farDisplacement<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r5.xyz, r0.wwww, r5.xyzx  // farDisplacement<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 93
mov r6.xyz, -r5.xyzx
add r4.xyz, r4.xyzx, r6.xyzx
mul r0.yzw, r0.yyyy, r4.xxyz
add r0.yzw, r0.yyzw, r5.xxyz  // displacement<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r0.yzw, r1.zzzz, r0.yyzw
add r2.xyz, r0.yzwy, r3.xyzx  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.yzw, r2.xxyz  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 99
nop 
nop 

#line 408
dp4 r3.x, r2.xyzw, cb2[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r2.xyzw, cb2[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r2.xyzw, cb2[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r3.w, r2.xyzw, cb2[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 100
mov r3.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.yzw, r0.yyzw  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 128
mov r3.xyzw, r3.xyzw  // NTransformInputOcean_transform_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.yzw, r0.yyzw  // NTransformInputOcean_transform_outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.yw, r1.yyyw  // NTransformInputOcean_transform_outBaseUV<0:NaN:Inf,1:NaN:Inf>
mov r0.x, r0.x  // NTransformInputOcean_transform_outWindDirectionAttenuation<0:NaN:Inf>
mov o0.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xy, r1.ywyy  // outBaseUVDepth<0:NaN:Inf,1:NaN:Inf>
mov o1.z, r3.w  // outBaseUVDepth<2:NaN:Inf>
mov o2.xyz, r0.yzwy  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o2.w, r0.x  // outWorldPosition<3:NaN:Inf>

#line 105
ret 
// Approximately 80 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(62,14-15): warning X3578: Output value 'o1' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
