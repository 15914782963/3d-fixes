// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:44 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR0,
  out float2 o2 : TEXCOORD0,
  out float2 p2 : TEXCOORD1,
  out float4 o3 : TEXCOORD3,
  out float4 o4 : TEXCOORD4,
  out float4 o5 : TEXCOORD5,
  out float4 o6 : TEXCOORD6,
  out float3 o7 : TEXCOORD7)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[3];
  r0.xyzw = v1.xyzw;
  r1.x = v4.w;
  r1.x = r1.x;
  r2.w = 0;
  r2.xyz = v3.xyz;
  r3.x = dot(r2.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r3.z = dot(r2.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r3.xyz = r3.xyz;
  r2.w = 0;
  r2.xyz = v4.xyz;
  r4.x = dot(r2.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r4.y = dot(r2.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r4.z = dot(r2.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r4.xyz = r4.xyz;
  r1.yzw = r4.zxy * r3.yzx;
  r2.xyz = r4.yzx * r3.zxy;
  r2.xyz = -r2.xyz;
  r1.yzw = r2.xyz + r1.yzw;
  r1.xyz = r1.yzw * r1.xxx;
  r3.xyz = r3.xyz;
  r4.xyz = r4.xyz;
  r1.xyz = r1.xyz;
  r2.x = dot(v0.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r2.y = dot(v0.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r2.z = dot(v0.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r2.w = dot(v0.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r5.x = dot(r2.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r5.y = dot(r2.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r5.z = dot(r2.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r5.w = dot(r2.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r5.xyzw = r5.xyzw;
  r6.x = dot(v0.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r6.y = dot(v0.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r6.z = dot(v0.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r6.xyz = r6.xyz;
  r6.xyz = r6.xyz;
  r5.xyzw = r5.xyzw;
  r6.xyz = r6.xyz;
  r6.xyz = r6.xyz;
  r5.xyzw = r5.xyzw;
  r1.w = r5.w;
  r1.w = r1.w;
  r3.w = g_vsScene.m_fogParam[0].x * r1.w;
  r3.w = g_vsScene.m_fogParam[0].y + r3.w;
  r3.w = r3.w;
  r3.xyz = r3.xyz;
  r4.xyz = r4.xyz;
  r1.xyz = r1.xyz;
  r3.xyz = r3.xyz;
  r4.xyz = r4.xyz;
  r1.xyz = r1.xyz;
  r4.w = g_vsScene.m_shadowProjection2._m31;
  r4.w = r4.w;
  r6.w = g_vsScene.m_shadowProjection2._m32;
  r6.w = r6.w;
  r2.w = 1;
  r7.x = dot(r2.xyzw, g_vsScene.m_shadowProjection._m00_m10_m20_m30);
  r7.y = dot(r2.xyzw, g_vsScene.m_shadowProjection._m01_m11_m21_m31);
  r7.z = dot(r2.xyzw, g_vsScene.m_shadowProjection._m02_m12_m22_m32);
  r7.w = dot(r2.xyzw, g_vsScene.m_shadowProjection._m03_m13_m23_m33);
  r7.xyzw = r7.xyzw;
  r2.xyz = r7.xyz / r7.www;
  r4.w = -r4.w;
  r1.w = r4.w + r1.w;
  r1.w = r1.w * r6.w;
  r2.w = 1 + r1.w;
  r2.w = r2.w;
  r2.xyz = r2.xyz;
  r2.w = r2.w;
  o4.xyzw = r2.xyzw;
  o0.xyzw = r5.xyzw;
  o3.xyz = r6.xyz;
  x0[0].xyz = r4.xyz;
  x0[1].xyz = r1.xyz;
  x0[2].xyz = r3.xyz;
  p2.x = r3.w;
  p2.y = r5.w;
  o2.xy = v2.xy;
  o1.xyzw = r0.xyzw;
  r0.xyz = x0[0].xyz;
  r1.xyz = x0[1].xyz;
  r2.xyz = x0[2].xyz;
  o5.xyz = r0.xyz;
  o6.xyz = r1.xyz;
  o7.xyz = r2.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float   xyz 
// TEXCOORD                 2   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1     zw        2     NONE   float     zw
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyz         5     NONE   float   xyz 
// TEXCOORD                 6   xyz         6     NONE   float   xyz 
// TEXCOORD                 7   xyz         7     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[25], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o2.zw
dcl_output o3.xyz
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_temps 8
dcl_indexableTemp x0[3], 4

#line 125 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Prim_TppFxGlassMat_comref_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inColor<0,1,2,3>

#line 137
mov r1.x, v4.w  // NTransformInputOrgn_transform_inTangent<3>
nop 
mov r1.x, r1.x  // inTangent<3>

#line 71
nop 

#line 412
mov r2.w, l(0)
mov r2.xyz, v3.xyzx
dp4 r3.x, r2.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r2.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r2.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 71
mov r3.xyz, r3.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 412
mov r2.w, l(0)
mov r2.xyz, v4.xyzx
dp4 r4.x, r2.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r4.y, r2.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r4.z, r2.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 72
mov r4.xyz, r4.xyzx  // outTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r1.yzw, r3.yyzx, r4.zzxy
mul r2.xyz, r3.zxyz, r4.yzxy
mov r2.xyz, -r2.xyzx
add r1.yzw, r1.yyzw, r2.xxyz
mul r1.xyz, r1.xxxx, r1.yzwy  // outBinormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 138
mov r3.xyz, r3.xyzx  // NTransformInputOrgn_transform_outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // NTransformInputOrgn_transform_outTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NTransformInputOrgn_transform_outBinormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 144
nop 

#line 25
nop 

#line 145
nop 

#line 408
dp4 r2.x, v0.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r2.y, v0.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r2.z, v0.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r2.w, v0.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 146
nop 

#line 408
dp4 r5.x, r2.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r5.y, r2.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r5.z, r2.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r5.w, r2.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 146
mov r5.xyzw, r5.xyzw  // hPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 

#line 408
dp4 r6.x, v0.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r6.y, v0.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r6.z, v0.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 147
mov r6.xyz, r6.xyzx  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r6.xyz, r6.xyzx  // TransformPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 25
mov r5.xyzw, r5.xyzw  // outProjectionPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r6.xyz, r6.xyzx  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 144
mov r6.xyz, r6.xyzx  // NGetProjection_getProjection_outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.xyzw, r5.xyzw  // NGetProjection_getProjection_outProjectionPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 159
mov r1.w, r5.w  // NCalcFogFactor_calcFogFactor_inDepth<0:NaN:Inf>
nop 
mov r1.w, r1.w  // inDepth<0:NaN:Inf>

#line 144
mul r3.w, r1.w, cb2[24].x
add r3.w, r3.w, cb2[24].y  // outFactor<0:NaN:Inf>

#line 160
mov r3.w, r3.w  // NCalcFogFactor_calcFogFactor_outFactor<0:NaN:Inf>

#line 141
mov r3.xyz, r3.xyzx  // NMakeTangentToWorld_tangentToWorld_inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // NMakeTangentToWorld_tangentToWorld_inTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NMakeTangentToWorld_tangentToWorld_inBinormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r3.xyz, r3.xyzx  // inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // inTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // inBinormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 147
nop 

#line 50
nop 

#line 302
mov r4.w, cb2[17].w  // GetShadowNearRange<0>

#line 50
mov r4.w, r4.w  // near_range<0>
nop 

#line 313
mov r6.w, cb2[18].w  // GetShadowInvBlockUnitRange<0>

#line 51
mov r6.w, r6.w  // inv_block_unit_range<0>
nop 
nop 

#line 408
mov r2.w, l(1.000000)
dp4 r7.x, r2.xyzw, cb2[12].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r7.y, r2.xyzw, cb2[13].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r7.z, r2.xyzw, cb2[14].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r7.w, r2.xyzw, cb2[15].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 53
mov r7.xyzw, r7.xyzw  // outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
div r2.xyz, r7.xyzx, r7.wwww  // outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.w, -r4.w
add r1.w, r1.w, r4.w
mul r1.w, r6.w, r1.w
add r2.w, r1.w, l(1.000000)  // cascade_level<0:NaN:Inf>
mov r2.w, r2.w  // outShadowPos<3:NaN:Inf>

#line 147
mov r2.xyz, r2.xyzx  // NMakeShadowPos_makeShadowPos_outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.w, r2.w  // NMakeShadowPos_makeShadowPos_outShadowPos<3:NaN:Inf>
mov o4.xyzw, r2.xyzw  // outShadowPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 150
mov o0.xyzw, r5.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o3.xyz, r6.xyzx  // outWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 156
mov x0[0].xyz, r4.xyzx  // outTangentToWorld<0,1,2>
mov x0[1].xyz, r1.xyzx  // outTangentToWorld<3,4,5>
mov x0[2].xyz, r3.xyzx  // outTangentToWorld<6,7,8>

#line 160
mov o2.z, r3.w  // outFogFactor<0:NaN:Inf>
mov o2.w, r5.w  // outFogFactor<1:NaN:Inf>

#line 152
mov o2.xy, v2.xyxx  // outBaseUV<0,1>
mov o1.xyzw, r0.xyzw  // outColor<0,1,2,3>

#line 109
mov r0.xyz, x0[0].xyzx  // outTangentToWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, x0[1].xyzx  // outTangentToWorld<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
mov r2.xyz, x0[2].xyzx  // outTangentToWorld<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
mov o5.xyz, r0.xyzx  // outTangentToWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o6.xyz, r1.xyzx  // outTangentToWorld<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
mov o7.xyz, r2.xyzx  // outTangentToWorld<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
ret 
// Approximately 103 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(56,14-15): warning X3578: Output value 'o3' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(58,14-15): warning X3578: Output value 'o5' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(59,14-15): warning X3578: Output value 'o6' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
