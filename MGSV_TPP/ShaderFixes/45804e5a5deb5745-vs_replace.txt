// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:16 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}

cbuffer VSBones : register(b6)
{

  struct
  {
    float4x3 m_boneMatrices[32];
  } g_vsBone : packoffset(c0);


  struct
  {
    float4x3 m_boneMatrices[32];
  } g_vsPrevBone : packoffset(c96);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : NORMAL0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  uint4 v4 : BLENDINDICES0,
  float4 v5 : BLENDWEIGHT0,
  float4 v6 : TEXCOORD0,
  float2 v7 : TEXCOORD1,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float3 o4 : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v0.xyz;
  r1.xyz = v1.xyz;
  r2.xyzw = v3.xyzw;
  r3.xyzw = v5.xyzw;
  r0.xyz = r0.xyz;
  r1.xyz = r1.xyz;
  r2.xyzw = r2.xyzw;
  r3.xyzw = r3.xyzw;
  r4.x = cmp(g_vsObject.m_useWeightCount.x != 0.000000);
  if (r4.x != 0) {
    r3.xyzw = r3.xyzw;
    r4.x = (int)v4.x * 3;
    r5.xyzw = g_vsBone.m_boneMatrices[v4.x]._m00_m10_m20_m30 * r3.xxxx;
    r6.xyzw = g_vsBone.m_boneMatrices[v4.x]._m01_m11_m21_m31 * r3.xxxx;
    r4.xyzw = g_vsBone.m_boneMatrices[v4.x]._m02_m12_m22_m32 * r3.xxxx;
    r3.x = (int)v4.y * 3;
    r7.xyzw = g_vsBone.m_boneMatrices[v4.y]._m00_m10_m20_m30 * r3.yyyy;
    r8.xyzw = g_vsBone.m_boneMatrices[v4.y]._m01_m11_m21_m31 * r3.yyyy;
    r9.xyzw = g_vsBone.m_boneMatrices[v4.y]._m02_m12_m22_m32 * r3.yyyy;
    r5.xyzw = r7.xyzw + r5.xyzw;
    r6.xyzw = r8.xyzw + r6.xyzw;
    r4.xyzw = r9.xyzw + r4.xyzw;
    r3.x = (int)v4.z * 3;
    r7.xyzw = g_vsBone.m_boneMatrices[v4.y]._m00_m10_m20_m30 * r3.zzzz;
    r8.xyzw = g_vsBone.m_boneMatrices[v4.y]._m01_m11_m21_m31 * r3.zzzz;
    r9.xyzw = g_vsBone.m_boneMatrices[v4.y]._m02_m12_m22_m32 * r3.zzzz;
    r5.xyzw = r7.xyzw + r5.xyzw;
    r6.xyzw = r8.xyzw + r6.xyzw;
    r4.xyzw = r9.xyzw + r4.xyzw;
    r3.x = (int)v4.w * 3;
    r7.xyzw = g_vsBone.m_boneMatrices[v4.y]._m00_m10_m20_m30 * r3.wwww;
    r8.xyzw = g_vsBone.m_boneMatrices[v4.y]._m01_m11_m21_m31 * r3.wwww;
    r3.xyzw = g_vsBone.m_boneMatrices[v4.y]._m02_m12_m22_m32 * r3.wwww;
    r5.xyzw = r7.xyzw + r5.xyzw;
    r6.xyzw = r8.xyzw + r6.xyzw;
    r3.xyzw = r4.xyzw + r3.xyzw;
    r0.x = dot(v0.xyzw, r5.xyzw);
    r0.y = dot(v0.xyzw, r6.xyzw);
    r0.z = dot(v0.xyzw, r3.xyzw);
    r0.xyz = r0.xyz;
    r4.w = 0;
    r4.xyz = v1.xyz;
    r1.x = dot(r4.xyzw, r5.xyzw);
    r1.y = dot(r4.xyzw, r6.xyzw);
    r1.z = dot(r4.xyzw, r3.xyzw);
    r1.xyz = r1.xyz;
    r4.w = 0;
    r4.xyz = v3.xyz;
    r5.x = dot(r4.xyzw, r5.xyzw);
    r5.y = dot(r4.xyzw, r6.xyzw);
    r5.z = dot(r4.xyzw, r3.xyzw);
    r5.xyz = r5.xyz;
    r0.xyz = r0.xyz;
    r1.xyz = r1.xyz;
    r5.xyz = r5.xyz;
  } else {
    r5.xyz = r2.xyz;
  }
  r1.w = 0;
  r2.x = dot(r1.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r2.z = dot(r1.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r2.xyz = r2.xyz;
  r5.w = 0;
  r1.x = dot(r5.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r1.y = dot(r5.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r1.z = dot(r5.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r1.xyz = r1.xyz;
  r3.xyz = r2.yzx * r1.zxy;
  r4.xyz = r2.zxy * r1.yzx;
  r4.xyz = -r4.xyz;
  r3.xyz = r4.xyz + r3.xyz;
  r3.xyz = r3.xyz * r2.www;
  r2.xyz = r2.xyz;
  r0.w = v0.w;
  r4.x = dot(r0.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r4.y = dot(r0.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r4.z = dot(r0.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r4.w = dot(r0.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r5.x = dot(r4.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r5.y = dot(r4.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r5.z = dot(r4.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r5.w = dot(r4.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r5.xyzw = r5.xyzw;
  r4.x = dot(r0.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r4.y = dot(r0.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r4.z = dot(r0.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r4.xyz = r4.xyz;
  r4.xyz = r4.xyz;
  r5.xyzw = r5.xyzw;
  r4.xyz = r4.xyz;
  r4.xyz = r4.xyz;
  r5.xyzw = r5.xyzw;
  r0.x = r5.w;
  r0.x = r0.x;
  r0.x = g_vsScene.m_fogParam[0].x * r0.x;
  r0.x = g_vsScene.m_fogParam[0].y + r0.x;
  r0.x = r0.x;
  r4.xyz = r4.xyz;
  r0.yzw = r2.xyz;
  r4.xyz = r4.xyz;
  r0.yzw = r0.yzw;
  r6.xyz = g_vsScene.m_eyepos.xyz;
  r4.xyz = -r4.xyz;
  r4.xyz = r6.xyz + r4.xyz;
  r1.w = dot(r4.xyz, r0.yzw);
  r1.w = r1.w + r1.w;
  r1.w = -r1.w;
  r6.xyz = r1.www * r0.yzw;
  r4.xyz = r6.xyz + r4.xyz;
  r1.x = dot(r1.xyz, r4.xyz);
  r1.y = dot(r3.xyz, r4.xyz);
  r2.z = dot(r2.xyz, r4.xyz);
  r1.z = 0;
  r1.x = r1.x;
  r1.y = r1.y;
  r1.z = dot(r1.xyz, r1.xyz);
  r1.z = rsqrt(r1.z);
  r1.zw = r1.xy * r1.zz;
  r2.x = r1.x;
  r2.y = r1.y;
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = sqrt(r2.w);
  r2.w = r2.w * r2.w;
  r3.x = r2.z * r2.z;
  r3.x = -r3.x;
  r2.w = r3.x + r2.w;
  r2.w = sqrt(r2.w);
  r3.x = -r2.z;
  r2.w = r2.w / r3.x;
  r1.zw = r2.ww * r1.zw;
  r2.w = -g_vsMaterial.m_materials[0].x;
  r2.w = max(g_vsMaterial.m_materials[0].x, r2.w);
  r2.w = -1 * r2.w;
  r3.xy = r2.ww * r1.zw;
  r3.y = -1 * r3.y;
  r1.z = dot(r4.xyz, r4.xyz);
  r1.z = rsqrt(r1.z);
  r4.xyz = r4.xyz * r1.zzz;
  r3.z = dot(r4.xyz, r0.yzw);
  r2.x = r1.x;
  r2.y = r1.y;
  r2.z = r2.z;
  r3.x = r3.x;
  r3.y = r3.y;
  r3.z = r3.z;
  o2.xyz = r3.xyz;
  o3.xyz = r2.xyz;
  o0.xyzw = r5.xyzw;
  o4.x = r0.x;
  o4.y = r5.w;
  o1.xy = v6.xy;
  o1.zw = v7.xy;
  o4.z = g_vsObject.m_useWeightCount.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
// cbuffer VSBones
// {
//
//   struct VSBone
//   {
//       
//       float4x3 m_boneMatrices[32];   // Offset:    0
//
//   } g_vsBone;                        // Offset:    0 Size:  1536
//   
//   struct VSBone
//   {
//       
//       float4x3 m_boneMatrices[32];   // Offset: 1536
//
//   } g_vsPrevBone;                    // Offset: 1536 Size:  1536 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
// VSBones                           cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BLENDINDICES             0   xyzw        4     NONE    uint   xyzw
// BLENDWEIGHT              0   xyzw        5     NONE   float   xyzw
// TEXCOORD                 0   xy          6     NONE   float   xy  
// TEXCOORD                 1   xy          7     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[25], immediateIndexed
dcl_constantbuffer cb5[9], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_constantbuffer cb6[96], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xy
dcl_input v7.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_temps 10

#line 184 "d:\work\master\git_clone\_intermediate\win64\GrModelShaders_dx11_win64\Release\fox3dfw_parallax_refrection_prim_vs.hlsl"
mov r0.xyz, v0.xyzx  // NTransformInput_transform_inPosition<0,1,2>
mov r1.xyz, v1.xyzx  // NTransformInput_transform_inNormal<0,1,2>
mov r2.xyzw, v3.xyzw  // NTransformInput_transform_inTangent<0,1,2,3>
mov r3.xyzw, v5.xyzw  // NTransformInput_transform_inBlendWeights<0,1,2,3>
nop 
mov r0.xyz, r0.xyzx  // inPosition<0,1,2>
mov r1.xyz, r1.xyzx  // inNormal<0,1,2>
mov r2.xyzw, r2.xyzw  // inTangent<0,1,2,3>
mov r3.xyzw, r3.xyzw  // inBlendWeights<0,1,2,3>

#line 47
ne r4.x, cb5[8].x, l(0.000000)
if_nz r4.x
  nop 
  mov r3.xyzw, r3.xyzw  // blendWeights<0,1,2,3>

#line 22
  imul null, r4.x, v4.x, l(3)
  mul r5.xyzw, r3.xxxx, cb6[r4.x + 0].xyzw  // blendMatrix<0:Inf,3:Inf,6:Inf,9:Inf>
  mul r6.xyzw, r3.xxxx, cb6[r4.x + 1].xyzw  // blendMatrix<1:Inf,4:Inf,7:Inf,10:Inf>
  mul r4.xyzw, r3.xxxx, cb6[r4.x + 2].xyzw  // blendMatrix<2:Inf,5:Inf,8:Inf,11:Inf>
  imul null, r3.x, v4.y, l(3)
  mul r7.xyzw, r3.yyyy, cb6[r3.x + 0].xyzw
  mul r8.xyzw, r3.yyyy, cb6[r3.x + 1].xyzw
  mul r9.xyzw, r3.yyyy, cb6[r3.x + 2].xyzw
  add r5.xyzw, r5.xyzw, r7.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r6.xyzw, r6.xyzw, r8.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r4.xyzw, r4.xyzw, r9.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  imul null, r3.x, v4.z, l(3)
  mul r7.xyzw, r3.zzzz, cb6[r3.x + 0].xyzw
  mul r8.xyzw, r3.zzzz, cb6[r3.x + 1].xyzw
  mul r9.xyzw, r3.zzzz, cb6[r3.x + 2].xyzw
  add r5.xyzw, r5.xyzw, r7.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r6.xyzw, r6.xyzw, r8.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r4.xyzw, r4.xyzw, r9.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  imul null, r3.x, v4.w, l(3)
  mul r7.xyzw, r3.wwww, cb6[r3.x + 0].xyzw
  mul r8.xyzw, r3.wwww, cb6[r3.x + 1].xyzw
  mul r3.xyzw, r3.wwww, cb6[r3.x + 2].xyzw
  add r5.xyzw, r5.xyzw, r7.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r6.xyzw, r6.xyzw, r8.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r3.xyzw, r3.xyzw, r4.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  nop 

#line 416
  dp4 r0.x, v0.xyzw, r5.xyzw  // ApplyMatrixT<0:NaN:Inf>
  dp4 r0.y, v0.xyzw, r6.xyzw  // ApplyMatrixT<1:NaN:Inf>
  dp4 r0.z, v0.xyzw, r3.xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 27
  mov r0.xyz, r0.xyzx  // position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  nop 

#line 420
  mov r4.w, l(0)
  mov r4.xyz, v1.xyzx
  dp4 r1.x, r4.xyzw, r5.xyzw  // ApplyMatrixT<0:NaN:Inf>
  dp4 r1.y, r4.xyzw, r6.xyzw  // ApplyMatrixT<1:NaN:Inf>
  dp4 r1.z, r4.xyzw, r3.xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 28
  mov r1.xyz, r1.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  nop 

#line 420
  mov r4.w, l(0)
  mov r4.xyz, v3.xyzx
  dp4 r5.x, r4.xyzw, r5.xyzw  // ApplyMatrixT<0:NaN:Inf>
  dp4 r5.y, r4.xyzw, r6.xyzw  // ApplyMatrixT<1:NaN:Inf>
  dp4 r5.z, r4.xyzw, r3.xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 29
  mov r5.xyz, r5.xyzx  // tangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 49
  mov r0.xyz, r0.xyzx  // inPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r1.xyz, r1.xyzx  // inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r5.xyz, r5.xyzx  // inTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
else 
  mov r5.xyz, r2.xyzx  // inTangent<0,1,2>
endif 

#line 58
nop 

#line 412
mov r1.w, l(0)
dp4 r2.x, r1.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r2.y, r1.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r2.z, r1.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 58
mov r2.xyz, r2.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 412
mov r5.w, l(0)
dp4 r1.x, r5.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r1.y, r5.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r1.z, r5.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 59
mov r1.xyz, r1.xyzx  // outTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r3.xyz, r1.zxyz, r2.yzxy
mul r4.xyz, r1.yzxy, r2.zxyz
mov r4.xyz, -r4.xyzx
add r3.xyz, r3.xyzx, r4.xyzx
mul r3.xyz, r2.wwww, r3.xyzx  // outBinormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 188
mov r2.xyz, r2.xyzx  // NTransformInput_transform_outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 191
nop 

#line 87
nop 

#line 122
nop 

#line 408
mov r0.w, v0.w
dp4 r4.x, r0.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r4.y, r0.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r4.z, r0.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r4.w, r0.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 123
nop 

#line 408
dp4 r5.x, r4.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r5.y, r4.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r5.z, r4.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r5.w, r4.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 123
mov r5.xyzw, r5.xyzw  // hPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 

#line 408
dp4 r4.x, r0.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r4.y, r0.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r4.z, r0.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 124
mov r4.xyz, r4.xyzx  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // TransformPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 87
mov r5.xyzw, r5.xyzw  // outProjectionPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r4.xyz, r4.xyzx  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 191
mov r4.xyz, r4.xyzx  // NGetProjection_getProjection_outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.xyzw, r5.xyzw  // NGetProjection_getProjection_outProjectionPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 205
mov r0.x, r5.w  // NCalcFogFactor_calcFogFactor_inDepth<0:NaN:Inf>
nop 
mov r0.x, r0.x  // inDepth<0:NaN:Inf>

#line 144
mul r0.x, r0.x, cb2[24].x
add r0.x, r0.x, cb2[24].y  // outFactor<0:NaN:Inf>

#line 206
mov r0.x, r0.x  // NCalcFogFactor_calcFogFactor_outFactor<0:NaN:Inf>

#line 193
mov r4.xyz, r4.xyzx  // NGetParallaxVecs_getParallaxDir_inVectexPosWS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.yzw, r2.xxyz  // NGetParallaxVecs_getParallaxDir_inNormalWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r4.xyz, r4.xyzx  // inVectexPosWS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.yzw, r0.yyzw  // inNormalWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 133
nop 

#line 64
mov r6.xyz, cb2[20].xyzx  // GetEyePosition<0,1,2>

#line 133
mov r4.xyz, -r4.xyzx
add r4.xyz, r4.xyzx, r6.xyzx  // viewWS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r1.w, r4.xyzx, r0.yzwy
add r1.w, r1.w, r1.w
mov r1.w, -r1.w
mul r6.xyz, r0.yzwy, r1.wwww
add r4.xyz, r4.xyzx, r6.xyzx  // viewWS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 137
dp3 r1.x, r1.xyzx, r4.xyzx  // outViewTS<0:NaN:Inf>
dp3 r1.y, r3.xyzx, r4.xyzx  // outViewTS<1:NaN:Inf>
dp3 r2.z, r2.xyzx, r4.xyzx  // outViewTS<2:NaN:Inf>
mov r1.z, l(0)  // xyPar<2: 0f>
mov r1.x, r1.x  // xyPar<0:NaN:Inf>
mov r1.y, r1.y  // xyPar<1:NaN:Inf>
dp3 r1.z, r1.xyzx, r1.xyzx
rsq r1.z, r1.z
mul r1.zw, r1.zzzz, r1.xxxy  // vParDir<0:NaN:Inf,1:NaN:Inf>
mov r2.x, r1.x
mov r2.y, r1.y
dp3 r2.w, r2.xyzx, r2.xyzx
sqrt r2.w, r2.w  // len<0:NaN:Inf>
mul r2.w, r2.w, r2.w
mul r3.x, r2.z, r2.z
mov r3.x, -r3.x
add r2.w, r2.w, r3.x
sqrt r2.w, r2.w
mov r3.x, -r2.z
div r2.w, r2.w, r3.x  // parLen<0:NaN:Inf>
mul r1.zw, r1.zzzw, r2.wwww  // outParallaxVec<0:NaN:Inf,1:NaN:Inf>

#line 148
mov r2.w, -cb4[0].x
max r2.w, r2.w, cb4[0].x
mul r2.w, r2.w, l(-1.000000)
mul r3.xy, r1.zwzz, r2.wwww  // outParallaxVec<0:NaN:Inf,1:NaN:Inf>
mul r3.y, r3.y, l(-1.000000)  // outParallaxVec<1:NaN:Inf>
dp3 r1.z, r4.xyzx, r4.xyzx
rsq r1.z, r1.z
mul r4.xyz, r1.zzzz, r4.xyzx
dp3 r3.z, r4.xyzx, r0.yzwy  // outParallaxVec<2:NaN:Inf>

#line 196
mov r2.x, r1.x  // NGetParallaxVecs_getParallaxDir_outViewTS<0:NaN:Inf>
mov r2.y, r1.y  // NGetParallaxVecs_getParallaxDir_outViewTS<1:NaN:Inf>
mov r2.z, r2.z  // NGetParallaxVecs_getParallaxDir_outViewTS<2:NaN:Inf>
mov r3.x, r3.x  // NGetParallaxVecs_getParallaxDir_outParallaxVec<0:NaN:Inf>
mov r3.y, r3.y  // NGetParallaxVecs_getParallaxDir_outParallaxVec<1:NaN:Inf>
mov r3.z, r3.z  // NGetParallaxVecs_getParallaxDir_outParallaxVec<2:NaN:Inf>
mov o2.xyz, r3.xyzx  // outParallaxDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o3.xyz, r2.xyzx  // outViewTS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
mov o0.xyzw, r5.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 206
mov o4.x, r0.x  // outFogFactor<0:NaN:Inf>
mov o4.y, r5.w  // outFogFactor<1:NaN:Inf>

#line 201
mov o1.xy, v6.xyxx  // outBaseUV<0,1>
mov o1.zw, v7.xxxy  // outBaseUV<2,3>

#line 208
mov o4.z, cb5[8].w  // outFogFactor<2>

#line 156
ret 
// Approximately 171 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(83,14-15): warning X3578: Output value 'o2' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(84,14-15): warning X3578: Output value 'o3' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
