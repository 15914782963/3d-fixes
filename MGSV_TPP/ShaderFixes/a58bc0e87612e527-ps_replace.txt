// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:43:45 2016

cbuffer cPSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_psScene : packoffset(c0);

}

cbuffer cPSLight : register(b3)
{

  struct
  {
    float4 m_lightParams[11];
  } g_psLight : packoffset(c0);

}

cbuffer cPSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_psMaterial : packoffset(c0);

}

SamplerState g_samplerPoint_Wrap_s : register(s8);
SamplerState g_samplerPoint_Clamp_s : register(s9);
Texture2D<float4> g_NormalTexture : register(t0);
Texture2D<float4> g_SpecularTexture : register(t1);
Texture2D<float4> g_DepthTexture : register(t2);
Texture2D<float4> g_MaterialTexture : register(t10);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v2.xyw;
  r0.xyz = r0.xyz;
  r0.xy = r0.xy / r0.zz;
  r0.xy = r0.xy;
  r0.xy = r0.xy;
  r0.xy = r0.xy;
  r1.xyz = g_NormalTexture.Sample(g_samplerPoint_Wrap_s, r0.xy).xyz;
  r1.xyz = r1.xyz;
  r0.zw = g_SpecularTexture.Sample(g_samplerPoint_Wrap_s, r0.xy).wz;
  r0.zw = r0.zw;
  r0.x = g_DepthTexture.Sample(g_samplerPoint_Wrap_s, r0.xy).x;
  r0.x = r0.x;
  r1.xyz = r1.xyz;
  r1.xy = float2(2,2) * r1.xy;
  r1.xy = float2(-1,-1) + r1.xy;
  r0.y = r1.z * r1.z;
  r0.y = 2 * r0.y;
  r2.z = -1 + r0.y;
  r0.y = r2.z * r2.z;
  r0.y = -r0.y;
  r0.y = 1 + r0.y;
  r1.zw = r1.xy * r0.yy;
  r1.x = dot(r1.xy, r1.xy);
  r0.y = r1.x * r0.y;
  r0.y = 1.00000001e-007 + r0.y;
  r0.y = rsqrt(r0.y);
  r2.xy = r1.zw * r0.yy;
  r2.xy = r2.xy;
  r2.z = r2.z;
  r2.xyz = r2.xyz;
  r1.x = r0.w;
  r0.z = r0.z;
  r2.xyz = r2.xyz;
  r1.x = r1.x;
  r0.z = r0.z;
  r0.x = r0.x;
  r0.x = r0.x;
  r3.xyz = v1.xyw;
  r0.x = r0.x;
  r3.xyz = r3.xyz;
  r0.yw = r3.xy / r3.zz;
  r1.zw = -g_psScene.m_cameraCenterOffset.xy;
  r0.yw = r1.zw + r0.yw;
  r0.x = r0.x;
  r3.xyzw = g_psScene.m_projectionParam.xyzw;
  r0.yw = r3.xy * r0.yw;
  r1.z = -r3.w;
  r0.x = r1.z + r0.x;
  r3.z = r3.z / r0.x;
  r3.xy = r3.zz * r0.yw;
  r3.xy = r3.xy;
  r3.z = r3.z;
  r3.xyz = r3.xyz;
  r3.xyz = r3.xyz;
  r3.xyz = r3.xyz;
  r3.xyz = r3.xyz;
  r0.xyw = -r3.xyz;
  r0.xyw = g_psLight.m_lightParams[3].xyz + r0.xyw;
  r1.z = g_psMaterial.m_materials[7].x;
  r1.w = dot(r0.xyw, r0.xyw);
  r1.w = sqrt(r1.w);
  r1.z = max(r1.w, r1.z);
  r2.w = g_psLight.m_lightParams[6].x;
  r0.xyw = r0.xyw / r1.www;
  r1.z = r2.w + r1.z;
  r1.z = r1.z * r1.z;
  r1.w = 1 / r1.z;
  r1.z = g_psLight.m_lightParams[6].w * r1.z;
  r1.z = -r1.z;
  r1.z = r1.w + r1.z;
  r1.z = max(0, r1.z);
  r0.xyw = r0.xyw;
  r3.xyz = g_psLight.m_lightParams[4].xyz * r1.zzz;
  r3.xyz = g_psScene.m_exposure.zzz * r3.xyz;
  r0.xyw = r0.xyw;
  r3.xyz = r3.xyz;
  r2.xyz = r2.xyz;
  r0.xyw = r0.xyw;
  r3.xyz = r3.xyz;
  r1.x = r1.x;
  r0.z = r0.z;
  r2.xyz = r2.xyz;
  r0.xyw = r0.xyw;
  r3.xyz = r3.xyz;
  r1.x = r1.x;
  r0.z = r0.z;
  r0.xyw = r0.xyw;
  r2.xyz = r2.xyz;
  r0.x = dot(r0.xyw, r2.xyz);
  r1.x = r1.x;
  r1.y = 0.25;
  r0.y = g_MaterialTexture.Sample(g_samplerPoint_Clamp_s, r1.xy).w;
  r0.y = r0.y;
  r0.y = r0.y;
  r0.w = r0.x * r0.x;
  r0.w = -r0.w;
  r0.w = 1 + r0.w;
  r0.w = r0.w * r0.z;
  r0.x = r0.x + r0.w;
  r0.y = r0.z * r0.y;
  r0.x = max(r0.x, r0.y);
  r0.x = max(0, r0.x);
  r0.x = min(1, r0.x);
  r0.x = 1 * r0.x;
  r0.x = 1 * r0.x;
  r0.xyz = r0.xxx * r3.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = float3(1,1,1) * r0.xyz;
  r0.w = g_psLight.m_lightParams[8].y;
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = float3(1,1,1) * r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.w = 1;
  r0.xyz = r0.xyz;
  r0.xyzw = r0.xyzw;
  r0.xyzw = r0.xyzw;
  o0.xyzw = r0.xyzw;
  o1.xyzw = float4(0,0,0,1);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cPSScene
// {
//
//   struct PSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_psScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cPSLight
// {
//
//   struct PSLight
//   {
//       
//       float4 m_lightParams[11];      // Offset:    0
//
//   } g_psLight;                       // Offset:    0 Size:   176
//
// }
//
// cbuffer cPSMaterial
// {
//
//   struct PSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_psMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerPoint_Wrap               sampler      NA          NA    8        1
// g_samplerPoint_Clamp              sampler      NA          NA    9        1
// g_NormalTexture                   texture  float4          2d    0        1
// g_SpecularTexture                 texture  float4          2d    1        1
// g_DepthTexture                    texture  float4          2d    2        1
// g_MaterialTexture                 texture  float4          2d   10        1
// cPSScene                          cbuffer      NA          NA    2        1
// cPSLight                          cbuffer      NA          NA    3        1
// cPSMaterial                       cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[29], immediateIndexed
dcl_constantbuffer cb3[9], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 4

#line 208 "d:\work\master\git_clone\_intermediate\win64\GrModelShaders_dx11_win64\Release\SSLighting2_Point_NoSpec_NoShadow_ps.hlsl"
nop 

#line 411
nop 

#line 129
mov r0.xyz, v2.xywx  // NScreenToTextureCoordinate_screenToTextureCoordinate_inBackBufferSamplingPosition<0,1,3>
nop 
mov r0.xyz, r0.xyzx  // inBackBufferSamplingPosition<0,1,3>

#line 212
div r0.xy, r0.xyxx, r0.zzzz  // outTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 130
mov r0.xy, r0.xyxx  // NScreenToTextureCoordinate_screenToTextureCoordinate_outTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 138
mov r0.xy, r0.xyxx  // NGetGeometryParam_getGeometryParam_inTexcoord<0:NaN:Inf,1:NaN:Inf>
nop 
mov r0.xy, r0.xyxx  // inTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 242
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t0.xyzw, s8
mov r1.xyz, r1.xyzx  // encodeViewNormal<0:Inf,1:Inf,2:Inf>
sample_indexable(texture2d)(float,float,float,float) r0.zw, r0.xyxx, t1.xywz, s8  // specular<2:Inf>
mov r0.zw, r0.zzzw  // specular<3:Inf,2:Inf>
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s8
mov r0.x, r0.x  // outDepth<0:Inf>

#line 299
nop 
mov r1.xyz, r1.xyzx  // encodeNormal<0:Inf,1:Inf,2:Inf>

#line 132
mul r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
add r1.xy, r1.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // viewSpaceNormal<0:Inf,1:Inf>
mul r0.y, r1.z, r1.z
mul r0.y, r0.y, l(2.000000)
add r2.z, r0.y, l(-1.000000)  // viewSpaceNormal<2:NaN:Inf>
mul r0.y, r2.z, r2.z
mov r0.y, -r0.y
add r0.y, r0.y, l(1.000000)  // oneMinusZz<0:NaN:Inf>
mul r1.zw, r0.yyyy, r1.xxxy
dp2 r1.x, r1.xyxx, r1.xyxx
mul r0.y, r0.y, r1.x
add r0.y, r0.y, l(0.000000)
rsq r0.y, r0.y
mul r2.xy, r0.yyyy, r1.zwzz  // viewSpaceNormal<0:NaN:Inf,1:NaN:Inf>

#line 145
mov r2.xy, r2.xyxx  // DecodeViewSpaceNormal<0:NaN:Inf,1:NaN:Inf>
mov r2.z, r2.z  // DecodeViewSpaceNormal<2:NaN:Inf>

#line 299
mov r2.xyz, r2.xyzx  // outViewSpaceNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 307
mov r1.x, r0.w  // outMaterialIndex<0:Inf>
mov r0.z, r0.z  // outTranslucent<0:Inf>

#line 139
mov r2.xyz, r2.xyzx  // NGetGeometryParam_getGeometryParam_outViewSpaceNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.x, r1.x  // NGetGeometryParam_getGeometryParam_outMaterialIndex<0:Inf>
mov r0.z, r0.z  // NGetGeometryParam_getGeometryParam_outTranslucent<0:Inf>
mov r0.x, r0.x  // NGetGeometryParam_getGeometryParam_outDepth<0:Inf>
mov r0.x, r0.x  // NGetViewPos_getViewPos_inDepth<0:Inf>

#line 143
mov r3.xyz, v1.xywx  // NGetViewPos_getViewPos_inClipSpaceXY<0,1,3>
nop 
mov r0.x, r0.x  // inDepth<0:Inf>
mov r3.xyz, r3.xyzx  // inClipSpaceXY<0,1,3>

#line 365
nop 
div r0.yw, r3.xxxy, r3.zzzz
mov r1.zw, -cb2[28].xxxy
add r0.yw, r0.yyyw, r1.zzzw  // inScreenSpacePos<0:NaN:Inf,1:NaN:Inf>
mov r0.x, r0.x  // inDepth<0:Inf>
mov r3.xyzw, cb2[21].xyzw  // inProjectionParam<0,1,2,3>
mul r0.yw, r0.yyyw, r3.xxxy  // viewPos<0:NaN:Inf,1:NaN:Inf>
mov r1.z, -r3.w
add r0.x, r0.x, r1.z
div r3.z, r3.z, r0.x  // viewPos<2:NaN:Inf>

#line 374
mul r3.xy, r0.ywyy, r3.zzzz  // viewPos<0:NaN:Inf,1:NaN:Inf>
mov r3.xy, r3.xyxx  // ReconstructViewPos2<0:NaN:Inf,1:NaN:Inf>
mov r3.z, r3.z  // ReconstructViewPos2<2:NaN:Inf>

#line 365
mov r3.xyz, r3.xyzx  // outViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 144
mov r3.xyz, r3.xyzx  // NGetViewPos_getViewPos_outViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 148
mov r3.xyz, r3.xyzx  // NGetLightParam_getLightParam_inViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r3.xyz, r3.xyzx  // inViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 39
mov r0.xyw, -r3.xyxz
add r0.xyw, r0.xyxw, cb3[3].xyxz  // lightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.z, cb4[7].x  // innerRange<0>
dp3 r1.w, r0.xywx, r0.xywx
sqrt r1.w, r1.w  // lightDirLength<0:NaN:Inf>
max r1.z, r1.z, r1.w  // dist<0:Inf>
mov r2.w, cb3[6].x  // add_dist<0>
div r0.xyw, r0.xyxw, r1.wwww  // lightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 47
add r1.z, r1.z, r2.w  // dist<0:Inf>

#line 53
mul r1.z, r1.z, r1.z  // d<0:NaN:Inf>
div r1.w, l(1.000000), r1.z
mul r1.z, r1.z, cb3[6].w
mov r1.z, -r1.z
add r1.z, r1.z, r1.w
max r1.z, r1.z, l(0.000000)  // att<0:Inf:[-0f,1.#INFf]>

#line 84
mov r0.xyw, r0.xyxw  // outLightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r3.xyz, r1.zzzz, cb3[4].xyzx
mul r3.xyz, r3.xyzx, cb2[23].zzzz  // outLightColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 90
nop 

#line 149
mov r0.xyw, r0.xyxw  // NGetLightParam_getLightParam_outLightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.xyz, r3.xyzx  // NGetLightParam_getLightParam_outLightColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 155
nop 

#line 163
nop 
mov r2.xyz, r2.xyzx  // NLightCalculate_lightCalculate_inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyw, r0.xyxw  // NLightCalculate_lightCalculate_inLightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.xyz, r3.xyzx  // NLightCalculate_lightCalculate_inLightColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 178
mov r1.x, r1.x  // NLightCalculate_lightCalculate_inMaterialIndex<0:Inf>
mov r0.z, r0.z  // NLightCalculate_lightCalculate_inTranslucent<0:Inf>
nop 
mov r2.xyz, r2.xyzx  // inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyw, r0.xyxw  // inLightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.xyz, r3.xyzx  // inLightColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.x, r1.x  // inMaterialIndex<0:Inf>
mov r0.z, r0.z  // inTranslucent<0:Inf>

#line 818
mov r0.xyw, r0.xyxw  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyz, r2.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 823
dp3 r0.x, r0.xywx, r2.xyzx  // LN<0:NaN:Inf>

#line 844
mov r1.x, r1.x  // materialIndex<0:Inf>

#line 848
mov r1.y, l(0.250000)
sample_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t10.xwyz, s9
mov r0.y, r0.y  // material1<3:Inf>

#line 852
mov r0.y, r0.y  // TANSLUCENT<0:Inf>

#line 875
nop 

#line 878
mul r0.w, r0.x, r0.x
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
mul r0.w, r0.z, r0.w
add r0.x, r0.w, r0.x
mul r0.y, r0.y, r0.z
max r0.x, r0.y, r0.x
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)  // LN_trans<0:[0f,1f]>

#line 917
nop 
nop 

#line 930
mul r0.x, r0.x, l(1.000000)
mul r0.x, r0.x, l(1.000000)
mul r0.xyz, r3.xyzx, r0.xxxx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 934
mov r0.xyz, r0.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 182
mov r0.xyz, r0.xyzx  // NLightCalculate_lightCalculate_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 161
nop 

#line 183
mov r0.xyz, r0.xyzx  // NLightComposit_composit_inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 188
nop 
mov r0.xyz, r0.xyzx  // inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 269
mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov r0.w, cb3[8].y
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 188
mov r0.xyz, r0.xyzx  // NLightComposit_composit_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // NEnvSpecularComposit_envComposit_inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 195
nop 
mov r0.xyz, r0.xyzx  // inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 1188
mov r0.xyz, r0.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 195
mov r0.xyz, r0.xyzx  // NEnvSpecularComposit_envComposit_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
mov r0.xyz, r0.xyzx  // NWriteLightDiffuseAccumulationWithoutExposure_writeLightDiffuseAccumulation_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r0.xyz, r0.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 237
nop 
mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 269
mov r0.w, l(1.000000)  // EncodeAliasHDRColor<3: 1f>
mov r0.xyz, r0.xyzx  // EncodeAliasHDRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 237
mov r0.xyzw, r0.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 204
mov r0.xyzw, r0.xyzw  // NWriteLightDiffuseAccumulationWithoutExposure_writeLightDiffuseAccumulation_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
mov o0.xyzw, r0.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 92
mov o1.xyzw, l(0,0,0,1.000000)  // outSpecular<0: 0f,1: 0f,2: 0f,3: 1f>
ret 
// Approximately 149 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
