// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:31 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}

cbuffer VSBones : register(b6)
{

  struct
  {
    float4x3 m_boneMatrices[32];
  } g_vsBone : packoffset(c0);


  struct
  {
    float4x3 m_boneMatrices[32];
  } g_vsPrevBone : packoffset(c96);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : NORMAL0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  uint4 v4 : BLENDINDICES0,
  float4 v5 : BLENDWEIGHT0,
  float4 v6 : TEXCOORD0,
  float4 v7 : TEXCOORD1,
  float4 v8 : TEXCOORD2,
  float2 v9 : TEXCOORD3,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR0,
  out float2 o2 : TEXCOORD0,
  out float2 p2 : TEXCOORD2,
  out float4 o3 : TEXCOORD1,
  out float4 o4 : TEXCOORD5,
  out float4 o5 : TEXCOORD6,
  out float4 o6 : TEXCOORD7,
  out float4 o7 : TEXCOORD8,
  out float2 o8 : TEXCOORD9)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[3];
  r0.xyz = v2.xyz;
  r1.xyz = v0.xyz;
  r2.xyz = v1.xyz;
  r3.xyzw = v3.xyzw;
  r4.xyzw = v5.xyzw;
  r1.xyz = r1.xyz;
  r2.xyz = r2.xyz;
  r3.xyzw = r3.xyzw;
  r4.xyzw = r4.xyzw;
  r1.xyz = r1.xyz;
  r0.w = cmp(g_vsObject.m_useWeightCount.x != 0.000000);
  if (r0.w != 0) {
    r4.xyzw = r4.xyzw;
    r0.w = (int)v4.x * 3;
    r5.xyzw = g_vsBone.m_boneMatrices[v4.x]._m00_m10_m20_m30 * r4.xxxx;
    r6.xyzw = g_vsBone.m_boneMatrices[v4.x]._m01_m11_m21_m31 * r4.xxxx;
    r7.xyzw = g_vsBone.m_boneMatrices[v4.x]._m02_m12_m22_m32 * r4.xxxx;
    r0.w = (int)v4.y * 3;
    r8.xyzw = g_vsBone.m_boneMatrices[v4.x]._m00_m10_m20_m30 * r4.yyyy;
    r9.xyzw = g_vsBone.m_boneMatrices[v4.x]._m01_m11_m21_m31 * r4.yyyy;
    r10.xyzw = g_vsBone.m_boneMatrices[v4.x]._m02_m12_m22_m32 * r4.yyyy;
    r5.xyzw = r8.xyzw + r5.xyzw;
    r6.xyzw = r9.xyzw + r6.xyzw;
    r7.xyzw = r10.xyzw + r7.xyzw;
    r0.w = (int)v4.z * 3;
    r8.xyzw = g_vsBone.m_boneMatrices[v4.x]._m00_m10_m20_m30 * r4.zzzz;
    r9.xyzw = g_vsBone.m_boneMatrices[v4.x]._m01_m11_m21_m31 * r4.zzzz;
    r10.xyzw = g_vsBone.m_boneMatrices[v4.x]._m02_m12_m22_m32 * r4.zzzz;
    r5.xyzw = r8.xyzw + r5.xyzw;
    r6.xyzw = r9.xyzw + r6.xyzw;
    r7.xyzw = r10.xyzw + r7.xyzw;
    r0.w = (int)v4.w * 3;
    r8.xyzw = g_vsBone.m_boneMatrices[v4.x]._m00_m10_m20_m30 * r4.wwww;
    r9.xyzw = g_vsBone.m_boneMatrices[v4.x]._m01_m11_m21_m31 * r4.wwww;
    r4.xyzw = g_vsBone.m_boneMatrices[v4.x]._m02_m12_m22_m32 * r4.wwww;
    r5.xyzw = r8.xyzw + r5.xyzw;
    r6.xyzw = r9.xyzw + r6.xyzw;
    r4.xyzw = r7.xyzw + r4.xyzw;
    r1.x = dot(v0.xyzw, r5.xyzw);
    r1.y = dot(v0.xyzw, r6.xyzw);
    r1.z = dot(v0.xyzw, r4.xyzw);
    r1.xyz = r1.xyz;
    r7.w = 0;
    r7.xyz = v1.xyz;
    r2.x = dot(r7.xyzw, r5.xyzw);
    r2.y = dot(r7.xyzw, r6.xyzw);
    r2.z = dot(r7.xyzw, r4.xyzw);
    r2.xyz = r2.xyz;
    r7.w = 0;
    r7.xyz = v3.xyz;
    r5.x = dot(r7.xyzw, r5.xyzw);
    r5.y = dot(r7.xyzw, r6.xyzw);
    r5.z = dot(r7.xyzw, r4.xyzw);
    r5.xyz = r5.xyz;
    r1.xyz = r1.xyz;
    r2.xyz = r2.xyz;
    r5.xyz = r5.xyz;
  } else {
    r5.xyz = r3.xyz;
  }
  r1.w = v0.w;
  r4.x = dot(r1.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r4.y = dot(r1.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r4.z = dot(r1.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r4.w = dot(r1.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r6.x = dot(r4.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r6.y = dot(r4.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r6.z = dot(r4.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r6.w = dot(r4.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r6.xyzw = r6.xyzw;
  r3.x = dot(r1.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r3.y = dot(r1.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r3.z = dot(r1.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r3.xyz = r3.xyz;
  r3.xyz = r3.xyz;
  r6.xyzw = r6.xyzw;
  r3.xyz = r3.xyz;
  r1.x = dot(v0.xyzw, g_vsScene.m_shadowProjection._m00_m10_m20_m30);
  r1.y = dot(v0.xyzw, g_vsScene.m_shadowProjection._m01_m11_m21_m31);
  r1.z = dot(v0.xyzw, g_vsScene.m_shadowProjection._m02_m12_m22_m32);
  r1.w = dot(v0.xyzw, g_vsScene.m_shadowProjection._m03_m13_m23_m33);
  r4.x = dot(r1.xyzw, g_vsScene.m_shadowProjection2._m00_m10_m20_m30);
  r4.y = dot(r1.xyzw, g_vsScene.m_shadowProjection2._m01_m11_m21_m31);
  r4.z = dot(r1.xyzw, g_vsScene.m_shadowProjection2._m03_m13_m23_m33);
  r4.xyz = r4.xyz;
  r1.xyz = r6.xyw;
  r2.w = 0;
  r7.x = dot(r2.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r7.y = dot(r2.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r7.z = dot(r2.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r0.w = dot(r7.xyz, r7.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r7.xyz * r0.www;
  r5.w = 0;
  r7.x = dot(r5.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r7.y = dot(r5.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r7.z = dot(r5.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r0.w = dot(r7.xyz, r7.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r7.xyz * r0.www;
  r7.xyz = r5.zxy * r2.yzx;
  r8.xyz = r5.yzx * r2.zxy;
  r8.xyz = -r8.xyz;
  r7.xyz = r8.xyz + r7.xyz;
  r0.w = dot(r7.xyz, r7.xyz);
  r0.w = rsqrt(r0.w);
  r7.xyz = r7.xyz * r0.www;
  r7.xyz = r7.xyz * r3.www;
  r3.xyz = r3.xyz;
  r1.xyz = r1.xyz;
  r4.xyz = r4.xyz;
  r6.xyzw = r6.xyzw;
  r3.xyz = r3.xyz;
  r3.xyz = r3.xyz;
  r8.xyz = -g_vsMaterial.m_materials[2].xyz;
  r3.xyz = r8.xyz + r3.xyz;
  r0.w = 3.1415925 * g_vsMaterial.m_materials[3].w;
  r0.w = r0.w / 180;
  r8.x = sin(r0.w);
  r8.y = cos(r0.w);
  r0.w = r8.x;
  r8.z = -r0.w;
  r8.w = 0;
  r9.x = dot(r3.xyz, r8.yzw);
  r9.y = dot(r3.xyz, r8.xyw);
  r9.z = dot(r3.xyz, float3(0,0,1));
  r0.w = 3.1415925 * g_vsMaterial.m_materials[3].z;
  r0.w = r0.w / 180;
  r3.z = sin(r0.w);
  r3.y = cos(r0.w);
  r0.w = r3.z;
  r3.x = -r0.w;
  r3.w = 0;
  r8.x = dot(r9.xzy, r3.yzw);
  r8.y = dot(r9.xzy, float3(0,0,1));
  r8.z = dot(r9.xzy, r3.xyw);
  r8.xyz = r8.xyz;
  r8.xyz = r8.xyz;
  r3.xy = v6.xy;
  r3.xy = r3.xy;
  r3.xy = r3.xy;
  r3.xy = r3.xy;
  o0.xyzw = r6.xyzw;
  o2.xy = r3.xy;
  x0[0].xyz = r5.xyz;
  x0[1].xyz = r7.xyz;
  x0[2].xyz = r2.xyz;
  o7.xy = r1.xy;
  o7.zw = r4.xy;
  o8.x = r1.z;
  o8.y = r4.z;
  o3.xyz = r8.xyz;
  o1.xyz = r0.xyz;
  o1.w = g_vsObject.m_useWeightCount.w;
  p2.xy = v7.xy;
  r0.xyz = x0[0].xyz;
  r1.xyz = x0[1].xyz;
  r2.xyz = x0[2].xyz;
  o4.xyz = r0.xyz;
  o5.xyz = r1.xyz;
  o6.xyz = r2.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
// cbuffer VSBones
// {
//
//   struct VSBone
//   {
//       
//       float4x3 m_boneMatrices[32];   // Offset:    0
//
//   } g_vsBone;                        // Offset:    0 Size:  1536
//   
//   struct VSBone
//   {
//       
//       float4x3 m_boneMatrices[32];   // Offset: 1536
//
//   } g_vsPrevBone;                    // Offset: 1536 Size:  1536 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
// VSBones                           cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BLENDINDICES             0   xyzw        4     NONE    uint   xyzw
// BLENDWEIGHT              0   xyzw        5     NONE   float   xyzw
// TEXCOORD                 0   xy          6     NONE   float   xy  
// TEXCOORD                 1   xy          7     NONE   float   xy  
// TEXCOORD                 2   xy          8     NONE   float       
// TEXCOORD                 3   xy          9     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 2     zw        2     NONE   float     zw
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 5   xyz         4     NONE   float   xyz 
// TEXCOORD                 6   xyz         5     NONE   float   xyz 
// TEXCOORD                 7   xyz         6     NONE   float   xyz 
// TEXCOORD                 8   xyzw        7     NONE   float   xyzw
// TEXCOORD                 9   xy          8     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[20], immediateIndexed
dcl_constantbuffer cb5[9], immediateIndexed
dcl_constantbuffer cb4[4], immediateIndexed
dcl_constantbuffer cb6[96], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyz
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xy
dcl_input v7.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o2.zw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyzw
dcl_output o8.xy
dcl_temps 11
dcl_indexableTemp x0[3], 4

#line 80 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\tpp3ddf_CurtainShadowPic_nc_vs.hlsl"
mov r0.xyz, v2.xyzx  // inColor<0,1,2>

#line 99
mov r1.xyz, v0.xyzx  // NTransformInput_transform_inPosition<0,1,2>
mov r2.xyz, v1.xyzx  // NTransformInput_transform_inNormal<0,1,2>
mov r3.xyzw, v3.xyzw  // NTransformInput_transform_inTangent<0,1,2,3>
mov r4.xyzw, v5.xyzw  // NTransformInput_transform_inBlendWeights<0,1,2,3>
nop 
mov r1.xyz, r1.xyzx  // inPosition<0,1,2>
mov r2.xyz, r2.xyzx  // inNormal<0,1,2>
mov r3.xyzw, r3.xyzw  // inTangent<0,1,2,3>
mov r4.xyzw, r4.xyzw  // inBlendWeights<0,1,2,3>

#line 77
mov r1.xyz, r1.xyzx  // pos<0,1,2>

#line 83
ne r0.w, cb5[8].x, l(0.000000)
if_nz r0.w
  nop 
  mov r4.xyzw, r4.xyzw  // blendWeights<0,1,2,3>

#line 22
  imul null, r0.w, v4.x, l(3)
  mul r5.xyzw, r4.xxxx, cb6[r0.w + 0].xyzw  // blendMatrix<0:Inf,3:Inf,6:Inf,9:Inf>
  mul r6.xyzw, r4.xxxx, cb6[r0.w + 1].xyzw  // blendMatrix<1:Inf,4:Inf,7:Inf,10:Inf>
  mul r7.xyzw, r4.xxxx, cb6[r0.w + 2].xyzw  // blendMatrix<2:Inf,5:Inf,8:Inf,11:Inf>
  imul null, r0.w, v4.y, l(3)
  mul r8.xyzw, r4.yyyy, cb6[r0.w + 0].xyzw
  mul r9.xyzw, r4.yyyy, cb6[r0.w + 1].xyzw
  mul r10.xyzw, r4.yyyy, cb6[r0.w + 2].xyzw
  add r5.xyzw, r5.xyzw, r8.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r6.xyzw, r6.xyzw, r9.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r7.xyzw, r7.xyzw, r10.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  imul null, r0.w, v4.z, l(3)
  mul r8.xyzw, r4.zzzz, cb6[r0.w + 0].xyzw
  mul r9.xyzw, r4.zzzz, cb6[r0.w + 1].xyzw
  mul r10.xyzw, r4.zzzz, cb6[r0.w + 2].xyzw
  add r5.xyzw, r5.xyzw, r8.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r6.xyzw, r6.xyzw, r9.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r7.xyzw, r7.xyzw, r10.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  imul null, r0.w, v4.w, l(3)
  mul r8.xyzw, r4.wwww, cb6[r0.w + 0].xyzw
  mul r9.xyzw, r4.wwww, cb6[r0.w + 1].xyzw
  mul r4.xyzw, r4.wwww, cb6[r0.w + 2].xyzw
  add r5.xyzw, r5.xyzw, r8.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r6.xyzw, r6.xyzw, r9.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r4.xyzw, r4.xyzw, r7.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  nop 

#line 416
  dp4 r1.x, v0.xyzw, r5.xyzw  // ApplyMatrixT<0:NaN:Inf>
  dp4 r1.y, v0.xyzw, r6.xyzw  // ApplyMatrixT<1:NaN:Inf>
  dp4 r1.z, v0.xyzw, r4.xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 27
  mov r1.xyz, r1.xyzx  // position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  nop 

#line 420
  mov r7.w, l(0)
  mov r7.xyz, v1.xyzx
  dp4 r2.x, r7.xyzw, r5.xyzw  // ApplyMatrixT<0:NaN:Inf>
  dp4 r2.y, r7.xyzw, r6.xyzw  // ApplyMatrixT<1:NaN:Inf>
  dp4 r2.z, r7.xyzw, r4.xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 28
  mov r2.xyz, r2.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  nop 

#line 420
  mov r7.w, l(0)
  mov r7.xyz, v3.xyzx
  dp4 r5.x, r7.xyzw, r5.xyzw  // ApplyMatrixT<0:NaN:Inf>
  dp4 r5.y, r7.xyzw, r6.xyzw  // ApplyMatrixT<1:NaN:Inf>
  dp4 r5.z, r7.xyzw, r4.xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 29
  mov r5.xyz, r5.xyzx  // tangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 85
  mov r1.xyz, r1.xyzx  // pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r2.xyz, r2.xyzx  // inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r5.xyz, r5.xyzx  // inTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
else 
  mov r5.xyz, r3.xyzx  // inTangent<0,1,2>
endif 

#line 98
nop 

#line 145
nop 

#line 408
mov r1.w, v0.w
dp4 r4.x, r1.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r4.y, r1.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r4.z, r1.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r4.w, r1.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 146
nop 

#line 408
dp4 r6.x, r4.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r6.y, r4.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r6.z, r4.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r6.w, r4.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 146
mov r6.xyzw, r6.xyzw  // hPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 

#line 408
dp4 r3.x, r1.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r1.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r1.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 147
mov r3.xyz, r3.xyzx  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.xyz, r3.xyzx  // TransformPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 98
mov r6.xyzw, r6.xyzw  // outProjectionPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r3.xyz, r3.xyzx  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 408
dp4 r1.x, v0.xyzw, cb2[12].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r1.y, v0.xyzw, cb2[13].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r1.z, v0.xyzw, cb2[14].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r1.w, v0.xyzw, cb2[15].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 100
nop 

#line 408
dp4 r4.x, r1.xyzw, cb2[16].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r4.y, r1.xyzw, cb2[17].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r4.z, r1.xyzw, cb2[19].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 100
mov r4.xyz, r4.xyzx  // outPrevScreenPos<0:NaN:Inf,1:NaN:Inf,3:NaN:Inf>
mov r1.xyz, r6.xywx  // outScreenPos<0:NaN:Inf,1:NaN:Inf,3:NaN:Inf>

#line 105
nop 
nop 

#line 113
nop 

#line 412
mov r2.w, l(0)
dp4 r7.x, r2.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r7.y, r2.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r7.z, r2.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 113
dp3 r0.w, r7.xyzx, r7.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r7.xyzx  // outNormalOnView<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 412
mov r5.w, l(0)
dp4 r7.x, r5.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r7.y, r5.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r7.z, r5.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 114
dp3 r0.w, r7.xyzx, r7.xyzx
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, r7.xyzx  // outTangentOnView<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r7.xyz, r2.yzxy, r5.zxyz
mul r8.xyz, r2.zxyz, r5.yzxy
mov r8.xyz, -r8.xyzx
add r7.xyz, r7.xyzx, r8.xyzx
dp3 r0.w, r7.xyzx, r7.xyzx
rsq r0.w, r0.w
mul r7.xyz, r0.wwww, r7.xyzx
mul r7.xyz, r3.wwww, r7.xyzx  // outBinormalOnView<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 105
mov r3.xyz, r3.xyzx  // NTransformInput_transform_outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NTransformInput_transform_outScreenPos<0:NaN:Inf,1:NaN:Inf,3:NaN:Inf>
mov r4.xyz, r4.xyzx  // NTransformInput_transform_outPrevScreenPos<0:NaN:Inf,1:NaN:Inf,3:NaN:Inf>
mov r6.xyzw, r6.xyzw  // NTransformInput_transform_outProjectionPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 137
mov r3.xyz, r3.xyzx  // NGetCylindricalUV_getCylindricalUV_inPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r3.xyz, r3.xyzx  // inPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 29
mov r8.xyz, -cb4[2].xyzx
add r3.xyz, r3.xyzx, r8.xyzx  // outCylindricalDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 34
mul r0.w, cb4[3].w, l(3.141593)
div r0.w, r0.w, l(180.000000)
sincos r8.x, null, r0.w  // sinr<0:[-1f,1f]>
sincos null, r8.y, r0.w  // cosr<0:[-1f,1f]>
mov r0.w, r8.x  // sinr<0:[-1f,1f]>
mov r8.z, -r0.w

#line 39
nop 

#line 424
mov r8.w, l(0)
dp3 r9.x, r3.xyzx, r8.yzwy  // ApplyMatrixT<0:NaN:Inf>
dp3 r9.y, r3.xyzx, r8.xywx  // ApplyMatrixT<1:NaN:Inf>
dp3 r9.z, r3.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)  // ApplyMatrixT<2:NaN:Inf>

#line 41
mul r0.w, cb4[3].z, l(3.141593)
div r0.w, r0.w, l(180.000000)
sincos r3.z, null, r0.w  // sinr<0:[-1f,1f]>
sincos null, r3.y, r0.w  // cosr<0:[-1f,1f]>
mov r0.w, r3.z  // sinr<0:[-1f,1f]>
mov r3.x, -r0.w

#line 46
nop 

#line 424
mov r3.w, l(0)
dp3 r8.x, r9.xzyx, r3.yzwy  // ApplyMatrixT<0:NaN:Inf>
dp3 r8.y, r9.xzyx, l(0.000000, 0.000000, 1.000000, 0.000000)  // ApplyMatrixT<1:NaN:Inf>
dp3 r8.z, r9.xzyx, r3.xywx  // ApplyMatrixT<2:NaN:Inf>

#line 46
mov r8.xyz, r8.xyzx  // outCylindricalDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 138
mov r8.xyz, r8.xyzx  // NGetCylindricalUV_getCylindricalUV_outCylindricalDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 110
mov r3.xy, v6.xyxx  // NAdjustUVBase_adjustUVBase_inUV<0,1>
nop 
mov r3.xy, r3.xyxx  // inUV<0,1>

#line 172
mov r3.xy, r3.xyxx  // outUV<0,1>

#line 111
mov r3.xy, r3.xyxx  // NAdjustUVBase_adjustUVBase_outUV<0,1>

#line 107
mov o0.xyzw, r6.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 111
mov o2.xy, r3.xyxx  // outBaseUV<0,1>

#line 121
mov x0[0].xyz, r5.xyzx  // outTangentToView<0,1,2>
mov x0[1].xyz, r7.xyzx  // outTangentToView<3,4,5>
mov x0[2].xyz, r2.xyzx  // outTangentToView<6,7,8>

#line 125
mov o7.xy, r1.xyxx  // outScreenPos<0:NaN:Inf,1:NaN:Inf>
mov o7.zw, r4.xxxy  // outScreenPos<2:NaN:Inf,3:NaN:Inf>
mov o8.x, r1.z  // outScreenPosW<0:NaN:Inf>
mov o8.y, r4.z  // outScreenPosW<1:NaN:Inf>

#line 138
mov o3.xyz, r8.xyzx  // outCylindrcalDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 113
mov o1.xyz, r0.xyzx  // outColor<0,1,2>
mov o1.w, cb5[8].w  // outColor<3>

#line 141
mov o2.zw, v7.xxxy  // outMaskUV<0,1>

#line 58
mov r0.xyz, x0[0].xyzx  // outTangentToView<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, x0[1].xyzx  // outTangentToView<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
mov r2.xyz, x0[2].xyzx  // outTangentToView<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
mov o4.xyz, r0.xyzx  // outTangentToView<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o5.xyz, r1.xyzx  // outTangentToView<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
mov o6.xyz, r2.xyzx  // outTangentToView<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
ret 
// Approximately 181 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(87,14-15): warning X3578: Output value 'o3' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(88,14-15): warning X3578: Output value 'o4' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(89,14-15): warning X3578: Output value 'o5' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(90,14-15): warning X3578: Output value 'o6' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
