// HUD: Target icons numbers and part of the gun info

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSLight : register(b3)
{

  struct
  {
    float4 m_lightParams[11];
  } g_vsLight : packoffset(c0);

}

cbuffer cVSWork : register(b7)
{

  struct
  {
    float4x4 m_viewInverse;
    float4x4 m_matrix[8];
  } g_vsWork : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : POSITION0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  out float2 o0 : TEXCOORD0,
  out float4 o1 : COLOR0,
  out float4 o2 : COLOR1,
  out float4 o3 : SV_Position0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = v1.xyzw;
  r0.xyzw = r0.xyzw;
  r1.xy = v2.xy;
  r0.xyzw = r0.xyzw;
  r1.xy = r1.xy;
  r2.xyzw = g_vsLight.m_lightParams[1].xyzw;
  r2.xyzw = r2.xyzw;
  r3.xyzw = g_vsLight.m_lightParams[2].xyzw;
  r3.xyzw = r3.xyzw;
  r4.xyz = g_vsObject.m_localParam[0].xyz;
  r4.xyz = r4.xyz;
  r5.xyz = g_vsObject.m_localParam[1].xyz;
  r5.xyz = r5.xyz;
  r6.w = 1;
  r6.xyz = v0.xyz;
  r7.x = dot(r6.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r7.y = dot(r6.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r7.z = dot(r6.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r7.w = dot(r6.xyzw, g_vsObject.m_world._m03_m13_m23_m33);
  r6.x = dot(r7.xyzw, g_vsWork.m_matrix[0]._m00_m10_m20_m30);
  r6.y = dot(r7.xyzw, g_vsWork.m_matrix[0]._m01_m11_m21_m31);
  r6.z = dot(r7.xyzw, g_vsWork.m_matrix[0]._m02_m12_m22_m32);
  r6.w = dot(r7.xyzw, g_vsWork.m_matrix[0]._m03_m13_m23_m33);
  r6.xyzw = r6.xyzw;
  r4.xyz = r6.xyz * r4.xyz;
  r6.xyz = r4.xyz + r5.xyz;
  r0.xyzw = r2.xyzw * r0.xyzw;
  r3.xyzw = r3.xyzw;
  r1.xy = r1.xy;
  r6.xyz = r6.xyz;
  r6.w = r6.w;
  r0.xyzw = r0.xyzw;
  r3.xyzw = r3.xyzw;
  r1.xy = r1.xy;
  o3.xyzw = r6.xyzw;
  o1.xyzw = r0.xyzw;
  o2.xyzw = r3.xyzw;
  o0.xy = r1.xy;
  
  float4 stereo = StereoParams.Load(0);
  o3.x += stereo.x * 0.5;
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.25 on Tue Jan 19 09:18:03 2016
//
//
// Buffer Definitions: 
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSLight
// {
//
//   struct VSLight
//   {
//       
//       float4 m_lightParams[11];      // Offset:    0
//
//   } g_vsLight;                       // Offset:    0 Size:   176
//
// }
//
// cbuffer cVSWork
// {
//
//   struct VSWork
//   {
//       
//       float4x4 m_viewInverse;        // Offset:    0
//       float4x4 m_matrix[8];          // Offset:   64
//
//   } g_vsWork;                        // Offset:    0 Size:   576
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSLight                          cbuffer      NA          NA    3        1
// cVSObject                         cbuffer      NA          NA    5        1
// cVSWork                           cbuffer      NA          NA    7        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// SV_Position              0   xyzw        3      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb5[11], immediateIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_constantbuffer cb7[8], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_output o0.xy
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output_siv o3.xyzw, position
dcl_temps 8

#line 75 "d:\work\master\git_clone\_intermediate\win64\GrSystemShaders_dx11_win64\Release\Draw2D_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inColor<0,1,2,3>

#line 79
mov r0.xyzw, r0.xyzw  // NTransformInput_transform_inColor<0,1,2,3>
mov r1.xy, v2.xyxx  // NTransformInput_transform_inUV<0,1>
nop 
mov r0.xyzw, r0.xyzw  // inColor<0,1,2,3>
mov r1.xy, r1.xyxx  // inUV<0,1>

#line 37
nop 

#line 16
mov r2.xyzw, cb3[1].xyzw  // GetBaseColor<0,1,2,3>

#line 37
mov r2.xyzw, r2.xyzw  // baseColor<0,1,2,3>
nop 
mov r3.xyzw, cb3[2].xyzw  // GetTextureMask<0,1,2,3>
mov r3.xyzw, r3.xyzw  // textureMask<0,1,2,3>
nop 

#line 53
mov r4.xyz, cb5[9].xyzx  // GetViewmapScale<0,1,2>

#line 39
mov r4.xyz, r4.xyzx  // viewMapScale<0,1,2>
nop 

#line 58
mov r5.xyz, cb5[10].xyzx  // GetViewmapOffset<0,1,2>

#line 40
mov r5.xyz, r5.xyzx  // viewMapOffset<0,1,2>

#line 43
nop 
mov r6.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r6.xyz, v0.xyzx
dp4 r7.x, r6.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r7.y, r6.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r7.z, r6.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r7.w, r6.xyzw, cb5[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 45
nop 

#line 408
dp4 r6.x, r7.xyzw, cb7[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r6.y, r7.xyzw, cb7[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r6.z, r7.xyzw, cb7[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r6.w, r7.xyzw, cb7[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 45
mov r6.xyzw, r6.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mul r4.xyz, r4.xyzx, r6.xyzx
add r6.xyz, r5.xyzx, r4.xyzx  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r0.xyzw, r0.xyzw, r2.xyzw  // outColor<0:Inf,1:Inf,2:Inf,3:Inf>
mov r3.xyzw, r3.xyzw  // outMask<0,1,2,3>
mov r1.xy, r1.xyxx  // outUV<0,1>

#line 81
mov r6.xyz, r6.xyzx  // NTransformInput_transform_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r6.w, r6.w  // NTransformInput_transform_outPosition<3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // NTransformInput_transform_outColor<0:Inf,1:Inf,2:Inf,3:Inf>
mov r3.xyzw, r3.xyzw  // NTransformInput_transform_outMask<0,1,2,3>
mov r1.xy, r1.xyxx  // NTransformInput_transform_outUV<0,1>
mov o3.xyzw, r6.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xyzw, r0.xyzw  // outColor<0:Inf,1:Inf,2:Inf,3:Inf>
mov o2.xyzw, r3.xyzw  // outMask<0,1,2,3>
mov o0.xy, r1.xyxx  // outUV<0,1>

#line 64
ret 
// Approximately 46 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
