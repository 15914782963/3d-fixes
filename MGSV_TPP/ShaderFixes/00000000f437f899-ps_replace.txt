// MGO - light on character select
// ---- Created with 3Dmigoto v1.2.35 on Tue Apr 26 06:53:14 2016

cbuffer cPSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_psScene : packoffset(c0);

}

cbuffer cPSLight : register(b3)
{

  struct
  {
    float4 m_lightParams[11];
  } g_psLight : packoffset(c0);

}

cbuffer cPSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_psMaterial : packoffset(c0);

}

SamplerState g_samplerPoint_Wrap_s : register(s8);
SamplerState g_samplerPoint_Clamp_s : register(s9);
SamplerState g_samplerLinear_Clamp_s : register(s11);
SamplerComparisonState g_samplerComparisonLess_Linear_Clmap_s : register(s15);
Texture2D<float4> g_NormalTexture : register(t0);
Texture2D<float4> g_SpecularTexture : register(t1);
Texture2D<float4> g_DepthTexture : register(t2);
Texture2D<float4> g_ShadowTexture : register(t3);
Texture3D<float4> g_lut2 : register(t8);
Texture2D<float4> g_lut1 : register(t9);
Texture2D<float4> g_MaterialTexture : register(t10);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = float4(-0.5,-0.5,-0.5,-0.5) + v0.xyxy;
  r1.xyz = v2.xyw;
  r1.xy = r1.xy / r1.zz;
  r2.xyz = g_NormalTexture.Sample(g_samplerPoint_Wrap_s, r1.xy).xyz;
  r3.xyzw = g_SpecularTexture.Sample(g_samplerPoint_Wrap_s, r1.xy).yxzw;
  r1.x = g_DepthTexture.Sample(g_samplerPoint_Wrap_s, r1.xy).x;
  r1.yz = float2(2,2) * r2.xy;
  r1.yz = float2(-1,-1) + r1.yz;
  r1.w = r2.z * r2.z;
  r1.w = 2 * r1.w;
  r2.z = -1 + r1.w;
  r1.w = r2.z * r2.z;
  r1.w = -r1.w;
  r1.w = 1 + r1.w;
  r4.xy = r1.yz * r1.ww;
  r1.y = dot(r1.yz, r1.yz);
  r1.y = r1.w * r1.y;
  r1.y = 1.00000001e-007 + r1.y;
  r1.y = rsqrt(r1.y);
  r2.xy = r4.xy * r1.yy;
  r4.y = r3.y;
  r1.yzw = v1.xyw;
  r1.yz = r1.yz / r1.ww;
  r5.xy = -g_psScene.m_cameraCenterOffset.xy;
  r1.yz = r5.xy + r1.yz;
  r5.xyzw = g_psScene.m_projectionParam.xyzw;
  r1.yz = r5.xy * r1.yz;
  r1.w = -r5.w;
  r1.x = r1.x + r1.w;
  r5.z = r5.z / r1.x;
  r6.z = r5.z;
  r5.xy = r6.zz * r1.yz;

float4 stereo = StereoParams.Load(0);

// Adjustment for specular highlights:
float3 spec = float3(r5.xy, r6.z);
spec.x -= stereo.x * spec.z / g_psScene.m_projection._m00;

// Fix shadow placement:
r5.x -= stereo.x * (r6.z - stereo.y) / g_psScene.m_projection._m00;


  r6.xy = r5.xy;
  r5.w = 1;
  r1.x = dot(r6.xyz, r6.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = spec.xyz * r1.xxx;

  r6.xyz = -r6.xyz;
  r6.xyz = g_psLight.m_lightParams[3].xyz + r6.xyz;
  r1.w = g_psMaterial.m_materials[7].x;
  r2.w = dot(r6.xyz, r6.xyz);
  r4.w = rsqrt(r2.w);
  r6.w = r4.w * r2.w;
  r1.w = max(r6.w, r1.w);
  r6.xyz = r6.xyz * r4.www;
  r6.w = g_psMaterial.m_materials[7].w;
  r2.w = r2.w * r2.w;
  r2.w = r2.w * r2.w;
  r2.w = r2.w * r2.w;
  r2.w = min(3.40282347e+038, r2.w);
  r4.w = r4.w * r4.w;
  r2.w = g_psLight.m_lightParams[6].z * r2.w;
  r2.w = -r2.w;
  r2.w = 1 + r2.w;
  r2.w = r4.w * r2.w;
  r2.w = min(r6.w, r2.w);
  r2.w = max(0, r2.w);
  r7.xyz = g_psLight.m_lightParams[7].xyz;
  r8.xyz = g_psLight.m_lightParams[5].xyz;
  r9.xyz = -r6.xyz;
  r4.w = dot(r8.xyz, r9.xyz);
  r6.w = -r7.x;
  r4.w = r6.w + r4.w;
  r4.w = r4.w * r7.y;
  r4.w = max(0, r4.w);
  r4.w = min(1, r4.w);
  r4.w = log2(r4.w);
  r4.w = r7.z * r4.w;
  r7.xyz = exp2(r4.www);
  r9.xyz = g_psLight.m_lightParams[4].xyz * r2.www;
  r7.xyz = r9.xyz * r7.xyz;
  r7.xyz = g_psScene.m_exposure.zzz * r7.xyz;
  r2.w = g_psLight.m_lightParams[4].w;
  r2.w = 1 * r2.w;
  r1.w = r2.w / r1.w;
  r1.w = 0.899999976 * r1.w;
  r1.w = max(0, r1.w);
  r7.w = min(1, r1.w);
  r9.x = dot(r5.xyzw, g_psScene.m_shadowProjection._m00_m10_m20_m30);
  r9.y = dot(r5.xyzw, g_psScene.m_shadowProjection._m01_m11_m21_m31);
  r9.z = dot(r5.xyzw, g_psScene.m_shadowProjection._m02_m12_m22_m32);
  r9.w = dot(r5.xyzw, g_psScene.m_shadowProjection._m03_m13_m23_m33);
  r1.w = g_psMaterial.m_materials[7].y;
  r2.w = g_psMaterial.m_materials[7].z;
  r1.w = -r1.w;
  r1.w = r9.w + r1.w;
  r1.w = r1.w * r2.w;
  r1.w = max(0, r1.w);
  r1.w = min(1, r1.w);
  r5.xy = g_psMaterial.m_materials[6].xy;
  r10.xyz = -r6.xyz;
  r2.w = dot(r8.xyz, r10.xyz);
  r4.w = -r5.x;
  r2.w = r4.w + r2.w;
  r2.w = r2.w * r5.y;
  r2.w = max(0, r2.w);
  r2.w = min(1, r2.w);
  r2.w = r2.w * r2.w;
  r0.xyzw = r0.xyzw / float4(2,2,2,2);
  r0.xyzw = frac(r0.xyzw);
  r0.xyzw = cmp(r0.xyzw >= float4(0.300000012,0.300000012,0.300000012,0.300000012));
  r0.xyzw = r0.xyzw ? float4(1,1,1,1) : float4(0,0,0,0);
  r0.xyzw = float4(2,2,2,2) * r0.xyzw;
  r0.xyzw = float4(-1,-1,-1,-1) + r0.xyzw;
  r0.xyzw = float4(0.125,0.125,0.125,0.125) * r0.xyzw;
  r0.xyzw = float4(0.5,0.5,-0.5,-0.5) + r0.xyzw;
  r5.xyzw = r9.wwww / g_psScene.m_shadowMapResolutions.yyyy;
  r0.xyzw = r5.xyzw * r0.xyzw;
  r5.xy = r9.xy + r0.xy;
  r5.zw = r9.zw;
  r8.xyz = r5.xyz / r5.www;
  r4.w = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r8.xy, r8.z).x;
  r4.w = 0 + r4.w;
  r8.xy = r9.xy + r0.zy;
  r8.zw = r5.zw;
  r8.xyz = r8.xyz / r8.www;
  r0.y = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r8.xy, r8.z).x;
  r0.y = r4.w + r0.y;
  r8.xy = r9.xy + r0.xw;
  r8.zw = r5.zw;
  r8.xyz = r8.xyz / r8.www;
  r0.x = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r8.xy, r8.z).x;
  r0.x = r0.y + r0.x;
  r5.xy = r9.xy + r0.zw;
  r0.yzw = r5.xyz / r5.www;
  r0.y = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r0.yz, r0.w).x;
  r0.x = r0.x + r0.y;
  r0.x = 0.25 * r0.x;
  r0.x = r0.x * r2.w;
  r0.x = -r0.x;
  r0.x = 1 + r0.x;
  r0.x = r0.x * r0.x;
  r0.y = -r0.x;
  r0.y = 1 + r0.y;
  r0.y = r1.w * r0.y;
  r0.x = r0.x + r0.y;
  r0.y = r0.x;
  r3.y = 0.75;
  r4.xz = g_MaterialTexture.Sample(g_samplerPoint_Clamp_s, r3.zy).xw;
  r3.y = 0.25;
  r5.xyzw = g_MaterialTexture.Sample(g_samplerPoint_Clamp_s, r3.zy).wxyz;
  r8.y = r4.x;
  r9.xyz = r6.xyz;
  r0.z = dot(r9.xyz, r2.xyz);
  r0.w = r0.z * r0.z;
  r0.w = -r0.w;
  r0.w = 1 + r0.w;
  r0.w = r0.w * r3.w;
  r0.w = r0.z + r0.w;
  r1.w = r5.x * r3.w;
  r0.w = max(r1.w, r0.w);
  r0.w = max(0, r0.w);
  r0.w = min(1, r0.w);
  r1.xyz = -r1.xyz;
  r1.w = dot(r1.xyz, r2.xyz);
  r1.w = r1.w + r1.w;
  r1.w = -r1.w;
  r3.yzw = r2.xyz * r1.www;
  r3.yzw = r3.yzw + r1.xyz;
  r3.yzw = -r3.yzw;
  r10.xyz = r3.yzw + r10.xyz;
  r1.w = dot(r10.xyz, r10.xyz);
  r1.w = sqrt(r1.w);
  r1.w = r7.w / r1.w;
  r1.w = max(0, r1.w);
  r10.xyz = min(float3(1,1,1), r1.www);
  r11.xyz = -r6.xyz;
  r3.yzw = r11.xyz + r3.yzw;
  r3.yzw = r10.xyz * r3.yzw;
  r3.yzw = r6.xyz + r3.yzw;
  r1.w = dot(r3.yzw, r3.yzw);
  r1.w = rsqrt(r1.w);
  r3.yzw = r3.yzw * r1.www;
  r1.xyz = r3.yzw + r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r1.w = dot(r1.xyz, r2.xyz);
  r1.w = max(0, r1.w);
  r1.w = min(1, r1.w);
  r8.x = dot(r1.xyz, r9.xyz);
  r1.x = g_lut1.Sample(g_samplerLinear_Clamp_s, r8.xy).x;
  r2.xyz = r5.yzw * r3.xxx;
  r1.y = max(0, r1.w);
  r4.x = min(1, r1.y);
  r1.yzw = r4.xyz * r4.xyz;
  r1.yzw = float3(0.984375,0.9375,0.9375) * r1.yzw;
  r1.yzw = float3(0.0078125,0.03125,0.03125) + r1.yzw;
  r1.yz = g_lut2.Sample(g_samplerLinear_Clamp_s, r1.yzw).xy;
  r1.yz = r1.yz * r1.yz;
  r1.y = r1.y / r1.z;
  r1.x = r1.x * r1.y;
  r0.z = 4 * r0.z;
  r0.z = max(0, r0.z);
  r0.z = min(1, r0.z);
  r0.z = r1.x * r0.z;
  r1.xyz = r2.xyz * r7.xyz;
  r1.xyz = r1.xyz * r0.zzz;
  r0.z = 1 * r0.w;
  r0.z = 1 * r0.z;
  r2.xyz = r0.zzz * r7.xyz;
  r0.x = -1 + r0.x;
  r0.x = g_psLight.m_lightParams[8].z * r0.x;
  r0.x = 1 + r0.x;
  r0.y = -1 + r0.y;
  r0.y = g_psLight.m_lightParams[8].z * r0.y;
  r0.y = 1 + r0.y;
  r0.xzw = r2.xyz * r0.xxx;
  r1.w = g_psLight.m_lightParams[8].y;
  r0.xzw = r1.www * r0.xzw;
  r2.xyz = float3(1,1,1) * r0.xzw;
  r0.xyz = r1.xyz * r0.yyy;
  r0.w = g_psLight.m_lightParams[8].x;
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = float3(1,1,1) * r0.xyz;
  r0.w = 1;
  r2.w = 1;
  o0.xyzw = r2.xyzw;
  o1.xyzw = r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.35 on Tue Apr 26 06:53:14 2016
//
//
// Buffer Definitions: 
//
// cbuffer cPSScene
// {
//
//   struct PSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_psScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cPSLight
// {
//
//   struct PSLight
//   {
//       
//       float4 m_lightParams[11];      // Offset:    0
//
//   } g_psLight;                       // Offset:    0 Size:   176
//
// }
//
// cbuffer cPSMaterial
// {
//
//   struct PSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_psMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerPoint_Wrap               sampler      NA          NA    8        1
// g_samplerPoint_Clamp              sampler      NA          NA    9        1
// g_samplerLinear_Clamp             sampler      NA          NA   11        1
// g_samplerComparisonLess_Linear_Clmap  sampler_c      NA          NA   15        1
// g_NormalTexture                   texture  float4          2d    0        1
// g_SpecularTexture                 texture  float4          2d    1        1
// g_DepthTexture                    texture  float4          2d    2        1
// g_ShadowTexture                   texture  float4          2d    3        1
// g_lut2                            texture  float4          3d    8        1
// g_lut1                            texture  float4          2d    9        1
// g_MaterialTexture                 texture  float4          2d   10        1
// cPSScene                          cbuffer      NA          NA    2        1
// cPSLight                          cbuffer      NA          NA    3        1
// cPSMaterial                       cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[30], immediateIndexed
dcl_constantbuffer cb3[9], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s11, mode_default
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture3d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 12

#line 101 "d:\jenkins\workspace\game_steam\_intermediate\win64\GrModelShaders_dx11_win64\Release\Lighting_Spot_NA_ps.hlsl"
add r0.xyzw, v0.xyxy, l(-0.500000, -0.500000, -0.500000, -0.500000)  // inVPos<0,1,0,1>

#line 129
mov r1.xyz, v2.xywx  // NScreenToTextureCoordinate_screenToTextureCoordinate_inBackBufferSamplingPosition<0,1,3>
nop 
mov r1.xyz, r1.xyzx  // inBackBufferSamplingPosition<0,1,3>

#line 212
div r1.xy, r1.xyxx, r1.zzzz  // outTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 130
mov r1.xy, r1.xyxx  // NScreenToTextureCoordinate_screenToTextureCoordinate_outTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 138
mov r1.xy, r1.xyxx  // NGetGeometryParam_getGeometryParam_inTexcoord<0:NaN:Inf,1:NaN:Inf>
nop 
mov r1.xy, r1.xyxx  // inTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 242
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r1.xyxx, t0.xyzw, s8
mov r2.xyz, r2.xyzx  // encodeViewNormal<0:Inf,1:Inf,2:Inf>
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyxx, t1.yxzw, s8  // specular<1:Inf,0:Inf,2:Inf,3:Inf>
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t2.xyzw, s8
mov r1.x, r1.x  // outDepth<0:Inf>

#line 299
nop 
mov r2.xyz, r2.xyzx  // encodeNormal<0:Inf,1:Inf,2:Inf>

#line 132
mul r1.yz, r2.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000)
add r1.yz, r1.yyzy, l(0.000000, -1.000000, -1.000000, 0.000000)  // viewSpaceNormal<0:Inf,1:Inf>
mul r1.w, r2.z, r2.z
mul r1.w, r1.w, l(2.000000)
add r2.z, r1.w, l(-1.000000)  // viewSpaceNormal<2:NaN:Inf>
mul r1.w, r2.z, r2.z
mov r1.w, -r1.w
add r1.w, r1.w, l(1.000000)  // oneMinusZz<0:NaN:Inf>
mul r4.xy, r1.wwww, r1.yzyy
dp2 r1.y, r1.yzyy, r1.yzyy
mul r1.y, r1.y, r1.w
add r1.y, r1.y, l(0.000000)
rsq r1.y, r1.y
mul r2.xy, r1.yyyy, r4.xyxx  // viewSpaceNormal<0:NaN:Inf,1:NaN:Inf>

#line 145
mov r2.xy, r2.xyxx  // DecodeViewSpaceNormal<0:NaN:Inf,1:NaN:Inf>
mov r2.z, r2.z  // DecodeViewSpaceNormal<2:NaN:Inf>

#line 299
mov r2.xyz, r2.xyzx  // outViewSpaceNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 303
mov r4.y, r3.y  // outRoughness<0:Inf>
mov r3.x, r3.x  // outSpecularMap<0:Inf>
mov r3.z, r3.z  // outMaterialIndex<0:Inf>
mov r3.w, r3.w  // outTranslucent<0:Inf>

#line 139
mov r2.xyz, r2.xyzx  // NGetGeometryParam_getGeometryParam_outViewSpaceNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.z, r3.z  // NGetGeometryParam_getGeometryParam_outMaterialIndex<0:Inf>
mov r3.x, r3.x  // NGetGeometryParam_getGeometryParam_outSpecularMap<0:Inf>
mov r4.y, r4.y  // NGetGeometryParam_getGeometryParam_outRoughness<0:Inf>
mov r3.w, r3.w  // NGetGeometryParam_getGeometryParam_outTranslucent<0:Inf>
mov r1.x, r1.x  // NGetGeometryParam_getGeometryParam_outDepth<0:Inf>
mov r1.x, r1.x  // NGetViewPos_getViewPos_inDepth<0:Inf>

#line 143
mov r1.yzw, v1.xxyw  // NGetViewPos_getViewPos_inClipSpaceXY<0,1,3>
nop 
mov r1.x, r1.x  // inDepth<0:Inf>
mov r1.yzw, r1.yyzw  // inClipSpaceXY<0,1,3>

#line 365
nop 
div r1.yz, r1.yyzy, r1.wwww
mov r5.xy, -cb2[28].xyxx
add r1.yz, r1.yyzy, r5.xxyx  // inScreenSpacePos<0:NaN:Inf,1:NaN:Inf>
mov r1.x, r1.x  // inDepth<0:Inf>
mov r5.xyzw, cb2[21].xyzw  // inProjectionParam<0,1,2,3>

#line 368
mul r1.yz, r1.yyzy, r5.xxyx  // viewPos<0:NaN:Inf,1:NaN:Inf>
mov r1.w, -r5.w
add r1.x, r1.w, r1.x
div r5.z, r5.z, r1.x  // viewPos<2:NaN:Inf>
mov r6.z, r5.z  // viewPos<2:NaN:Inf>

#line 375
mul r5.xy, r1.yzyy, r6.zzzz  // viewPos<0:NaN:Inf,1:NaN:Inf>
mov r6.xy, r5.xyxx  // viewPos<0:NaN:Inf,1:NaN:Inf>
mov r5.w, l(1.000000)  // ReconstructViewPos2<3: 1f>
mov r6.xy, r6.xyxx  // ReconstructViewPos2<0:NaN:Inf,1:NaN:Inf>
mov r6.z, r6.z  // ReconstructViewPos2<2:NaN:Inf>

#line 365
mov r6.xyz, r6.xyzx  // outViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r1.x, r6.xyzx, r6.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, r6.xyzx  // outEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 144
mov r6.xyz, r6.xyzx  // NGetViewPos_getViewPos_outViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NGetViewPos_getViewPos_outEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 148
mov r6.xyz, r6.xyzx  // NGetLightParam_getLightParam_inViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r6.xyz, r6.xyzx  // inViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 69
mov r6.xyz, -r6.xyzx
add r6.xyz, r6.xyzx, cb3[3].xyzx  // lightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.w, cb4[7].x  // innerRange<0>

#line 107
dp3 r2.w, r6.xyzx, r6.xyzx  // lightLength2<0:NaN:Inf>
rsq r4.w, r2.w  // rLightLength<0:NaN>
mul r6.w, r2.w, r4.w  // lightDirLength<0:NaN:Inf>
max r1.w, r1.w, r6.w  // dist<0:Inf>
mul r6.xyz, r4.wwww, r6.xyzx  // lightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r6.w, cb4[7].w  // maxAttenuate<0>

#line 130
mul r2.w, r2.w, r2.w  // p<0:NaN:Inf>
mul r2.w, r2.w, r2.w  // p<0:NaN:Inf>
mul r2.w, r2.w, r2.w  // p<0:NaN:Inf>
min r2.w, r2.w, l(340282346638528860000000000000000000000.000000)  // p<0:[0f,3.40282e+038f]>
mul r4.w, r4.w, r4.w
mul r2.w, r2.w, cb3[6].z
mov r2.w, -r2.w
add r2.w, r2.w, l(1.000000)
mul r2.w, r2.w, r4.w  // att<0:NaN:Inf>

#line 137
min r2.w, r2.w, r6.w
max r2.w, r2.w, l(0.000000)  // att<0:[-0f,3.40282e+038f]>

#line 144
nop 
mov r7.xyz, cb3[7].xyzx  // penumbraParameter<0,1,2>
mov r8.xyz, cb3[5].xyzx  // spotDir<0,1,2>
mov r6.xyz, r6.xyzx  // targetToLightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 10
mov r7.x, r7.x  // umbra<0>
mov r7.y, r7.y  // inv_penumbra_range<0>
mov r9.xyz, -r6.xyzx
dp3 r4.w, r8.xyzx, r9.xyzx  // cosa<0:NaN:Inf>
mov r7.z, r7.z  // e<0>
mov r6.w, -r7.x
add r4.w, r4.w, r6.w
mul r4.w, r7.y, r4.w
max r4.w, r4.w, l(0.000000)
min r4.w, r4.w, l(1.000000)
log r4.w, r4.w
mul r4.w, r4.w, r7.z
exp r7.xyz, r4.wwww  // cut<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>

#line 18
mov r7.xyz, r7.xyzx  // CalcSpotConeCutoff<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>

#line 144
mov r7.xyz, r7.xyzx  // cut<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>

#line 148
mul r9.xyz, r2.wwww, cb3[4].xyzx
mul r7.xyz, r7.xyzx, r9.xyzx
mul r7.xyz, r7.xyzx, cb2[23].zzzz  // outLightColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 153
nop 
mov r2.w, cb3[4].w  // size<0>
mov r1.w, r1.w  // dist<0:Inf>

#line 558
mul r2.w, r2.w, l(1.000000)
div r1.w, r2.w, r1.w
mul r1.w, r1.w, l(0.900000)
max r1.w, r1.w, l(0.000000)
min r7.w, r1.w, l(1.000000)  // AdjustLightSizeFromDistance<0:[0f,1f]>

#line 153
mov r7.w, r7.w  // outLightColor<3:[0f,1f]>

#line 149
mov r6.xyz, r6.xyzx  // NGetLightParam_getLightParam_outLightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r7.xyz, r7.xyzx  // NGetLightParam_getLightParam_outLightColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r7.w, r7.w  // NGetLightParam_getLightParam_outLightColor<3:[0f,1f]>

#line 153
mov r0.xyzw, r0.xyzw  // NGetShadow_getShadow_inVPos<0,1,0,1>
mov r6.xyz, r6.xyzx  // NGetShadow_getShadow_inLightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r0.xyzw, r0.xyzw  // inVPos<0,1,0,1>
mov r6.xyz, r6.xyzx  // inLightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 181
nop 

#line 408
dp4 r9.x, r5.xyzw, cb2[12].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r9.y, r5.xyzw, cb2[13].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r9.z, r5.xyzw, cb2[14].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r9.w, r5.xyzw, cb2[15].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 181
mov r9.xyzw, r9.xyzw  // shadow_pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 184
mov r9.xyzw, r9.xyzw  // shadow_uv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r1.w, cb4[7].y  // startFadeRange<0>
mov r2.w, cb4[7].z  // endFadeRange<0>
mov r1.w, -r1.w
add r1.w, r1.w, r9.w
mul r1.w, r2.w, r1.w
max r1.w, r1.w, l(0.000000)
min r1.w, r1.w, l(1.000000)  // weightFade<0:[0f,1f]>
nop 
mov r5.xy, cb4[6].xyxx  // penumbraParameter<0,1>
mov r6.xyz, r6.xyzx  // targetToLightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 24
mov r5.x, r5.x  // umbra<0>
mov r5.y, r5.y  // inv_penumbra_range<0>
mov r10.xyz, -r6.xyzx
dp3 r2.w, r8.xyzx, r10.xyzx
mov r4.w, -r5.x
add r2.w, r2.w, r4.w  // penumbraFactor<0:NaN:Inf>

#line 33
mul r2.w, r5.y, r2.w
max r2.w, r2.w, l(0.000000)
min r2.w, r2.w, l(1.000000)  // cut<0:[0f,1f]>
mul r2.w, r2.w, r2.w  // cut<0:[0f,1f]>
mov r2.w, r2.w  // CalcSpotConeCutoffForShadow<0:[0f,1f]>

#line 190
mov r2.w, r2.w  // cut<0:[0f,1f]>
nop 
mov r9.xyzw, r9.xyzw  // texCoord<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // screenTexCoord<0,1,0,1>
mov r2.w, r2.w  // attenuation<0:[0f,1f]>

#line 903
nop 
mov r9.xyzw, r9.xyzw  // texCoord<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // screenTexCoord<0,1,0,1>
mov r2.w, r2.w  // attenuation<0:[0f,1f]>

#line 680
nop 
mov r9.xyzw, r9.xyzw  // texCoord<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // screenTexCoord<0,1,0,1>
mov r2.w, r2.w  // attenuation<0:[0f,1f]>

#line 543
div r0.xyzw, r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000)
frc r0.xyzw, r0.xyzw
ge r0.xyzw, r0.xyzw, l(0.300000, 0.300000, 0.300000, 0.300000)
movc r0.xyzw, r0.xyzw, l(1.000000,1.000000,1.000000,1.000000), l(0,0,0,0)
mul r0.xyzw, r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000)
add r0.xyzw, r0.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)  // ditherOffset2x2<0:[-1f,1f],1:[-1f,1f],0:[-1f,1f],1:[-1f,1f]>
mul r0.xyzw, r0.xyzw, l(0.125000, 0.125000, 0.125000, 0.125000)
add r0.xyzw, r0.xyzw, l(0.500000, 0.500000, -0.500000, -0.500000)  // offset<0:[0.375f,0.625f],1:[0.375f,0.625f],2:[-0.625f,-0.375f],3:[-0.625f,-0.375f]>
div r5.xyzw, r9.wwww, cb2[29].yyyy
mul r0.xyzw, r0.xyzw, r5.xyzw  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r9.xyzw, r9.xyzw  // neighbour<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
add r5.xy, r0.xyxx, r9.xyxx  // neighbour<0:NaN:Inf,1:NaN:Inf>
nop 
mov r5.xy, r5.xyxx  // _uv<0:NaN:Inf,1:NaN:Inf>
mov r5.zw, r9.zzzw  // _uv<2:NaN:Inf,3:NaN:Inf>

#line 333
div r8.xyz, r5.xyzx, r5.wwww  // prjectionUV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
sample_c_indexable(texture2d)(float,float,float,float) r4.w, r8.xyxx, t3.xxxx, s15, r8.z  // TFetch2DProjCmp<0:[0f,1f]>

#line 549
add r4.w, r4.w, l(0.000000)  // shadow<0:[0f,1f]>

#line 552
add r8.xy, r0.zyzz, r9.xyxx  // neighbour<0:NaN:Inf,1:NaN:Inf>
nop 
mov r8.xy, r8.xyxx  // _uv<0:NaN:Inf,1:NaN:Inf>
mov r8.zw, r5.zzzw  // _uv<2:NaN:Inf,3:NaN:Inf>

#line 333
div r8.xyz, r8.xyzx, r8.wwww  // prjectionUV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
sample_c_indexable(texture2d)(float,float,float,float) r0.y, r8.xyxx, t3.xxxx, s15, r8.z  // TFetch2DProjCmp<0:[0f,1f]>

#line 553
add r0.y, r0.y, r4.w  // shadow<0:[0f,2f]>

#line 556
add r8.xy, r0.xwxx, r9.xyxx  // neighbour<0:NaN:Inf,1:NaN:Inf>
nop 
mov r8.xy, r8.xyxx  // _uv<0:NaN:Inf,1:NaN:Inf>
mov r8.zw, r5.zzzw  // _uv<2:NaN:Inf,3:NaN:Inf>

#line 333
div r8.xyz, r8.xyzx, r8.wwww  // prjectionUV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
sample_c_indexable(texture2d)(float,float,float,float) r0.x, r8.xyxx, t3.xxxx, s15, r8.z  // TFetch2DProjCmp<0:[0f,1f]>

#line 557
add r0.x, r0.x, r0.y  // shadow<0:[0f,3f]>

#line 560
add r5.xy, r0.zwzz, r9.xyxx  // neighbour<0:NaN:Inf,1:NaN:Inf>
nop 
mov r5.xy, r5.xyxx  // _uv<0:NaN:Inf,1:NaN:Inf>

#line 333
div r0.yzw, r5.xxyz, r5.wwww  // prjectionUV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
sample_c_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t3.xxxx, s15, r0.w  // TFetch2DProjCmp<0:[0f,1f]>

#line 561
add r0.x, r0.y, r0.x  // shadow<0:[0f,4f]>
mul r0.x, r0.x, l(0.250000)  // shadow<0:[0f,1f]>
mul r0.x, r2.w, r0.x
mov r0.x, -r0.x
add r0.x, r0.x, l(1.000000)  // shadow<0:[0f,1f]>
mul r0.x, r0.x, r0.x  // shadow<0:[0f,1f]>
mov r0.x, r0.x  // ShadowComparisonFourSampleGaussianFilterWithMicroDither<0:[0f,1f]>

#line 680
mov r0.x, r0.x  // ShadowComparisonFilteredRandomFetch<0:[0f,1f]>

#line 903
mov r0.x, r0.x  // ShadowComparisonFilteredSpotLight<0:[0f,1f]>

#line 192
mov r0.x, r0.x  // outShadow<0:[0f,1f]>
mov r0.y, -r0.x
add r0.y, r0.y, l(1.000000)
mul r0.y, r0.y, r1.w
add r0.x, r0.y, r0.x  // outShadow<0:[0f,2f]>

#line 155
mov r0.x, r0.x  // NGetShadow_getShadow_outShadow<0:[0f,2f]>

#line 162
mov r0.x, r0.x  // NGetSpecularShadowRate_getSpecularShadowRate_inShadowRate<0:[0f,2f]>
nop 
mov r0.x, r0.x  // inShadowRate<0:[0f,2f]>

#line 1209
mov r0.x, r0.x  // outShadowRate<0:[0f,2f]>

#line 163
mov r0.y, r0.x  // NGetSpecularShadowRate_getSpecularShadowRate_outShadowRate<0:[0f,2f]>
mov r2.xyz, r2.xyzx  // NLightCalculate_lightCalculate_inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r7.xyzw, r7.xyzw  // NLightCalculate_lightCalculate_inLightColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>

#line 173
mov r1.xyz, r1.xyzx  // NLightCalculate_lightCalculate_inEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.x, r3.x  // NLightCalculate_lightCalculate_inSpecularIntensity<0:Inf>

#line 178
mov r3.z, r3.z  // NLightCalculate_lightCalculate_inMaterialIndex<0:Inf>
mov r4.y, r4.y  // NLightCalculate_lightCalculate_inRoughness<0:Inf>
mov r3.w, r3.w  // NLightCalculate_lightCalculate_inTranslucent<0:Inf>
nop 
mov r2.xyz, r2.xyzx  // inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r7.xyzw, r7.xyzw  // inLightColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
mov r1.xyz, r1.xyzx  // inEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.x, r3.x  // inSpecularIntensity<0:Inf>
mov r3.z, r3.z  // inMaterialIndex<0:Inf>
mov r4.y, r4.y  // inRoughness<0:Inf>
mov r3.w, r3.w  // inTranslucent<0:Inf>

#line 773
mov r2.xyz, r2.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.z, r3.z  // materialIndex<0:Inf>

#line 779
mov r3.y, l(0.750000)
sample_indexable(texture2d)(float,float,float,float) r4.xz, r3.zyzz, t10.xywz, s9  // material0<0:Inf>
mov r4.xz, r4.xxzx  // material0<0:Inf,3:Inf>
mov r3.y, l(0.250000)
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r3.zyzz, t10.wxyz, s9  // material1<3:Inf,0:Inf,1:Inf,2:Inf>

#line 783
mov r8.y, r4.x  // F0<0:Inf>
mov r5.x, r5.x  // TANSLUCENT<0:Inf>
mov r9.xyz, r6.xyzx
dp3 r0.z, r9.xyzx, r2.xyzx  // LN<0:NaN:Inf>
mul r0.w, r0.z, r0.z
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
mul r0.w, r3.w, r0.w
add r0.w, r0.w, r0.z
mul r1.w, r3.w, r5.x
max r0.w, r0.w, r1.w
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)  // LN_trans<0:[0f,1f]>

#line 857
mov r1.xyz, -r1.xyzx
dp3 r1.w, r1.xyzx, r2.xyzx
add r1.w, r1.w, r1.w
mov r1.w, -r1.w
mul r3.yzw, r1.wwww, r2.xxyz
add r3.yzw, r1.xxyz, r3.yyzw
mov r3.yzw, -r3.yyzw  // vec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
add r10.xyz, r10.xyzx, r3.yzwy  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r1.w, r10.xyzx, r10.xyzx
sqrt r1.w, r1.w  // len<0:NaN:Inf>
div r1.w, r7.w, r1.w
max r1.w, r1.w, l(0.000000)
min r10.xyz, r1.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)  // rate<0:[0f,1f],0:[0f,1f],0:[0f,1f]>
mov r11.xyz, -r6.xyzx
add r3.yzw, r3.yyzw, r11.xxyz
mul r3.yzw, r3.yyzw, r10.xxyz
add r3.yzw, r3.yyzw, r6.xxyz
dp3 r1.w, r3.yzwy, r3.yzwy
rsq r1.w, r1.w
mul r3.yzw, r1.wwww, r3.yyzw  // Ln2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
add r1.xyz, r1.xyzx, r3.yzwy
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r1.w, r1.xyzx, r2.xyzx
max r1.w, r1.w, l(0.000000)
min r1.w, r1.w, l(1.000000)  // HN<0:[0f,1f]>

#line 869
dp3 r8.x, r1.xyzx, r9.xyzx  // LH<0:NaN:Inf>

#line 880
mov r5.yzw, r5.yyzw  // SPECULER_COLOR<0:Inf,1:Inf,2:Inf>

#line 883
mov r4.z, r4.z  // ANISO_ROUGHNESS<0:Inf>

#line 904
nop 
mov r8.x, r8.x  // EH<0:NaN:Inf>
mov r8.y, r8.y  // F0<0:Inf>

#line 548
sample_indexable(texture2d)(float,float,float,float) r1.x, r8.xyxx, t9.xyzw, s11
mov r1.x, r1.x  // lookupFresnel<0:Inf>

#line 904
mov r1.x, r1.x  // F_s<0:Inf>

#line 927
mul r2.xyz, r3.xxxx, r5.yzwy  // K_s<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 946
nop 
mov r1.w, r1.w  // HN<0:[0f,1f]>
mov r4.y, r4.y  // roughness<0:Inf>
mov r4.z, r4.z  // anisoRoughness<0:Inf>

#line 567
max r1.y, r1.w, l(0.000000)
min r4.x, r1.y, l(1.000000)  // uv<0:[0f,1f]>
mov r4.y, r4.y  // uv<1:Inf>
mov r4.z, r4.z  // uv<2:Inf>
mul r1.yzw, r4.xxyz, r4.xxyz  // uv<0:[0f,1f],1:NaN:Inf,2:NaN:Inf>

#line 575
mul r1.yzw, r1.yyzw, l(0.000000, 0.984375, 0.937500, 0.937500)
add r1.yzw, r1.yyzw, l(0.000000, 0.007813, 0.031250, 0.031250)  // uv<0:[0.0078125f,0.992188f],1:NaN:Inf,2:NaN:Inf>

#line 602
sample_indexable(texture3d)(float,float,float,float) r1.yz, r1.yzwy, t8.zxyw, s11
mov r1.yz, r1.yyzy  // value<0:Inf,1:Inf>
mul r1.yz, r1.yyzy, r1.yyzy  // value<0:NaN:Inf,1:NaN:Inf>
div r1.y, r1.y, r1.z  // lookupSpecularPower<0:NaN:Inf>

#line 946
mul r1.x, r1.y, r1.x
nop 
mov r0.z, r0.z  // LN<0:NaN:Inf>

#line 494
mul r0.z, r0.z, l(4.000000)
max r0.z, r0.z, l(0.000000)
min r0.z, r0.z, l(1.000000)  // specularErrorMask<0:[0f,1f]>

#line 946
mul r0.z, r0.z, r1.x  // specularPower<0:NaN:Inf>

#line 950
mul r1.xyz, r7.xyzx, r2.xyzx
mul r1.xyz, r0.zzzz, r1.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 959
mul r0.z, r0.w, l(1.000000)
mul r0.z, r0.z, l(1.000000)
mul r2.xyz, r7.xyzx, r0.zzzz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 962
mov r1.xyz, r1.xyzx  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyz, r2.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 182
mov r2.xyz, r2.xyzx  // NLightCalculate_lightCalculate_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NLightCalculate_lightCalculate_outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 161
nop 

#line 183
mov r2.xyz, r2.xyzx  // NLightComposit_composit_inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NLightComposit_composit_inSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.y, r0.y  // NLightComposit_composit_inShadowRateSpecular<0:[0f,2f]>
nop 
mov r2.xyz, r2.xyzx  // inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // inSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.y, r0.y  // inShadowRateSpecular<0:[0f,2f]>

#line 209
add r0.x, r0.x, l(-1.000000)
mul r0.x, r0.x, cb3[8].z
add r0.x, r0.x, l(1.000000)  // inShadowRate<0>
add r0.y, r0.y, l(-1.000000)
mul r0.y, r0.y, cb3[8].z
add r0.y, r0.y, l(1.000000)  // inShadowRateSpecular<0>
mul r0.xzw, r0.xxxx, r2.xxyz
mov r1.w, cb3[8].y
mul r0.xzw, r0.xxzw, r1.wwww
mul r2.xyz, r0.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r0.xyz, r0.yyyy, r1.xyzx
mov r0.w, cb3[8].x
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 188
mov r2.xyz, r2.xyzx  // NLightComposit_composit_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // NLightComposit_composit_outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyz, r2.xyzx  // NEnvSpecularComposit_envComposit_inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // NEnvSpecularComposit_envComposit_inSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 195
nop 
mov r2.xyz, r2.xyzx  // inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // inSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 1225
mov r2.xyz, r2.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 195
mov r2.xyz, r2.xyzx  // NEnvSpecularComposit_envComposit_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // NEnvSpecularComposit_envComposit_outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 209
mov r0.xyz, r0.xyzx  // NWriteLightSpecularAccumulationWithoutExposure_writeLightSpecularAccumulation_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r0.xyz, r0.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 411
nop 
mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 269
mov r0.w, l(1.000000)  // EncodeAliasHDRColor<3: 1f>
mov r0.xyz, r0.xyzx  // EncodeAliasHDRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 411
mov r0.xyzw, r0.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 210
mov r0.xyzw, r0.xyzw  // NWriteLightSpecularAccumulationWithoutExposure_writeLightSpecularAccumulation_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 203
mov r2.xyz, r2.xyzx  // NWriteLightDiffuseAccumulationWithoutExposure_writeLightDiffuseAccumulation_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r2.xyz, r2.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 237
nop 
mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 269
mov r2.w, l(1.000000)  // EncodeAliasHDRColor<3: 1f>
mov r2.xyz, r2.xyzx  // EncodeAliasHDRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 237
mov r2.xyzw, r2.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 204
mov r2.xyzw, r2.xyzw  // NWriteLightDiffuseAccumulationWithoutExposure_writeLightDiffuseAccumulation_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
mov o0.xyzw, r2.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 211
mov o1.xyzw, r0.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 92
ret 
// Approximately 387 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
