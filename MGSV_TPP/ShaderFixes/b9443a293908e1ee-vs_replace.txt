// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i b9443a293908e1ee-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:43:41 2016

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float2 v0 : POSITION0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : SV_Position0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy;
  r0.xy = float2(2,-2) * r0.xy;
  r0.xy = float2(-1,1) + r0.xy;
  r0.zw = float2(1,1);

o2.xyzw = r0.xyzw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i b9443a293908e1ee-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r0.w != 1.0)
  r0.x += stereo.x * (r0.w - stereo.y);

  r1.xy = r0.xy;
  r1.zw = g_vsObject.m_localParam[0].xy;
  r2.xy = g_vsObject.m_localParam[0].zw;
  r2.xy = r2.xy * r1.zw;
  r1.xy = float2(0.5,-0.5) * r1.xy;
  r1.xy = float2(0.5,0.5) + r1.xy;
  r2.xy = r1.xy * r2.xy;
  r1.xy = r1.xy * r1.zw;
  r2.zw = float2(0.25,0.25) * r1.xy;
  r1.xy = r2.xy;
  r1.zw = float2(0,0);

  // o2.xyzw = r0.xyzw; // Relocated from here with hlsltool.py

  o0.xyzw = r2.xyzw;
  o1.xyzw = r1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xy          0     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// SV_Position              0   xyzw        2      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb5[10], immediateIndexed
dcl_input v0.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output_siv o2.xyzw, position
dcl_temps 3

#line 104 "d:\work\master\git_clone\_intermediate\win64\GrSystemShaders_dx11_win64\Release\BilateralUpscale2x2_Prim_vs.hlsl"
mov r0.xy, v0.xyxx  // NScreenCoordinateToDrawCoordinate_drawCoordinate_inPosition<0,1>
nop 
mov r0.xy, r0.xyxx  // inPosition<0,1>

#line 32
mul r0.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000)
add r0.xy, r0.xyxx, l(-1.000000, 1.000000, 0.000000, 0.000000)  // outPosition<0:Inf,1:Inf>

#line 105
mov r0.xy, r0.xyxx  // NScreenCoordinateToDrawCoordinate_drawCoordinate_outPosition<0:Inf,1:Inf>
mov r0.zw, l(0,0,1.000000,1.000000)  // NScreenCoordinateToDrawCoordinate_drawCoordinate_outPosition<2: 1f,3: 1f>
mov r1.xy, r0.xyxx  // NGenerateUvParameter_generateUvParameter_inPosition<0:Inf,1:Inf>
nop 
mov r1.xy, r1.xyxx  // inPosition<0:Inf,1:Inf>

#line 53
mov r1.zw, cb5[9].xxxy  // viewportSize<0,1>
mov r2.xy, cb5[9].zwzz  // pixelToUv<0,1>

#line 60
mul r2.xy, r1.zwzz, r2.xyxx  // viewportUvArea<0:Inf,1:Inf>
mul r1.xy, r1.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000)
add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // screenPosition<0,1>
mul r2.xy, r2.xyxx, r1.xyxx  // outUvParameter0<0:NaN:Inf,1:NaN:Inf>
mul r1.xy, r1.zwzz, r1.xyxx
mul r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.250000, 0.250000)  // outUvParameter0<2:NaN:Inf,3:NaN:Inf>

#line 108
mov r2.xy, r2.xyxx  // NGenerateUvParameter_generateUvParameter_outUvParameter0<0:NaN:Inf,1:NaN:Inf>
mov r2.zw, r2.zzzw  // NGenerateUvParameter_generateUvParameter_outUvParameter0<2:NaN:Inf,3:NaN:Inf>
mov r1.xy, r2.xyxx  // NGenerateUvParameter_generateUvParameter_outUvParameter1<0:NaN:Inf,1:NaN:Inf>
mov r1.zw, l(0,0,0,0)  // NGenerateUvParameter_generateUvParameter_outUvParameter1<2: 0f,3: 0f>

#line 105
mov o2.xyzw, r0.xyzw  // outPosition<0:Inf,1:Inf,2: 1f,3: 1f>

#line 108
mov o0.xyzw, r2.xyzw  // outUvParameter0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xyzw, r1.xyzw  // outUvParameter1<0:NaN:Inf,1:NaN:Inf,2: 0f,3: 0f>

#line 88
ret 
// Approximately 26 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
