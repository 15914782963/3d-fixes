// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:47 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy;
  r0.xy = r0.xy;
  r0.z = 1 / g_vsMaterial.m_materials[1].w;
  r0.w = g_vsMaterial.m_materials[0].z;
  r1.x = g_vsScene.m_view._m30;
  r1.y = g_vsScene.m_view._m31;
  r1.z = g_vsScene.m_view._m32;
  r1.xyz = -r1.xyz;
  r2.x = g_vsScene.m_view._m00;
  r2.y = g_vsScene.m_view._m01;
  r2.z = g_vsScene.m_view._m02;
  r2.x = dot(r2.xyz, r1.xyz);
  r3.x = g_vsScene.m_view._m10;
  r3.y = g_vsScene.m_view._m11;
  r3.z = g_vsScene.m_view._m12;
  r2.y = dot(r3.xyz, r1.xyz);
  r3.x = g_vsScene.m_view._m20;
  r3.y = g_vsScene.m_view._m21;
  r3.z = g_vsScene.m_view._m22;
  r2.z = dot(r3.xyz, r1.xyz);
  r1.w = -r0.w;
  r1.xyz = float3(0,1,0);
  r3.x = g_vsScene.m_view._m10;
  r3.y = g_vsScene.m_view._m11;
  r3.z = g_vsScene.m_view._m12;
  r3.xyz = r3.xyz;
  r2.w = 1;
  r0.w = dot(r1.xyzw, r2.xyzw);
  r1.xy = g_vsScene.m_projectionParam.xy * r0.xy;
  r1.z = 1;
  r0.x = dot(r1.xyz, r3.xyz);
  r0.y = cmp(r0.x >= 0);
  if (r0.y != 0) {
    r3.xy = r3.xy * r0.xx;
    r3.xy = -r3.xy;
    r1.xy = r3.xy + r1.xy;
  }
  r0.x = -r0.x;
  r0.x = max(9.99999975e-005, r0.x);
  r0.x = r0.w / r0.x;
  r1.z = 1;
  r0.xyw = r1.xyz * r0.xxx;
  r1.x = g_vsScene.m_view._m00;
  r1.y = g_vsScene.m_view._m01;
  r1.z = g_vsScene.m_view._m02;
  r1.x = dot(r1.xyz, r0.xyw);
  r3.x = g_vsScene.m_view._m10;
  r3.y = g_vsScene.m_view._m11;
  r3.z = g_vsScene.m_view._m12;
  r1.y = dot(r3.xyz, r0.xyw);
  r3.x = g_vsScene.m_view._m20;
  r3.y = g_vsScene.m_view._m21;
  r3.z = g_vsScene.m_view._m22;
  r1.z = dot(r3.xyz, r0.xyw);
  r1.xyz = r2.xyz + r1.xyz;
  r0.xyw = r1.xyz;
  r2.xy = r0.xw * r0.zz;
  r0.xyw = r0.xyw;
  r1.w = 1;
  r3.x = dot(r1.xyzw, g_vsScene.m_projectionView._m00_m10_m20_m30);
  r3.y = dot(r1.xyzw, g_vsScene.m_projectionView._m01_m11_m21_m31);
  r3.z = dot(r1.xyzw, g_vsScene.m_projectionView._m02_m12_m22_m32);
  r3.w = dot(r1.xyzw, g_vsScene.m_projectionView._m03_m13_m23_m33);
  r3.xyzw = r3.xyzw;
  r3.xyzw = r3.xyzw;
  r2.xy = r2.xy;
  r0.xyw = r0.xyw;
  o0.xyzw = r3.xyzw;
  o1.xy = r2.xy;
  o1.z = r3.w;
  o2.xyz = r0.xyw;
  o2.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xy  
// TEXCOORD                 0   xy          1     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb4[2], immediateIndexed
dcl_input v0.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_temps 4

#line 218 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Primitive_TppFourierOceanFill_vs.hlsl"
mov r0.xy, v0.xyxx  // NCalcVertexPosition_calcVertexPosition_inScreenPosition<0,1>
nop 
mov r0.xy, r0.xyxx  // inScreenPosition<0,1>

#line 153
div r0.z, l(1.000000), cb4[1].w  // projectionScale<0:Inf>
mov r0.w, cb4[0].z  // waterHeight<0>

#line 159
nop 

#line 463
mov r1.x, cb2[8].w  // GetRowT<0>
mov r1.y, cb2[9].w  // GetRowT<1>
mov r1.z, cb2[10].w  // GetRowT<2>

#line 159
mov r1.xyz, -r1.xyzx  // tmp<0,1,2>
nop 

#line 463
mov r2.x, cb2[8].x  // GetRowT<0>
mov r2.y, cb2[9].x  // GetRowT<1>
mov r2.z, cb2[10].x  // GetRowT<2>

#line 160
dp3 r2.x, r2.xyzx, r1.xyzx  // cameraTrans<0:NaN:Inf>
nop 

#line 463
mov r3.x, cb2[8].y  // GetRowT<0>
mov r3.y, cb2[9].y  // GetRowT<1>
mov r3.z, cb2[10].y  // GetRowT<2>

#line 161
dp3 r2.y, r3.xyzx, r1.xyzx  // cameraTrans<1:NaN:Inf>
nop 

#line 463
mov r3.x, cb2[8].z  // GetRowT<0>
mov r3.y, cb2[9].z  // GetRowT<1>
mov r3.z, cb2[10].z  // GetRowT<2>

#line 162
dp3 r2.z, r3.xyzx, r1.xyzx  // cameraTrans<2:NaN:Inf>

#line 166
mov r1.w, -r0.w  // clipPlaneOrg<3>
mov r1.xyz, l(0,1.000000,0,0)  // clipPlaneOrg<0: 0f,1: 1f,2: 0f>
nop 

#line 463
mov r3.x, cb2[8].y  // GetRowT<0>
mov r3.y, cb2[9].y  // GetRowT<1>
mov r3.z, cb2[10].y  // GetRowT<2>

#line 168
mov r3.xyz, r3.xyzx  // clipPlaneOfView<0,1,2>
mov r2.w, l(1.000000)
dp4 r0.w, r1.xyzw, r2.xyzw  // clipPlaneOfView<3:NaN:Inf>

#line 172
mul r1.xy, r0.xyxx, cb2[21].xyxx  // viewDir<0:Inf,1:Inf>
mov r1.z, l(1.000000)  // viewDir<2: 1f>
dp3 r0.x, r1.xyzx, r3.xyzx  // unitLength<0:NaN:Inf>
ge r0.y, r0.x, l(0.000000)
if_nz r0.y
  mul r3.xy, r0.xxxx, r3.xyxx
  mov r3.xy, -r3.xyxx
  add r1.xy, r1.xyxx, r3.xyxx  // viewDir<0:NaN:Inf,1:NaN:Inf>
endif 

#line 182
mov r0.x, -r0.x
max r0.x, r0.x, l(0.000100)
div r0.x, r0.w, r0.x
mov r1.z, l(1.000000)
mul r0.xyw, r0.xxxx, r1.xyxz  // viewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 185
nop 

#line 463
mov r1.x, cb2[8].x  // GetRowT<0>
mov r1.y, cb2[9].x  // GetRowT<1>
mov r1.z, cb2[10].x  // GetRowT<2>

#line 185
dp3 r1.x, r1.xyzx, r0.xywx  // worldDir<0:NaN:Inf>
nop 

#line 463
mov r3.x, cb2[8].y  // GetRowT<0>
mov r3.y, cb2[9].y  // GetRowT<1>
mov r3.z, cb2[10].y  // GetRowT<2>

#line 186
dp3 r1.y, r3.xyzx, r0.xywx  // worldDir<1:NaN:Inf>
nop 

#line 463
mov r3.x, cb2[8].z  // GetRowT<0>
mov r3.y, cb2[9].z  // GetRowT<1>
mov r3.z, cb2[10].z  // GetRowT<2>

#line 187
dp3 r1.z, r3.xyzx, r0.xywx  // worldDir<2:NaN:Inf>
add r1.xyz, r1.xyzx, r2.xyzx  // currWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyw, r1.xyxz  // currWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r2.xy, r0.zzzz, r0.xwxx  // outBaseUV<0:NaN:Inf,1:NaN:Inf>
mov r0.xyw, r0.xyxw  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
nop 
mov r1.w, l(1.000000)  // vec<3: 1f>

#line 408
dp4 r3.x, r1.xyzw, cb2[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r1.xyzw, cb2[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r1.xyzw, cb2[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r3.w, r1.xyzw, cb2[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 194
mov r3.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 219
mov r3.xyzw, r3.xyzw  // NCalcVertexPosition_calcVertexPosition_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r2.xy, r2.xyxx  // NCalcVertexPosition_calcVertexPosition_outBaseUV<0:NaN:Inf,1:NaN:Inf>
mov r0.xyw, r0.xyxw  // NCalcVertexPosition_calcVertexPosition_outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o0.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xy, r2.xyxx  // outBaseUVDepth<0:NaN:Inf,1:NaN:Inf>
mov o1.z, r3.w  // outBaseUVDepth<2:NaN:Inf>
mov o2.xyz, r0.xywx  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o2.w, l(1.000000)  // outWorldPosition<3: 1f>

#line 200
ret 
// Approximately 84 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(47,14-15): warning X3578: Output value 'o1' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
