// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i c5e2abae20200d53-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:13 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer VSBones : register(b6)
{

  struct
  {
    float4x3 m_boneMatrices[32];
  } g_vsBone : packoffset(c0);


  struct
  {
    float4x3 m_boneMatrices[32];
  } g_vsPrevBone : packoffset(c96);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : NORMAL0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  uint4 v4 : BLENDINDICES0,
  float4 v5 : BLENDWEIGHT0,
  float2 v6 : TEXCOORD0,
  out float4 o0 : TEXCOORD0,
  out float3 o1 : TEXCOORD1,
  out float4 o2 : SV_Position0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v0.xyz;
  r1.xyzw = v5.xyzw;
  r2.x = cmp(g_vsObject.m_useWeightCount.x != 0.000000);
  if (r2.x != 0) {
    r1.xyzw = r1.xyzw;
    r2.x = (int)v4.x * 3;
    r3.xyzw = g_vsBone.m_boneMatrices[v4.x]._m00_m10_m20_m30 * r1.xxxx;
    r4.xyzw = g_vsBone.m_boneMatrices[v4.x]._m01_m11_m21_m31 * r1.xxxx;
    r2.xyzw = g_vsBone.m_boneMatrices[v4.x]._m02_m12_m22_m32 * r1.xxxx;
    r1.x = (int)v4.y * 3;
    r5.xyzw = g_vsBone.m_boneMatrices[v4.y]._m00_m10_m20_m30 * r1.yyyy;
    r6.xyzw = g_vsBone.m_boneMatrices[v4.y]._m01_m11_m21_m31 * r1.yyyy;
    r7.xyzw = g_vsBone.m_boneMatrices[v4.y]._m02_m12_m22_m32 * r1.yyyy;
    r3.xyzw = r5.xyzw + r3.xyzw;
    r4.xyzw = r6.xyzw + r4.xyzw;
    r2.xyzw = r7.xyzw + r2.xyzw;
    r1.x = (int)v4.z * 3;
    r5.xyzw = g_vsBone.m_boneMatrices[v4.y]._m00_m10_m20_m30 * r1.zzzz;
    r6.xyzw = g_vsBone.m_boneMatrices[v4.y]._m01_m11_m21_m31 * r1.zzzz;
    r7.xyzw = g_vsBone.m_boneMatrices[v4.y]._m02_m12_m22_m32 * r1.zzzz;
    r3.xyzw = r5.xyzw + r3.xyzw;
    r4.xyzw = r6.xyzw + r4.xyzw;
    r2.xyzw = r7.xyzw + r2.xyzw;
    r1.x = (int)v4.w * 3;
    r5.xyzw = g_vsBone.m_boneMatrices[v4.y]._m00_m10_m20_m30 * r1.wwww;
    r6.xyzw = g_vsBone.m_boneMatrices[v4.y]._m01_m11_m21_m31 * r1.wwww;
    r1.xyzw = g_vsBone.m_boneMatrices[v4.y]._m02_m12_m22_m32 * r1.wwww;
    r3.xyzw = r5.xyzw + r3.xyzw;
    r4.xyzw = r6.xyzw + r4.xyzw;
    r1.xyzw = r2.xyzw + r1.xyzw;
    r0.x = dot(v0.xyzw, r3.xyzw);
    r0.y = dot(v0.xyzw, r4.xyzw);
    r0.z = dot(v0.xyzw, r1.xyzw);
  }
  r0.w = v0.w;
  r1.x = dot(r0.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r1.w = dot(r0.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r0.x = dot(r1.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r0.y = dot(r1.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r0.z = dot(r1.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r0.w = dot(r1.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);

o2.xyzw = r0.xyzw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i c5e2abae20200d53-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r0.w != 1.0)
  r0.x += stereo.x * (r0.w - stereo.y);

  r1.x = r0.w;
  r1.x = g_vsScene.m_fogParam[0].x * r1.x;
  r1.x = g_vsScene.m_fogParam[0].y + r1.x;

  // o2.xyzw = r0.xyzw; // Relocated from here with hlsltool.py

  o1.x = r1.x;
  o1.y = r0.w;
  o0.xy = v6.xy;
  o1.z = g_vsObject.m_useWeightCount.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer VSBones
// {
//
//   struct VSBone
//   {
//       
//       float4x3 m_boneMatrices[32];   // Offset:    0
//
//   } g_vsBone;                        // Offset:    0 Size:  1536
//   
//   struct VSBone
//   {
//       
//       float4x3 m_boneMatrices[32];   // Offset: 1536
//
//   } g_vsPrevBone;                    // Offset: 1536 Size:  1536 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSObject                         cbuffer      NA          NA    5        1
// VSBones                           cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float       
// BLENDINDICES             0   xyzw        4     NONE    uint   xyzw
// BLENDWEIGHT              0   xyzw        5     NONE   float   xyzw
// TEXCOORD                 0   xy          6     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// SV_Position              0   xyzw        2      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[25], immediateIndexed
dcl_constantbuffer cb5[9], immediateIndexed
dcl_constantbuffer cb6[96], dynamicIndexed
dcl_input v0.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xy
dcl_output o0.xy
dcl_output o1.xyz
dcl_output_siv o2.xyzw, position
dcl_temps 8

#line 158 "d:\work\master\git_clone\_intermediate\win64\GrModelShaders_dx11_win64\Release\fox3dfw_cnst_ndr_ad_vs.hlsl"
mov r0.xyz, v0.xyzx  // NTransformInput_transform_inPosition<0,1,2>

#line 162
mov r1.xyzw, v5.xyzw  // NTransformInput_transform_inBlendWeights<0,1,2,3>
nop 
mov r0.xyz, r0.xyzx  // inPosition<0,1,2>
mov r1.xyzw, r1.xyzw  // inBlendWeights<0,1,2,3>

#line 45
ne r2.x, cb5[8].x, l(0.000000)
if_nz r2.x
  nop 
  mov r1.xyzw, r1.xyzw  // blendWeights<0,1,2,3>

#line 22
  imul null, r2.x, v4.x, l(3)
  mul r3.xyzw, r1.xxxx, cb6[r2.x + 0].xyzw  // blendMatrix<0:Inf,3:Inf,6:Inf,9:Inf>
  mul r4.xyzw, r1.xxxx, cb6[r2.x + 1].xyzw  // blendMatrix<1:Inf,4:Inf,7:Inf,10:Inf>
  mul r2.xyzw, r1.xxxx, cb6[r2.x + 2].xyzw  // blendMatrix<2:Inf,5:Inf,8:Inf,11:Inf>
  imul null, r1.x, v4.y, l(3)
  mul r5.xyzw, r1.yyyy, cb6[r1.x + 0].xyzw
  mul r6.xyzw, r1.yyyy, cb6[r1.x + 1].xyzw
  mul r7.xyzw, r1.yyyy, cb6[r1.x + 2].xyzw
  add r3.xyzw, r3.xyzw, r5.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r4.xyzw, r4.xyzw, r6.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r2.xyzw, r2.xyzw, r7.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  imul null, r1.x, v4.z, l(3)
  mul r5.xyzw, r1.zzzz, cb6[r1.x + 0].xyzw
  mul r6.xyzw, r1.zzzz, cb6[r1.x + 1].xyzw
  mul r7.xyzw, r1.zzzz, cb6[r1.x + 2].xyzw
  add r3.xyzw, r3.xyzw, r5.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r4.xyzw, r4.xyzw, r6.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r2.xyzw, r2.xyzw, r7.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  imul null, r1.x, v4.w, l(3)
  mul r5.xyzw, r1.wwww, cb6[r1.x + 0].xyzw
  mul r6.xyzw, r1.wwww, cb6[r1.x + 1].xyzw
  mul r1.xyzw, r1.wwww, cb6[r1.x + 2].xyzw
  add r3.xyzw, r3.xyzw, r5.xyzw  // blendMatrix<0:NaN:Inf,3:NaN:Inf,6:NaN:Inf,9:NaN:Inf>
  add r4.xyzw, r4.xyzw, r6.xyzw  // blendMatrix<1:NaN:Inf,4:NaN:Inf,7:NaN:Inf,10:NaN:Inf>
  add r1.xyzw, r1.xyzw, r2.xyzw  // blendMatrix<2:NaN:Inf,5:NaN:Inf,8:NaN:Inf,11:NaN:Inf>
  nop 

#line 416
  dp4 r0.x, v0.xyzw, r3.xyzw  // ApplyMatrixT<0:NaN:Inf>
  dp4 r0.y, v0.xyzw, r4.xyzw  // ApplyMatrixT<1:NaN:Inf>
  dp4 r0.z, v0.xyzw, r1.xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 27
  mov r0.xyz, r0.xyzx  // position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  nop 
  nop 

#line 47
  mov r0.xyz, r0.xyzx  // inPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
endif 

#line 56
nop 
nop 

#line 165
nop 

#line 81
nop 

#line 122
nop 

#line 408
mov r0.w, v0.w
dp4 r1.x, r0.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r1.y, r0.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r1.z, r0.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r1.w, r0.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 123
nop 

#line 408
dp4 r0.x, r1.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r0.y, r1.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r0.z, r1.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r0.w, r1.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 123
mov r0.xyzw, r0.xyzw  // hPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 

#line 81
mov r0.xyzw, r0.xyzw  // outProjectionPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 

#line 165
mov r0.xyzw, r0.xyzw  // NGetProjection_getProjection_outProjectionPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 176
mov r1.x, r0.w  // NCalcFogFactor_calcFogFactor_inDepth<0:NaN:Inf>
nop 
mov r1.x, r1.x  // inDepth<0:NaN:Inf>

#line 144
mul r1.x, r1.x, cb2[24].x
add r1.x, r1.x, cb2[24].y  // outFactor<0:NaN:Inf>

#line 177
mov r1.x, r1.x  // NCalcFogFactor_calcFogFactor_outFactor<0:NaN:Inf>

#line 168
mov o2.xyzw, r0.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 177
mov o1.x, r1.x  // outFogFactor<0:NaN:Inf>
mov o1.y, r0.w  // outFogFactor<1:NaN:Inf>

#line 169
mov o0.xy, v6.xyxx  // outBaseUV<0,1>

#line 179
mov o1.z, cb5[8].w  // outFogFactor<2>

#line 130
ret 
// Approximately 75 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(70,14-15): warning X3578: Output value 'o0' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
