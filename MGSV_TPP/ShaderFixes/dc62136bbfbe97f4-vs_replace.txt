// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i dc62136bbfbe97f4-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:22 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float3 v3 : TEXCOORD1,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[4];
  float4 x1[4];
  float4 x2[4];
  float4 x3[4];
  r0.xyzw = v1.xyzw;
  r1.xy = v2.xy;
  r2.w = 1;
  r2.xyz = v0.xyz;
  r3.x = dot(r2.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r3.z = dot(r2.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r2.xyzw = g_vsMaterial.m_materials[0].xyzw;
  r4.xyzw = g_vsMaterial.m_materials[1].wxyz;
  r5.xyzw = g_vsMaterial.m_materials[2].xyzw;
  r6.xyzw = g_vsMaterial.m_materials[3].wxyz;
  x0[0].x = r2.x;
  x0[1].x = r2.y;
  x0[2].x = r2.z;
  x0[3].x = r2.w;
  x1[0].x = r4.y;
  x1[1].x = r4.z;
  x1[2].x = r4.w;
  x1[3].x = r4.x;
  x2[0].x = r5.x;
  x2[1].x = r5.y;
  x2[2].x = r5.z;
  x2[3].x = r5.w;
  x3[0].x = r6.y;
  x3[1].x = r6.z;
  x3[2].x = r6.w;
  x3[3].x = r6.x;
  r2.xyz = g_vsMaterial.m_materials[6].xyz;
  r5.xyz = g_vsMaterial.m_materials[4].xyz * v3.xxx;
  r7.xyz = g_vsMaterial.m_materials[5].xyz * v3.yyy;
  r5.xyz = r7.xyz + r5.xyz;
  r7.xyz = g_vsMaterial.m_materials[6].xyz * v3.zzz;
  r5.xyz = r7.xyz + r5.xyz;
  r7.xyz = float3(1,1,1) * g_vsMaterial.m_materials[7].xyz;
  r5.xyz = r7.xyz + r5.xyz;
  r7.xyz = g_vsScene.m_view._m02_m12_m22;
  r1.z = dot(r7.xyz, r2.xyz);
  r1.z = -0.5 * r1.z;
  r1.z = 0.5 + r1.z;
  r1.z = 3.1400001 * r1.z;
  r1.w = 0;
  r2.x = r4.x;
  r2.y = r1.w;
  while (true) {
    r2.z = cmp((int)r2.y < 4);
    if (r2.z == 0) break;
    r2.z = r2.y;
    r2.w = x0[r2.z+0].x;
    r3.w = cmp(r1.z < r2.w);
    if (r3.w != 0) {
      if (r2.y == 0) {
        r2.x = r4.y;
        break;
      }
      r3.w = (int)r2.y + -1;
      r4.z = x0[r3.w+0].x;
      r4.z = -r4.z;
      r4.w = r4.z + r1.z;
      r2.w = r4.z + r2.w;
      r2.w = r4.w / r2.w;
      r3.w = x1[r3.w+0].x;
      r2.z = x1[r2.z+0].x;
      r4.z = -r3.w;
      r2.z = r4.z + r2.z;
      r2.z = r2.w * r2.z;
      r2.z = r3.w + r2.z;
      r2.x = r2.z;
      break;
    }
    r2.y = (int)r2.y + 1;
  }
  r4.x = r6.x;
  r4.y = r1.w;
  while (true) {
    r2.y = cmp((int)r4.y < 4);
    if (r2.y == 0) break;
    r2.y = r4.y;
    r2.z = x2[r2.y+0].x;
    r2.w = cmp(r1.z < r2.z);
    if (r2.w != 0) {
      if (r4.y == 0) {
        r4.x = r6.y;
        break;
      }
      r2.w = (int)r4.y + -1;
      r3.w = x2[r2.w+0].x;
      r3.w = -r3.w;
      r4.z = r3.w + r1.z;
      r2.z = r3.w + r2.z;
      r2.z = r4.z / r2.z;
      r2.w = x3[r2.w+0].x;
      r2.y = x3[r2.y+0].x;
      r3.w = -r2.w;
      r2.y = r3.w + r2.y;
      r2.y = r2.z * r2.y;
      r2.y = r2.w + r2.y;
      r4.x = r2.y;
      break;
    }
    r4.y = (int)r4.y + 1;
  }
  r4.xyzw = r4.xxxx;
  r2.yzw = -r5.xyz;
  r2.yzw = r3.xyz + r2.yzw;
  r2.xyz = r2.xxx * r2.yzw;
  r2.xyz = r5.xyz + r2.xyz;
  r2.w = 1;
  r3.x = dot(r2.xyzw, g_vsScene.m_view._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, g_vsScene.m_view._m01_m11_m21_m31);
  r3.z = dot(r2.xyzw, g_vsScene.m_view._m02_m12_m22_m32);
  r2.w = dot(r2.xyzw, g_vsScene.m_view._m03_m13_m23_m33);
  r1.z = dot(r3.xyz, r3.xyz);
  r1.z = rsqrt(r1.z);
  r5.xyz = r3.xyz * r1.zzz;
  r1.z = g_vsObject.m_localParam[3].w;
  r5.xyz = r5.xyz * r1.zzz;
  r2.xyz = r5.xyz + r3.xyz;
  r3.x = dot(r2.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r3.z = dot(r2.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r3.w = dot(r2.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r1.z = g_vsObject.m_localParam[3].z;
  r1.z = cmp(r1.z < 0);
  r1.z = r1.z ? 1 : 0;
  r1.z = cmp(r1.z == 1.000000);
  r0.xyzw = r1.zzzz ? r4.xyzw : r0.xyzw;
  r1.w = r0.w * r4.w;
  r0.w = r1.z ? 1 : r1.w;
  r1.z = g_vsObject.m_localParam[3].x;
  r1.w = -r1.z;
  r2.x = max(r1.z, r1.w);
  r2.y = g_vsScene.m_exposure.z;

o0.xyzw = r3.xyzw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i dc62136bbfbe97f4-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r3.w != 1.0)
  r3.x += stereo.x * (r3.w - stereo.y);

  r2.z = r3.w;
  r1.z = g_vsObject.m_localParam[3].y;
  r1.z = cmp(r1.z < 0);
  r2.w = r1.z ? 1 : 0;

  // o0.xyzw = r3.xyzw; // Relocated from here with hlsltool.py

  o3.xyzw = r0.xyzw;
  o1.xy = r1.xy;
  o2.xyzw = r2.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[24], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 8
dcl_indexableTemp x0[4], 4
dcl_indexableTemp x1[4], 4
dcl_indexableTemp x2[4], 4
dcl_indexableTemp x3[4], 4

#line 205 "d:\work\master\git_clone\_intermediate\win64\FxShaders_dx11_win64\Release\Prim_Poly_CamDotCurveSizAlp_VF_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inColor<0,1,2,3>

#line 210
mov r0.xyzw, r0.xyzw  // NTransformInputCamDotCurve_transform_inColor<0,1,2,3>
mov r1.xy, v2.xyxx  // NTransformInputCamDotCurve_transform_inUV<0,1>
nop 
mov r0.xyzw, r0.xyzw  // inColor<0,1,2,3>
mov r1.xy, r1.xyxx  // inUV<0,1>

#line 43
nop 
mov r2.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r2.xyz, v0.xyzx
dp4 r3.x, r2.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r2.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r2.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 43
mov r3.xyz, r3.xyzx  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyzw, cb4[0].xyzw  // materials0<0,1,2,3>
mov r4.xyzw, cb4[1].wxyz  // materials1<3,0,1,2>
mov r5.xyzw, cb4[2].xyzw  // materials2<0,1,2,3>
mov r6.xyzw, cb4[3].wxyz  // materials3<3,0,1,2>
mov x0[0].x, r2.x  // sizeXVector<0>
mov x0[1].x, r2.y  // sizeXVector<1>
mov x0[2].x, r2.z  // sizeXVector<2>
mov x0[3].x, r2.w  // sizeXVector<3>
mov x1[0].x, r4.y  // sizeScaleVector<0>
mov x1[1].x, r4.z  // sizeScaleVector<1>
mov x1[2].x, r4.w  // sizeScaleVector<2>
mov x1[3].x, r4.x  // sizeScaleVector<3>
mov x2[0].x, r5.x  // alphaXVector<0>
mov x2[1].x, r5.y  // alphaXVector<1>
mov x2[2].x, r5.z  // alphaXVector<2>
mov x2[3].x, r5.w  // alphaXVector<3>
mov x3[0].x, r6.y  // alphaScaleVector<0>
mov x3[1].x, r6.z  // alphaScaleVector<1>
mov x3[2].x, r6.w  // alphaScaleVector<2>
mov x3[3].x, r6.x  // alphaScaleVector<3>

#line 63
nop 

#line 463
mov r2.xyz, cb4[6].xyzx  // GetRowT<0,1,2>

#line 63
mov r2.xyz, r2.xyzx  // worldZAxis<0,1,2>
nop 

#line 408
mul r5.xyz, v3.xxxx, cb4[4].xyzx
mul r7.xyz, v3.yyyy, cb4[5].xyzx
add r5.xyz, r5.xyzx, r7.xyzx
mul r7.xyz, v3.zzzz, cb4[6].xyzx
add r5.xyz, r5.xyzx, r7.xyzx
mul r7.xyz, cb4[7].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r5.xyz, r5.xyzx, r7.xyzx  // ApplyMatrixT<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 64
mov r5.xyz, r5.xyzx  // worldParticlePos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 183
nop 

#line 459
mov r7.xyz, cb2[10].xyzx  // GetRow<0,1,2>

#line 183
mov r7.xyz, r7.xyzx  // GetCameraWorldDirection<0,1,2>

#line 66
mov r7.xyz, r7.xyzx  // cameraZ<0,1,2>

#line 73
dp3 r1.z, r7.xyzx, r2.xyzx  // dotResult<0:NaN:Inf>

#line 76
mul r1.z, r1.z, l(-0.500000)
add r1.z, r1.z, l(0.500000)
mul r1.z, r1.z, l(3.140000)  // key<0:NaN:Inf>
mov r4.x, r4.x  // sizeRate<0>
mov r6.x, r6.x  // alphaRate<0>

#line 128
mov r1.w, l(0)  // i<0: 0>
mov r2.x, r4.x  // sizeRate<0>
mov r2.y, r1.w  // i<0>
loop 
  ilt r2.z, r2.y, l(4)
  breakc_z r2.z
  mov r2.z, r2.y
  mov r2.w, x0[r2.z + 0].x  // sizeXVector<0>
  mov r2.w, r2.w  // srcX<0>
  lt r3.w, r1.z, r2.w
  if_nz r3.w
    if_z r2.y
      mov r2.x, r4.y  // sizeRate<0>
      break 
    endif 

#line 135
    iadd r3.w, r2.y, l(-1)
    mov r4.z, x0[r3.w + 0].x  // sizeXVector<0>
    mov r4.z, r4.z  // prevSrcX<0>
    mov r4.z, -r4.z
    add r4.w, r1.z, r4.z
    add r2.w, r2.w, r4.z
    div r2.w, r4.w, r2.w  // scale<0:NaN:Inf>
    mov r3.w, x1[r3.w + 0].x  // sizeScaleVector<0>
    mov r2.z, x1[r2.z + 0].x  // sizeScaleVector<0>
    mov r4.z, -r3.w
    add r2.z, r2.z, r4.z
    mul r2.z, r2.z, r2.w
    add r2.z, r2.z, r3.w  // sizeRate<0:NaN:Inf>
    mov r2.x, r2.z  // sizeRate<0:NaN:Inf>
    break 

#line 130
  endif 
  iadd r2.y, r2.y, l(1)  // i<0>
endloop 

#line 141
mov r4.x, r6.x  // alphaRate<0>
mov r4.y, r1.w  // i<0>
loop 
  ilt r2.y, r4.y, l(4)
  breakc_z r2.y
  mov r2.y, r4.y
  mov r2.z, x2[r2.y + 0].x  // alphaXVector<0>
  mov r2.z, r2.z  // srcX<0>
  lt r2.w, r1.z, r2.z
  if_nz r2.w
    if_z r4.y
      mov r4.x, r6.y  // alphaRate<0>
      break 
    endif 

#line 148
    iadd r2.w, r4.y, l(-1)
    mov r3.w, x2[r2.w + 0].x  // alphaXVector<0>
    mov r3.w, r3.w  // prevSrcX<0>
    mov r3.w, -r3.w
    add r4.z, r1.z, r3.w
    add r2.z, r2.z, r3.w
    div r2.z, r4.z, r2.z  // scale<0:NaN:Inf>
    mov r2.w, x3[r2.w + 0].x  // alphaScaleVector<0>
    mov r2.y, x3[r2.y + 0].x  // alphaScaleVector<0>
    mov r3.w, -r2.w
    add r2.y, r2.y, r3.w
    mul r2.y, r2.y, r2.z
    add r2.y, r2.y, r2.w  // alphaRate<0:NaN:Inf>
    mov r4.x, r2.y  // alphaRate<0:NaN:Inf>
    break 

#line 143
  endif 
  iadd r4.y, r4.y, l(1)  // i<0>
endloop 
mov r4.xyzw, r4.xxxx  // alphaRate<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>

#line 157
mov r2.yzw, -r5.xxyz
add r2.yzw, r2.yyzw, r3.xxyz
mul r2.xyz, r2.yzwy, r2.xxxx
add r2.xyz, r2.xyzx, r5.xyzx  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r2.w, l(1.000000)  // vec<3: 1f>

#line 408
dp4 r3.x, r2.xyzw, cb2[8].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r2.xyzw, cb2[9].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r2.xyzw, cb2[10].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r2.w, r2.xyzw, cb2[11].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 159
mov r3.xyz, r3.xyzx  // viewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r1.z, r3.xyzx, r3.xyzx
rsq r1.z, r1.z
mul r5.xyz, r1.zzzz, r3.xyzx
nop 

#line 152
nop 

#line 48
mov r1.z, cb5[12].w  // GetBaseColor<3>

#line 152
mov r1.z, r1.z  // GetCameraZOffset<0>

#line 160
mul r5.xyz, r1.zzzz, r5.xyzx
add r2.xyz, r3.xyzx, r5.xyzx  // viewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 408
dp4 r3.x, r2.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r2.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r2.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r3.w, r2.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 161
mov r3.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 164
nop 

#line 128
nop 

#line 48
mov r1.z, cb5[12].z  // GetBaseColor<2>

#line 128
mov r1.z, r1.z  // param<0>
lt r1.z, r1.z, l(0.000000)
movc r1.z, r1.z, l(1.000000), l(0)  // GetOpaqueMode<0:[-0f,1f]>

#line 164
eq r1.z, r1.z, l(1.000000)
movc r0.xyzw, r1.zzzz, r4.xyzw, r0.xyzw  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 

#line 128
nop 

#line 165
mul r1.w, r4.w, r0.w
movc r0.w, r1.z, l(1.000000), r1.w  // inColor<3:NaN:Inf>

#line 175
mov r0.xyz, r0.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, r0.w  // outColor<3:NaN:Inf>
mov r1.xy, r1.xyxx  // outBaseUV<0,1>
nop 

#line 206
nop 

#line 48
mov r1.z, cb5[12].x  // GetBaseColor<0>

#line 206
mov r1.w, -r1.z
max r2.x, r1.w, r1.z  // GetLuminance<0:[0f,3.40282e+038f]>

#line 179
mov r2.x, r2.x  // outParams<0:[0f,3.40282e+038f]>
nop 

#line 41
mov r2.y, cb2[23].z  // GetCurrentExposureValue<0>

#line 180
mov r2.y, r2.y  // outParams<1>
mov r2.z, r3.w  // outParams<2:NaN:Inf>
nop 

#line 111
nop 

#line 48
mov r1.z, cb5[12].y  // GetBaseColor<1>

#line 111
mov r1.z, r1.z  // param<0>
lt r1.z, r1.z, l(0.000000)
movc r2.w, r1.z, l(1.000000), l(0)  // GetBlendMode<0:[-0f,1f]>

#line 182
mov r2.w, r2.w  // outParams<3:[-0f,1f]>

#line 213
mov r3.xyzw, r3.xyzw  // NTransformInputCamDotCurve_transform_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // NTransformInputCamDotCurve_transform_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r1.xy, r1.xyxx  // NTransformInputCamDotCurve_transform_outBaseUV<0,1>
mov r2.x, r2.x  // NTransformInputCamDotCurve_transform_outParams<0:[0f,3.40282e+038f]>
mov r2.y, r2.y  // NTransformInputCamDotCurve_transform_outParams<1>
mov r2.z, r2.z  // NTransformInputCamDotCurve_transform_outParams<2:NaN:Inf>
mov r2.w, r2.w  // NTransformInputCamDotCurve_transform_outParams<3:[-0f,1f]>
mov o0.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o3.xyzw, r0.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xy, r1.xyxx  // outBaseUV<0,1>
mov o2.xyzw, r2.xyzw  // outParams<0:[0f,3.40282e+038f],1,2:NaN:Inf,3:[-0f,1f]>

#line 193
ret 
// Approximately 192 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(62,14-15): warning X3578: Output value 'o1' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
