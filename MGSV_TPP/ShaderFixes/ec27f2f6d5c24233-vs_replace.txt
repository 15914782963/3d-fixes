// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:46 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : NORMAL0,
  float4 v2 : TANGENT0,
  float2 v3 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float3 o6 : TEXCOORD5)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[3];
  r0.xyzw = v1.xyzw;
  r1.xyzw = v2.wxyz;
  r1.x = r1.x;
  r1.x = r1.x;
  r1.x = 2 * r1.x;
  r1.x = -1 + r1.x;
  r2.x = -r1.x;
  r2.x = max(r2.x, r1.x);
  r2.x = 0.00999999978 + r2.x;
  r2.y = cmp(0 < r1.x);
  r1.x = cmp(r1.x < 0);
  r1.x = (int)r1.x + (int)-r2.y;
  r1.x = (int)r1.x;
  r2.x = r2.x;
  r1.x = r1.x;
  r2.yz = v3.xy;
  r0.xyz = r0.xyz;
  r1.yzw = r1.yzw;
  r2.yz = r2.yz;
  r0.xyz = r0.xyz;
  r1.yzw = r1.yzw;
  r3.w = 1;
  r3.xyz = v0.xyz;
  r4.x = dot(r3.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r4.y = dot(r3.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r4.z = dot(r3.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r4.w = dot(r3.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r3.x = r4.x;
  r3.y = r4.y;
  r3.z = r4.z;
  r3.xyz = r3.xyz;
  r3.xyz = r3.xyz;
  r5.x = dot(r4.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r5.y = dot(r4.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r5.z = dot(r4.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r5.w = dot(r4.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r5.xyzw = r5.xyzw;
  r5.z = 0.0199999996 + r5.z;
  r2.yz = r2.yz;
  r4.xyz = float3(2,2,2) * r0.xyz;
  r4.xyz = float3(-1,-1,-1) + r4.xyz;
  r4.w = 0;
  r6.x = dot(r4.xyzw, g_vsScene.m_view._m00_m10_m20_m30);
  r6.y = dot(r4.xyzw, g_vsScene.m_view._m01_m11_m21_m31);
  r6.z = dot(r4.xyzw, g_vsScene.m_view._m02_m12_m22_m32);
  r1.yzw = float3(2,2,2) * r1.yzw;
  r4.xyz = float3(-1,-1,-1) + r1.yzw;
  r4.w = 0;
  r7.x = dot(r4.xyzw, g_vsScene.m_view._m00_m10_m20_m30);
  r7.y = dot(r4.xyzw, g_vsScene.m_view._m01_m11_m21_m31);
  r7.z = dot(r4.xyzw, g_vsScene.m_view._m02_m12_m22_m32);
  r1.yzw = r6.zxy;
  r4.xyz = r7.yzx;
  r8.xyz = r4.yzx * r1.wyz;
  r1.yzw = r4.xyz * r1.yzw;
  r1.yzw = -r1.yzw;
  r1.yzw = r8.xyz + r1.yzw;
  r5.xyw = r5.xyw;
  r5.z = r5.z;
  r3.xyz = r3.xyz;
  r2.yz = r2.yz;
  r2.w = v0.w;
  r2.w = r2.w;
  r4.xyz = g_vsMaterial.m_materials[1].xyz;
  r3.w = g_vsMaterial.m_materials[1].w;
  r4.w = -r3.w;
  r4.w = 1 + r4.w;
  r0.x = dot(r4.xyz, r0.xyz);
  r0.x = max(0, r0.x);
  r0.x = min(1, r0.x);
  r0.x = r3.w * r0.x;
  r0.x = r4.w + r0.x;
  r0.x = r2.w * r0.x;
  r0.x = r0.x;
  o0.xyzw = r5.xyzw;
  x0[0].xyz = r7.xyz;
  x0[1].xyz = r1.yzw;
  x0[2].xyz = r6.xyz;
  o1.xy = r2.yz;
  o1.w = r0.x;
  o2.xyz = r3.xyz;
  o3.x = r2.x;
  o3.y = r1.x;
  o1.z = r0.w;
  r0.xyz = x0[0].xyz;
  r1.xyz = x0[1].xyz;
  r2.xyz = x0[2].xyz;
  o4.xyz = r0.xyz;
  o5.xyz = r1.xyz;
  o6.xyz = r2.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xy          3     NONE   float   xy  
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[11], immediateIndexed
dcl_constantbuffer cb5[4], immediateIndexed
dcl_constantbuffer cb4[2], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xy
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyz
dcl_temps 9
dcl_indexableTemp x0[3], 4

#line 80 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\TppSkidmarksDecal_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inNormal<0,1,2,3>
mov r1.xyzw, v2.wxyz  // inTangent<3,0,1,2>

#line 91
mov r1.x, r1.x  // NExtractInformation_extractInfo_inTextureInfo<0>
nop 
mov r1.x, r1.x  // inTextureInfo<0>

#line 44
mul r1.x, r1.x, l(2.000000)
add r1.x, r1.x, l(-1.000000)  // textureInfo<0:Inf>
mov r2.x, -r1.x
max r2.x, r1.x, r2.x
add r2.x, r2.x, l(0.010000)  // outTextureId<0:Inf:[0.01f,1.#INFf]>
lt r2.y, l(0.000000), r1.x
lt r1.x, r1.x, l(0.000000)
iadd r1.x, r1.x, -r2.y
itof r1.x, r1.x  // outIsMirror<0:[-2.14748e+009f,2.14748e+009f]>

#line 92
mov r2.x, r2.x  // NExtractInformation_extractInfo_outTextureId<0:Inf:[0.01f,1.#INFf]>
mov r1.x, r1.x  // NExtractInformation_extractInfo_outIsMirror<0:[-2.14748e+009f,2.14748e+009f]>

#line 88
mov r2.yz, v3.xxyx  // NTransformInput_transform_inBaseUV<0,1>
mov r0.xyz, r0.xyzx  // NTransformInput_transform_inNormal<0,1,2>
mov r1.yzw, r1.yyzw  // NTransformInput_transform_inTangent<0,1,2>
nop 
mov r2.yz, r2.yyzy  // inBaseUV<0,1>
mov r0.xyz, r0.xyzx  // inNormal<0,1,2>
mov r1.yzw, r1.yyzw  // inTangent<0,1,2>

#line 23
nop 
mov r3.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r3.xyz, v0.xyzx
dp4 r4.x, r3.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r4.y, r3.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r4.z, r3.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r4.w, r3.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>
mov r3.x, r4.x  // ApplyMatrixT<0:NaN:Inf>
mov r3.y, r4.y  // ApplyMatrixT<1:NaN:Inf>
mov r3.z, r4.z  // ApplyMatrixT<2:NaN:Inf>

#line 23
mov r3.xyz, r3.xyzx  // viewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.xyz, r3.xyzx  // outViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 408
dp4 r5.x, r4.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r5.y, r4.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r5.z, r4.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r5.w, r4.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 25
mov r5.xyzw, r5.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
add r5.z, r5.z, l(0.020000)  // outPosition<2:NaN:Inf>
mov r2.yz, r2.yyzy  // outUV<0,1>
nop 
mul r4.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
add r4.xyz, r4.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // vec<0:Inf,1:Inf,2:Inf>

#line 412
mov r4.w, l(0)
dp4 r6.x, r4.xyzw, cb2[8].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r6.y, r4.xyzw, cb2[9].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r6.z, r4.xyzw, cb2[10].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 31
nop 
mul r1.yzw, r1.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000)
add r4.xyz, r1.yzwy, l(-1.000000, -1.000000, -1.000000, 0.000000)  // vec<0:Inf,1:Inf,2:Inf>

#line 412
mov r4.w, l(0)
dp4 r7.x, r4.xyzw, cb2[8].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r7.y, r4.xyzw, cb2[9].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r7.z, r4.xyzw, cb2[10].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 32
mov r1.yzw, r6.zzxy
mov r4.xyz, r7.yzxy
mul r8.xyz, r1.wyzw, r4.yzxy
mul r1.yzw, r1.yyzw, r4.xxyz
mov r1.yzw, -r1.yyzw
add r1.yzw, r1.yyzw, r8.xxyz

#line 91
mov r5.xyw, r5.xyxw  // NTransformInput_transform_outPosition<0:NaN:Inf,1:NaN:Inf,3:NaN:Inf>
mov r5.z, r5.z  // NTransformInput_transform_outPosition<2:NaN:Inf>
mov r3.xyz, r3.xyzx  // NTransformInput_transform_outViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.yz, r2.yyzy  // NTransformInput_transform_outUV<0,1>
mov r2.w, v0.w  // NGetOpacity_getOpacity_inOpacity<0>
nop 
mov r2.w, r2.w  // inOpacity<0>

#line 59
mov r4.xyz, cb4[1].xyzx  // sunDir<0,1,2>
mov r3.w, cb4[1].w  // ratio<0>
mov r4.w, -r3.w
add r4.w, r4.w, l(1.000000)
dp3 r0.x, r4.xyzx, r0.xyzx
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)
mul r0.x, r0.x, r3.w
add r0.x, r0.x, r4.w
mul r0.x, r0.x, r2.w  // outOpacity<0:NaN:Inf>

#line 94
mov r0.x, r0.x  // NGetOpacity_getOpacity_outOpacity<0:NaN:Inf>
mov o0.xyzw, r5.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov x0[0].xyz, r7.xyzx  // outTangentToView<0,1,2>
mov x0[1].xyz, r1.yzwy  // outTangentToView<3,4,5>
mov x0[2].xyz, r6.xyzx  // outTangentToView<6,7,8>
mov o1.xy, r2.yzyy  // outUVOpacityNumber<0,1>
mov o1.w, r0.x  // outUVOpacityNumber<3:NaN:Inf>
mov o2.xyz, r3.xyzx  // outViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o3.x, r2.x  // outTextureInfo<0:Inf:[0.01f,1.#INFf]>
mov o3.y, r1.x  // outTextureInfo<1:[-2.14748e+009f,2.14748e+009f]>

#line 98
mov o1.z, r0.w  // outUVOpacityNumber<2>

#line 67
mov r0.xyz, x0[0].xyzx  // outTangentToView<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, x0[1].xyzx  // outTangentToView<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
mov r2.xyz, x0[2].xyzx  // outTangentToView<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
mov o4.xyz, r0.xyzx  // outTangentToView<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o5.xyz, r1.xyzx  // outTangentToView<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
mov o6.xyz, r2.xyzx  // outTangentToView<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
ret 
// Approximately 98 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(63,14-15): warning X3578: Output value 'o2' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(64,14-15): warning X3578: Output value 'o3' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(65,14-15): warning X3578: Output value 'o4' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(66,14-15): warning X3578: Output value 'o5' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
