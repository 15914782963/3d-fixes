// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i 4886bb45bb193f9d-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:45 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  out float4 o0 : SV_Position0,
  out float3 o1 : TEXCOORD0,
  out float p1 : TEXCOORD1,
  out float4 o2 : TEXCOORD3,
  out float4 o3 : TEXCOORD4,
  out float4 o4 : TEXCOORD6,
  out float4 o5 : TEXCOORD7)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = v1.xyzw;
  r1.xy = v0.xy;
  r2.x = g_vsObject.m_world._m01;
  r2.w = g_vsObject.m_world._m02;
  r2.z = r2.x;
  r2.y = g_vsMaterial.m_materials[6].z;
  r3.x = g_vsScene.m_view._m30;
  r3.y = g_vsScene.m_view._m31;
  r3.z = g_vsScene.m_view._m32;
  r3.xyz = -r3.xyz;
  r4.x = g_vsScene.m_view._m00;
  r4.y = g_vsScene.m_view._m01;
  r4.z = g_vsScene.m_view._m02;
  r4.x = dot(r4.xyz, r3.xyz);
  r5.x = g_vsScene.m_view._m10;
  r5.y = g_vsScene.m_view._m11;
  r5.z = g_vsScene.m_view._m12;
  r4.y = dot(r5.xyz, r3.xyz);
  r5.x = g_vsScene.m_view._m20;
  r5.y = g_vsScene.m_view._m21;
  r5.z = g_vsScene.m_view._m22;
  r4.z = dot(r5.xyz, r3.xyz);
  r1.z = g_vsMaterial.m_materials[6].y;
  r3.w = -r1.z;
  r3.xyz = float3(0,1,0);
  r5.x = g_vsScene.m_view._m10;
  r5.y = g_vsScene.m_view._m11;
  r5.z = g_vsScene.m_view._m12;
  r4.w = 1;
  r1.z = dot(r3.xyzw, r4.xyzw);
  r3.xy = g_vsScene.m_projectionParam.xy * r1.xy;
  r3.z = 1;
  r1.x = dot(r3.xyz, r5.xyz);
  r1.y = cmp(r1.x >= 0);
  if (r1.y != 0) {
    r1.yw = r5.xy * r1.xx;
    r1.yw = -r1.yw;
    r3.xy = r3.xy + r1.yw;
  }
  r1.x = -r1.x;
  r1.x = max(9.99999975e-005, r1.x);
  r1.x = r1.z / r1.x;
  r3.z = 1;
  r1.xyz = r3.xyz * r1.xxx;
  r3.xyz = r1.xyz;
  r5.x = g_vsScene.m_view._m00;
  r5.y = g_vsScene.m_view._m01;
  r5.z = g_vsScene.m_view._m02;
  r5.x = dot(r5.xyz, r3.xyz);
  r6.x = g_vsScene.m_view._m10;
  r6.y = g_vsScene.m_view._m11;
  r6.z = g_vsScene.m_view._m12;
  r5.y = dot(r6.xyz, r3.xyz);
  r6.x = g_vsScene.m_view._m20;
  r6.y = g_vsScene.m_view._m21;
  r6.z = g_vsScene.m_view._m22;
  r5.z = dot(r6.xyz, r3.xyz);
  r3.xyz = r5.xyz + r4.xyz;
  r4.xy = -r4.xz;
  r4.xy = r4.xy + r3.xz;
  r3.w = dot(r4.xy, r4.xy);
  r2.x = sqrt(r3.w);
  r4.x = g_vsScene.m_view._m02;
  r4.z = g_vsScene.m_view._m22;
  r4.y = 0;
  r3.w = dot(r4.xyz, r4.xyz);
  r3.w = rsqrt(r3.w);
  r4.xy = r4.xz * r3.ww;
  r1.w = 1;
  r5.x = dot(r1.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r5.y = dot(r1.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r5.z = dot(r1.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r5.w = dot(r1.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);

o0.xyzw = r5.xyzw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i 4886bb45bb193f9d-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r5.w != 1.0)
  r5.x += stereo.x * (r5.w - stereo.y);

  r1.x = 2 * r5.x;
  r1.x = -1 + r1.x;
  r1.w = -2 * r5.y;
  r1.y = 1 + r1.w;
  r1.z = r5.w;
  r4.zw = float2(0,0);

  // o0.xyzw = r5.xyzw; // Relocated from here with hlsltool.py

  o2.xyz = r1.xyz;
  o1.xyz = r3.xyz;
  p1.x = r5.w;
  o4.xyzw = r2.xyzw;
  o5.xyzw = r4.xyzw;
  o3.xyzw = r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xy  
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float       
// TEXCOORD                 1   xyzw        3     NONE   float       
// TEXCOORD                 2   xyzw        4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1      w        1     NONE   float      w
// TEXCOORD                 3   xyz         2     NONE   float   xyz 
// TEXCOORD                 4   xyzw        3     NONE   float   xyzw
// TEXCOORD                 6   xyzw        4     NONE   float   xyzw
// TEXCOORD                 7   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_constantbuffer cb4[7], immediateIndexed
dcl_input v0.xy
dcl_input v1.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 7

#line 163 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Primitive_Tpp24hOcean_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inColor<0,1,2,3>

#line 172
mov r1.xy, v0.xyxx  // NCalcVertexPosition_calcVertexPosition_inScreenPosition<0,1>
nop 
mov r1.xy, r1.xyxx  // inScreenPosition<0,1>

#line 69
nop 

#line 463
mov r2.x, cb5[5].x  // GetRowT<1>
mov r2.w, cb5[6].x  // GetRowT<2>

#line 69
mov r2.xw, r2.xxxw  // meshParams<1,2>
mov r2.z, r2.x  // horizonY<0>
mov r2.w, r2.w  // horizonSlope<0>
mov r2.y, cb4[6].z  // time<0>

#line 95
nop 

#line 463
mov r3.x, cb2[8].w  // GetRowT<0>
mov r3.y, cb2[9].w  // GetRowT<1>
mov r3.z, cb2[10].w  // GetRowT<2>

#line 95
mov r3.xyz, -r3.xyzx  // tmp<0,1,2>
nop 

#line 463
mov r4.x, cb2[8].x  // GetRowT<0>
mov r4.y, cb2[9].x  // GetRowT<1>
mov r4.z, cb2[10].x  // GetRowT<2>

#line 96
dp3 r4.x, r4.xyzx, r3.xyzx  // cameraTrans<0:NaN:Inf>
nop 

#line 463
mov r5.x, cb2[8].y  // GetRowT<0>
mov r5.y, cb2[9].y  // GetRowT<1>
mov r5.z, cb2[10].y  // GetRowT<2>

#line 97
dp3 r4.y, r5.xyzx, r3.xyzx  // cameraTrans<1:NaN:Inf>
nop 

#line 463
mov r5.x, cb2[8].z  // GetRowT<0>
mov r5.y, cb2[9].z  // GetRowT<1>
mov r5.z, cb2[10].z  // GetRowT<2>

#line 98
dp3 r4.z, r5.xyzx, r3.xyzx  // cameraTrans<2:NaN:Inf>
mov r1.z, cb4[6].y  // waterHeight<0>

#line 103
mov r3.w, -r1.z  // clipPlaneOrg<3>
mov r3.xyz, l(0,1.000000,0,0)  // clipPlaneOrg<0: 0f,1: 1f,2: 0f>
nop 

#line 463
mov r5.x, cb2[8].y  // GetRowT<0>
mov r5.y, cb2[9].y  // GetRowT<1>
mov r5.z, cb2[10].y  // GetRowT<2>

#line 105
mov r5.xyz, r5.xyzx  // clipPlaneOfView<0,1,2>
mov r4.w, l(1.000000)
dp4 r1.z, r3.xyzw, r4.xyzw  // clipPlaneOfView<3:NaN:Inf>

#line 109
mul r3.xy, r1.xyxx, cb2[21].xyxx  // viewDir<0:Inf,1:Inf>
mov r3.z, l(1.000000)  // viewDir<2: 1f>
dp3 r1.x, r3.xyzx, r5.xyzx  // unitLength<0:NaN:Inf>
ge r1.y, r1.x, l(0.000000)
if_nz r1.y
  mul r1.yw, r1.xxxx, r5.xxxy
  mov r1.yw, -r1.yyyw
  add r3.xy, r1.ywyy, r3.xyxx  // viewDir<0:NaN:Inf,1:NaN:Inf>
endif 

#line 118
mov r1.x, -r1.x
max r1.x, r1.x, l(0.000100)
div r1.x, r1.z, r1.x
mov r3.z, l(1.000000)
mul r1.xyz, r1.xxxx, r3.xyzx  // viewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.xyz, r1.xyzx  // viewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 121
nop 

#line 463
mov r5.x, cb2[8].x  // GetRowT<0>
mov r5.y, cb2[9].x  // GetRowT<1>
mov r5.z, cb2[10].x  // GetRowT<2>

#line 121
dp3 r5.x, r5.xyzx, r3.xyzx  // worldDir<0:NaN:Inf>
nop 

#line 463
mov r6.x, cb2[8].y  // GetRowT<0>
mov r6.y, cb2[9].y  // GetRowT<1>
mov r6.z, cb2[10].y  // GetRowT<2>

#line 122
dp3 r5.y, r6.xyzx, r3.xyzx  // worldDir<1:NaN:Inf>
nop 

#line 463
mov r6.x, cb2[8].z  // GetRowT<0>
mov r6.y, cb2[9].z  // GetRowT<1>
mov r6.z, cb2[10].z  // GetRowT<2>

#line 123
dp3 r5.z, r6.xyzx, r3.xyzx  // worldDir<2:NaN:Inf>
add r3.xyz, r4.xyzx, r5.xyzx  // currWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xy, -r4.xzxx
add r4.xy, r3.xzxx, r4.xyxx
dp2 r3.w, r4.xyxx, r4.xyxx
sqrt r2.x, r3.w  // distance<0:NaN:Inf>

#line 129
nop 

#line 463
mov r4.x, cb2[10].x  // GetRowT<2>

#line 129
nop 

#line 463
mov r4.z, cb2[10].z  // GetRowT<2>

#line 129
mov r4.y, l(0)
dp3 r3.w, r4.xyzx, r4.xyzx
rsq r3.w, r3.w
mul r4.xy, r3.wwww, r4.xzxx  // camDir<0:NaN:Inf,2:NaN:Inf>
nop 
nop 
mov r1.w, l(1.000000)  // vec<3: 1f>

#line 408
dp4 r5.x, r1.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r5.y, r1.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r5.z, r1.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r5.w, r1.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 133
mov r5.xyzw, r5.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mul r1.x, r5.x, l(2.000000)
add r1.x, r1.x, l(-1.000000)  // outBasePos<0:NaN:Inf>
mul r1.w, r5.y, l(-2.000000)
add r1.y, r1.w, l(1.000000)  // outBasePos<1:NaN:Inf>
mov r1.z, r5.w  // outBasePos<2:NaN:Inf>
mov r3.xyz, r3.xyzx  // outWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.z, r2.z  // outParams<2>
mov r2.w, r2.w  // outParams<3>
mov r2.x, r2.x  // outParams<0:NaN:Inf>
mov r2.y, r2.y  // outParams<1>
mov r4.xy, r4.xyxx  // outParams2<0:NaN:Inf,1:NaN:Inf>
mov r4.zw, l(0,0,0,0)  // outParams2<2: 0f,3: 0f>

#line 174
mov r5.xyzw, r5.xyzw  // NCalcVertexPosition_calcVertexPosition_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r1.x, r1.x  // NCalcVertexPosition_calcVertexPosition_outBasePos<0:NaN:Inf>
mov r1.y, r1.y  // NCalcVertexPosition_calcVertexPosition_outBasePos<1:NaN:Inf>
mov r1.z, r1.z  // NCalcVertexPosition_calcVertexPosition_outBasePos<2:NaN:Inf>
mov r3.xyz, r3.xyzx  // NCalcVertexPosition_calcVertexPosition_outWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyzw, r2.xyzw  // NCalcVertexPosition_calcVertexPosition_outParams<0:NaN:Inf,1,2,3>
mov r4.xyzw, r4.xyzw  // NCalcVertexPosition_calcVertexPosition_outParams2<0:NaN:Inf,1:NaN:Inf,2: 0f,3: 0f>
mov o0.xyzw, r5.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o2.xyz, r1.xyzx  // outBasePos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o1.xyz, r3.xyzx  // outWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o1.w, r5.w  // outDepth<0:NaN:Inf>
mov o4.xyzw, r2.xyzw  // outParams<0:NaN:Inf,1,2,3>
mov o5.xyzw, r4.xyzw  // outParams2<0:NaN:Inf,1:NaN:Inf,2: 0f,3: 0f>
mov o3.xyzw, r0.xyzw  // outColor<0,1,2,3>

#line 147
ret 
// Approximately 119 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(65,14-15): warning X3578: Output value 'o2' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
