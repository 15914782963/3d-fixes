// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:41 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float3 v3 : TEXCOORD1,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float3 o5 : TEXCOORD4)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = v1.xyzw;
  r0.xyzw = r0.xyzw;
  r1.xy = v2.xy;
  r0.xyzw = r0.xyzw;
  r1.xy = r1.xy;
  r2.w = 1;
  r2.xyz = v0.xyz;
  r3.x = dot(r2.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r1.z = dot(r2.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r3.w = dot(r2.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r1.z = r1.z;
  r1.w = g_vsObject.m_localParam[3].w;
  r1.w = r1.w;
  r3.z = r1.z + r1.w;
  r2.x = dot(r3.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r2.y = dot(r3.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r2.z = dot(r3.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r2.w = dot(r3.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r2.xyzw = r2.xyzw;
  r3.z = r2.w;
  r1.z = g_vsObject.m_localParam[3].y;
  r1.w = -r1.z;
  r1.w = max(r1.z, r1.w);
  r1.w = r1.w;
  r4.x = g_vsObject.m_localParam[3].z;
  r4.y = -r4.x;
  r4.y = max(r4.x, r4.y);
  r4.y = r4.y;
  r4.z = r3.z;
  r4.w = -r1.w;
  r5.x = r4.y + r4.w;
  r5.x = max(0.00100000005, r5.x);
  r4.w = r4.z + r4.w;
  r4.w = r4.w / r5.x;
  r4.w = max(0, r4.w);
  r4.w = min(1, r4.w);
  r1.w = cmp(r4.z < r1.w);
  r1.w = r1.w ? 0 : r4.w;
  r4.y = cmp(r4.y < r4.z);
  r1.w = r4.y ? 1 : r1.w;
  r4.x = r4.x;
  r4.x = cmp(r4.x < 0);
  r4.x = r4.x ? 1 : 0;
  r4.x = cmp(0 != r4.x);
  r1.w = r4.x ? 1 : r1.w;
  r1.w = r1.w;
  r1.w = r1.w;
  r4.w = 1;
  r4.xyz = v0.xyz;
  r5.x = dot(r4.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r5.y = dot(r4.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r5.z = dot(r4.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r5.xyz = r5.xyz;
  r4.w = 0;
  r4.xyz = v3.xyz;
  r6.x = dot(r4.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r6.y = dot(r4.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r6.z = dot(r4.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r6.xyz = r6.xyz;
  r4.xyz = g_vsScene.m_eyepos.xyz;
  r4.xyz = r4.xyz;
  r4.xyz = -r4.xyz;
  r4.xyz = r5.xyz + r4.xyz;
  r4.w = dot(r4.xyz, r4.xyz);
  r4.w = rsqrt(r4.w);
  r4.xyz = r4.xyz * r4.www;
  r0.w = r1.w * r0.w;
  r0.xyz = r0.xyz;
  r0.w = r0.w;
  r1.xy = r1.xy;
  r3.y = g_vsScene.m_exposure.z;
  r3.y = r3.y;
  r5.xyzw = g_vsMaterial.m_materials[0].xyzw;
  r5.x = r5.x;
  r5.y = r5.y;
  r1.w = max(0, r5.z);
  r4.w = max(0, r5.w);
  r5.z = log2(r3.y);
  r5.z = 0.693147182 * r5.z;
  r5.z = r5.z / 0.693147182;
  r5.z = -r5.z;
  r5.w = r3.y;
  r5.x = -r5.x;
  r5.z = r5.z + r5.x;
  r5.x = r5.y + r5.x;
  r5.x = r5.z / r5.x;
  r5.x = max(0, r5.x);
  r5.x = min(1, r5.x);
  r5.y = -r1.w;
  r4.w = r5.y + r4.w;
  r4.w = r5.x * r4.w;
  r1.w = r4.w + r1.w;
  r4.w = 1 / r5.w;
  r3.x = r4.w * r1.w;
  r3.x = r3.x;
  r3.x = r3.x;
  r1.z = r1.z;
  r1.z = cmp(r1.z < 0);
  r3.w = r1.z ? 1 : 0;
  r3.w = r3.w;
  r1.z = dot(r6.xyz, r6.xyz);
  r1.z = rsqrt(r1.z);
  r5.xyz = r6.xyz * r1.zzz;
  r4.xyz = r4.xyz;
  r2.xyzw = r2.xyzw;
  r0.xyzw = r0.xyzw;
  r5.xyz = r5.xyz;
  r4.xyz = r4.xyz;
  r1.xy = r1.xy;
  r3.x = r3.x;
  r3.y = r3.y;
  r3.z = r3.z;
  r3.w = r3.w;
  o0.xyzw = r2.xyzw;
  o3.xyzw = r0.xyzw;
  o1.xy = r1.xy;
  o2.xyzw = r3.xyzw;
  o4.xyz = r5.xyz;
  o5.xyz = r4.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[24], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyz
dcl_temps 7

#line 90 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Primitive_TppFxFire_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inColor<0,1,2,3>

#line 94
mov r0.xyzw, r0.xyzw  // NTransformInputCamDotNrmAlp_transform_inColor<0,1,2,3>
mov r1.xy, v2.xyxx  // NTransformInputCamDotNrmAlp_transform_inUV<0,1>
nop 
mov r0.xyzw, r0.xyzw  // inColor<0,1,2,3>
mov r1.xy, r1.xyxx  // inUV<0,1>

#line 40
nop 
mov r2.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r2.xyz, v0.xyzx
dp4 r3.x, r2.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r2.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r1.z, r2.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r3.w, r2.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 40
mov r1.z, r1.z  // viewPosition<2:NaN:Inf>
nop 

#line 152
nop 

#line 48
mov r1.w, cb5[12].w  // GetBaseColor<3>

#line 152
mov r1.w, r1.w  // GetCameraZOffset<0>

#line 41
add r3.z, r1.w, r1.z  // viewPosition<2:NaN:Inf>
nop 

#line 408
dp4 r2.x, r3.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r2.y, r3.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r2.z, r3.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r2.w, r3.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 42
mov r2.xyzw, r2.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 
mov r3.z, r2.w  // clipPositionW<0:NaN:Inf>

#line 278
nop 

#line 136
nop 

#line 48
mov r1.z, cb5[12].y  // GetBaseColor<1>

#line 136
mov r1.w, -r1.z
max r1.w, r1.w, r1.z  // GetCameraFadeInNear<0:[0f,3.40282e+038f]>

#line 278
mov r1.w, r1.w  // alphaNearZ<0:[0f,3.40282e+038f]>
nop 

#line 144
nop 

#line 48
mov r4.x, cb5[12].z  // GetBaseColor<2>

#line 144
mov r4.y, -r4.x
max r4.y, r4.y, r4.x  // GetCameraFadeInFar<0:[0f,3.40282e+038f]>

#line 279
mov r4.y, r4.y  // alphaFarZ<0:[0f,3.40282e+038f]>
mov r4.z, r3.z  // cameraZPos<0:NaN:Inf>
mov r4.w, -r1.w
add r5.x, r4.w, r4.y
max r5.x, r5.x, l(0.001000)  // fadeLen<0:[0.001f,3.40282e+038f]>
add r4.w, r4.w, r4.z
div r4.w, r4.w, r5.x  // t<0:NaN:Inf>
max r4.w, r4.w, l(0.000000)
min r4.w, r4.w, l(1.000000)  // t<0:[0f,1f]>
lt r1.w, r4.z, r1.w
movc r1.w, r1.w, l(0), r4.w  // t<0:[-0f,1f]>
lt r4.y, r4.y, r4.z
movc r1.w, r4.y, l(1.000000), r1.w  // t<0:[-0f,1f]>
nop 

#line 128
nop 
mov r4.x, r4.x  // param<0>
lt r4.x, r4.x, l(0.000000)
movc r4.x, r4.x, l(1.000000), l(0)  // GetOpaqueMode<0:[-0f,1f]>

#line 287
ne r4.x, l(0.000000, 0.000000, 0.000000, 0.000000), r4.x
movc r1.w, r4.x, l(1.000000), r1.w  // t<0:[-0f,1f]>
mov r1.w, r1.w  // CalculateCameraFadeInAlpha<0:[-0f,1f]>

#line 44
mov r1.w, r1.w  // fadeAlpha<0:[-0f,1f]>
nop 
mov r4.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r4.xyz, v0.xyzx
dp4 r5.x, r4.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r5.y, r4.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r5.z, r4.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 46
mov r5.xyz, r5.xyzx  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r4.w, l(0)  // vec<3: 0f>

#line 408
mov r4.xyz, v3.xyzx
dp4 r6.x, r4.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r6.y, r4.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r6.z, r4.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 47
mov r6.xyz, r6.xyzx  // worldNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 174
nop 

#line 64
mov r4.xyz, cb2[20].xyzx  // GetEyePosition<0,1,2>

#line 174
mov r4.xyz, r4.xyzx  // GetCameraEyePosition<0,1,2>

#line 49
mov r4.xyz, -r4.xyzx
add r4.xyz, r4.xyzx, r5.xyzx
dp3 r4.w, r4.xyzx, r4.xyzx
rsq r4.w, r4.w
mul r4.xyz, r4.wwww, r4.xyzx  // eyeToAt<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r0.w, r0.w, r1.w  // inColor<3>
mov r0.xyz, r0.xyzx  // outColor<0,1,2>
mov r0.w, r0.w  // outColor<3>
mov r1.xy, r1.xyxx  // outBaseUV<0,1>
nop 

#line 220
nop 

#line 41
mov r3.y, cb2[23].z  // GetCurrentExposureValue<0>

#line 220
mov r3.y, r3.y  // currentExposureShaderValue<0>
mov r5.xyzw, cb4[0].xyzw  // exposureInfo<0,1,2,3>

#line 228
mov r5.x, r5.x  // minEV<0>
mov r5.y, r5.y  // maxEV<0>
max r1.w, r5.z, l(0.000000)  // startExposureRate<0:[-0f,3.40282e+038f]>
max r4.w, r5.w, l(0.000000)  // endExposureRate<0:[-0f,3.40282e+038f]>

#line 241
log r5.z, r3.y
mul r5.z, r5.z, l(0.693147)
div r5.z, r5.z, l(0.693147)
mov r5.z, -r5.z  // currentEv<0:NaN:Inf>
mov r5.w, r3.y  // exposureValue<0>

#line 245
mov r5.x, -r5.x
add r5.z, r5.x, r5.z
add r5.x, r5.x, r5.y
div r5.x, r5.z, r5.x
max r5.x, r5.x, l(0.000000)
min r5.x, r5.x, l(1.000000)  // t<0:[0f,1f]>
mov r5.y, -r1.w
add r4.w, r4.w, r5.y
mul r4.w, r4.w, r5.x
add r1.w, r1.w, r4.w  // currentLuminanceRate<0:Inf>

#line 252
div r4.w, l(1.000000), r5.w
mul r3.x, r1.w, r4.w  // currentLuminance<0:NaN:Inf>
mov r3.x, r3.x  // GetLuminance<0:NaN:Inf>

#line 56
mov r3.x, r3.x  // outParams<0:NaN:Inf>
nop 
nop 

#line 111
nop 
mov r1.z, r1.z  // param<0>
lt r1.z, r1.z, l(0.000000)
movc r3.w, r1.z, l(1.000000), l(0)  // GetBlendMode<0:[-0f,1f]>

#line 59
mov r3.w, r3.w  // outParams<3:[-0f,1f]>
dp3 r1.z, r6.xyzx, r6.xyzx
rsq r1.z, r1.z
mul r5.xyz, r1.zzzz, r6.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // outCamreraEyeToAt<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 97
mov r2.xyzw, r2.xyzw  // NTransformInputCamDotNrmAlp_transform_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // NTransformInputCamDotNrmAlp_transform_outColor<0,1,2,3>
mov r5.xyz, r5.xyzx  // NTransformInputCamDotNrmAlp_transform_outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // NTransformInputCamDotNrmAlp_transform_outCamreraEyeToAt<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xy, r1.xyxx  // NTransformInputCamDotNrmAlp_transform_outBaseUV<0,1>
mov r3.x, r3.x  // NTransformInputCamDotNrmAlp_transform_outParams<0:NaN:Inf>
mov r3.y, r3.y  // NTransformInputCamDotNrmAlp_transform_outParams<1>
mov r3.z, r3.z  // NTransformInputCamDotNrmAlp_transform_outParams<2:NaN:Inf>
mov r3.w, r3.w  // NTransformInputCamDotNrmAlp_transform_outParams<3:[-0f,1f]>
mov o0.xyzw, r2.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o3.xyzw, r0.xyzw  // outColor<0,1,2,3>
mov o1.xy, r1.xyxx  // outBaseUV<0,1>
mov o2.xyzw, r3.xyzw  // outParams<0:NaN:Inf,1,2:NaN:Inf,3:[-0f,1f]>
mov o4.xyz, r5.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o5.xyz, r4.xyzx  // outCamreraEyeToAt<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 76
ret 
// Approximately 142 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(62,14-15): warning X3578: Output value 'o1' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(65,14-15): warning X3578: Output value 'o4' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
