// water reflection
// ---- Created with 3Dmigoto v1.2.27 on Thu Jan 28 02:00:13 2016

cbuffer cPSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_psScene : packoffset(c0);

}

cbuffer cPSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_psObject : packoffset(c0);

}

cbuffer cPSLight : register(b3)
{

  struct
  {
    float4 m_lightParams[11];
  } g_psLight : packoffset(c0);

}

cbuffer cPSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_psMaterial : packoffset(c0);

}

cbuffer cPSSystem : register(b0)
{

  struct
  {
    float4 m_param;
    float4 m_renderInfo;
    float4 m_renderBuffer;
    float4 m_dominantLightDir;
  } g_psSystem : packoffset(c0);

}

SamplerState g_samplerPoint_Clamp_s : register(s9);
SamplerState g_samplerLinear_Wrap_s : register(s10);
SamplerState g_samplerLinear_Clamp_s : register(s11);
SamplerComparisonState g_samplerComparisonLess_Linear_Clmap_s : register(s15);
Texture2D<float4> inBaseTexture : register(t0);
Texture2D<float4> inNormalTexture : register(t1);
TextureCube<float4> inCubeMap : register(t2);
Texture2D<float4> inDistortionTexture : register(t3);
Texture2D<float4> inRippleTexture : register(t4);
Texture2D<float4> g_tex_fog : register(t12);
Texture2D<float4> inDepthTexture : register(t13);
Texture2D<float4> inShadowTexture : register(t14);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : COLOR0,
  float4 v1 : SV_Position0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float4 v7 : TEXCOORD5,
  float4 v8 : TEXCOORD6,
  float3 v9 : TEXCOORD7,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);

  r0.xyzw = float4(-0.5,-0.5,-0.5,-0.5) + v1.xyxy;
  r1.x = g_psMaterial.m_materials[1].x;
  r1.y = g_psMaterial.m_materials[1].y;
  r1.z = g_psMaterial.m_materials[1].z;
  r1.w = g_psMaterial.m_materials[1].w;
  r2.x = g_psMaterial.m_materials[2].x;
  r2.y = g_psMaterial.m_materials[3].x;
  r2.z = g_psMaterial.m_materials[3].y;
  r3.xyz = g_psMaterial.m_materials[4].xyz;
  r2.w = g_psMaterial.m_materials[3].w;
  r4.xyz = v4.xyz;
  r3.w = v3.z;
  r5.x = g_psLight.m_lightParams[8].x;
  r5.y = g_psLight.m_lightParams[8].y;
  r6.x = 0.5 / g_psScene.m_shadowMapResolutions.x;
  r6.y = 0.5 / g_psScene.m_shadowMapResolutions.x;
  r5.z = g_psScene.m_shadowProjection2._m30;
  r5.w = 1 / g_psScene.m_shadowMapResolutions.x;
  r5.w = 4 * r5.w;
  r5.w = -r5.w;
  r5.w = 1 + r5.w;
  r5.w = r5.w * r5.w;
  r5.w = 1 * r5.w;
  r4.w = 0;
  r7.x = g_psScene.m_shadowProjection2._m00;
  r7.y = g_psScene.m_shadowProjection2._m01;
  r7.z = g_psScene.m_shadowProjection2._m02;
  r7.w = g_psScene.m_shadowProjection2._m03;
  r8.x = g_psScene.m_shadowProjection2._m10;
  r8.y = g_psScene.m_shadowProjection2._m11;
  r8.z = g_psScene.m_shadowProjection2._m12;
  r8.w = g_psScene.m_shadowProjection2._m13;
  r9.x = g_psScene.m_shadowProjection2._m20;
  r9.y = g_psScene.m_shadowProjection2._m21;
  r9.z = g_psScene.m_shadowProjection2._m22;
  r9.w = g_psScene.m_shadowProjection2._m23;
  r10.xyz = r7.www * r4.xyz;
  r7.xyz = r10.xyz + r7.xyz;
  r7.w = 1;
  r10.xyz = r8.www * r4.xyz;
  r8.xyz = r10.xyz + r8.xyz;
  r8.w = 2;
  r10.xyz = r9.www * r4.xyz;
  r9.xyz = r10.xyz + r9.xyz;
  r9.w = 3;
  r6.z = 1 + r4.z;
  r4.z = r6.z * r5.z;
  r6.z = 1 + r7.z;
  r7.z = r6.z * r5.z;
  r6.z = 1 + r8.z;
  r8.z = r6.z * r5.z;
  r6.z = 1 + r9.z;
  r9.z = r6.z * r5.z;
  r6.zw = r4.xy * r4.xy;
  r6.zw = cmp(r5.ww >= r6.zw);
  r6.zw = r6.zw ? float2(1,1) : float2(0,0);
  r5.z = cmp(r4.z >= 0);
  r5.z = r5.z ? 1 : 0;
  r10.xy = r7.xy * r7.xy;
  r10.xy = cmp(r5.ww >= r10.xy);
  r10.xy = r10.xy ? float2(1,1) : float2(0,0);
  r10.z = cmp(r7.z >= 0);
  r10.z = r10.z ? 1 : 0;
  r11.xy = r8.xy * r8.xy;
  r11.xy = cmp(r5.ww >= r11.xy);
  r11.xy = r11.xy ? float2(1,1) : float2(0,0);
  r5.w = cmp(r8.z >= 0);
  r5.w = r5.w ? 1 : 0;
  r6.z = r6.z * r6.w;
  r12.xyzw = r6.zzzz * r5.zzzz;
  r5.z = r10.x * r10.y;
  r5.z = r5.z * r10.z;
  r6.z = r11.x * r11.y;
  r5.w = r6.z * r5.w;
  r6.z = -r12.w;
  r6.z = 1 + r6.z;
  r10.xyzw = r6.zzzz * r5.zzzz;
  r5.z = -r10.w;
  r5.z = 1 + r5.z;
  r5.z = r6.z * r5.z;
  r11.xyzw = r5.wwww * r5.zzzz;
  r5.w = -r11.w;
  r5.w = 1 + r5.w;
  r5.z = r5.z * r5.w;
  r13.xyzw = float4(1,1,1,1) * r5.zzzz;
  r4.xyzw = r12.xyzw * r4.xyzw;
  r7.xyzw = r10.xyzw * r7.xyzw;
  r4.xyzw = r7.xyzw + r4.xyzw;
  r7.xyzw = r11.xyzw * r8.xyzw;
  r4.xyzw = r7.xyzw + r4.xyzw;
  r7.xyzw = r13.xyzw * r9.xyzw;
  r4.xyzw = r7.wxyz + r4.wxyz;
  r4.w = max(9.99999997e-007, r4.w);
  r5.zw = float2(0.5,0.5) * r4.yz;
  r7.xy = float2(0.5,0.5) + r5.zw;
  r5.z = -r7.y;
  r7.z = 1 + r5.z;
  r5.zw = float2(0.5,0.5) * r7.xz;
  r6.zw = float2(2,2) * r6.xy;
  r6.zw = -r6.zw;
  r6.zw = float2(1,1) + r6.zw;
  r5.zw = min(r6.zw, r5.zw);
  r6.z = -1 + r4.x;
  r6.z = max(0, r6.z);
  r6.z = min(1, r6.z);
  r4.x = r4.x / 2;
  r6.w = -r6.z;
  r7.x = r6.w + r4.x;
  r7.y = 0.5 * r6.z;
  r5.zw = r7.xy + r5.zw;
  r4.yz = r5.zw + r6.xy;
  r4.xyz = r4.yzw / float3(1,1,1);
  r4.x = inShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r4.xy, r4.z).x;
  r4.x = 1 * r4.x;
  r4.x = -r4.x;
  r4.x = 1 + r4.x;
  r4.x = r4.x * r4.x;
  r4.y = r5.y + r3.w;
  r4.y = r4.y * r5.x;
  r4.y = max(0, r4.y);
  r4.y = min(1, r4.y);
  r4.z = -r4.x;
  r4.z = 1 + r4.z;
  r4.y = r4.y * r4.z;
  r4.x = r4.x + r4.y;
  r4.y = g_psLight.m_lightParams[8].w;
  r4.y = -r4.y;
  r4.x = r4.x + r4.y;
  r4.x = max(0, r4.x);
  r4.x = min(1, r4.x);
  r4.y = -30 + r3.w;
  r4.y = r4.y / 40;
  r2.x = -r2.x;
  r2.x = 1 + r2.x;
  r2.x = r4.y + r2.x;
  r2.x = max(0, r2.x);
  r2.x = min(1, r2.x);
  r4.y = -r2.x;
  r4.y = 1 + r4.y;
  r4.x = r4.x * r4.y;
  r2.x = r4.x + r2.x;
  r4.xy = r0.zw;
  r4.zw = float2(0.49609375,0.49609375) + r4.xy;
  r4.zw = g_psSystem.m_renderBuffer.zw * r4.zw;
  r5.xy = g_psScene.m_projectionParam.zw;
  r5.zw = inDepthTexture.Sample(g_samplerPoint_Clamp_s, r4.zw).xy;
  r5.y = -r5.y;
  r5.z = r5.z + r5.y;
  r6.x = r5.x / r5.z;
  r5.y = r5.w + r5.y;
  r6.y = r5.x / r5.y;
  r5.xyzw = g_psMaterial.m_materials[0].xyzw;
  r6.zw = v2.xy;
  r7.xy = r6.zw * r2.yy;
  r5.xy = r7.xy + r5.xy;
  r5.xy = inNormalTexture.Sample(g_samplerLinear_Wrap_s, r5.xy).wy;
  r5.xy = float2(2,2) * r5.xy;
  r7.xy = float2(-1,-1) + r5.xy;
  r2.y = r7.x * r7.x;
  r2.y = -r2.y;
  r2.y = 1 + r2.y;
  r5.x = r7.y * r7.y;
  r5.x = -r5.x;
  r2.y = r5.x + r2.y;
  r2.y = max(0, r2.y);
  r2.y = min(1, r2.y);
  r2.y = 9.99999975e-005 + r2.y;
  r5.x = rsqrt(r2.y);
  r7.z = r5.x * r2.y;
  r2.yz = r6.zw * r2.zz;
  r2.yz = float2(0.970000029,0.970000029) * r2.yz;
  r2.yz = r2.yz + r5.zw;
  r2.yz = inNormalTexture.Sample(g_samplerLinear_Wrap_s, r2.yz).wy;
  r2.yz = float2(2,2) * r2.yz;
  r5.xy = float2(-1,-1) + r2.yz;
  r2.y = r5.x * r5.x;
  r2.y = -r2.y;
  r2.y = 1 + r2.y;
  r2.z = r5.y * r5.y;
  r2.z = -r2.z;
  r2.y = r2.y + r2.z;
  r2.y = max(0, r2.y);
  r2.y = min(1, r2.y);
  r2.y = 9.99999975e-005 + r2.y;
  r2.z = rsqrt(r2.y);
  r5.z = r2.y * r2.z;
  r5.xyz = r7.xyz + r5.xyz;
  r2.y = dot(r5.xyz, r5.xyz);
  r2.y = rsqrt(r2.y);
  r5.xyz = r5.xyz * r2.yyy;
  r7.xyz = r5.xxx;
  r7.xyz = v7.xyz * r7.xyz;
  r5.xyw = r5.yyy;
  r5.xyw = v8.xyz * r5.xyw;
  r5.xyw = r7.xyz + r5.xyw;
  r7.xyz = r5.zzz;
  r7.xyz = v9.xyz * r7.xyz;
  r5.xyz = r7.xyz + r5.xyw;
  r2.yz = g_psMaterial.m_materials[2].zw;
  r5.w = g_psMaterial.m_materials[2].y;
  r7.y = 0;
  r7.x = r2.y;
  r2.y = 0;
  r4.xy = r4.xy / g_psSystem.m_renderInfo.xy;
  r7.z = inRippleTexture.Sample(g_samplerLinear_Wrap_s, r4.xy).x;
  r7.xy = r4.xy + r7.xy;
  r7.x = inRippleTexture.Sample(g_samplerLinear_Wrap_s, r7.xy).x;
  r2.yz = r4.xy + r2.yz;
  r2.y = inRippleTexture.Sample(g_samplerLinear_Wrap_s, r2.yz).x;
  r2.z = -r7.x;
  r8.x = r7.z + r2.z;
  r2.y = -r2.y;
  r8.z = r7.z + r2.y;
  r2.y = -r8.x;
  r2.y = max(r8.x, r2.y);
  r2.z = -r8.z;
  r2.z = max(r8.z, r2.z);
  r2.y = max(r2.y, r2.z);
  r2.y = -r2.y;
  r8.y = 2 + r2.y;
  r2.y = dot(r8.xyz, r8.xyz);
  r2.y = rsqrt(r2.y);
  r7.xyz = r8.xyz * r2.yyy;
  r8.z = g_psScene.m_view._m00;
  r8.x = g_psScene.m_view._m01;
  r8.y = g_psScene.m_view._m02;
  r9.xyz = float3(1,0,0) * r8.yzx;
  r8.xyz = float3(0,0,1) * r8.xyz;
  r8.xyz = -r8.xyz;
  r8.xyz = r9.xyz + r8.xyz;
  r2.y = dot(r8.xyz, r8.xyz);
  r2.y = rsqrt(r2.y);
  r8.xyz = r8.xyz * r2.yyy;
  r9.xyz = r8.zxy;
  r10.xyz = float3(0,0,1) * r9.zxy;
  r9.xyz = float3(1,0,0) * r9.xyz;
  r9.xyz = -r9.xyz;
  r9.xyz = r10.xyz + r9.xyz;
  r9.x = dot(r9.xyz, r7.xyz);
  r9.z = dot(r8.xyz, r7.xyz);
  r2.yz = r9.xz * r5.ww;
  r5.xz = r5.xz + r2.yz;
  r2.y = dot(r5.xyz, r5.xyz);
  r2.y = rsqrt(r2.y);
  r5.xyz = r5.xyz * r2.yyy;
  r2.y = r6.x;
  r2.z = -r3.w;
  r2.y = r2.y + r2.z;
  r1.y = r2.y * r1.y;
  r1.y = max(0, r1.y);
  r1.y = min(1, r1.y);
  r4.xy = r5.xz;
  r7.xy = r4.xy * r1.ww;
  r4.zw = r7.xy + r4.zw;
  r7.x = g_psSystem.m_renderInfo.x / g_psSystem.m_renderBuffer.x;
  r7.y = g_psSystem.m_renderInfo.y / g_psSystem.m_renderBuffer.y;
  r2.y = 0.995000005 * r7.x;
  r5.w = 0.995000005 * r7.y;
  r7.x = cmp(r4.z >= r2.y);
  r7.y = r4.z / r2.y;
  r7.z = -r7.y;
  r7.w = max(r7.y, r7.z);
  r7.y = cmp(r7.y >= r7.z);
  r7.z = frac(r7.w);
  r7.w = -r7.z;
  r7.y = r7.y ? r7.z : r7.w;
  r7.y = r7.y * r2.y;
  r7.y = -r7.y;
  r2.y = r7.y + r2.y;
  r2.y = r7.x ? r2.y : r4.z;
  r4.z = cmp(r4.w >= r5.w);
  r7.x = r4.w;
  r7.x = r7.x / r5.w;
  r7.y = -r7.x;
  r7.z = max(r7.x, r7.y);
  r7.x = cmp(r7.x >= r7.y);
  r7.y = frac(r7.z);
  r7.z = -r7.y;
  r7.x = r7.x ? r7.y : r7.z;
  r7.x = r7.x * r5.w;
  r7.x = -r7.x;
  r5.w = r7.x + r5.w;
  r4.z = r4.z ? r5.w : r4.w;
  r4.w = cmp(0 >= r2.y);
  r5.w = -r2.y;
  r5.w = max(r5.w, r2.y);
  r7.x = r4.w ? r5.w : r2.y;
  r2.y = cmp(0 >= r4.z);
  r4.w = -r4.z;
  r4.w = max(r4.z, r4.w);
  r7.y = r2.y ? r4.w : r4.z;
  r7.xyz = inDistortionTexture.Sample(g_samplerLinear_Wrap_s, r7.xy).xyz;
  r8.xyz = float3(0.0159964003,0.0159964003,0.0159964003) * r7.xyz;
  r9.xyz = float3(0.668276012,0.668276012,0.668276012) * r7.xyz;
  r9.xyz = r9.xyz * r7.xyz;
  r8.xyz = r9.xyz + r8.xyz;
  r9.xyz = float3(0.317465007,0.317465007,0.317465007) * r7.xyz;
  r9.xyz = r9.xyz * r7.xyz;
  r7.xyz = r9.xyz * r7.xyz;
  r7.xyz = r8.xyz + r7.xyz;
  r8.xyz = g_psObject.m_localParam[0].xyz;
  r2.y = g_psScene.m_exposure.z;
  r9.xyz = g_psObject.m_localParam[1].xyz * r2.yyy;
  r10.xyz = v6.xyz;

  r11.xyz = g_psScene.m_eyepos.xyz;

// Fix reflections like I do with Unity, by adjusting the world space eye position:
r11.xyz += mul(float4(stereo.x * stereo.y / g_psScene.m_projection._m00, 0, 0, 0), inverse(g_psScene.m_view));

  r11.xyz = -r11.xyz;
  r10.xyz = r11.xyz + r10.xyz;
  r4.z = dot(r10.xyz, r10.xyz);
  r4.z = rsqrt(r4.z);
  r10.xyz = r10.xyz * r4.zzz;
  r11.xyz = -r10.xyz;
  r4.z = dot(r11.xyz, r5.xyz);
  r4.z = max(0, r4.z);
  r4.z = min(1, r4.z);
  r4.z = -r4.z;
  r4.z = 1 + r4.z;
  r4.w = 1 * r4.z;
  r4.z = r4.z * r4.z;
  r4.z = r4.z * r4.z;
  r4.z = r4.w * r4.z;
  r4.z = 0.949999988 * r4.z;
  r4.z = 0.0500000007 + r4.z;
  r4.w = dot(r10.xyz, r5.xyz);
  r4.w = r4.w + r4.w;
  r4.w = -r4.w;
  r12.xyz = r5.xyz * r4.www;
  r10.xyz = r12.xyz + r10.xyz;

  r10.xyz = inCubeMap.Sample(g_samplerLinear_Wrap_s, r10.xyz).xyz;

  r12.xyz = float3(0.0159964003,0.0159964003,0.0159964003) * r10.xyz;
  r13.xyz = float3(0.668276012,0.668276012,0.668276012) * r10.xyz;
  r13.xyz = r13.xyz * r10.xyz;
  r12.xyz = r13.xyz + r12.xyz;
  r13.xyz = float3(0.317465007,0.317465007,0.317465007) * r10.xyz;
  r13.xyz = r13.xyz * r10.xyz;
  r10.xyz = r13.xyz * r10.xyz;
  r10.xyz = r12.xyz + r10.xyz;
  r4.w = g_psMaterial.m_materials[3].z;
  r5.w = cmp(1.10000002 < r4.w);
  if (r5.w != 0) {
    r12.xyz = r10.xyz * r4.www;
  } else {
    r4.w = 10000 * g_psScene.m_exposure.z;
    r4.w = 1 / r4.w;
    r4.w = max(0, r4.w);
    r4.w = min(1, r4.w);
    r4.w = max(0.449999988, r4.w);
    r10.xyz = r10.xyz * r4.www;
    r4.w = -r9.x;
    r4.w = r9.z + r4.w;
    r4.w = 0.600000024 * r4.w;
    r13.x = r9.x + r4.w;
    r4.w = -r9.y;
    r4.w = r9.z + r4.w;
    r4.w = 0.800000012 * r4.w;
    r13.y = r9.y + r4.w;
    r13.z = r9.z;
    r13.xyz = max(float3(0.200000003,0.200000003,0.300000012), r13.xyz);
    r13.xyz = max(float3(0,0,0), r13.xyz);
    r13.xyz = min(float3(1,1,1), r13.xyz);
    r10.xyz = r13.xyz * r10.xyz;
    r3.xyz = r10.xyz * r3.xyz;
    r4.w = r5.x;
    r5.w = 31 * r4.w;
    r7.w = r5.z;
    r8.w = 7 * r7.w;
    r5.w = r8.w + r5.w;
    r8.w = -r5.w;
    r5.w = max(r8.w, r5.w);
    r8.w = floor(r5.w);
    r8.w = -r8.w;
    r10.x = r8.w + r5.w;
    r5.w = 22 * r4.w;
    r8.w = 19 * r7.w;
    r5.w = r8.w + r5.w;
    r8.w = -r5.w;
    r5.w = max(r8.w, r5.w);
    r8.w = floor(r5.w);
    r8.w = -r8.w;
    r10.y = r8.w + r5.w;
    r4.w = 10 * r4.w;
    r5.w = 24 * r7.w;
    r4.w = r5.w + r4.w;
    r5.w = -r4.w;
    r4.w = max(r5.w, r4.w);
    r5.w = floor(r4.w);
    r5.w = -r5.w;
    r10.z = r5.w + r4.w;
    r10.xyz = r10.xyz * r3.xyz;
    r10.xyz = r10.xyz * r2.www;
    r12.xyz = r10.xyz + r3.xyz;
  }
  r12.xyz = r12.xyz;
  r3.x = dot(r5.xyz, r8.xyz);
  r3.x = max(0, r3.x);
  r3.x = min(1, r3.x);
  r3.y = -r3.x;
  r3.y = 1 + r3.y;
  r3.z = 1 * r3.y;
  r3.y = r3.y * r3.y;
  r3.y = r3.y * r3.y;
  r3.y = r3.z * r3.y;
  r3.y = 0.699999988 * r3.y;
  r3.y = 0.300000012 + r3.y;
  r10.xyz = r9.xyz * r3.xxx;
  r10.xyz = r10.xyz * r2.xxx;
  r3.x = -r3.y;
  r3.x = 1 + r3.x;
  r3.xyz = r10.xyz * r3.xxx;
  r10.xyz = float3(4,1,4) * r5.xyz;
  r4.w = dot(r10.xyz, r10.xyz);
  r4.w = rsqrt(r4.w);
  r10.xyz = r10.xyz * r4.www;
  r4.w = dot(r10.xyz, r8.xyz);
  r4.w = max(0, r4.w);
  r4.w = min(1, r4.w);
  r4.w = -r4.w;
  r4.w = 1 + r4.w;
  r5.w = 1 * r4.w;
  r4.w = r4.w * r4.w;
  r4.w = r4.w * r4.w;
  r4.w = r5.w * r4.w;
  r4.w = 0.699999988 * r4.w;
  r4.w = 0.300000012 + r4.w;
  r8.xyz = r11.xyz + r8.xyz;
  r5.w = dot(r8.xyz, r8.xyz);
  r5.w = rsqrt(r5.w);
  r8.xyz = r8.xyz * r5.www;
  r5.w = dot(r10.xyz, r8.xyz);
  r5.w = max(0, r5.w);
  r5.w = log2(r5.w);
  r5.w = 512 * r5.w;
  r5.w = exp2(r5.w);
  r8.xyz = r9.xyz * r5.www;
  r8.xyz = r8.xyz * r2.xxx;
  r8.xyz = r8.xyz * r4.www;
  r9.xyz = g_psLight.m_lightParams[0].xyz;
  r10.xyz = g_psLight.m_lightParams[1].xyz;
  r4.w = dot(r5.xzy, float3(0,0,1));
  r5.xyz = r9.xyz * r4.www;
  r5.xyz = r5.xyz + r10.xyz;
  r5.xyz = r5.xyz * r2.yyy;
  r1.w = 4 * r1.w;
  r9.xy = r4.xy * r1.ww;
  r6.zw = r9.xy + r6.zw;
  r9.xyzw = v0.xyzw;
  r10.xyzw = inBaseTexture.Sample(g_samplerLinear_Wrap_s, r6.zw).xyzw;
  r11.xyz = float3(0.0159964003,0.0159964003,0.0159964003) * r10.xyz;
  r13.xyz = float3(0.668276012,0.668276012,0.668276012) * r10.xyz;
  r13.xyz = r13.xyz * r10.xyz;
  r11.xyz = r13.xyz + r11.xyz;
  r13.xyz = float3(0.317465007,0.317465007,0.317465007) * r10.xyz;
  r13.xyz = r13.xyz * r10.xyz;
  r13.xyz = r13.xyz * r10.xyz;
  r10.xyz = r13.xyz + r11.xyz;
  r9.xyzw = r10.xyzw * r9.xyzw;
  r1.x = -r1.x;
  r1.x = 1 + r1.x;
  r1.x = r1.x * r1.y;
  r1.x = -r1.x;
  r1.xyw = float3(1,1,1) + r1.xxx;
  r2.y = -r4.z;
  r2.y = 1 + r2.y;
  r2.x = r2.x + r2.y;
  r2.x = max(0, r2.x);
  r2.x = min(1, r2.x);
  r3.xyz = r3.xyz * r2.xxx;
  r3.xyz = r3.xyz + r5.xyz;
  r3.xyz = r9.xyz * r3.xyz;
  r5.xyz = -r3.xyz;
  r5.xyz = r7.xyz + r5.xyz;
  r1.xyw = r5.xyz * r1.xyw;
  r1.xyw = r3.xyz + r1.xyw;
  r3.xyz = r12.xyz * r4.zzz;
  r3.xyz = r3.xyz * r2.xxx;
  r3.xyz = r3.xyz * r1.zzz;
  r3.xyz = r8.xyz + r3.xyz;
  r1.z = 31 * r4.x;
  r2.x = 7 * r4.y;
  r1.z = r2.x + r1.z;
  r2.x = -r1.z;
  r1.z = max(r2.x, r1.z);
  r2.x = floor(r1.z);
  r2.x = -r2.x;
  r5.x = r2.x + r1.z;
  r1.z = 22 * r4.x;
  r2.x = 19 * r4.y;
  r1.z = r2.x + r1.z;
  r2.x = -r1.z;
  r1.z = max(r2.x, r1.z);
  r2.x = floor(r1.z);
  r2.x = -r2.x;
  r5.y = r2.x + r1.z;
  r1.z = 10 * r4.x;
  r2.x = 24 * r4.y;
  r1.z = r2.x + r1.z;
  r2.x = -r1.z;
  r1.z = max(r2.x, r1.z);
  r2.x = floor(r1.z);
  r2.x = -r2.x;
  r5.z = r2.x + r1.z;
  r4.xyz = r5.xyz * r1.xyw;
  r4.xyz = r4.xyz * r2.www;
  r4.xyz = float3(0.200000003,0.200000003,0.200000003) * r4.xyz;
  r1.xyz = r4.xyz + r1.xyw;
  r4.xyz = r5.xyz * r3.xyz;
  r2.xyw = r4.xyz * r2.www;
  r2.xyw = r3.xyz + r2.xyw;
  r9.xyz = r2.xyw + r1.xyz;
  r1.xyzw = g_psSystem.m_renderInfo.xyxy;
  r0.xyzw = r0.xyzw / r1.xyzw;
  r0.xyzw = float4(2,-2,2,-2) * r0.xyzw;
  r0.xyzw = float4(-1,1,-1,1) + r0.xyzw;
  r1.x = g_psScene.m_fogParam[1].x;
  r1.y = log2(r3.w);
  r1.x = r1.x * r1.y;
  r1.x = max(0, r1.x);
  r1.x = min(1, r1.x);
  r1.x = 127 * r1.x;
  r0.xyzw = float4(0.0146484375,0.123046875,0.0146484375,0.123046875) * r0.xyzw;
  r0.xyzw = float4(0.015625,0.125,0.015625,0.125) + r0.xyzw;
  r1.y = 1 + r1.x;
  r1.y = max(0, r1.y);
  r1.w = min(127, r1.y);
  r1.y = r1.x;
  r1.yz = floor(r1.yw);
  r1.yz = r1.yz / float2(32,32);
  r2.xy = frac(r1.yz);
  r3.xz = float2(32,32) * r2.xy;
  r3.yw = floor(r1.yz);
  r3.xyzw = float4(0.03125,0.25,0.03125,0.25) * r3.xyzw;
  r0.xyzw = r3.xyzw + r0.xyzw;
  r1.xyzw = frac(r1.xxxx);
  r3.xyzw = g_tex_fog.Sample(g_samplerLinear_Clamp_s, r0.xy).xyzw;
  r0.xyzw = g_tex_fog.Sample(g_samplerLinear_Clamp_s, r0.zw).xyzw;
  r4.xyzw = -r1.xyzw;
  r4.xyzw = float4(1,1,1,1) + r4.xyzw;
  r3.xyzw = r4.xyzw * r3.xyzw;
  r0.xyzw = r1.xyzw * r0.xyzw;
  r0.xyzw = r3.xyzw + r0.xyzw;
  r1.x = g_psScene.m_fogParam[1].y;
  r0.xyz = r1.xxx * r0.xyz;
  r1.x = g_psObject.m_localParam[3].y;
  r1.x = cmp(r1.x < 0);
  r1.xyz = r1.xxx ? float3(1,1,1) : float3(0,0,0);
  r1.w = -r0.w;
  r1.w = 1 + r1.w;
  r1.w = r1.z * r1.w;
  r1.w = -r1.w;
  r1.w = 1 + r1.w;
  r2.xyw = r9.xyz * r0.www;
  r0.xyz = r2.xyw + r0.xyz;
  r2.xyw = -r0.xyz;
  r2.xyw = r9.xyz + r2.xyw;
  r1.xyz = r2.xyw * r1.xyz;
  r0.xyz = r1.xyz + r0.xyz;
  r0.w = r9.w * r1.w;
  r1.xyz = cmp(float3(0.00313080009,0.00313080009,0.00313080009) >= r0.xyz);
  r1.xyz = r1.xyz ? float3(1,1,1) : float3(0,0,0);
  r2.xyw = float3(12.9200001,12.9200001,12.9200001) * r0.xyz;
  r2.xyw = r2.xyw * r1.xyz;
  r1.xyz = -r1.xyz;
  r1.xyz = float3(1,1,1) + r1.xyz;
  r0.xyz = max(float3(9.99999975e-006,9.99999975e-006,9.99999975e-006), r0.xyz);
  r0.xyz = log2(r0.xyz);
  r0.xyz = float3(0.416666657,0.416666657,0.416666657) * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r0.xyz = float3(1.05499995,1.05499995,1.05499995) * r0.xyz;
  r0.xyz = float3(-0.0549999997,-0.0549999997,-0.0549999997) + r0.xyz;
  r0.xyz = r1.xyz * r0.xyz;
  r0.xyz = r2.xyw + r0.xyz;
  r1.x = g_psObject.m_localParam[2].x;
  r1.y = r6.x + r2.z;
  r1.y = r1.y * r1.x;
  r1.y = max(0, r1.y);
  r1.y = min(1, r1.y);
  r1.y = -r1.y;
  r1.y = 1 + r1.y;
  r1.z = r1.y * r1.y;
  r1.y = r1.z * r1.y;
  r1.y = -r1.y;
  r2.x = 1 + r1.y;
  r1.y = 1.04999995 * r6.y;
  r1.y = min(r6.x, r1.y);
  r1.y = r1.y + r2.z;
  r1.x = r1.y * r1.x;
  r1.x = max(0, r1.x);
  r1.x = min(1, r1.x);
  r1.x = -r1.x;
  r1.x = 1 + r1.x;
  r1.y = r1.x * r1.x;
  r1.x = r1.y * r1.x;
  r1.x = -r1.x;
  r2.y = 1 + r1.x;
  r1.x = r0.w * r2.x;
  r1.xyz = r1.xxx * r0.xyz;
  r1.w = r0.w * r2.x;
  r2.x = r0.w * r2.y;
  r3.xyz = r2.xxx * r0.xyz;
  r3.w = r0.w * r2.y;
  o0.xyzw = r1.xyzw;
  o1.xyzw = r3.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cPSScene
// {
//
//   struct PSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_psScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cPSObject
// {
//
//   struct PSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_psObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cPSLight
// {
//
//   struct PSLight
//   {
//       
//       float4 m_lightParams[11];      // Offset:    0
//
//   } g_psLight;                       // Offset:    0 Size:   176
//
// }
//
// cbuffer cPSMaterial
// {
//
//   struct PSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_psMaterial;                    // Offset:    0 Size:   128
//
// }
//
// cbuffer cPSSystem
// {
//
//   struct PSSystem
//   {
//       
//       float4 m_param;                // Offset:    0
//       float4 m_renderInfo;           // Offset:   16
//       float4 m_renderBuffer;         // Offset:   32
//       float4 m_dominantLightDir;     // Offset:   48
//
//   } g_psSystem;                      // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerPoint_Clamp              sampler      NA          NA    9        1
// g_samplerLinear_Wrap              sampler      NA          NA   10        1
// g_samplerLinear_Clamp             sampler      NA          NA   11        1
// g_samplerComparisonLess_Linear_Clmap  sampler_c      NA          NA   15        1
// inBaseTexture                     texture  float4          2d    0        1
// inNormalTexture                   texture  float4          2d    1        1
// inCubeMap                         texture  float4        cube    2        1
// inDistortionTexture               texture  float4          2d    3        1
// inRippleTexture                   texture  float4          2d    4        1
// g_tex_fog                         texture  float4          2d   12        1
// inDepthTexture                    texture  float4          2d   13        1
// inShadowTexture                   texture  float4          2d   14        1
// cPSSystem                         cbuffer      NA          NA    0        1
// cPSScene                          cbuffer      NA          NA    2        1
// cPSLight                          cbuffer      NA          NA    3        1
// cPSMaterial                       cbuffer      NA          NA    4        1
// cPSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// SV_Position              0   xyzw        1      POS   float   xy  
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float     z 
// TEXCOORD                 2   xyzw        4     NONE   float   xyz 
// TEXCOORD                 3   xyzw        5     NONE   float       
// TEXCOORD                 4   xyz         6     NONE   float   xyz 
// TEXCOORD                 5   xyz         7     NONE   float   xyz 
// TEXCOORD                 6   xyz         8     NONE   float   xyz 
// TEXCOORD                 7   xyz         9     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[30], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_constantbuffer cb3[9], immediateIndexed
dcl_constantbuffer cb4[5], immediateIndexed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_sampler s9, mode_default
dcl_sampler s10, mode_default
dcl_sampler s11, mode_default
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t13
dcl_resource_texture2d (float,float,float,float) t14
dcl_input_ps linear v0.xyzw
dcl_input_ps_siv linear noperspective v1.xy, position
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.z
dcl_input_ps linear v4.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xyz
dcl_input_ps linear v9.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 14

#line 623 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Prim_TppRiverModelShHnmRpl_ps.hlsl"
add r0.xyzw, v1.xyxy, l(-0.500000, -0.500000, -0.500000, -0.500000)  // inVPos<0,1,0,1>

#line 578
nop 

#line 589
mov r1.x, cb4[1].x  // outTransparency<0>
mov r1.y, cb4[1].y  // outTransparencyDepthBlend<0>
mov r1.z, cb4[1].z  // outReflectionRate<0>
mov r1.w, cb4[1].w  // outDistortionPower<0>
mov r2.x, cb4[2].x  // outShadowRate<0>
mov r2.y, cb4[3].x  // outNormalUvScale0<0>
mov r2.z, cb4[3].y  // outNormalUvScale1<0>
mov r3.xyz, cb4[4].xyzx  // outWeatherColor<0,1,2>
mov r2.w, cb4[3].w  // outOilIntensity<0>

#line 578
mov r1.x, r1.x  // NGetMaterialParams_getMaterialParams_outTransparency<0>
mov r1.y, r1.y  // NGetMaterialParams_getMaterialParams_outTransparencyDepthBlend<0>
mov r1.z, r1.z  // NGetMaterialParams_getMaterialParams_outReflectionRate<0>
mov r1.w, r1.w  // NGetMaterialParams_getMaterialParams_outDistortionPower<0>
mov r2.x, r2.x  // NGetMaterialParams_getMaterialParams_outShadowRate<0>
mov r2.y, r2.y  // NGetMaterialParams_getMaterialParams_outNormalUvScale0<0>
mov r2.z, r2.z  // NGetMaterialParams_getMaterialParams_outNormalUvScale1<0>
mov r3.xyz, r3.xyzx  // NGetMaterialParams_getMaterialParams_outWeatherColor<0,1,2>
mov r2.w, r2.w  // NGetMaterialParams_getMaterialParams_outOilIntensity<0>

#line 715
mov r4.xyz, v4.xyzx  // NGetShadow_getShadow_inShadowPosition<0,1,2>
mov r3.w, v3.z  // NGetShadow_getShadow_inViewRange<0>
nop 
mov r4.xyz, r4.xyzx  // inShadowPosition<0,1,2>
mov r3.w, r3.w  // inViewRange<0>

#line 82
nop 

#line 180
mov r5.x, cb3[8].x  // GetSunLightInverseShadowFadeRange<0>

#line 82
mov r5.x, r5.x  // invShadowFadeRange<0>
nop 

#line 187
mov r5.y, cb3[8].y  // GetSunLightNegativeShadowFadeRatio<0>

#line 83
mov r5.y, r5.y  // negShadowFadeRatio<0>
nop 
div r6.x, l(0.500000), cb2[29].x  // halfPixelSize<0:Inf>
div r6.y, l(0.500000), cb2[29].x  // halfPixelSize<1:Inf>
nop 
nop 
nop 
nop 
mov r4.xyz, r4.xyzx  // projection_pos<0,1,2>

#line 60
nop 

#line 475
mov r5.z, cb2[16].w  // GetElement<0>

#line 60
mov r5.z, r5.z  // shadowDepth<0>

#line 92
div r5.w, l(1.000000), cb2[29].x
mul r5.w, r5.w, l(4.000000)
mov r5.w, -r5.w
add r5.w, r5.w, l(1.000000)
mul r5.w, r5.w, r5.w
mul r5.w, r5.w, l(1.000000)  // SHADOW_TEXTURE_UV_AREA<0:NaN:Inf>

#line 99
mov r4.w, l(0)
nop 

#line 463
mov r7.x, cb2[16].x  // GetRowT<0>
mov r7.y, cb2[17].x  // GetRowT<1>
mov r7.z, cb2[18].x  // GetRowT<2>
mov r7.w, cb2[19].x  // GetRowT<3>

#line 101
mov r7.xyzw, r7.xyzw  // lv1Param<0,1,2,3>
nop 

#line 463
mov r8.x, cb2[16].y  // GetRowT<0>
mov r8.y, cb2[17].y  // GetRowT<1>
mov r8.z, cb2[18].y  // GetRowT<2>
mov r8.w, cb2[19].y  // GetRowT<3>

#line 102
mov r8.xyzw, r8.xyzw  // lv2Param<0,1,2,3>
nop 

#line 463
mov r9.x, cb2[16].z  // GetRowT<0>
mov r9.y, cb2[17].z  // GetRowT<1>
mov r9.z, cb2[18].z  // GetRowT<2>
mov r9.w, cb2[19].z  // GetRowT<3>

#line 103
mov r9.xyzw, r9.xyzw  // lv3Param<0,1,2,3>

#line 106
mul r10.xyz, r4.xyzx, r7.wwww
add r7.xyz, r7.xyzx, r10.xyzx
mov r7.w, l(1.000000)
mul r10.xyz, r4.xyzx, r8.wwww
add r8.xyz, r8.xyzx, r10.xyzx
mov r8.w, l(2.000000)
mul r10.xyz, r4.xyzx, r9.wwww
add r9.xyz, r9.xyzx, r10.xyzx
mov r9.w, l(3.000000)

#line 111
add r6.z, r4.z, l(1.000000)
mul r4.z, r5.z, r6.z
add r6.z, r7.z, l(1.000000)
mul r7.z, r5.z, r6.z
add r6.z, r8.z, l(1.000000)
mul r8.z, r5.z, r6.z
add r6.z, r9.z, l(1.000000)
mul r9.z, r5.z, r6.z

#line 117
mul r6.zw, r4.xxxy, r4.xxxy
ge r6.zw, r5.wwww, r6.zzzw
movc r6.zw, r6.zzzw, l(0,0,1.000000,1.000000), l(0,0,0,0)  // areaJudg1<0:[-0f,1f],1:[-0f,1f]>
ge r5.z, r4.z, l(0.000000)
movc r5.z, r5.z, l(1.000000), l(0)  // areaJudg1<2:[-0f,1f]>
mul r10.xy, r7.xyxx, r7.xyxx
ge r10.xy, r5.wwww, r10.xyxx
movc r10.xy, r10.xyxx, l(1.000000,1.000000,0,0), l(0,0,0,0)  // areaJudg2<0:[-0f,1f],1:[-0f,1f]>
ge r10.z, r7.z, l(0.000000)
movc r10.z, r10.z, l(1.000000), l(0)  // areaJudg2<2:[-0f,1f]>
mul r11.xy, r8.xyxx, r8.xyxx
ge r11.xy, r5.wwww, r11.xyxx
movc r11.xy, r11.xyxx, l(1.000000,1.000000,0,0), l(0,0,0,0)  // areaJudg3<0:[-0f,1f],1:[-0f,1f]>
ge r5.w, r8.z, l(0.000000)
movc r5.w, r5.w, l(1.000000), l(0)  // areaJudg3<2:[-0f,1f]>

#line 125
mul r6.z, r6.w, r6.z
mul r12.xyzw, r5.zzzz, r6.zzzz  // mask<0:[-0f,1f],0:[-0f,1f],0:[-0f,1f],0:[-0f,1f]>
mul r5.z, r10.y, r10.x
mul r5.z, r10.z, r5.z  // mask<1:[-0f,1f]>
mul r6.z, r11.y, r11.x
mul r5.w, r5.w, r6.z  // mask<2:[-0f,1f]>
mov r6.z, -r12.w
add r6.z, r6.z, l(1.000000)  // hit<0:[0f,1f]>
mul r10.xyzw, r5.zzzz, r6.zzzz  // mask<1:[-0f,1f],1:[-0f,1f],1:[-0f,1f],1:[-0f,1f]>
mov r5.z, -r10.w
add r5.z, r5.z, l(1.000000)
mul r5.z, r5.z, r6.z  // hit<0:[-0f,1f]>
mul r11.xyzw, r5.zzzz, r5.wwww  // mask<2:[-0f,1f],2:[-0f,1f],2:[-0f,1f],2:[-0f,1f]>
mov r5.w, -r11.w
add r5.w, r5.w, l(1.000000)
mul r5.z, r5.w, r5.z  // hit<0:[-0f,1f]>
mul r13.xyzw, r5.zzzz, l(1.000000, 1.000000, 1.000000, 1.000000)  // mask<3:[-0f,1f],3:[-0f,1f],3:[-0f,1f],3:[-0f,1f]>

#line 138
mul r4.xyzw, r4.xyzw, r12.xyzw
mul r7.xyzw, r7.xyzw, r10.xyzw
add r4.xyzw, r4.xyzw, r7.xyzw
mul r7.xyzw, r8.xyzw, r11.xyzw
add r4.xyzw, r4.xyzw, r7.xyzw
mul r7.xyzw, r9.xyzw, r13.xyzw
add r4.xyzw, r4.wxyz, r7.wxyz  // result<3:[-0f,6f],0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
max r4.w, r4.w, l(0.000001)  // result<2:Inf:[1e-006f,1.#INFf]>
mov r4.xyz, r4.xyzx  // CalcCascadeShadowUV<3:[-0f,6f],0:NaN:Inf,1:NaN:Inf>
mov r4.w, r4.w  // CalcCascadeShadowUV<2:Inf:[1e-006f,1.#INFf]>

#line 89
mov r4.xyzw, r4.xyzw  // shadow_uv<3:[-0f,6f],0:NaN:Inf,1:NaN:Inf,2:Inf:[1e-006f,1.#INFf]>
mov r4.x, r4.x  // cascade_level<0:[-0f,6f]>
mul r5.zw, r4.yyyz, l(0.000000, 0.000000, 0.500000, 0.500000)
add r7.xy, r5.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)  // shadow_uv<0:NaN:Inf,1:NaN:Inf>
mov r5.z, -r7.y
add r7.z, r5.z, l(1.000000)  // shadow_uv<1:NaN:Inf>

#line 96
mul r5.zw, r7.xxxz, l(0.000000, 0.000000, 0.500000, 0.500000)  // shadow_uv<0:NaN:Inf,1:NaN:Inf>
mul r6.zw, r6.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000)
mov r6.zw, -r6.zzzw
add r6.zw, r6.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
min r5.zw, r5.zzzw, r6.zzzw  // shadow_uv<0:Inf,1:Inf>

#line 101
add r6.z, r4.x, l(-1.000000)
max r6.z, r6.z, l(0.000000)
min r6.z, r6.z, l(1.000000)  // uv_offset<1:[0f,1f]>
div r4.x, r4.x, l(2.000000)
mov r6.w, -r6.z
add r7.x, r4.x, r6.w  // uv_offset<0:[-1f,3f]>
mul r7.y, r6.z, l(0.500000)  // uv_offset<1:[-0f,0.5f]>
add r5.zw, r5.zzzw, r7.xxxy  // shadow_uv<0:Inf,1:Inf>
add r4.yz, r6.xxyx, r5.zzwz  // shadow_uv<0:NaN:Inf,1:NaN:Inf>
nop 
mov r4.yz, r4.yyzy  // texCoord<0:NaN:Inf,1:NaN:Inf>
mov r4.w, r4.w  // texCoord<2:Inf:[1e-006f,1.#INFf]>

#line 377
nop 
mov r4.yzw, r4.yyzw  // _uv<0:NaN:Inf,1:NaN:Inf,2:Inf:[1e-006f,1.#INFf]>

#line 333
div r4.xyz, r4.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // prjectionUV<0:NaN:Inf,1:NaN:Inf,2:Inf:[1e-006f,1.#INFf]>
sample_c_indexable(texture2d)(float,float,float,float) r4.x, r4.xyxx, t14.xxxx, s15, r4.z  // TFetch2DProjCmp<0:[0f,1f]>

#line 377
mov r4.x, r4.x  // shadow<0:[0f,1f]>

#line 388
mul r4.x, r4.x, l(1.000000)  // shadow<0:[0f,1f]>
mov r4.x, -r4.x
add r4.x, r4.x, l(1.000000)  // shadow<0:[0f,1f]>

#line 397
mul r4.x, r4.x, r4.x  // shadow<0:[-0f,1f]>
mov r4.x, r4.x  // ShadowComparisonFiltered<0:[-0f,1f]>

#line 108
mov r4.x, r4.x  // shadow<0:[-0f,1f]>

#line 112
add r4.y, r3.w, r5.y
mul r4.y, r5.x, r4.y  // fadeRatio<0:NaN:Inf>
max r4.y, r4.y, l(0.000000)
min r4.y, r4.y, l(1.000000)
mov r4.z, -r4.x
add r4.z, r4.z, l(1.000000)
mul r4.y, r4.z, r4.y
add r4.x, r4.y, r4.x  // outShadow<0:[-0f,2f]>

#line 116
nop 

#line 201
mov r4.y, cb3[8].w  // GetSunLightShadowOffset<0>

#line 116
mov r4.y, -r4.y
add r4.x, r4.y, r4.x
max r4.x, r4.x, l(0.000000)
min r4.x, r4.x, l(1.000000)  // outShadow<0:[0f,1f]>

#line 718
mov r4.x, r4.x  // NGetShadow_getShadow_outShadow<0:[0f,1f]>
mov r4.x, r4.x  // NDistanceShadowCorrection_distanceShadowCorrection_inShadow<0:[0f,1f]>
mov r2.x, r2.x  // NDistanceShadowCorrection_distanceShadowCorrection_inShadowRateParam<0>
nop 
mov r4.x, r4.x  // inShadow<0:[0f,1f]>
mov r2.x, r2.x  // inShadowRateParam<0>

#line 537
add r4.y, r3.w, l(-30.000000)
div r4.y, r4.y, l(40.000000)
mov r2.x, -r2.x
add r2.x, r2.x, l(1.000000)
add r2.x, r2.x, r4.y
max r2.x, r2.x, l(0.000000)
min r2.x, r2.x, l(1.000000)  // correctionRate<0:[0f,1f]>
mov r4.y, -r2.x
add r4.y, r4.y, l(1.000000)
mul r4.x, r4.y, r4.x
add r2.x, r2.x, r4.x  // outShadow<0:[0f,2f]>

#line 722
mov r2.x, r2.x  // NDistanceShadowCorrection_distanceShadowCorrection_outShadow<0:[0f,2f]>

#line 682
mov r4.xy, r0.zwzz  // NScreenToTextureCoordinate_screenToTexcoord_inPixelPosition<0,1>
nop 
mov r4.xy, r4.xyxx  // inPixelPosition<0,1>

#line 56
add r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.496094, 0.496094)
mul r4.zw, r4.zzzw, cb0[2].zzzw  // outTexcoord<0:Inf,1:Inf>

#line 683
mov r4.zw, r4.zzzw  // NScreenToTextureCoordinate_screenToTexcoord_outTexcoord<0:Inf,1:Inf>
mov r4.zw, r4.zzzw  // NGetPrimitiveDepthFactor_fetchViewZ_inBaseUV<0:Inf,1:Inf>
nop 
mov r4.zw, r4.zzzw  // inBaseUV<0:Inf,1:Inf>

#line 273
nop 
mov r4.zw, r4.zzzw  // inTexCoord<0:Inf,1:Inf>
mov r5.xy, cb2[21].zwzz  // projectionParameter<2,3>

#line 467
sample_indexable(texture2d)(float,float,float,float) r5.zw, r4.zwzz, t13.zwxy, s9
mov r5.zw, r5.zzzw  // fetchDepth<0:Inf,1:Inf>

#line 472
nop 
mov r5.z, r5.z  // zOverW<0:Inf>
mov r5.xy, r5.xyxx  // proj<2,3>

#line 397
mov r5.y, -r5.y
add r5.z, r5.y, r5.z
div r6.x, r5.x, r5.z  // ReconstructViewZ<0:NaN:Inf>

#line 472
mov r6.x, r6.x  // depth<0:NaN:Inf>

#line 480
nop 
mov r5.w, r5.w  // zOverW<0:Inf>

#line 397
add r5.y, r5.y, r5.w
div r6.y, r5.x, r5.y  // ReconstructViewZ<0:NaN:Inf>

#line 480
mov r6.y, r6.y  // depth<1:NaN:Inf>

#line 273
mov r6.x, r6.x  // outDepth<0:NaN:Inf>
mov r6.y, r6.y  // outDepth<1:NaN:Inf>

#line 684
mov r6.xy, r6.xyxx  // NGetPrimitiveDepthFactor_fetchViewZ_outDepth<0:NaN:Inf,1:NaN:Inf>

#line 153
nop 

#line 156
mov r5.xyzw, cb4[0].xyzw  // outOffsetUV<0,1,2,3>

#line 153
mov r5.xyzw, r5.xyzw  // NGetNormalOffsetUV_getNormalOffsetUV_outOffsetUV<0,1,2,3>

#line 687
mov r6.zw, v2.xxxy  // NCalcLocalNormal_calcLocalNormal_inBaseUV<0,1>
mov r5.xyzw, r5.xyzw  // NCalcLocalNormal_calcLocalNormal_inOffsetUV<0,1,2,3>
mov r2.y, r2.y  // NCalcLocalNormal_calcLocalNormal_inScale0<0>
mov r2.z, r2.z  // NCalcLocalNormal_calcLocalNormal_inScale1<0>
nop 
mov r6.zw, r6.zzzw  // inBaseUV<0,1>
mov r5.xyzw, r5.xyzw  // inOffsetUV<0,1,2,3>
mov r2.y, r2.y  // inScale0<0>
mov r2.z, r2.z  // inScale1<0>

#line 177
nop 
mul r7.xy, r2.yyyy, r6.zwzz
add r5.xy, r5.xyxx, r7.xyxx  // uv<0:Inf,1:Inf>

#line 241
nop 
sample_indexable(texture2d)(float,float,float,float) r5.xy, r5.xyxx, t1.wyxz, s10
mov r5.xy, r5.xyxx  // color<3:Inf,1:Inf>

#line 201
mul r5.xy, r5.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
add r7.xy, r5.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // normal<0:Inf,1:Inf>

#line 207
mul r2.y, r7.x, r7.x
mov r2.y, -r2.y
add r2.y, r2.y, l(1.000000)
mul r5.x, r7.y, r7.y
mov r5.x, -r5.x
add r2.y, r2.y, r5.x
max r2.y, r2.y, l(0.000000)
min r2.y, r2.y, l(1.000000)
add r2.y, r2.y, l(0.000100)  // tmp<0:[0.0001f,1.0001f]>

#line 213
rsq r5.x, r2.y
mul r7.z, r2.y, r5.x  // normal<2:[9.9995e-005f,100.01f]>

#line 216
mov r7.xy, r7.xyxx  // DecodeNormalTexture<0:Inf,1:Inf>
mov r7.z, r7.z  // DecodeNormalTexture<2:[9.9995e-005f,100.01f]>

#line 241
mov r7.xyz, r7.xyzx  // GetNormalFromTexture<0:Inf,1:Inf,2:[9.9995e-005f,100.01f]>

#line 177
mov r7.xyz, r7.xyzx  // texNormal0<0:Inf,1:Inf,2:[9.9995e-005f,100.01f]>
nop 
mul r2.yz, r2.zzzz, r6.zzwz
mul r2.yz, r2.yyzy, l(0.000000, 0.970000, 0.970000, 0.000000)
add r2.yz, r5.zzwz, r2.yyzy  // uv<0:Inf,1:Inf>

#line 241
nop 
sample_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t1.xwyz, s10
mov r2.yz, r2.yyzy  // color<3:Inf,1:Inf>

#line 201
mul r2.yz, r2.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000)
add r5.xy, r2.yzyy, l(-1.000000, -1.000000, 0.000000, 0.000000)  // normal<0:Inf,1:Inf>

#line 207
mul r2.y, r5.x, r5.x
mov r2.y, -r2.y
add r2.y, r2.y, l(1.000000)
mul r2.z, r5.y, r5.y
mov r2.z, -r2.z
add r2.y, r2.z, r2.y
max r2.y, r2.y, l(0.000000)
min r2.y, r2.y, l(1.000000)
add r2.y, r2.y, l(0.000100)  // tmp<0:[0.0001f,1.0001f]>

#line 213
rsq r2.z, r2.y
mul r5.z, r2.z, r2.y  // normal<2:[9.9995e-005f,100.01f]>

#line 216
mov r5.xy, r5.xyxx  // DecodeNormalTexture<0:Inf,1:Inf>
mov r5.z, r5.z  // DecodeNormalTexture<2:[9.9995e-005f,100.01f]>

#line 241
mov r5.xyz, r5.xyzx  // GetNormalFromTexture<0:Inf,1:Inf,2:[9.9995e-005f,100.01f]>

#line 178
mov r5.xyz, r5.xyzx  // texNormal1<0:Inf,1:Inf,2:[9.9995e-005f,100.01f]>

#line 189
add r5.xyz, r5.xyzx, r7.xyzx
dp3 r2.y, r5.xyzx, r5.xyzx
rsq r2.y, r2.y
mul r5.xyz, r2.yyyy, r5.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN>

#line 691
mov r5.xyz, r5.xyzx  // NCalcLocalNormal_calcLocalNormal_outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN>
mov r5.xyz, r5.xyzx  // NCalcWorldNormal_calcWorldNormal_inLocalNormal<0:NaN:Inf,1:NaN:Inf,2:NaN>
nop 
mov r5.xyz, r5.xyzx  // inLocalNormal<0:NaN:Inf,1:NaN:Inf,2:NaN>

#line 212
mov r7.xyz, r5.xxxx
mul r7.xyz, r7.xyzx, v7.xyzx
mov r5.xyw, r5.yyyy
mul r5.xyw, r5.xyxw, v8.xyxz
add r5.xyw, r5.xyxw, r7.xyxz
mov r7.xyz, r5.zzzz
mul r7.xyz, r7.xyzx, v9.xyzx
add r5.xyz, r5.xywx, r7.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 695
mov r5.xyz, r5.xyzx  // NCalcWorldNormal_calcWorldNormal_outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.xyz, r5.xyzx  // NAddRippleNormal_addRippleNormal_inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 699
nop 
mov r5.xyz, r5.xyzx  // inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 230
mov r2.yz, cb4[2].zzwz  // oneDotShift<0,1>
mov r5.w, cb4[2].y  // ripplePower<0>
mov r7.y, l(0)  // rightShift<1: 0f>
mov r7.x, r2.y  // rightShift<0>
mov r2.y, l(0)  // bottomShift<0: 0f>
mov r2.z, r2.z  // bottomShift<1>
div r4.xy, r4.xyxx, cb0[1].xyxx  // inScreenUV<0:NaN:Inf,1:NaN:Inf>
sample_indexable(texture2d)(float,float,float,float) r7.z, r4.xyxx, t4.yzxw, s10
mov r7.z, r7.z  // baseColor<0:Inf>
add r7.xy, r7.xyxx, r4.xyxx
sample_indexable(texture2d)(float,float,float,float) r7.x, r7.xyxx, t4.xyzw, s10
mov r7.x, r7.x  // rightColor<0:Inf>
add r2.yz, r2.yyzy, r4.xxyx
sample_indexable(texture2d)(float,float,float,float) r2.y, r2.yzyy, t4.yxzw, s10
mov r2.y, r2.y  // bottomColor<0:Inf>

#line 241
mov r2.z, -r7.x
add r8.x, r2.z, r7.z  // rippleLocalNormal<0:NaN:Inf>
mov r2.y, -r2.y
add r8.z, r2.y, r7.z  // rippleLocalNormal<2:NaN:Inf>
mov r2.y, -r8.x
max r2.y, r2.y, r8.x
mov r2.z, -r8.z
max r2.z, r2.z, r8.z
max r2.y, r2.z, r2.y
mov r2.y, -r2.y
add r8.y, r2.y, l(2.000000)  // rippleLocalNormal<1:NaN:Inf>
dp3 r2.y, r8.xyzx, r8.xyzx
rsq r2.y, r2.y
mul r7.xyz, r2.yyyy, r8.xyzx  // rippleLocalNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 247
nop 

#line 463
mov r8.z, cb2[8].x  // GetRowT<0>
mov r8.x, cb2[9].x  // GetRowT<1>
mov r8.y, cb2[10].x  // GetRowT<2>

#line 247
mov r8.xyz, r8.xyzx  // cameraWorldX<1,2,0>
mul r9.xyz, r8.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000)
mul r8.xyz, r8.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mov r8.xyz, -r8.xyzx
add r8.xyz, r8.xyzx, r9.xyzx
dp3 r2.y, r8.xyzx, r8.xyzx
rsq r2.y, r2.y
mul r8.xyz, r2.yyyy, r8.xyzx  // cameraWorldZ<0:NaN:Inf,1: 0f,2:NaN:Inf>
mov r9.xyz, r8.zxyz
mul r10.xyz, r9.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
mul r9.xyz, r9.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)
mov r9.xyz, -r9.xyzx
add r9.xyz, r9.xyzx, r10.xyzx  // cameraWorldX<0:NaN:Inf,1: 0f,2:NaN:Inf>
dp3 r9.x, r9.xyzx, r7.xyzx  // rippleNormal<0:NaN:Inf>
dp3 r9.z, r8.xyzx, r7.xyzx  // rippleNormal<2:NaN:Inf>

#line 257
mov r5.xyz, r5.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r2.yz, r5.wwww, r9.xxzx
add r5.xz, r2.yyzy, r5.xxzx  // outNormal<0:NaN:Inf,2:NaN:Inf>
dp3 r2.y, r5.xyzx, r5.xyzx
rsq r2.y, r2.y
mul r5.xyz, r2.yyyy, r5.xyzx  // outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 699
mov r5.xyz, r5.xyzx  // NAddRippleNormal_addRippleNormal_outNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 704
nop 

#line 280
mov r3.w, r3.w  // outPos<2>

#line 704
mov r3.w, r3.w  // NCalcDepthBlendPos_calcDepthBlendPos_outPos<2>

#line 708
mov r3.w, r3.w  // NComputeTransparencyBlendFactor_computeTransparencyBlendFactor_inDepth<0>
mov r2.y, r6.x  // NComputeTransparencyBlendFactor_computeTransparencyBlendFactor_inSceneDepth<0:NaN:Inf>
mov r1.y, r1.y  // NComputeTransparencyBlendFactor_computeTransparencyBlendFactor_inTransparencyDepthBlend<0>
nop 
mov r3.w, r3.w  // inDepth<0>
mov r2.y, r2.y  // inSceneDepth<0:NaN:Inf>
mov r1.y, r1.y  // inTransparencyDepthBlend<0>

#line 142
mov r1.y, r1.y  // zBlendFactor<0>
mov r2.z, -r3.w
add r2.y, r2.z, r2.y  // zBlend<0:NaN:Inf>
mul r1.y, r1.y, r2.y
max r1.y, r1.y, l(0.000000)
min r1.y, r1.y, l(1.000000)  // outBlendFactor<0:[0f,1f]>

#line 711
mov r1.y, r1.y  // NComputeTransparencyBlendFactor_computeTransparencyBlendFactor_outBlendFactor<0:[0f,1f]>

#line 783
mov r4.xy, r5.xzxx  // NCalcDistortion_calcDistortion_inNormal<0:NaN:Inf,2:NaN:Inf>
mov r1.w, r1.w  // NCalcDistortion_calcDistortion_inDistortionPower<0>
nop 
mov r4.xy, r4.xyxx  // inNormal<0:NaN:Inf,2:NaN:Inf>
mov r1.w, r1.w  // inDistortionPower<0>

#line 455
mov r1.w, r1.w  // distortionPower<0>
mul r7.xy, r1.wwww, r4.xyxx
add r4.zw, r4.zzzw, r7.xxxy  // inScreenUV<0:NaN:Inf,1:NaN:Inf>
nop 

#line 562
div r7.x, cb0[1].x, cb0[2].x  // fxGetToScreenUVScale<0:NaN:Inf>
div r7.y, cb0[1].y, cb0[2].y  // fxGetToScreenUVScale<1:NaN:Inf>

#line 459
mov r7.xy, r7.xyxx  // uvScale<0:NaN:Inf,1:NaN:Inf>
mul r2.y, r7.x, l(0.995000)  // repeatStartU<0:NaN:Inf>
mul r5.w, r7.y, l(0.995000)  // repeatStartV<0:NaN:Inf>
nop 
mov r4.zw, r4.zzzw  // shiftUV<0:NaN:Inf,1:NaN:Inf>
mov r2.y, r2.y  // repeatStartU<0:NaN:Inf>
mov r5.w, r5.w  // repeatStartV<0:NaN:Inf>

#line 583
ge r7.x, r4.z, r2.y
div r7.y, r4.z, r2.y
mov r7.z, -r7.y
max r7.w, r7.z, r7.y
ge r7.y, r7.y, r7.z
frc r7.z, r7.w
mov r7.w, -r7.z
movc r7.y, r7.y, r7.z, r7.w
mul r7.y, r2.y, r7.y
mov r7.y, -r7.y
add r2.y, r2.y, r7.y
movc r2.y, r7.x, r2.y, r4.z  // shiftUV<0:NaN:Inf>
ge r4.z, r4.w, r5.w
mov r7.x, r4.w
div r7.x, r7.x, r5.w
mov r7.y, -r7.x
max r7.z, r7.y, r7.x
ge r7.x, r7.x, r7.y
frc r7.y, r7.z
mov r7.z, -r7.y
movc r7.x, r7.x, r7.y, r7.z
mul r7.x, r5.w, r7.x
mov r7.x, -r7.x
add r5.w, r5.w, r7.x
movc r4.z, r4.z, r5.w, r4.w  // shiftUV<1:NaN:Inf>
ge r4.w, l(0.000000), r2.y
mov r5.w, -r2.y
max r5.w, r2.y, r5.w
movc r7.x, r4.w, r5.w, r2.y  // shiftUV<0:NaN:Inf>
ge r2.y, l(0.000000), r4.z
mov r4.w, -r4.z
max r4.w, r4.w, r4.z
movc r7.y, r2.y, r4.w, r4.z  // shiftUV<1:NaN:Inf>
mov r7.x, r7.x  // fxFetchScreenTextureUVPosMirror<0:NaN:Inf>
mov r7.y, r7.y  // fxFetchScreenTextureUVPosMirror<1:NaN:Inf>

#line 462
mov r7.xy, r7.xyxx  // screenUV<0:NaN:Inf,1:NaN:Inf>
sample_indexable(texture2d)(float,float,float,float) r7.xyz, r7.xyxx, t3.xyzw, s10
mov r7.xyz, r7.xyzx  // texColor<0:Inf,1:Inf,2:Inf>
nop 
mov r7.xyz, r7.xyzx  // inSRGB<0:Inf,1:Inf,2:Inf>

#line 455
mul r8.xyz, r7.xyzx, l(0.015996, 0.015996, 0.015996, 0.000000)
mul r9.xyz, r7.xyzx, l(0.668276, 0.668276, 0.668276, 0.000000)
mul r9.xyz, r7.xyzx, r9.xyzx
add r8.xyz, r8.xyzx, r9.xyzx
mul r9.xyz, r7.xyzx, l(0.317465, 0.317465, 0.317465, 0.000000)
mul r9.xyz, r7.xyzx, r9.xyzx
mul r7.xyz, r7.xyzx, r9.xyzx
add r7.xyz, r7.xyzx, r8.xyzx  // GammaDecodeIshiyama<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 466
mov r7.xyz, r7.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 786
mov r7.xyz, r7.xyzx  // NCalcDistortion_calcDistortion_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 522
nop 

#line 526
nop 

#line 155
mov r8.xyz, cb5[9].xyzx  // GetSunLightDirection<0,1,2>

#line 526
mov r8.xyz, r8.xyzx  // outLightDir<0,1,2>

#line 529
nop 

#line 173
nop 

#line 122
mov r2.y, cb2[23].z  // GetCurrentExposureValue<0>

#line 173
mul r9.xyz, r2.yyyy, cb5[10].xyzx  // GetExposureAdjustedSunLightColor<0:Inf,1:Inf,2:Inf>

#line 529
mov r9.xyz, r9.xyzx  // outLightColor<0:Inf,1:Inf,2:Inf>

#line 522
mov r8.xyz, r8.xyzx  // NGetSunLightParam_sun0_outLightDir<0,1,2>
mov r9.xyz, r9.xyzx  // NGetSunLightParam_sun0_outLightColor<0:Inf,1:Inf,2:Inf>

#line 712
mov r10.xyz, v6.xyzx  // NGetEyeDir_getEyeDir_inWorldPosition<0,1,2>
nop 
mov r10.xyz, r10.xyzx  // inWorldPosition<0,1,2>

#line 116
nop 

#line 174
nop 

#line 78
mov r11.xyz, cb2[20].xyzx  // GetEyePosition<0,1,2>

#line 174
mov r11.xyz, r11.xyzx  // GetCameraEyePosition<0,1,2>

#line 116
mov r11.xyz, -r11.xyzx
add r10.xyz, r10.xyzx, r11.xyzx  // diff<0:Inf,1:Inf,2:Inf>
dp3 r4.z, r10.xyzx, r10.xyzx
rsq r4.z, r4.z
mul r10.xyz, r4.zzzz, r10.xyzx  // outEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 713
mov r10.xyz, r10.xyzx  // NGetEyeDir_getEyeDir_outEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 778
mov r5.xyz, r5.xyzx  // NCalcCubeMap_calcCubeMap_inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r10.xyz, r10.xyzx  // NCalcCubeMap_calcCubeMap_inEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r9.xyz, r9.xyzx  // NCalcCubeMap_calcCubeMap_inSunLightColor<0:Inf,1:Inf,2:Inf>
mov r3.xyz, r3.xyzx  // NCalcCubeMap_calcCubeMap_inWeatherColor<0,1,2>
nop 
mov r5.xyz, r5.xyzx  // inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r10.xyz, r10.xyzx  // inEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r9.xyz, r9.xyzx  // inSunLightColor<0:Inf,1:Inf,2:Inf>
mov r3.xyz, r3.xyzx  // inWeatherColor<0,1,2>

#line 400
mov r11.xyz, -r10.xyzx
dp3 r4.z, r11.xyzx, r5.xyzx
max r4.z, r4.z, l(0.000000)
min r4.z, r4.z, l(1.000000)  // EN<0:[0f,1f]>
mov r4.z, -r4.z
add r4.z, r4.z, l(1.000000)
mul r4.w, r4.z, l(1.000000)
mul r4.z, r4.z, r4.z
mul r4.z, r4.z, r4.z
mul r4.z, r4.z, r4.w
mul r4.z, r4.z, l(0.950000)
add r4.z, r4.z, l(0.050000)  // outFresnel<0:[0.05f,1f]>
dp3 r4.w, r10.xyzx, r5.xyzx
add r4.w, r4.w, r4.w
mov r4.w, -r4.w
mul r12.xyz, r4.wwww, r5.xyzx
add r10.xyz, r10.xyzx, r12.xyzx  // pickDirec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t2.xyzw, s10
mov r10.xyz, r10.xyzx  // texColor<0:Inf,1:Inf,2:Inf>
nop 
mov r10.xyz, r10.xyzx  // inSRGB<0:Inf,1:Inf,2:Inf>

#line 455
mul r12.xyz, r10.xyzx, l(0.015996, 0.015996, 0.015996, 0.000000)
mul r13.xyz, r10.xyzx, l(0.668276, 0.668276, 0.668276, 0.000000)
mul r13.xyz, r10.xyzx, r13.xyzx
add r12.xyz, r12.xyzx, r13.xyzx
mul r13.xyz, r10.xyzx, l(0.317465, 0.317465, 0.317465, 0.000000)
mul r13.xyz, r10.xyzx, r13.xyzx
mul r10.xyz, r10.xyzx, r13.xyzx
add r10.xyz, r10.xyzx, r12.xyzx  // GammaDecodeIshiyama<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 407
mov r10.xyz, r10.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.w, cb4[3].z  // cubemapIntensity<0>
lt r5.w, l(1.100000), r4.w
if_nz r5.w
  mul r12.xyz, r4.wwww, r10.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
else 

#line 418
  mul r4.w, cb2[23].z, l(10000.000000)
  div r4.w, l(1.000000), r4.w
  max r4.w, r4.w, l(0.000000)
  min r4.w, r4.w, l(1.000000)
  max r4.w, r4.w, l(0.450000)
  mul r10.xyz, r4.wwww, r10.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 421
  mov r4.w, -r9.x
  add r4.w, r4.w, r9.z
  mul r4.w, r4.w, l(0.600000)
  add r13.x, r4.w, r9.x  // inSunLightColor<0:NaN:Inf>
  mov r4.w, -r9.y
  add r4.w, r4.w, r9.z
  mul r4.w, r4.w, l(0.800000)
  add r13.y, r4.w, r9.y  // inSunLightColor<1:NaN:Inf>

#line 425
  mov r13.z, r9.z
  max r13.xyz, r13.xyzx, l(0.200000, 0.200000, 0.300000, 0.000000)  // inSunLightColor<0:Inf:[0.2f,1.#INFf],1:Inf:[0.2f,1.#INFf],2:Inf:[0.3f,1.#INFf]>

#line 428
  max r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r13.xyz, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r10.xyz, r10.xyzx, r13.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mul r3.xyz, r3.xyzx, r10.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 434
  nop 
  mov r4.w, r5.x
  mul r5.w, r4.w, l(31.000000)
  mov r7.w, r5.z
  mul r8.w, r7.w, l(7.000000)
  add r5.w, r5.w, r8.w
  mov r8.w, -r5.w
  max r5.w, r5.w, r8.w  // x<0:NaN:Inf>

#line 827
  round_ni r8.w, r5.w
  mov r8.w, -r8.w
  add r10.x, r5.w, r8.w  // fract<0:NaN:Inf>

#line 434
  mov r10.x, r10.x  // oilColor<0:NaN:Inf>
  nop 
  mul r5.w, r4.w, l(22.000000)
  mul r8.w, r7.w, l(19.000000)
  add r5.w, r5.w, r8.w
  mov r8.w, -r5.w
  max r5.w, r5.w, r8.w  // x<0:NaN:Inf>

#line 827
  round_ni r8.w, r5.w
  mov r8.w, -r8.w
  add r10.y, r5.w, r8.w  // fract<0:NaN:Inf>

#line 435
  mov r10.y, r10.y  // oilColor<1:NaN:Inf>
  nop 
  mul r4.w, r4.w, l(10.000000)
  mul r5.w, r7.w, l(24.000000)
  add r4.w, r4.w, r5.w
  mov r5.w, -r4.w
  max r4.w, r4.w, r5.w  // x<0:NaN:Inf>

#line 827
  round_ni r5.w, r4.w
  mov r5.w, -r5.w
  add r10.z, r4.w, r5.w  // fract<0:NaN:Inf>

#line 436
  mov r10.z, r10.z  // oilColor<2:NaN:Inf>
  mul r10.xyz, r3.xyzx, r10.xyzx
  mul r10.xyz, r2.wwww, r10.xyzx
  add r12.xyz, r3.xyzx, r10.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 411
endif 

#line 781
mov r12.xyz, r12.xyzx  // NCalcCubeMap_calcCubeMap_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.z, r4.z  // NCalcCubeMap_calcCubeMap_outFresnel<0:[0.05f,1f]>

#line 735
mov r8.xyz, r8.xyzx  // NCalcLighting_sunLight0_inLightDir<0,1,2>

#line 739
mov r2.x, r2.x  // NCalcLighting_sunLight0_inShadowRate<0:[0f,2f]>
nop 
mov r8.xyz, r8.xyzx  // inLightDir<0,1,2>
mov r2.x, r2.x  // inShadowRate<0:[0f,2f]>

#line 483
dp3 r3.x, r5.xyzx, r8.xyzx
max r3.x, r3.x, l(0.000000)
min r3.x, r3.x, l(1.000000)  // NL<0:[0f,1f]>
mov r3.y, -r3.x
add r3.y, r3.y, l(1.000000)
mul r3.z, r3.y, l(1.000000)
mul r3.y, r3.y, r3.y
mul r3.y, r3.y, r3.y
mul r3.y, r3.y, r3.z
mul r3.y, r3.y, l(0.700000)
add r3.y, r3.y, l(0.300000)  // fresnel<0:[0.3f,1f]>
mul r10.xyz, r3.xxxx, r9.xyzx
mul r10.xyz, r2.xxxx, r10.xyzx
mov r3.x, -r3.y
add r3.x, r3.x, l(1.000000)
mul r3.xyz, r3.xxxx, r10.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 490
mul r10.xyz, r5.xyzx, l(4.000000, 1.000000, 4.000000, 0.000000)
dp3 r4.w, r10.xyzx, r10.xyzx
rsq r4.w, r4.w
mul r10.xyz, r4.wwww, r10.xyzx  // inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r4.w, r10.xyzx, r8.xyzx
max r4.w, r4.w, l(0.000000)
min r4.w, r4.w, l(1.000000)  // NL<0:[0f,1f]>
mov r4.w, -r4.w
add r4.w, r4.w, l(1.000000)
mul r5.w, r4.w, l(1.000000)
mul r4.w, r4.w, r4.w
mul r4.w, r4.w, r4.w
mul r4.w, r4.w, r5.w
mul r4.w, r4.w, l(0.700000)
add r4.w, r4.w, l(0.300000)  // fresnel<0:[0.3f,1f]>

#line 495
add r8.xyz, r8.xyzx, r11.xyzx
dp3 r5.w, r8.xyzx, r8.xyzx
rsq r5.w, r5.w
mul r8.xyz, r5.wwww, r8.xyzx  // halfVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r5.w, r10.xyzx, r8.xyzx
max r5.w, r5.w, l(0.000000)  // NH<0:Inf:[-0f,1.#INFf]>
log r5.w, r5.w
mul r5.w, r5.w, l(512.000000)
exp r5.w, r5.w
mul r8.xyz, r5.wwww, r9.xyzx
mul r8.xyz, r2.xxxx, r8.xyzx
mul r8.xyz, r4.wwww, r8.xyzx  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 740
mov r3.xyz, r3.xyzx  // NCalcLighting_sunLight0_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r8.xyz, r8.xyzx  // NCalcLighting_sunLight0_outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 768
mov r3.xyz, r3.xyzx  // NAddThreeLights_addLights_inDiffuse0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r8.xyz, r8.xyzx  // NAddThreeLights_addLights_inSpecular0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r3.xyz, r3.xyzx  // inDiffuse0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r8.xyz, r8.xyzx  // inSpecular0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 521
mov r3.xyz, r3.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r8.xyz, r8.xyzx  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 770
mov r3.xyz, r3.xyzx  // NAddThreeLights_addLights_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r8.xyz, r8.xyzx  // NAddThreeLights_addLights_outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 733
nop 

#line 132
nop 

#line 363
nop 

#line 283
mov r9.xyz, cb3[0].xyzx  // GetHemisphereAmbientLightFactor0<0,1,2>

#line 363
mov r9.xyz, r9.xyzx  // c0<0,1,2>
nop 

#line 291
mov r10.xyz, cb3[1].xyzx  // GetHemisphereAmbientLightFactor1<0,1,2>

#line 364
mov r10.xyz, r10.xyzx  // c1<0,1,2>
dp3 r4.w, r5.xzyx, l(0.000000, 0.000000, 1.000000, 0.000000)  // fT<0:NaN:Inf>
mul r5.xyz, r4.wwww, r9.xyzx
add r5.xyz, r10.xyzx, r5.xyzx  // CalculateHemisphereAmbinetLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 132
nop 
mul r5.xyz, r2.yyyy, r5.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 733
mov r5.xyz, r5.xyzx  // NAmbientCalculate_ambient0_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 727
nop 

#line 308
mul r1.w, r1.w, l(4.000000)
mul r9.xy, r1.wwww, r4.xyxx
add r6.zw, r6.zzzw, r9.xxxy  // outBaseUV<0:NaN:Inf,1:NaN:Inf>

#line 727
mov r6.zw, r6.zzzw  // NCalcBasePickUV_calcBasePickUV_outBaseUV<0:NaN:Inf,1:NaN:Inf>
mov r6.zw, r6.zzzw  // NGetBaseColor_getBaseColor_inBaseUV<0:NaN:Inf,1:NaN:Inf>
mov r9.xyzw, v0.xyzw  // NGetBaseColor_getBaseColor_inColor<0,1,2,3>
nop 
mov r6.zw, r6.zzzw  // inBaseUV<0:NaN:Inf,1:NaN:Inf>
mov r9.xyzw, r9.xyzw  // inColor<0,1,2,3>

#line 323
sample_indexable(texture2d)(float,float,float,float) r10.xyzw, r6.zwzz, t0.xyzw, s10  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
nop 
mov r10.xyz, r10.xyzx  // inSRGB<0:Inf,1:Inf,2:Inf>

#line 455
mul r11.xyz, r10.xyzx, l(0.015996, 0.015996, 0.015996, 0.000000)
mul r13.xyz, r10.xyzx, l(0.668276, 0.668276, 0.668276, 0.000000)
mul r13.xyz, r10.xyzx, r13.xyzx
add r11.xyz, r11.xyzx, r13.xyzx
mul r13.xyz, r10.xyzx, l(0.317465, 0.317465, 0.317465, 0.000000)
mul r13.xyz, r10.xyzx, r13.xyzx
mul r13.xyz, r10.xyzx, r13.xyzx
add r10.xyz, r11.xyzx, r13.xyzx  // GammaDecodeIshiyama<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 325
mov r10.xyz, r10.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r10.w, r10.w  // outColor<3:Inf>
mul r9.xyzw, r9.xyzw, r10.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 729
mov r9.xyzw, r9.xyzw  // NGetBaseColor_getBaseColor_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 788
mov r9.xyzw, r9.xyzw  // NCalcLightedExposuredColor_calcLightedExposuredColor_inAlbedo<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r3.xyz, r3.xyzx  // NCalcLightedExposuredColor_calcLightedExposuredColor_inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.xyz, r5.xyzx  // NCalcLightedExposuredColor_calcLightedExposuredColor_inAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r8.xyz, r8.xyzx  // NCalcLightedExposuredColor_calcLightedExposuredColor_inSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r12.xyz, r12.xyzx  // NCalcLightedExposuredColor_calcLightedExposuredColor_inCubeMap<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.z, r4.z  // NCalcLightedExposuredColor_calcLightedExposuredColor_inCubeMapFresnel<0:[0.05f,1f]>
mov r7.xyz, r7.xyzx  // NCalcLightedExposuredColor_calcLightedExposuredColor_inDistortion<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 797
mov r2.w, r2.w  // NCalcLightedExposuredColor_calcLightedExposuredColor_inOilIntensity<0>
mov r1.y, r1.y  // NCalcLightedExposuredColor_calcLightedExposuredColor_inTransparencyBlendFactor<0:[0f,1f]>

#line 805
mov r1.x, r1.x  // NCalcLightedExposuredColor_calcLightedExposuredColor_inTransparency<0>
mov r1.z, r1.z  // NCalcLightedExposuredColor_calcLightedExposuredColor_inReflectionFactor<0>
nop 
mov r9.xyzw, r9.xyzw  // inAlbedo<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r3.xyz, r3.xyzx  // inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.xyz, r5.xyzx  // inAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r8.xyz, r8.xyzx  // inSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r12.xyz, r12.xyzx  // inCubeMap<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.z, r4.z  // inCubeMapFresnel<0:[0.05f,1f]>
mov r7.xyz, r7.xyzx  // inDistortion<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.w, r2.w  // inOilIntensity<0>
mov r1.y, r1.y  // inTransparencyBlendFactor<0:[0f,1f]>
mov r1.x, r1.x  // inTransparency<0>
mov r1.z, r1.z  // inReflectionFactor<0>

#line 359
mov r1.x, r1.x  // transparency<0>
mov r1.z, r1.z  // reflectionFactor<0>
mov r1.x, -r1.x
add r1.x, r1.x, l(1.000000)
mul r1.x, r1.y, r1.x
mov r1.x, -r1.x
add r1.xyw, r1.xxxx, l(1.000000, 1.000000, 0.000000, 1.000000)  // transparency<0,0,0>

#line 365
mov r2.y, -r4.z
add r2.y, r2.y, l(1.000000)
add r2.x, r2.y, r2.x
max r2.x, r2.x, l(0.000000)
min r2.x, r2.x, l(1.000000)  // shadowFactor<0:[0f,1f]>
mul r3.xyz, r2.xxxx, r3.xyzx
add r3.xyz, r5.xyzx, r3.xyzx
mul r3.xyz, r3.xyzx, r9.xyzx
mov r5.xyz, -r3.xyzx
add r5.xyz, r5.xyzx, r7.xyzx
mul r1.xyw, r1.xyxw, r5.xyxz
add r1.xyw, r1.xyxw, r3.xyxz  // baseLightColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r3.xyz, r4.zzzz, r12.xyzx
mul r3.xyz, r2.xxxx, r3.xyzx
mul r3.xyz, r1.zzzz, r3.xyzx
add r3.xyz, r3.xyzx, r8.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 373
nop 
mul r1.z, r4.x, l(31.000000)
mul r2.x, r4.y, l(7.000000)
add r1.z, r1.z, r2.x
mov r2.x, -r1.z
max r1.z, r1.z, r2.x  // x<0:NaN:Inf>

#line 827
round_ni r2.x, r1.z
mov r2.x, -r2.x
add r5.x, r1.z, r2.x  // fract<0:NaN:Inf>

#line 373
mov r5.x, r5.x  // oilColor<0:NaN:Inf>
nop 
mul r1.z, r4.x, l(22.000000)
mul r2.x, r4.y, l(19.000000)
add r1.z, r1.z, r2.x
mov r2.x, -r1.z
max r1.z, r1.z, r2.x  // x<0:NaN:Inf>

#line 827
round_ni r2.x, r1.z
mov r2.x, -r2.x
add r5.y, r1.z, r2.x  // fract<0:NaN:Inf>

#line 374
mov r5.y, r5.y  // oilColor<1:NaN:Inf>
nop 
mul r1.z, r4.x, l(10.000000)
mul r2.x, r4.y, l(24.000000)
add r1.z, r1.z, r2.x
mov r2.x, -r1.z
max r1.z, r1.z, r2.x  // x<0:NaN:Inf>

#line 827
round_ni r2.x, r1.z
mov r2.x, -r2.x
add r5.z, r1.z, r2.x  // fract<0:NaN:Inf>

#line 375
mov r5.z, r5.z  // oilColor<2:NaN:Inf>
mul r4.xyz, r1.xywx, r5.xyzx
mul r4.xyz, r2.wwww, r4.xyzx
mul r4.xyz, r4.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000)
add r1.xyz, r1.xywx, r4.xyzx  // baseLightColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r4.xyz, r3.xyzx, r5.xyzx
mul r2.xyw, r2.wwww, r4.xyxz
add r2.xyw, r2.xyxw, r3.xyxz  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 381
add r9.xyz, r1.xyzx, r2.xywx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r9.w, r9.w  // outColor<3:NaN:Inf>

#line 807
mov r9.xyz, r9.xyzx  // NCalcLightedExposuredColor_calcLightedExposuredColor_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r9.w, r9.w  // NCalcLightedExposuredColor_calcLightedExposuredColor_outColor<3:NaN:Inf>

#line 810
mov r9.xyzw, r9.xyzw  // NCalcVolumeFogColor_calcFogColor_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // NCalcVolumeFogColor_calcFogColor_inVPos<0,1,0,1>
nop 
mov r9.xyzw, r9.xyzw  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // inVPos<0,1,0,1>

#line 392
nop 
mov r0.xyzw, r0.xyzw  // inVPos<0,1,0,1>
mov r9.xyzw, r9.xyzw  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 813
nop 
mov r0.xyzw, r0.xyzw  // inVPos<0,1,0,1>

#line 765
mov r1.xyzw, cb0[1].xyxy
div r0.xyzw, r0.xyzw, r1.xyzw  // clipTexcoord<0:NaN:Inf,1:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
mul r0.xyzw, r0.xyzw, l(2.000000, -2.000000, 2.000000, -2.000000)
add r0.xyzw, r0.xyzw, l(-1.000000, 1.000000, -1.000000, 1.000000)  // clipTexcoord<0:NaN:Inf,1:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
nop 
mov r0.xyzw, r0.xyzw  // inClipPos<0:NaN:Inf,1:NaN:Inf,0:NaN:Inf,1:NaN:Inf>

#line 142
nop 
mov r0.xyzw, r0.xyzw  // inClipPos<0:NaN:Inf,1:NaN:Inf,0:NaN:Inf,1:NaN:Inf>

#line 50
nop 
mov r3.w, r3.w  // inViewZ<0>

#line 27
mov r1.x, cb2[25].x  // invLogFarDistance<0>

#line 30
log r1.y, r3.w
mul r1.x, r1.y, r1.x  // EncodeFogCameraZ<0:NaN:Inf>

#line 50
mov r1.x, r1.x  // zEncoded<0:NaN:Inf>
max r1.x, r1.x, l(0.000000)
min r1.x, r1.x, l(1.000000)  // zEncoded<0:[0f,1f]>
mul r1.x, r1.x, l(127.000000)  // zEncoded<0:[0f,127f]>

#line 56
mul r0.xyzw, r0.xyzw, l(0.014648, 0.123047, 0.014648, 0.123047)
add r0.xyzw, r0.xyzw, l(0.015625, 0.125000, 0.015625, 0.125000)  // uv<0:NaN:Inf,1:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
add r1.y, r1.x, l(1.000000)
max r1.y, r1.y, l(0.000000)
min r1.w, r1.y, l(127.000000)
mov r1.y, r1.x
round_ni r1.yz, r1.yywy  // zInt<0:[0f,127f],1:[1f,127f]>
div r1.yz, r1.yyzy, l(0.000000, 32.000000, 32.000000, 0.000000)
frc r2.xy, r1.yzyy
mul r3.xz, r2.xxyx, l(32.000000, 0.000000, 32.000000, 0.000000)  // layerOffset<0:[0f,32f],2:[0f,32f]>
round_ni r3.yw, r1.yyyz  // layerOffset<1:[0f,3f],3:[0f,3f]>
mul r3.xyzw, r3.xyzw, l(0.031250, 0.250000, 0.031250, 0.250000)
add r0.xyzw, r0.xyzw, r3.xyzw  // uv_lerp<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
frc r1.xyzw, r1.xxxx  // zBlend<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyxx, t12.xyzw, s11  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.zwzz, t12.xyzw, s11  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
mov r4.xyzw, -r1.xyzw
add r4.xyzw, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
mul r3.xyzw, r3.xyzw, r4.xyzw
mul r0.xyzw, r0.xyzw, r1.xyzw
add r0.xyzw, r0.xyzw, r3.xyzw  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 69
mov r1.x, cb2[25].y  // normalizeFactor<0>
mul r0.xyz, r0.xyzx, r1.xxxx  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // GetVolumetricFog2D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, r0.w  // GetVolumetricFog2D<3:NaN:Inf>

#line 142
mov r0.xyzw, r0.xyzw  // GetVolumetricFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 767
mov r0.xyzw, r0.xyzw  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // CalculateVolumeFogCommon<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 813
mov r0.xyzw, r0.xyzw  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 
mov r9.xyzw, r9.xyzw  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 779
nop 

#line 111
nop 

#line 148
mov r1.x, cb5[12].y  // GetBaseColor<1>

#line 111
mov r1.x, r1.x  // param<0>
lt r1.x, r1.x, l(0.000000)
movc r1.xyz, r1.xxxx, l(1.000000,1.000000,1.000000,0), l(0,0,0,0)  // GetBlendMode<0:[-0f,1f],0:[-0f,1f],0:[-0f,1f]>

#line 779
mov r1.xyz, r1.xyzx  // blendModeMask<0:[-0f,1f],0:[-0f,1f],0:[-0f,1f]>

#line 785
mov r1.w, -r0.w
add r1.w, r1.w, l(1.000000)
mul r1.w, r1.w, r1.z
mov r1.w, -r1.w
add r1.w, r1.w, l(1.000000)  // fogAlpha<0:NaN:Inf>

#line 794
mul r2.xyw, r0.wwww, r9.xyxz
add r0.xyz, r0.xyzx, r2.xywx
mov r2.xyw, -r0.xyxz
add r2.xyw, r2.xyxw, r9.xyxz
mul r1.xyz, r1.xyzx, r2.xywx
add r0.xyz, r0.xyzx, r1.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 799
mul r0.w, r1.w, r9.w  // inColor<3:NaN:Inf>
mov r0.xyz, r0.xyzx  // CalculateVolumeFogBlend<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, r0.w  // CalculateVolumeFogBlend<3:NaN:Inf>

#line 814
mov r0.xyzw, r0.xyzw  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyzw, r0.xyzw  // CalculateVolumeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 392
mov r0.xyzw, r0.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 

#line 767
nop 

#line 142
nop 

#line 50
nop 

#line 810
mov r0.xyzw, r0.xyzw  // NCalcVolumeFogColor_calcFogColor_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyz, r0.xyzx  // NGammaEncodeF3_gammaCorrection_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r0.xyz, r0.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 17
nop 
mov r0.xyz, r0.xyzx  // linearRGB<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 24
ge r1.xyz, l(0.003131, 0.003131, 0.003131, 0.000000), r0.xyzx
movc r1.xyz, r1.xyzx, l(1.000000,1.000000,1.000000,0), l(0,0,0,0)  // mask<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f]>
mul r2.xyw, r0.xyxz, l(12.920000, 12.920000, 0.000000, 12.920000)
mul r2.xyw, r1.xyxz, r2.xyxw
mov r1.xyz, -r1.xyzx
add r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
max r0.xyz, r0.xyzx, l(0.000010, 0.000010, 0.000010, 0.000000)
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
exp r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000)
add r0.xyz, r0.xyzx, l(-0.055000, -0.055000, -0.055000, 0.000000)
mul r0.xyz, r0.xyzx, r1.xyzx
add r0.xyz, r0.xyzx, r2.xywx  // GammaCorrection<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 17
mov r0.xyz, r0.xyzx  // outColorSRGB<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 813
mov r0.xyz, r0.xyzx  // NGammaEncodeF3_gammaCorrection_outColorSRGB<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 706
mov r6.xy, r6.xyxx  // NComputeDepthBlendFactor_computeDepthBlendFactor_inSceneDepth<0:NaN:Inf,1:NaN:Inf>
nop 
mov r6.xy, r6.xyxx  // inSceneDepth<0:NaN:Inf,1:NaN:Inf>

#line 552
nop 

#line 128
mov r1.x, cb5[11].x  // GetDepthBlendFactor<0>

#line 552
mov r1.x, r1.x  // zBlendFactor<0>
add r1.y, r2.z, r6.x  // zBlend<0:NaN:Inf>
mul r1.y, r1.x, r1.y
max r1.y, r1.y, l(0.000000)
min r1.y, r1.y, l(1.000000)  // outBlendFactor<0:[0f,1f]>

#line 557
mov r1.y, -r1.y
add r1.y, r1.y, l(1.000000)  // tmp<0:[0f,1f]>
mul r1.z, r1.y, r1.y
mul r1.y, r1.y, r1.z
mov r1.y, -r1.y
add r2.x, r1.y, l(1.000000)  // outBlendFactor<0:[0f,1f]>

#line 563
mul r1.y, r6.y, l(1.050000)
min r1.y, r1.y, r6.x  // viewZSub<0:NaN:Inf>
add r1.y, r2.z, r1.y  // zBlend<0:NaN:Inf>
mul r1.x, r1.x, r1.y
max r1.x, r1.x, l(0.000000)
min r1.x, r1.x, l(1.000000)  // outBlendFactor<1:[0f,1f]>

#line 568
mov r1.x, -r1.x
add r1.x, r1.x, l(1.000000)  // tmp<0:[0f,1f]>
mul r1.y, r1.x, r1.x
mul r1.x, r1.x, r1.y
mov r1.x, -r1.x
add r2.y, r1.x, l(1.000000)  // outBlendFactor<1:[0f,1f]>

#line 707
mov r2.x, r2.x  // NComputeDepthBlendFactor_computeDepthBlendFactor_outBlendFactor<0:[0f,1f]>
mov r2.y, r2.y  // NComputeDepthBlendFactor_computeDepthBlendFactor_outBlendFactor<1:[0f,1f]>

#line 815
mov r2.xy, r2.xyxx  // NOutputColorBufferSoftBlender_finalBlender_inZBlendFactor<0:[0f,1f],1:[0f,1f]>
mov r0.xyz, r0.xyzx  // NOutputColorBufferSoftBlender_finalBlender_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, r0.w  // NOutputColorBufferSoftBlender_finalBlender_inAlpha<0:NaN:Inf>
nop 
mov r2.xy, r2.xyxx  // inZBlendFactor<0:[0f,1f],1:[0f,1f]>
mov r0.xyz, r0.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, r0.w  // inAlpha<0:NaN:Inf>

#line 258
mul r1.x, r2.x, r0.w
mul r1.xyz, r0.xyzx, r1.xxxx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r1.w, r2.x, r0.w  // outColor<3:NaN:Inf>
mul r2.x, r2.y, r0.w
mul r3.xyz, r0.xyzx, r2.xxxx  // outColorSub<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r3.w, r2.y, r0.w  // outColorSub<3:NaN:Inf>

#line 818
mov r1.xyzw, r1.xyzw  // NOutputColorBufferSoftBlender_finalBlender_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r3.xyzw, r3.xyzw  // NOutputColorBufferSoftBlender_finalBlender_outColorSub<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o0.xyzw, r1.xyzw  // outColor0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xyzw, r3.xyzw  // outColor1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 609
ret 
// Approximately 908 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
