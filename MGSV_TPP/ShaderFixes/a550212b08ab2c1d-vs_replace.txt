// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:43:35 2016

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}

cbuffer cVSSystem : register(b0)
{

  struct
  {
    float4 m_param;
    float4 m_renderInfo;
    float4 m_renderBuffer;
    float4 m_dominantLightDir;
  } g_vsSystem : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float2 v0 : POSITION0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy;
  r0.xy = r0.xy;
  r0.xy = float2(2,-2) * r0.xy;
  r0.xy = float2(-1,1) + r0.xy;
  r0.xy = r0.xy;
  r0.zw = float2(1,1);
  r1.xy = r0.xy;
  r1.xy = r1.xy;
  r1.xy = float2(0.5,-0.5) * r1.xy;
  r1.xy = float2(0.5,0.5) + r1.xy;
  r1.zw = g_vsMaterial.m_materials[0].xy / g_vsMaterial.m_materials[0].zw;
  r1.xy = r1.xy * r1.zw;
  r1.xy = r1.xy;
  r2.xw = float2(0.25,0.25) / g_vsSystem.m_renderBuffer.xy;
  r2.y = -r2.w;
  r3.xy = r2.xy;
  r3.zw = -r2.xw;
  r2.xy = r2.xw;
  r2.z = -r2.x;
  r2.zw = r2.zw;
  r1.xy = r1.xy;
  r3.xy = r3.xy;
  r3.zw = r3.zw;
  r2.xy = r2.xy;
  r2.zw = r2.zw;
  o0.xyzw = r0.xyzw;
  o1.xy = r1.xy;
  o2.xyzw = r3.xyzw;
  o3.xyzw = r2.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
// cbuffer cVSSystem
// {
//
//   struct VSSystem
//   {
//       
//       float4 m_param;                // Offset:    0
//       float4 m_renderInfo;           // Offset:   16
//       float4 m_renderBuffer;         // Offset:   32
//       float4 m_dominantLightDir;     // Offset:   48
//
//   } g_vsSystem;                      // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSSystem                         cbuffer      NA          NA    0        1
// cVSMaterial                       cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xy          0     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_input v0.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 4

#line 77 "d:\work\master\git_clone\_intermediate\win64\GrSystemShaders_dx11_win64\Release\ColorDownsample_vs.hlsl"
mov r0.xy, v0.xyxx  // NScreenCoordinateToDrawCoordinate_drawCoordinate_inPosition<0,1>
nop 
mov r0.xy, r0.xyxx  // inPosition<0,1>

#line 32
mul r0.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000)
add r0.xy, r0.xyxx, l(-1.000000, 1.000000, 0.000000, 0.000000)  // outPosition<0:Inf,1:Inf>

#line 78
mov r0.xy, r0.xyxx  // NScreenCoordinateToDrawCoordinate_drawCoordinate_outPosition<0:Inf,1:Inf>
mov r0.zw, l(0,0,1.000000,1.000000)  // NScreenCoordinateToDrawCoordinate_drawCoordinate_outPosition<2: 1f,3: 1f>
mov r1.xy, r0.xyxx  // NCalculateUvs_uvs_inPosition<0:Inf,1:Inf>
nop 
mov r1.xy, r1.xyxx  // inPosition<0:Inf,1:Inf>

#line 40
mul r1.xy, r1.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000)
add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // uv<0,1>

#line 47
div r1.zw, cb4[0].xxxy, cb4[0].zzzw
mul r1.xy, r1.zwzz, r1.xyxx  // uv<0:NaN:Inf,1:NaN:Inf>
mov r1.xy, r1.xyxx  // outUv<0:NaN:Inf,1:NaN:Inf>
div r2.xw, l(0.250000, 0.000000, 0.000000, 0.250000), cb0[2].xxxy  // offsets<0:Inf,1:Inf>
mov r2.y, -r2.w
mov r3.xy, r2.xyxx  // offset1<0:Inf,1:Inf>
mov r3.zw, -r2.xxxw  // offset1<2:Inf,3:Inf>
mov r2.xy, r2.xwxx  // offset2<0:Inf,1:Inf>
mov r2.z, -r2.x
mov r2.zw, r2.zzzw  // offset2<2:Inf,3:Inf>

#line 80
mov r1.xy, r1.xyxx  // NCalculateUvs_uvs_outUv<0:NaN:Inf,1:NaN:Inf>
mov r3.xy, r3.xyxx  // NCalculateUvs_uvs_offset1<0:Inf,1:Inf>
mov r3.zw, r3.zzzw  // NCalculateUvs_uvs_offset1<2:Inf,3:Inf>
mov r2.xy, r2.xyxx  // NCalculateUvs_uvs_offset2<0:Inf,1:Inf>
mov r2.zw, r2.zzzw  // NCalculateUvs_uvs_offset2<2:Inf,3:Inf>
mov o0.xyzw, r0.xyzw  // outPosition<0:Inf,1:Inf,2: 1f,3: 1f>
mov o1.xy, r1.xyxx  // outUv<0:NaN:Inf,1:NaN:Inf>
mov o2.xyzw, r3.xyzw  // offset1<0:Inf,1:Inf,2:Inf,3:Inf>
mov o3.xyzw, r2.xyzw  // offset2<0:Inf,1:Inf,2:Inf,3:Inf>

#line 62
ret 
// Approximately 32 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(37,14-15): warning X3578: Output value 'o1' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
