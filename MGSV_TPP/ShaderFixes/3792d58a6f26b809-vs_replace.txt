// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:43 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  out float4 o0 : COLOR0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD6,
  out float4 o3 : SV_Position0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.xyw;
  r1.xw = r0.zx;
  r0.xz = v2.xy;
  r0.w = v3.w;
  r1.z = v4.w;
  r1.xw = r1.xw;
  r0.xz = r0.xz;
  r0.w = r0.w;
  r1.z = r1.z;
  r2.xyzw = g_vsObject.m_localParam[3].xyzw;
  r2.xyzw = r2.xyzw;
  r3.w = 1;
  r3.xyz = v0.xyz;
  r4.x = dot(r3.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r4.y = dot(r3.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r4.z = dot(r3.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r4.w = dot(r3.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r3.x = dot(r4.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r3.y = dot(r4.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r3.z = dot(r4.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r3.w = dot(r4.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r3.xyzw = r3.xyzw;
  r1.y = 1;
  r2.xyzw = r2.xyzw * r1.yyyx;
  r2.xyz = r2.xyz;
  r4.xyz = cmp(float3(0.0392800011,0.0392800011,0.0392800011) >= r2.xyz);
  r4.xyz = r4.xyz ? float3(1,1,1) : float3(0,0,0);
  r5.xyz = r2.xyz / float3(12.9200001,12.9200001,12.9200001);
  r5.xyz = r5.xyz * r4.xyz;
  r4.xyz = -r4.xyz;
  r4.xyz = float3(1,1,1) + r4.xyz;
  r6.xyz = float3(0.0549999997,0.0549999997,0.0549999997) + r2.xyz;
  r6.xyz = r6.xyz / float3(1.05499995,1.05499995,1.05499995);
  r6.xyz = max(float3(9.99999975e-006,9.99999975e-006,9.99999975e-006), r6.xyz);
  r6.xyz = log2(r6.xyz);
  r6.xyz = float3(2.4000001,2.4000001,2.4000001) * r6.xyz;
  r6.xyz = exp2(r6.xyz);
  r4.xyz = r6.xyz * r4.xyz;
  r2.xyz = r5.xyz + r4.xyz;
  r2.xyz = r2.xyz;
  r0.xz = r0.xz;
  r1.x = r3.w;
  r1.y = r0.w;
  r1.z = r1.z;
  r1.w = r1.w;
  r3.xyzw = r3.xyzw;
  r2.xyz = r2.xyz;
  r2.w = r2.w;
  r0.xz = r0.xz;
  r1.xyzw = r1.xyzw;
  o3.xyzw = r3.xyzw;
  o0.xyzw = r2.xyzw;
  o1.xy = r0.xz;
  o2.xyzw = r1.xyzw;
  o1.z = r0.y;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xy w
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float      w
// TEXCOORD                 2   xyzw        4     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 6   xyzw        2     NONE   float   xyzw
// SV_Position              0   xyzw        3      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[8], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyw
dcl_input v2.xy
dcl_input v3.w
dcl_input v4.w
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output_siv o3.xyzw, position
dcl_temps 7

#line 128 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Primitive_TppFootPrint_vs.hlsl"
mov r0.xyz, v1.xywx  // inColor<0,1,3>

#line 138
mov r1.xw, r0.zzzx  // NTransformInputLocal_transform_inColor<3,0>
mov r0.xz, v2.xxyx  // NTransformInputLocal_transform_inUV<0,1>
mov r0.w, v3.w  // NTransformInputLocal_transform_inAttribute1<3>
mov r1.z, v4.w  // NTransformInputLocal_transform_inAttribute2<3>
nop 
mov r1.xw, r1.xxxw  // inColor<3,0>
mov r0.xz, r0.xxzx  // inUV<0,1>
mov r0.w, r0.w  // inAttribute1<3>
mov r1.z, r1.z  // inAttribute2<3>

#line 58
nop 

#line 48
mov r2.xyzw, cb5[12].xyzw  // GetBaseColor<0,1,2,3>

#line 58
mov r2.xyzw, r2.xyzw  // baseColor<0,1,2,3>

#line 61
nop 
mov r3.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r3.xyz, v0.xyzx
dp4 r4.x, r3.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r4.y, r3.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r4.z, r3.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r4.w, r3.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 62
nop 

#line 408
dp4 r3.x, r4.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r4.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r4.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r3.w, r4.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 62
mov r3.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r1.y, l(1.000000)
mul r2.xyzw, r1.yyyx, r2.xyzw  // outColor<0,1,2,3:Inf>
nop 
mov r2.xyz, r2.xyzx  // inSRGB<0,1,2>

#line 48
ge r4.xyz, l(0.039280, 0.039280, 0.039280, 0.000000), r2.xyzx
movc r4.xyz, r4.xyzx, l(1.000000,1.000000,1.000000,0), l(0,0,0,0)  // mask<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f]>
div r5.xyz, r2.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
mul r5.xyz, r4.xyzx, r5.xyzx
mov r4.xyz, -r4.xyzx
add r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r6.xyz, r2.xyzx, l(0.055000, 0.055000, 0.055000, 0.000000)
div r6.xyz, r6.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000)
max r6.xyz, r6.xyzx, l(0.000010, 0.000010, 0.000010, 0.000000)
log r6.xyz, r6.xyzx
mul r6.xyz, r6.xyzx, l(2.400000, 2.400000, 2.400000, 0.000000)
exp r6.xyz, r6.xyzx
mul r4.xyz, r4.xyzx, r6.xyzx
add r2.xyz, r4.xyzx, r5.xyzx  // GammaDecode<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 64
mov r2.xyz, r2.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xz, r0.xxzx  // outBaseUV<0,1>

#line 100
mov r1.x, r3.w  // outDepthFootWetLR<0:NaN:Inf>
mov r1.y, r0.w  // outDepthFootWetLR<1>
mov r1.z, r1.z  // outDepthFootWetLR<2>
mov r1.w, r1.w  // outDepthFootWetLR<3>

#line 142
mov r3.xyzw, r3.xyzw  // NTransformInputLocal_transform_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r2.xyz, r2.xyzx  // NTransformInputLocal_transform_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.w, r2.w  // NTransformInputLocal_transform_outColor<3:Inf>
mov r0.xz, r0.xxzx  // NTransformInputLocal_transform_outBaseUV<0,1>
mov r1.xyzw, r1.xyzw  // NTransformInputLocal_transform_outDepthFootWetLR<0:NaN:Inf,1,2,3>
mov o3.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o0.xyzw, r2.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:Inf>
mov o1.xy, r0.xzxx  // outBaseUV<0,1>
mov o2.xyzw, r1.xyzw  // outDepthFootWetLR<0:NaN:Inf,1,2,3>
mov o1.z, r0.y  // outBaseUV<2>

#line 115
ret 
// Approximately 61 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(53,14-15): warning X3578: Output value 'o1' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
