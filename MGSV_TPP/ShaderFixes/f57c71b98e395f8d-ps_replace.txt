// ---- Created with 3Dmigoto v1.2.27 on Mon Jan 25 23:07:34 2016

cbuffer cPSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_psMaterial : packoffset(c0);

}

cbuffer cPSSystem : register(b0)
{

  struct
  {
    float4 m_param;
    float4 m_renderInfo;
    float4 m_renderBuffer;
    float4 m_dominantLightDir;
  } g_psSystem : packoffset(c0);

}

SamplerState inBaseSampler_s : register(s0);
SamplerState inLayerSampler_s : register(s1);
SamplerState inMaskSampler_s : register(s2);
SamplerState inScreenSampler_s : register(s3);
Texture2D<float4> inBaseTexture : register(t0);
Texture2D<float4> inLayerTexture : register(t1);
Texture2D<float4> inMaskTexture : register(t2);
Texture2D<float4> inScreenTexture : register(t3);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  float2 w2 : TEXCOORD1,
  float2 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = float2(-0.5,-0.5) + v0.xy;
  r0.xy = float2(0.49609375,0.49609375) + r0.xy;
  r0.xy = g_psSystem.m_renderBuffer.zw * r0.xy;
  r0.zw = g_psSystem.m_renderBuffer.zz * g_psSystem.m_renderInfo.xx;
  r0.xy = r0.xy / r0.zw;
  r0.z = -0.5 + r0.x;
  r0.w = g_psSystem.m_renderBuffer.x * g_psSystem.m_renderBuffer.w;
  r0.z = r0.z * r0.w;
  r0.x = 0.5 + r0.z;
  r0.zw = g_psMaterial.m_materials[4].zw;
  r1.xy = g_psMaterial.m_materials[5].xy;
  r1.zw = g_psMaterial.m_materials[5].zw;
  r2.xy = -r0.zw;
  r0.xy = r2.xy + r0.xy;
  r0.xy = r0.xy * r1.zw;
  r0.xy = r0.xy + r0.zw;
  r0.xy = r0.xy + r1.xy;
  r0.z = g_psMaterial.m_materials[6].y;
  r1.xyzw = inBaseTexture.Sample(inBaseSampler_s, v2.xy).xyzw;
  r2.xyzw = inLayerTexture.Sample(inLayerSampler_s, w2.xy).xyzw;
  r3.xyzw = -r1.xyzw;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r2.xyzw = r2.xyzw * r0.zzzz;
  r1.xyzw = r2.xyzw + r1.xyzw;
  r1.xyzw = max(float4(0,0,0,0), r1.xyzw);
  r1.xyzw = min(float4(1,1,1,1), r1.xyzw);
  r0.z = g_psMaterial.m_materials[6].z;
  r0.w = inMaskTexture.Sample(inMaskSampler_s, v3.xy).y;
  r0.w = -1 + r0.w;
  r0.z = r0.z * r0.w;
  r0.z = 1 + r0.z;
  r1.w = r1.w * r0.z;
  r0.z = g_psMaterial.m_materials[6].w;
  r0.x = inScreenTexture.Sample(inScreenSampler_s, r0.xy).y;
  r0.x = -1 + r0.x;
  r0.x = r0.z * r0.x;
  r0.x = 1 + r0.x;
  r1.w = r1.w * r0.x;
  r0.xyzw = max(float4(0,0,0,0), r1.xyzw);
  r0.xyzw = min(float4(1,1,1,1), r0.xyzw);
  r1.xyzw = v1.xyzw;
  r0.xyzw = r1.xyzw * r0.xyzw;
  o0.xyzw = r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cPSMaterial
// {
//
//   struct PSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_psMaterial;                    // Offset:    0 Size:   128
//
// }
//
// cbuffer cPSSystem
// {
//
//   struct PSSystem
//   {
//       
//       float4 m_param;                // Offset:    0
//       float4 m_renderInfo;           // Offset:   16
//       float4 m_renderBuffer;         // Offset:   32
//       float4 m_dominantLightDir;     // Offset:   48
//
//   } g_psSystem;                      // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// inBaseSampler                     sampler      NA          NA    0        1
// inLayerSampler                    sampler      NA          NA    1        1
// inMaskSampler                     sampler      NA          NA    2        1
// inScreenSampler                   sampler      NA          NA    3        1
// inBaseTexture                     texture  float4          2d    0        1
// inLayerTexture                    texture  float4          2d    1        1
// inMaskTexture                     texture  float4          2d    2        1
// inScreenTexture                   texture  float4          2d    3        1
// cPSSystem                         cbuffer      NA          NA    0        1
// cPSMaterial                       cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1     zw        2     NONE   float     zw
// TEXCOORD                 2   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb4[7], immediateIndexed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v2.zw
dcl_input_ps linear v3.xy
dcl_output o0.xyzw
dcl_temps 4

#line 443 "d:\work\master\git_clone\_intermediate\win64\GrSystemShaders_dx11_win64\Release\Draw2D_Ui2_BL_CenteringScreen_ps.hlsl"
add r0.xy, v0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)  // inVPos<0,1>

#line 462
mov r0.xy, r0.xyxx  // NScreenToTextureCoordinate_screenToTextureCoordinate_inPixelPosition<0,1>
nop 
mov r0.xy, r0.xyxx  // inPixelPosition<0,1>

#line 56
add r0.xy, r0.xyxx, l(0.496094, 0.496094, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, cb0[2].zwzz  // outTexcoord<0:Inf,1:Inf>

#line 463
mov r0.xy, r0.xyxx  // NScreenToTextureCoordinate_screenToTextureCoordinate_outTexcoord<0:Inf,1:Inf>
mov r0.xy, r0.xyxx  // NComputeScreenTexcoord_computeScreenTexcoord_inTexcoord<0:Inf,1:Inf>
nop 
mov r0.xy, r0.xyxx  // inTexcoord<0:Inf,1:Inf>

#line 375
mov r0.xy, r0.xyxx  // outTexcoord<0:Inf,1:Inf>

#line 378
mul r0.zw, cb0[1].xxxx, cb0[2].zzzz
div r0.xy, r0.xyxx, r0.zwzz  // outTexcoord<0:NaN:Inf,1:NaN:Inf>
add r0.z, r0.x, l(-0.500000)
mul r0.w, cb0[2].w, cb0[2].x
mul r0.z, r0.w, r0.z
add r0.x, r0.z, l(0.500000)  // outTexcoord<0:NaN:Inf>

#line 464
mov r0.x, r0.x  // NComputeScreenTexcoord_computeScreenTexcoord_outTexcoord<0:NaN:Inf>
mov r0.y, r0.y  // NComputeScreenTexcoord_computeScreenTexcoord_outTexcoord<1:NaN:Inf>
mov r0.xy, r0.xyxx  // NTransformUV_screenUV_inUV<0:NaN:Inf,1:NaN:Inf>
mov r0.zw, cb4[4].zzzw  // NTransformUV_screenUV_inCenter<0,1>
mov r1.xy, cb4[5].xyxx  // NTransformUV_screenUV_inShift<0,1>
mov r1.zw, cb4[5].zzzw  // NTransformUV_screenUV_inRepeart<0,1>
nop 
mov r0.xy, r0.xyxx  // inUV<0:NaN:Inf,1:NaN:Inf>
mov r0.zw, r0.zzzw  // inCenter<0,1>
mov r1.xy, r1.xyxx  // inShift<0,1>
mov r1.zw, r1.zzzw  // inRepeart<0,1>

#line 96
mov r2.xy, -r0.zwzz
add r0.xy, r0.xyxx, r2.xyxx
mul r0.xy, r1.zwzz, r0.xyxx
add r0.xy, r0.zwzz, r0.xyxx
add r0.xy, r1.xyxx, r0.xyxx  // outUV<0:NaN:Inf,1:NaN:Inf>

#line 468
mov r0.xy, r0.xyxx  // NTransformUV_screenUV_outUV<0:NaN:Inf,1:NaN:Inf>
mov r0.z, cb4[6].y  // NBlendLayer_blendLayer_inLayerBlend<0>

#line 473
nop 
mov r0.z, r0.z  // inLayerBlend<0>

#line 267
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0  // baseColor<0:Inf,1:Inf,2:Inf,3:Inf>
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v2.zwzz, t1.xyzw, s1  // layerColor<0:Inf,1:Inf,2:Inf,3:Inf>
nop 
mov r1.xyzw, r1.xyzw  // color<0:Inf,1:Inf,2:Inf,3:Inf>
mov r2.xyzw, r2.xyzw  // layer<0:Inf,1:Inf,2:Inf,3:Inf>
mov r0.z, r0.z  // layerBlend<0>

#line 199
mov r3.xyzw, -r1.xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r2.xyzw, r0.zzzz, r2.xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
max r1.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r1.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)  // color<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
mov r1.xyzw, r1.xyzw  // LayerBlend_BL<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>

#line 270
mov r1.xyzw, r1.xyzw  // outColor<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>

#line 473
mov r1.xyzw, r1.xyzw  // NBlendLayer_blendLayer_outColor<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>

#line 478
mov r1.xyzw, r1.xyzw  // NBlendMask_blendMask_inColor<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
mov r0.z, cb4[6].z  // NBlendMask_blendMask_inBlend<0>
nop 
mov r1.xyzw, r1.xyzw  // inColor<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
mov r0.z, r0.z  // inBlend<0>

#line 358
sample_indexable(texture2d)(float,float,float,float) r0.w, v3.xyxx, t2.xzwy, s2
mov r0.w, r0.w  // maskColor<1:Inf>
add r0.w, r0.w, l(-1.000000)
mul r0.z, r0.w, r0.z
add r0.z, r0.z, l(1.000000)
mul r1.w, r0.z, r1.w  // inColor<3:NaN:Inf>
mov r1.xyz, r1.xyzx  // outColor<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
mov r1.w, r1.w  // outColor<3:NaN:Inf>

#line 481
mov r1.xyzw, r1.xyzw  // NBlendMask_blendMask_outColor<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:NaN:Inf>

#line 484
mov r1.xyzw, r1.xyzw  // NBlendScreen_blendScreen_inColor<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:NaN:Inf>
mov r0.z, cb4[6].w  // NBlendScreen_blendScreen_inBlend<0>
mov r0.xy, r0.xyxx  // NBlendScreen_blendScreen_inUV<0:NaN:Inf,1:NaN:Inf>
nop 
mov r1.xyzw, r1.xyzw  // inColor<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:NaN:Inf>
mov r0.z, r0.z  // inBlend<0>
mov r0.xy, r0.xyxx  // inUV<0:NaN:Inf,1:NaN:Inf>

#line 401
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t3.yxzw, s3
mov r0.x, r0.x  // screenColor<1:Inf>
add r0.x, r0.x, l(-1.000000)
mul r0.x, r0.x, r0.z
add r0.x, r0.x, l(1.000000)
mul r1.w, r0.x, r1.w  // inColor<3:NaN:Inf>
max r0.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.xyzw, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)  // outColor<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>

#line 487
mov r0.xyzw, r0.xyzw  // NBlendScreen_blendScreen_outColor<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>

#line 490
mov r0.xyzw, r0.xyzw  // NBlendNodeColor_blendNodeColor_inColor0<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
mov r1.xyzw, v1.xyzw  // NBlendNodeColor_blendNodeColor_inColor1<0,1,2,3>
nop 
mov r0.xyzw, r0.xyzw  // inColor0<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
mov r1.xyzw, r1.xyzw  // inColor1<0,1,2,3>

#line 420
mul r0.xyzw, r0.xyzw, r1.xyzw  // outColor<0,1,2,3>

#line 492
mov r0.xyzw, r0.xyzw  // NBlendNodeColor_blendNodeColor_outColor<0,1,2,3>
mov o0.xyzw, r0.xyzw  // outColor<0,1,2,3>

#line 433
ret 
// Approximately 91 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
