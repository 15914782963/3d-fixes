// Specular highlights (no shadows) rain in Africa sometimes
// ---- Created with 3Dmigoto v1.2.27 on Thu Feb 04 22:21:13 2016

cbuffer cPSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_psScene : packoffset(c0);

}

cbuffer cPSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_psMaterial : packoffset(c0);

}

cbuffer cPSSystem : register(b0)
{

  struct
  {
    float4 m_param;
    float4 m_renderInfo;
    float4 m_renderBuffer;
    float4 m_dominantLightDir;
  } g_psSystem : packoffset(c0);

}

SamplerState g_samplerPoint_Wrap_s : register(s8);
SamplerState g_samplerPoint_Clamp_s : register(s9);
SamplerState g_samplerLinear_Wrap_s : register(s10);
SamplerState g_samplerLinear_Clamp_s : register(s11);
Texture2D<float4> inFloorNormalMap : register(t0);
TextureCube<float4> inReflectionCubeMap : register(t1);
Texture2D<float4> inSpecular : register(t3);
Texture2D<float4> inNormal : register(t4);
Texture2D<float4> inAlbedo : register(t8);
Texture2D<float4> inLightDiffuse : register(t9);
Texture2D<float4> inLightSpecular : register(t10);
Texture2D<float4> inDepth : register(t11);
Texture2D<float4> g_tex_fog : register(t12);
Texture2D<float4> inOcclusion : register(t13);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = float2(-0.5,-0.5) + v0.xy;
  r0.xy = float2(0.49609375,0.49609375) + r0.xy;
  r0.xy = g_psSystem.m_renderBuffer.zw * r0.xy;
  r0.zw = v1.xy;
  r1.xy = -g_psScene.m_cameraCenterOffset.xy;
  r0.zw = r1.xy + r0.zw;
  r1.xyzw = g_psScene.m_projectionParam.xyzw;
  r2.x = inDepth.SampleLevel(g_samplerPoint_Clamp_s, r0.xy, 0).x;
  r1.w = -r1.w;
  r1.w = r2.x + r1.w;
  r2.z = r1.z / r1.w;
  r1.z = r2.z;
  r0.zw = r1.xy * r0.zw;
  r2.xy = r0.zw * r1.zz;

float4 stereo = StereoParams.Load(0);

// Adjustment for specular highlights:
float4 spec = float4(r2.xy, r1.z, 1);
spec.x -= stereo.x * spec.z / g_psScene.m_projection._m00;

// No shadows

  r2.w = 1;
  r3.x = dot(spec, g_psScene.m_view._m00_m10_m20_m30);
  r3.y = dot(spec, g_psScene.m_view._m01_m11_m21_m31);
  r3.z = dot(spec, g_psScene.m_view._m02_m12_m22_m32);
  r0.zw = g_psMaterial.m_materials[4].xy;
  r1.xy = max(g_psMaterial.m_materials[2].xz, r1.zz);
  r1.xy = min(g_psMaterial.m_materials[2].yw, r1.xy);
  r2.xy = -g_psMaterial.m_materials[2].xz;
  r1.xy = r2.xy + r1.xy;
  r0.zw = r1.xy * r0.zw;
  r1.x = cmp(r1.z >= g_psMaterial.m_materials[2].z);
  r0.w = -r0.w;
  r0.w = 1 + r0.w;
  r0.z = r1.x ? r0.w : r0.z;
  r1.xy = r3.xz;
  r1.xy = g_psMaterial.m_materials[7].zw * r1.xy;
  r1.xy = g_psMaterial.m_materials[1].ww * r1.xy;
  r1.xy = g_psMaterial.m_materials[7].xy + r1.xy;
  r2.xyz = inNormal.SampleLevel(g_samplerPoint_Clamp_s, r0.xy, 0).xyz;
  r2.xy = float2(2,2) * r2.xy;
  r2.xy = float2(-1,-1) + r2.xy;
  r0.w = r2.z * r2.z;
  r0.w = 2 * r0.w;
  r4.z = -1 + r0.w;
  r0.w = r4.z;
  r0.w = r0.w * r0.w;
  r0.w = -r0.w;
  r0.w = 1 + r0.w;
  r2.zw = r2.xy * r0.ww;
  r1.w = dot(r2.xy, r2.xy);
  r0.w = r1.w * r0.w;
  r0.w = 1.00000001e-007 + r0.w;
  r0.w = rsqrt(r0.w);
  r4.xy = r2.zw * r0.ww;
  r4.w = 0;
  r2.x = dot(r4.xyzw, g_psScene.m_view._m00_m10_m20_m30);
  r2.y = dot(r4.xyzw, g_psScene.m_view._m01_m11_m21_m31);
  r2.z = dot(r4.xyzw, g_psScene.m_view._m02_m12_m22_m32);
  r0.w = r2.y;
  r1.w = 1 + r0.w;
  r1.w = max(0.25, r1.w);
  r1.w = min(1, r1.w);
  r2.w = cmp(r1.w >= 1);
  r2.w = r2.w ? 1 : 0;
  r2.w = -r2.w;
  r2.w = 1 + r2.w;
  r3.w = -0.25 + r1.w;
  r3.w = 1.33329999 * r3.w;
  r3.w = -r3.w;
  r3.w = 1 + r3.w;
  r2.w = r3.w * r2.w;
  r2.w = -r2.w;
  r1.w = r2.w + r1.w;
  r2.w = inSpecular.Sample(g_samplerLinear_Clamp_s, r0.xy).y;
  r0.z = r1.w * r0.z;
  r0.z = r0.z * r2.w;
  r0.z = 1 * r0.z;
  r4.xyz = -g_psScene.m_eyepos.xyz;
  r3.xyz = r4.xyz + r3.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r1.x = inFloorNormalMap.Sample(g_samplerLinear_Wrap_s, r1.xy).y;
  r0.w = max(0, r0.w);
  r0.w = min(1, r0.w);
  r1.y = dot(r3.xyz, r2.xyz);
  r1.w = r1.y + r1.y;
  r1.w = -r1.w;
  r2.xyz = r2.xyz * r1.www;
  r2.xyz = r2.xyz + r3.xyz;
  r2.xyzw = inReflectionCubeMap.SampleBias(g_samplerLinear_Clamp_s, r2.xyz, -2).xyzw;
  r3.xyz = r2.www;
  r0.w = r1.x * r0.w;
  r4.xyz = -r2.xyz;
  r3.xyz = r4.xyz + r3.xyz;
  r3.xyz = r3.xyz * r0.www;
  r2.xyz = r3.xyz + r2.xyz;
  r2.xyz = r2.xyz * r2.xyz;
  r2.xyz = g_psMaterial.m_materials[1].xxx * r2.xyz;
  r2.xyz = g_psMaterial.m_materials[1].zzz * r2.xyz;
  r2.xyz = g_psMaterial.m_materials[1].yyy + r2.xyz;
  r2.xyz = max(float3(0,0,0), r2.xyz);
  r2.xyz = min(float3(1,1,1), r2.xyz);
  r0.w = -r1.y;
  r0.w = max(r1.y, r0.w);
  r0.w = -r0.w;
  r0.w = 1 + r0.w;
  r0.w = r0.w * r0.w;
  r0.w = 0.25 + r0.w;
  r1.xyw = r2.xyz * r0.www;
  r0.w = inOcclusion.Sample(g_samplerLinear_Wrap_s, r0.xy).x;
  r2.xyz = r0.www;
  r3.xyz = r2.xyz * r0.zzz;
  r1.xyw = r3.xyz * r1.xyw;
  r1.xyw = max(float3(0,0,0), r1.xyw);
  r1.xyw = min(float3(1,1,1), r1.xyw);
  r3.xyz = inLightSpecular.Sample(g_samplerPoint_Wrap_s, r0.xy).xyz;
  r4.xyz = inLightDiffuse.Sample(g_samplerPoint_Wrap_s, r0.xy).xyz;
  r0.xyz = inAlbedo.Sample(g_samplerLinear_Wrap_s, r0.xy).xyz;
  r0.xyz = r0.xyz * r4.xyz;
  r0.xyz = r0.xyz + r3.xyz;
  r0.xyz = r0.xyz * r2.xyz;
  r0.xyz = r1.xyw + r0.xyz;
  r2.xyzw = v1.xyxy;
  r0.w = g_psScene.m_fogParam[1].x;
  r1.x = log2(r1.z);
  r0.w = r1.x * r0.w;
  r0.w = max(0, r0.w);
  r0.w = min(1, r0.w);
  r0.w = 127 * r0.w;
  r1.xyzw = float4(0.0146484375,0.123046875,0.0146484375,0.123046875) * r2.xyzw;
  r1.xyzw = float4(0.015625,0.125,0.015625,0.125) + r1.xyzw;
  r2.x = 1 + r0.w;
  r2.x = max(0, r2.x);
  r2.w = min(127, r2.x);
  r2.y = r0.w;
  r2.xy = floor(r2.yw);
  r2.xy = r2.xy / float2(32,32);
  r2.zw = frac(r2.xy);
  r3.xz = float2(32,32) * r2.zw;
  r3.yw = floor(r2.xy);
  r2.xyzw = float4(0.03125,0.25,0.03125,0.25) * r3.xyzw;
  r1.xyzw = r2.xyzw + r1.xyzw;
  r2.xyzw = frac(r0.wwww);
  r3.xyzw = g_tex_fog.Sample(g_samplerLinear_Clamp_s, r1.xy).xyzw;
  r1.xyzw = g_tex_fog.Sample(g_samplerLinear_Clamp_s, r1.zw).xyzw;
  r4.xyzw = -r2.xyzw;
  r4.xyzw = float4(1,1,1,1) + r4.xyzw;
  r3.xyzw = r4.xyzw * r3.xyzw;
  r1.xyzw = r2.xyzw * r1.xyzw;
  r1.xyzw = r3.xyzw + r1.xyzw;
  r0.w = g_psScene.m_fogParam[1].y;
  r1.xyz = r1.xyz * r0.www;
  r0.xyz = r1.www * r0.xyz;
  r0.xyz = r0.xyz + r1.xyz;
  r0.w = dot(r0.xyz, float3(0.212500006,0.715399981,0.0720999986));
  r0.w = 0.03125 * r0.w;
  r1.x = max(0.001953125, r0.w);
  r1.x = rsqrt(r1.x);
  r1.w = r1.x * r0.w;
  r2.xyz = g_psMaterial.m_materials[0].xyz;
  r3.xyz = r2.yyy;
  r3.xzw = cmp(r3.xyz >= r0.xyz);
  r3.xzw = r3.xzw ? float3(1,1,1) : float3(0,0,0);
  r4.xyz = r3.xzw * r0.xyz;
  r3.xzw = -r3.xzw;
  r3.xzw = float3(1,1,1) + r3.xzw;
  r0.xyz = r0.xyz + r2.zzz;
  r5.xyz = -r3.yyy;
  r0.xyz = r5.xyz + r0.xyz;
  r0.xyz = r2.xxx * r0.xyz;
  r0.xyz = float3(-1,-1,-1) / r0.xyz;
  r0.xyz = r0.xyz + r2.zzz;
  r0.xyz = r0.xyz + r3.yyy;
  r0.xyz = r3.xzw * r0.xyz;
  r1.xyz = r4.xyz + r0.xyz;
  o0.xyzw = r1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.27 on Thu Feb 04 22:21:13 2016
//
//
// Buffer Definitions: 
//
// cbuffer cPSScene
// {
//
//   struct PSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_psScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cPSMaterial
// {
//
//   struct PSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_psMaterial;                    // Offset:    0 Size:   128
//
// }
//
// cbuffer cPSSystem
// {
//
//   struct PSSystem
//   {
//       
//       float4 m_param;                // Offset:    0
//       float4 m_renderInfo;           // Offset:   16
//       float4 m_renderBuffer;         // Offset:   32
//       float4 m_dominantLightDir;     // Offset:   48
//
//   } g_psSystem;                      // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerPoint_Wrap               sampler      NA          NA    8        1
// g_samplerPoint_Clamp              sampler      NA          NA    9        1
// g_samplerLinear_Wrap              sampler      NA          NA   10        1
// g_samplerLinear_Clamp             sampler      NA          NA   11        1
// inFloorNormalMap                  texture  float4          2d    0        1
// inReflectionCubeMap               texture  float4        cube    1        1
// inSpecular                        texture  float4          2d    3        1
// inNormal                          texture  float4          2d    4        1
// inAlbedo                          texture  float4          2d    8        1
// inLightDiffuse                    texture  float4          2d    9        1
// inLightSpecular                   texture  float4          2d   10        1
// inDepth                           texture  float4          2d   11        1
// g_tex_fog                         texture  float4          2d   12        1
// inOcclusion                       texture  float4          2d   13        1
// cPSSystem                         cbuffer      NA          NA    0        1
// cPSScene                          cbuffer      NA          NA    2        1
// cPSMaterial                       cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[29], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s10, mode_default
dcl_sampler s11, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t11
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t13
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6

#line 267 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\DR_TonemapRainFilter_NoIR_ps.hlsl"
add r0.xy, v0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)  // inVPos<0,1>

#line 299
mov r0.xy, r0.xyxx  // NScreenToTextureCoordinate_screenToTexcoord_inPixelPosition<0,1>
nop 
mov r0.xy, r0.xyxx  // inPixelPosition<0,1>

#line 56
add r0.xy, r0.xyxx, l(0.496094, 0.496094, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, cb0[2].zwzz  // outTexcoord<0:Inf,1:Inf>

#line 300
mov r0.xy, r0.xyxx  // NScreenToTextureCoordinate_screenToTexcoord_outTexcoord<0:Inf,1:Inf>

#line 306
mov r0.zw, v1.xxxy  // NFetchViewPos_fetchViewPos_inBasePos<0,1>
mov r0.xy, r0.xyxx  // NFetchViewPos_fetchViewPos_inBaseUV<0:Inf,1:Inf>
nop 
mov r0.zw, r0.zzzw  // inBasePos<0,1>
mov r0.xy, r0.xyxx  // inBaseUV<0:Inf,1:Inf>

#line 113
nop 
mov r0.xy, r0.xyxx  // inTexCoord<0:Inf,1:Inf>
mov r1.xy, -cb2[28].xyxx
add r0.zw, r0.zzzw, r1.xxxy  // clipSpacePosXY<0:Inf,1:Inf>
mov r1.xyzw, cb2[21].xyzw  // inProjectionParam<0,1,2,3>

#line 329
sample_l_indexable(texture2d)(float,float,float,float) r2.x, r0.xyxx, t11.xyzw, s9, l(0.000000)
mov r2.x, r2.x  // zOverW<0:Inf>

#line 336
nop 
mov r0.zw, r0.zzzw  // clipSpacePos<0:Inf,1:Inf>
mov r2.x, r2.x  // clipSpacePos<2:Inf>
mov r1.xyzw, r1.xyzw  // proj<0,1,2,3>

#line 288
mov r1.w, -r1.w
add r1.w, r1.w, r2.x
div r2.z, r1.z, r1.w  // viewPos<2:NaN:Inf>
mov r1.z, r2.z  // viewPos<2:NaN:Inf>
mul r0.zw, r0.zzzw, r1.xxxy
mul r2.xy, r1.zzzz, r0.zwzz  // viewPos<0:NaN:Inf,1:NaN:Inf>

#line 293
mov r1.z, r1.z  // ReconstructViewPos<2:NaN:Inf>

#line 336
mov r1.z, r1.z  // ReconstructViewPosFromTexture<2:NaN:Inf>

#line 113
mov r1.z, r1.z  // outViewPos<2:NaN:Inf>

#line 308
mov r1.z, r1.z  // NFetchViewPos_fetchViewPos_outViewPos<2:NaN:Inf>

#line 312
nop 
mov r1.z, r1.z  // NGetWorldPos_getWorldPos_inViewPos<2:NaN:Inf>
nop 
mov r1.z, r1.z  // inViewPos<2:NaN:Inf>

#line 94
nop 
mov r2.w, l(1.000000)  // vec<3: 1f>

#line 408
dp4 r3.x, r2.xyzw, cb2[8].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r2.xyzw, cb2[9].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r2.xyzw, cb2[10].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 94
mov r3.xyz, r3.xyzx  // outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 97
mov r0.zw, cb4[4].xxxy  // ratio<0,1>
max r1.xy, r1.zzzz, cb4[2].xzxx
min r1.xy, r1.xyxx, cb4[2].ywyy
mov r2.xy, -cb4[2].xzxx
add r1.xy, r1.xyxx, r2.xyxx
mul r0.zw, r0.zzzw, r1.xxxy  // alpha<0:NaN:Inf,1:NaN:Inf>
ge r1.x, r1.z, cb4[2].z
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
movc r0.z, r1.x, r0.w, r0.z  // outFadeOutAlpha<0:NaN:Inf>

#line 313
mov r3.xyz, r3.xyzx  // NGetWorldPos_getWorldPos_outWorldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.z, r0.z  // NGetWorldPos_getWorldPos_outFadeOutAlpha<0:NaN:Inf>

#line 319
mov r1.xy, r3.xzxx  // NGetTexCoordFromWorldPosXZ_getTexcoordFromWorldPosXZ_inWorldPositionXZ<0:NaN:Inf,1:NaN:Inf>
nop 
mov r1.xy, r1.xyxx  // inWorldPositionXZ<0:NaN:Inf,1:NaN:Inf>

#line 109
mul r1.xy, r1.xyxx, cb4[7].zwzz
mul r1.xy, r1.xyxx, cb4[1].wwww
add r1.xy, r1.xyxx, cb4[7].xyxx  // outTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 320
mov r1.xy, r1.xyxx  // NGetTexCoordFromWorldPosXZ_getTexcoordFromWorldPosXZ_outTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 303
nop 

#line 60
nop 

#line 158
nop 
sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t4.xyzw, s9, l(0.000000)
mov r2.xyz, r2.xyzx  // encodeNormal<0:Inf,1:Inf,2:Inf>

#line 132
mul r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
add r2.xy, r2.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // viewSpaceNormal<0:Inf,1:Inf>
mul r0.w, r2.z, r2.z
mul r0.w, r0.w, l(2.000000)
add r4.z, r0.w, l(-1.000000)  // viewSpaceNormal<2:NaN:Inf>
mov r0.w, r4.z  // viewSpaceNormal<2:NaN:Inf>
mul r0.w, r0.w, r0.w
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)  // oneMinusZz<0:NaN:Inf>
mul r2.zw, r0.wwww, r2.xxxy
dp2 r1.w, r2.xyxx, r2.xyxx
mul r0.w, r0.w, r1.w
add r0.w, r0.w, l(0.000000)
rsq r0.w, r0.w
mul r4.xy, r0.wwww, r2.zwzz  // viewSpaceNormal<0:NaN:Inf,1:NaN:Inf>

#line 317
nop 

#line 78
nop 

#line 412
mov r4.w, l(0)
dp4 r2.x, r4.xyzw, cb2[8].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r2.y, r4.xyzw, cb2[9].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r2.z, r4.xyzw, cb2[10].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 78
mov r2.xyz, r2.xyzx  // outWorldSpaceNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 317
mov r2.xyz, r2.xyzx  // NViewSpaceNormalToWorldSpaceNormal_viewSpaceNormalToWorlSpaceNormal_outWorldSpaceNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 336
mov r3.xyz, r3.xyzx  // NCalculateRainColor_calcRainColor_inWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 339
mov r1.xy, r1.xyxx  // NCalculateRainColor_calcRainColor_inFloorNormalTexCoordXZ<0:NaN:Inf,1:NaN:Inf>
mov r2.xyz, r2.xyzx  // NCalculateRainColor_calcRainColor_inWorldSpaceNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.z, r0.z  // NCalculateRainColor_calcRainColor_inFadeOutAlpha<0:NaN:Inf>
nop 
mov r3.xyz, r3.xyzx  // inWorldPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xy, r1.xyxx  // inFloorNormalTexCoordXZ<0:NaN:Inf,1:NaN:Inf>
mov r2.xyz, r2.xyzx  // inWorldSpaceNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.z, r0.z  // inFadeOutAlpha<0:NaN:Inf>

#line 157
mov r0.w, r2.y  // dirRate<0:NaN:Inf>
add r1.w, r0.w, l(1.000000)
max r1.w, r1.w, l(0.250000)
min r1.w, r1.w, l(1.000000)  // dirFlag<0:[0.25f,1f]>
ge r2.w, r1.w, l(1.000000)
movc r2.w, r2.w, l(1.000000), l(0)
mov r2.w, -r2.w
add r2.w, r2.w, l(1.000000)
add r3.w, r1.w, l(-0.250000)
mul r3.w, r3.w, l(1.333300)
mov r3.w, -r3.w
add r3.w, r3.w, l(1.000000)
mul r2.w, r2.w, r3.w
mov r2.w, -r2.w
add r1.w, r1.w, r2.w  // dirFlag<0:[-0.75f,1f]>
sample_indexable(texture2d)(float,float,float,float) r2.w, r0.xyxx, t3.xzwy, s11
mov r2.w, r2.w  // specular<1:Inf>
mul r0.z, r0.z, r1.w
mul r0.z, r2.w, r0.z
mul r0.z, r0.z, l(1.000000)  // alpha<0:NaN:Inf>

#line 167
mov r4.xyz, -cb2[20].xyzx
add r3.xyz, r3.xyzx, r4.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx  // eyeVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 173
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t0.yxzw, s10
mov r1.x, r1.x  // rainBlendFactor<0:Inf>

#line 176
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)  // wallFactor<0:[0f,1f]>

#line 179
dp3 r1.y, r3.xyzx, r2.xyzx
add r1.w, r1.y, r1.y
mov r1.w, -r1.w
mul r2.xyz, r1.wwww, r2.xyzx
add r2.xyz, r3.xyzx, r2.xyzx  // refVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
sample_b_indexable(texturecube)(float,float,float,float) r2.xyzw, r2.xyzx, t1.xyzw, s11, l(-2.000000)  // ref<0:Inf,1:Inf,2:Inf,3:Inf>

#line 205
mov r3.xyz, r2.wwww
mul r0.w, r0.w, r1.x
mov r4.xyz, -r2.xyzx
add r3.xyz, r3.xyzx, r4.xyzx
mul r3.xyz, r0.wwww, r3.xyzx
add r2.xyz, r2.xyzx, r3.xyzx  // ref<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 208
mul r2.xyz, r2.xyzx, r2.xyzx  // ref<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r2.xyz, r2.xyzx, cb4[1].xxxx
mul r2.xyz, r2.xyzx, cb4[1].zzzz
add r2.xyz, r2.xyzx, cb4[1].yyyy  // rainColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // rainColor<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 216
mov r0.w, -r1.y
max r0.w, r0.w, r1.y
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)  // c<0:NaN:Inf>
mul r0.w, r0.w, r0.w
add r0.w, r0.w, l(0.250000)
mul r1.xyw, r0.wwww, r2.xyxz  // rainColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
sample_indexable(texture2d)(float,float,float,float) r0.w, r0.xyxx, t13.yzwx, s10
mov r2.xyz, r0.wwww  // occlusion<0:Inf,1:Inf,2:Inf>
mul r3.xyz, r0.zzzz, r2.xyzx
mul r1.xyw, r1.xyxw, r3.xyxz  // rainColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 222
max r1.xyw, r1.xyxw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r1.xyw, r1.xyxw, l(1.000000, 1.000000, 0.000000, 1.000000)  // outColor<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 339
mov r1.xyw, r1.xyxw  // NCalculateRainColor_calcRainColor_outColor<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 326
nop 

#line 349
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r0.xyxx, t10.xyzw, s8
mov r3.xyz, r3.xyzx  // encodedSpecular<0:Inf,1:Inf,2:Inf>
nop 
mov r3.xyz, r3.xyzx  // encodedColor<0:Inf,1:Inf,2:Inf>

#line 347
mov r3.xyz, r3.xyzx  // DecodeAliasHDRColor<0:Inf,1:Inf,2:Inf>

#line 350
mov r3.xyz, r3.xyzx  // outColor<0:Inf,1:Inf,2:Inf>

#line 326
mov r3.xyz, r3.xyzx  // NFetchExposuredLAccSpecular_fetchLAccSpecular_outColor<0:Inf,1:Inf,2:Inf>
nop 

#line 117
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r0.xyxx, t9.xyzw, s8
mov r4.xyz, r4.xyzx  // encodedDiffuse<0:Inf,1:Inf,2:Inf>
nop 
mov r4.xyz, r4.xyzx  // encodedColor<0:Inf,1:Inf,2:Inf>

#line 347
mov r4.xyz, r4.xyzx  // DecodeAliasHDRColor<0:Inf,1:Inf,2:Inf>

#line 119
mov r4.xyz, r4.xyzx  // outColor<0:Inf,1:Inf,2:Inf>

#line 324
mov r4.xyz, r4.xyzx  // NFetchExposuredLAccDiffuse_fetchLAccDiffuse_outColor<0:Inf,1:Inf,2:Inf>

#line 328
mov r4.xyz, r4.xyzx  // NCalculateColor_calcColor_inLightDiffuse<0:Inf,1:Inf,2:Inf>
mov r3.xyz, r3.xyzx  // NCalculateColor_calcColor_inLightSpecular<0:Inf,1:Inf,2:Inf>
nop 
mov r4.xyz, r4.xyzx  // inLightDiffuse<0:Inf,1:Inf,2:Inf>
mov r3.xyz, r3.xyzx  // inLightSpecular<0:Inf,1:Inf,2:Inf>

#line 85
sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t8.xyzw, s10
mov r0.xyz, r0.xyzx  // albedo<0:Inf,1:Inf,2:Inf>

#line 91
mul r0.xyz, r4.xyzx, r0.xyzx
add r0.xyz, r3.xyzx, r0.xyzx
mul r0.xyz, r2.xyzx, r0.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 331
mov r0.xyz, r0.xyzx  // NCalculateColor_calcColor_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 349
mov r0.xyz, r0.xyzx  // NAddColor3_addColor_inColorA<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyw, r1.xyxw  // NAddColor3_addColor_inColorB<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
nop 
mov r0.xyz, r0.xyzx  // inColorA<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyw, r1.xyxw  // inColorB<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 264
add r0.xyz, r0.xyzx, r1.xywx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 351
mov r0.xyz, r0.xyzx  // NAddColor3_addColor_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // NApplyVolFog_applyFog_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyzw, v1.xyxy  // NApplyVolFog_applyFog_inClipPos<0,1,0,1>
nop 
mov r0.xyz, r0.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyzw, r2.xyzw  // inClipPos<0,1,0,1>

#line 226
nop 
mov r2.xyzw, r2.xyzw  // inClipPos<0,1,0,1>
mov r1.z, r1.z  // inViewZ<0:NaN:Inf>

#line 142
nop 
mov r2.xyzw, r2.xyzw  // inClipPos<0,1,0,1>
mov r1.z, r1.z  // inViewZ<0:NaN:Inf>

#line 50
nop 
mov r1.z, r1.z  // inViewZ<0:NaN:Inf>

#line 27
mov r0.w, cb2[25].x  // invLogFarDistance<0>

#line 30
log r1.x, r1.z
mul r0.w, r0.w, r1.x  // EncodeFogCameraZ<0:NaN:Inf>

#line 50
mov r0.w, r0.w  // zEncoded<0:NaN:Inf>
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)  // zEncoded<0:[0f,1f]>
mul r0.w, r0.w, l(127.000000)  // zEncoded<0:[0f,127f]>

#line 56
mul r1.xyzw, r2.xyzw, l(0.014648, 0.123047, 0.014648, 0.123047)
add r1.xyzw, r1.xyzw, l(0.015625, 0.125000, 0.015625, 0.125000)  // uv<0:[-4.9846e+036f,4.9846e+036f],1:[-4.18707e+037f,4.18707e+037f],0:[-4.9846e+036f,4.9846e+036f],1:[-4.18707e+037f,4.18707e+037f]>
add r2.x, r0.w, l(1.000000)
max r2.x, r2.x, l(0.000000)
min r2.w, r2.x, l(127.000000)
mov r2.y, r0.w
round_ni r2.xy, r2.ywyy  // zInt<0:[0f,127f],1:[1f,127f]>
div r2.xy, r2.xyxx, l(32.000000, 32.000000, 0.000000, 0.000000)
frc r2.zw, r2.xxxy
mul r3.xz, r2.zzwz, l(32.000000, 0.000000, 32.000000, 0.000000)  // layerOffset<0:[0f,32f],2:[0f,32f]>
round_ni r3.yw, r2.xxxy  // layerOffset<1:[0f,3f],3:[0f,3f]>
mul r2.xyzw, r3.xyzw, l(0.031250, 0.250000, 0.031250, 0.250000)
add r1.xyzw, r1.xyzw, r2.xyzw  // uv_lerp<0:[-4.9846e+036f,4.9846e+036f],1:[-4.18707e+037f,4.18707e+037f],2:[-4.9846e+036f,4.9846e+036f],3:[-4.18707e+037f,4.18707e+037f]>
frc r2.xyzw, r0.wwww  // zBlend<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyxx, t12.xyzw, s11  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.zwzz, t12.xyzw, s11  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
mov r4.xyzw, -r2.xyzw
add r4.xyzw, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
mul r3.xyzw, r3.xyzw, r4.xyzw
mul r1.xyzw, r1.xyzw, r2.xyzw
add r1.xyzw, r1.xyzw, r3.xyzw  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 69
mov r0.w, cb2[25].y  // normalizeFactor<0>
mul r1.xyz, r0.wwww, r1.xyzx  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // GetVolumetricFog2D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.w, r1.w  // GetVolumetricFog2D<3:NaN:Inf>

#line 142
mov r1.xyzw, r1.xyzw  // GetVolumetricFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 226
mov r1.xyzw, r1.xyzw  // fogColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mul r0.xyz, r0.xyzx, r1.wwww
add r0.xyz, r1.xyzx, r0.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 355
mov r0.xyz, r0.xyzx  // NApplyVolFog_applyFog_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 358
mov r0.xyz, r0.xyzx  // NCalcurateOutputColor_calculateOutputColor_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r0.xyz, r0.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 240
mov r0.xyz, r0.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r0.w, r0.xyzx, l(0.212500, 0.715400, 0.072100, 0.000000)  // luminance<0:NaN:Inf>
mul r0.w, r0.w, l(0.031250)  // outColor<3:NaN:Inf>
max r1.x, r0.w, l(0.001953)
rsq r1.x, r1.x
mul r1.w, r0.w, r1.x  // outColor<3:NaN:Inf>
nop 
mov r2.xyz, cb4[0].xyzx  // params<0,1,2>
mov r0.xyz, r0.xyzx  // x<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 11
mov r3.xyz, r2.yyyy
ge r3.xzw, r3.xxyz, r0.xxyz
movc r3.xzw, r3.xxzw, l(1.000000,0,1.000000,1.000000), l(0,0,0,0)  // mask<0:[-0f,1f],1:[-0f,1f],2:[-0f,1f]>
mul r4.xyz, r0.xyzx, r3.xzwx
mov r3.xzw, -r3.xxzw
add r3.xzw, r3.xxzw, l(1.000000, 0.000000, 1.000000, 1.000000)
add r0.xyz, r2.zzzz, r0.xyzx
mov r5.xyz, -r3.yyyy
add r0.xyz, r0.xyzx, r5.xyzx
mul r0.xyz, r0.xyzx, r2.xxxx
div r0.xyz, l(-1.000000, -1.000000, -1.000000, 0.000000), r0.xyzx
add r0.xyz, r2.zzzz, r0.xyzx
add r0.xyz, r3.yyyy, r0.xyzx
mul r0.xyz, r0.xyzx, r3.xzwx
add r1.xyz, r0.xyzx, r4.xyzx  // TppTonemap<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 246
mov r1.xyz, r1.xyzx  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 359
mov r1.xyz, r1.xyzx  // NCalcurateOutputColor_calculateOutputColor_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.w, r1.w  // NCalcurateOutputColor_calculateOutputColor_outColor<3:NaN:Inf>
mov o0.xyzw, r1.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 260
ret 
// Approximately 276 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
