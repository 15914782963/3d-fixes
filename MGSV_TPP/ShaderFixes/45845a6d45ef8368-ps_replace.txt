// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:43:44 2016

cbuffer cPSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_psScene : packoffset(c0);

}

cbuffer cPSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_psObject : packoffset(c0);

}

cbuffer cPSLight : register(b3)
{

  struct
  {
    float4 m_lightParams[11];
  } g_psLight : packoffset(c0);

}

SamplerState g_samplerPoint_Wrap_s : register(s8);
SamplerState g_samplerPoint_Clamp_s : register(s9);
SamplerState g_samplerLinear_Wrap_s : register(s10);
SamplerState g_samplerLinear_Clamp_s : register(s11);
SamplerComparisonState g_samplerComparisonLess_Linear_Clmap_s : register(s15);
Texture2D<float4> g_NormalTexture : register(t0);
Texture2D<float4> g_SpecularTexture : register(t1);
Texture2D<float4> g_DepthTexture : register(t2);
Texture2D<float4> g_ShadowTexture : register(t3);
Texture2D<float4> g_CloudTexture : register(t4);
Texture3D<float4> g_lut2 : register(t8);
Texture2D<float4> g_lut1 : register(t9);
Texture2D<float4> g_MaterialTexture : register(t10);
Texture2D<float4> g_RandomTexture : register(t12);
Texture2D<float4> g_SkyReflectTexture : register(t15);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = float4(-0.5,-0.5,-0.5,-0.5) + v0.xyxy;
  r1.xyz = v2.xyw;
  r1.xyz = r1.xyz;
  r1.xy = r1.xy / r1.zz;
  r1.xy = r1.xy;
  r1.xy = r1.xy;
  r1.xy = r1.xy;
  r2.xyz = g_NormalTexture.Sample(g_samplerPoint_Wrap_s, r1.xy).xyz;
  r2.xyz = r2.xyz;
  r3.xyzw = g_SpecularTexture.Sample(g_samplerPoint_Wrap_s, r1.xy).yxzw;
  r1.x = g_DepthTexture.Sample(g_samplerPoint_Wrap_s, r1.xy).x;
  r1.x = r1.x;
  r2.xyz = r2.xyz;
  r1.yz = float2(2,2) * r2.xy;
  r1.yz = float2(-1,-1) + r1.yz;
  r1.w = r2.z * r2.z;
  r1.w = 2 * r1.w;
  r2.z = -1 + r1.w;
  r1.w = r2.z * r2.z;
  r1.w = -r1.w;
  r1.w = 1 + r1.w;
  r4.xy = r1.yz * r1.ww;
  r1.y = dot(r1.yz, r1.yz);
  r1.y = r1.w * r1.y;
  r1.y = 1.00000001e-007 + r1.y;
  r1.y = rsqrt(r1.y);
  r2.xy = r4.xy * r1.yy;
  r2.xy = r2.xy;
  r2.z = r2.z;
  r2.xyz = r2.xyz;
  r1.y = r3.y;
  r3.x = r3.x;
  r3.z = r3.z;
  r3.w = r3.w;
  r2.xyz = r2.xyz;
  r3.z = r3.z;
  r3.x = r3.x;
  r1.y = r1.y;
  r3.w = r3.w;
  r1.x = r1.x;
  r1.x = r1.x;
  r4.xyz = v1.xyw;
  r1.x = r1.x;
  r4.xyz = r4.xyz;
  r1.zw = r4.xy / r4.zz;
  r4.xy = -g_psScene.m_cameraCenterOffset.xy;
  r1.zw = r4.xy + r1.zw;
  r1.x = r1.x;
  r4.xyzw = g_psScene.m_projectionParam.xyzw;
  r1.zw = r4.xy * r1.zw;
  r2.w = -r4.w;
  r1.x = r2.w + r1.x;
  r4.z = r4.z / r1.x;
  r5.z = r4.z;
  r4.xy = r5.zz * r1.zw;
  r5.xy = r4.xy;
  r4.w = 1;
  r5.xy = r5.xy;
  r5.z = r5.z;
  r5.w = 1;
  r5.xyzw = r5.xyzw;
  r1.x = dot(r5.xyz, r5.xyz);
  r1.x = rsqrt(r1.x);
  r1.xzw = r5.xyz * r1.xxx;
  r5.xyzw = r5.xyzw;
  r1.xzw = r1.xzw;
  r6.xyz = g_psLight.m_lightParams[0].xyz;
  r7.xyz = g_psLight.m_lightParams[1].xyz * g_psScene.m_exposure.zzz;
  r7.w = g_psLight.m_lightParams[1].w;
  r6.xyz = r6.xyz;
  r7.xyzw = r7.xyzw;
  r5.xyzw = r5.xyzw;
  r0.xyzw = r0.xyzw;
  r5.xyzw = r5.xyzw;
  r0.xyzw = r0.xyzw;
  r8.x = 0.5 / g_psScene.m_shadowMapResolutions.x;
  r8.y = 0.5 / g_psScene.m_shadowMapResolutions.x;
  r9.x = dot(r4.xyzw, g_psScene.m_shadowProjection._m00_m10_m20_m30);
  r9.y = dot(r4.xyzw, g_psScene.m_shadowProjection._m01_m11_m21_m31);
  r9.z = dot(r4.xyzw, g_psScene.m_shadowProjection._m02_m12_m22_m32);
  r9.xyz = r9.xyz;
  r9.xyz = r9.xyz;
  r4.xy = r0.zw;
  r2.w = 1 / g_psScene.m_shadowMapResolutions.x;
  r4.z = 8 * r2.w;
  r4.z = -r4.z;
  r4.z = 1 + r4.z;
  r8.zw = r4.zz * r4.zz;
  r4.w = g_psScene.m_shadowProjection2._m33;
  r4.w = r4.w;
  r6.w = r8.w;
  r4.w = cmp(0 != r4.w);
  if (r4.w != 0) {
    r4.xy = float2(0.03125,0.03125) * r4.xy;
    r4.xy = g_RandomTexture.Sample(g_samplerLinear_Wrap_s, r4.xy).xy;
    r4.x = max(r4.x, r4.y);
    r4.y = 0.00249999994 * r4.x;
    r4.x = g_psScene.m_shadowMapResolutions.x * r4.x;
    r4.x = r4.x / 4;
    r2.w = r4.x * r2.w;
    r2.w = -r2.w;
    r2.w = r4.z + r2.w;
    r2.w = r2.w * r2.w;
    r6.w = 1 * r2.w;
  } else {
    r4.y = 0;
  }
  r2.w = g_psScene.m_shadowProjection2._m30;
  r2.w = r2.w;
  r9.w = 0;
  r10.x = g_psScene.m_shadowProjection2._m00;
  r10.y = g_psScene.m_shadowProjection2._m01;
  r10.z = g_psScene.m_shadowProjection2._m02;
  r10.w = g_psScene.m_shadowProjection2._m03;
  r10.xyzw = r10.xyzw;
  r11.x = g_psScene.m_shadowProjection2._m10;
  r11.y = g_psScene.m_shadowProjection2._m11;
  r11.z = g_psScene.m_shadowProjection2._m12;
  r11.w = g_psScene.m_shadowProjection2._m13;
  r11.xyzw = r11.xyzw;
  r12.x = g_psScene.m_shadowProjection2._m20;
  r12.y = g_psScene.m_shadowProjection2._m21;
  r12.z = g_psScene.m_shadowProjection2._m22;
  r12.w = g_psScene.m_shadowProjection2._m23;
  r12.xyzw = r12.xyzw;
  r4.xzw = r10.www * r9.xyz;
  r10.xyz = r4.xzw + r10.xyz;
  r10.w = 1;
  r4.xzw = r11.www * r9.xyz;
  r11.xyz = r4.xzw + r11.xyz;
  r11.w = 2;
  r4.xzw = r12.www * r9.xyz;
  r12.xyz = r4.xzw + r12.xyz;
  r12.w = 3;
  r4.x = 1 + r9.z;
  r9.z = r4.x * r2.w;
  r4.x = 1 + r10.z;
  r10.z = r4.x * r2.w;
  r4.x = 1 + r11.z;
  r11.z = r4.x * r2.w;
  r4.x = 1 + r12.z;
  r12.z = r4.x * r2.w;
  r4.xz = r9.xy * r9.xy;
  r13.xy = r10.xy * r10.xy;
  r13.zw = r11.xy * r11.xy;
  r4.xz = cmp(r8.zw >= r4.xz);
  r4.xz = r4.xz ? float2(1,1) : float2(0,0);
  r2.w = cmp(r9.z >= r4.y);
  r2.w = r2.w ? 1 : 0;
  r8.zw = r6.ww;
  r13.xy = cmp(r8.zw >= r13.xy);
  r13.xy = r13.xy ? float2(1,1) : float2(0,0);
  r4.w = cmp(r10.z >= r4.y);
  r4.w = r4.w ? 1 : 0;
  r8.zw = cmp(r8.zw >= r13.zw);
  r8.zw = r8.zw ? float2(1,1) : float2(0,0);
  r4.y = cmp(r11.z >= r4.y);
  r4.y = r4.y ? 1 : 0;
  r4.x = r4.x * r4.z;
  r14.xyzw = r4.xxxx * r2.wwww;
  r2.w = r13.x * r13.y;
  r2.w = r2.w * r4.w;
  r4.x = r8.z * r8.w;
  r4.x = r4.x * r4.y;
  r4.y = -r14.w;
  r4.y = 1 + r4.y;
  r13.xyzw = r4.yyyy * r2.wwww;
  r2.w = -r13.w;
  r2.w = 1 + r2.w;
  r2.w = r4.y * r2.w;
  r4.xyzw = r4.xxxx * r2.wwww;
  r6.w = -r4.w;
  r6.w = 1 + r6.w;
  r2.w = r6.w * r2.w;
  r15.xyzw = float4(1,1,1,1) * r2.wwww;
  r9.xyzw = r14.xyzw * r9.xyzw;
  r10.xyzw = r13.xyzw * r10.xyzw;
  r9.xyzw = r10.xyzw + r9.xyzw;
  r4.xyzw = r11.xyzw * r4.xyzw;
  r4.xyzw = r9.xyzw + r4.xyzw;
  r9.xyzw = r15.xyzw * r12.xyzw;
  r4.xyzw = r9.wxyz + r4.wxyz;
  r4.w = max(9.99999997e-007, r4.w);
  r4.xyz = r4.xyz;
  r4.w = r4.w;
  r4.xyzw = r4.xyzw;
  r4.x = r4.x;
  r8.zw = float2(0.5,0.5) * r4.yz;
  r9.xy = float2(0.5,0.5) + r8.zw;
  r2.w = -r9.y;
  r9.z = 1 + r2.w;
  r8.zw = float2(0.5,0.5) * r9.xz;
  r9.xy = float2(2,2) * r8.xy;
  r9.xy = -r9.xy;
  r9.xy = float2(1,1) + r9.xy;
  r8.zw = min(r9.xy, r8.zw);
  r2.w = -1 + r4.x;
  r2.w = max(0, r2.w);
  r2.w = min(1, r2.w);
  r4.x = r4.x / 2;
  r6.w = -r2.w;
  r9.x = r6.w + r4.x;
  r9.y = 0.5 * r2.w;
  r8.zw = r9.xy + r8.zw;
  r4.yz = r8.zw + r8.xy;
  r4.yz = r4.yz;
  r4.w = r4.w;
  r0.xyzw = r0.xyzw;
  r4.yzw = r4.yzw;
  r0.xyzw = r0.xyzw;
  r4.yzw = r4.yzw;
  r0.xyzw = r0.xyzw;
  r0.xyzw = r0.xyzw / float4(2,2,2,2);
  r0.xyzw = frac(r0.xyzw);
  r0.xyzw = cmp(r0.xyzw >= float4(0.300000012,0.300000012,0.300000012,0.300000012));
  r0.xyzw = r0.xyzw ? float4(1,1,1,1) : float4(0,0,0,0);
  r0.xyzw = float4(2,2,2,2) * r0.xyzw;
  r0.xyzw = float4(-1,-1,-1,-1) + r0.xyzw;
  r0.xyzw = float4(0.125,0.125,0.125,0.125) * r0.xyzw;
  r0.xyzw = float4(0.5,0.5,-0.5,-0.5) + r0.xyzw;
  r8.xyzw = float4(1,1,1,1) / g_psScene.m_shadowMapResolutions.xxxx;
  r0.xyzw = r8.xyzw * r0.xyzw;
  r4.yzw = r4.yzw;
  r8.xy = r4.yz + r0.xy;
  r8.xy = r8.xy;
  r8.z = r4.w;
  r9.xyz = r8.xyz / float3(1,1,1);
  r2.w = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r9.xy, r9.z).x;
  r2.w = 0 + r2.w;
  r9.xy = r4.yz + r0.zy;
  r9.xy = r9.xy;
  r9.z = r8.z;
  r9.xyz = r9.xyz / float3(1,1,1);
  r0.y = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r9.xy, r9.z).x;
  r0.y = r2.w + r0.y;
  r9.xy = r4.yz + r0.xw;
  r9.xy = r9.xy;
  r9.z = r8.z;
  r9.xyz = r9.xyz / float3(1,1,1);
  r0.x = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r9.xy, r9.z).x;
  r0.x = r0.y + r0.x;
  r8.xy = r4.yz + r0.zw;
  r8.xy = r8.xy;
  r0.yzw = r8.xyz / float3(1,1,1);
  r0.y = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r0.yz, r0.w).x;
  r0.x = r0.x + r0.y;
  r0.x = 0.25 * r0.x;
  r0.x = 1 * r0.x;
  r0.x = -r0.x;
  r0.x = 1 + r0.x;
  r0.x = r0.x * r0.x;
  r0.x = r0.x;
  r0.x = r0.x;
  r0.x = r0.x;
  r0.x = r0.x;
  r4.xy = float2(-0,-0);
  r4.z = -g_psLight.m_lightParams[8].x;
  r0.yzw = r5.xyz + r4.xyz;
  r0.y = dot(r0.yzw, r0.yzw);
  r0.y = sqrt(r0.y);
  r0.z = -g_psLight.m_lightParams[8].y;
  r0.y = r0.y + r0.z;
  r0.y = max(0, r0.y);
  r0.y = g_psLight.m_lightParams[6].x * r0.y;
  r0.y = max(0, r0.y);
  r0.y = min(1, r0.y);
  r0.z = cmp(r0.w >= 0);
  r0.z = r0.z ? 1 : 0;
  r0.y = r0.y * r0.z;
  r0.y = r0.y * r0.y;
  r0.z = -r0.x;
  r0.z = 1 + r0.z;
  r0.y = r0.y * r0.z;
  r0.x = r0.x + r0.y;
  r0.y = g_psLight.m_lightParams[6].w;
  r0.y = -r0.y;
  r0.x = r0.x + r0.y;
  r0.x = max(0, r0.x);
  r0.x = min(1, r0.x);
  r4.x = dot(g_psObject.m_localParam[0].xyzw, r5.xyzw);
  r4.y = dot(g_psObject.m_localParam[1].xyzw, r5.xyzw);
  r0.y = g_psObject.m_localParam[3].w;
  r0.z = g_psObject.m_localParam[3].z;
  r0.w = g_CloudTexture.Sample(g_samplerLinear_Wrap_s, r4.xy).x;
  r0.z = -0 + r0.z;
  r0.w = -0 + r0.w;
  r0.z = 1 / r0.z;
  r0.z = r0.w * r0.z;
  r0.z = max(0, r0.z);
  r0.z = min(1, r0.z);
  r0.w = -2 * r0.z;
  r0.w = 3 + r0.w;
  r0.z = r0.z * r0.z;
  r0.z = r0.w * r0.z;
  r0.y = r0.z * r0.y;
  r0.y = max(0, r0.y);
  r0.y = min(1, r0.y);
  r0.x = r0.x * r0.y;
  r0.y = -g_psObject.m_localParam[2].x;
  r0.y = r5.z + r0.y;
  r0.y = g_psObject.m_localParam[2].y * r0.y;
  r0.y = max(0, r0.y);
  r0.y = min(1, r0.y);
  r0.y = -r0.y;
  r0.y = 1 + r0.y;
  r0.y = r0.y * r0.y;
  r0.x = r0.x * r0.y;
  r0.x = r0.x;
  r0.x = r0.x;
  r0.x = r0.x;
  r0.y = g_psLight.m_lightParams[7].x;
  r0.y = max(r0.y, r0.x);
  r0.y = r0.y;
  r2.xyz = r2.xyz;
  r6.xyz = r6.xyz;
  r7.xyzw = r7.xyzw;
  r1.xzw = r1.xzw;
  r3.x = r3.x;
  r3.z = r3.z;
  r1.y = r1.y;
  r3.w = r3.w;
  r2.xyz = r2.xyz;
  r6.xyz = r6.xyz;
  r7.xyzw = r7.xyzw;
  r1.xzw = r1.xzw;
  r3.x = r3.x;
  r3.z = r3.z;
  r1.y = r1.y;
  r3.w = r3.w;
  r6.xyz = r6.xyz;
  r1.xzw = r1.xzw;
  r2.xyz = r2.xyz;
  r4.xyz = r6.xyz;
  r0.z = dot(r4.xyz, r2.xyz);
  r5.xyz = -r1.xzw;
  r0.w = dot(r5.xyz, r2.xyz);
  r0.w = r0.w + r0.w;
  r0.w = -r0.w;
  r8.xyz = r2.xyz * r0.www;
  r8.xyz = r8.xyz + r5.xyz;
  r8.xyz = -r8.xyz;
  r9.xyz = -r4.xyz;
  r9.xyz = r9.xyz + r8.xyz;
  r0.w = dot(r9.xyz, r9.xyz);
  r0.w = sqrt(r0.w);
  r0.w = r7.w / r0.w;
  r0.w = max(0, r0.w);
  r9.xyz = min(float3(1,1,1), r0.www);
  r10.xyz = -r6.xyz;
  r8.xyz = r10.xyz + r8.xyz;
  r8.xyz = r9.xyz * r8.xyz;
  r6.xyz = r8.xyz + r6.xyz;
  r0.w = dot(r6.xyz, r6.xyz);
  r0.w = rsqrt(r0.w);
  r6.xyz = r6.xyz * r0.www;
  r5.xyz = r6.xyz + r5.xyz;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r5.xyz * r0.www;
  r0.w = dot(r5.xyz, r2.xyz);
  r0.w = max(0, r0.w);
  r0.w = min(1, r0.w);
  r4.x = dot(r5.xyz, r4.xyz);
  r3.z = r3.z;
  r3.y = 0.25;
  r5.xyzw = g_MaterialTexture.Sample(g_samplerPoint_Clamp_s, r3.zy).xyzw;
  r3.y = 0.75;
  r6.xz = g_MaterialTexture.Sample(g_samplerPoint_Clamp_s, r3.zy).xw;
  r6.xz = r6.xz;
  r5.xyz = r5.xyz;
  r5.w = r5.w;
  r2.w = r6.x;
  r6.z = r6.z;
  r4.x = r4.x;
  r4.y = r2.w;
  r3.y = g_lut1.Sample(g_samplerLinear_Clamp_s, r4.xy).x;
  r3.y = r3.y;
  r3.y = r3.y;
  r3.z = r0.z * r0.z;
  r3.z = -r3.z;
  r3.z = 1 + r3.z;
  r3.z = r3.z * r3.w;
  r3.z = r3.z + r0.z;
  r3.w = r5.w * r3.w;
  r3.z = max(r3.z, r3.w);
  r3.z = max(0, r3.z);
  r3.z = min(1, r3.z);
  r4.xyz = r5.xyz * r3.xxx;
  r0.w = r0.w;
  r1.y = r1.y;
  r6.z = r6.z;
  r0.w = max(0, r0.w);
  r6.x = min(1, r0.w);
  r6.y = r1.y;
  r6.z = r6.z;
  r6.xyz = r6.xyz * r6.xyz;
  r6.xyz = float3(0.984375,0.9375,0.9375) * r6.xyz;
  r6.xyz = float3(0.0078125,0.03125,0.03125) + r6.xyz;
  r6.xy = g_lut2.Sample(g_samplerLinear_Clamp_s, r6.xyz).xy;
  r6.xy = r6.xy;
  r6.xy = r6.xy * r6.xy;
  r0.w = r6.x / r6.y;
  r0.w = r3.y * r0.w;
  r0.z = r0.z;
  r0.z = 4 * r0.z;
  r0.z = max(0, r0.z);
  r0.z = min(1, r0.z);
  r0.z = r0.w * r0.z;
  r4.xyz = r4.xyz * r7.xyz;
  r4.xyz = r4.xyz * r0.zzz;
  r0.z = 1 * r3.z;
  r0.z = 1 * r0.z;
  r3.yzw = r0.zzz * r7.xyz;
  r4.xyz = r4.xyz;
  r3.yzw = r3.yzw;
  r0.z = dot(r1.xzw, r2.xyz);
  r0.z = r0.z + r0.z;
  r0.z = -r0.z;
  r6.xyz = r2.xyz * r0.zzz;
  r6.xyz = r6.xyz + r1.xzw;
  r1.xzw = -r1.xzw;
  r0.z = dot(r1.xzw, r2.xyz);
  r0.z = max(0, r0.z);
  r2.x = min(1, r0.z);
  r2.y = max(g_psLight.m_lightParams[2].z, r2.w);
  r0.z = g_lut1.Sample(g_samplerLinear_Clamp_s, r2.xy).x;
  r0.z = r0.z;
  r0.z = r0.z;
  r1.xz = -r6.xy;
  r1.xz = r1.xz;
  r1.xz = float2(0.96875,0.96875) * r1.xz;
  r1.xz = float2(0.5,0.5) * r1.xz;
  r1.xz = float2(0.5,0.5) + r1.xz;
  r1.xz = float2(0.25,0.125) * r1.xz;
  r1.xz = r1.xz;
  r0.w = cmp(0 < r6.z);
  r2.xy = r0.ww ? float2(0.25,0) : float2(0,0);
  r1.xz = r2.xy + r1.xz;
  r1.xz = g_SkyReflectTexture.Sample(g_samplerLinear_Clamp_s, r1.xz).xy;
  r1.xz = float2(4,4) * r1.xz;
  r0.w = 1.42799997 * r1.y;
  r0.w = -0.300000012 + r0.w;
  r0.w = max(0, r0.w);
  r0.w = min(1, r0.w);
  r1.w = -r1.x;
  r1.z = r1.z + r1.w;
  r0.w = r1.z * r0.w;
  r1.xzw = r1.xxx + r0.www;
  r2.xyz = g_psLight.m_lightParams[3].xyz;
  r1.xzw = r2.xyz * r1.xzw;
  r0.w = -r1.y;
  r0.w = 1 + r0.w;
  r0.w = 0.5 * r0.w;
  r0.z = r0.w * r0.z;
  r0.z = r0.z * r3.x;
  r1.xyz = r1.xzw * r0.zzz;
  r1.xyz = r1.xyz * r5.xyz;
  r3.yzw = r3.yzw;
  r4.xyz = r4.xyz;
  r1.xyz = r1.xyz;
  r3.yzw = r3.yzw;
  r4.xyz = r4.xyz;
  r0.y = r0.y;
  r3.yzw = r3.yzw;
  r4.xyz = r4.xyz;
  r0.y = r0.y;
  r2.xyz = r3.yzw * r0.xxx;
  r2.xyz = float3(1,1,1) * r2.xyz;
  r0.yzw = r4.xyz * r0.yyy;
  r0.yzw = float3(1,1,1) * r0.yzw;
  r2.xyz = r2.xyz;
  r0.yzw = r0.yzw;
  r2.xyz = r2.xyz;
  r0.yzw = r0.yzw;
  r1.xyz = r1.xyz;
  r2.xyz = r2.xyz;
  r0.yzw = r0.yzw;
  r1.xyz = r1.xyz;
  r0.x = max(g_psLight.m_lightParams[2].x, r0.x);
  r0.x = g_psLight.m_lightParams[2].y * r0.x;
  r2.xyz = float3(-0,-0,-0) + r2.xyz;
  r1.xyz = r1.xyz * r0.xxx;
  r0.xyz = r1.xyz + r0.yzw;
  r2.xyz = r2.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.w = 1;
  r0.xyz = r0.xyz;
  r0.xyzw = r0.xyzw;
  r0.xyzw = r0.xyzw;
  r2.xyz = r2.xyz;
  r2.xyz = r2.xyz;
  r2.xyz = r2.xyz;
  r2.w = 1;
  r2.xyz = r2.xyz;
  r2.xyzw = r2.xyzw;
  r2.xyzw = r2.xyzw;
  o0.xyzw = r2.xyzw;
  o1.xyzw = r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cPSScene
// {
//
//   struct PSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_psScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cPSObject
// {
//
//   struct PSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_psObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cPSLight
// {
//
//   struct PSLight
//   {
//       
//       float4 m_lightParams[11];      // Offset:    0
//
//   } g_psLight;                       // Offset:    0 Size:   176
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerPoint_Wrap               sampler      NA          NA    8        1
// g_samplerPoint_Clamp              sampler      NA          NA    9        1
// g_samplerLinear_Wrap              sampler      NA          NA   10        1
// g_samplerLinear_Clamp             sampler      NA          NA   11        1
// g_samplerComparisonLess_Linear_Clmap  sampler_c      NA          NA   15        1
// g_NormalTexture                   texture  float4          2d    0        1
// g_SpecularTexture                 texture  float4          2d    1        1
// g_DepthTexture                    texture  float4          2d    2        1
// g_ShadowTexture                   texture  float4          2d    3        1
// g_CloudTexture                    texture  float4          2d    4        1
// g_lut2                            texture  float4          3d    8        1
// g_lut1                            texture  float4          2d    9        1
// g_MaterialTexture                 texture  float4          2d   10        1
// g_RandomTexture                   texture  float4          2d   12        1
// g_SkyReflectTexture               texture  float4          2d   15        1
// cPSScene                          cbuffer      NA          NA    2        1
// cPSLight                          cbuffer      NA          NA    3        1
// cPSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[30], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_constantbuffer cb3[9], immediateIndexed
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s10, mode_default
dcl_sampler s11, mode_default
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture3d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 16

#line 101 "d:\work\master\git_clone\_intermediate\win64\GrModelShaders_dx11_win64\Release\SunLight_DL_CS_ES_ps.hlsl"
add r0.xyzw, v0.xyxy, l(-0.500000, -0.500000, -0.500000, -0.500000)  // inVPos<0,1,0,1>

#line 129
mov r1.xyz, v2.xywx  // NScreenToTextureCoordinate_screenToTextureCoordinate_inBackBufferSamplingPosition<0,1,3>
nop 
mov r1.xyz, r1.xyzx  // inBackBufferSamplingPosition<0,1,3>

#line 212
div r1.xy, r1.xyxx, r1.zzzz  // outTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 130
mov r1.xy, r1.xyxx  // NScreenToTextureCoordinate_screenToTextureCoordinate_outTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 138
mov r1.xy, r1.xyxx  // NGetGeometryParam_getGeometryParam_inTexcoord<0:NaN:Inf,1:NaN:Inf>
nop 
mov r1.xy, r1.xyxx  // inTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 242
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r1.xyxx, t0.xyzw, s8
mov r2.xyz, r2.xyzx  // encodeViewNormal<0:Inf,1:Inf,2:Inf>
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyxx, t1.yxzw, s8  // specular<1:Inf,0:Inf,2:Inf,3:Inf>
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t2.xyzw, s8
mov r1.x, r1.x  // outDepth<0:Inf>

#line 299
nop 
mov r2.xyz, r2.xyzx  // encodeNormal<0:Inf,1:Inf,2:Inf>

#line 132
mul r1.yz, r2.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000)
add r1.yz, r1.yyzy, l(0.000000, -1.000000, -1.000000, 0.000000)  // viewSpaceNormal<0:Inf,1:Inf>
mul r1.w, r2.z, r2.z
mul r1.w, r1.w, l(2.000000)
add r2.z, r1.w, l(-1.000000)  // viewSpaceNormal<2:NaN:Inf>
mul r1.w, r2.z, r2.z
mov r1.w, -r1.w
add r1.w, r1.w, l(1.000000)  // oneMinusZz<0:NaN:Inf>
mul r4.xy, r1.wwww, r1.yzyy
dp2 r1.y, r1.yzyy, r1.yzyy
mul r1.y, r1.y, r1.w
add r1.y, r1.y, l(0.000000)
rsq r1.y, r1.y
mul r2.xy, r1.yyyy, r4.xyxx  // viewSpaceNormal<0:NaN:Inf,1:NaN:Inf>

#line 145
mov r2.xy, r2.xyxx  // DecodeViewSpaceNormal<0:NaN:Inf,1:NaN:Inf>
mov r2.z, r2.z  // DecodeViewSpaceNormal<2:NaN:Inf>

#line 299
mov r2.xyz, r2.xyzx  // outViewSpaceNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 303
mov r1.y, r3.y  // outRoughness<0:Inf>
mov r3.x, r3.x  // outSpecularMap<0:Inf>
mov r3.z, r3.z  // outMaterialIndex<0:Inf>
mov r3.w, r3.w  // outTranslucent<0:Inf>

#line 139
mov r2.xyz, r2.xyzx  // NGetGeometryParam_getGeometryParam_outViewSpaceNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.z, r3.z  // NGetGeometryParam_getGeometryParam_outMaterialIndex<0:Inf>
mov r3.x, r3.x  // NGetGeometryParam_getGeometryParam_outSpecularMap<0:Inf>
mov r1.y, r1.y  // NGetGeometryParam_getGeometryParam_outRoughness<0:Inf>
mov r3.w, r3.w  // NGetGeometryParam_getGeometryParam_outTranslucent<0:Inf>
mov r1.x, r1.x  // NGetGeometryParam_getGeometryParam_outDepth<0:Inf>
mov r1.x, r1.x  // NGetViewPos_getViewPos_inDepth<0:Inf>

#line 143
mov r4.xyz, v1.xywx  // NGetViewPos_getViewPos_inClipSpaceXY<0,1,3>
nop 
mov r1.x, r1.x  // inDepth<0:Inf>
mov r4.xyz, r4.xyzx  // inClipSpaceXY<0,1,3>

#line 365
nop 
div r1.zw, r4.xxxy, r4.zzzz
mov r4.xy, -cb2[28].xyxx
add r1.zw, r1.zzzw, r4.xxxy  // inScreenSpacePos<0:NaN:Inf,1:NaN:Inf>
mov r1.x, r1.x  // inDepth<0:Inf>
mov r4.xyzw, cb2[21].xyzw  // inProjectionParam<0,1,2,3>
mul r1.zw, r1.zzzw, r4.xxxy  // viewPos<0:NaN:Inf,1:NaN:Inf>
mov r2.w, -r4.w
add r1.x, r1.x, r2.w
div r4.z, r4.z, r1.x  // viewPos<2:NaN:Inf>
mov r5.z, r4.z  // viewPos<2:NaN:Inf>

#line 374
mul r4.xy, r1.zwzz, r5.zzzz  // viewPos<0:NaN:Inf,1:NaN:Inf>
mov r5.xy, r4.xyxx  // viewPos<0:NaN:Inf,1:NaN:Inf>
mov r4.w, l(1.000000)  // ReconstructViewPos2<3: 1f>
mov r5.xy, r5.xyxx  // ReconstructViewPos2<0:NaN:Inf,1:NaN:Inf>
mov r5.z, r5.z  // ReconstructViewPos2<2:NaN:Inf>
mov r5.w, l(1.000000)  // ReconstructViewPos2<3: 1f>

#line 365
mov r5.xyzw, r5.xyzw  // outViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
dp3 r1.x, r5.xyzx, r5.xyzx
rsq r1.x, r1.x
mul r1.xzw, r1.xxxx, r5.xxyz  // outEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 144
mov r5.xyzw, r5.xyzw  // NGetViewPos_getViewPos_outViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
mov r1.xzw, r1.xxzw  // NGetViewPos_getViewPos_outEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 149
nop 

#line 385
mov r6.xyz, cb3[0].xyzx  // outLightDir<0,1,2>
mul r7.xyz, cb2[23].zzzz, cb3[1].xyzx  // outLightColor<0:Inf,1:Inf,2:Inf>
mov r7.w, cb3[1].w  // outLightColor<3>

#line 149
mov r6.xyz, r6.xyzx  // NGetLightParam_getLightParam_outLightDir<0,1,2>
mov r7.xyzw, r7.xyzw  // NGetLightParam_getLightParam_outLightColor<0:Inf,1:Inf,2:Inf,3>
mov r5.xyzw, r5.xyzw  // NGetShadow_getShadow_inViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
mov r0.xyzw, r0.xyzw  // NGetShadow_getShadow_inVPos<0,1,0,1>
nop 
mov r5.xyzw, r5.xyzw  // inViewPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
mov r0.xyzw, r0.xyzw  // inVPos<0,1,0,1>

#line 50
div r8.x, l(0.500000), cb2[29].x  // halfPixelSize<0:Inf>
div r8.y, l(0.500000), cb2[29].x  // halfPixelSize<1:Inf>

#line 55
nop 

#line 408
dp4 r9.x, r4.xyzw, cb2[12].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r9.y, r4.xyzw, cb2[13].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r9.z, r4.xyzw, cb2[14].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 55
mov r9.xyz, r9.xyzx  // shadow_pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 59
nop 
mov r9.xyz, r9.xyzx  // projection_pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xy, r0.zwzz  // screenTexCoord<0,1>

#line 155
div r2.w, l(1.000000), cb2[29].x
mul r4.z, r2.w, l(8.000000)
mov r4.z, -r4.z
add r4.z, r4.z, l(1.000000)  // SHADOW_TEXTURE_UV_AREA<0:Inf>
mul r8.zw, r4.zzzz, r4.zzzz  // SHADOW_TEXTURE_UV_AREA_RANDOM_LV0<0:NaN:Inf,0:NaN:Inf>

#line 160
nop 

#line 475
mov r4.w, cb2[19].w  // GetElement<0>

#line 160
mov r4.w, r4.w  // useCascadeBlend<0>

#line 163
mov r6.w, r8.w  // SHADOW_TEXTURE_UV_AREA_RANDOM_OTH<0:NaN:Inf>

#line 166
ne r4.w, l(0.000000, 0.000000, 0.000000, 0.000000), r4.w
if_nz r4.w
  mul r4.xy, r4.xyxx, l(0.031250, 0.031250, 0.000000, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r4.xy, r4.xyxx, t12.xyzw, s10  // texCoordCenterOffset<0:Inf,1:Inf>

#line 171
  max r4.x, r4.y, r4.x
  mul r4.y, r4.x, l(0.002500)  // randomValue<0:Inf>
  mul r4.x, r4.x, cb2[29].x
  div r4.x, r4.x, l(4.000000)
  mul r2.w, r2.w, r4.x
  mov r2.w, -r2.w
  add r2.w, r2.w, r4.z
  mul r2.w, r2.w, r2.w
  mul r6.w, r2.w, l(1.000000)  // SHADOW_TEXTURE_UV_AREA_RANDOM_OTH<0:NaN:Inf>

#line 166
else 
  mov r4.y, l(0)  // randomValue<0: 0f>
endif 

#line 184
nop 

#line 475
mov r2.w, cb2[16].w  // GetElement<0>

#line 184
mov r2.w, r2.w  // shadowDepth<0>

#line 189
mov r9.w, l(0)

#line 192
nop 

#line 463
mov r10.x, cb2[16].x  // GetRowT<0>
mov r10.y, cb2[17].x  // GetRowT<1>
mov r10.z, cb2[18].x  // GetRowT<2>
mov r10.w, cb2[19].x  // GetRowT<3>

#line 192
mov r10.xyzw, r10.xyzw  // lv1Param<0,1,2,3>
nop 

#line 463
mov r11.x, cb2[16].y  // GetRowT<0>
mov r11.y, cb2[17].y  // GetRowT<1>
mov r11.z, cb2[18].y  // GetRowT<2>
mov r11.w, cb2[19].y  // GetRowT<3>

#line 193
mov r11.xyzw, r11.xyzw  // lv2Param<0,1,2,3>
nop 

#line 463
mov r12.x, cb2[16].z  // GetRowT<0>
mov r12.y, cb2[17].z  // GetRowT<1>
mov r12.z, cb2[18].z  // GetRowT<2>
mov r12.w, cb2[19].z  // GetRowT<3>

#line 194
mov r12.xyzw, r12.xyzw  // lv3Param<0,1,2,3>

#line 197
mul r4.xzw, r9.xxyz, r10.wwww
add r10.xyz, r10.xyzx, r4.xzwx
mov r10.w, l(1.000000)
mul r4.xzw, r9.xxyz, r11.wwww
add r11.xyz, r11.xyzx, r4.xzwx
mov r11.w, l(2.000000)
mul r4.xzw, r9.xxyz, r12.wwww
add r12.xyz, r12.xyzx, r4.xzwx
mov r12.w, l(3.000000)

#line 202
add r4.x, r9.z, l(1.000000)
mul r9.z, r2.w, r4.x
add r4.x, r10.z, l(1.000000)
mul r10.z, r2.w, r4.x
add r4.x, r11.z, l(1.000000)
mul r11.z, r2.w, r4.x
add r4.x, r12.z, l(1.000000)
mul r12.z, r2.w, r4.x

#line 212
mul r4.xz, r9.xxyx, r9.xxyx
mul r13.xy, r10.xyxx, r10.xyxx
mul r13.zw, r11.xxxy, r11.xxxy

#line 220
ge r4.xz, r8.zzwz, r4.xxzx
movc r4.xz, r4.xxzx, l(1.000000,0,1.000000,0), l(0,0,0,0)  // areaJudg1<0:[-0f,1f],1:[-0f,1f]>
ge r2.w, r9.z, r4.y
movc r2.w, r2.w, l(1.000000), l(0)  // areaJudg1<2:[-0f,1f]>
mov r8.zw, r6.wwww
ge r13.xy, r8.zwzz, r13.xyxx
movc r13.xy, r13.xyxx, l(1.000000,1.000000,0,0), l(0,0,0,0)  // areaJudg2<0:[-0f,1f],1:[-0f,1f]>
ge r4.w, r10.z, r4.y
movc r4.w, r4.w, l(1.000000), l(0)  // areaJudg2<2:[-0f,1f]>
ge r8.zw, r8.zzzw, r13.zzzw
movc r8.zw, r8.zzzw, l(0,0,1.000000,1.000000), l(0,0,0,0)  // areaJudg3<0:[-0f,1f],1:[-0f,1f]>
ge r4.y, r11.z, r4.y
movc r4.y, r4.y, l(1.000000), l(0)  // areaJudg3<2:[-0f,1f]>

#line 230
mul r4.x, r4.z, r4.x
mul r14.xyzw, r2.wwww, r4.xxxx  // mask<0:[-0f,1f],0:[-0f,1f],0:[-0f,1f],0:[-0f,1f]>
mul r2.w, r13.y, r13.x
mul r2.w, r4.w, r2.w  // mask<1:[-0f,1f]>
mul r4.x, r8.w, r8.z
mul r4.x, r4.y, r4.x  // mask<2:[-0f,1f]>

#line 234
mov r4.y, -r14.w
add r4.y, r4.y, l(1.000000)  // hit<0:[0f,1f]>
mul r13.xyzw, r2.wwww, r4.yyyy  // mask<1:[-0f,1f],1:[-0f,1f],1:[-0f,1f],1:[-0f,1f]>
mov r2.w, -r13.w
add r2.w, r2.w, l(1.000000)
mul r2.w, r2.w, r4.y  // hit<0:[-0f,1f]>
mul r4.xyzw, r2.wwww, r4.xxxx  // mask<2:[-0f,1f],2:[-0f,1f],2:[-0f,1f],2:[-0f,1f]>
mov r6.w, -r4.w
add r6.w, r6.w, l(1.000000)
mul r2.w, r2.w, r6.w  // hit<0:[-0f,1f]>
mul r15.xyzw, r2.wwww, l(1.000000, 1.000000, 1.000000, 1.000000)  // mask<3:[-0f,1f],3:[-0f,1f],3:[-0f,1f],3:[-0f,1f]>

#line 245
mul r9.xyzw, r9.xyzw, r14.xyzw
mul r10.xyzw, r10.xyzw, r13.xyzw
add r9.xyzw, r9.xyzw, r10.xyzw
mul r4.xyzw, r4.xyzw, r11.xyzw
add r4.xyzw, r4.xyzw, r9.xyzw
mul r9.xyzw, r12.xyzw, r15.xyzw
add r4.xyzw, r4.wxyz, r9.wxyz  // result<3:[-0f,6f],0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 255
max r4.w, r4.w, l(0.000001)  // result<2:Inf:[1e-006f,1.#INFf]>
mov r4.xyz, r4.xyzx  // CalcCascadeShadowUVWithCascadeBlend<3:[-0f,6f],0:NaN:Inf,1:NaN:Inf>
mov r4.w, r4.w  // CalcCascadeShadowUVWithCascadeBlend<2:Inf:[1e-006f,1.#INFf]>

#line 59
mov r4.xyzw, r4.xyzw  // shadow_uv<3:[-0f,6f],0:NaN:Inf,1:NaN:Inf,2:Inf:[1e-006f,1.#INFf]>
mov r4.x, r4.x  // cascade_level<0:[-0f,6f]>
mul r8.zw, r4.yyyz, l(0.000000, 0.000000, 0.500000, 0.500000)
add r9.xy, r8.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)  // shadow_uv<0:NaN:Inf,1:NaN:Inf>
mov r2.w, -r9.y
add r9.z, r2.w, l(1.000000)  // shadow_uv<1:NaN:Inf>

#line 66
mul r8.zw, r9.xxxz, l(0.000000, 0.000000, 0.500000, 0.500000)  // shadow_uv<0:NaN:Inf,1:NaN:Inf>
mul r9.xy, r8.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
mov r9.xy, -r9.xyxx
add r9.xy, r9.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
min r8.zw, r8.zzzw, r9.xxxy  // shadow_uv<0:Inf,1:Inf>

#line 71
add r2.w, r4.x, l(-1.000000)
max r2.w, r2.w, l(0.000000)
min r2.w, r2.w, l(1.000000)  // uv_offset<1:[0f,1f]>
div r4.x, r4.x, l(2.000000)
mov r6.w, -r2.w
add r9.x, r4.x, r6.w  // uv_offset<0:[-1f,3f]>
mul r9.y, r2.w, l(0.500000)  // uv_offset<1:[-0f,0.5f]>
add r8.zw, r8.zzzw, r9.xxxy  // shadow_uv<0:Inf,1:Inf>
add r4.yz, r8.xxyx, r8.zzwz  // shadow_uv<0:NaN:Inf,1:NaN:Inf>
nop 
mov r4.yz, r4.yyzy  // baseTexCoord<0:NaN:Inf,1:NaN:Inf>
mov r4.w, r4.w  // baseTexCoord<2:Inf:[1e-006f,1.#INFf]>
mov r0.xyzw, r0.xyzw  // screenTexCoord<0,1,0,1>

#line 715
nop 
mov r4.yzw, r4.yyzw  // texCoord<0:NaN:Inf,1:NaN:Inf,2:Inf:[1e-006f,1.#INFf]>
mov r0.xyzw, r0.xyzw  // screenTexCoord<0,1,0,1>

#line 554
nop 
mov r4.yzw, r4.yyzw  // texCoord<0:NaN:Inf,1:NaN:Inf,2:Inf:[1e-006f,1.#INFf]>
mov r0.xyzw, r0.xyzw  // screenTexCoord<0,1,0,1>

#line 417
div r0.xyzw, r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000)
frc r0.xyzw, r0.xyzw
ge r0.xyzw, r0.xyzw, l(0.300000, 0.300000, 0.300000, 0.300000)
movc r0.xyzw, r0.xyzw, l(1.000000,1.000000,1.000000,1.000000), l(0,0,0,0)
mul r0.xyzw, r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000)
add r0.xyzw, r0.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)  // ditherOffset2x2<0:[-1f,1f],1:[-1f,1f],0:[-1f,1f],1:[-1f,1f]>
mul r0.xyzw, r0.xyzw, l(0.125000, 0.125000, 0.125000, 0.125000)
add r0.xyzw, r0.xyzw, l(0.500000, 0.500000, -0.500000, -0.500000)  // offset<0:[0.375f,0.625f],1:[0.375f,0.625f],2:[-0.625f,-0.375f],3:[-0.625f,-0.375f]>
div r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), cb2[29].xxxx
mul r0.xyzw, r0.xyzw, r8.xyzw  // offset<0:Inf,1:Inf,2:Inf,3:Inf>
mov r4.yzw, r4.yyzw  // neighbour<0:NaN:Inf,1:NaN:Inf,2:Inf:[1e-006f,1.#INFf]>
add r8.xy, r0.xyxx, r4.yzyy  // neighbour<0:NaN:Inf,1:NaN:Inf>
nop 
mov r8.xy, r8.xyxx  // _uv<0:NaN:Inf,1:NaN:Inf>
mov r8.z, r4.w  // _uv<2:Inf:[1e-006f,1.#INFf]>

#line 333
div r9.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // prjectionUV<0:NaN:Inf,1:NaN:Inf,2:Inf:[1e-006f,1.#INFf]>
sample_c_indexable(texture2d)(float,float,float,float) r2.w, r9.xyxx, t3.xxxx, s15, r9.z  // TFetch2DProjCmp<0:[0f,1f]>

#line 423
add r2.w, r2.w, l(0.000000)  // shadow<0:[0f,1f]>

#line 426
add r9.xy, r0.zyzz, r4.yzyy  // neighbour<0:NaN:Inf,1:NaN:Inf>
nop 
mov r9.xy, r9.xyxx  // _uv<0:NaN:Inf,1:NaN:Inf>
mov r9.z, r8.z  // _uv<2:Inf:[1e-006f,1.#INFf]>

#line 333
div r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // prjectionUV<0:NaN:Inf,1:NaN:Inf,2:Inf:[1e-006f,1.#INFf]>
sample_c_indexable(texture2d)(float,float,float,float) r0.y, r9.xyxx, t3.xxxx, s15, r9.z  // TFetch2DProjCmp<0:[0f,1f]>

#line 427
add r0.y, r0.y, r2.w  // shadow<0:[0f,2f]>

#line 430
add r9.xy, r0.xwxx, r4.yzyy  // neighbour<0:NaN:Inf,1:NaN:Inf>
nop 
mov r9.xy, r9.xyxx  // _uv<0:NaN:Inf,1:NaN:Inf>
mov r9.z, r8.z  // _uv<2:Inf:[1e-006f,1.#INFf]>

#line 333
div r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // prjectionUV<0:NaN:Inf,1:NaN:Inf,2:Inf:[1e-006f,1.#INFf]>
sample_c_indexable(texture2d)(float,float,float,float) r0.x, r9.xyxx, t3.xxxx, s15, r9.z  // TFetch2DProjCmp<0:[0f,1f]>

#line 431
add r0.x, r0.x, r0.y  // shadow<0:[0f,3f]>

#line 434
add r8.xy, r0.zwzz, r4.yzyy  // neighbour<0:NaN:Inf,1:NaN:Inf>
nop 
mov r8.xy, r8.xyxx  // _uv<0:NaN:Inf,1:NaN:Inf>

#line 333
div r0.yzw, r8.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)  // prjectionUV<0:NaN:Inf,1:NaN:Inf,2:Inf:[1e-006f,1.#INFf]>
sample_c_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t3.xxxx, s15, r0.w  // TFetch2DProjCmp<0:[0f,1f]>

#line 435
add r0.x, r0.y, r0.x  // shadow<0:[0f,4f]>
mul r0.x, r0.x, l(0.250000)  // shadow<0:[0f,1f]>
mul r0.x, r0.x, l(1.000000)
mov r0.x, -r0.x
add r0.x, r0.x, l(1.000000)  // shadow<0:[0f,1f]>
mul r0.x, r0.x, r0.x  // shadow<0:[0f,1f]>
mov r0.x, r0.x  // ShadowComparisonFourSampleGaussianFilterWithMicroDither<0:[0f,1f]>

#line 554
mov r0.x, r0.x  // ShadowComparisonFilteredRandomFetch<0:[0f,1f]>

#line 715
mov r0.x, r0.x  // ShadowComparisonFilteredSunLight<0:[0f,1f]>

#line 78
mov r0.x, r0.x  // shadow<0:[0f,1f]>

#line 124
mov r4.xy, l(-0.000000,-0.000000,0,0)
mov r4.z, -cb3[8].x
add r0.yzw, r4.xxyz, r5.xxyz  // maxLevelBase<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r0.y, r0.yzwy, r0.yzwy
sqrt r0.y, r0.y
mov r0.z, -cb3[8].y
add r0.y, r0.z, r0.y
max r0.y, r0.y, l(0.000000)  // lengthForShadowStart<0:Inf:[-0f,1.#INFf]>
mul r0.y, r0.y, cb3[6].x
max r0.y, r0.y, l(0.000000)
min r0.y, r0.y, l(1.000000)
ge r0.z, r0.w, l(0.000000)
movc r0.z, r0.z, l(1.000000), l(0)
mul r0.y, r0.z, r0.y  // inViewRange2<0:[-0f,1f]>

#line 129
mul r0.y, r0.y, r0.y  // inViewRange2<0:[0f,1f]>

#line 141
mov r0.z, -r0.x
add r0.z, r0.z, l(1.000000)
mul r0.y, r0.z, r0.y
add r0.x, r0.y, r0.x  // outShadow<0:[0f,2f]>

#line 145
mov r0.y, cb3[6].w
mov r0.y, -r0.y
add r0.x, r0.y, r0.x
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)  // outShadow<0:[0f,1f]>

#line 151
dp4 r4.x, cb5[9].xyzw, r5.xyzw  // cloudShadowPos<0:NaN:Inf>
dp4 r4.y, cb5[10].xyzw, r5.xyzw  // cloudShadowPos<1:NaN:Inf>
mov r0.y, cb5[12].w  // cloudDencityScale<0>
mov r0.z, cb5[12].z  // cloudAmountThresold<0>
sample_indexable(texture2d)(float,float,float,float) r0.w, r4.xyxx, t4.yzwx, s10
add r0.z, r0.z, l(-0.000000)
add r0.w, r0.w, l(-0.000000)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mul r0.z, r0.z, r0.w
max r0.z, r0.z, l(0.000000)
min r0.z, r0.z, l(1.000000)
mul r0.w, r0.z, l(-2.000000)
add r0.w, r0.w, l(3.000000)
mul r0.z, r0.z, r0.z
mul r0.z, r0.z, r0.w
mul r0.y, r0.y, r0.z
max r0.y, r0.y, l(0.000000)
min r0.y, r0.y, l(1.000000)  // cloudMask<0:[0f,1f]>

#line 159
mul r0.x, r0.y, r0.x  // outShadow<0:[0f,1f]>

#line 166
mov r0.y, -cb5[11].x
add r0.y, r0.y, r5.z
mul r0.y, r0.y, cb5[11].y
max r0.y, r0.y, l(0.000000)
min r0.y, r0.y, l(1.000000)
mov r0.y, -r0.y
add r0.y, r0.y, l(1.000000)  // fadePower<0:[0f,1f]>
mul r0.y, r0.y, r0.y  // fadePower<0:[0f,1f]>
mul r0.x, r0.y, r0.x  // outShadow<0:[0f,1f]>

#line 155
mov r0.x, r0.x  // NGetShadow_getShadow_outShadow<0:[0f,1f]>

#line 162
mov r0.x, r0.x  // NGetSpecularShadowRate_getSpecularShadowRate_inShadowRate<0:[0f,1f]>
nop 
mov r0.x, r0.x  // inShadowRate<0:[0f,1f]>

#line 189
mov r0.y, cb3[7].x
max r0.y, r0.x, r0.y  // outShadowRate<0:[0f,3.40282e+038f]>

#line 163
mov r0.y, r0.y  // NGetSpecularShadowRate_getSpecularShadowRate_outShadowRate<0:[0f,3.40282e+038f]>
mov r2.xyz, r2.xyzx  // NLightCalculate_lightCalculate_inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r6.xyz, r6.xyzx  // NLightCalculate_lightCalculate_inLightDir<0,1,2>
mov r7.xyzw, r7.xyzw  // NLightCalculate_lightCalculate_inLightColor<0:Inf,1:Inf,2:Inf,3>

#line 173
mov r1.xzw, r1.xxzw  // NLightCalculate_lightCalculate_inEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.x, r3.x  // NLightCalculate_lightCalculate_inSpecularIntensity<0:Inf>

#line 178
mov r3.z, r3.z  // NLightCalculate_lightCalculate_inMaterialIndex<0:Inf>
mov r1.y, r1.y  // NLightCalculate_lightCalculate_inRoughness<0:Inf>
mov r3.w, r3.w  // NLightCalculate_lightCalculate_inTranslucent<0:Inf>
nop 
mov r2.xyz, r2.xyzx  // inNormal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r6.xyz, r6.xyzx  // inLightDir<0,1,2>
mov r7.xyzw, r7.xyzw  // inLightColor<0:Inf,1:Inf,2:Inf,3>
mov r1.xzw, r1.xxzw  // inEyeDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.x, r3.x  // inSpecularIntensity<0:Inf>
mov r3.z, r3.z  // inMaterialIndex<0:Inf>
mov r1.y, r1.y  // inRoughness<0:Inf>
mov r3.w, r3.w  // inTranslucent<0:Inf>

#line 818
mov r6.xyz, r6.xyzx  // L<0,1,2>
mov r1.xzw, r1.xxzw  // E<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyz, r2.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 823
mov r4.xyz, r6.xyzx
dp3 r0.z, r4.xyzx, r2.xyzx  // LN<0:NaN:Inf>

#line 828
mov r5.xyz, -r1.xzwx
dp3 r0.w, r5.xyzx, r2.xyzx
add r0.w, r0.w, r0.w
mov r0.w, -r0.w
mul r8.xyz, r0.wwww, r2.xyzx
add r8.xyz, r5.xyzx, r8.xyzx
mov r8.xyz, -r8.xyzx  // vec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r9.xyz, -r4.xyzx
add r9.xyz, r8.xyzx, r9.xyzx  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r0.w, r9.xyzx, r9.xyzx
sqrt r0.w, r0.w  // len<0:NaN:Inf>
div r0.w, r7.w, r0.w
max r0.w, r0.w, l(0.000000)
min r9.xyz, r0.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)  // rate<0:[0f,1f],0:[0f,1f],0:[0f,1f]>
mov r10.xyz, -r6.xyzx
add r8.xyz, r8.xyzx, r10.xyzx
mul r8.xyz, r8.xyzx, r9.xyzx
add r6.xyz, r6.xyzx, r8.xyzx
dp3 r0.w, r6.xyzx, r6.xyzx
rsq r0.w, r0.w
mul r6.xyz, r0.wwww, r6.xyzx  // Ln2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
add r5.xyz, r5.xyzx, r6.xyzx
dp3 r0.w, r5.xyzx, r5.xyzx
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, r5.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r0.w, r5.xyzx, r2.xyzx
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)  // HN<0:[0f,1f]>

#line 840
dp3 r4.x, r5.xyzx, r4.xyzx  // LH<0:NaN:Inf>

#line 844
mov r3.z, r3.z  // materialIndex<0:Inf>

#line 848
mov r3.y, l(0.250000)
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r3.zyzz, t10.xyzw, s9  // material1<0:Inf,1:Inf,2:Inf,3:Inf>
mov r3.y, l(0.750000)
sample_indexable(texture2d)(float,float,float,float) r6.xz, r3.zyzz, t10.xywz, s9  // material0<0:Inf>
mov r6.xz, r6.xxzx  // material0<0:Inf,3:Inf>
mov r5.xyz, r5.xyzx  // SPECULER_COLOR<0:Inf,1:Inf,2:Inf>
mov r5.w, r5.w  // TANSLUCENT<0:Inf>
mov r2.w, r6.x  // F0<0:Inf>
mov r6.z, r6.z  // ANISO_ROUGHNESS<0:Inf>

#line 875
nop 
mov r4.x, r4.x  // EH<0:NaN:Inf>
mov r4.y, r2.w  // F0<0:Inf>

#line 548
sample_indexable(texture2d)(float,float,float,float) r3.y, r4.xyxx, t9.yxzw, s11
mov r3.y, r3.y  // lookupFresnel<0:Inf>

#line 875
mov r3.y, r3.y  // F_s<0:Inf>

#line 878
mul r3.z, r0.z, r0.z
mov r3.z, -r3.z
add r3.z, r3.z, l(1.000000)
mul r3.z, r3.w, r3.z
add r3.z, r0.z, r3.z
mul r3.w, r3.w, r5.w
max r3.z, r3.w, r3.z
max r3.z, r3.z, l(0.000000)
min r3.z, r3.z, l(1.000000)  // LN_trans<0:[0f,1f]>

#line 898
mul r4.xyz, r3.xxxx, r5.xyzx  // K_s<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 917
nop 
mov r0.w, r0.w  // HN<0:[0f,1f]>
mov r1.y, r1.y  // roughness<0:Inf>
mov r6.z, r6.z  // anisoRoughness<0:Inf>

#line 567
max r0.w, r0.w, l(0.000000)
min r6.x, r0.w, l(1.000000)  // uv<0:[0f,1f]>
mov r6.y, r1.y  // uv<1:Inf>
mov r6.z, r6.z  // uv<2:Inf>
mul r6.xyz, r6.xyzx, r6.xyzx  // uv<0:[0f,1f],1:NaN:Inf,2:NaN:Inf>

#line 575
mul r6.xyz, r6.xyzx, l(0.984375, 0.937500, 0.937500, 0.000000)
add r6.xyz, r6.xyzx, l(0.007813, 0.031250, 0.031250, 0.000000)  // uv<0:[0.0078125f,0.992188f],1:NaN:Inf,2:NaN:Inf>

#line 602
sample_indexable(texture3d)(float,float,float,float) r6.xy, r6.xyzx, t8.xyzw, s11
mov r6.xy, r6.xyxx  // value<0:Inf,1:Inf>
mul r6.xy, r6.xyxx, r6.xyxx  // value<0:NaN:Inf,1:NaN:Inf>
div r0.w, r6.x, r6.y  // lookupSpecularPower<0:NaN:Inf>

#line 917
mul r0.w, r0.w, r3.y
nop 
mov r0.z, r0.z  // LN<0:NaN:Inf>

#line 494
mul r0.z, r0.z, l(4.000000)
max r0.z, r0.z, l(0.000000)
min r0.z, r0.z, l(1.000000)  // specularErrorMask<0:[0f,1f]>

#line 917
mul r0.z, r0.z, r0.w  // specularPower<0:NaN:Inf>

#line 921
mul r4.xyz, r7.xyzx, r4.xyzx
mul r4.xyz, r0.zzzz, r4.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 930
mul r0.z, r3.z, l(1.000000)
mul r0.z, r0.z, l(1.000000)
mul r3.yzw, r7.xxyz, r0.zzzz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 933
mov r4.xyz, r4.xyzx  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.yzw, r3.yyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 949
nop 

#line 953
nop 

#line 1109
dp3 r0.z, r1.xzwx, r2.xyzx
add r0.z, r0.z, r0.z
mov r0.z, -r0.z
mul r6.xyz, r0.zzzz, r2.xyzx
add r6.xyz, r1.xzwx, r6.xyzx  // Reflect<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 1116
nop 
mov r1.xzw, -r1.xxzw
dp3 r0.z, r1.xzwx, r2.xyzx
max r0.z, r0.z, l(0.000000)
min r2.x, r0.z, l(1.000000)  // EH<0:[0f,1f]>
max r2.y, r2.w, cb3[2].z  // F0<0:Inf>

#line 548
sample_indexable(texture2d)(float,float,float,float) r0.z, r2.xyxx, t9.yzxw, s11
mov r0.z, r0.z  // lookupFresnel<0:Inf>

#line 1116
mov r0.z, r0.z  // fresnel<0:Inf>

#line 1119
mov r1.xz, -r6.xxyx  // skyRefUv<0:NaN:Inf,1:NaN:Inf>
nop 
mov r1.xz, r1.xxzx  // clipCoord<0:NaN:Inf,1:NaN:Inf>

#line 34
mul r1.xz, r1.xxzx, l(0.968750, 0.000000, 0.968750, 0.000000)
mul r1.xz, r1.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000)
add r1.xz, r1.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000)  // clipCoord<0:NaN:Inf,1:NaN:Inf>
mul r1.xz, r1.xxzx, l(0.250000, 0.000000, 0.125000, 0.000000)  // GetRefSphereMapUV<0:NaN:Inf,1:NaN:Inf>

#line 1121
mov r1.xz, r1.xxzx  // skyRefUv<0:NaN:Inf,1:NaN:Inf>

#line 1125
lt r0.w, l(0.000000), r6.z
movc r2.xy, r0.wwww, l(0.250000,0,0,0), l(0,0,0,0)
add r1.xz, r1.xxzx, r2.xxyx  // skyRefUv<0:NaN:Inf,1:NaN:Inf>
sample_indexable(texture2d)(float,float,float,float) r1.xz, r1.xzxx, t15.xzyw, s11
mul r1.xz, r1.xxzx, l(4.000000, 0.000000, 4.000000, 0.000000)  // skyRefRate<0:Inf,1:Inf>
mul r0.w, r1.y, l(1.428000)
add r0.w, r0.w, l(-0.300000)
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)  // roughness<0:[0f,1f]>
mov r1.w, -r1.x
add r1.z, r1.w, r1.z
mul r0.w, r0.w, r1.z
add r1.xzw, r0.wwww, r1.xxxx
mov r2.xyz, cb3[3].xyzx
mul r1.xzw, r1.xxzw, r2.xxyz  // skyRefColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, -r1.y
add r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, l(0.500000)
mul r0.z, r0.z, r0.w
mul r0.z, r3.x, r0.z  // spcRate<0:NaN:Inf>
mul r1.xyz, r0.zzzz, r1.xzwx
mul r1.xyz, r5.xyzx, r1.xyzx  // outEnvSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 182
mov r3.yzw, r3.yyzw  // NLightCalculate_lightCalculate_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // NLightCalculate_lightCalculate_outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NLightCalculate_lightCalculate_outEnvSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 161
nop 

#line 183
mov r3.yzw, r3.yyzw  // NLightComposit_composit_inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // NLightComposit_composit_inSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.y, r0.y  // NLightComposit_composit_inShadowRateSpecular<0:[0f,3.40282e+038f]>
nop 
mov r3.yzw, r3.yyzw  // inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r4.xyzx  // inSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.y, r0.y  // inShadowRateSpecular<0:[0f,3.40282e+038f]>

#line 1204
mul r2.xyz, r0.xxxx, r3.yzwy
mul r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r0.yzw, r0.yyyy, r4.xxyz
mul r0.yzw, r0.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 188
mov r2.xyz, r2.xyzx  // NLightComposit_composit_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.yzw, r0.yyzw  // NLightComposit_composit_outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyz, r2.xyzx  // NEnvSpecularComposit_envComposit_inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.yzw, r0.yyzw  // NEnvSpecularComposit_envComposit_inSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // NEnvSpecularComposit_envComposit_inEnvSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 195
nop 
mov r2.xyz, r2.xyzx  // inDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.yzw, r0.yyzw  // inSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.xyz, r1.xyzx  // inEnvSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 206
max r0.x, r0.x, cb3[2].x
mul r0.x, r0.x, cb3[2].y  // rate<0:Inf>
add r2.xyz, r2.xyzx, l(-0.000000, -0.000000, -0.000000, 0.000000)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r1.xyz, r0.xxxx, r1.xyzx
add r0.xyz, r0.yzwy, r1.xyzx  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 195
mov r2.xyz, r2.xyzx  // NEnvSpecularComposit_envComposit_outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.xyz, r0.xyzx  // NEnvSpecularComposit_envComposit_outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 209
mov r0.xyz, r0.xyzx  // NWriteLightSpecularAccumulationWithoutExposure_writeLightSpecularAccumulation_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r0.xyz, r0.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 411
nop 
mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 269
mov r0.w, l(1.000000)  // EncodeAliasHDRColor<3: 1f>
mov r0.xyz, r0.xyzx  // EncodeAliasHDRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 411
mov r0.xyzw, r0.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 210
mov r0.xyzw, r0.xyzw  // NWriteLightSpecularAccumulationWithoutExposure_writeLightSpecularAccumulation_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 203
mov r2.xyz, r2.xyzx  // NWriteLightDiffuseAccumulationWithoutExposure_writeLightDiffuseAccumulation_inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 
mov r2.xyz, r2.xyzx  // inColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 237
nop 
mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 269
mov r2.w, l(1.000000)  // EncodeAliasHDRColor<3: 1f>
mov r2.xyz, r2.xyzx  // EncodeAliasHDRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 237
mov r2.xyzw, r2.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 204
mov r2.xyzw, r2.xyzw  // NWriteLightDiffuseAccumulationWithoutExposure_writeLightDiffuseAccumulation_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
mov o0.xyzw, r2.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 211
mov o1.xyzw, r0.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>

#line 92
ret 
// Approximately 539 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
