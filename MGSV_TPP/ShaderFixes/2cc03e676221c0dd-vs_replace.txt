// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i 2cc03e676221c0dd-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:44 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  out float2 o0 : TEXCOORD0,
  out float p0 : TEXCOORD3,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : SV_Position0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = v1.xyzw;
  r1.x = g_vsMaterial.m_materials[0].w;
  r1.yz = v2.xy;
  r2.w = 1;
  r2.xyz = v0.xyz;
  r3.x = dot(r2.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, g_vsObject.m_world._m01_m11_m21_m31);
  r3.z = dot(r2.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r2.xyz = g_vsScene.m_eyepos.xyz;
  r2.xyz = -r2.xyz;
  r2.xyz = r3.xyz + r2.xyz;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r1.w = g_vsObject.m_localParam[3].w;
  r2.xyz = r2.xyz * r1.www;
  r2.xyz = r3.xyz + r2.xyz;
  r2.w = 1;
  r3.x = dot(r2.xyzw, g_vsScene.m_projectionView._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, g_vsScene.m_projectionView._m01_m11_m21_m31);
  r3.z = dot(r2.xyzw, g_vsScene.m_projectionView._m02_m12_m22_m32);
  r3.w = dot(r2.xyzw, g_vsScene.m_projectionView._m03_m13_m23_m33);
  r2.z = r3.w;
  r1.w = g_vsObject.m_localParam[3].y;
  r4.x = -r1.w;
  r4.x = max(r4.x, r1.w);
  r4.y = g_vsObject.m_localParam[3].z;
  r4.z = -r4.y;
  r4.z = max(r4.y, r4.z);
  r4.w = r2.z;
  r5.x = -r4.x;
  r5.y = r5.x + r4.z;
  r5.y = max(0.00100000005, r5.y);
  r5.x = r5.x + r4.w;
  r5.x = r5.x / r5.y;
  r5.x = max(0, r5.x);
  r5.x = min(1, r5.x);
  r4.x = cmp(r4.w < r4.x);
  r4.x = r4.x ? 0 : r5.x;
  r4.z = cmp(r4.z < r4.w);
  r4.x = r4.z ? 1 : r4.x;
  r4.y = cmp(r4.y < 0);
  r4.y = r4.y ? 1 : 0;
  r4.y = cmp(0 != r4.y);
  r4.x = r4.y ? 1 : r4.x;
  r4.y = cmp(0 >= r4.x);
  r4.z = g_vsObject.m_localParam[3].x;
  r4.w = cmp(r4.z < 0);
  r4.w = r4.w ? 1 : 0;
  r4.w = cmp(r4.w == 1.000000);
  r4.y = r4.w ? r4.y : 0;
  r4.y = r4.y ? 0 : 1;
  r3.xyz = r4.yyy * r3.xyz;
  r5.w = r4.x * r0.w;
  r0.w = -r4.z;
  r0.w = max(r4.z, r0.w);
  r4.x = g_vsScene.m_exposure.z;
  r0.w = r4.x * r0.w;
  r5.xyz = r0.xyz * r0.www;
  r0.x = cmp(r1.w < 0);
  r2.w = r0.x ? 1 : 0;
  r0.xyz = -r5.xyz;
  r0.xyz = max(r5.xyz, r0.xyz);
  r0.xyz = log2(r0.xyz);
  r0.xyz = float3(0.454545468,0.454545468,0.454545468) * r0.xyz;
  r5.xyz = exp2(r0.xyz);
  r2.x = 1;
  r2.y = 1;

o3.xyzw = r3.xyzw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i 2cc03e676221c0dd-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r3.w != 1.0)
  r3.x += stereo.x * (r3.w - stereo.y);

  r0.x = cmp(0 < r3.w);
  r3.z = r0.x ? 0 : r3.z;

  // o3.xyzw = r3.xyzw; // Relocated from here with hlsltool.py
o3.z = r3.z; // Inserted by hlsltool.py

  o1.xyzw = r5.xyzw;
  o0.xy = r1.yz;
  o2.xyzw = r2.xyzw;
  p0.x = r1.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 3     z         0     NONE   float     z 
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// SV_Position              0   xyzw        3      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[24], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_output o0.xy
dcl_output o0.z
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output_siv o3.xyzw, position
dcl_temps 6

#line 91 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Prim_Poly_FastDraw_SSky_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inColor<0,1,2,3>
nop 

#line 46
mov r1.x, cb4[0].w  // fogGain<0>
mov r1.x, r1.x  // outFogGain<0>

#line 93
mov r1.x, r1.x  // NFogGain_fogGain_outFogGain<0>

#line 98
mov r0.xyzw, r0.xyzw  // NTransformInput_FastDraw_transform_inColor<0,1,2,3>
mov r1.yz, v2.xxyx  // NTransformInput_FastDraw_transform_inUV<0,1>
nop 
mov r0.xyzw, r0.xyzw  // inColor<0,1,2,3>
mov r1.yz, r1.yyzy  // inUV<0,1>

#line 41
nop 
mov r0.xyzw, r0.xyzw  // inVertexColor<0,1,2,3>

#line 314
nop 
mov r2.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r2.xyz, v0.xyzx
dp4 r3.x, r2.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r2.xyzw, cb5[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r2.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 314
mov r3.xyz, r3.xyzx  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
nop 

#line 174
nop 

#line 64
mov r2.xyz, cb2[20].xyzx  // GetEyePosition<0,1,2>

#line 174
mov r2.xyz, r2.xyzx  // GetCameraEyePosition<0,1,2>

#line 315
mov r2.xyz, -r2.xyzx
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
nop 

#line 152
nop 

#line 48
mov r1.w, cb5[12].w  // GetBaseColor<3>

#line 152
mov r1.w, r1.w  // GetCameraZOffset<0>

#line 315
mul r2.xyz, r1.wwww, r2.xyzx  // zOffset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
add r2.xyz, r2.xyzx, r3.xyzx  // worldPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 319
nop 
mov r2.w, l(1.000000)  // vec<3: 1f>

#line 408
dp4 r3.x, r2.xyzw, cb2[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r2.xyzw, cb2[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r2.xyzw, cb2[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r3.w, r2.xyzw, cb2[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 319
mov r3.xyzw, r3.xyzw  // clipPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 322
mov r0.xyzw, r0.xyzw  // color<0,1,2,3>
nop 
mov r2.z, r3.w  // clipPositionW<0:NaN:Inf>

#line 278
nop 

#line 136
nop 

#line 48
mov r1.w, cb5[12].y  // GetBaseColor<1>

#line 136
mov r4.x, -r1.w
max r4.x, r1.w, r4.x  // GetCameraFadeInNear<0:[0f,3.40282e+038f]>

#line 278
mov r4.x, r4.x  // alphaNearZ<0:[0f,3.40282e+038f]>
nop 

#line 144
nop 

#line 48
mov r4.y, cb5[12].z  // GetBaseColor<2>

#line 144
mov r4.z, -r4.y
max r4.z, r4.z, r4.y  // GetCameraFadeInFar<0:[0f,3.40282e+038f]>

#line 279
mov r4.z, r4.z  // alphaFarZ<0:[0f,3.40282e+038f]>
mov r4.w, r2.z  // cameraZPos<0:NaN:Inf>
mov r5.x, -r4.x
add r5.y, r4.z, r5.x
max r5.y, r5.y, l(0.001000)  // fadeLen<0:[0.001f,3.40282e+038f]>
add r5.x, r4.w, r5.x
div r5.x, r5.x, r5.y  // t<0:NaN:Inf>
max r5.x, r5.x, l(0.000000)
min r5.x, r5.x, l(1.000000)  // t<0:[0f,1f]>
lt r4.x, r4.w, r4.x
movc r4.x, r4.x, l(0), r5.x  // t<0:[-0f,1f]>
lt r4.z, r4.z, r4.w
movc r4.x, r4.z, l(1.000000), r4.x  // t<0:[-0f,1f]>
nop 

#line 128
nop 
mov r4.y, r4.y  // param<0>
lt r4.y, r4.y, l(0.000000)
movc r4.y, r4.y, l(1.000000), l(0)  // GetOpaqueMode<0:[-0f,1f]>

#line 287
ne r4.y, l(0.000000, 0.000000, 0.000000, 0.000000), r4.y
movc r4.x, r4.y, l(1.000000), r4.x  // t<0:[-0f,1f]>
mov r4.x, r4.x  // CalculateCameraFadeInAlpha<0:[-0f,1f]>

#line 323
mov r4.x, r4.x  // t<0:[-0f,1f]>
ge r4.y, l(0.000000), r4.x
nop 

#line 166
nop 

#line 48
mov r4.z, cb5[12].x  // GetBaseColor<0>

#line 166
mov r4.z, r4.z  // param<0>
lt r4.w, r4.z, l(0.000000)
movc r4.w, r4.w, l(1.000000), l(0)  // IsSpritePolygon<0:[-0f,1f]>

#line 324
eq r4.w, r4.w, l(1.000000)
and r4.y, r4.w, r4.y
movc r4.y, r4.y, l(0), l(1.000000)
mul r3.xyz, r3.xyzx, r4.yyyy  // clipPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 327
mul r5.w, r0.w, r4.x  // color<3>

#line 332
nop 

#line 206
nop 
mov r0.w, -r4.z
max r0.w, r0.w, r4.z  // GetLuminance<0:[0f,3.40282e+038f]>

#line 332
mov r0.w, r0.w  // luminance<0:[0f,3.40282e+038f]>
nop 

#line 41
mov r4.x, cb2[23].z  // GetCurrentExposureValue<0>

#line 333
mov r4.x, r4.x  // currentExposureValue<0>

#line 336
mul r0.w, r0.w, r4.x  // preScale<0:Inf>
mul r5.xyz, r0.wwww, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 347
mov r3.xyz, r3.xyzx  // info<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.w, r3.w  // info<3:NaN:Inf>

#line 354
nop 

#line 111
nop 
mov r1.w, r1.w  // param<0>
lt r0.x, r1.w, l(0.000000)
movc r2.w, r0.x, l(1.000000), l(0)  // GetBlendMode<0:[-0f,1f]>

#line 354
mov r2.w, r2.w  // info<10:[-0f,1f]>
mov r5.xyz, r5.xyzx  // info<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
mov r5.w, r5.w  // info<14>
mov r3.xyzw, r3.xyzw  // CalculateTransformInfo<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r5.xyzw, r5.xyzw  // CalculateTransformInfo<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14>
mov r2.z, r2.z  // CalculateTransformInfo<9:NaN:Inf>
mov r2.w, r2.w  // CalculateTransformInfo<10:[-0f,1f]>

#line 41
mov r3.xyzw, r3.xyzw  // vertexTransformInfo<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r5.xyzw, r5.xyzw  // vertexTransformInfo<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14>
mov r2.zw, r2.zzzw  // vertexTransformInfo<9:NaN:Inf,10:[-0f,1f]>
mov r3.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r5.xyzw, r5.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3>
mov r2.zw, r2.zzzw  // outParams<2:NaN:Inf,3:[-0f,1f]>

#line 47
mov r1.yz, r1.yyzy  // outBaseUV<0,1>

#line 100
mov r3.xyzw, r3.xyzw  // NTransformInput_FastDraw_transform_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r5.xyzw, r5.xyzw  // NTransformInput_FastDraw_transform_outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3>
mov r1.yz, r1.yyzy  // NTransformInput_FastDraw_transform_outBaseUV<0,1>
mov r2.zw, r2.zzzw  // NTransformInput_FastDraw_transform_outParams<2:NaN:Inf,3:[-0f,1f]>
mov r5.xyzw, r5.xyzw  // NPrecalculatedGamma_preGamma_inVertexColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3>
mov r2.zw, r2.zzzw  // NPrecalculatedGamma_preGamma_inParams<2:NaN:Inf,3:[-0f,1f]>
nop 
mov r5.xyzw, r5.xyzw  // inVertexColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3>
mov r2.zw, r2.zzzw  // inParams<2:NaN:Inf,3:[-0f,1f]>

#line 63
mov r0.xyz, -r5.xyzx
max r0.xyz, r0.xyzx, r5.xyzx
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp r5.xyz, r0.xyzx  // outVertexColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.w, r5.w  // outVertexColor<3>

#line 70
mov r2.zw, r2.zzzw  // outParams<2:NaN:Inf,3:[-0f,1f]>

#line 103
mov r5.xyz, r5.xyzx  // NPrecalculatedGamma_preGamma_outVertexColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.w, r5.w  // NPrecalculatedGamma_preGamma_outVertexColor<3>
mov r2.x, l(1.000000)  // NPrecalculatedGamma_preGamma_outParams<0: 1f>
mov r2.y, l(1.000000)  // NPrecalculatedGamma_preGamma_outParams<1: 1f>
mov r2.zw, r2.zzzw  // NPrecalculatedGamma_preGamma_outParams<2:NaN:Inf,3:[-0f,1f]>

#line 100
mov r3.xyzw, r3.xyzw  // NPseudoFurthestPosition_pseudoPos_inPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 
mov r3.xyzw, r3.xyzw  // inPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 28
mov r3.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 31
lt r0.x, l(0.000000), r3.w
movc r3.z, r0.x, l(0), r3.z  // outPosition<2:NaN:Inf>

#line 101
mov r3.xyw, r3.xyxw  // NPseudoFurthestPosition_pseudoPos_outPosition<0:NaN:Inf,1:NaN:Inf,3:NaN:Inf>
mov r3.z, r3.z  // NPseudoFurthestPosition_pseudoPos_outPosition<2:NaN:Inf>

#line 104
mov o3.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xyzw, r5.xyzw  // outColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3>
mov o0.xy, r1.yzyy  // outBaseUV<0,1>
mov o2.xyzw, r2.xyzw  // outParams<0: 1f,1: 1f,2:NaN:Inf,3:[-0f,1f]>
mov o0.z, r1.x  // outFogGain<0>

#line 79
ret 
// Approximately 155 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
