// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i dfa5e92be13b9dec-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:43:35 2016

cbuffer cVSSystem : register(b0)
{

  struct
  {
    float4 m_param;
    float4 m_renderInfo;
    float4 m_renderBuffer;
    float4 m_dominantLightDir;
  } g_vsSystem : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float2 v0 : POSITION0,
  out float4 o0 : SV_Position0,
  out float2 o1 : TEXCOORD0,
  out float2 p1 : TEXCOORD1,
  out float2 o2 : TEXCOORD2,
  out float2 p2 : TEXCOORD3,
  out float2 o3 : TEXCOORD4)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy;
  r0.xy = float2(2,-2) * r0.xy;
  r0.xy = float2(-1,1) + r0.xy;
  r0.zw = float2(1,1);

o0.xyzw = r0.xyzw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i dfa5e92be13b9dec-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r0.w != 1.0)
  r0.x += stereo.x * (r0.w - stereo.y);

  r1.xy = r0.xy;
  r1.xy = float2(0.5,-0.5) * r1.xy;
  r1.xy = float2(0.5,0.5) + r1.xy;
  r1.zw = float2(1,1) / g_vsSystem.m_renderBuffer.xy;
  r2.xy = float2(-1.5,-0.5) * r1.zw;
  r2.xy = r2.xy + r1.xy;
  r2.zw = float2(0.5,-1.5) * r1.zw;
  r2.zw = r2.zw + r1.xy;
  r3.xy = float2(1.5,0.5) * r1.zw;
  r3.xy = r3.xy + r1.xy;
  r1.zw = float2(-0.5,1.5) * r1.zw;
  r1.zw = r1.xy + r1.zw;

  // o0.xyzw = r0.xyzw; // Relocated from here with hlsltool.py

  o1.xy = r1.xy;
  p1.xy = r2.xy;
  o2.xy = r2.zw;
  p2.xy = r3.xy;
  o3.xy = r1.zw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSSystem
// {
//
//   struct VSSystem
//   {
//       
//       float4 m_param;                // Offset:    0
//       float4 m_renderInfo;           // Offset:   16
//       float4 m_renderBuffer;         // Offset:   32
//       float4 m_dominantLightDir;     // Offset:   48
//
//   } g_vsSystem;                      // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSSystem                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xy          0     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xy          2     NONE   float   xy  
// TEXCOORD                 3     zw        2     NONE   float     zw
// TEXCOORD                 4   xy          3     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_input v0.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.zw
dcl_output o2.xy
dcl_output o2.zw
dcl_output o3.xy
dcl_temps 4

#line 51 "d:\work\master\git_clone\_intermediate\win64\GrSystemShaders_dx11_win64\Release\DOF_OnlyNear_LargeBlur_vs.hlsl"
mov r0.xy, v0.xyxx  // NScreenCoordinateToDrawCoordinate_drawCoordinate_inPosition<0,1>
nop 
mov r0.xy, r0.xyxx  // inPosition<0,1>

#line 32
mul r0.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000)
add r0.xy, r0.xyxx, l(-1.000000, 1.000000, 0.000000, 0.000000)  // outPosition<0:Inf,1:Inf>

#line 52
mov r0.xy, r0.xyxx  // NScreenCoordinateToDrawCoordinate_drawCoordinate_outPosition<0:Inf,1:Inf>
mov r0.zw, l(0,0,1.000000,1.000000)  // NScreenCoordinateToDrawCoordinate_drawCoordinate_outPosition<2: 1f,3: 1f>
mov r1.xy, r0.xyxx  // NCalculateUv_uv_inPosition<0:Inf,1:Inf>
nop 
mov r1.xy, r1.xyxx  // inPosition<0:Inf,1:Inf>

#line 21
mul r1.xy, r1.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000)
add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // uvCenter<0,1>

#line 26
div r1.zw, l(0.000000, 0.000000, 1.000000, 1.000000), cb0[2].xxxy  // invRenderTargetSize<0:Inf,1:Inf>
mul r2.xy, r1.zwzz, l(-1.500000, -0.500000, 0.000000, 0.000000)
add r2.xy, r1.xyxx, r2.xyxx  // uv1<0:NaN:Inf,1:NaN:Inf>
mul r2.zw, r1.zzzw, l(0.000000, 0.000000, 0.500000, -1.500000)
add r2.zw, r1.xxxy, r2.zzzw  // uv2<0:NaN:Inf,1:NaN:Inf>
mul r3.xy, r1.zwzz, l(1.500000, 0.500000, 0.000000, 0.000000)
add r3.xy, r1.xyxx, r3.xyxx  // uv3<0:NaN:Inf,1:NaN:Inf>
mul r1.zw, r1.zzzw, l(0.000000, 0.000000, -0.500000, 1.500000)
add r1.zw, r1.zzzw, r1.xxxy  // uv4<0:NaN:Inf,1:NaN:Inf>

#line 54
mov r1.xy, r1.xyxx  // NCalculateUv_uv_uvCenter<0,1>
mov r2.xy, r2.xyxx  // NCalculateUv_uv_uv1<0:NaN:Inf,1:NaN:Inf>
mov r2.zw, r2.zzzw  // NCalculateUv_uv_uv2<0:NaN:Inf,1:NaN:Inf>
mov r3.xy, r3.xyxx  // NCalculateUv_uv_uv3<0:NaN:Inf,1:NaN:Inf>
mov r1.zw, r1.zzzw  // NCalculateUv_uv_uv4<0:NaN:Inf,1:NaN:Inf>
mov o0.xyzw, r0.xyzw  // outPosition<0:Inf,1:Inf,2: 1f,3: 1f>
mov o1.xy, r1.xyxx  // uvCenter<0,1>
mov o1.zw, r2.xxxy  // uv1<0:NaN:Inf,1:NaN:Inf>
mov o2.xy, r2.zwzz  // uv2<0:NaN:Inf,1:NaN:Inf>
mov o2.zw, r3.xxxy  // uv3<0:NaN:Inf,1:NaN:Inf>
mov o3.xy, r1.zwzz  // uv4<0:NaN:Inf,1:NaN:Inf>

#line 36
ret 
// Approximately 33 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
