// ---- Created with 3Dmigoto v1.2.27 on Mon Jan 25 23:08:42 2016

cbuffer cPSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_psScene : packoffset(c0);

}

cbuffer cPSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_psObject : packoffset(c0);

}

cbuffer cPSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_psMaterial : packoffset(c0);

}

cbuffer cPSSystem : register(b0)
{

  struct
  {
    float4 m_param;
    float4 m_renderInfo;
    float4 m_renderBuffer;
    float4 m_dominantLightDir;
  } g_psSystem : packoffset(c0);

}

SamplerState g_samplerPoint_Clamp_s : register(s9);
Texture2D<float4> inDepthTexture : register(t13);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : COLOR0,
  float4 v1 : COLOR1,
  float4 v2 : SV_Position0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float3 v5 : TEXCOORD2,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = float2(-0.5,-0.5) + v2.xy;
  r0.zw = g_psObject.m_localParam[2].zw;
  r1.xy = float2(0.49609375,0.49609375) + r0.xy;
  r0.zw = r1.xy * r0.zw;
  r1.z = v0.w;
  r2.xyz = g_psMaterial.m_materials[0].xyz;
  r1.w = g_psMaterial.m_materials[0].w;
  r3.xy = g_psMaterial.m_materials[1].xy;
  r0.xy = r0.xy / g_psSystem.m_renderInfo.xy;
  r3.zw = g_psScene.m_projectionParam.zw;
  r0.z = inDepthTexture.Sample(g_samplerPoint_Clamp_s, r0.zw).x;
  r0.w = -r3.w;
  r0.z = r0.z + r0.w;
  r0.z = r3.z / r0.z;
  r2.xy = -r2.xy;
  r0.xy = r2.xy + r0.xy;
  r0.xy = r0.xy * r3.xy;
  r4.xy = float2(2,2) * r0.xy;
  r0.x = -r2.z;
  r4.z = r0.z + r0.x;
  r0.x = dot(r4.xyz, r4.xyz);
  r0.x = sqrt(r0.x);
  r0.x = r0.x / r1.w;
  r0.x = -r0.x;
  r0.x = 1 + r0.x;
  r0.x = max(0, r0.x);
  r0.x = min(1, r0.x);
  r0.x = -r0.x;
  r0.x = 1 + r0.x;
  r0.x = r0.x * r0.x;
  r0.x = -r0.x;
  r0.x = 1 + r0.x;
  r0.x = r1.z * r0.x;
  r0.x = 0.699999988 * r0.x;
  r0.yz = g_psSystem.m_renderBuffer.zw * r1.xy;
  r0.y = inDepthTexture.Sample(g_samplerPoint_Clamp_s, r0.yz).y;
  r0.y = r0.y + r0.w;
  r0.y = r3.z / r0.y;
  r0.z = v4.z;
  r0.y = cmp(r0.y >= r0.z);
  r0.y = r0.y ? 1 : 0;
  r0.y = (int)r0.y;
  r0.z = 1 * r0.x;
  r1.xyz = float3(0.100000001,0.100000001,0.100000001) * r0.zzz;
  r1.w = 1 * r0.x;
  r0.z = r0.x * r0.y;
  r2.xyz = float3(0.100000001,0.100000001,0.100000001) * r0.zzz;
  r2.w = r0.x * r0.y;
  o0.xyzw = r1.xyzw;
  o1.xyzw = r2.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cPSScene
// {
//
//   struct PSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_psScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cPSObject
// {
//
//   struct PSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_psObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cPSMaterial
// {
//
//   struct PSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_psMaterial;                    // Offset:    0 Size:   128
//
// }
//
// cbuffer cPSSystem
// {
//
//   struct PSSystem
//   {
//       
//       float4 m_param;                // Offset:    0
//       float4 m_renderInfo;           // Offset:   16
//       float4 m_renderBuffer;         // Offset:   32
//       float4 m_dominantLightDir;     // Offset:   48
//
//   } g_psSystem;                      // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerPoint_Clamp              sampler      NA          NA    9        1
// inDepthTexture                    texture  float4          2d   13        1
// cPSSystem                         cbuffer      NA          NA    0        1
// cPSScene                          cbuffer      NA          NA    2        1
// cPSMaterial                       cbuffer      NA          NA    4        1
// cPSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float      w
// COLOR                    1   xyzw        1     NONE   float       
// SV_Position              0   xyzw        2      POS   float   xy  
// TEXCOORD                 0   xy          3     NONE   float       
// TEXCOORD                 1   xyz         4     NONE   float     z 
// TEXCOORD                 2   xyz         5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb5[12], immediateIndexed
dcl_constantbuffer cb4[2], immediateIndexed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_sampler s9, mode_default
dcl_resource_texture2d (float,float,float,float) t13
dcl_input_ps linear v0.w
dcl_input_ps_siv linear noperspective v2.xy, position
dcl_input_ps linear v4.z
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 5

#line 91 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Primitive_TppFootShadow_ps.hlsl"
add r0.xy, v2.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)  // inVPos<0,1>

#line 115
mov r0.xy, r0.xyxx  // NFetchUV_fetchUV_inVPos<0,1>
nop 
mov r0.xy, r0.xyxx  // inVPos<0,1>

#line 140
nop 
mov r0.zw, cb5[11].zzzw  // GetOutputBufferPixelSize<0,1>
mov r0.zw, r0.zzzw  // pixelSize<0,1>

#line 145
add r1.xy, r0.xyxx, l(0.496094, 0.496094, 0.000000, 0.000000)
mul r0.zw, r0.zzzw, r1.xxxy  // outUV<0:Inf,1:Inf>

#line 116
mov r0.zw, r0.zzzw  // NFetchUV_fetchUV_outUV<0:Inf,1:Inf>
mov r0.zw, r0.zzzw  // NComputePrimitiveColor2_computePrimitiveColor_inScreenUV<0:Inf,1:Inf>
mov r1.z, v0.w  // NComputePrimitiveColor2_computePrimitiveColor_inColor<3>
nop 
mov r0.zw, r0.zzzw  // inScreenUV<0:Inf,1:Inf>
mov r1.z, r1.z  // inColor<3>

#line 28
mov r2.xyz, cb4[0].xyzx  // blastPosition<0,1,2>
mov r1.w, cb4[0].w  // blastRadius<0>
mov r3.xy, cb4[1].xyxx  // uvToDistance<0,1>
div r0.xy, r0.xyxx, cb0[1].xyxx  // windowUV<0:NaN:Inf,1:NaN:Inf>

#line 35
nop 
mov r0.zw, r0.zzzw  // inTexCoord<0:Inf,1:Inf>
mov r3.zw, cb2[21].zzzw  // projectionParameter<2,3>

#line 467
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t13.yzxw, s9
mov r0.z, r0.z  // fetchDepth<0:Inf>

#line 472
nop 
mov r0.z, r0.z  // zOverW<0:Inf>
mov r3.zw, r3.zzzw  // proj<2,3>

#line 397
mov r0.w, -r3.w
add r0.z, r0.w, r0.z
div r0.z, r3.z, r0.z  // ReconstructViewZ<0:NaN:Inf>

#line 472
mov r0.z, r0.z  // depth<0:NaN:Inf>

#line 480
nop 

#line 35
mov r0.z, r0.z  // depthFactor<0:NaN:Inf>
mov r0.z, r0.z  // depth<0:NaN:Inf>
mov r2.xy, -r2.xyxx
add r0.xy, r0.xyxx, r2.xyxx
mul r0.xy, r3.xyxx, r0.xyxx
mul r4.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)  // vecDistance<0:NaN:Inf,1:NaN:Inf>
mov r0.x, -r2.z
add r4.z, r0.x, r0.z  // vecDistance<2:NaN:Inf>
dp3 r0.x, r4.xyzx, r4.xyzx
sqrt r0.x, r0.x  // dist<0:NaN:Inf>
div r0.x, r0.x, r1.w
mov r0.x, -r0.x
add r0.x, r0.x, l(1.000000)
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)  // alpha<0:[0f,1f]>
mov r0.x, -r0.x
add r0.x, r0.x, l(1.000000)
mul r0.x, r0.x, r0.x
mov r0.x, -r0.x
add r0.x, r0.x, l(1.000000)  // alpha<0:[0f,1f]>

#line 48
mul r0.x, r0.x, r1.z
mul r0.x, r0.x, l(0.700000)  // outColor<3:[-2.38198e+038f,2.38198e+038f]>

#line 120
mov r0.x, r0.x  // NComputePrimitiveColor2_computePrimitiveColor_outColor<3:[-2.38198e+038f,2.38198e+038f]>

#line 105
nop 

#line 56
mul r0.yz, r1.xxyx, cb0[2].zzwz  // outTexcoord<0:Inf,1:Inf>

#line 105
mov r0.yz, r0.yyzy  // NScreenToTextureCoordinate_screenToTexcoord_outTexcoord<0:Inf,1:Inf>
mov r0.yz, r0.yyzy  // NGetPrimitiveDepthFactor_fetchViewZ_inBaseUV<0:Inf,1:Inf>
nop 
mov r0.yz, r0.yyzy  // inBaseUV<0:Inf,1:Inf>

#line 273
nop 
mov r0.yz, r0.yyzy  // inTexCoord<0:Inf,1:Inf>

#line 467
sample_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t13.xyzw, s9
mov r0.y, r0.y  // fetchDepth<1:Inf>

#line 472
nop 

#line 480
nop 
mov r0.y, r0.y  // zOverW<0:Inf>

#line 397
add r0.y, r0.w, r0.y
div r0.y, r3.z, r0.y  // ReconstructViewZ<0:NaN:Inf>

#line 480
mov r0.y, r0.y  // depth<1:NaN:Inf>

#line 273
mov r0.y, r0.y  // outDepth<1:NaN:Inf>

#line 106
mov r0.y, r0.y  // NGetPrimitiveDepthFactor_fetchViewZ_outDepth<1:NaN:Inf>
mov r0.z, v4.z  // NComputeDepthComparisonFactor_computeDepthComparisonFactor_inDepth<0>
mov r0.y, r0.y  // NComputeDepthComparisonFactor_computeDepthComparisonFactor_inSceneDepth<1:NaN:Inf>
nop 
mov r0.z, r0.z  // inDepth<0>
mov r0.y, r0.y  // inSceneDepth<1:NaN:Inf>

#line 191
ge r0.y, r0.y, r0.z
movc r0.y, r0.y, l(1), l(0)
itof r0.y, r0.y  // outBlendFactor<1:[0f,1f]>

#line 110
mov r0.y, r0.y  // NComputeDepthComparisonFactor_computeDepthComparisonFactor_outBlendFactor<1:[0f,1f]>

#line 125
mov r0.y, r0.y  // NOutputColorBufferSoftBlender_finalBlender_inZBlendFactor<1:[0f,1f]>
mov r0.x, r0.x  // NOutputColorBufferSoftBlender_finalBlender_inAlpha<0:[-2.38198e+038f,2.38198e+038f]>
nop 
mov r0.y, r0.y  // inZBlendFactor<1:[0f,1f]>
mov r0.x, r0.x  // inAlpha<0:[-2.38198e+038f,2.38198e+038f]>

#line 258
mul r0.z, r0.x, l(1.000000)
mul r1.xyz, r0.zzzz, l(0.100000, 0.100000, 0.100000, 0.000000)  // outColor<0:[-2.38198e+037f,2.38198e+037f],1:[-2.38198e+037f,2.38198e+037f],2:[-2.38198e+037f,2.38198e+037f]>
mul r1.w, r0.x, l(1.000000)  // outColor<3:[-2.38198e+038f,2.38198e+038f]>
mul r0.z, r0.y, r0.x
mul r2.xyz, r0.zzzz, l(0.100000, 0.100000, 0.100000, 0.000000)  // outColorSub<0:[-2.38198e+037f,2.38198e+037f],1:[-2.38198e+037f,2.38198e+037f],2:[-2.38198e+037f,2.38198e+037f]>
mul r2.w, r0.y, r0.x  // outColorSub<3:[-2.38198e+038f,2.38198e+038f]>

#line 128
mov r1.xyzw, r1.xyzw  // NOutputColorBufferSoftBlender_finalBlender_outColor<0:[-2.38198e+037f,2.38198e+037f],1:[-2.38198e+037f,2.38198e+037f],2:[-2.38198e+037f,2.38198e+037f],3:[-2.38198e+038f,2.38198e+038f]>
mov r2.xyzw, r2.xyzw  // NOutputColorBufferSoftBlender_finalBlender_outColorSub<0:[-2.38198e+037f,2.38198e+037f],1:[-2.38198e+037f,2.38198e+037f],2:[-2.38198e+037f,2.38198e+037f],3:[-2.38198e+038f,2.38198e+038f]>
mov o0.xyzw, r1.xyzw  // outColor0<0:[-2.38198e+037f,2.38198e+037f],1:[-2.38198e+037f,2.38198e+037f],2:[-2.38198e+037f,2.38198e+037f],3:[-2.38198e+038f,2.38198e+038f]>
mov o1.xyzw, r2.xyzw  // outColor1<0:[-2.38198e+037f,2.38198e+037f],1:[-2.38198e+037f,2.38198e+037f],2:[-2.38198e+037f,2.38198e+037f],3:[-2.38198e+038f,2.38198e+038f]>

#line 79
ret 
// Approximately 98 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
