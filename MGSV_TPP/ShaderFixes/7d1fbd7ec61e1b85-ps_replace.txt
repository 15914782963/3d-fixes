// Masked light pattern - PS with screen-space correction
// VS 5fc51fd47f14b7ff
// PS 7d1fbd7ec61e1b85
// MASK fef1e54f04bf1432

// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:43:46 2016

cbuffer cPSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_psScene : packoffset(c0);

}

cbuffer cPSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_psObject : packoffset(c0);

}

cbuffer cPSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_psMaterial : packoffset(c0);

}

cbuffer PsWork : register(b7)
{

  struct
  {
    float4 m_projectionPlanes[3];
  } g_psLightSH : packoffset(c0);

}

SamplerState g_samplerPoint_Wrap_s : register(s8);
Texture2D<float4> g_DepthTexture : register(t2);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float4 v2 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.xyw;
  r0.xy = r0.xy / r0.zz;
  r0.xy = g_psObject.m_localParam[1].xy + r0.xy;
  r0.x = g_DepthTexture.Sample(g_samplerPoint_Wrap_s, r0.xy).x;

float depth = g_psScene.m_projectionParam.z / (r0.x - g_psScene.m_projectionParam.w);

  r0.yzw = v0.xyw;
  r1.xy = r0.yz / r0.ww;
  r1.z = r0.x;
  r1.w = 1;

// Screen space correction:
float4 stereo = StereoParams.Load(0);
r1.x -= stereo.x * (depth - stereo.y) / depth;

  r2.x = dot(r1.xyzw, g_psLightSH.m_projectionPlanes[0].xyzw);
  r2.y = dot(r1.xyzw, g_psLightSH.m_projectionPlanes[1].xyzw);
  r2.z = dot(r1.xyzw, g_psLightSH.m_projectionPlanes[2].xyzw);
  r0.yz = g_psScene.m_projectionParam.zw;
  r0.z = -r0.z;
  r0.x = r0.x + r0.z;
  r0.x = r0.y / r0.x;
  r0.xyz = r2.xyz * r0.xxx;
  r1.xyz = -r0.xyz;
  r1.xyz = float3(1,1,1) + r1.xyz;
  r1.xyz = g_psMaterial.m_materials[2].xyz * r1.xyz;
  r1.xyz = max(float3(0,0,0), r1.xyz);
  r1.xyz = min(float3(1,1,1), r1.xyz);
  r0.xyz = float3(1,1,1) + r0.xyz;
  r0.xyz = g_psMaterial.m_materials[3].xyz * r0.xyz;
  r0.xyz = max(float3(0,0,0), r0.xyz);
  r0.xyz = min(float3(1,1,1), r0.xyz);
  r0.xyz = min(r1.xyz, r0.xyz);
  r0.x = r0.x * r0.y;
  r0.x = r0.x * r0.z;
  r0.w = g_psMaterial.m_materials[2].w * r0.x;
  r1.xyz = -g_psMaterial.m_materials[3].www;
  r0.xyz = float3(1,1,1) + r1.xyz;
  r1.xyz = r0.xyz * r0.www;
  r0.x = -r0.w;
  r0.x = 1 + r0.x;
  r0.y = cmp(0 < r0.x);
  r0.x = 0.00390625 + r0.x;
  r0.x = r0.y ? r0.x : 0;
  r0.x = max(0, r0.x);
  r1.w = min(1, r0.x);
  r0.xyzw = max(float4(0,0,0,0), r1.xyzw);
  o0.xyzw = r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cPSScene
// {
//
//   struct PSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_psScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cPSObject
// {
//
//   struct PSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_psObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cPSMaterial
// {
//
//   struct PSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_psMaterial;                    // Offset:    0 Size:   128
//
// }
//
// cbuffer PsWork
// {
//
//   struct PSLightSH
//   {
//       
//       float4 m_projectionPlanes[3];  // Offset:    0
//
//   } g_psLightSH;                     // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerPoint_Wrap               sampler      NA          NA    8        1
// g_DepthTexture                    texture  float4          2d    2        1
// cPSScene                          cbuffer      NA          NA    2        1
// cPSMaterial                       cbuffer      NA          NA    4        1
// cPSObject                         cbuffer      NA          NA    5        1
// PsWork                            cbuffer      NA          NA    7        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xy w
// TEXCOORD                 1   xyzw        1     NONE   float   xy w
// SV_Position              0   xyzw        2      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb5[11], immediateIndexed
dcl_constantbuffer cb4[4], immediateIndexed
dcl_constantbuffer cb7[3], immediateIndexed
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v0.xyw
dcl_input_ps linear v1.xyw
dcl_output o0.xyzw
dcl_temps 3

#line 383 "d:\work\master\git_clone\_intermediate\win64\GrModelShaders_dx11_win64\Release\SSLighting2_SH_Occlusion_ps.hlsl"
mov r0.xyz, v1.xywx  // NScreenToTextureCoordinate_screenToTextureCoordinate_inBackBufferSamplingPosition<0,1,3>
nop 
mov r0.xyz, r0.xyzx  // inBackBufferSamplingPosition<0,1,3>

#line 212
div r0.xy, r0.xyxx, r0.zzzz  // outTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 384
mov r0.xy, r0.xyxx  // NScreenToTextureCoordinate_screenToTextureCoordinate_outTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 389
mov r0.xy, r0.xyxx  // NUVOffset_makeUVOffset_inUV<0:NaN:Inf,1:NaN:Inf>
nop 
mov r0.xy, r0.xyxx  // inUV<0:NaN:Inf,1:NaN:Inf>

#line 326
add r0.xy, r0.xyxx, cb5[10].xyxx  // outUV<0:NaN:Inf,1:NaN:Inf>

#line 390
mov r0.xy, r0.xyxx  // NUVOffset_makeUVOffset_outUV<0:NaN:Inf,1:NaN:Inf>
mov r0.xy, r0.xyxx  // NGetGeometryParam_getGeometryParam_inTexcoord<0:NaN:Inf,1:NaN:Inf>
nop 
mov r0.xy, r0.xyxx  // inTexcoord<0:NaN:Inf,1:NaN:Inf>

#line 245
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s8
mov r0.x, r0.x  // outDepth<0:Inf>

#line 299
nop 

#line 393
mov r0.x, r0.x  // NGetGeometryParam_getGeometryParam_outDepth<0:Inf>

#line 397
nop 

#line 365
nop 

#line 400
mov r0.x, r0.x  // NGetSHLightParam_getLightParam_inDepth<0:Inf>
mov r0.yzw, v0.xxyw  // NGetSHLightParam_getLightParam_inClipSpace<0,1,3>
nop 
mov r0.x, r0.x  // inDepth<0:Inf>
mov r0.yzw, r0.yyzw  // inClipSpace<0,1,3>

#line 222
mov r0.yzw, r0.yyzw  // position<0,1,3>
div r1.xy, r0.yzyy, r0.wwww  // position<0:NaN:Inf,1:NaN:Inf>

#line 228
mov r1.z, r0.x  // position<2:Inf>
mov r1.w, l(1.000000)  // position<3: 1f>

#line 236
dp4 r2.x, r1.xyzw, cb7[0].xyzw  // localPosition<0:NaN:Inf>
dp4 r2.y, r1.xyzw, cb7[1].xyzw  // localPosition<1:NaN:Inf>
dp4 r2.z, r1.xyzw, cb7[2].xyzw  // localPosition<2:NaN:Inf>

#line 241
nop 
mov r0.x, r0.x  // zOverW<0:Inf>
mov r0.yz, cb2[21].zzwz  // proj<2,3>

#line 397
mov r0.z, -r0.z
add r0.x, r0.z, r0.x
div r0.x, r0.y, r0.x  // ReconstructViewZ<0:NaN:Inf>

#line 241
mul r0.xyz, r0.xxxx, r2.xyzx  // localPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 245
mov r0.xyz, r0.xyzx  // d0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 249
mov r1.xyz, -r0.xyzx
add r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r1.xyz, r1.xyzx, cb4[2].xyzx
max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // weightP<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
add r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, cb4[3].xyzx
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // weightN<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
min r0.xyz, r0.xyzx, r1.xyzx  // weight<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 274
mul r0.x, r0.y, r0.x
mul r0.x, r0.z, r0.x
mul r0.w, r0.x, cb4[2].w  // outWeight<0>

#line 402
mov r0.w, r0.w  // NGetSHLightParam_getLightParam_outWeight<0>
mov r0.w, r0.w  // NSHLightCalculateNew_lightCalculate_inWeight<0>
nop 
mov r0.w, r0.w  // inWeight<0>

#line 140
nop 
nop 

#line 149
mov r1.xyz, -cb4[3].wwww
add r0.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // outDiffuse<0,1,2>
mov r0.w, r0.w  // outDiffuse<3>

#line 405
mov r0.xyzw, r0.xyzw  // NSHLightCalculateNew_lightCalculate_outDiffuse<0,1,2,3>

#line 415
mov r0.xyzw, r0.xyzw  // NWriteSHBlend_writeSHBlend0_inColor<0,1,2,3>
nop 
mov r0.xyzw, r0.xyzw  // inColor<0,1,2,3>

#line 296
mul r1.xyz, r0.wwww, r0.xyzx  // inColor<0:Inf,1:Inf,2:Inf>
mov r0.x, -r0.w
add r0.x, r0.x, l(1.000000)  // inColor<3>

#line 301
lt r0.y, l(0.000000), r0.x
add r0.x, r0.x, l(0.003906)
movc r0.x, r0.y, r0.x, l(0)
max r0.x, r0.x, l(0.000000)
min r1.w, r0.x, l(1.000000)  // inColor<3:[0f,1f]>

#line 310
max r0.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // inColor<0:Inf:[-0f,1.#INFf],1:Inf:[-0f,1.#INFf],2:Inf:[-0f,1.#INFf],3:[0f,1f]>

#line 313
mov r0.xyzw, r0.xyzw  // outColor<0:Inf:[-0f,1.#INFf],1:Inf:[-0f,1.#INFf],2:Inf:[-0f,1.#INFf],3:[0f,1f]>

#line 416
mov r0.xyzw, r0.xyzw  // NWriteSHBlend_writeSHBlend0_outColor<0:Inf:[-0f,1.#INFf],1:Inf:[-0f,1.#INFf],2:Inf:[-0f,1.#INFf],3:[0f,1f]>

#line 435
mov o0.xyzw, r0.xyzw  // outDiffuse<0:Inf:[-0f,1.#INFf],1:Inf:[-0f,1.#INFf],2:Inf:[-0f,1.#INFf],3:[0f,1f]>

#line 332
ret 
// Approximately 78 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
