// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:43:47 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}

SamplerState g_samplerPoint_Wrap_s : register(s8);
SamplerState g_samplerLinear_Wrap_s : register(s10);
Texture2D<float4> samplerTileMapTexture : register(t0);
Texture2D<float4> samplerHeightMapTexture : register(t1);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float2 v0 : POSITION0,
  out float4 o0 : COLOR0,
  out float o1 : TEXCOORD0,
  out float4 o2 : SV_Position0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy;
  r0.xy = r0.xy;
  r0.xy = g_vsObject.m_localParam[0].xy * r0.xy;
  r0.xy = g_vsObject.m_localParam[0].zw + r0.xy;
  r0.xz = min(float2(0.999755859,0.999755859), r0.xy);
  r1.xy = r0.xz;
  r2.xyzw = g_vsMaterial.m_materials[0].xyzw;
  r1.zw = g_vsMaterial.m_materials[1].xy;
  r3.xyz = samplerTileMapTexture.SampleLevel(g_samplerPoint_Wrap_s, r1.xy, 0).xyz;
  r3.xyz = float3(255.399994,255.399994,255.399994) * r3.xyz;
  r3.xyz = floor(r3.xyz);
  r1.xy = r2.xy * r1.xy;
  r0.w = -r3.z;
  r0.w = exp2(r0.w);
  r1.xy = r1.xy * r0.ww;
  r1.xy = frac(r1.xy);
  r1.xy = r3.xy + r1.xy;
  r1.xy = r1.xy * r2.zw;
  r1.xy = r1.xy + r1.zw;
  r1.xy = r1.xy;
  r1.xy = r1.xy;
  r1.xy = r1.xy;
  r0.y = samplerHeightMapTexture.SampleLevel(g_samplerLinear_Wrap_s, r1.xy, 0).x;
  r0.y = r0.y;
  r0.y = r0.y;
  r0.y = r0.y;
  r0.xyz = g_vsObject.m_localParam[1].xyz * r0.xyz;
  r0.xyz = g_vsObject.m_localParam[2].xyz + r0.xyz;
  r0.w = 1;
  r1.x = dot(r0.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r1.w = dot(r0.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r0.x = dot(r1.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r0.y = dot(r1.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r0.z = dot(r1.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r0.w = dot(r1.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r0.xyzw = r0.xyzw;
  r0.xyzw = r0.xyzw;
  r0.xyzw = r0.xyzw;
  r1.xy = r0.zw;
  r1.xy = r1.xy;
  r1.x = r1.x / r1.y;
  r1.x = r1.x;
  o2.xyzw = r0.xyzw;
  o1.x = r1.x;
  o0.xyzw = float4(1,0,0,1);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerPoint_Wrap               sampler      NA          NA    8        1
// g_samplerLinear_Wrap              sampler      NA          NA   10        1
// samplerTileMapTexture             texture  float4          2d    0        1
// samplerHeightMapTexture           texture  float4          2d    1        1
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xy          0     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   x           1     NONE   float   x   
// SV_Position              0   xyzw        2      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[8], immediateIndexed
dcl_constantbuffer cb5[12], immediateIndexed
dcl_constantbuffer cb4[2], immediateIndexed
dcl_sampler s8, mode_default
dcl_sampler s10, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input v0.xy
dcl_output o0.xyzw
dcl_output o1.x
dcl_output_siv o2.xyzw, position
dcl_temps 4

#line 62 "d:\work\master\git_clone\_intermediate\win64\GrModelShaders_dx11_win64\Release\NewTerrain_Shadow_vs.hlsl"
mov r0.xy, v0.xyxx  // NTerrainTransformInput_transformInput_inPosition<0,1>
nop 
mov r0.xy, r0.xyxx  // inPosition<0,1>

#line 216
mul r0.xy, r0.xyxx, cb5[9].xyxx
add r0.xy, r0.xyxx, cb5[9].zwzz  // virtualUv<0:Inf,1:Inf>
min r0.xz, r0.xxyx, l(0.999756, 0.000000, 0.999756, 0.000000)  // virtualUv<0:Inf:[-1.#INFf,0.999756f],1:Inf:[-1.#INFf,0.999756f]>

#line 239
nop 
mov r1.xy, r0.xzxx  // inVirtualUv<0:Inf:[-1.#INFf,0.999756f],1:Inf:[-1.#INFf,0.999756f]>
mov r2.xyzw, cb4[0].xyzw  // inUvConverterParameter<0,1,2,3>
mov r1.zw, cb4[1].xxxy  // inTexelCorrectParameter<0,1>

#line 120
sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r1.xyxx, t0.xyzw, s8, l(0.000000)
mul r3.xyz, r3.xyzx, l(255.399994, 255.399994, 255.399994, 0.000000)
round_ni r3.xyz, r3.xyzx  // tile<0:Inf,1:Inf,2:Inf>
mul r1.xy, r1.xyxx, r2.xyxx
mov r0.w, -r3.z
exp r0.w, r0.w
mul r1.xy, r0.wwww, r1.xyxx  // tileUv<0:NaN:Inf,1:NaN:Inf>
frc r1.xy, r1.xyxx
add r1.xy, r1.xyxx, r3.xyxx
mul r1.xy, r2.zwzz, r1.xyxx
add r1.xy, r1.zwzz, r1.xyxx  // physicalUv<0:NaN:Inf,1:NaN:Inf>

#line 127
mov r1.xy, r1.xyxx  // GetPhysicalHeightUv<0:NaN:Inf,1:NaN:Inf>

#line 239
mov r1.xy, r1.xyxx  // physicalUv<0:NaN:Inf,1:NaN:Inf>

#line 250
nop 
mov r1.xy, r1.xyxx  // texcoord<0:NaN:Inf,1:NaN:Inf>

#line 151
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t1.yxzw, s10, l(0.000000)
mov r0.y, r0.y  // height<0:Inf>
mov r0.y, r0.y  // FetchHeightMap<0:Inf>

#line 250
mov r0.y, r0.y  // height<0:Inf>

#line 255
mul r0.xyz, r0.xyzx, cb5[10].xyzx
add r0.xyz, r0.xyzx, cb5[11].xyzx  // position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 265
nop 
nop 
nop 
nop 

#line 284
nop 
mov r0.w, l(1.000000)  // position<3: 1f>

#line 122
nop 

#line 408
dp4 r1.x, r0.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r1.y, r0.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r1.z, r0.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r1.w, r0.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 123
nop 

#line 408
dp4 r0.x, r1.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r0.y, r1.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r0.z, r1.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r0.w, r1.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 123
mov r0.xyzw, r0.xyzw  // hPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 

#line 284
mov r0.xyzw, r0.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
nop 
nop 

#line 291
nop 
nop 

#line 294
nop 
nop 

#line 63
mov r0.xyzw, r0.xyzw  // NTerrainTransformInput_transformInput_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 71
mov r1.xy, r0.zwzz  // NGetDepth_getDepth_inScreenPosition<2:NaN:Inf,3:NaN:Inf>
nop 
mov r1.xy, r1.xyxx  // inScreenPosition<2:NaN:Inf,3:NaN:Inf>

#line 30
div r1.x, r1.x, r1.y  // outDepth<0:NaN:Inf>

#line 72
mov r1.x, r1.x  // NGetDepth_getDepth_outDepth<0:NaN:Inf>
mov o2.xyzw, r0.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.x, r1.x  // outDepth<0:NaN:Inf>

#line 39
mov o0.xyzw, l(1.000000,0,0,1.000000)  // outColor<0: 1f,1: 0f,2: 0f,3: 1f>
ret 
// Approximately 66 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
