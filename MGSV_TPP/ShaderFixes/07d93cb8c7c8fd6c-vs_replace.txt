// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i 07d93cb8c7c8fd6c-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:37 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  out float4 o0 : COLOR0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float3 o3 : TEXCOORD3,
  out float4 o4 : SV_Position0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = v1.xyzw;
  r1.w = 1;
  r1.xyz = v0.xyz;
  r2.x = dot(r1.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r2.z = dot(r1.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r2.w = dot(r1.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r1.x = dot(r2.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r1.y = dot(r2.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r1.z = dot(r2.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r1.w = dot(r2.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);

o4.xyzw = r1.xyzw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i 07d93cb8c7c8fd6c-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r1.w != 1.0)
  r1.x += stereo.x * (r1.w - stereo.y);

  r2.x = cmp(0 < r1.w);
  r1.z = r2.x ? 0 : r1.z;
  r2.x = dot(v0.xyzw, g_vsObject.m_world._m00_m10_m20_m30);
  r2.y = dot(v0.xyzw, g_vsObject.m_world._m02_m12_m22_m32);
  r2.zw = g_vsMaterial.m_materials[2].xy;
  r3.x = g_vsMaterial.m_materials[0].y;
  r3.y = g_vsMaterial.m_materials[2].z;
  r2.xy = -r2.xy;
  r2.zw = r2.zw + r2.xy;
  r2.z = dot(r2.zw, r2.zw);
  r2.z = sqrt(r2.z);
  r2.w = 0.289999992 * r3.x;
  r2.z = r2.z / r2.w;
  r3.x = -r3.y;
  r3.x = max(r3.y, r3.x);
  r3.x = log2(r3.x);
  r3.x = 1.5 * r3.x;
  r3.x = exp2(r3.x);
  r3.x = 0.564189613 * r3.x;
  r3.z = -r2.z;
  r2.z = r3.z * r2.z;
  r2.z = r2.z / r3.y;
  r2.z = 1.44269502 * r2.z;
  r2.z = exp2(r2.z);
  r2.z = r3.x * r2.z;
  r3.xy = g_vsMaterial.m_materials[3].xy;
  r3.z = g_vsMaterial.m_materials[3].z;
  r2.xy = r3.xy + r2.xy;
  r2.x = dot(r2.xy, r2.xy);
  r2.x = sqrt(r2.x);
  r2.x = r2.x / r2.w;
  r2.y = -r3.z;
  r2.y = max(r3.z, r2.y);
  r2.y = log2(r2.y);
  r2.y = 1.5 * r2.y;
  r2.y = exp2(r2.y);
  r2.y = 0.564189613 * r2.y;
  r2.w = -r2.x;
  r2.x = r2.w * r2.x;
  r2.x = r2.x / r3.z;
  r2.x = 1.44269502 * r2.x;
  r2.x = exp2(r2.x);
  r2.x = r2.y * r2.x;
  r2.x = r2.z + r2.x;
  r2.x = min(1, r2.x);
  r2.y = 100 * r2.x;
  r2.z = r1.w;

  // o4.xyzw = r1.xyzw; // Relocated from here with hlsltool.py
o4.z = r1.z; // Inserted by hlsltool.py

  o0.xyzw = r0.xyzw;
  o2.y = r1.w;
  o3.xyz = r2.xyz;
  o1.xyzw = v3.xyzw;
  o2.x = v4.x;
  o2.zw = v2.xy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// SV_Position              0   xyzw        4      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[8], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_constantbuffer cb4[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.x
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output_siv o4.xyzw, position
dcl_temps 4

#line 105 "d:\work\master\git_clone\_intermediate\win64\TppShaders_dx11_win64\Release\Prim_TppSkyCld3_DG_U_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inColor<0,1,2,3>

#line 114
mov r0.xyzw, r0.xyzw  // NTransformInput_transform_inColor<0,1,2,3>
nop 
mov r0.xyzw, r0.xyzw  // inColor<0,1,2,3>

#line 48
mov r0.xyzw, r0.xyzw  // outColor<0,1,2,3>
nop 
mov r1.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r1.xyz, v0.xyzx
dp4 r2.x, r1.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r2.y, r1.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r2.z, r1.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r2.w, r1.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 51
nop 

#line 408
dp4 r1.x, r2.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r1.y, r2.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r1.z, r2.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r1.w, r2.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 51
mov r1.xyzw, r1.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 56
lt r2.x, l(0.000000), r1.w
movc r1.z, r2.x, l(0), r1.z  // outPosition<2:NaN:Inf>

#line 64
nop 

#line 408
dp4 r2.x, v0.xyzw, cb5[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r2.y, v0.xyzw, cb5[6].xyzw  // ApplyMatrixT<2:NaN:Inf>

#line 64
mov r2.xy, r2.xyxx  // worldPos<0:NaN:Inf,2:NaN:Inf>

#line 67
mov r2.zw, cb4[2].xxxy  // firePos<0,1>
mov r3.x, cb4[0].y  // radius<0>
mov r3.y, cb4[2].z  // power<0>
nop 
mov r2.xy, r2.xyxx  // worldPosXZ<0:NaN:Inf,1:NaN:Inf>
mov r2.zw, r2.zzzw  // firePosXZ<0,1>
mov r3.x, r3.x  // radius<0>
mov r3.y, r3.y  // power<0>

#line 25
mov r2.xy, -r2.xyxx
add r2.zw, r2.xxxy, r2.zzzw
dp2 r2.z, r2.zwzz, r2.zwzz
sqrt r2.z, r2.z
mul r2.w, r3.x, l(0.290000)
div r2.z, r2.z, r2.w  // r<0:NaN:Inf>
mov r3.x, -r3.y
max r3.x, r3.x, r3.y
log r3.x, r3.x
mul r3.x, r3.x, l(1.500000)
exp r3.x, r3.x
mul r3.x, r3.x, l(0.564190)
mov r3.z, -r2.z
mul r2.z, r2.z, r3.z
div r2.z, r2.z, r3.y
mul r2.z, r2.z, l(1.442695)
exp r2.z, r2.z
mul r2.z, r2.z, r3.x  // Lightning<0:NaN:Inf>

#line 70
mov r2.z, r2.z  // lightning<0:NaN:Inf>

#line 73
mov r3.xy, cb4[3].xyxx  // firePos<0,1>
mov r3.z, cb4[3].z  // power<0>
nop 
mov r3.xy, r3.xyxx  // firePosXZ<0,1>
mov r3.z, r3.z  // power<0>

#line 25
add r2.xy, r2.xyxx, r3.xyxx
dp2 r2.x, r2.xyxx, r2.xyxx
sqrt r2.x, r2.x
div r2.x, r2.x, r2.w  // r<0:NaN:Inf>
mov r2.y, -r3.z
max r2.y, r2.y, r3.z
log r2.y, r2.y
mul r2.y, r2.y, l(1.500000)
exp r2.y, r2.y
mul r2.y, r2.y, l(0.564190)
mov r2.w, -r2.x
mul r2.x, r2.x, r2.w
div r2.x, r2.x, r3.z
mul r2.x, r2.x, l(1.442695)
exp r2.x, r2.x
mul r2.x, r2.x, r2.y  // Lightning<0:NaN:Inf>

#line 75
add r2.x, r2.x, r2.z  // lightning<0:NaN:Inf>
min r2.x, r2.x, l(1.000000)  // outInfo<0:[0f,1f]>
mul r2.y, r2.x, l(100.000000)  // outInfo<1:[0f,100f]>
mov r2.z, r1.w  // outInfo<2:NaN:Inf>

#line 115
mov r1.xyw, r1.xyxw  // NTransformInput_transform_outPosition<0:NaN:Inf,1:NaN:Inf,3:NaN:Inf>
mov r1.z, r1.z  // NTransformInput_transform_outPosition<2:NaN:Inf>
mov r0.xyzw, r0.xyzw  // NTransformInput_transform_outColor<0,1,2,3>
mov r2.x, r2.x  // NTransformInput_transform_outInfo<0:[0f,1f]>
mov r2.y, r2.y  // NTransformInput_transform_outInfo<1:[0f,100f]>
mov r2.z, r2.z  // NTransformInput_transform_outInfo<2:NaN:Inf>
mov o4.xyzw, r1.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o0.xyzw, r0.xyzw  // outColor<0,1,2,3>

#line 120
mov o2.y, r1.w  // outAttribute2<1:NaN:Inf>
mov o3.xyz, r2.xyzx  // outInfo<0:[0f,1f],1:[0f,100f],2:NaN:Inf>

#line 118
mov o1.xyzw, v3.xyzw  // outAttribute1<0,1,2,3>
mov o2.x, v4.x  // outAttribute2<0>
mov o2.zw, v2.xxxy  // outAttribute2<2,3>

#line 91
ret 
// Approximately 90 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
