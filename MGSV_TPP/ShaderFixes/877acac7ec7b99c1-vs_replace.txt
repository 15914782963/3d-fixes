// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i 877acac7ec7b99c1-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.24 on Tue Jan 19 04:44:21 2016

cbuffer cVSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_vsScene : packoffset(c0);

}

cbuffer cVSObject : register(b5)
{

  struct
  {
    float4x4 m_viewWorld;
    float4x4 m_world;
    float4 m_useWeightCount;
    float4 m_localParam[4];
  } g_vsObject : packoffset(c0);

}

cbuffer cVSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_vsMaterial : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = v1.xyzw;
  r1.xy = v0.xy;
  r2.z = v3.x;
  r2.xy = v2.xy;
  r3.w = 1;
  r3.xyz = v0.xyz;
  r4.x = dot(r3.xyzw, g_vsObject.m_viewWorld._m00_m10_m20_m30);
  r4.y = dot(r3.xyzw, g_vsObject.m_viewWorld._m01_m11_m21_m31);
  r1.z = dot(r3.xyzw, g_vsObject.m_viewWorld._m02_m12_m22_m32);
  r4.w = dot(r3.xyzw, g_vsObject.m_viewWorld._m03_m13_m23_m33);
  r1.w = g_vsObject.m_localParam[3].w;
  r4.z = r1.z + r1.w;
  r3.x = dot(r4.xyzw, g_vsScene.m_projection._m00_m10_m20_m30);
  r3.y = dot(r4.xyzw, g_vsScene.m_projection._m01_m11_m21_m31);
  r3.z = dot(r4.xyzw, g_vsScene.m_projection._m02_m12_m22_m32);
  r3.w = dot(r4.xyzw, g_vsScene.m_projection._m03_m13_m23_m33);
  r4.xyz = g_vsMaterial.m_materials[1].zzz;
  r4.w = 1;

o0.xyzw = r3.xyzw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --only-autofixed -i 877acac7ec7b99c1-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r3.w != 1.0)
  r3.x += stereo.x * (r3.w - stereo.y);

  r5.z = r3.w;
  r1.z = g_vsObject.m_localParam[3].y;
  r1.w = -r1.z;
  r1.z = max(r1.z, r1.w);
  r1.w = g_vsObject.m_localParam[3].z;
  r2.w = -r1.w;
  r2.w = max(r2.w, r1.w);
  r5.w = r5.z;
  r6.x = -r1.z;
  r6.y = r6.x + r2.w;
  r6.y = max(0.00100000005, r6.y);
  r6.x = r6.x + r5.w;
  r6.x = r6.x / r6.y;
  r6.x = max(0, r6.x);
  r6.x = min(1, r6.x);
  r1.z = cmp(r5.w < r1.z);
  r1.z = r1.z ? 0 : r6.x;
  r2.w = cmp(r2.w < r5.w);
  r1.z = r2.w ? 1 : r1.z;
  r1.w = cmp(r1.w < 0);
  r1.w = r1.w ? 1 : 0;
  r1.w = cmp(0 != r1.w);
  r1.z = r1.w ? 1 : r1.z;
  r0.xyzw = r4.xyzw * r0.xyzw;
  r0.w = r0.w * r1.z;
  r1.x = 2 * r1.x;
  r5.x = -1 + r1.x;
  r1.x = -2 * r1.y;
  r5.y = 1 + r1.x;
  r1.xy = g_vsMaterial.m_materials[3].zw;
  r4.x = sin(r1.x);
  r4.y = cos(r1.x);
  r4.z = sin(r1.y);
  r4.w = cos(r1.y);
  r1.xy = float2(1,1) / g_vsScene.m_viewportSize.xy;
  r2.w = g_vsMaterial.m_materials[2].z;
  r1.z = sin(r2.w);
  r1.w = cos(r2.w);

  // o0.xyzw = r3.xyzw; // Relocated from here with hlsltool.py

  o3.xyzw = r0.xyzw;
  o1.xyz = r2.xyz;
  o2.xyz = r5.xyz;
  o4.xyzw = r4.xyzw;
  o5.xyzw = r1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cVSScene
// {
//
//   struct VSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_vsScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cVSObject
// {
//
//   struct VSObject
//   {
//       
//       float4x4 m_viewWorld;          // Offset:    0
//       float4x4 m_world;              // Offset:   64
//       float4 m_useWeightCount;       // Offset:  128
//       float4 m_localParam[4];        // Offset:  144
//
//   } g_vsObject;                      // Offset:    0 Size:   208
//
// }
//
// cbuffer cVSMaterial
// {
//
//   struct VSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_vsMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cVSScene                          cbuffer      NA          NA    2        1
// cVSMaterial                       cbuffer      NA          NA    4        1
// cVSObject                         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_constantbuffer cb4[4], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.x
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 7

#line 205 "d:\work\master\git_clone\_intermediate\win64\FxShaders_dx11_win64\Release\Prim_Poly_RainScroll_VF_vs.hlsl"
mov r0.xyzw, v1.xyzw  // inColor<0,1,2,3>

#line 214
mov r1.xy, v0.xyxx  // NTransformInputRainScroll_transform_inPosition<0,1>
mov r0.xyzw, r0.xyzw  // NTransformInputRainScroll_transform_inColor<0,1,2,3>
mov r2.z, v3.x  // NTransformInputRainScroll_transform_inAttribute1<0>
mov r2.xy, v2.xyxx  // NTransformInputRainScroll_transform_inUV<0,1>
nop 
mov r1.xy, r1.xyxx  // inPosition<0,1>
mov r0.xyzw, r0.xyzw  // inColor<0,1,2,3>
mov r2.z, r2.z  // inAttribute1<0>
mov r2.xy, r2.xyxx  // inUV<0,1>

#line 105
mov r2.z, r2.z  // particleTime<0>

#line 108
nop 
mov r3.w, l(1.000000)  // vec<3: 1f>

#line 408
mov r3.xyz, v0.xyzx
dp4 r4.x, r3.xyzw, cb5[0].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r4.y, r3.xyzw, cb5[1].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r1.z, r3.xyzw, cb5[2].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r4.w, r3.xyzw, cb5[3].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 108
mov r1.z, r1.z  // viewPosition<2:NaN:Inf>
nop 

#line 152
nop 

#line 48
mov r1.w, cb5[12].w  // GetBaseColor<3>

#line 152
mov r1.w, r1.w  // GetCameraZOffset<0>

#line 109
add r4.z, r1.w, r1.z  // viewPosition<2:NaN:Inf>
nop 

#line 408
dp4 r3.x, r4.xyzw, cb2[4].xyzw  // ApplyMatrixT<0:NaN:Inf>
dp4 r3.y, r4.xyzw, cb2[5].xyzw  // ApplyMatrixT<1:NaN:Inf>
dp4 r3.z, r4.xyzw, cb2[6].xyzw  // ApplyMatrixT<2:NaN:Inf>
dp4 r3.w, r4.xyzw, cb2[7].xyzw  // ApplyMatrixT<3:NaN:Inf>

#line 110
mov r3.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 114
mov r4.xyz, cb4[1].zzzz  // luminanceVector<0,1,2>
mov r4.w, l(1.000000)  // luminanceVector<3: 1f>

#line 117
nop 
mov r5.z, r3.w  // clipPositionW<0:NaN:Inf>

#line 278
nop 

#line 136
nop 

#line 48
mov r1.z, cb5[12].y  // GetBaseColor<1>

#line 136
mov r1.w, -r1.z
max r1.z, r1.w, r1.z  // GetCameraFadeInNear<0:[0f,3.40282e+038f]>

#line 278
mov r1.z, r1.z  // alphaNearZ<0:[0f,3.40282e+038f]>
nop 

#line 144
nop 

#line 48
mov r1.w, cb5[12].z  // GetBaseColor<2>

#line 144
mov r2.w, -r1.w
max r2.w, r1.w, r2.w  // GetCameraFadeInFar<0:[0f,3.40282e+038f]>

#line 279
mov r2.w, r2.w  // alphaFarZ<0:[0f,3.40282e+038f]>
mov r5.w, r5.z  // cameraZPos<0:NaN:Inf>
mov r6.x, -r1.z
add r6.y, r2.w, r6.x
max r6.y, r6.y, l(0.001000)  // fadeLen<0:[0.001f,3.40282e+038f]>
add r6.x, r5.w, r6.x
div r6.x, r6.x, r6.y  // t<0:NaN:Inf>
max r6.x, r6.x, l(0.000000)
min r6.x, r6.x, l(1.000000)  // t<0:[0f,1f]>
lt r1.z, r5.w, r1.z
movc r1.z, r1.z, l(0), r6.x  // t<0:[-0f,1f]>
lt r2.w, r2.w, r5.w
movc r1.z, r2.w, l(1.000000), r1.z  // t<0:[-0f,1f]>
nop 

#line 128
nop 
mov r1.w, r1.w  // param<0>
lt r1.w, r1.w, l(0.000000)
movc r1.w, r1.w, l(1.000000), l(0)  // GetOpaqueMode<0:[-0f,1f]>

#line 287
ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), r1.w
movc r1.z, r1.w, l(1.000000), r1.z  // t<0:[-0f,1f]>
mov r1.z, r1.z  // CalculateCameraFadeInAlpha<0:[-0f,1f]>

#line 117
mov r1.z, r1.z  // t<0:[-0f,1f]>

#line 121
mul r0.xyzw, r0.xyzw, r4.xyzw  // outColor<0:Inf,1:Inf,2:Inf,3>
mul r0.w, r1.z, r0.w  // outColor<3>
mov r2.xy, r2.xyxx  // outBaseUV<0,1>
mov r2.z, r2.z  // outBaseUV<2>
mul r1.x, r1.x, l(2.000000)
add r5.x, r1.x, l(-1.000000)  // outBasePos<0:Inf>
mul r1.x, r1.y, l(-2.000000)
add r5.y, r1.x, l(1.000000)  // outBasePos<1:Inf>

#line 130
mov r1.xy, cb4[3].zwzz  // rotAngles<0,1>
sincos r4.x, null, r1.x  // outRotatedAngles<0:[-1f,1f]>
sincos null, r4.y, r1.x  // outRotatedAngles<1:[-1f,1f]>
sincos r4.z, null, r1.y  // outRotatedAngles<2:[-1f,1f]>
sincos null, r4.w, r1.y  // outRotatedAngles<3:[-1f,1f]>
div r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), cb2[22].xyxx  // outInvViewportSize<0:Inf,1:Inf>
mov r2.w, cb4[2].z  // baseTextureZRadian<0>

#line 142
sincos r1.z, null, r2.w  // baseRotSin<0:[-1f,1f]>
sincos null, r1.w, r2.w  // baseRotCos<0:[-1f,1f]>
mov r1.z, r1.z  // outInvViewportSize<2:[-1f,1f]>
mov r1.w, r1.w  // outInvViewportSize<3:[-1f,1f]>

#line 217
mov r3.xyzw, r3.xyzw  // NTransformInputRainScroll_transform_outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov r0.xyz, r0.xyzx  // NTransformInputRainScroll_transform_outColor<0:Inf,1:Inf,2:Inf>
mov r0.w, r0.w  // NTransformInputRainScroll_transform_outColor<3>
mov r2.xy, r2.xyxx  // NTransformInputRainScroll_transform_outBaseUV<0,1>
mov r2.z, r2.z  // NTransformInputRainScroll_transform_outBaseUV<2>
mov r5.x, r5.x  // NTransformInputRainScroll_transform_outBasePos<0:Inf>
mov r5.y, r5.y  // NTransformInputRainScroll_transform_outBasePos<1:Inf>
mov r5.z, r5.z  // NTransformInputRainScroll_transform_outBasePos<2:NaN:Inf>
mov r4.x, r4.x  // NTransformInputRainScroll_transform_outRotatedAngles<0:[-1f,1f]>
mov r4.y, r4.y  // NTransformInputRainScroll_transform_outRotatedAngles<1:[-1f,1f]>
mov r4.z, r4.z  // NTransformInputRainScroll_transform_outRotatedAngles<2:[-1f,1f]>
mov r4.w, r4.w  // NTransformInputRainScroll_transform_outRotatedAngles<3:[-1f,1f]>
mov r1.xy, r1.xyxx  // NTransformInputRainScroll_transform_outInvViewportSize<0:Inf,1:Inf>
mov r1.z, r1.z  // NTransformInputRainScroll_transform_outInvViewportSize<2:[-1f,1f]>
mov r1.w, r1.w  // NTransformInputRainScroll_transform_outInvViewportSize<3:[-1f,1f]>
mov o0.xyzw, r3.xyzw  // outPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o3.xyzw, r0.xyzw  // outColor<0:Inf,1:Inf,2:Inf,3>
mov o1.xyz, r2.xyzx  // outBaseUV<0,1,2>
mov o2.xyz, r5.xyzx  // outBasePos<0:Inf,1:Inf,2:NaN:Inf>
mov o4.xyzw, r4.xyzw  // outRotatedAngles<0:[-1f,1f],1:[-1f,1f],2:[-1f,1f],3:[-1f,1f]>
mov o5.xyzw, r1.xyzw  // outInvViewportSize<0:Inf,1:Inf,2:[-1f,1f],3:[-1f,1f]>

#line 191
ret 
// Approximately 108 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(62,14-15): warning X3578: Output value 'o1' is not completely initialized
C:\Steam\steamapps\common\MGS_TPP\wrapper1349(63,14-15): warning X3578: Output value 'o2' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
