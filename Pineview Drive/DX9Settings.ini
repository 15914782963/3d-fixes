[General]

; UseRenderedShaders=true is nearly always useful, because it trims the
; list of shaders seen while hunting down to just those active in the
; current scene.  Disable this only if you get crashes during hunting.
UseRenderedShaders=true

; DumpAll will generate ASM text files for every shader seen by the game.
; This is usually worth doing once, but not useful for every run.
DumpAll=true

; Less crashes when reloading shaders:
OverrideMethod = 2

; Unity games recently started using borderless window mode, so use a profile
; that supports 3D in a window. "3D-Hub Player" is pretty minimal:
GameProfile = fxdplayer

; Mouse tends to stop working in Unity games (related to borderless window?):
InitMouse = false

; Force square surfaces (shadow maps) to be mono:
DefSquareSurfaceMode = 2

; Allow access to the view size in pixel shaders to calculate the pixel
; position on screen. This isn't usually necessary in the generic lighting fix,
; but sometimes a situation arises where it is necessary.
DefPSViewSizeConst = 210

; Fixes clipping at the edge of spot & point lights - common in Unity games.
SkipSetScissorRect = true

; Constant registers that will arrive in Vertex and Pixel Shaders, as
; c200.  The constants below will be assigned, based on the key preset.
DefVSConst1 = 200
DefPSConst1 = 200

PresetsKeysList = 0;10;11;12;13;14;15;16;17;18;19;1A;

; L sets convergence = 0.5
[KEY0]
Key = 76
Presets = 0;
Type = 1
[PRES0]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3f000000
UseByDef = true


; Number row on keyboard sets UI depth to various values between screen depth
; and separation. `~ (left of 1 on US keyboards) sets screen depth, 1-9 sets
; septh in 10% multiples and 0 sets depth to 100% separation.
; Note that the KEY%X on these sections is in hexadecimal, hence we use KEYA
; for the tenth key entry and so on.
[KEY10]
Key = 192
Presets = 10;
Type = 1
[PRES10]
Const3 = 0x00000000
[KEY11]
Key = 49
Presets = 11;
Type = 1
[PRES11]
Const3 = 0x3dcccccd
[KEY12]
Key = 50
Presets = 12;
Type = 1
[PRES12]
Const3 = 0x3e4ccccd
[KEY13]
Key = 51
Presets = 13;
Type = 1
[PRES13]
Const3 = 0x3e99999a
[KEY14]
Key = 52
Presets = 14;
Type = 1
[PRES14]
Const3 = 0x3ecccccd
[KEY15]
Key = 53
Presets = 15;
Type = 1
[PRES15]
Const3 = 0x3f000000
[KEY16]
Key = 54
Presets = 16;
Type = 1
[PRES16]
Const3 = 0x3f19999a
[KEY17]
Key = 55
Presets = 17;
Type = 1
[PRES17]
Const3 = 0x3f333333
[KEY18]
Key = 56
Presets = 18;
Type = 1
[PRES18]
Const3 = 0x3f4ccccd
[KEY19]
Key = 57
Presets = 19;
Type = 1
[PRES19]
Const3 = 0x3f666666
[KEY1A]
Key = 48
Presets = 1A;
Type = 1
[PRES1A]
Const3 = 0x3f800000


; Copy the MVP and inverted MV matrices to all lighting shaders to allow us to
; calculate the projection matrix and find the horizontal FOV. This technique
; was first used to fix Dreamfall Chapters - take a look at the forum thread
; for that game and it's fix for more details on how this works.


; The projection matrix will be calculated from the matrices passed into the
; lighting shader whenever possible. This is not possible for directional
; lighting or other times it is drawing a full-screen quad, so we must also
; find other shaders to get the MV+MVP matrices from in that case. The below
; shader is a pretty common one in Unity games that we can use, but you may
; need to find others (avoid UI and depth shaders that often do not have a
; valid projection matrix). My extract_unity_headers.py script is useful to
; find other shaders that can be used here.
[VS61CAF50F]
; Particle Alpha Blend.shader - example of shader with MV+MVP matrices
; MV is in c0-c3. Copy this and invert it:
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
; MVP is in c4-c7. We only need the first column so only bother with c4
GetConst1FromReg = 4

[VS0D2263A1]
; CRC32: 0D2263A1 | Matched 6 variants of 3 shaders: Diffuse, Specular, Transparent/Cutout/Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

[VS13166839]
; CRC32: 13166839 | Matched 2 variants of 1 shaders: IndustrialDistrict/LM_Master
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

[VS14E1AD4F]
; CRC32: 14E1AD4F | Matched 2 variants of 1 shaders: Reflective/Bumped Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

[VS3ED6B323]
; CRC32: 3ED6B323 | Matched 4 variants of 2 shaders: Hidden/TerrainEngine/Splatmap/Lightmap-AddPass, Nature/Terrain/Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

[VS5136457D]
; CRC32: 5136457D | Matched 2 variants of 1 shaders: Hidden/TerrainEngine/Details/Vertexlit
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

[VS7F5CD059]
; CRC32: 7F5CD059 | Matched 2 variants of 1 shaders: Custom/BumpSpecDetail
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

[VSA3ECDE5B]
; CRC32: A3ECDE5B | Matched 2 variants of 1 shaders: Hidden/TerrainEngine/Details/WavingDoublePass
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

[VSA9E8CB08]
; CRC32: A9E8CB08 (FOG + CC47A416) | Matched 2 variants of 1 shaders: Reflective/Bumped Specular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

[VSC5E0F5ED]
; CRC32: C5E0F5ED | Matched 10 variants of 5 shaders: Bumped Diffuse, Bumped Specular, Self-Illumin/Diffuse, Self-Illumin/Specular, Transparent/Cutout/Bumped Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

[VSCB8336EE]
; CRC32: CB8336EE | Matched 4 variants of 2 shaders: Self-Illumin/Bumped Diffuse, Self-Illumin/Candles 2 Bumped Specular (Gargore)
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

[VSCC47A416]
; CRC32: CC47A416 | Matched 2 variants of 1 shaders: Reflective/Bumped Specular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

[VSDB0CA882]
; CRC32: DB0CA882 | Matched 2 variants of 1 shaders: Hidden/TerrainEngine/Details/BillboardWavingDoublePass
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4


; Lighting vertex shaders to copy the matrices to. We used to also copy them to
; the pixel shaders, but now we pass them from the vertex shaders to the pixel
; shaders instead, which makes it easier to tweak the FOV source on a game by
; game basis.

[VSDF7A050C]
; Unity Hidden/Internal-PrePassLighting.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; This shader will use it's own MV+MVP matrices when they are valid (still need
; to use Helix mod to inverse the MV matrix), and the passed in ones when they
; are not:
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
; Get the MV matrix passed from the game to this shader and invert it:
UseMatrix1 = true
GetMatrixFromReg1 = 0
InverseMatrix1 = true
MatrixReg1 = 184
[VS36A3FBCB]
; Unity Hidden/Internal-PrePassLighting.shader (older version of VSDF7A050C)
; This shader will use it's own MV+MVP matrices when they are valid (still need
; to use Helix mod to inverse the MV matrix), and the passed in ones when they
; are not:
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
; Get the MV matrix passed from the game to this shader and invert it:
UseMatrix1 = true
GetMatrixFromReg1 = 0
InverseMatrix1 = true
MatrixReg1 = 184
[VSBAEDDED5]
; Unity Hidden/Internal-PrePassCollectShadows.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; This shader is used for directional lighting, and must always have an
; alternate source of the MV+MVP matrices passed to it.
; Note: This shader has an MVP matrix, but not the matching MV matrix.
UseMatrix = true
MatrixReg = 40
SetConst1ToReg = 50
