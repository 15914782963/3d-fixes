// CRC32: CF419A8A | Matched 2 variants of 1 shaders: Hidden/Final Interpolation
// 
//    Unity headers extracted from FinalInterpolation.shader
//    Shader "Hidden/Final Interpolation" {
//      Properties {
//       _ZTest ("", Float) = 8
//      }
//      Fallback Off
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZTest [_ZTest]
//          ZWrite Off
//          Fog { Mode Off }
//          Blend One SrcAlpha
//          Program "fp" {
//            SubProgram "d3d9 " {
// 1:           Keywords { "FLIP_WORKAROUND_OFF" "FRUSTUM_SHAFTS" "LIGHT_ON_SCREEN" "SHOW_SAMPLES_OFF" "SPOT_SHAFTS" }
// 2:           Keywords { "FLIP_WORKAROUND_ON" "FRUSTUM_SHAFTS" "LIGHT_ON_SCREEN" "SHOW_SAMPLES_OFF" "SPOT_SHAFTS" }
//              Matrix 0 [_FrustumRays]
//              Vector 4 [_ZBufferParams]
//              Vector 5 [_LightPos]
//              Vector 6 [_CameraPosLocal]
//              Float 7 [_FrustumApex]
//              Vector 8 [_CoordTexDim]
//              Vector 9 [_ScreenTexDim]
//              Float 10 [_DepthThreshold]
//              SetTexture 0 [_CameraDepthTexture] 2D 0
//              SetTexture 1 [_DepthEpi] 2D 1
//              SetTexture 2 [_RaymarchedLight] 2D 2
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    def c11, 0.50000000, 1.00000000, 0.00000000, 99999996802856925000000000000000000000.00000000
    def c12, -0.50000000, 2.00000000, -1.00000000, 1.00000000
    def c13, -0.00000100, 0.00000100, -0.50000000, 0.50000000
    def c14, 0.25000000, 0.00000000, 0.50000000, 0.75000000
    def c15, 4.00000000, 0.00100000, 0, 0
    dcl_texcoord0 v0.xyz

def c220, 0, 1, 0.0625, 0.5
def c221, 0.00025, 0.001, 0.005, 2
dcl_2d s13
dcl vPos.xy

texldl r31, c220.z, s13
mov r30, c200


// ////////////////////////////////////////////////////////////////////////////
// XXX: I haven't managed to fix this properly. Feel free to look at the maths,
// but keep in mind that it's probably completely and utterly wrong. You should
// read the comments as what I was thinking I need to do, rather than what is
// actually the correct thing to do. Some of the maths is fudged to see what
// would happen and might no longer match the comments. Maybe I'm on the right
// track, maybe I'm not.
//
// The source code for these shaders is in the public domain:
// https://github.com/robertcupisz/LightShafts
//
// Fixing the light position in the final interpolation shader with no other
// changes makes the rays look correct, but introduces a distorted halo (note -
// some instances have stages rendered in mono and will always have a one-eyed
// halo). Applying an identical fix in the corresponding coords.shader will
// eliminate the halo, but seems to throw out the ray position.
//
// The local camera position in the final interpolation and coords shaders
// seems to affect where the rays are clipped, but nothing else. In the
// raymarch shader this also affects the ray position. I'd theorise that we
// need to correct the light position in the final interpolation and coords
// shaders, and the local camera position in the raymarch shader (to correct the
// rays moving from adjusting the light pos in the coords shader) as well as
// the final interpolation and coords shaders (to eliminate clipping).
//
// At the moment I don't believe that I have found the correct adjustment for
// either light pos or local camera pos. I'm not sure if my method is wrong,
// the maths, or I'm just not fully understanding the shader yet.
//
// Turn on the debugging at the bottom of the final interpolation shaders to
// see where we think the light position is.
// ////////////////////////////////////////////////////////////////////////////

mov r15, c5 // _LightPos
mov r16, c6 // _CameraPosLocal
if_eq r30.x, c220.x

	// We have the mono position of the light on the screen... but not the depth to
	// work out the stereo position :( We do have the camera position relative to
	// our frame of reference, so let's work out the depth from that!

	// Find a vector in the direction the camera is pointing by adding all the
	// frustrum rays together (magnitude is 4 * far clipping plane * local scale)
	// (note - due to the abovementioned problem, this may not be exact. An
	// alternate would be to use the cross product of the horizontal and vertical
	// frustrum, which would give us an accurate direction from the camera, but the
	// magnitude would be relative to H and W, but not Z, and we can't be certain
	// that the scale is the same in all directions).
	mov r20.xyz, c0
	add r20.xyz, r20, c1
	add r20.xyz, r20, c2
	add r20.xyz, r20, c3

	// Normalise it to get a unit vector in the direction the camera is pointing:
	dp3 r21.w, r20.xyz, r20.xyz
	rsq r21.w, r21.w
	mul r21.xyz, r20.xyz, r21.www

	// Compute the scalar projection of the camera position relative to our frame
	// of reference in the direction the camera is pointing - this is our unscaled
	// depth:
	dp3 r21.w, r16.xyz, r21.xyz

	// We need to scale it for the local frame of reference in the same direction,
	// which we don't know. We can use the magnitude of the vector we got from
	// adding up the frustrum rays to work it out in the correct direction. The
	// magnitude should be 4 * far clipping plane * local scale.
	// We don't know the far clipping plane, but we can guess or use Helix mod to
	// copy it from another shader (in _ProjectionParams)
	dp3 r20.w, r20.xyz, r20.xyz
	rsq r20.w, r20.w
	rcp r20.w, r20.w
	mul r20.w, r20.w, c221.x // Divide magnitude by 4 * 1000 (1000 is a guess as to the far clipping plane)

	// multiply the unscaled depth by the scale we just worked out:
	mul r21.w, r21.w, r20.w

	// Calculate P.I[0,0] (tan(fov_h / 2)):
	mov r22.x, c180.x
	mov r22.y, c181.x
	mov r22.z, c182.x
	mov r22.w, c183.x
	dp4 r22.x, r22, c190
	rcp r22.y, r22.x

	// Apply view-space stereo correction from depth and P.I[0,0] we just
	// calculated:
	//
	// This is a complete fudge - convergence was making the rays vary too wildly,
	// but it looked ok at convergence approx 1... so, I used that:
	//add r31.w, -r21.w, -r31.y
	add r31.w, -r21.w, -c220.y

	mul r31.w, r31.w, r31.x
	mul r31.z, r31.w, -r22.y // *= P.I[0,0]
	mul r31.z, r31.z, c221.w // *= 2, because the C# code multiplies the screen pos by 2 (Seems to be a Unity thing)
	add r15.x, r15.x, r31.z


	// We also need to adjust the camera position from our frame of reference
	//
	// We need to apply that correction in the horizontal direction of the
	// camera, which we can find using the view frustrum:
	mov r17.xyz, c1       // r17 = _FrustrumRays[1, 0]
	add r17.xyz, r17, -c0 // r17 = _FrustrumRays[1, 0] - _FrustrumRays[0, 0]

	// The magnitude will be local scale * 2 * tan(fov_h/2) * far clipping plane.
	// We need to keep the local scale, but remove the rest.
	add r31.w, -r21.w, -r31.y
	mul r31.w, r31.w, r31.x
	mul r31.w, r31.w, c221.y // /= 1000 (guess the far clipping plane)
	mul r31.w, r31.w, r22.x // /= tan(fov_h/2)
	// mul r31.w, r31.w, c220.w

	// Multiply correction by the horizontal unit vector to get it in the
	// right orientation for the current frame of reference:
	mul r19.xyz, r17.xyz, r31.www

	add r16.xyz, r16.xyz, r19.xyz
endif

    mov r1.xyz, c1
    mov r0.zw, c9
    rcp r0.x, v0.z
    mul r0.zw, c11.x, r0
    mul r0.xy, v0, r0.x
    mad r0.xy, r0, c11.x, r0.zwzw
    add r6.xy, r0, c11.x
    add r2.xyz, -c0, r1
    mov r0.xyz, c2
    add r1.xyz, -c3, r0
    mad r0.xyz, r6.x, r2, c0
    mad r1.xyz, r6.x, r1, c3
    add r1.xyz, r1, -r0
    mad r0.xyz, r6.y, r1, r0
    dp3 r0.w, r0, r0
    rsq r7.w, r0.w
    mul r7.xyz, r7.w, r0
    mul r2.x, r7.z, c11
    cmp r0.y, r7.z, c11.z, c11
    cmp r0.x, -r7.z, c11.z, c11.y
    add r0.z, r0.x, -r0.y
    mov r0.x, c7
    add r0.w, c11.x, -r0.x
    mov r0.y, r16.z
    add r0.y, -c7.x, r0
    mul r1.w, r0.y, c11.x
    mad r0.x, r0.w, r7, r2
    rcp r0.y, r0.x
    mad r0.x, -r0.w, r16, -r1.w
    mul r1.x, r0, r0.y
    mad r0.x, r0.w, r7.y, r2
    mad r1.z, r0.w, r7.x, -r2.x
    mad r2.x, r0.w, r7.y, -r2
    rcp r0.y, r0.x
    mad r0.x, -r0.w, r16.y, -r1.w
    mul r1.y, r0.x, r0
    mad r0.x, -r0.w, r16, r1.w
    rcp r0.y, r1.z
    mul r1.z, r0.x, r0.y
    mad r0.xy, r6, c12.y, c12.z
    add r6.zw, r0.xyxy, -r15.xyxy
    rcp r2.z, r2.x
    mad r0.w, -r0, r16.y, r1
    mul r1.w, r0, r2.z
    mul r2.xy, r6.zwzw, r6.zwzw
    add r0.w, r2.x, r2.y
    rsq r2.x, r0.w
    mul r7.xy, r2.x, r6.zwzw
    mad r3, r0.z, c11.w, -r1
    abs r4.xy, r7
    add r5.xy, r4, c13.x
    add r0, r0.xxyy, c12.wzwz
    mul r0, r7.yyxx, r0
    add r0, r0.xyyx, -r0.zzww
    cmp r0, r0, c11.z, c11.y
    add r4, -r0, c11.y
    mul r0, r0.wxyz, r4
    abs r4, r0
    cmp r5.xy, r5, c11.z, c11.y
    add r5.xy, r7, r5
    mad r2, r1, r7.z, r16.z
    cmp r4, -r4, c11.z, c11.y
    rcp r0.xz, r5.x
    rcp r0.yw, r5.y
    mov r5.zw, r15.xyxy
    add r5, c12.zzww, -r5.zwzw
    mul r0, r5, r0
    dp4 r5.x, r4, r0
    add r0, -r2, c7.x
    cmp r0, r0, c11.y, c11.z
    mad r0, r0, r3, r1
    mul r2.zw, r7.xyxy, r5.x
    mul r1.xy, r2.zwzw, r2.zwzw
    mov r2.xy, r0.zwzw
    add r0.z, r1.x, r1.y
    rsq r1.z, r0.z
    mov r1.xy, r0
    add r0.xy, r2.zwzw, r15
    rcp r1.w, r1.z
    mad r0, r0.yxyx, c13.zwwz, c13.w
    mad r0, r0, c14.x, c14.yxzw
    dp4 r0.y, r4, r0
    max r1.w, r1, c13.y
    rcp r1.w, r1.w
    mul r0.zw, r2, r1.w
    mov r0.x, c8
    mul r0.zw, r0, r6
    add r1.w, c12.z, r0.x
    add r0.x, r0.z, r0.w
    mul r0.z, r1.w, c8
    mad r0.x, r0, r1.z, c8.z
    mul r0.x, r0, r0.z
    mul r3.xy, r0, c8
    add r3.xy, r3, c11.x
    mov r0.y, r16.z
    mov r0.x, r16.z
    frc r5.zw, r3.xyxy
    rcp r0.z, r7.z
    add r0.y, c12.x, -r0
    add r0.x, c11, -r0
    mul r1.z, r0, r0.y
    mul r2.z, r0, r0.x
    max r0.xyz, r2, r1
    min r0.xy, r0.x, r0.yzzw
    min r1.xyz, r2, r1
    min r0.x, r0, r0.y
    mul r0.y, r7.w, r0.x
    texld r0.x, r6, s0
    max r2.xy, r1.x, r1.yzzw
    add r0.zw, -r5, r3.xyxy
    add r0.zw, r0, c11.x
    mul r3.xy, r0.zwzw, c8.zwzw
    mad r0.x, r0, c4, c4.y
    rcp r0.x, r0.x
    add r5.xy, r3, -c8.zwzw
    min_pp r1.w, r0.x, r0.y
    texld r0.x, r5, s1
    mov r3.zw, c8
    abs r0.w, r0.x
    mad r0.xy, c11.zyzw, -r3.zwzw, r3
    texld r0.x, r0, s1
    mov r3.zw, c8
    mad r4.xy, c11.yzzw, -r3.zwzw, r3
    abs r0.z, r0.x
    texld r0.x, r4, s1
    texld r3.x, r3, s1
    abs r0.y, r3.x
    abs r0.x, r0
    add r0, r1.w, -r0
    abs r0, r0
    max r0, r0, c10.x
    max r2.x, r2, r2.y
    add r6.xyz, -r5.zwzw, c11.y
    rcp r0.x, r0.x
    rcp r0.y, r0.y
    rcp r0.w, r0.w
    rcp r0.z, r0.z
    mul_sat r0, r0, c10.x
    pow r3, r0.x, c15.x
    pow r4, r0.y, c15.x
    mov r0.x, r3
    pow r3, r0.w, c15.x
    mov r0.y, r4
    pow r4, r0.z, c15.x
    mov r0.z, r4
    mov r0.w, r3
    mov r4.yz, r5.z
    mov r4.xw, r6.xyzz
    mov r3.xy, r5.w
    add r3.w, -r5, c11.y
    mov r3.z, r6.y
    mul r3, r4, r3
    mul r0, r3, r0
    dp4 r2.w, r0, c11.y
    rcp r2.w, r2.w
    mul r0, r0, r2.w
    add r3.w, r0.x, r0.y
    add r0.w, r0.z, r0
    max r0.x, r3.w, c15.y
    rcp r0.x, r0.x
    mul r0.x, r0.y, r0
    max r2.w, r0, c15.y
    rcp r2.w, r2.w
    mul r2.w, r0.z, r2
    mul r0.x, r0, c8.z
    mov r0.y, c8.w
    add r0.xy, r5, r0
    texld r3.xyz, r0, s2
    mul r0.xyz, r3, r3.w
    mul r3.x, r2.w, c8.z
    mov r3.y, c11.z
    add r1.xy, r5, r3
    texld r1.xyz, r1, s2
    mad r1.xyz, r1, r0.w, r0
    mad r1.w, -r2.x, r7, r1
    cmp r0.x, r1.w, c11.y, c11.z
    mul oC0.xyz, r0.x, r1
    mov oC0.w, c11.y


if_eq r30.x, c221.w
	mov oC0.xyzw, c220.xxxy
endif

/////////////////////////////////////////////////////////////////////////////
//  Enable this debugging to display a white square where we think the light
//  position is.
/////////////////////////////////////////////////////////////////////////////
//
// // Can use either vPos or the screen UV from the VS:
// //mov r29.xy, vPos.xy
// //rcp r29.z, c210.x
// //rcp r29.w, c210.y
// //mul r29.xy, r29.xy, r29.zw
// //mul r29.zw, r29.zw, c220.ww
// //add r29.xy, r29.xy, r29.zw
// mov r29.xy, v0.xy
// 
// // Light position, undo transformation in C#:
// add r15.xy, r15.xy, c220.yy // += 1
// mul r15.xy, r15.xy, c220.ww // /= 2
// 
// // Draw a white box where we think the light is:
// add r29.z, r29.x, -r15.x
// abs r29.z, r29.z
// add r29.w, r29.y, -r15.y
// abs r29.w, r29.w
// if_le r29.z, c221.z
// 	if_le r29.w, c221.z
// 		mov oC0.xyzw, c220.yyyy
// 	endif
// endif
