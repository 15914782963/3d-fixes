// CRC32: EA0E4115 | Matched 4 variants of 1 shaders: Hidden/Internal-PrePassLighting
// 
//    Unity headers extracted from Internal-PrePassLighting.shader
//    Shader "Hidden/Internal-PrePassLighting" {
//      Properties {
//       _LightTexture0 ("", any) = "" {}
//       _LightTextureB0 ("", 2D) = "" {}
//       _ShadowMapTexture ("", any) = "" {}
//      }
//      Fallback Off
//      SubShader 1/1 {
//        Pass 2/3 {
//          Tags { "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Fog { Mode Off }
//          Blend One One
//          Program "fp" {
//            SubProgram "d3d9 " {
// 1:           Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SUNSHINE_DISABLED" }
// 8:           Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SUNSHINE_FILTER_HARD" }
// 4:           Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SUNSHINE_FILTER_PCF_2x2" }
// 2:           Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SUNSHINE_FILTER_PCF_3x3" }
//              Matrix 0 [_CameraToWorld]
//              Matrix 4 [_LightMatrix0]
//              Vector 8 [_WorldSpaceCameraPos]
//              Vector 9 [_ProjectionParams]
//              Vector 10 [_ZBufferParams]
//              Vector 11 [unity_ShadowFadeCenterAndType]
//              Vector 12 [_LightPos]
//              Vector 13 [_LightColor]
//              Vector 14 [unity_LightmapFade]
//              SetTexture 0 [_CameraNormalsTexture] 2D 0
//              SetTexture 1 [_CameraDepthTexture] 2D 1
//              SetTexture 2 [_LightTextureB0] 2D 2
//              SetTexture 3 [_LightTexture0] CUBE 3
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_cube s3
    def c15, 1.00000000, 2.00000000, -1.00000000, 0.00000000
    def c16, 128.00000000, 0.21997070, 0.70703125, 0.07098389
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

    rcp r0.x, v0.w
    mul r0.xy, v0, r0.x
    texld r1.x, r0, s1
    rcp r0.z, v1.z
    mov r3.z, c15.x
    mad r0.w, r1.x, c10.x, c10.y
    mul r0.z, r0, c9
    mul r1.xyz, v1, r0.z
    rcp r0.z, r0.w
    mul r3.xyw, r1.xyzz, r0.z // depth in r3.w

// PRE-EMPTIVE FIX FOR UNITYSUNSHINE SHADER - THIS HAS NOT BEEN VERIFIED

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r3.w, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r3.x, -r31.w, r30.x, r3.x // X -= separation * (depth - convergence) * P.I[0,0]

    dp4 r2.w, r3.xywz, c2
    dp4 r5.x, r3.xywz, c0
    dp4 r4.w, r3.xywz, c1
    mov r2.z, r2.w
    mov r2.x, r5
    mov r2.y, r4.w
    add r1.xyz, r2, -c8
    dp3 r1.w, r1, r1
    add r3.xyz, r2, -c12
    dp3 r5.y, r3, r3
    rsq r0.z, r5.y
    mul r3.xyz, r0.z, r3
    texld r0, r0, s0
    mad_pp r4.xyz, r0, c15.y, c15.z
    rsq r1.w, r1.w
    mad r0.xyz, -r1.w, r1, -r3
    dp3_pp r1.y, r4, r4
    dp3 r1.x, r0, r0
    rsq_pp r1.y, r1.y
    rsq r1.x, r1.x
    mul r0.xyz, r1.x, r0
    mul_pp r4.xyz, r1.y, r4
    dp3_pp r0.y, r0, r4
    mul_pp r0.x, r0.w, c16
    max_pp r0.y, r0, c15.w
    pow_pp r1, r0.y, r0.x
    mul r0.x, r5.y, c12.w
    mov_pp r5.y, r4.w
    mov_pp r5.w, c15.x
    mov_pp r5.z, r2.w
    mov_pp r1.y, r1.x
    texld r0.x, r0.x, s2
    dp4 r6.z, r5, c6
    dp4 r6.x, r5, c4
    dp4 r6.y, r5, c5
    texld r0.w, r6, s3
    mul r0.w, r0.x, r0
    mov_sat r1.x, r0.w
    mul r1.x, r1.y, r1
    add r0.xyz, -r2, c11
    dp3 r1.y, r0, r0
    mov_pp r0.xyz, c13
    dp3_pp r0.x, c16.yzww, r0
    mul r1.w, r1.x, r0.x
    rsq r1.y, r1.y
    rcp r0.y, r1.y
    add r0.y, -r3.w, r0
    dp3_pp r0.x, -r3, r4
    mad r0.y, r0, c11.w, r3.w
    max_pp r0.x, r0, c15.w
    mad r0.y, r0, c14.z, c14.w
    mul r0.x, r0.w, r0
    add_sat r0.y, -r0, c15.x
    mul r1.xyz, r0.x, c13
    mul_pp oC0, r1, r0.y
