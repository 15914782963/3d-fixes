// CRC32: 353DA3BB | Unity headers extracted from Coord.shader
// Shader "Hidden/Coord" {
//   Fallback Off
//   SubShader 1/1 {
//     Pass 1/1 {
//       ZTest Always
//       ZWrite Off
//       Cull Off
//       Fog { Mode Off }
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "LIGHT_OFF_SCREEN" "SPOT_SHAFTS" }
//           Matrix 0 [_FrustumRays]
//           Vector 4 [_ZBufferParams]
//           Vector 5 [_LightPos]
//           Vector 6 [_CameraPosLocal]
//           Float 7 [_FrustumApex]
//           Vector 8 [_CoordTexDim]
//           Vector 9 [_ScreenTexDim]
//           SetTexture 0 [_CameraDepthTexture] 2D 0
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    def c10, -1.00000000, 4.00000000, 2.00000000, 3.00000000
    def c11, 0.00000000, 1.00000000, 0.00001000, -1.00000000
    def c12, -0.00000000, -1.00000000, -2.00000000, -3.00000000
    def c13, 0.00100000, 39.00000000, 0.50000000, 99999996802856925000000000000000000000.00000000
    def c14, -0.50000000, 0, 0, 0
    dcl_texcoord0 v0.xy

def c220, 0, 1, 0.0625, -0.5
dcl_2d s13

mov r30, c200

// _LightPos is the mono screen-space light position, stereoise it:
mov r20, c5
if_eq r30.w, c220.x
texldl r31, c220.z, s13
add r31.w, r20.z, -r31.y // Z or W? Both seem to work.
mul r31.w, r31.w, c220.w // Had to multiply correction by -0.5
mad r20.x, r31.w, r31.x, r20.x
endif

    rcp r0.x, c8.y
    mad_sat r0.x, -r0, c13.z, v0.y
    mul r0.y, r0.x, c10
    frc r0.x, r0.y
    add r0.y, -r0.x, r0
    min r0.y, r0, c10.w
    max r0.y, r0, c11.x
    abs r0.z, r0.y
    frc r0.w, r0.z
    add r0.z, r0, -r0.w
    mad r2.x, r0, c10.z, c10
    cmp r0.y, r0, r0.z, -r0.z
    add r1, r0.y, c12
    abs r1, r1
    cmp r1, -r1, c11.y, c11.x
    mov r0.xz, c11.wyyw
    mov r0.w, -r2.x
    mov r0.y, r2.x
    dp4 r3.y, r1, r0
    mov r0.yw, c11.xwzy
    mov r0.x, -r2
    mov r0.z, r2.x
    dp4 r3.x, r0, r1
    add r0.xy, -r3, -r20
    mul r0.zw, r0.xyxy, r0.xyxy
    add r0.z, r0, r0.w
    rsq r2.z, r0.z
    mul r3.zw, r2.z, r0.xyxy
    abs r0.xy, r3.zwzw
    add r0.xy, -r0, c11.z
    cmp r2.xy, r0, c11.x, c11.y
    add r0.xy, r3.zwzw, -r2
    add r0.xy, r0, c11.y
    mov r1.xy, r20
    add r1, c11.wwyy, -r1.xyxy
    rcp r0.xz, r0.x
    rcp r0.yw, r0.y
    mul r0, r1, r0
    rcp r1.x, r2.z
    add r1, -r1.x, r0
    add r1, r1, c13.x
    cmp r1, r1, c11.x, c11.y
    mul r1, r2.xyxy, r1
    abs r1, r1
    cmp r1, -r1, c11.x, c11.y
    add r2, -r1, c11.y
    mul r2, -r2, c13.y
    mad r0, r1, r0, r2
    max r0.x, r0, c11
    max r0.x, r0, r0.y
    max r0.x, r0, r0.z
    max r0.x, r0, r0.w
    mov r0.z, c8.x
    add r1.x, c10, r0.z
    rcp r1.y, r1.x
    mad r0.xy, r3.zwzw, r0.x, r20
    rcp r1.x, c8.x
    add r0.zw, -r3.xyxy, -r0.xyxy
    mul r1.y, r1, c8.x
    mad r1.x, -r1, c13.z, v0
    mul_sat r1.x, r1, r1.y
    mad r0.xy, r1.x, r0.zwzw, r0
    mad r3.xy, r0, c13.z, c13.z
    mov r1.xyz, c1
    mov r0.xyz, c2
    add r1.xyz, -c0, r1
    add r0.xyz, -c3, r0
    mad r1.xyz, r3.x, r1, c0
    mad r0.xyz, r3.x, r0, c3
    add r0.xyz, r0, -r1
    mad r0.xyz, r3.y, r0, r1
    dp3 r0.w, r0, r0
    rsq r3.z, r0.w
    mul r4.xyz, r3.z, r0
    mov r0.x, c7
    add r0.z, c13, -r0.x
    mul r0.w, r4.z, c13.z
    mad r1.y, r0.z, r4, r0.w
    mad r1.z, r0, r4.y, -r0.w
    mov r0.y, c6.z
    add r0.x, -c7, r0.y
    mul r1.x, r0, c13.z
    mad r0.y, r0.z, r4.x, r0.w
    mad r0.x, -r0.z, c6, -r1
    rcp r0.y, r0.y
    mul r0.x, r0, r0.y
    mad r0.y, -r0.z, c6, -r1.x
    rcp r1.y, r1.y
    mul r0.y, r0, r1
    mad r1.y, r0.z, r4.x, -r0.w
    mad r0.w, -r0.z, c6.y, r1.x
    rcp r1.z, r1.z
    mul r0.w, r0, r1.z
    mad r0.z, -r0, c6.x, r1.x
    rcp r1.y, r1.y
    mul r0.z, r0, r1.y
    mad r1, r0, r4.z, c6.z
    add r1, -r1, c7.x
    cmp r1, r1, c11.y, c11.x
    cmp r2.y, r4.z, c11.x, c11
    cmp r2.x, -r4.z, c11, c11.y
    add r2.x, r2, -r2.y
    mad r2, r2.x, c13.w, -r0
    mad r0, r1, r2, r0
    mov r1.xy, r0.zwzw
    mov r0.w, c6.z
    rcp r1.z, r4.z
    mov r0.z, c6
    add r1.w, c14.x, -r0
    add r0.w, c13.z, -r0.z
    mul r0.z, r1, r1.w
    mul r1.z, r1, r0.w
    min r2.xyz, r1, r0
    max r2.xy, r2.x, r2.yzzw
    max r0.xyz, r1, r0
    min r0.xy, r0.x, r0.yzzw
    min r0.z, r0.x, r0.y
    max r0.w, r2.x, r2.y
    mul r2.zw, r3.xyxy, c9.xyxy
    frc r2.xy, r2.zwzw
    add r1.xy, r2.zwzw, -r2
    add r1.xy, r1, c13.z
    mul r0.xy, r1, c9.zwzw
    add r1.x, r0.w, -r0.z
    texld r0.x, r0, s0
    cmp r0.y, r1.x, c11.x, c11
    mad r1.x, r0, c4, c4.y
    cmp r0.x, -r0.z, c11, c11.y
    mul_pp r0.x, r0.y, r0
    rcp r1.x, r1.x
    mad r0.y, -r0.w, r3.z, r1.x
    mul r0.z, r3, r0
    abs_pp r0.x, r0
    mov r3.zw, c11.x
    cmp r0.y, r0, c11.x, c11
    cmp_pp r0.x, -r0, c11.y, c11
    add_pp_sat r0.x, r0, r0.y
    abs_pp r0.y, r0.x
    cmp r0.x, -r0, r1, -r1
    min r0.z, r0.x, r0
    cmp oC1, -r0.y, r0.z, r0.x
    mov oC0, r3
