// CRC32: AA0A735B | Matched 8 variants of 1 shaders: Hidden/Internal-PrePassLighting
// 
//     Unity headers extracted from Internal-PrePassLighting.shader
//     Shader "Hidden/Internal-PrePassLighting" {
//       Properties {
//        _LightTexture0 ("", any) = "" {}
//        _LightTextureB0 ("", 2D) = "" {}
//        _ShadowMapTexture ("", any) = "" {}
//       }
//       Fallback Off
//       SubShader 1/1 {
//         Pass 1/3 {
//           Tags { "SHADOWSUPPORT"="true" }
//           ZWrite Off
//           Fog { Mode Off }
//           Blend DstColor Zero
//           Program "fp" {
//             SubProgram "d3d9 " {
// 02:           Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SUNSHINE_DISABLED" }
// 80:           Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SUNSHINE_FILTER_HARD" }
// 20:           Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SUNSHINE_FILTER_PCF_2x2" }
// 08:           Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SUNSHINE_FILTER_PCF_3x3" }
// 01:           Keywords { "POINT" "SHADOWS_CUBE" "SUNSHINE_DISABLED" }
// 40:           Keywords { "POINT" "SHADOWS_CUBE" "SUNSHINE_FILTER_HARD" }
// 10:           Keywords { "POINT" "SHADOWS_CUBE" "SUNSHINE_FILTER_PCF_2x2" }
// 04:           Keywords { "POINT" "SHADOWS_CUBE" "SUNSHINE_FILTER_PCF_3x3" }
//               Matrix 0 [_CameraToWorld]
//               Vector 4 [_WorldSpaceCameraPos]
//               Vector 5 [_ProjectionParams]
//               Vector 6 [_ZBufferParams]
//               Vector 7 [_LightPositionRange]
//               Vector 8 [_LightShadowData]
//               Vector 9 [unity_ShadowFadeCenterAndType]
//               Vector 10 [_LightPos]
//               Vector 11 [_LightColor]
//               Vector 12 [unity_LightmapFade]
//               SetTexture 0 [_CameraNormalsTexture] 2D 0
//               SetTexture 1 [_CameraDepthTexture] 2D 1
//               SetTexture 2 [_LightTextureB0] 2D 2
//               SetTexture 3 [_ShadowMapTexture] CUBE 3
//             }
//           }
//         }
//       }
//     }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_cube s3
    def c13, 2.00000000, -1.00000000, 1.00000000, 0.00000000
    defi i0, 12, 0, 1, 0
    def c14, 0.50000000, 0.00781250, 0.01000000, 0.97000003
    def c15, 1.00000000, 0.00392157, 0.00001538, 0.00000006
    def c16, 128.00000000, 0.02083333, 0, 0
    def c17, 0.21997070, 0.70703125, 0.07098389, 0
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

    rcp r0.x, v0.w
    mul r1.xy, v0, r0.x
    texld r0.x, r1, s1
    mad r0.w, r0.x, c6.x, c6.y
    rcp r0.y, v1.z
    mul r0.y, r0, c5.z
    mov r3.w, c13.z
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r3.xyz, r0, r0.w // depth in r3.z

// PRE-EMPTIVE FIX FOR UNITYSUNSHINE SHADER - THIS HAS NOT BEEN VERIFIED

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r3.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r3.x, r31.w, r30.x, r3.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r6.z, r3, c2
    dp4 r6.x, r3, c0
    dp4 r6.y, r3, c1
    add r0.xyz, -r6, c9
    dp3 r0.x, r0, r0
    add r2.xyz, r6, -c10
    dp3 r1.z, r2, r2
    rsq r0.x, r0.x
    rcp r0.w, r0.x
    rsq r2.w, r1.z
    mul r0.xyz, r2.w, r2
    mov_pp r7.xyz, -r0
    mul r0.x, r1.z, c10.w
    texld r1, r1, s0
    add r0.w, -r3.z, r0
    texld r0.x, r0.x, s2
    mad r5.w, r0, c9, r3.z
    rcp r0.y, r2.w
    mad_pp r1.xyz, r1, c13.x, c13.y
    mov r7.w, r0.x
    dp3_pp r0.x, r1, r1
    rsq_pp r0.x, r0.x
    mul r2.w, r0.y, c7
    mul_pp r5.xyz, r0.x, r1
    mov_pp r6.w, r1
    mov r3, c13.w
    mov r8.x, c13.w
    loop aL, i0
    mul r0.x, r8, c14
    frc r0.x, r0
    mul r0.x, r0, c13
    abs r0.y, r0.x
    add r0.y, r0, c14.x
    frc r0.z, r0.y
    add r0.z, r0.y, -r0
    cmp r0.z, r0.x, r0, -r0
    add r0.z, r0, c13.y
    mad r8.y, -r8.x, c14.z, c14.w
    add r0.y, -r8.x, c13
    add r8.x, r8, c13.z
    mov r0.x, r8
    mul r0.xy, r0, c14.y
    abs r0.z, r0
    cmp r4.xy, -r0.z, -r0, r0
    add r1.xyz, r2, r4.xyyw
    texld r1, r1, s3
    add r0.xyz, r2, r4.yxyw
    texld r0, r0, s3
    dp4 r4.w, r1, c15
    dp4 r4.z, r0, c15
    add r0.xyz, r2, r4.yyxw
    add r1.xyz, r2, r4.x
    texld r0, r0, s3
    texld r1, r1, s3
    dp4 r4.x, r1, c15
    dp4 r4.y, r0, c15
    mov r1.x, c8
    mad r0, -r2.w, r8.y, r4
    cmp r0, r0, c13.z, r1.x
    add r3, r3, r0
    endloop
    add r0.xyz, r6, -c4
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mad r0.xyz, -r0.w, r0, r7
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul r0.xyz, r0.w, r0
    dp3_pp r0.x, r0, r5
    max_pp r1.x, r0, c13.w
    mul_pp r1.y, r6.w, c16.x
    pow_pp r0, r1.x, r1.y
    mov r1.z, c8.x
    add r0.z, c13, -r1
    dp4 r0.y, r3, c16.y
    mad r0.y, r0, r0.z, c8.x
    mul r1.x, r7.w, r0.y
    mov_pp r1.y, r0.x
    mov_pp r0.xyz, c11
    dp3_pp r0.x, c17, r0
    mov_sat r0.w, r1.x
    mul r0.w, r1.y, r0
    mul r0.w, r0, r0.x
    dp3_pp r0.y, r7, r5
    max_pp r0.x, r0.y, c13.w
    mad r0.y, r5.w, c12.z, c12.w
    mul r0.x, r1, r0
    add_sat r1.x, -r0.y, c13.z
    mul r0.xyz, r0.x, c11
    mul_pp r0, r0, r1.x
    exp_pp oC0.x, -r0.x
    exp_pp oC0.y, -r0.y
    exp_pp oC0.z, -r0.z
    exp_pp oC0.w, -r0.w
