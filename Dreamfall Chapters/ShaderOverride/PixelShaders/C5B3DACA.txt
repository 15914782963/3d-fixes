// Identified as Unity shader "Hidden/Internal-PrePassLighting" with POINT and SHADOWS_OFF config options
// Green light down cliff at starting area? - nearest to cliff.

// Headers extracted from Unity:

// Shader "Hidden/Internal-PrePassLighting" {
// Properties {
//  _LightTexture0 ("", any) = "" {}
//  _LightTextureB0 ("", 2D) = "" {}
//  _ShadowMapTexture ("", any) = "" {}
// }
// SubShader { 
// Pass {
//  Tags { "SHADOWSUPPORT"="true" }
//  ZWrite Off
//  Fog { Mode Off }
//  Blend One One
// Program "fp" {
// SubProgram "d3d9 " {
// Keywords { "POINT" "SHADOWS_OFF" "SUNSHINE_DISABLED" }
// Matrix 0 [_CameraToWorld]
// Vector 4 [_WorldSpaceCameraPos]
// Vector 5 [_ProjectionParams]
// Vector 6 [_ZBufferParams]
// Vector 7 [unity_ShadowFadeCenterAndType]
// Vector 8 [_LightPos]
// Vector 9 [_LightColor]
// Vector 10 [unity_LightmapFade]
// SetTexture 0 [_CameraNormalsTexture] 2D 0
// SetTexture 1 [_CameraDepthTexture] 2D 1
// SetTexture 2 [_LightTextureB0] 2D 2

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    def c11, 1, 2, -1, 0
    def c12, 128, 0.219970703, 0.70703125, 0.0709838867
    dcl_texcoord v0
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

    rcp r0.x, v0.w
    mul r0.xy, v0, r0.x
    texld r1.x, r0, s1
    rcp r0.z, v1.z
    mov r3.z, c11.x
    mad r0.w, r1.x, c6.x, c6.y
    mul r0.z, r0, c5
    mul r1.xyz, v1, r0.z
    rcp r0.z, r0.w
    mul r3.xyw, r1.xyzz, r0.z

// UPDATE: Refer to the comment in VS 92E5A17 for a better explanation of what
// we are doing based on a better understanding of the maths (like, why we need
// the horizontal FOV - basically it's because we are adjusting view-space
// coordinates and not projection-space):
//
//     ViewX = ViewX + separation * (ViewZ - convergence) * tan(fov_h / 2)
//     ViewX = ViewX + separation * (ViewZ - convergence) * P.I[0,0]
//
// I still don't fully understand why I need to do this here as well (and
// perhaps it can be simplified by modifying the maths in the VS, say by
// multiplying the ray adjustment by 2?)
//
//
//
// We need to get the horizontal FOV, which is in the projection matrix at
// [0,0] (well, actually it's cot(fov_h / 2), but that's what we need).
//
// Unfortunately none of the Unity shaders use the projection matrix, so we
// need to calculate it. We have the MVP matrix in c190 and the inverted MV
// matrix in c180, which was copied from the VS with Helix mod (refer to the
// DX9Settings.ini).
//
// We can calculate the projection matrix by multiplying the inverted MV matrix
// by the MVP matrix: P = MV.I * MVP
//
// Since we only need one field in the projection matrix, we can avoid doing a
// full matrix multiplication here. We only need to multiply the first row of
// the inverted MV matrix with the first column of the MVP matrix. The matrix
// regs are columns (I think - feels backwards to me), which means we need to
// transpose the first component of each of the MV regs into a temporary
// register to get it's first row:
mov r21.x, c180.x
mov r21.y, c181.x
mov r21.z, c182.x
mov r21.w, c183.x
// Now calculate the dot product of the first row of MV.I with the first column
// of MVP and store the result in r20.x - this is Projection[0,0]:
dp4 r20.x, r21, c190

// We need to divide by the FOV, so invert it:
rcp r20.x, r20.x

// And now we can adjust the shadow:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r3.w, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mul r31.w, r31.w, r20.x // Adjust by FOV we just calculated
add r3.x, r3.x, -r31.w  // Finally adjust the X coord

    dp4 r2.z, r3.xywz, c2
    dp4 r2.x, r3.xywz, c0
    dp4 r2.y, r3.xywz, c1
    add r1.xyz, r2, -c4
    dp3 r1.w, r1, r1
    add r3.xyz, r2, -c8
    dp3 r2.w, r3, r3
    rsq r0.z, r2.w
    mul r3.xyz, r0.z, r3
    texld r0, r0, s0
    mad_pp r4.xyz, r0, c11.y, c11.z
    rsq r1.w, r1.w
    mad r0.xyz, -r1.w, r1, -r3
    dp3_pp r1.y, r4, r4
    dp3 r1.x, r0, r0
    rsq_pp r1.y, r1.y
    rsq r1.x, r1.x
    mul r0.xyz, r1.x, r0
    mul_pp r4.xyz, r1.y, r4
    dp3_pp r0.x, r0, r4
    mul_pp r0.y, r0.w, c12.x
    max_pp r0.x, r0, c11.w
    pow_pp r1, r0.x, r0.y
    mov_pp r0.z, r1.x
    mul r0.x, r2.w, c8.w
    texld r0.x, r0.x, s2
    mov_sat r0.y, r0.x
    mul r0.y, r0.z, r0
    add r1.xyz, -r2, c7
    dp3 r0.z, r1, r1
    rsq r0.w, r0.z
    mov_pp r1.xyz, c9
    dp3_pp r0.z, c12.yzww, r1
    rcp r1.x, r0.w
    mul r0.w, r0.y, r0.z
    add r0.z, -r3.w, r1.x
    dp3_pp r0.y, -r3, r4
    max_pp r0.y, r0, c11.w
    mad r0.z, r0, c7.w, r3.w
    mad r0.z, r0, c10, c10.w
    add_sat r1.x, -r0.z, c11
    mul r0.x, r0, r0.y
    mul r0.xyz, r0.x, c9
    mul_pp oC0, r0, r1.x

// approximately 56 instruction slots used (3 texture, 53 arithmetic)
