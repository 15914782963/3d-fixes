// CRC32: F4526BAD | Unity headers extracted from Internal-PrePassCollectShadows.shader
// Shader "Hidden/Internal-PrePassCollectShadows" {
//   Properties {
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 1/1 {
//       ZTest Always
//       ZWrite Off
//       Cull Off
//       Fog { Mode Off }
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
//           Matrix 0 [_CameraToWorld]
//           Vector 4 [_ZBufferParams]
//           Vector 5 [unity_ShadowSplitSpheres0]
//           Vector 6 [unity_ShadowSplitSpheres1]
//           Vector 7 [unity_ShadowSplitSpheres2]
//           Vector 8 [unity_ShadowSplitSpheres3]
//           Vector 9 [unity_ShadowSplitSqRadii]
//           Vector 10 [unity_LightShadowBias]
//           Vector 11 [_LightShadowData]
//           Vector 12 [_ShadowMapTexture_TexelSize]
//           SetTexture 0 [_CameraDepthTexture] 2D 0
//           SetTexture 1 [_ShadowMapTexture] 2D 1
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    def c13, 1, 255, 0.00392156979, 0
    def c14, 0.5, 2, 1.58113885, 2.12132025
    def c15, 0.707106769, -0.5, 0.111083977, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xyz
    dcl_texcoord2 v2
    dcl_texcoord3 v3
    dcl_texcoord4 v4
    dcl_texcoord5 v5
    dcl_texcoord6 v6
    dcl_texcoord7 v7
    texld r0.x, v0, s0
    mad r0.x, r0, c4, c4.y
    rcp r1.w, r0.x
    mov r2.w, c13.x
    mul r2.xyz, r1.w, v1
    dp4 r0.z, r2, c2
    dp4 r0.x, r2, c0
    dp4 r0.y, r2, c1
    add r2.xyz, r0, -c5
    dp3 r2.x, r2, r2
    add r1.xyz, r0, -c6
    dp3 r2.y, r1, r1
    add r1.xyz, r0, -c8
    add r0.xyz, r0, -c7
    dp3 r2.w, r1, r1
    dp3 r2.z, r0, r0
    add r2, r2, -c9
    cmp r4, r2, c13.w, c13.x
    mul r0.xyz, r1.w, v5
    mul r1.xyz, r1.w, v3
    add_sat r3.xyz, r4.yzww, -r4
    add r0.xyz, v4, r0
    mul r2.xyz, r3.x, r0
    mul r0.xyz, r1.w, v7
    add r1.xyz, v2, r1
    mad r1.xyz, r4.x, r1, r2
    add r0.xyz, v6, r0
    mad r1.xyz, r3.y, r0, r1
    mov r2.x, v2.w
    mov r2.z, v4.w
    mov r2.y, v3.w
    mov r0.x, v5.w
    mov r0.y, v6.w
    mov r0.z, v7.w
    mad r0.xyz, r1.w, r0, r2
    mad r0.xyz, r0, r3.z, r1
    mul r1.xyz, r0, c13.x
    mov r2.z, c10.x
    mad r5.z, c14.w, -r2, r1
    mov r2.z, c10.x
    mad r7.z, c15.x, -r2, r1
    mov r0.xy, c12
    mad r0.xy, c14.x, -r0, r1
    mul r1.xy, r0, c12.zwzw
    frc r0.zw, r1.xyxy
    mov r0.xy, c12
    add r1.xy, -r0.zwzw, r1
    mul r0.xy, c14.x, r0
    mad r0.xy, r1, c12, r0
    mov r1.x, c10
    mad r4.z, c14, -r1.x, r1
    add r1.xy, r0, -c12
    mov r2.xy, c12
    mad r2.xy, c14.y, r2, r0
    mov r3.y, r2
    mov r6.x, r1
    mov r6.z, r5
    mov r6.y, r2
    texld r4.x, r6, s1
    add r6.xy, r0, c12
    mov r8.x, r0
    mov r8.z, r7
    mov r8.y, r6
    mov r2.z, r5
    mov r6.z, r7
    mov r7.y, r0
    mov r7.x, r6
    mov r3.x, r0
    mov r3.z, r4
    texld r3.x, r3, s1
    mov r3.z, r4.x
    texld r4.x, r8, s1
    mov r8.x, r1
    mov r8.y, r6
    mov r3.w, r3.x
    mov r8.z, r4
    texld r3.x, r8, s1
    mov r3.y, r4.x
    add r3, r3, c15.y
    mov r8.x, r6
    mov r8.y, r2
    mov r8.z, r4
    texld r4.x, r8, s1
    mov r8.x, r2
    mov r8.y, r6
    mov r8.z, r4
    texld r5.x, r8, s1
    mov r8.z, r4.x
    texld r4.x, r2, s1
    mov r8.w, r4.x
    texld r8.x, r6, s1
    mov r8.y, r5.x
    add r9, r8, c15.y
    cmp r8, r3, c13.x, c13.w
    add_pp r4.xw, -r0.zyzw, c13.x
    mov r3.w, r0.z
    mov r3.x, r4
    mov r3.y, c13.x
    mul_pp r5.xy, r8, r3
    mul_pp r4.xy, r8.zwzw, r3
    mov r3.z, c13.x
    cmp r9, r9, c13.x, c13.w
    mul_pp r2.zw, r9, r3
    add_pp r1.z, r4.x, r4.y
    add_pp r0.z, r2, r2.w
    add_pp r2.w, r1.z, r0.z
    add_pp r1.z, r5.x, r5.y
    mul_pp r4.xy, r9, r3.zwzw
    add_pp r0.z, r4.x, r4.y
    add_pp r2.z, r1, r0
    texld r5.x, r7, s1
    mov r6.z, r5.x
    mov r8.x, r2
    mov r8.y, r0
    mov r8.z, r4
    texld r4.x, r8, s1
    mov r6.w, r4.x
    mov r5.y, r1
    mov r5.x, r2
    texld r2.x, r5, s1
    mov r4.y, r1
    mov r4.x, r6
    texld r6.x, r4, s1
    mov r6.y, r2.x
    mov r8.x, r1
    mov r8.y, r0
    mov r8.z, r4
    texld r2.x, r8, s1
    mov r1.z, r5
    add r6, r6, c15.y
    mov r0.z, r7
    mov r4.x, r0
    texld r0.x, r0, s1
    mov r4.y, r1
    texld r4.x, r4, s1
    cmp r5, r6, c13.x, c13.w
    mov r8.w, r0.x
    mul_pp r0.xy, r3.zwzw, r5.zwzw
    add_pp r0.x, r0, r0.y
    mov r8.z, r2.x
    texld r8.x, r1, s1
    mov r8.y, r4.x
    add r7, r8, c15.y
    cmp r6, r7, c13.x, c13.w
    mul_pp r1.xy, r3, r6.zwzw
    add_pp r0.y, r1.x, r1
    add_pp r2.y, r0, r0.x
    mul_pp r0.xy, r3.zwzw, r5
    add_pp r0.x, r0, r0.y
    mul_pp r1.xy, r3, r6
    add_pp r0.y, r1.x, r1
    add_pp r2.x, r0.y, r0
    mov_pp r0.x, r4.w
    mov_pp r0.yz, c13.x
    mul_pp r0, r0, r2
    dp4_pp r0.y, r0, c15.z
    add r0.z, -r1.w, c13.x
    mov r0.x, c11
    add r0.x, c13, -r0
    mul r0.zw, r0.z, c13.xyxy
    frc r0.zw, r0
    mad oC0.x, r0.y, r0, c11
    mov r0.y, r0.w
    mad r0.x, -r0.w, c13.z, r0.z
    mov oC0.zw, r0.xyxy
    mov oC0.y, c13.x

// approximately 166 instruction slots used (17 texture, 149 arithmetic)
