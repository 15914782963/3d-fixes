[General]

; UseRenderedShaders=true is nearly always useful, because it trims the
; list of shaders seen while hunting down to just those active in the
; current scene.  Disable this only if you get crashes during hunting.
UseRenderedShaders=true

; DumpAll will generate ASM text files for every shader seen by the game.
; This is usually worth doing once, but not useful for every run.
DumpAll=true

; Constant registers that will arrive in Vertex and Pixel Shaders, as
; c200.  The constants below will be assigned, based on the key preset.
DefVSConst1 = 200
DefPSConst1 = 200

; The PresetKeysList specifies which KEYs will be used.
; Multiple keys lists are supported.
; Note that the KEY sections are in hexadecimal
PresetsKeysList = 0;1;2;3;4;5;6;7;8;9;A;B;C;D;E;

; Allows textures to be cycled with Up/Down - use to hunt menu text CRC32
bCalcTexCRCatStart = true

; v1.1.3 update added exclusive full screen mode, so this profile selection is
; no longer necessary:
; GameProfile = fxdplayer

; Mouse stopped working in game with Helix mod (works in menus)
InitMouse = false

; Makes it crash less when reloading shaders:
OverrideMethod = 2

; Allow access to the screen size in pixel shaders for shadow fix:
DefPSViewSizeConst = 210

; Force square surfaces (shadow maps) to be mono:
DefSquareSurfaceMode = 2

; DefDepthStencilSurfaceMode = 1
; DefSurfaceCreationMode = 1
; DefRtCreationMode = 1

SurfaceCreationModeList = 0;1;

; Stereoise LightShaft _DepthEpi render target (didn't seem to work)
[SF0]
DefMode = 1
Format = 115
; Width = 1024
; Height = 1024
; Usage = 1
; Pool = 0
; Levels = 1

; Stereoise LightShaft _CoordEpi render target (didn't seem to work)
[SF1]
DefMode = 1
Format = 115
; Width = 1024
; Height = 1024
; Usage = 1
; Pool = 0
; Levels = 1



; Number row on keyboard sets UI depth to various values between screen depth
; and separation. `~ (left of 1 on US keyboards) sets screen depth, 1-9 sets
; septh in 10% multiples and 0 sets depth to 100% separation.
; Note that the KEY%X on these sections is in hexadecimal, hence we use KEYA
; for the tenth key entry and so on.
[KEY0]
Key = 192
Presets = 0;
Type = 1
[PRES0]
Const3 = 0x00000000
[KEY1]
Key = 49
Presets = 1;
Type = 1
[PRES1]
Const3 = 0x3dcccccd
[KEY2]
Key = 50
Presets = 2;
Type = 1
[PRES2]
Const3 = 0x3e4ccccd
[KEY3]
Key = 51
Presets = 3;
Type = 1
[PRES3]
Const3 = 0x3e99999a
[KEY4]
Key = 52
Presets = 4;
Type = 1
[PRES4]
Const3 = 0x3ecccccd
[KEY5]
Key = 53
Presets = 5;
Type = 1
[PRES5]
Const3 = 0x3f000000
[KEY6]
Key = 54
Presets = 6;
Type = 1
[PRES6]
Const3 = 0x3f19999a
[KEY7]
Key = 55
Presets = 7;
Type = 1
[PRES7]
Const3 = 0x3f333333
[KEY8]
Key = 56
Presets = 8;
Type = 1
[PRES8]
Const3 = 0x3f4ccccd
[KEY9]
Key = 57
Presets = 9;
Type = 1
[PRES9]
Const3 = 0x3f666666
[KEYA]
Key = 48
Presets = A;
Type = 1
[PRESA]
Const3 = 0x3f800000

; U toggles volumetric ray-marched light shafts between:
;   - disabled
;   - no stereo fix (vertex shader only)
;   - partial stereo fix
; I tracked down the source code to these - maybe someone can do a better fix:
; https:;github.com/robertcupisz/LightShafts
[KEYB]
Key = 85
Presets = B;C;13;
Type = 1
[PRESB]
Const1 = 0x3f800000
[PRESC]
Const1 = 0x00000000
[PRES13]
Const1 = 0x40000000
UseByDef = true

; I toggles Const2
[KEYC]
Key = 73
Presets = D;E;
Type = 2
[PRESD]
Const2 = 0x3f800000
[PRESE]
Const2 = 0x00000000

; Default convergence 0.85 on backslash
[KEYD]
Key = 220
Presets = F;
[PRESF]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3f47ae14
UseByDef = true


; Copy MV+MVP matrices from various sources in case of drawing a full-screen
; lighting effect (e.g. physical lighting effect such as specular highlights
; and environment reflections) while directional lighting is not active. Note
; that unlike the Unity 4 fix we do not ask Helix mod to inverse the MV matrix.
; This is because Unity 5 only passes in three columns of the matrix which
; won't work with the generic inverse matrix function. Instead we invert the
; matrix in assembly in the destination shader.
;
; The below shaders are pretty common one in Unity games that we can use, but
; you may need to find others (avoid UI and camera depth/normal shaders that
; often do not have a valid projection matrix). My extract_unity_headers.py
; script is useful to find other shaders that can be used here.

[VSC72ED75E]
; Particles/Additive_Layer
UseMatrix = true
GetMatrixFromReg = 4
GetConst2FromReg = 0
[VSAD105294]
; Matched 3 variants of 3 shaders: Particles/Additive, Particles/Alpha Blended, Particles/Multiply
UseMatrix = true
GetMatrixFromReg = 4
GetConst2FromReg = 0
[VS6D5E1461]
; Matched 4 variants of 4 shaders: Particles/Additive, Particles/Additive (Soft), Particles/Alpha Blended, Particles/Multiply (Double)
UseMatrix = true
GetMatrixFromReg = 4
GetConst2FromReg = 0


; In Unity 5, the directional lighting shader has the inverse projection
; matrix, which we need to fix the lights/shadows, so copy it to other lighting
; shaders whenever it is active. Use a preset to set Const4 to signify when
; this matrix is valid and fall back to other techniques if it is not.

[VS00933666]
; Hidden/Internal-PrePassCollectShadows PCF_5x5
GetConst3FromReg = 4
PresIndex = 16
[VS678DC18B]
; Hidden/Internal-PrePassCollectShadows
GetConst3FromReg = 4
PresIndex = 16

[PRES10]
; PRES10 (hexadecimal) is PresIndex 16 (decimal)
; Signifies that the inverse projection matrix is currently valid
Const4 = 0x3f800000

; The lighting shaders will use the inverse projection matrix copied from the
; directional lighting shader if it is valid. At times when it is not valid the
; shader will fall back to other techniques. Point and spot lights will
; calculate it from the MV+MVP matrices passed into the shader from the game,
; and full-screen lighting effects (e.g. physical lighting) will use the
; matrices copied from other unrelated shaders (see above - additional shaders
; may be necessary). If all else fails, a hard coded constant can be set in
; the vertex shader in c220.w

[VS05F7E52C]
; Matched 65 variants of 2 shaders: Hidden/Internal-DeferredShading, Hidden/Internal-PrePassLighting
SetConst3ToReg = 170
UseMatrix = true
MatrixReg = 180
SetConst2ToReg = 190


; Blacklist UI depth adjustment for certain effects.
;
; 0DA4BD7E, 7450232C:
; Disable UI depth adjustment for inventory background. Alternatively I can
; adjust the shaders for the objects in the inventory, but I'm concerned that
; there might be a lot of them, and potentially missable ones. The inventory
; is already pushed a short distance into the scene anyway.
;
; 9ED6D1D3:
; Full-screen white texture used to fade in and out of cinematics, also does
; the white part of scrollbars (e.g. in the journal), so now filtering this
; based on the X coordinate instead
;
; FIXME: UPDATE FOR UNITY 5 SHADER
[VS9F7BB09C]
CheckTexCRC = true
ValNotDefined = 0
ValForDefined = 1
TexCounterReg = 251
UseDefinedOnly = false
DefinedTexturesVS = 0DA4BD7E;7450232C;
VBOffsetList = 0;
[VB9F7BB09C.0]
