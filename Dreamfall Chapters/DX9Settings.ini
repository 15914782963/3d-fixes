[General]

; UseRenderedShaders=true is nearly always useful, because it trims the
; list of shaders seen while hunting down to just those active in the
; current scene.  Disable this only if you get crashes during hunting.
UseRenderedShaders=true

; DumpAll will generate ASM text files for every shader seen by the game.
; This is usually worth doing once, but not useful for every run.
DumpAll=true

; Constant registers that will arrive in Vertex and Pixel Shaders, as
; c200.  The constants below will be assigned, based on the key preset.
DefVSConst1 = 200
DefPSConst1 = 200

; The PresetKeysList specifies which KEYs will be used.
; Multiple keys lists are supported.
; Note that the KEY sections are in hexadecimal
PresetsKeysList = 0;1;2;3;4;5;6;7;8;9;A;B;C;D;E;

; Allows textures to be cycled with Up/Down - use to hunt menu text CRC32
bCalcTexCRCatStart = true

; v1.1.3 update added exclusive full screen mode, so this profile selection is
; no longer necessary:
; GameProfile = fxdplayer

; Mouse stopped working in game with Helix mod (works in menus)
InitMouse = false

; Makes it crash less when reloading shaders:
OverrideMethod = 2

; Allow access to the screen size in pixel shaders for shadow fix:
DefPSViewSizeConst = 210

; Force square surfaces (shadow maps) to be mono:
DefSquareSurfaceMode = 2

; DefDepthStencilSurfaceMode = 1
; DefSurfaceCreationMode = 1
; DefRtCreationMode = 1

SurfaceCreationModeList = 0;1;

; Stereoise LightShaft _DepthEpi render target (didn't seem to work)
[SF0]
DefMode = 1
Format = 115
; Width = 1024
; Height = 1024
; Usage = 1
; Pool = 0
; Levels = 1

; Stereoise LightShaft _CoordEpi render target (didn't seem to work)
[SF1]
DefMode = 1
Format = 115
; Width = 1024
; Height = 1024
; Usage = 1
; Pool = 0
; Levels = 1



; Number row on keyboard sets UI depth to various values between screen depth
; and separation. `~ (left of 1 on US keyboards) sets screen depth, 1-9 sets
; septh in 10% multiples and 0 sets depth to 100% separation.
; Note that the KEY%X on these sections is in hexadecimal, hence we use KEYA
; for the tenth key entry and so on.
[KEY0]
Key = 192
Presets = 0;
Type = 1
[PRES0]
Const3 = 0x00000000
[KEY1]
Key = 49
Presets = 1;
Type = 1
[PRES1]
Const3 = 0x3dcccccd
[KEY2]
Key = 50
Presets = 2;
Type = 1
[PRES2]
Const3 = 0x3e4ccccd
[KEY3]
Key = 51
Presets = 3;
Type = 1
[PRES3]
Const3 = 0x3e99999a
[KEY4]
Key = 52
Presets = 4;
Type = 1
[PRES4]
Const3 = 0x3ecccccd
[KEY5]
Key = 53
Presets = 5;
Type = 1
[PRES5]
Const3 = 0x3f000000
[KEY6]
Key = 54
Presets = 6;
Type = 1
[PRES6]
Const3 = 0x3f19999a
[KEY7]
Key = 55
Presets = 7;
Type = 1
[PRES7]
Const3 = 0x3f333333
[KEY8]
Key = 56
Presets = 8;
Type = 1
[PRES8]
Const3 = 0x3f4ccccd
[KEY9]
Key = 57
Presets = 9;
Type = 1
[PRES9]
Const3 = 0x3f666666
[KEYA]
Key = 48
Presets = A;
Type = 1
[PRESA]
Const3 = 0x3f800000

; U toggles volumetric ray-marched light shafts between:
;   - disabled
;   - no stereo fix (vertex shader only)
;   - partial stereo fix
; I tracked down the source code to these - maybe someone can do a better fix:
; https:;github.com/robertcupisz/LightShafts
[KEYB]
Key = 85
Presets = B;C;13;
Type = 1
[PRESB]
Const1 = 0x3f800000
[PRESC]
Const1 = 0x00000000
[PRES13]
Const1 = 0x40000000
UseByDef = true

; I toggles Const2
[KEYC]
Key = 73
Presets = D;E;
Type = 2
[PRESD]
Const2 = 0x3f800000
[PRESE]
Const2 = 0x00000000

; Default convergence 0.85 on backslash
[KEYD]
Key = 220
Presets = F;
[PRESF]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3f47ae14
UseByDef = true

; P toggles Const4
[KEYE]
Key = 80
Presets = 11;12;
Type = 2
[PRES11]
Const4 = 0x3f800000
[PRES12]
Const4 = 0x00000000


; The projection matrix will be calculated from the matrices passed into the
; lighting shader whenever possible. This is not possible for directional
; lighting or other times it is drawing a full-screen quad, so we must also
; find other shaders to get the MV+MVP matrices from in that case. The below
; shader is a pretty common one in Unity games that we can use, but you may
; need to find others (avoid UI and depth shaders that often do not have a
; valid projection matrix). My extract_unity_headers.py script is useful to
; find other shaders that can be used here.
[VS61CAF50F]
; Particle Alpha Blend.shader - example of shader with MV+MVP matrices
; MV is in c0-c3. Copy this and invert it:
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
; MVP is in c4-c7. We only need the first column so only bother with c4
GetConst1FromReg = 4

[VS0D95D55D]
; Matched 2 variants of 2 shaders: Dreamfall/Backdrop/CustomFog_BumpSpecIllum, Dreamfall/Backdrop/CustomFog_BumpSpecIllum_A
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSD485AA3F]
; Matched 4 variants of 2 shaders: Dreamfall/Backdrop/CustomFog_BumpSpecIllum, Dreamfall/Backdrop/CustomFog_BumpSpecIllum_A
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4


; Lighting vertex shaders to copy the matrices to. We used to also copy them to
; the pixel shaders, but now we pass them from the vertex shaders to the pixel
; shaders instead, which makes it easier to tweak the FOV source on a game by
; game basis.

; This game appears to use unitysunshine.com replacement for
; Hidden/Internal-PrePassLighting, so the following CRCs should match for
; other games also using it.

[VS92E51A17]
; Unity Hidden/Internal-PrePassLighting.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; This shader will use it's own MV+MVP matrices when they are valid (even
; inverting the MV matrix inside the shader to avoid needing Helix mod to do
; it), and the passed in ones when they are not:
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190



; Light Shafts final interpolation variants:
[PS370B1ED2]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS376C8CD0]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS430E62C8]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS4C517B70]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS574FB1C2]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS735A1250]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS8415AC69]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS9F0F5BA6]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSA5BA61A6]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSB9D74F78]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSC1FE95D1]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSCF04DA4E]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSCF419A8A]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSD5898C41]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSD5C064DD]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSFDF91E24]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Light Shafts coords.shader variants:
[PS353DA3BB]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS869C73FE]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSC28E6F4C]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSFDD582D0]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Light shafts raymarched.shader variants:
[PS02D3F982]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS077737C7]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS18C841CF]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS19089C44]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS64570990]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS6899A7BB]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PS74885A6A]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSACB90CE8]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSACF5A232]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSB0580DAE]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSC62ED97E]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[PSDC6FBB54]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190


; We replaced Hidden/Internal-PrePassCollectShadows with the original from
; Unity, but the inputs don't match up and we have too many to pass soley via
; outputs from the VS, so we also use Helix Mod to copy some matrices.
; We still need the inverse projection matrix, so we copy the inverse MV and
; MVP matrices from elsewhere (we can't use the MVP matrix that already exists
; in this shader as it doesn't match the MV matrix we are passing in).
;
; We use Helix Mod to copy one of the matrix inputs of this VS to the PS with
; GetMatrix1, then use GetConstNFromReg to copy a second matrix (we need 3
; columns, which is exactly how many constants Helix mod lets us copy, but we
; already used one to copy the MVP matrix, so we only copy two columns here)
; The rest are passed as extra outputs from the VS
[VS17875287]
; c180-c183 has the inverted MV matrix:
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
UseMatrix1 = true
; Get unity_World2Shadow0:
GetMatrixFromReg1 = 4
InverseMatrix1 = false
; Get unity_World2Shadow1[2-3]:
; GetConst1FromReg = 8
GetConst2FromReg = 9
GetConst3FromReg = 10

[PSF4526BAD]
UseMatrix1 = true
MatrixReg1 = 100
; SetConst1ToReg = 104
SetConst2ToReg = 105
SetConst3ToReg = 106

[PS0A5B2691]
UseMatrix1 = true
MatrixReg1 = 100
SetConst2ToReg = 105
SetConst3ToReg = 106

; These next two are not fixed because we don't the ability to pass the last
; matrix through - instead they are intentionally broken to make it obvious if
; they are in use. Each corner of the screen will be in shadow or not, divided
; down the middle.
[PS691EDF7D]
UseMatrix1 = true
MatrixReg1 = 100
SetConst2ToReg = 105
SetConst3ToReg = 106
[PS8FE84219]
UseMatrix1 = true
MatrixReg1 = 100
SetConst2ToReg = 105
SetConst3ToReg = 106


; Blacklist UI depth adjustment for certain effects.
;
; 0DA4BD7E, 7450232C:
; Disable UI depth adjustment for inventory background. Alternatively I can
; adjust the shaders for the objects in the inventory, but I'm concerned that
; there might be a lot of them, and potentially missable ones. The inventory
; is already pushed a short distance into the scene anyway.
;
; 9ED6D1D3:
; Full-screen white texture used to fade in and out of cinematics, also does
; the white part of scrollbars (e.g. in the journal), so now filtering this
; based on the X coordinate instead
[VS9F7BB09C]
CheckTexCRC = true
ValNotDefined = 0
ValForDefined = 1
TexCounterReg = 251
UseDefinedOnly = false
DefinedTexturesVS = 0DA4BD7E;7450232C;
VBOffsetList = 0;
[VB9F7BB09C.0]
