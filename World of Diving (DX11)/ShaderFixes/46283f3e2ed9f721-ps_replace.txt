// 3DMigoto: 46283f3e2ed9f721 | Matched 2 variants of 1 shaders: Custom/Water/Water_Up
// 
//    Unity headers extracted from Water.shader
//    Shader "Custom/Water/Water_Up" {
//      Properties {
//       _Color ("Color", Color) = (0.5,0.5,0.5,1)
//       _ColorNear ("Color Near", Color) = (0.169118,0.656186,1,1)
//       _ColorShallow ("Color Shallow", Color) = (0.5,0.5,0.5,1)
//       _EmissionColor ("Emission Color", Color) = (0.5,0.5,0.5,1)
//       _Smoothness ("Smoothness", Range(0,1)) = 1
//       _EmissionSpread ("Emission Spread", Float) = 8
//       _DistanceSSS ("Distance SSS", Float) = 25
//       _BumpMap ("Normal ", 2D) = "bump" { }
//       _NormalStrength ("NormalStrength", Range(-5,5)) = 2
//       _VertexStrength ("Vertex Strength", Range(-3,3)) = 0
//       _Speed ("Speed", Float) = 0
//       _BumpMap_Detail ("Normal Detail", 2D) = "bump" { }
//       _DetailStrength ("Detail Strength", Range(-5,5)) = 1
//       _DetailVertexStrength ("Detail Vertex Strength", Range(-3,3)) = 1
//       _DetailSpeed ("Detail Speed", Float) = 0
//       _Depth ("Depth", Float) = 0
//       _DepthPower ("Depth Power", Float) = 0.5
//       _Refraction ("Refraction", Float) = 0.02
//       _Distance ("Distance", Float) = 25
//       _Distance_Power ("Distance_Power", Float) = 0.2
//       _DistanceVertex ("Distance Vertex", Float) = 25
//       _Tessellation ("Tessellation", Float) = 5
//       _AlphaFar ("Alpha Far", Float) = 1
//       _AlphaNear ("Alpha Near", Float) = 0.3
//       _Metallic ("Metallic", Range(0,1)) = 1
//      [HideInInspector]  _Cutoff ("Alpha cutoff", Range(0,1)) = 0.5
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        GrabPass {
//         }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Blend SrcAlpha OneMinusSrcAlpha
//          GpuProgramID 9208
//          Program "fp" {
//            SubProgram "d3d11 " {
// 1:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_OFF" }
// 2:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
//              SetTexture 0 [_CameraDepthTexture] 2D 3
//              SetTexture 1 [_BumpMap] 2D 4
//              SetTexture 2 [_BumpMap_Detail] 2D 5
//              SetTexture 3 [_GrabTexture] 2D 2
//              SetTexture 4 [unity_SpecCube0] CUBE 0
//              SetTexture 5 [unity_SpecCube1] CUBE 1
//              ConstBuffer "$Globals" 368
//              Vector 32 [unity_ColorSpaceDielectricSpec]
//              Vector 96 [_LightColor0]
//              Vector 128 [unity_LightGammaCorrectionConsts]
//              Vector 144 [_TimeEditor]
//              Vector 160 [_ColorNear]
//              Float 176 [_Depth]
//              Float 180 [_DepthPower]
//              Vector 192 [_BumpMap_ST]
//              Vector 208 [_BumpMap_Detail_ST]
//              Float 224 [_Refraction]
//              Float 228 [_Speed]
//              Float 232 [_Distance]
//              Float 236 [_Distance_Power]
//              Float 240 [_Smoothness]
//              Vector 256 [_Color]
//              Float 272 [_NormalStrength]
//              Float 276 [_DetailStrength]
//              Float 280 [_DetailSpeed]
//              Float 288 [_DistanceSSS]
//              Vector 304 [_EmissionColor]
//              Float 320 [_EmissionSpread]
//              Vector 336 [_ColorShallow]
//              Float 352 [_AlphaNear]
//              Float 356 [_AlphaFar]
//              Float 360 [_Metallic]
//              ConstBuffer "UnityPerCamera" 144
//              Vector 0 [_Time]
//              Vector 64 [_WorldSpaceCameraPos] 3
//              Vector 80 [_ProjectionParams]
//              Vector 112 [_ZBufferParams]
//              ConstBuffer "UnityLighting" 720
//              Vector 0 [_WorldSpaceLightPos0]
//              Vector 608 [unity_SHAr]
//              Vector 624 [unity_SHAg]
//              Vector 640 [unity_SHAb]
//              ConstBuffer "UnityReflectionProbes" 128
//              Vector 0 [unity_SpecCube0_BoxMax]
//              Vector 16 [unity_SpecCube0_BoxMin]
//              Vector 32 [unity_SpecCube0_ProbePosition]
//              Vector 48 [unity_SpecCube0_HDR]
//              Vector 64 [unity_SpecCube1_BoxMax]
//              Vector 80 [unity_SpecCube1_BoxMin]
//              Vector 96 [unity_SpecCube1_ProbePosition]
//              Vector 112 [unity_SpecCube1_HDR]
//              BindCB "$Globals" 0
//              BindCB "UnityPerCamera" 1
//              BindCB "UnityLighting" 2
//              BindCB "UnityReflectionProbes" 3
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_5_0

// water from above in swimming pool

TextureCube<float4> t5 : register(t5);

TextureCube<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[41];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[23];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float2 w1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float3 v3 : TEXCOORD3,
  float3 v4 : TEXCOORD4,
  float3 v5 : TEXCOORD5,
  float4 v6 : TEXCOORD6,
  float4 v7 : COLOR0,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD9,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
v6.x += stereo.x * (v6.w - stereo.y);
v8.x += stereo.x * (v8.w - stereo.y) / 2;

  r0.x = dot(v3.xyz, v3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v3.xyz * r0.xxx;
  r1.xy = v6.xy / v6.ww;
  r0.w = -cb1[5].x * cb1[5].x;
  r2.xy = v8.xy / v8.ww;
  r1.w = t0.Sample(s3_s, r2.xy).x;
  r1.w = cb1[7].z * r1.w + cb1[7].w;
  r1.w = 1.000000e+000 / r1.w;
  r1.w = -cb1[5].y + r1.w;
  r1.w = max(0.000000000e+000, r1.w);
  r2.x = -cb1[5].y + v8.z;
  r2.x = max(0.000000000e+000, r2.x);
  r2.y = r2.x / cb0[14].z;
  r2.y = log2(r2.y);
  r2.y = cb0[14].w * r2.y;
  r2.y = exp2(r2.y);
  r2.y = min(1.000000000e+000, r2.y);
  r2.z = cb1[0].x + cb0[9].x;
  r2.w = cb0[14].y * r2.z;
  r3.xyzw = float4(2.000000e-001,2.000000e-001,1.000000e-001,1.000000e-001) + v2.xzxz;
  r3.xy = r2.ww * float2(-1.000000e-001,0.000000e+000) + r3.xy;
  r3.xy = r3.xy * cb0[12].xy + cb0[12].zw;
  r3.xy = t1.Sample(s4_s, r3.xy).yw;
  r3.xy = r3.yx * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xy = r2.ww * float2(2.000000e-001,-1.000000e-002) + v2.xz;
  r4.xy = r4.xy * cb0[12].xy + cb0[12].zw;
  r4.xy = t1.Sample(s4_s, r4.xy).yw;
  r4.xy = r4.yx * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r2.z = cb0[17].z * r2.z;
  r5.xyzw = r2.zzzz * float4(1.000000e-001,1.000000e-001,-1.000000e-001,1.000000e-001) + v2.xzxz;
  r4.zw = r5.xy * cb0[13].xy + cb0[13].zw;
  r4.zw = t2.Sample(s5_s, r4.zw).yw;
  r4.zw = r4.wz * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r3.zw = r2.zz * float2(1.000000e-001,-1.000000e-001) + r3.zw;
  r3.zw = r3.zw * cb0[13].xy + cb0[13].zw;
  r3.zw = t2.Sample(s5_s, r3.zw).yw;
  r3.zw = r3.wz * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r5.xy = float2(3.000000e-001,3.000000e-001) + r5.zw;
  r5.xy = r5.xy * cb0[13].xy + cb0[13].zw;
  r5.xy = t2.Sample(s5_s, r5.xy).yw;
  r5.xy = r5.yx * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r2.zw = r2.zz * float2(-1.000000e-001,-1.000000e-001) + v2.xz;
  r2.zw = float2(6.000000e-001,6.000000e-001) + r2.zw;
  r2.zw = r2.zw * cb0[13].xy + cb0[13].zw;
  r2.zw = t2.Sample(s5_s, r2.zw).yw;
  r2.zw = r2.wz * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r5.zw = r4.zw * r3.zw;
  r5.zw = r5.zw * r5.xy;
  r5.zw = r5.zw * r2.zw;
  r1.z = r1.y * r0.w;
  r1.xy = r1.xz * float2(5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r5.zw = r3.xy * r4.xy + r5.zw;
  r6.xy = cb0[14].xx * r5.zw;
  r0.w = 1.000000015e-001 + r2.y;
  r5.zw = -r5.zw * cb0[14].xx + float2(1.000000e-002,1.000000e-002);
  r5.zw = r0.ww * r5.zw + r6.xy;
  r5.zw = r5.zw * r2.yy;
  r0.w = -r2.x + r1.w;
  r1.zw = saturate(float2(2.000000e-001,1.000000e+002) * r0.ww);
  r5.zw = r1.zz * r5.zw + float2(-1.000000e-002,-1.000000e-002);
  r1.xy = r1.ww * r5.zw + r1.xy;
  r1.xy = float2(1.000000e-002,1.000000e-002) + r1.xy;
  r1.xyz = t3.Sample(s2_s, r1.xy).xyz;
  r6.xyz = cb1[4].xyz + -v2.xyz;
  r1.w = dot(r6.xyz, r6.xyz);
  r1.w = rsqrt(r1.w);
  r7.xyz = r6.xyz * r1.www;
  r3.xy = r4.xy + r3.xy;
  r8.xy = cb0[17].xx * r3.xy;
  r8.z = 2.000000000e+000;
  r3.xy = r4.zw + r3.zw;
  r3.xy = r3.xy + r5.xy;
  r2.xz = r3.xy + r2.zw;
  r3.xy = cb0[17].yy * r2.xz;
  r3.zw = float2(0.000000e+000,1.000000e+000);
  r2.xzw = v7.xxx * r3.xyz + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r2.xzw = float3(-1.000000e+000,-1.000000e+000,1.000000e+000) * r2.xzw;
  r3.z = dot(r8.xyz, r2.xzw);
  r3.xy = r8.xy * r3.zz;
  r2.xzw = r3.xyz * float3(5.000000e-001,5.000000e-001,1.000000e+000) + -r2.xzw;
  r3.xyz = v5.xyz * r2.zzz;
  r3.xyz = r2.xxx * v4.xyz + r3.xyz;
  r2.xzw = r2.www * r0.xyz + r3.xyz;
  r3.x = dot(r2.xzw, r2.xzw);
  r3.x = rsqrt(r3.x);
  r3.xyz = r3.xxx * r2.xzw;
  r2.x = dot(cb2[0].xyz, cb2[0].xyz);
  r2.x = rsqrt(r2.x);
  r2.xzw = cb2[0].xyz * r2.xxx;
  r4.xyz = r6.xyz * r1.www + r2.xzw;
  r1.w = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r1.w);
  r4.xyz = r4.xyz * r1.www;
  r1.w = cb0[15].x * 1.000000000e+001 + 1.000000000e+000;
  r1.w = exp2(r1.w);
  r5.x = dot(cb2[38].xyzw, r3.xyzw);
  r5.y = dot(cb2[39].xyzw, r3.xyzw);
  r5.z = dot(cb2[40].xyzw, r3.xyzw);
  r5.xyz = v9.xyz + r5.xyz;
  r3.w = dot(-r7.xyz, r3.xyz);
  r3.w = r3.w + r3.w;
  r6.xyz = r3.xyz * -r3.www + -r7.xyz;
  r3.w = 0.000000000e+000 < cb3[2].w;
  if (r3.w != 0) {
    r3.w = dot(r6.xyz, r6.xyz);
    r3.w = rsqrt(r3.w);
    r8.xyz = r6.xyz * r3.www;
    r9.xyz = cb3[0].xyz + -v2.xyz;
    r9.xyz = r9.xyz / r8.xyz;
    r10.xyz = cb3[1].xyz + -v2.xyz;
    r10.xyz = r10.xyz / r8.xyz;
    r11.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000) < r8.xyz;
    r9.xyz = r11.xyz ? r9.xyz : r10.xyz;
    r3.w = min(r9.x, r9.y);
    r3.w = min(r3.w, r9.z);
    r9.xyz = cb3[1].xyz + cb3[0].xyz;
    r10.xyz = r9.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + -cb3[2].xyz;
    r10.xyz = v2.xyz + r10.xyz;
    r8.xyz = r8.xyz * r3.www + r10.xyz;
    r8.xyz = -r9.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + r8.xyz;
  } else {
    r8.xyz = r6.xyz;
  }
  r3.w = 1.000000000e+000 + -cb0[15].x;
  r4.w = log2(r3.w);
  r4.w = 7.500000000e-001 * r4.w;
  r4.w = exp2(r4.w);
  r4.w = 7.000000000e+000 * r4.w;
  r8.xyzw = t4.SampleLevel(s0_s, r8.xyz, r4.w).xyzw;
  r5.w = log2(r8.w);
  r5.w = cb3[3].y * r5.w;
  r5.w = exp2(r5.w);
  r5.w = cb3[3].x * r5.w;
  r9.xyz = r5.www * r8.xyz;
  r6.w = cb3[1].w < 9.999899864e-001;
  if (r6.w != 0) {
    r6.w = 0.000000000e+000 < cb3[6].w;
    if (r6.w != 0) {
      r6.w = dot(r6.xyz, r6.xyz);
      r6.w = rsqrt(r6.w);
      r10.xyz = r6.xyz * r6.www;
      r11.xyz = cb3[4].xyz + -v2.xyz;
      r11.xyz = r11.xyz / r10.xyz;
      r12.xyz = cb3[5].xyz + -v2.xyz;
      r12.xyz = r12.xyz / r10.xyz;
      r13.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000) < r10.xyz;
      r11.xyz = r13.xyz ? r11.xyz : r12.xyz;
      r6.w = min(r11.x, r11.y);
      r6.w = min(r6.w, r11.z);
      r11.xyz = cb3[5].xyz + cb3[4].xyz;
      r12.xyz = r11.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + -cb3[6].xyz;
      r12.xyz = v2.xyz + r12.xyz;
      r10.xyz = r10.xyz * r6.www + r12.xyz;
      r6.xyz = -r11.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + r10.xyz;
    }
    r6.xyzw = t5.SampleLevel(s1_s, r6.xyz, r4.w).xyzw;
    r4.w = log2(r6.w);
    r4.w = cb3[7].y * r4.w;
    r4.w = exp2(r4.w);
    r4.w = cb3[7].x * r4.w;
    r6.xyz = r4.www * r6.xyz;
    r8.xyz = r5.www * r8.xyz + -r6.xyz;
    r9.xyz = cb3[1].www * r8.xyz + r6.xyz;
  }
  r4.w = dot(r3.xyz, r2.xzw);
  r4.w = max(0.000000000e+000, r4.w);
  r2.x = dot(r2.xzw, r4.xyz);
  r0.w = cb0[11].x * r0.w;
  r2.z = saturate(r0.w);
  r6.xyz = -cb0[21].xyz + cb0[16].xyz;
  r6.xyz = r2.zzz * r6.xyz + cb0[21].xyz;
  r0.x = dot(r0.xyz, r7.xyz);
  r8.xyz = -cb1[4].xyz + v2.xyz;
  r0.y = dot(r8.xyz, r8.xyz);
  r0.y = sqrt(r0.y);
  r0.y = r0.y / cb0[18].x;
  r0.y = 1.000000000e+000 + -r0.y;
  r0.x = saturate(r0.x * r0.y);
  r8.xyz = cb0[10].xyz + -r6.xyz;
  r0.xyz = r0.xxx * r8.xyz + r6.xyz;
  r0.xyz = float3(1.000000e-001,1.000000e-001,1.000000e-001) + r0.xyz;
  r0.xyz = r2.yyy * r0.xyz + float3(-1.000000e-001,-1.000000e-001,-1.000000e-001);
  r6.xyz = -cb0[2].xyz + r0.xyz;
  r6.xyz = cb0[22].zzz * r6.xyz + cb0[2].xyz;
  r2.z = -cb0[22].z * cb0[2].w + cb0[2].w;
  r0.xyz = r2.zzz * r0.xyz;
  r2.z = 1.000000000e+000 + -r2.z;
  r2.w = dot(r3.xyz, r7.xyz);
  r2.xw = max(float2(0.000000e+000,0.000000e+000), r2.xw);
  r3.x = dot(r3.xyz, r4.xyz);
  r3.x = max(0.000000000e+000, r3.x);
  r3.y = r3.w * r3.w;
  r3.z = cb0[8].w * r3.y;
  r3.y = -r3.y * cb0[8].w + 1.000000000e+000;
  r4.x = r4.w * r3.y + r3.z;
  r3.y = r2.w * r3.y + r3.z;
  r3.y = r4.x * r3.y + 9.999999747e-005;
  r3.y = 1.000000e+000 / r3.y;
  r3.z = 1.000000000e+000 + -r3.w;
  r3.z = r3.z * 9.679999948e-001 + 2.999999933e-002;
  r3.z = log2(r3.z);
  r3.z = 1.000000000e+001 / r3.z;
  r4.x = r3.z * r3.z;
  r3.z = r3.z * r3.z + 1.000000000e+000;
  r3.z = cb0[8].y * r3.z;
  r3.x = log2(r3.x);
  r4.x = r4.x * r3.x;
  r4.x = exp2(r4.x);
  r3.yz = r4.wx * r3.yz;
  r3.z = max(0.000000000e+000, r3.z);
  r3.y = r3.y * r3.z;
  r3.y = cb0[8].x * r3.y;
  r3.y = max(0.000000000e+000, r3.y);
  r1.w = r3.x * r1.w;
  r1.w = exp2(r1.w);
  r1.w = r1.w * r3.y;
  r3.xyz = cb0[6].xyz * r1.www;
  r1.w = 1.000000000e+000 + -r2.x;
  r4.x = r1.w * r1.w;
  r4.x = r4.x * r4.x;
  r1.w = r4.x * r1.w;
  r4.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r6.xyz;
  r4.xyz = r4.xyz * r1.www + r6.xyz;
  r1.w = saturate(cb0[15].x + r2.z);
  r2.zw = float2(1.000000e+000,1.000010e+000) + -r2.ww;
  r7.xy = r2.zw * r2.zw;
  r7.xy = r7.xy * r7.xy;
  r7.yz = r7.xy * r2.zw;
  r8.xyz = r1.www + -r6.xyz;
  r6.xyz = r7.yyy * r8.xyz + r6.xyz;
  r6.xyz = r9.xyz * r6.xyz;
  r3.xyz = r3.xyz * r4.xyz + r6.xyz;
  r1.w = dot(r2.xx, r2.xx);
  r1.w = r1.w * r3.w + -5.000000000e-001;
  r2.x = 1.000010014e+000 + -r4.w;
  r2.w = r2.x * r2.x;
  r2.w = r2.w * r2.w;
  r2.x = r2.x * r2.w;
  r2.x = r1.w * r2.x + 1.000000000e+000;
  r1.w = r1.w * r7.z + 1.000000000e+000;
  r1.w = r2.x * r1.w;
  r1.w = r1.w * r4.w;
  r4.xyz = r1.www * cb0[6].xyz + r5.xyz;
  r1.w = log2(r2.z);
  r1.w = cb0[20].x * r1.w;
  r1.w = 3.000000119e-001 * r1.w;
  r1.w = exp2(r1.w);
  r0.xyz = r4.xyz * r0.xyz + r3.xyz;
  r0.xyz = cb0[19].xyz * r1.www + r0.xyz;
  r0.w = log2(r0.w);
  r0.w = cb0[11].y * r0.w;
  r0.w = exp2(r0.w);
  r0.w = min(1.000000000e+000, r0.w);
  r0.w = r7.x * r7.x + r0.w;
  r0.w = min(1.000000000e+000, r0.w);
  r1.w = cb0[22].y + -cb0[22].x;
  r0.w = r0.w * r1.w + cb0[22].x;
  r0.w = r0.w * r2.y;
  r0.xyz = r0.xyz + -r1.xyz;
  o0.xyz = r0.www * r0.xyz + r1.xyz;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float       
// TEXCOORD                 1     zw        1     NONE   float       
// TEXCOORD                 2   xyzw        2     NONE   float   xyz 
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// TEXCOORD                 5   xyz         5     NONE   float   xyz 
// TEXCOORD                 6   xyzw        6     NONE   float   xy w
// COLOR                    0   xyzw        7     NONE   float   x   
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 9   xyzw        9     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[23], immediateIndexed
dcl_constantbuffer cb1[8], immediateIndexed
dcl_constantbuffer cb2[41], immediateIndexed
dcl_constantbuffer cb3[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyw
dcl_input_ps linear v7.x
dcl_input_ps linear v8.xyzw
dcl_input_ps linear v9.xyz
dcl_output o0.xyzw
dcl_temps 14
dp3 r0.x, v3.xyzx, v3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v3.xyzx
div r1.xy, v6.xyxx, v6.wwww
mul r0.w, cb1[5].x, -cb1[5].x
div r2.xy, v8.xyxx, v8.wwww
sample_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t0.yzwx, s3
mad r1.w, cb1[7].z, r1.w, cb1[7].w
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
add r1.w, r1.w, -cb1[5].y
max r1.w, r1.w, l(0.000000)
add r2.x, v8.z, -cb1[5].y
max r2.x, r2.x, l(0.000000)
div r2.y, r2.x, cb0[14].z
log r2.y, r2.y
mul r2.y, r2.y, cb0[14].w
exp r2.y, r2.y
min r2.y, r2.y, l(1.000000)
add r2.z, cb0[9].x, cb1[0].x
mul r2.w, r2.z, cb0[14].y
add r3.xyzw, v2.xzxz, l(0.200000, 0.200000, 0.100000, 0.100000)
mad r3.xy, r2.wwww, l(-0.100000, 0.000000, 0.000000, 0.000000), r3.xyxx
mad r3.xy, r3.xyxx, cb0[12].xyxx, cb0[12].zwzz
sample_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t1.ywxz, s4
mad r3.xy, r3.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r4.xy, r2.wwww, l(0.200000, -0.010000, 0.000000, 0.000000), v2.xzxx
mad r4.xy, r4.xyxx, cb0[12].xyxx, cb0[12].zwzz
sample_indexable(texture2d)(float,float,float,float) r4.xy, r4.xyxx, t1.ywxz, s4
mad r4.xy, r4.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.z, r2.z, cb0[17].z
mad r5.xyzw, r2.zzzz, l(0.100000, 0.100000, -0.100000, 0.100000), v2.xzxz
mad r4.zw, r5.xxxy, cb0[13].xxxy, cb0[13].zzzw
sample_indexable(texture2d)(float,float,float,float) r4.zw, r4.zwzz, t2.xzyw, s5
mad r4.zw, r4.wwwz, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mad r3.zw, r2.zzzz, l(0.000000, 0.000000, 0.100000, -0.100000), r3.zzzw
mad r3.zw, r3.zzzw, cb0[13].xxxy, cb0[13].zzzw
sample_indexable(texture2d)(float,float,float,float) r3.zw, r3.zwzz, t2.xzyw, s5
mad r3.zw, r3.wwwz, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
add r5.xy, r5.zwzz, l(0.300000, 0.300000, 0.000000, 0.000000)
mad r5.xy, r5.xyxx, cb0[13].xyxx, cb0[13].zwzz
sample_indexable(texture2d)(float,float,float,float) r5.xy, r5.xyxx, t2.ywxz, s5
mad r5.xy, r5.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r2.zw, r2.zzzz, l(0.000000, 0.000000, -0.100000, -0.100000), v2.xxxz
add r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.600000, 0.600000)
mad r2.zw, r2.zzzw, cb0[13].xxxy, cb0[13].zzzw
sample_indexable(texture2d)(float,float,float,float) r2.zw, r2.zwzz, t2.xzyw, s5
mad r2.zw, r2.wwwz, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r5.zw, r3.zzzw, r4.zzzw
mul r5.zw, r5.xxxy, r5.zzzw
mul r5.zw, r2.zzzw, r5.zzzw
mul r1.z, r0.w, r1.y
mad r1.xy, r1.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
mad r5.zw, r3.xxxy, r4.xxxy, r5.zzzw
mul r6.xy, r5.zwzz, cb0[14].xxxx
add r0.w, r2.y, l(0.100000)
mad r5.zw, -r5.zzzw, cb0[14].xxxx, l(0.000000, 0.000000, 0.010000, 0.010000)
mad r5.zw, r0.wwww, r5.zzzw, r6.xxxy
mul r5.zw, r2.yyyy, r5.zzzw
add r0.w, r1.w, -r2.x
mul_sat r1.zw, r0.wwww, l(0.000000, 0.000000, 0.200000, 100.000000)
mad r5.zw, r1.zzzz, r5.zzzw, l(0.000000, 0.000000, -0.010000, -0.010000)
mad r1.xy, r1.wwww, r5.zwzz, r1.xyxx
add r1.xy, r1.xyxx, l(0.010000, 0.010000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t3.xyzw, s2
add r6.xyz, -v2.xyzx, cb1[4].xyzx
dp3 r1.w, r6.xyzx, r6.xyzx
rsq r1.w, r1.w
mul r7.xyz, r1.wwww, r6.xyzx
add r3.xy, r3.xyxx, r4.xyxx
mul r8.xy, r3.xyxx, cb0[17].xxxx
mov r8.z, l(2.000000)
add r3.xy, r3.zwzz, r4.zwzz
add r3.xy, r5.xyxx, r3.xyxx
add r2.xz, r2.zzwz, r3.xxyx
mul r3.xy, r2.xzxx, cb0[17].yyyy
mov r3.zw, l(0,0,0,1.000000)
mad r2.xzw, v7.xxxx, r3.xxyz, l(0.000000, 0.000000, 0.000000, 1.000000)
mul r2.xzw, r2.xxzw, l(-1.000000, 0.000000, -1.000000, 1.000000)
dp3 r3.z, r8.xyzx, r2.xzwx
mul r3.xy, r3.zzzz, r8.xyxx
mad r2.xzw, r3.xxyz, l(0.500000, 0.000000, 0.500000, 1.000000), -r2.xxzw
mul r3.xyz, r2.zzzz, v5.xyzx
mad r3.xyz, r2.xxxx, v4.xyzx, r3.xyzx
mad r2.xzw, r2.wwww, r0.xxyz, r3.xxyz
dp3 r3.x, r2.xzwx, r2.xzwx
rsq r3.x, r3.x
mul r3.xyz, r2.xzwx, r3.xxxx
dp3 r2.x, cb2[0].xyzx, cb2[0].xyzx
rsq r2.x, r2.x
mul r2.xzw, r2.xxxx, cb2[0].xxyz
mad r4.xyz, r6.xyzx, r1.wwww, r2.xzwx
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx
mad r1.w, cb0[15].x, l(10.000000), l(1.000000)
exp r1.w, r1.w
dp4 r5.x, cb2[38].xyzw, r3.xyzw
dp4 r5.y, cb2[39].xyzw, r3.xyzw
dp4 r5.z, cb2[40].xyzw, r3.xyzw
add r5.xyz, r5.xyzx, v9.xyzx
dp3 r3.w, -r7.xyzx, r3.xyzx
add r3.w, r3.w, r3.w
mad r6.xyz, r3.xyzx, -r3.wwww, -r7.xyzx
lt r3.w, l(0.000000), cb3[2].w
if_nz r3.w
  dp3 r3.w, r6.xyzx, r6.xyzx
  rsq r3.w, r3.w
  mul r8.xyz, r3.wwww, r6.xyzx
  add r9.xyz, -v2.xyzx, cb3[0].xyzx
  div r9.xyz, r9.xyzx, r8.xyzx
  add r10.xyz, -v2.xyzx, cb3[1].xyzx
  div r10.xyz, r10.xyzx, r8.xyzx
  lt r11.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r8.xyzx
  movc r9.xyz, r11.xyzx, r9.xyzx, r10.xyzx
  min r3.w, r9.y, r9.x
  min r3.w, r9.z, r3.w
  add r9.xyz, cb3[0].xyzx, cb3[1].xyzx
  mad r10.xyz, r9.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb3[2].xyzx
  add r10.xyz, r10.xyzx, v2.xyzx
  mad r8.xyz, r8.xyzx, r3.wwww, r10.xyzx
  mad r8.xyz, -r9.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r8.xyzx
else 
  mov r8.xyz, r6.xyzx
endif 
add r3.w, -cb0[15].x, l(1.000000)
log r4.w, r3.w
mul r4.w, r4.w, l(0.750000)
exp r4.w, r4.w
mul r4.w, r4.w, l(7.000000)
sample_l_indexable(texturecube)(float,float,float,float) r8.xyzw, r8.xyzx, t4.xyzw, s0, r4.w
log r5.w, r8.w
mul r5.w, r5.w, cb3[3].y
exp r5.w, r5.w
mul r5.w, r5.w, cb3[3].x
mul r9.xyz, r8.xyzx, r5.wwww
lt r6.w, cb3[1].w, l(0.999990)
if_nz r6.w
  lt r6.w, l(0.000000), cb3[6].w
  if_nz r6.w
    dp3 r6.w, r6.xyzx, r6.xyzx
    rsq r6.w, r6.w
    mul r10.xyz, r6.wwww, r6.xyzx
    add r11.xyz, -v2.xyzx, cb3[4].xyzx
    div r11.xyz, r11.xyzx, r10.xyzx
    add r12.xyz, -v2.xyzx, cb3[5].xyzx
    div r12.xyz, r12.xyzx, r10.xyzx
    lt r13.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
    movc r11.xyz, r13.xyzx, r11.xyzx, r12.xyzx
    min r6.w, r11.y, r11.x
    min r6.w, r11.z, r6.w
    add r11.xyz, cb3[4].xyzx, cb3[5].xyzx
    mad r12.xyz, r11.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb3[6].xyzx
    add r12.xyz, r12.xyzx, v2.xyzx
    mad r10.xyz, r10.xyzx, r6.wwww, r12.xyzx
    mad r6.xyz, -r11.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r10.xyzx
  endif 
  sample_l_indexable(texturecube)(float,float,float,float) r6.xyzw, r6.xyzx, t5.xyzw, s1, r4.w
  log r4.w, r6.w
  mul r4.w, r4.w, cb3[7].y
  exp r4.w, r4.w
  mul r4.w, r4.w, cb3[7].x
  mul r6.xyz, r6.xyzx, r4.wwww
  mad r8.xyz, r5.wwww, r8.xyzx, -r6.xyzx
  mad r9.xyz, cb3[1].wwww, r8.xyzx, r6.xyzx
endif 
dp3 r4.w, r3.xyzx, r2.xzwx
max r4.w, r4.w, l(0.000000)
dp3 r2.x, r2.xzwx, r4.xyzx
mul r0.w, r0.w, cb0[11].x
mov_sat r2.z, r0.w
add r6.xyz, cb0[16].xyzx, -cb0[21].xyzx
mad r6.xyz, r2.zzzz, r6.xyzx, cb0[21].xyzx
dp3 r0.x, r0.xyzx, r7.xyzx
add r8.xyz, v2.xyzx, -cb1[4].xyzx
dp3 r0.y, r8.xyzx, r8.xyzx
sqrt r0.y, r0.y
div r0.y, r0.y, cb0[18].x
add r0.y, -r0.y, l(1.000000)
mul_sat r0.x, r0.y, r0.x
add r8.xyz, -r6.xyzx, cb0[10].xyzx
mad r0.xyz, r0.xxxx, r8.xyzx, r6.xyzx
add r0.xyz, r0.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
mad r0.xyz, r2.yyyy, r0.xyzx, l(-0.100000, -0.100000, -0.100000, 0.000000)
add r6.xyz, r0.xyzx, -cb0[2].xyzx
mad r6.xyz, cb0[22].zzzz, r6.xyzx, cb0[2].xyzx
mad r2.z, -cb0[22].z, cb0[2].w, cb0[2].w
mul r0.xyz, r0.xyzx, r2.zzzz
add r2.z, -r2.z, l(1.000000)
dp3 r2.w, r3.xyzx, r7.xyzx
max r2.xw, r2.xxxw, l(0.000000, 0.000000, 0.000000, 0.000000)
dp3 r3.x, r3.xyzx, r4.xyzx
max r3.x, r3.x, l(0.000000)
mul r3.y, r3.w, r3.w
mul r3.z, r3.y, cb0[8].w
mad r3.y, -r3.y, cb0[8].w, l(1.000000)
mad r4.x, r4.w, r3.y, r3.z
mad r3.y, r2.w, r3.y, r3.z
mad r3.y, r4.x, r3.y, l(0.000100)
div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
add r3.z, -r3.w, l(1.000000)
mad r3.z, r3.z, l(0.968000), l(0.030000)
log r3.z, r3.z
div r3.z, l(10.000000), r3.z
mul r4.x, r3.z, r3.z
mad r3.z, r3.z, r3.z, l(1.000000)
mul r3.z, r3.z, cb0[8].y
log r3.x, r3.x
mul r4.x, r3.x, r4.x
exp r4.x, r4.x
mul r3.yz, r3.yyzy, r4.wwxw
max r3.z, r3.z, l(0.000000)
mul r3.y, r3.z, r3.y
mul r3.y, r3.y, cb0[8].x
max r3.y, r3.y, l(0.000000)
mul r1.w, r1.w, r3.x
exp r1.w, r1.w
mul r1.w, r3.y, r1.w
mul r3.xyz, r1.wwww, cb0[6].xyzx
add r1.w, -r2.x, l(1.000000)
mul r4.x, r1.w, r1.w
mul r4.x, r4.x, r4.x
mul r1.w, r1.w, r4.x
add r4.xyz, -r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r4.xyz, r4.xyzx, r1.wwww, r6.xyzx
add_sat r1.w, r2.z, cb0[15].x
add r2.zw, -r2.wwww, l(0.000000, 0.000000, 1.000000, 1.000010)
mul r7.xy, r2.zwzz, r2.zwzz
mul r7.xy, r7.xyxx, r7.xyxx
mul r7.yz, r2.zzwz, r7.xxyx
add r8.xyz, -r6.xyzx, r1.wwww
mad r6.xyz, r7.yyyy, r8.xyzx, r6.xyzx
mul r6.xyz, r6.xyzx, r9.xyzx
mad r3.xyz, r3.xyzx, r4.xyzx, r6.xyzx
dp2 r1.w, r2.xxxx, r2.xxxx
mad r1.w, r1.w, r3.w, l(-0.500000)
add r2.x, -r4.w, l(1.000010)
mul r2.w, r2.x, r2.x
mul r2.w, r2.w, r2.w
mul r2.x, r2.w, r2.x
mad r2.x, r1.w, r2.x, l(1.000000)
mad r1.w, r1.w, r7.z, l(1.000000)
mul r1.w, r1.w, r2.x
mul r1.w, r4.w, r1.w
mad r4.xyz, r1.wwww, cb0[6].xyzx, r5.xyzx
log r1.w, r2.z
mul r1.w, r1.w, cb0[20].x
mul r1.w, r1.w, l(0.300000)
exp r1.w, r1.w
mad r0.xyz, r4.xyzx, r0.xyzx, r3.xyzx
mad r0.xyz, cb0[19].xyzx, r1.wwww, r0.xyzx
log r0.w, r0.w
mul r0.w, r0.w, cb0[11].y
exp r0.w, r0.w
min r0.w, r0.w, l(1.000000)
mad r0.w, r7.x, r7.x, r0.w
min r0.w, r0.w, l(1.000000)
add r1.w, -cb0[22].x, cb0[22].y
mad r0.w, r0.w, r1.w, cb0[22].x
mul r0.w, r2.y, r0.w
add r0.xyz, -r1.xyzx, r0.xyzx
mad o0.xyz, r0.wwww, r0.xyzx, r1.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
