//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.31 on Wed Mar 02 08:06:54 2016
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4x4 InvProjectionMatrix;      // Offset:    0 Size:    64 [unused]
//   float4x4 InvViewMatrix;            // Offset:   64 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  128 Size:    64 [unused]
//   float4x4 ViewMatrix;               // Offset:  192 Size:    64 [unused]
//   float4x4 ViewProjectionMatrix;     // Offset:  256 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  320 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix_Previous;// Offset:  384 Size:    64 [unused]
//   float4 AmbientSHR;                 // Offset:  448 Size:    16 [unused]
//   float4 AmbientSHG;                 // Offset:  464 Size:    16 [unused]
//   float4 AmbientSHB;                 // Offset:  480 Size:    16 [unused]
//   float4 CameraDistances;            // Offset:  496 Size:    16
//   float4 CameraNearPlaneSize;        // Offset:  512 Size:    16 [unused]
//   float4 DepthScale;                 // Offset:  528 Size:    16 [unused]
//   float4 DepthTextureScaleOffset;    // Offset:  544 Size:    16 [unused]
//   float4 FogParams;                  // Offset:  560 Size:    16 [unused]
//   float4 FogSHB;                     // Offset:  576 Size:    16 [unused]
//   float4 FogSHG;                     // Offset:  592 Size:    16 [unused]
//   float4 FogSHR;                     // Offset:  608 Size:    16 [unused]
//   float4 HeightFogParams;            // Offset:  624 Size:    16 [unused]
//   float4 ViewportSize;               // Offset:  640 Size:    16 [unused]
//   float3 ViewPoint;                  // Offset:  656 Size:    12 [unused]
//   float3 CameraPosition;             // Offset:  672 Size:    12
//   float3 CameraPosition_Previous;    // Offset:  688 Size:    12 [unused]
//   float3 CameraPositionFractions;    // Offset:  704 Size:    12 [unused]
//   float3 CameraPositionFractions_Previous;// Offset:  720 Size:    12 [unused]
//   float3 CameraRight;                // Offset:  736 Size:    12 [unused]
//   float3 CameraUp;                   // Offset:  752 Size:    12 [unused]
//   float3 CameraDirection;            // Offset:  768 Size:    12 [unused]
//   float3 EnvironmentMapColorOffset;  // Offset:  784 Size:    12 [unused]
//   float3 EnvironmentMapColorScale;   // Offset:  800 Size:    12 [unused]
//   float3 AmbientOcclusionRanges;     // Offset:  816 Size:    12 [unused]
//   float3 DepthTextureRcpSize;        // Offset:  832 Size:    12 [unused]
//   float2 MotionVectorOffsets;        // Offset:  848 Size:     8 [unused]
//   float2 DepthRangeCompression;      // Offset:  856 Size:     8 [unused]
//   float ShadowProjDepthMinValue;     // Offset:  864 Size:     4 [unused]
//   float DistanceScale;               // Offset:  868 Size:     4 [unused]
//   float WorldSpaceZOffset;           // Offset:  872 Size:     4 [unused]
//   float WorldSpaceZOffset_Previous;  // Offset:  876 Size:     4 [unused]
//   float CameraFOVDeg;                // Offset:  880 Size:     4 [unused]
//   float EffectsEmissiveEVBias;       // Offset:  884 Size:     4 [unused]
//   float ShadowCSMLastSliceIndex;     // Offset:  888 Size:     4 [unused]
//   float UseNormalization;            // Offset:  892 Size:     4 [unused]
//   float FogUndergroundColorScale;    // Offset:  896 Size:     4 [unused]
//
// }
//
// cbuffer CVolumetricFogProvider
// {
//
//   float4 VFSampleDistribution[4];    // Offset:    0 Size:    64 [unused]
//   float4x4 VPrevWorldToVolumetricShadowMatrix;// Offset:   64 Size:    64 [unused]
//   float4x4 VFInvViewMatrix;          // Offset:  128 Size:    64 [unused]
//   float4 VFDepthDistribution;        // Offset:  192 Size:    16
//   float4 VFDepthParams;              // Offset:  208 Size:    16 [unused]
//   float4 VFFogDensityBottom;         // Offset:  224 Size:    16 [unused]
//   float4 VFFogDensityTop;            // Offset:  240 Size:    16 [unused]
//   float4 VFFogParams0;               // Offset:  256 Size:    16
//   float4 VFFogParams1;               // Offset:  272 Size:    16 [unused]
//   float4 VFFogParams2;               // Offset:  288 Size:    16
//   float4 VFFogParams3;               // Offset:  304 Size:    16 [unused]
//   float4 VFShadowParams;             // Offset:  320 Size:    16 [unused]
//   float4 VFViewDirReconstruction;    // Offset:  336 Size:    16
//   int4 VFCellParams;                 // Offset:  352 Size:    16
//   float3 VFCameraXAxis;              // Offset:  368 Size:    12
//   float3 VFCameraYAxis;              // Offset:  384 Size:    12
//   float3 VFCameraZAxis;              // Offset:  400 Size:    12
//   float4 VFTemporalParams;           // Offset:  416 Size:    16 [unused]
//
// }
//
// cbuffer CTileLightingBlendedParameterProvider
// {
//
//   float4 CSMSlice0_0;                // Offset:    0 Size:    16 [unused]
//   float4 CSMSlice0_1;                // Offset:   16 Size:    16 [unused]
//   float4 CSMSlice0_2;                // Offset:   32 Size:    16 [unused]
//   float4 CSMSlice1_0;                // Offset:   48 Size:    16 [unused]
//   float4 CSMSlice1_1;                // Offset:   64 Size:    16 [unused]
//   float4 CSMSlice1_2;                // Offset:   80 Size:    16 [unused]
//   float4 CSMSlice2_0;                // Offset:   96 Size:    16 [unused]
//   float4 CSMSlice2_1;                // Offset:  112 Size:    16 [unused]
//   float4 CSMSlice2_2;                // Offset:  128 Size:    16 [unused]
//   float4 CSMSliceFade;               // Offset:  144 Size:    16 [unused]
//   float4 ShadowMapSize;              // Offset:  160 Size:    16 [unused]
//   float4 SunColor;                   // Offset:  176 Size:    16 [unused]
//   float4 SunDirection;               // Offset:  192 Size:    16 [unused]
//   int2 NumTiles;                     // Offset:  208 Size:     8
//   int LightCount;                    // Offset:  216 Size:     4 [unused]
//   int ParticlesSmallBufferFactor;    // Offset:  220 Size:     4 [unused]
//
// }
//
// Resource bind info for LightsLightingData
// {
//
//   struct LightingData
//   {
//       
//       float4 pos;                    // Offset:    0
//       float4 color;                  // Offset:   16
//       float4 direction;              // Offset:   32
//       float attenuation;             // Offset:   48
//       float2 spotFactors;            // Offset:   52
//       uint flags;                    // Offset:   60
//       float4 clippingInfo;           // Offset:   64
//       float4 clipPlanes[3];          // Offset:   80
//
//   } $Element;                        // Offset:    0 Size:   128
//
// }
//
// Resource bind info for LightIndicesPerTileForBlended
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for LightOutputPerTileForBlended
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// VFMaxDepthDiv2Texture             texture   float          2d    0        1
// LightsLightingData                texture  struct         r/o    1        1
// LightIndicesPerTileForBlended     texture  struct         r/o    2        1
// LightOutputPerTileForBlended      texture  struct         r/o    3        1
// VFOutputBufferRGB                     UAV  float3          3d    0        1
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// CVolumetricFogProvider            cbuffer      NA          NA    1        1
// CTileLightingBlendedParameterProvider    cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[43], immediateIndexed
dcl_constantbuffer cb1[26], immediateIndexed
dcl_constantbuffer cb2[14], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_structured t1, 128 
dcl_resource_structured t2, 4 
dcl_resource_structured t3, 4 
dcl_uav_typed_texture3d (float,float,float,float) u0
dcl_input vThreadGroupID.xyz
dcl_input vThreadIDInGroup.xyz
dcl_temps 14
dcl_thread_group 2, 2, 64
imad r0.xy, vThreadGroupID.xyxx, l(2, 2, 0, 0), vThreadIDInGroup.xyxx
ult r1.xy, r0.xyxx, cb1[22].xyxx
and r1.x, r1.y, r1.x
if_nz r1.x
  imad r0.zw, vThreadGroupID.zzzz, l(0, 0, 64, 64), vThreadIDInGroup.zzzz
  iadd r1.xy, cb1[22].xyxx, l(-1, -1, 0, 0)
  umin r1.xy, r0.xyxx, r1.xyxx
  mov r1.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r1.x, r1.xyzw, t0.xyzw
  mad r1.x, r1.x, cb0[31].y, -cb1[12].w
  div r1.x, r1.x, cb1[12].z
  log r1.x, r1.x
  mul r1.x, r1.x, l(0.250000)
  ushr r1.y, cb1[22].z, l(1)
  utof r1.y, r1.y
  mad r1.x, r1.x, r1.y, l(1.000000)
  ftou r1.x, r1.x
  uge r1.x, r1.x, r0.w
  if_nz r1.x
    utof r1.xzw, r0.xxyw
    add r1.xz, r1.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000)
    itof r2.xy, cb1[22].xyxx
    div r1.xz, r1.xxzx, r2.xxyx
    mad r1.xz, r1.xxzx, l(2.000000, 0.000000, 2.000000, 0.000000), l(-1.000000, 0.000000, -1.000000, 0.000000)
    mul r1.xz, r1.zzxz, cb1[21].yyxy
    mul r1.x, r1.x, l(-1.000000)
    mul r2.xyz, r1.xxxx, cb1[24].xyzx
    mad r2.xyz, r1.zzzz, cb1[23].xyzx, r2.xyzx
    add r2.xyz, r2.xyzx, cb1[25].xyzx
    dp3 r1.x, r2.xyzx, r2.xyzx
    rsq r1.x, r1.x
    mul r3.xyz, r1.xxxx, r2.xyzx
    iadd r1.x, r0.w, l(1)
    utof r1.x, r1.x
    div r1.x, r1.x, r1.y
    mul r1.x, r1.x, l(4.000000)
    exp r1.x, r1.x
    mad r1.x, r1.x, cb1[12].z, cb1[12].w
    div r1.y, r1.w, r1.y
    mul r1.y, r1.y, l(4.000000)
    exp r1.y, r1.y
    mad r1.y, r1.y, cb1[12].z, cb1[12].w
    add r1.x, r1.y, r1.x
    mul r1.x, r1.x, l(0.500000)
    mad r1.yzw, r2.xxyz, r1.xxxx, cb0[42].xxyz
    imad r2.xyzw, r0.xyxy, cb1[22].wwww, l(4, 4, 12, 4)
    ushr r2.xyzw, r2.xyzw, l(3, 3, 3, 3)
    imad r2.xy, r2.ywyy, cb2[13].xxxx, r2.xzxx
    imad r4.xyzw, r0.xyxy, cb1[22].wwww, l(4, 12, 12, 12)
    ushr r4.xyzw, r4.xyzw, l(3, 3, 3, 3)
    imad r2.zw, r4.yyyw, cb2[13].xxxx, r4.xxxz
    ishl r4.xy, r2.xyxx, l(1, 1, 0, 0)
    ishl r2.yz, r2.zzwz, l(0, 1, 1, 0)
    mov r4.zw, l(0,0,0,0)
    mov r2.w, l(0)
    loop 
      uge r3.w, r2.w, l(2)
      breakc_nz r3.w
      iadd r5.xy, r4.xyxx, r2.wwww
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.w, r5.x, l(0), t2.xxxx
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.x, r5.y, l(0), t2.xxxx
      or r3.w, r3.w, r5.x
      iadd r5.xy, r2.yzyy, r2.wwww
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.x, r5.x, l(0), t2.xxxx
      or r3.w, r3.w, r5.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.x, r5.y, l(0), t2.xxxx
      or r3.w, r3.w, r5.x
      movc r4.z, r2.w, r4.z, r3.w
      ieq r5.x, r2.w, l(1)
      movc r4.w, r5.x, r3.w, r4.w
      iadd r2.w, r2.w, l(1)
    endloop 
    countbits r2.yz, r4.zzwz
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r2.x, r2.x, l(0), t3.xxxx
    and r2.x, r2.x, l(0x80000000)
    mul_sat r1.x, r1.x, cb1[18].y
    mul r1.x, r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mul r2.w, cb1[16].y, l(0.500000)
    mad r3.w, -r2.w, r2.w, l(1.000000)
    mad r2.w, r2.w, r2.w, l(1.000000)
    mov r5.xyz, l(0,0,0,0)
    mov r4.x, r4.z
    mov r4.y, l(0)
    loop 
      uge r5.w, r4.y, r2.y
      breakc_nz r5.w
      firstbit_lo r5.w, r4.x
      ishl r6.x, l(1), r5.w
      not r6.x, r6.x
      and r6.x, r4.x, r6.x
      ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r6.yzw, r5.w, l(0), t1.xxyz
      ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r7.xyzw, r5.w, l(16), t1.xyzw
      ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r8.xyz, r5.w, l(32), t1.xyzx
      ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r9.xyzw, r5.w, l(48), t1.xyzw
      and r8.w, r9.w, l(1)
      ult r8.w, l(0), r8.w
      add r6.yzw, -r1.yyzw, r6.yyzw
      dp3 r9.w, r6.yzwy, r6.yzwy
      max r9.w, r9.w, l(0.000010)
      rsq r10.x, r9.w
      div r10.y, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
      min r7.w, r7.w, r10.y
      mul r6.yzw, r6.yyzw, r10.xxxx
      mul r9.w, r9.w, r9.w
      mad_sat r9.x, -r9.w, r9.x, l(1.000000)
      mul r9.x, r9.x, r9.x
      mul r7.w, r7.w, r9.x
      dp3 r8.x, r6.yzwy, -r8.xyzx
      mad_sat r8.x, r8.x, r9.y, r9.z
      movc r8.x, r8.w, r8.x, l(1.000000)
      mul r8.x, r8.x, r8.x
      mul r7.w, r7.w, r8.x
      if_nz r2.x
        ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r8.xyzw, r5.w, l(72), t1.xyzw
        ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r9.xyzw, r5.w, l(88), t1.zwxy
        ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r10.xyzw, r5.w, l(104), t1.xyzw
        ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r11.xy, r5.w, l(120), t1.xyxx
        ftoi r5.w, r8.y
        mov r12.xy, r8.zwzz
        mov r12.z, r9.z
        dp3 r8.y, r12.xyzx, r1.yzwy
        mad_sat r8.y, r8.y, r8.x, -r9.w
        mov r9.z, r10.x
        dp3 r8.z, r9.xyzx, r1.yzwy
        mad_sat r8.z, r8.z, r8.x, -r10.y
        mul r8.y, r8.z, r8.y
        mov r11.zw, r10.zzzw
        dp3 r8.z, r11.zwxz, r1.yzwy
        mad_sat r8.x, r8.z, r8.x, -r11.y
        mul r8.x, r8.x, r8.y
        mul r8.y, r8.x, r8.x
        mad r8.x, -r8.x, l(2.000000), l(3.000000)
        mul r8.x, r8.x, r8.y
        movc r5.w, r5.w, r8.x, l(1.000000)
        mul r7.w, r5.w, r7.w
      endif 
      mul r5.w, r1.x, r7.w
      lt r7.w, r5.w, l(0.000100)
      iadd r8.x, r4.y, -r7.w
      mov r4.x, r6.x
      mov r4.y, r8.x
      continuec_nz r7.w
      dp3 r6.y, r6.yzwy, r3.xyzx
      mad r6.y, -cb1[16].y, r6.y, r2.w
      log r6.y, |r6.y|
      mul r6.y, r6.y, l(1.500000)
      exp r6.y, r6.y
      div r6.y, r3.w, r6.y
      mul r6.y, r6.y, l(0.785398185)
      mul r7.xyz, r7.xyzx, r5.wwww
      mul r7.xyz, r7.xyzx, cb1[18].xxxx
      mad r5.xyz, r7.xyzx, r6.yyyy, r5.xyzx
      iadd r4.y, r4.y, l(1)
      mov r4.x, r6.x
    endloop 
    mov r4.xyz, r5.xyzx
    mov r2.y, r4.w
    mov r5.w, l(0)
    loop 
      uge r6.x, r5.w, r2.z
      breakc_nz r6.x
      firstbit_lo r6.x, r2.y
      ishl r6.y, l(1), r6.x
      not r6.y, r6.y
      and r6.y, r2.y, r6.y
      iadd r6.x, l(32), r6.x
      ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r7.xyz, r6.x, l(0), t1.xyzx
      ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r8.xyzw, r6.x, l(16), t1.xyzw
      ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r9.xyz, r6.x, l(32), t1.xyzx
      ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r10.xyzw, r6.x, l(48), t1.xyzw
      and r6.z, r10.w, l(1)
      ult r6.z, l(0), r6.z
      add r7.xyz, -r1.yzwy, r7.xyzx
      dp3 r6.w, r7.xyzx, r7.xyzx
      max r6.w, r6.w, l(0.000010)
      rsq r7.w, r6.w
      div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
      min r8.w, r8.w, r9.w
      mul r7.xyz, r7.wwww, r7.xyzx
      mul r6.w, r6.w, r6.w
      mad_sat r6.w, -r6.w, r10.x, l(1.000000)
      mul r6.w, r6.w, r6.w
      mul r6.w, r6.w, r8.w
      dp3 r7.w, r7.xyzx, -r9.xyzx
      mad_sat r7.w, r7.w, r10.y, r10.z
      movc r6.z, r6.z, r7.w, l(1.000000)
      mul r6.z, r6.z, r6.z
      mul r6.z, r6.w, r6.z
      if_nz r2.x
        ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r9.xyzw, r6.x, l(72), t1.xyzw
        ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r10.xyzw, r6.x, l(88), t1.zwxy
        ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r11.xyzw, r6.x, l(104), t1.xyzw
        ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r12.xy, r6.x, l(120), t1.xyxx
        ftoi r6.x, r9.y
        mov r13.xy, r9.zwzz
        mov r13.z, r10.z
        dp3 r6.w, r13.xyzx, r1.yzwy
        mad_sat r6.w, r6.w, r9.x, -r10.w
        mov r10.z, r11.x
        dp3 r7.w, r10.xyzx, r1.yzwy
        mad_sat r7.w, r7.w, r9.x, -r11.y
        mul r6.w, r6.w, r7.w
        mov r12.zw, r11.zzzw
        dp3 r7.w, r12.zwxz, r1.yzwy
        mad_sat r7.w, r7.w, r9.x, -r12.y
        mul r6.w, r6.w, r7.w
        mul r7.w, r6.w, r6.w
        mad r6.w, -r6.w, l(2.000000), l(3.000000)
        mul r6.w, r6.w, r7.w
        movc r6.x, r6.x, r6.w, l(1.000000)
        mul r6.z, r6.x, r6.z
      endif 
      mul r6.x, r1.x, r6.z
      lt r6.z, r6.x, l(0.000100)
      iadd r6.w, r5.w, -r6.z
      mov r2.y, r6.y
      mov r5.w, r6.w
      continuec_nz r6.z
      dp3 r6.z, r7.xyzx, r3.xyzx
      mad r6.z, -cb1[16].y, r6.z, r2.w
      log r6.z, |r6.z|
      mul r6.z, r6.z, l(1.500000)
      exp r6.z, r6.z
      div r6.z, r3.w, r6.z
      mul r6.z, r6.z, l(0.785398185)
      mul r7.xyz, r8.xyzx, r6.xxxx
      mul r7.xyz, r7.xyzx, cb1[18].xxxx
      mad r4.xyz, r7.xyzx, r6.zzzz, r4.xyzx
      iadd r5.w, r5.w, l(1)
      mov r2.y, r6.y
    endloop 
    mul r1.xyz, r4.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000)
  else 
    mov r1.xyz, l(0,0,0,0)
  endif 
  store_uav_typed u0.xyzw, r0.xyzw, r1.xyzx
endif 
ret 
// Approximately 239 instruction slots used