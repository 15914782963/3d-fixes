// hlsltool.py -i --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe edf92da1ab770dab-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.31 on Wed Mar 02 07:36:19 2016

cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4x4 InvProjectionMatrix : packoffset(c0);
  float4x4 InvViewMatrix : packoffset(c4);
  float4x4 ProjectionMatrix : packoffset(c8);
  float4x4 ViewMatrix : packoffset(c12);
  float4x4 ViewProjectionMatrix : packoffset(c16);
  float4x4 ViewRotProjectionMatrix : packoffset(c20);
  float4x4 ViewRotProjectionMatrix_Previous : packoffset(c24);
  float4 AmbientSHR : packoffset(c28);
  float4 AmbientSHG : packoffset(c29);
  float4 AmbientSHB : packoffset(c30);
  float4 CameraDistances : packoffset(c31);
  float4 CameraNearPlaneSize : packoffset(c32);
  float4 DepthScale : packoffset(c33);
  float4 DepthTextureScaleOffset : packoffset(c34);
  float4 FogParams : packoffset(c35);
  float4 FogSHB : packoffset(c36);
  float4 FogSHG : packoffset(c37);
  float4 FogSHR : packoffset(c38);
  float4 HeightFogParams : packoffset(c39);
  float4 ViewportSize : packoffset(c40);
  float3 ViewPoint : packoffset(c41);
  float3 CameraPosition : packoffset(c42);
  float3 CameraPosition_Previous : packoffset(c43);
  float3 CameraPositionFractions : packoffset(c44);
  float3 CameraPositionFractions_Previous : packoffset(c45);
  float3 CameraRight : packoffset(c46);
  float3 CameraUp : packoffset(c47);
  float3 CameraDirection : packoffset(c48);
  float3 EnvironmentMapColorOffset : packoffset(c49);
  float3 EnvironmentMapColorScale : packoffset(c50);
  float3 AmbientOcclusionRanges : packoffset(c51);
  float3 DepthTextureRcpSize : packoffset(c52);
  float2 MotionVectorOffsets : packoffset(c53);
  float2 DepthRangeCompression : packoffset(c53.z);
  float ShadowProjDepthMinValue : packoffset(c54);
  float DistanceScale : packoffset(c54.y);
  float WorldSpaceZOffset : packoffset(c54.z);
  float WorldSpaceZOffset_Previous : packoffset(c54.w);
  float CameraFOVDeg : packoffset(c55);
  float EffectsEmissiveEVBias : packoffset(c55.y);
  float ShadowCSMLastSliceIndex : packoffset(c55.z);
  float UseNormalization : packoffset(c55.w);
  float FogUndergroundColorScale : packoffset(c56);
}

cbuffer CUserClipPlaneParameterProvider : register(b1)
{
  float4 UserClipPlane : packoffset(c0);
}

cbuffer CSceneTerrainSkyOcclusionAtlasPrivateData : register(b2)
{
  float4 SectorOcclusion_OffsetScale : packoffset(c0);
  float3 SectorOcclusion_DistanceFade : packoffset(c1);
  float2 SectorOcclusion_HeightOffsetScale : packoffset(c2);
}

cbuffer CAmbientProvider : register(b3)
{
  float4 CascadeDistanceScales[5] : packoffset(c0);
  float4 CascadeNearFarSnappedOffsetCamera[5] : packoffset(c5);
  float4 CascadeNearFarRcpUVSize[5] : packoffset(c10);
  float4 UndergroundSHR : packoffset(c15);
  float4 UndergroundSHG : packoffset(c16);
  float4 UndergroundSHB : packoffset(c17);
  float InvUndergroundBlendEndHeight : packoffset(c18);
  float IndirectLightingScale : packoffset(c18.y);
}

cbuffer CWaterCameraPlaneParameterProvider : register(b4)
{
  float4 QuadParams : packoffset(c0);
  float4 UnderwaterCaustics : packoffset(c1);
  float4 UnderwaterExtinctions : packoffset(c2);
  float3 UnderwaterColorDeep : packoffset(c3);
  float3 UnderwaterColorShallow : packoffset(c4);
  float CausticsIntensity : packoffset(c4.w);
  float WaterLevel : packoffset(c5);
}

cbuffer CSceneParticleEmitterRendererParameterProvider : register(b5)
{
  float4 DebugColor : packoffset(c0);
  float4 FarSoftDistanceRange_oneOverSoftRange : packoffset(c1);
  float4 NearFadeDistanceParams : packoffset(c2);
  float4 SHCoeffB : packoffset(c3);
  float4 SHCoeffG : packoffset(c4);
  float4 SHCoeffR : packoffset(c5);
  float4 SoftClipPlane : packoffset(c6);
  float2 EmitterAttributes : packoffset(c7);
  float2 UVNormalScale : packoffset(c7.z);
  float3 EmitterWorldPos : packoffset(c8);
  bool AlphaInRedChannel : packoffset(c8.w);
  float3 LightColorUpNormalUnderwater : packoffset(c9);
}

SamplerState SectorHemiMapSamplerStateLinear_s : register(s0);
Texture2D<float4> SectorOcclusion_HeightTexture__TexObj__ : register(t0);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : position0,
  float4 v1 : color0,
  float2 v2 : texcoord0,
  float v3 : texcoord1,
  float4 v4 : normal0,
  out float4 o0 : SV_Position0,
  out float o1 : SV_ClipDistance0,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD1,
  out float4 o4 : TEXCOORD2,
  out float4 o5 : TEXCOORD3,
  out float4 o6 : TEXCOORD4,
  out float4 o7 : TEXCOORD5,
  out float3 o8 : TEXCOORD6)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.xyz = CameraPosition.xyz + -v0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = sqrt(r0.w);
  r1.xyz = r0.xyz / r0.www;
  r0.w = -2000 + r0.w;
  r0.w = saturate(0.00033333333 * r0.w);
  r0.w = 250 * r0.w;
  r1.xyz = r1.xyz * r0.www + v0.xyz;
  r2.xyz = -CameraPosition.xyz + r1.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r1.xyz = r2.xyz * WorldSpaceZOffset + r1.xyz;
  r1.xyz = -CameraPosition.xyz + r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r1.w = sqrt(r0.w);
  r2.x = -DepthRangeCompression.x + r1.w;
  r2.x = max(0, r2.x);
  r1.w = -r2.x + r1.w;
  r1.w = r2.x * DepthRangeCompression.y + r1.w;
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = r1.xyz * r1.www;
  r1.xyz = r1.xyz * r1.www + CameraPosition.xyz;
  r2.w = 1;
  r3.x = dot(r2.xyzw, ViewRotProjectionMatrix._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, ViewRotProjectionMatrix._m01_m11_m21_m31);
  o0.z = dot(r2.xyzw, ViewRotProjectionMatrix._m02_m12_m22_m32);
  r3.w = dot(r2.xyzw, ViewRotProjectionMatrix._m03_m13_m23_m33);
  r0.x = dot(r0.xyz, -CameraDirection.xyz);
  r0.x = -CameraDistances.x + r0.x;
  r0.xy = -NearFadeDistanceParams.xz + r0.xx;
  r0.xy = saturate(r0.xy / NearFadeDistanceParams.yw);
  o6.w = 1 + -r0.y;
  r0.yz = cmp(float2(0,0) < HeightFogParams.zw);
  r0.y = r0.z ? r0.y : 0;
  if (r0.y != 0) {
    o2.xyzw = float4(0,0,0,0);
  } else {
    r0.y = dot(r2.xyz, r2.xyz);
    r0.z = rsqrt(r0.y);
    r4.yzw = r2.yzx * r0.zzz;
    r4.x = 1;
    r5.x = dot(FogSHR.xyzw, r4.xyzw);
    r5.y = dot(FogSHG.xyzw, r4.xyzw);
    r5.z = dot(FogSHB.xyzw, r4.xyzw);
    r5.xyz = max(float3(0,0,0), r5.xyz);
    r0.zw = r1.yx * SectorOcclusion_OffsetScale.yx + SectorOcclusion_OffsetScale.wz;
    r0.z = SectorOcclusion_HeightTexture__TexObj__.SampleLevel(SectorHemiMapSamplerStateLinear_s, r0.zw, 0).y;
    r0.z = r0.z * SectorOcclusion_HeightOffsetScale.x + SectorOcclusion_HeightOffsetScale.y;
    r0.z = r1.z + -r0.z;
    r0.z = saturate(InvUndergroundBlendEndHeight * -r0.z);
    r0.z = sqrt(r0.z);
    r0.w = dot(r2.xy, r2.xy);
    r0.w = SectorOcclusion_DistanceFade.x * r0.w + SectorOcclusion_DistanceFade.y;
    r0.w = saturate(3 * r0.w);
    r0.z = r0.w * r0.z;
    r6.x = dot(UndergroundSHR.xyzw, r4.xyzw);
    r6.y = dot(UndergroundSHG.xyzw, r4.xyzw);
    r6.z = dot(UndergroundSHB.xyzw, r4.xyzw);
    r4.xyz = max(float3(0,0,0), r6.xyz);
    r4.xyz = r4.xyz * FogUndergroundColorScale + -r5.xyz;
    r4.xyz = r0.zzz * r4.xyz + r5.xyz;
    r0.y = sqrt(r0.y);
    r0.y = saturate(r0.y * FogParams.y + FogParams.x);
    r0.z = HeightFogParams.y * r2.z;
    r0.z = max(-125, r0.z);
    r0.w = cmp(9.99999997e-007 < abs(r0.z));
    r2.w = exp2(-r0.z);
    r2.w = 1 + -r2.w;
    r0.z = r2.w / r0.z;
    r0.z = r0.w ? r0.z : 1;
    r0.z = r0.z * HeightFogParams.x + FogParams.w;
    r0.y = r0.y * r0.z;
    r0.y = -FogParams.z * r0.y;
    r0.y = exp2(r0.y);
    o2.xyz = -r4.xyz * r0.yyy + r4.xyz;
    o2.w = r0.y;
  }
  r4.xyzw = DepthTextureScaleOffset.xyzw * r3.xyww;
  o5.xy = r4.xy + r4.zw;
  r0.y = dot(CameraDirection.xyz, r2.xyz);
  o7.w = CameraDistances.w * r0.y;
  o3.w = v4.w * v1.w;
  r1.w = 1;
  o1.x = dot(UserClipPlane.xyzw, r1.xyzw);
  r0.y = dot(r2.xyz, r2.xyz);
  r0.y = sqrt(r0.y);
  r0.z = -UnderwaterExtinctions.z * r0.y;
  r0.z = exp2(r0.z);
  r0.w = WaterLevel + -r1.z;
  r0.w = -UnderwaterExtinctions.w * r0.w;
  r0.w = exp2(r0.w);
  r0.w = min(1, r0.w);
  o8.z = r0.z * r0.w;
  r0.y = -0.0432808511 * r0.y;
  r0.y = exp2(r0.y);
  r0.y = 1 + -r0.y;
  r4.xyz = -UnderwaterColorShallow.xyz + UnderwaterColorDeep.xyz;
  o6.xyz = r0.yyy * r4.xyz + UnderwaterColorShallow.xyz;
  r0.yz = r1.yx * SectorOcclusion_OffsetScale.yx + SectorOcclusion_OffsetScale.wz;
  r0.y = SectorOcclusion_HeightTexture__TexObj__.SampleLevel(SectorHemiMapSamplerStateLinear_s, r0.yz, 0).y;
  r0.y = r0.y * SectorOcclusion_HeightOffsetScale.x + SectorOcclusion_HeightOffsetScale.y;
  r0.y = r1.z + -r0.y;
  r0.y = saturate(InvUndergroundBlendEndHeight * -r0.y);
  r0.y = sqrt(r0.y);
  r0.z = dot(r2.xy, r2.xy);
  r0.z = SectorOcclusion_DistanceFade.x * r0.z + SectorOcclusion_DistanceFade.y;
  r0.z = saturate(3 * r0.z);
  r0.y = -r0.z * r0.y + 1;
  o7.xyz = LightColorUpNormalUnderwater.xyz * r0.yyy;
  o0.xyw = r3.xyw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -i --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe edf92da1ab770dab-vs_replace.txt
if (r3.w != 1.0) { r3.x += separation * (r3.w - convergence); }

  o3.xyz = v1.xyz;
  o4.xyz = r1.xyz;
  o4.w = v3.x;
  o5.z = r3.w;
  o5.w = r0.x;
  o8.xy = v2.xy;
  return;
}
