// hlsltool.py -i --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe 0e2b06bf5796d237-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.31 on Wed Mar 02 07:35:22 2016

cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4x4 InvProjectionMatrix : packoffset(c0);
  float4x4 InvViewMatrix : packoffset(c4);
  float4x4 ProjectionMatrix : packoffset(c8);
  float4x4 ViewMatrix : packoffset(c12);
  float4x4 ViewProjectionMatrix : packoffset(c16);
  float4x4 ViewRotProjectionMatrix : packoffset(c20);
  float4x4 ViewRotProjectionMatrix_Previous : packoffset(c24);
  float4 AmbientSHR : packoffset(c28);
  float4 AmbientSHG : packoffset(c29);
  float4 AmbientSHB : packoffset(c30);
  float4 CameraDistances : packoffset(c31);
  float4 CameraNearPlaneSize : packoffset(c32);
  float4 DepthScale : packoffset(c33);
  float4 DepthTextureScaleOffset : packoffset(c34);
  float4 FogParams : packoffset(c35);
  float4 FogSHB : packoffset(c36);
  float4 FogSHG : packoffset(c37);
  float4 FogSHR : packoffset(c38);
  float4 HeightFogParams : packoffset(c39);
  float4 ViewportSize : packoffset(c40);
  float3 ViewPoint : packoffset(c41);
  float3 CameraPosition : packoffset(c42);
  float3 CameraPosition_Previous : packoffset(c43);
  float3 CameraPositionFractions : packoffset(c44);
  float3 CameraPositionFractions_Previous : packoffset(c45);
  float3 CameraRight : packoffset(c46);
  float3 CameraUp : packoffset(c47);
  float3 CameraDirection : packoffset(c48);
  float3 EnvironmentMapColorOffset : packoffset(c49);
  float3 EnvironmentMapColorScale : packoffset(c50);
  float3 AmbientOcclusionRanges : packoffset(c51);
  float3 DepthTextureRcpSize : packoffset(c52);
  float2 MotionVectorOffsets : packoffset(c53);
  float2 DepthRangeCompression : packoffset(c53.z);
  float ShadowProjDepthMinValue : packoffset(c54);
  float DistanceScale : packoffset(c54.y);
  float WorldSpaceZOffset : packoffset(c54.z);
  float WorldSpaceZOffset_Previous : packoffset(c54.w);
  float CameraFOVDeg : packoffset(c55);
  float EffectsEmissiveEVBias : packoffset(c55.y);
  float ShadowCSMLastSliceIndex : packoffset(c55.z);
  float UseNormalization : packoffset(c55.w);
  float FogUndergroundColorScale : packoffset(c56);
}

cbuffer CGlobalShaderParameterProvider : register(b1)
{
  float4 BurnColor : packoffset(c0);
  float4 BurnParams : packoffset(c1);
  float4 BurnParams2 : packoffset(c2);
  float4 BurnParams3 : packoffset(c3);
  float4 CascadedShadowScaleOffsetTile0 : packoffset(c4);
  float4 CascadedShadowScaleOffsetTile1 : packoffset(c5);
  float4 WindSimParamsX : packoffset(c6);
  float4 WindSimParamsY : packoffset(c7);
  float VistaNoiseIntensity : packoffset(c8);
  float Time : packoffset(c8.y);
  float WindFactor : packoffset(c8.z);
  float FireGlowEV : packoffset(c8.w);
  float BurnSpeedScale : packoffset(c9);
  float BurnlineMaskScale : packoffset(c9.y);
  float BurnlineMaskInfluence : packoffset(c9.z);
  float WorldSpaceProgressionMaskScale : packoffset(c9.w);
  float WorldSpaceProgressionMaskInfluence : packoffset(c10);
  float MaskTransitionSpeedModifier : packoffset(c10.y);
  float GlowMaskScale : packoffset(c10.z);
  float FireGlowMaskInfluence : packoffset(c10.w);
  float CenterBurnlineWidth : packoffset(c11);
  float TransitionToBurnlineWidth : packoffset(c11.y);
  float DissolveCutoffPoint : packoffset(c11.z);
  float DissolveBlendDistance : packoffset(c11.w);
  float EyeGlossinessScale : packoffset(c12);
  float EyeSpecIntensityScale : packoffset(c12.y);
  float EyeIrisGlossinessScale : packoffset(c12.z);
  float EyeIrisSpecIntensityScale : packoffset(c12.w);
  float EyeReflectionBoostScale : packoffset(c13);
  bool EyeReflectionMaskEnable : packoffset(c13.y);
  float4 BurnParams4 : packoffset(c14);
  float4 BurnParams5 : packoffset(c15);
}

cbuffer CSceneTerrainSkyOcclusionAtlasPrivateData : register(b2)
{
  float4 SectorOcclusion_OffsetScale : packoffset(c0);
  float3 SectorOcclusion_DistanceFade : packoffset(c1);
  float2 SectorOcclusion_HeightOffsetScale : packoffset(c2);
}

cbuffer CAmbientProvider : register(b3)
{
  float4 CascadeDistanceScales[5] : packoffset(c0);
  float4 CascadeNearFarSnappedOffsetCamera[5] : packoffset(c5);
  float4 CascadeNearFarRcpUVSize[5] : packoffset(c10);
  float4 UndergroundSHR : packoffset(c15);
  float4 UndergroundSHG : packoffset(c16);
  float4 UndergroundSHB : packoffset(c17);
  float InvUndergroundBlendEndHeight : packoffset(c18);
  float IndirectLightingScale : packoffset(c18.y);
}

cbuffer Ocean : register(b4)
{
  float4 FoamLayer1Params : packoffset(c0);
  float4 FoamLayer2Params : packoffset(c1);
  float4 FoamParams : packoffset(c2);
  float4 FoamSettings : packoffset(c3);
  float4 MaterialPickingID : packoffset(c4);
  float4 NormalMapParams1 : packoffset(c5);
  float4 NormalMapParams2 : packoffset(c6);
  float4 NormalMapParams3 : packoffset(c7);
  float4 NormalMapParams4 : packoffset(c8);
  float4 NormalsMaskParams : packoffset(c9);
  float4 Octave1Params : packoffset(c10);
  float4 Octave2Params : packoffset(c11);
  float4 Octave3Params : packoffset(c12);
  float4 Octave4Params : packoffset(c13);
  float4 Octave5Params : packoffset(c14);
  float4 Octave6Params : packoffset(c15);
  float4 Octave7Params : packoffset(c16);
  float4 Octave8Params : packoffset(c17);
  float4 WavesCrestWeights : packoffset(c18);
  float3 DisplacementParams : packoffset(c19);
  float DampingFadeOut : packoffset(c19.w);
  float3 OceanColorDeep : packoffset(c20);
  float DepthDistanceCff : packoffset(c20.w);
  float3 OceanColorShallow : packoffset(c21);
  float HighNormalsScale : packoffset(c21.w);
  float2 CausticsDepthFade : packoffset(c22);
  float2 CausticsParams : packoffset(c22.z);
  float2 CausticsRcpDepthFade : packoffset(c23);
  float2 Octave1Dir : packoffset(c23.z);
  float2 Octave2Dir : packoffset(c24);
  float2 Octave3Dir : packoffset(c24.z);
  float2 Octave4Dir : packoffset(c25);
  float2 Octave5Dir : packoffset(c25.z);
  float2 Octave6Dir : packoffset(c26);
  float2 Octave7Dir : packoffset(c26.z);
  float2 Octave8Dir : packoffset(c27);
  float2 Smoothness : packoffset(c27.z);
  float2 WavesFade : packoffset(c28);
  float2 WavesHiResFade : packoffset(c28.z);
  float NormalsScale : packoffset(c29);
  float RimLightIntensity : packoffset(c29.y);
  float RimLightWidth : packoffset(c29.z);
  float ShallowWaterDepth : packoffset(c29.w);
  float TexGeoWavesBlendCff : packoffset(c30);
}

cbuffer COceanDampingProvider : register(b5)
{
  float4 HideOceanDampingTexelOffset : packoffset(c0);
  float4 WorldScaleAndOffset : packoffset(c1);
}

cbuffer COceanParameterProvider : register(b6)
{
  float4 WavesAmpHDir_ampVDirOverWL[8] : packoffset(c0);
  float4 WavesDir_oneOverWL_ampHWL[8] : packoffset(c8);
  float4 WavesParameters[8] : packoffset(c16);
  float4 CornerPointsWS[4] : packoffset(c24);
  float WavesCrestWeightsNorm[4] : packoffset(c28);
  float4 OceanParameters : packoffset(c32);
  float4 SkyParameters : packoffset(c33);
  float4 VertexAdjustments : packoffset(c34);
  float2 GridSize : packoffset(c35);
  float OneOverWavesFade : packoffset(c35.z);
  float OneOverWavesHiResFade : packoffset(c35.w);
  float WaterLevel : packoffset(c36);
}

SamplerState SectorHemiMapSamplerStateLinear_s : register(s0);
SamplerState DisplacementTexture__SampObj___s : register(s1);
SamplerState DampingTexture__SampObj___s : register(s2);
Texture2D<float4> SectorOcclusion_HeightTexture__TexObj__ : register(t0);
Texture2D<float4> DisplacementTexture__TexObj__ : register(t1);
Texture2D<float4> DampingTexture__TexObj__ : register(t2);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : position0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : TEXCOORD7,
  out float4 o9 : TEXCOORD8,
  out float4 o10 : TEXCOORD9,
  out float2 o11 : TEXCOORD10)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.x = log2(abs(v0.y));
  r0.x = OceanParameters.x * r0.x;
  r0.x = exp2(r0.x);
  r0.y = 1 + -r0.x;
  r0.z = 1 + -v0.x;
  r1.xyz = CornerPointsWS[0].xyw * r0.zzz;
  r1.xyz = v0.xxx * CornerPointsWS[1].xyw + r1.xyz;
  r2.xyz = CornerPointsWS[2].xyw * r0.zzz;
  r2.xyz = v0.xxx * CornerPointsWS[3].xyw + r2.xyz;
  r0.xzw = r2.xyz * r0.xxx;
  r0.xyz = r0.yyy * r1.xyz + r0.xzw;
  r0.xy = r0.xy / r0.zz;
  r1.xy = WorldScaleAndOffset.zw + r0.xy;
  r1.xy = WorldScaleAndOffset.xy * r1.xy;
  r1.xy = DampingTexture__TexObj__.SampleLevel(DampingTexture__SampObj___s, r1.xy, 0).xy;
  r0.w = NormalMapParams1.y * Time;
  r1.zw = NormalMapParams1.zw * r0.ww;
  o8.xy = r0.xy * NormalMapParams1.xx + r1.zw;
  r0.w = NormalMapParams2.y * Time;
  r1.zw = NormalMapParams2.zw * r0.ww;
  o8.zw = r0.xy * NormalMapParams2.xx + r1.zw;
  r0.w = NormalMapParams3.y * Time;
  r1.zw = NormalMapParams3.zw * r0.ww;
  o9.xy = r0.xy * NormalMapParams3.xx + r1.zw;
  r0.w = NormalMapParams4.y * Time;
  r1.zw = NormalMapParams4.zw * r0.ww;
  o9.zw = r0.xy * NormalMapParams4.xx + r1.zw;
  r0.w = NormalsMaskParams.y * Time;
  r1.zw = NormalsMaskParams.zw * r0.ww;
  o10.xy = r0.xy * NormalsMaskParams.xx + r1.zw;
  r0.z = WaterLevel;
  r2.xyz = -CameraPosition.xyz + r0.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r1.z = OneOverWavesFade * r0.w;
  r1.w = max(0.200000003, r1.z);
  r1.w = min(1, r1.w);
  r1.w = -r1.w * 1.25 + 1.25;
  r1.w = log2(r1.w);
  r1.w = WavesFade.y * r1.w;
  r1.w = exp2(r1.w);
  r2.xyzw = float4(0,0,0,0);
  r3.xyw = float3(0,0,0);
  while (true) {
    r4.x = cmp((int)r3.w >= 4);
    if (r4.x != 0) break;
    r4.x = dot(WavesDir_oneOverWL_ampHWL[r3.w].xy, r0.xy);
    r4.x = -WavesParameters[r3.w].x * Time + r4.x;
    sincos(r4.x, r4.x, r5.x);
    r2.xy = -WavesAmpHDir_ampVDirOverWL[r3.w].xy * r4.xx + r2.xy;
    r2.z = WavesParameters[r3.w].z * r5.x + r2.z;
    r3.xy = WavesAmpHDir_ampVDirOverWL[r3.w].zw * r4.xx + r3.xy;
    r4.x = WavesParameters[r3.w].z * WavesDir_oneOverWL_ampHWL[r3.w].w;
    r2.w = r4.x * r5.x + r2.w;
    r3.w = (int)r3.w + 1;
  }
  r3.z = 1 + -r2.w;
  r1.z = saturate(r1.z + r1.z);
  r4.xyz = float3(0,0,1) + -r3.xyz;
  r3.xyz = r1.zzz * r4.xyz + r3.xyz;
  r2.xyz = r2.xyz * r1.www;
  r2.xyz = r2.xyz * r1.yyy + r0.xyz;
  r1.z = dot(r3.xyz, r3.xyz);
  r1.z = rsqrt(r1.z);
  o2.xyz = r3.xyz * r1.zzz;
  r0.w = 0.00124999997 * r0.w;
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r1.z = DisplacementParams.z * Time;
  r3.xyzw = float4(6,0.001953125,0.0009765625,0.00390625) * DisplacementParams.yxxx;
  r4.xyzw = float4(0.200000003,0.200000003,0.400000006,0.200000003) + r2.xyxy;
  r5.xyz = float3(0.0500000007,-0.00499999989,0.0250000004) * r1.zzz;
  r4.xyzw = r4.xyzw * r3.zzyy + r5.xyyx;
  r5.xyw = DisplacementTexture__TexObj__.SampleLevel(DisplacementTexture__SampObj___s, r4.xy, 0).xyz;
  r4.xyz = DisplacementTexture__TexObj__.SampleLevel(DisplacementTexture__SampObj___s, r4.zw, 0).xyz;
  r1.zw = float2(0.200000003,0.400000006) + r2.xy;
  r1.zw = r1.zw * r3.ww + r5.zz;
  r3.yzw = DisplacementTexture__TexObj__.SampleLevel(DisplacementTexture__SampObj___s, r1.zw, 0).xyz;
  r1.z = dot(r5.xyw, float3(-1,1,1));
  r1.w = dot(r4.yxz, float3(-1,1,1));
  r1.z = r1.z + r1.w;
  r1.w = dot(r3.wzy, float3(-1,1,1));
  r1.z = r1.z + r1.w;
  r1.z = r1.z * r3.x;
  r1.z = r1.z * 0.100000001 + -DisplacementParams.y;
  r1.w = r1.z * r0.w;
  r2.xyz = r1.zzz * r0.www + r2.xyz;
  o10.z = 0.25 * abs(r1.w);
  o3.xyz = CameraPosition.xyz + -r2.xyz;
  r2.w = 1;
  r3.x = dot(r2.xyzw, ViewProjectionMatrix._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, ViewProjectionMatrix._m01_m11_m21_m31);
  o0.z = dot(r2.xyzw, ViewProjectionMatrix._m02_m12_m22_m32);
  r3.w = dot(r2.xyzw, ViewProjectionMatrix._m03_m13_m23_m33);

o0.xyw = r3.xyw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -i --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe 0e2b06bf5796d237-vs_replace.txt
if (r3.w != 1.0) { r3.x += separation * (r3.w - convergence); }

  r4.xyzw = DepthTextureScaleOffset.xyzw * r3.xyww;
  o4.xy = r4.xy + r4.zw;
  r1.zw = cmp(float2(0,0) < HeightFogParams.zw);
  r1.z = r1.w ? r1.z : 0;
  if (r1.z != 0) {
    o1.xyz = float3(0,0,0);
  } else {
    r4.xyz = -CameraPosition.yzx + r2.yzx;
    r1.z = dot(r4.xyz, r4.xyz);
    r1.z = rsqrt(r1.z);
    r4.yzw = r4.xyz * r1.zzz;
    r4.x = 1;
    r5.x = dot(FogSHR.xyzw, r4.xyzw);
    r5.y = dot(FogSHG.xyzw, r4.xyzw);
    r5.z = dot(FogSHB.xyzw, r4.xyzw);
    r5.xyz = max(float3(0,0,0), r5.xyz);
    r1.zw = r2.yx * SectorOcclusion_OffsetScale.yx + SectorOcclusion_OffsetScale.wz;
    r1.z = SectorOcclusion_HeightTexture__TexObj__.SampleLevel(SectorHemiMapSamplerStateLinear_s, r1.zw, 0).y;
    r1.z = r1.z * SectorOcclusion_HeightOffsetScale.x + SectorOcclusion_HeightOffsetScale.y;
    r1.z = r2.z + -r1.z;
    r1.z = saturate(InvUndergroundBlendEndHeight * -r1.z);
    r1.z = sqrt(r1.z);
    r2.xy = -CameraPosition.xy + r2.xy;
    r1.w = dot(r2.xy, r2.xy);
    r1.w = SectorOcclusion_DistanceFade.x * r1.w + SectorOcclusion_DistanceFade.y;
    r1.w = saturate(3 * r1.w);
    r1.z = r1.w * r1.z;
    r2.x = dot(UndergroundSHR.xyzw, r4.xyzw);
    r2.y = dot(UndergroundSHG.xyzw, r4.xyzw);
    r2.z = dot(UndergroundSHB.xyzw, r4.xyzw);
    r2.xyz = max(float3(0,0,0), r2.xyz);
    r2.xyz = r2.xyz * FogUndergroundColorScale + -r5.xyz;
    o1.xyz = r1.zzz * r2.xyz + r5.xyz;
  }
  r1.zw = r3.ww + -r3.xy;
  r2.yz = float2(0.5,0.5) * r1.zw;
  r1.z = r3.w + r3.x;
  r2.x = 0.5 * r1.z;

  // o0.xyw = r3.xyw; // Relocated from here with hlsltool.py

  o10.w = r0.w;
  r2.w = r3.w;
  o4.z = r2.w;
  o5.xyz = r2.yzw;
  o6.xyz = r2.xzw;
  o7.xyz = r0.xyz;
  o11.xy = r1.yx;
  return;
}

/****************************** COMPILE WARNINGS ******************************
C:\Games\Far Cry Primal\bin\ShaderFixes\0e2b06bf5796d237-vs_replace.txt(193,14-15): warning X3578: Output value 'o1' is not completely initialized
C:\Games\Far Cry Primal\bin\ShaderFixes\0e2b06bf5796d237-vs_replace.txt(194,14-15): warning X3578: Output value 'o2' is not completely initialized
C:\Games\Far Cry Primal\bin\ShaderFixes\0e2b06bf5796d237-vs_replace.txt(195,14-15): warning X3578: Output value 'o3' is not completely initialized
C:\Games\Far Cry Primal\bin\ShaderFixes\0e2b06bf5796d237-vs_replace.txt(196,14-15): warning X3578: Output value 'o4' is not completely initialized
C:\Games\Far Cry Primal\bin\ShaderFixes\0e2b06bf5796d237-vs_replace.txt(197,14-15): warning X3578: Output value 'o5' is not completely initialized
C:\Games\Far Cry Primal\bin\ShaderFixes\0e2b06bf5796d237-vs_replace.txt(198,14-15): warning X3578: Output value 'o6' is not completely initialized
C:\Games\Far Cry Primal\bin\ShaderFixes\0e2b06bf5796d237-vs_replace.txt(199,14-15): warning X3578: Output value 'o7' is not completely initialized

****************************** COMPILE WARNINGS ******************************/
