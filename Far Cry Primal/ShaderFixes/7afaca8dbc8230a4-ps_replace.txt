// ---- Created with 3Dmigoto v1.2.31 on Wed Mar 02 09:01:57 2016

cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4x4 InvProjectionMatrix : packoffset(c0);
  float4x4 InvViewMatrix : packoffset(c4);
  float4x4 ProjectionMatrix : packoffset(c8);
  float4x4 ViewMatrix : packoffset(c12);
  float4x4 ViewProjectionMatrix : packoffset(c16);
  float4x4 ViewRotProjectionMatrix : packoffset(c20);
  float4x4 ViewRotProjectionMatrix_Previous : packoffset(c24);
  float4 AmbientSHR : packoffset(c28);
  float4 AmbientSHG : packoffset(c29);
  float4 AmbientSHB : packoffset(c30);
  float4 CameraDistances : packoffset(c31);
  float4 CameraNearPlaneSize : packoffset(c32);
  float4 DepthScale : packoffset(c33);
  float4 DepthTextureScaleOffset : packoffset(c34);
  float4 FogParams : packoffset(c35);
  float4 FogSHB : packoffset(c36);
  float4 FogSHG : packoffset(c37);
  float4 FogSHR : packoffset(c38);
  float4 HeightFogParams : packoffset(c39);
  float4 ViewportSize : packoffset(c40);
  float3 ViewPoint : packoffset(c41);
  float3 CameraPosition : packoffset(c42);
  float3 CameraPosition_Previous : packoffset(c43);
  float3 CameraPositionFractions : packoffset(c44);
  float3 CameraPositionFractions_Previous : packoffset(c45);
  float3 CameraRight : packoffset(c46);
  float3 CameraUp : packoffset(c47);
  float3 CameraDirection : packoffset(c48);
  float3 EnvironmentMapColorOffset : packoffset(c49);
  float3 EnvironmentMapColorScale : packoffset(c50);
  float3 AmbientOcclusionRanges : packoffset(c51);
  float3 DepthTextureRcpSize : packoffset(c52);
  float2 MotionVectorOffsets : packoffset(c53);
  float2 DepthRangeCompression : packoffset(c53.z);
  float ShadowProjDepthMinValue : packoffset(c54);
  float DistanceScale : packoffset(c54.y);
  float WorldSpaceZOffset : packoffset(c54.z);
  float WorldSpaceZOffset_Previous : packoffset(c54.w);
  float CameraFOVDeg : packoffset(c55);
  float EffectsEmissiveEVBias : packoffset(c55.y);
  float ShadowCSMLastSliceIndex : packoffset(c55.z);
  float UseNormalization : packoffset(c55.w);
  float FogUndergroundColorScale : packoffset(c56);
}

cbuffer CNewLightingDataProvider : register(b1)
{
  float4x4 ShadowProjectionMatrix : packoffset(c0);
  float4x4 ShadowRotProjectionMatrix : packoffset(c4);
  float4 CSMSlice0_0 : packoffset(c8);
  float4 CSMSlice0_1 : packoffset(c9);
  float4 CSMSlice0_2 : packoffset(c10);
  float4 CSMSlice1_0 : packoffset(c11);
  float4 CSMSlice1_1 : packoffset(c12);
  float4 CSMSlice1_2 : packoffset(c13);
  float4 CSMSlice2_0 : packoffset(c14);
  float4 CSMSlice2_1 : packoffset(c15);
  float4 CSMSlice2_2 : packoffset(c16);
  float4 CSMSliceFade : packoffset(c17);
  float4 ShadowMapSize : packoffset(c18);
  float3 LightColor : packoffset(c19);
  float3 LightColorUpNormal : packoffset(c20);
  float3 LightDirectionWS : packoffset(c21);
  float3 LightPositionWS : packoffset(c22);
  float3 LightRightWS : packoffset(c23);
  float3 LightUpWS : packoffset(c24);
  float RcpSquaredLightRadius : packoffset(c24.w);
  float2 SpotFactors : packoffset(c25);
  float PointAttenuation : packoffset(c25.z);
}

cbuffer CSceneTerrainShadowAtlasPrivateData : register(b2)
{
  float4 SectorOffsetScale : packoffset(c0);
  float2 LongRangeShadowFade : packoffset(c1);
}

cbuffer CDepthReconstructionProvider : register(b3)
{
  float4x4 InvViewRotProjectionMatrix : packoffset(c0);
  float4x4 ReconsInvViewRotProjectionMatrix : packoffset(c4);
  float3 ReconsCamPosition : packoffset(c8);
  float ReconsDepthMul : packoffset(c8.w);
  float ReconsDepthOffset : packoffset(c9);
  float ReconsViewFar : packoffset(c9.y);
  float ReconsViewNear : packoffset(c9.z);
  float ReconsViewOORange : packoffset(c9.w);
  float ReconsViewRange : packoffset(c10);
}

cbuffer CCloudShadowParameterProvider : register(b4)
{
  float4 CloudSettings : packoffset(c0);
  float4 SunColor : packoffset(c1);
  float3 PlayerPosition : packoffset(c2);
  float3 SunDirection : packoffset(c3);
  float4 CloudShadowsSettings : packoffset(c4);
  float4 CloudShadowsDistances : packoffset(c5);
}

SamplerState DepthVPSampler__SampObj___s : register(s0);
SamplerState SkyDomeColorWrap_s : register(s2);
SamplerComparisonState ShadowCmpSampler_s : register(s1);
Texture2D<float4> DepthVPSampler__TexObj__ : register(t0);
Texture2DArray<float4> ShadowCmpSampler_TextureObject : register(t1);
Texture2D<uint4> SectorAtlasTexture_UINT_TextureObject : register(t2);
Texture2D<float4> CloudShadowTexture : register(t3);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  uint v2 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = DepthVPSampler__TexObj__.SampleLevel(DepthVPSampler__SampObj___s, v1.xy, 0).x;
  r0.x = DepthScale.y * r0.x + DepthScale.x;
  r0.x = 1 / r0.x;
  r0.y = CameraDistances.x * CameraDistances.y;
  r0.x = CameraDistances.z * r0.x;
  r0.x = r0.y / r0.x;
  r0.x = CameraDistances.y + -r0.x;
  r0.z = -r0.x * CameraDistances.w + 1;
  r0.xy = v1.xy * float2(2,-2) + float2(-1,1);
  r0.w = 1;
  r1.x = dot(r0.xyzw, InvViewRotProjectionMatrix._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, InvViewRotProjectionMatrix._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, InvViewRotProjectionMatrix._m02_m12_m22_m32);
  r0.x = dot(r0.xyzw, InvViewRotProjectionMatrix._m03_m13_m23_m33);
  r0.xyz = r1.xyz / r0.xxx;
  r1.xyz = CameraPosition.xyz + r0.xyz;
  r2.xyz = -PlayerPosition.xyz + r1.xyz;
  r0.w = dot(-SunDirection.xyz, -SunDirection.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = -SunDirection.xyz * r0.www;
  r0.w = dot(r2.xyz, r3.xyz);
  r2.w = r0.w + r0.w;
  r3.w = dot(r2.xyz, r2.xyz);
  r4.x = -CloudSettings.z * CloudSettings.z + r3.w;
  r4.x = 4 * r4.x;
  r2.w = r2.w * r2.w + -r4.x;
  r2.w = sqrt(r2.w);
  r4.x = -r0.w * 2 + -r2.w;
  r4.x = 0.5 * r4.x;
  r0.w = -r0.w * 2 + r2.w;
  r0.w = 0.5 * r0.w;
  r0.w = max(r4.x, r0.w);
  r2.xyz = r3.xyz * r0.www + r2.xyz;
  r0.w = r2.y / r2.x;
  r2.w = min(1, abs(r0.w));
  r3.x = max(1, abs(r0.w));
  r3.x = 1 / r3.x;
  r2.w = r3.x * r2.w;
  r3.x = r2.w * r2.w;
  r3.y = r3.x * 0.0208350997 + -0.0851330012;
  r3.y = r3.x * r3.y + 0.180141002;
  r3.y = r3.x * r3.y + -0.330299497;
  r3.x = r3.x * r3.y + 0.999866009;
  r3.y = r3.x * r2.w;
  r3.z = cmp(1 < abs(r0.w));
  r3.y = r3.y * -2 + 1.57079637;
  r3.y = r3.z ? r3.y : 0;
  r2.w = r2.w * r3.x + r3.y;
  r0.w = min(1, r0.w);
  r0.w = cmp(r0.w < -r0.w);
  r0.w = r0.w ? -r2.w : r2.w;
  r0.w = -0.318309873 * r0.w;
  r0.w = frac(r0.w);
  r3.x = CloudSettings.y * 0.300000012 + r0.w;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r0.w = saturate(r2.z * r0.w);
  r3.y = -r0.w * 0.915000021 + 1;
  r0.w = CloudShadowTexture.SampleLevel(SkyDomeColorWrap_s, r3.xy, 0).w;
  r0.w = CloudShadowsSettings.y * r0.w;
  r0.w = r0.w * r0.w;
  r2.xy = -r0.ww * CloudShadowsSettings.zw + float2(1,1);
  r0.w = sqrt(r3.w);
  r2.z = CloudShadowsDistances.y + -CloudShadowsDistances.x;
  r0.w = -CloudShadowsDistances.x + r0.w;
  r2.z = 1 / r2.z;
  r0.w = saturate(r2.z * r0.w);
  r2.z = r0.w * -2 + 3;
  r0.w = r0.w * r0.w;
  r0.w = r2.z * r0.w;
  r2.y = r2.y + -r2.x;
  r0.w = r0.w * r2.y + r2.x;
  r1.w = 1;
  r2.x = dot(r1.xyzw, CSMSlice2_0.xyzw);
  r2.y = dot(r1.xyzw, CSMSlice2_1.xyzw);
  r2.z = dot(r1.xyzw, CSMSlice2_2.xyzw);
  r3.x = dot(r1.xyzw, CSMSlice1_0.xyzw);
  r3.y = dot(r1.xyzw, CSMSlice1_1.xyzw);
  r3.z = dot(r1.xyzw, CSMSlice1_2.xyzw);
  r4.xyz = float3(-0,-0,-0.00100000005) + r3.xyz;
  r5.xyz = cmp(r4.xyz >= float3(0,0,0));
  r5.xyz = r5.xyz ? 1.000000 : 0;
  r4.xyz = cmp(float3(1,1,1) >= r4.xyz);
  r4.xyz = r4.xyz ? 1.000000 : 0;
  r4.xyz = r5.xyz * r4.xyz;
  r4.x = dot(r4.xyz, float3(1,1,1));
  r4.x = cmp(r4.x >= 3);
  r3.w = 1;
  r2.w = 2;
  r4.xyzw = r4.xxxx ? r3.xyzw : r2.xyzw;
  r5.x = dot(r1.xyzw, CSMSlice0_0.xyzw);
  r5.y = dot(r1.xyzw, CSMSlice0_1.xyzw);
  r5.z = dot(r1.xyzw, CSMSlice0_2.xyzw);
  r6.xyz = float3(-0,-0,-0.00100000005) + r5.xyz;
  r7.xyz = cmp(r6.xyz >= float3(0,0,0));
  r7.xyz = r7.xyz ? 1.000000 : 0;
  r6.xyz = cmp(float3(1,1,1) >= r6.xyz);
  r6.xyz = r6.xyz ? 1.000000 : 0;
  r6.xyz = r7.xyz * r6.xyz;
  r1.w = dot(r6.xyz, float3(1,1,1));
  r1.w = cmp(r1.w >= 3);
  r5.w = 0;
  r4.xyzw = r1.wwww ? r5.xyzw : r4.xyzw;
  r6.z = min(ShadowCSMLastSliceIndex, r4.w);
  r1.w = cmp(r6.z == ShadowCSMLastSliceIndex);
  if (r1.w != 0) {
    r0.x = dot(r0.xyz, r0.xyz);
    r0.x = sqrt(r0.x);
    r0.yz = r1.yx * SectorOffsetScale.yx + SectorOffsetScale.wz;
    SectorAtlasTexture_UINT_TextureObject.GetDimensions(0, uiDest.x, uiDest.y, uiDest.z);
    r1.xy = uiDest.xy;
    r7.xy = (uint2)r1.xy;
    r0.yz = r0.yz * r7.xy + float2(0.5,0.5);
    r7.xy = frac(r0.zy);
    r7.zw = float2(1,1) + -r7.yx;
    r8.xyzw = r7.zywz * r7.xxyw;
    r0.yz = (uint2)r0.yz;
    r0.yz = (int2)r0.yz + (int2)r1.xy;
    r7.xyzw = (int4)r0.yzyz + int4(-1,0,0,-1);
    r9.xy = (uint2)r0.yz % (uint2)r1.xy;
    r7.xyzw = (uint4)r7.zwxy % (uint4)r1.xyxy;
    r0.yz = (int2)r0.yz + int2(-1,-1);
    r10.xy = (uint2)r0.yz % (uint2)r1.xy;
    r11.xy = r7.zw;
    r11.zw = float2(0,0);
    r0.yz = SectorAtlasTexture_UINT_TextureObject.Load(r11.xyz).xy;
    r9.zw = float2(0,0);
    r1.xy = SectorAtlasTexture_UINT_TextureObject.Load(r9.xyz).xy;
    r7.zw = float2(0,0);
    r7.xy = SectorAtlasTexture_UINT_TextureObject.Load(r7.xyz).xy;
    r10.zw = float2(0,0);
    r9.xw = SectorAtlasTexture_UINT_TextureObject.Load(r10.xyz).yx;
    r10.x = f16tof32(r0.z);
    r10.y = f16tof32(r1.y);
    r10.z = f16tof32(r7.y);
    r10.w = f16tof32(r9.x);
    r0.z = dot(r10.xyzw, r8.xyzw);
    r9.x = r0.y;
    r9.y = r1.x;
    r9.z = r7.x;
    r7.xyzw = (int4)r9.xyzw | int4(0,0,0,0);
    r0.y = r1.z + -r0.z;
    r1.x = 0.25 * r0.y;
    r1.x = (int)r1.x;
    r1.y = (int)r1.x * 3;
    r1.w = 7 << (int)r1.y;
    r9.xyzw = (int4)r1.wwww & (int4)r7.xyzw;
    r9.xyzw = (uint4)r9.xyzw >> (uint4)r1.yyyy;
    r9.xyzw = (uint4)r9.xyzw;
    r9.xyzw = float4(0.142857149,0.142857149,0.142857149,0.142857149) * r9.xyzw;
    r1.y = dot(r9.xyzw, r8.xyzw);
    r1.x = (int)r1.x + 1;
    r1.x = (int)r1.x * 3;
    r1.w = 7 << (int)r1.x;
    r7.xyzw = (int4)r1.wwww & (int4)r7.xyzw;
    r7.xyzw = (uint4)r7.xyzw >> (uint4)r1.xxxx;
    r7.xyzw = (uint4)r7.xyzw;
    r7.xyzw = float4(0.142857149,0.142857149,0.142857149,0.142857149) * r7.xyzw;
    r1.x = dot(r7.xyzw, r8.xyzw);
    r0.y = 0.25 * abs(r0.y);
    r1.w = cmp(r0.y >= -r0.y);
    r0.y = frac(r0.y);
    r0.y = r1.w ? r0.y : -r0.y;
    r1.x = r1.x + -r1.y;
    r0.y = r0.y * r1.x + r1.y;
    r0.z = 20 + r0.z;
    r0.z = r1.z + -r0.z;
    r0.z = saturate(0.0500000007 * r0.z);
    r1.x = 1 + -r0.y;
    r0.y = r0.z * r1.x + r0.y;
    r0.x = saturate(r0.x * LongRangeShadowFade.x + LongRangeShadowFade.y);
    r0.z = 1 + -r0.y;
    r0.x = r0.x * r0.z + r0.y;
    r0.x = r0.x * r0.w;
    r0.yz = r2.xy * float2(2,2) + float2(-1,-1);
    r0.yz = float2(-0.800000012,-0.800000012) + abs(r0.yz);
    r0.yz = saturate(float2(5,5) * r0.yz);
    r0.yz = float2(1,1) + -r0.yz;
    r1.x = -0.5 + r2.z;
    r1.x = -abs(r1.x) * 2 + 1;
    r1.x = max(0, r1.x);
    r1.x = min(0.200000003, r1.x);
    r1.x = 5 * r1.x;
    r0.y = min(r0.y, r0.z);
    r0.y = min(r0.y, r1.x);
    r1.xy = r4.xy * ShadowMapSize.xy + float2(0.5,0.5);
    r1.zw = floor(r1.xy);
    r1.xy = r1.xy + -r1.zw;
    r1.zw = float2(-0.5,-0.5) + r1.zw;
    r7.xy = -r1.yx * float2(2,2) + float2(3,3);
    r7.zw = r1.xy * float2(2,2) + float2(1,1);
    r8.xy = float2(2,2) + -r1.xy;
    r8.xy = r8.xy / r7.yx;
    r1.xy = r1.xy / r7.zw;
    r8.zw = float2(-1,-1) + r8.xy;
    r8.xy = float2(1,1) + r1.xy;
    r0.z = r7.y * r7.x;
    r9.xyzw = ShadowMapSize.zwzw * r8.zwxw;
    r10.xy = r1.zw * ShadowMapSize.zw + r9.xy;
    r10.z = ShadowCSMLastSliceIndex;
    r1.x = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r10.xyz, r4.z, int2(0, 0)).x;
    r7.xy = r7.zw * r7.xy;
    r9.xy = r1.zw * ShadowMapSize.zw + r9.zw;
    r9.z = ShadowCSMLastSliceIndex;
    r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r9.xyz, r4.z, int2(0, 0)).x;
    r1.y = r7.x * r1.y;
    r0.z = r0.z * r1.x + r1.y;
    r8.xyzw = ShadowMapSize.zwzw * r8.zyxy;
    r9.xy = r1.zw * ShadowMapSize.zw + r8.xy;
    r9.z = ShadowCSMLastSliceIndex;
    r1.x = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r9.xyz, r4.z, int2(0, 0)).x;
    r0.z = r7.y * r1.x + r0.z;
    r1.x = r7.z * r7.w;
    r7.xy = r1.zw * ShadowMapSize.zw + r8.zw;
    r7.z = ShadowCSMLastSliceIndex;
    r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r4.z, int2(0, 0)).x;
    r0.z = r1.x * r1.y + r0.z;
    r0.z = r0.z * 0.0625 + -r0.x;
    r0.x = r0.y * r0.z + r0.x;
  } else {
    r0.y = cmp(r6.z == 1.000000);
    if (r0.y != 0) {
      r0.yz = r4.xy * ShadowMapSize.xy + float2(0.5,0.5);
      r1.xy = floor(r0.yz);
      r0.yz = -r1.xy + r0.yz;
      r1.xy = float2(-0.5,-0.5) + r1.xy;
      r1.zw = ShadowMapSize.zw * r1.xy;
      r7.xy = -r0.zy * float2(3,3) + float2(4,4);
      r7.zw = r0.yz * float2(3,3) + float2(1,1);
      r8.xy = -r0.yz * float2(2,2) + float2(3,3);
      r8.xy = r8.xy / r7.yx;
      r8.zw = float2(3,3) + r0.yz;
      r0.yz = r0.yz / r7.zw;
      r9.xw = float2(-2,-2) + r8.xy;
      r9.yz = float2(0.142857149,0.142857149) * r8.wz;
      r8.xy = float2(2,2) + r0.yz;
      r0.y = r7.y * r7.x;
      r10.xyzw = ShadowMapSize.zwzw * r9.xwzw;
      r11.xy = r1.xy * ShadowMapSize.zw + r10.xy;
      r11.z = 1;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r11.xyz, r4.z, int2(0, 0)).x;
      r10.xy = float2(7,7) * r7.xy;
      r11.xy = r1.xy * ShadowMapSize.zw + r10.zw;
      r11.z = 1;
      r2.w = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r11.xyz, r4.z, int2(0, 0)).x;
      r2.w = r10.x * r2.w;
      r0.y = r0.y * r0.z + r2.w;
      r7.xy = r7.zw * r7.xy;
      r8.zw = r9.wy;
      r11.xyzw = ShadowMapSize.zwzw * r8.xzxw;
      r12.xy = r1.xy * ShadowMapSize.zw + r11.xy;
      r12.z = 1;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r12.xyz, r4.z, int2(0, 0)).x;
      r0.y = r7.x * r0.z + r0.y;
      r12.xyzw = ShadowMapSize.zwzw * r9.xyzy;
      r13.xy = r1.xy * ShadowMapSize.zw + r12.xy;
      r13.z = 1;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r13.xyz, r4.z, int2(0, 0)).x;
      r0.y = r10.y * r0.z + r0.y;
      r10.xy = r1.xy * ShadowMapSize.zw + r12.zw;
      r10.z = 1;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r10.xyz, r4.z, int2(0, 0)).x;
      r0.y = r0.z * 49 + r0.y;
      r8.zw = float2(7,7) * r7.zw;
      r10.xy = r1.xy * ShadowMapSize.zw + r11.zw;
      r10.z = 1;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r10.xyz, r4.z, int2(0, 0)).x;
      r0.y = r8.z * r0.z + r0.y;
      r9.y = r8.y;
      r9.xyzw = ShadowMapSize.zwzw * r9.xyzy;
      r10.xy = r1.xy * ShadowMapSize.zw + r9.xy;
      r10.z = 1;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r10.xyz, r4.z, int2(0, 0)).x;
      r0.y = r7.y * r0.z + r0.y;
      r9.xy = r1.xy * ShadowMapSize.zw + r9.zw;
      r9.z = 1;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r9.xyz, r4.z, int2(0, 0)).x;
      r0.y = r8.w * r0.z + r0.y;
      r0.z = r7.z * r7.w;
      r1.xy = r8.xy * ShadowMapSize.zw + r1.zw;
      r1.z = 1;
      r1.x = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r1.xyz, r4.z, int2(0, 0)).x;
      r0.y = r0.z * r1.x + r0.y;
      r1.xy = r3.xy * float2(2,2) + float2(-1,-1);
      r1.xy = float2(-0.800000012,-0.800000012) + abs(r1.xy);
      r1.xy = saturate(float2(5,5) * r1.xy);
      r1.xy = float2(1,1) + -r1.xy;
      r0.z = -0.5 + r3.z;
      r0.z = -abs(r0.z) * 2 + 1;
      r0.z = max(0, r0.z);
      r0.z = min(0.200000003, r0.z);
      r0.xz = float2(0.0069444445,5) * r0.yz;
      r1.x = min(r1.x, r1.y);
      r0.z = min(r1.x, r0.z);
      r1.x = cmp(r0.z != 1.000000);
      if (r1.x != 0) {
        r1.xy = r2.xy * ShadowMapSize.xy + float2(0.5,0.5);
        r1.zw = floor(r1.xy);
        r1.xy = r1.xy + -r1.zw;
        r1.zw = float2(-0.5,-0.5) + r1.zw;
        r2.xy = -r1.yx * float2(2,2) + float2(3,3);
        r7.xy = r1.xy * float2(2,2) + float2(1,1);
        r7.zw = float2(2,2) + -r1.xy;
        r7.zw = r7.zw / r2.yx;
        r1.xy = r1.xy / r7.xy;
        r8.zw = float2(-1,-1) + r7.zw;
        r8.xy = float2(1,1) + r1.xy;
        r1.x = r2.y * r2.x;
        r9.xyzw = ShadowMapSize.zwzw * r8.zwxw;
        r10.xy = r1.zw * ShadowMapSize.zw + r9.xy;
        r10.z = 2;
        r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r10.xyz, r2.z, int2(0, 0)).x;
        r2.xy = r7.xy * r2.xy;
        r9.xy = r1.zw * ShadowMapSize.zw + r9.zw;
        r9.z = 2;
        r2.w = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r9.xyz, r2.z, int2(0, 0)).x;
        r2.x = r2.x * r2.w;
        r1.x = r1.x * r1.y + r2.x;
        r8.xyzw = ShadowMapSize.zwzw * r8.zyxy;
        r9.xy = r1.zw * ShadowMapSize.zw + r8.xy;
        r9.z = 2;
        r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r9.xyz, r2.z, int2(0, 0)).x;
        r1.x = r2.y * r1.y + r1.x;
        r1.y = r7.x * r7.y;
        r7.xy = r1.zw * ShadowMapSize.zw + r8.zw;
        r7.z = 2;
        r1.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r2.z, int2(0, 0)).x;
        r1.x = r1.y * r1.z + r1.x;
        r1.x = 0.0625 * r1.x;
        r0.y = r0.y * 0.0069444445 + -r1.x;
        r0.x = r0.z * r0.y + r1.x;
      }
    } else {
      r0.yz = r4.xy * ShadowMapSize.xy + float2(0.5,0.5);
      r1.xy = floor(r0.yz);
      r0.yz = -r1.xy + r0.yz;
      r1.xy = float2(-0.5,-0.5) + r1.xy;
      r1.zw = ShadowMapSize.zw * r1.xy;
      r2.xyzw = r0.yyyy * float4(11,11,5,5) + float4(-28,17,-6,1);
      r4.xyw = r0.yyy * float3(4,4,7) + float3(-5,-16,5);
      r4.xyw = r4.xyw / r2.zxy;
      r7.xyz = float3(-1,-3,1) + r4.yxw;
      r0.y = r0.y / r2.w;
      r8.x = 3 + r0.y;
      r9.xyzw = r0.zzzz * float4(11,11,5,5) + float4(-28,17,-6,1);
      r4.xyw = r0.zzz * float3(4,4,7) + float3(-5,-16,5);
      r4.xyw = r4.xyw / r9.zxy;
      r10.xyz = float3(-3,-1,1) + r4.xyw;
      r0.y = r0.z / r9.w;
      r11.y = 3 + r0.y;
      r12.xyzw = r9.zzxx * r2.zxzx;
      r7.w = r10.x;
      r13.xyzw = ShadowMapSize.zwzw * r7.ywxw;
      r6.xy = r1.xy * ShadowMapSize.zw + r13.xy;
      r0.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r6.xy = r1.xy * ShadowMapSize.zw + r13.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.z = r12.y * r0.z;
      r0.y = r12.x * r0.y + r0.z;
      r13.xyzw = r9.zzxx * -r2.ywyw;
      r6.xy = r7.zw * ShadowMapSize.zw + r1.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r13.x * r0.z + r0.y;
      r8.y = r7.w;
      r6.xy = r8.xy * ShadowMapSize.zw + r1.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r13.y * r0.z + r0.y;
      r10.w = r7.y;
      r14.xyzw = ShadowMapSize.zwzw * r10.wywz;
      r6.xy = r1.xy * ShadowMapSize.zw + r14.xy;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r12.z * r0.z + r0.y;
      r7.yw = r10.yz;
      r15.xyzw = ShadowMapSize.zwzw * r7.xyzy;
      r6.xy = r1.xy * ShadowMapSize.zw + r15.xy;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r12.w * r0.z + r0.y;
      r6.xy = r1.xy * ShadowMapSize.zw + r15.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r13.z * r0.z + r0.y;
      r8.zw = r7.yw;
      r12.xyzw = ShadowMapSize.zwzw * r8.xzxw;
      r6.xy = r1.xy * ShadowMapSize.zw + r12.xy;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r13.w * r0.z + r0.y;
      r13.xyzw = -r9.yyww * r2.zxzx;
      r6.xy = r1.xy * ShadowMapSize.zw + r14.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r13.x * r0.z + r0.y;
      r14.xyzw = ShadowMapSize.zwzw * r7.xwzw;
      r6.xy = r1.xy * ShadowMapSize.zw + r14.xy;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r13.y * r0.z + r0.y;
      r2.xyzw = r9.yyww * r2.ywyw;
      r6.xy = r1.xy * ShadowMapSize.zw + r14.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r2.x * r0.z + r0.y;
      r6.xy = r1.xy * ShadowMapSize.zw + r12.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r2.y * r0.z + r0.y;
      r11.x = r10.w;
      r6.xy = r11.xy * ShadowMapSize.zw + r1.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r13.z * r0.z + r0.y;
      r11.zw = r7.xz;
      r7.xyzw = ShadowMapSize.zwzw * r11.zywy;
      r6.xy = r1.xy * ShadowMapSize.zw + r7.xy;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r13.w * r0.z + r0.y;
      r6.xy = r1.xy * ShadowMapSize.zw + r7.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r2.z * r0.z + r0.y;
      r11.x = r8.x;
      r6.xy = r11.xy * ShadowMapSize.zw + r1.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r4.z, int2(0, 0)).x;
      r0.y = r2.w * r0.z + r0.y;
      r1.xy = r5.xy * float2(2,2) + float2(-1,-1);
      r1.xy = float2(-0.800000012,-0.800000012) + abs(r1.xy);
      r1.xy = saturate(float2(5,5) * r1.xy);
      r1.xy = float2(1,1) + -r1.xy;
      r0.z = -0.5 + r5.z;
      r0.z = -abs(r0.z) * 2 + 1;
      r0.z = max(0, r0.z);
      r0.z = min(0.200000003, r0.z);
      r0.xz = float2(0.00036982249,5) * r0.yz;
      r1.x = min(r1.x, r1.y);
      r0.z = min(r1.x, r0.z);
      r1.x = cmp(r0.z != 1.000000);
      if (r1.x != 0) {
        r1.xy = r3.xy * ShadowMapSize.xy + float2(0.5,0.5);
        r1.zw = floor(r1.xy);
        r1.xy = r1.xy + -r1.zw;
        r1.zw = float2(-0.5,-0.5) + r1.zw;
        r2.xy = ShadowMapSize.zw * r1.zw;
        r2.zw = -r1.yx * float2(3,3) + float2(4,4);
        r3.xy = r1.xy * float2(3,3) + float2(1,1);
        r4.xy = -r1.xy * float2(2,2) + float2(3,3);
        r4.xy = r4.xy / r2.wz;
        r4.zw = float2(3,3) + r1.xy;
        r1.xy = r1.xy / r3.xy;
        r5.xw = float2(-2,-2) + r4.xy;
        r5.yz = float2(0.142857149,0.142857149) * r4.wz;
        r4.xy = float2(2,2) + r1.xy;
        r1.x = r2.w * r2.z;
        r6.xyzw = ShadowMapSize.zwzw * r5.xwzw;
        r7.xy = r1.zw * ShadowMapSize.zw + r6.xy;
        r7.z = 1;
        r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r3.z, int2(0, 0)).x;
        r6.xy = float2(7,7) * r2.zw;
        r7.xy = r1.zw * ShadowMapSize.zw + r6.zw;
        r7.z = 1;
        r3.w = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r3.z, int2(0, 0)).x;
        r3.w = r6.x * r3.w;
        r1.x = r1.x * r1.y + r3.w;
        r2.zw = r3.xy * r2.zw;
        r4.zw = r5.wy;
        r7.xyzw = ShadowMapSize.zwzw * r4.xzxw;
        r8.xy = r1.zw * ShadowMapSize.zw + r7.xy;
        r8.z = 1;
        r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r8.xyz, r3.z, int2(0, 0)).x;
        r1.x = r2.z * r1.y + r1.x;
        r8.xyzw = ShadowMapSize.zwzw * r5.xyzy;
        r9.xy = r1.zw * ShadowMapSize.zw + r8.xy;
        r9.z = 1;
        r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r9.xyz, r3.z, int2(0, 0)).x;
        r1.x = r6.y * r1.y + r1.x;
        r6.xy = r1.zw * ShadowMapSize.zw + r8.zw;
        r6.z = 1;
        r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r3.z, int2(0, 0)).x;
        r1.x = r1.y * 49 + r1.x;
        r4.zw = float2(7,7) * r3.xy;
        r6.xy = r1.zw * ShadowMapSize.zw + r7.zw;
        r6.z = 1;
        r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r3.z, int2(0, 0)).x;
        r1.x = r4.z * r1.y + r1.x;
        r5.y = r4.y;
        r5.xyzw = ShadowMapSize.zwzw * r5.xyzy;
        r6.xy = r1.zw * ShadowMapSize.zw + r5.xy;
        r6.z = 1;
        r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r3.z, int2(0, 0)).x;
        r1.x = r2.w * r1.y + r1.x;
        r5.xy = r1.zw * ShadowMapSize.zw + r5.zw;
        r5.z = 1;
        r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r5.xyz, r3.z, int2(0, 0)).x;
        r1.x = r4.w * r1.y + r1.x;
        r1.y = r3.x * r3.y;
        r2.xy = r4.xy * ShadowMapSize.zw + r2.xy;
        r2.z = 1;
        r1.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r2.xyz, r3.z, int2(0, 0)).x;
        r1.x = r1.y * r1.z + r1.x;
        r1.x = 0.0069444445 * r1.x;
        r0.y = r0.y * 0.00036982249 + -r1.x;
        r0.x = r0.z * r0.y + r1.x;
      }
    }
  }
  o0.xyzw = r0.xxxx * r0.wwww;
  return;
}