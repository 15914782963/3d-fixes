//White stuff in the screen, when mark its disable
cbuffer cb1 : register(b1)
{
  float4 cb1[77] : packoffset(c0);
}

cbuffer cb0 : register(b0)
{
  float4 cb0[23] : packoffset(c0);
}
SamplerState s0_s_s : register(s0);
Texture2D<float4> t0 : register(t0);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  uint v0 : SV_VertexID0,
  uint v1 : SV_InstanceID0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : SV_POSITION0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[4];
  r0.x = asuint(cb0[21].x) >> 2;
  r0.y = (int)v0.x & 1;
  r0.zw = (uint2)v0.xx << int2(30,28);
  r0.yzw = (int3)r0.yzw;
  r0.zw = (uint2)r0.zw;
  r1.xy = (uint2)r0.zw >> int2(31,30);
  r0.z = (uint)r1.y;
  r2.x = (uint)r0.y;
  r2.y = r1.x;
  r1.xz = (uint2)r2.xy;
  uiDest.x = (uint)v1.x / (uint)r0.x;
  r2.x = (uint)v1.x % (uint)r0.x;
  r0.x = uiDest.x;
  r2.x = (uint)r2.x;
  r2.y = (uint)r0.x;
  r0.x = (uint)v0.x >> 4;
  r3.x = (uint)r0.x << 1;
  r3.yz = float2(0,0);
  r0.xy = (uint2)r3.xy;
  r0.xy = r2.xy * float2(4,2) + r0.xy;
  r2.xy = asuint(cb0[21].zw);
  r0.xy = r0.xy * r2.xy + cb0[22].zw;
  r2.xyz = cb0[0].zwz * r0.xyx;
  r4.xyz = cb0[0].zwz * float3(-0.5,-0.5,0.5) + r2.xyz;
  r5.xyzw = t0.SampleLevel(s0_s_s, r4.xy, 0).xyzw;
  x0[0].xyzw = r5.xyzw;
  r4.xyzw = t0.SampleLevel(s0_s_s, r4.zy, 0).xyzw;
  x0[1].xyzw = r4.xyzw;
  r2.xyz = cb0[0].zwz * float3(-0.5,0.5,0.5) + r2.xyz;
  r6.xyzw = t0.SampleLevel(s0_s_s, r2.xy, 0).xyzw;
  x0[2].xyzw = r6.xyzw;
  r2.xyzw = t0.SampleLevel(s0_s_s, r2.zy, 0).xyzw;
  x0[3].xyzw = r2.xyzw;
  r7.xyzw = min(r5.xyzw, r4.xyzw);
  r8.xyzw = min(r6.xyzw, r2.xyzw);
  r7.xyzw = min(r8.xyzw, r7.xyzw);
  r8.xyzw = max(r5.xyzw, r4.xyzw);
  r9.xyzw = max(r6.xyzw, r2.xyzw);
  r8.xyzw = max(r9.xyzw, r8.xyzw);
  r7.xyz = r8.xyz + -r7.xyz;
  r1.w = dot(r7.xyz, float3(1,1,1));
  r1.w = cb0[20].x < r1.w;
  r3.x = r7.w < cb1[75].x;
  r3.y = cb1[75].x + cb1[75].w;
  r3.y = r8.w < r3.y;
  r3.xy = r3.xy ? float2(1,1) : 0;
  r3.x = (int)r3.y != (int)r3.x;
  r1.w = (int)r1.w | (int)r3.x;
  r3.x = r8.w + r7.w;
  r3.y = 0.5 * r3.x;
  r7.x = cb1[75].x < r3.y;
  r3.x = r3.x * 0.5 + -cb1[75].x;
  r3.x = -cb1[75].w + r3.x;
  r3.x = max(0, r3.x);
  r3.x = cb1[75].x + r3.x;
  r3.x = r7.x ? r3.x : r3.y;
  r3.x = 9.99999975e-006 * r3.x;
  r3.y = cb1[75].y * cb1[75].z;
  r7.x = cb1[75].x * 9.99999975e-006 + -r3.x;
  r7.x = r7.x * r3.y;
  r7.y = cb1[75].x * 9.99999975e-006 + -cb1[75].z;
  r3.x = r7.y * r3.x;
  r3.x = r7.x / r3.x;
  r3.x = min(1, abs(r3.x));
  r3.x = r3.x < cb0[20].y;
  r1.w = (int)r1.w | (int)r3.x;
  if (r1.w != 0) {
    r8.xyzw = x0[r1.y+0].xyzw;
    r1.y = (uint)v0.x << 29;
    r1.y = (int)r1.y;
    r1.y = (uint)r1.y;
    r9.x = (uint)r1.y >> 31;
    r9.y = (uint)r0.w >> 31;
    r7.xz = (uint2)r9.xy;
    r7.xz = r7.xz + r0.xy;
    r0.xy = float2(-0.5,-0.5) + r7.xz;
  } else {
    r4.xyzw = r5.xyzw + r4.xyzw;
    r4.xyzw = r4.xyzw + r6.xyzw;
    r2.xyzw = r4.xyzw + r2.xyzw;
    r8.xyzw = float4(0.25,0.25,0.25,0.25) * r2.xyzw;
  }
  r0.w = cb1[75].x < r8.w;
  r1.y = -cb1[75].x + r8.w;
  r1.y = -cb1[75].w + r1.y;
  r2.x = max(0, r1.y);
  r2.x = cb1[75].x + r2.x;
  r0.w = r0.w ? r2.x : r8.w;
  r0.w = 9.99999975e-006 * r0.w;
  r2.x = cb1[75].x * 9.99999975e-006 + -r0.w;
  r2.x = r2.x * r3.y;
  r0.w = r0.w * r7.y;
  r0.w = r2.x / r0.w;
  r0.w = min(1, abs(r0.w));
  r2.xy = r0.ww * cb0[22].xy + float2(2,2);
  r0.w = cb1[75].x + -r8.w;
  r0.w = saturate(r0.w / cb1[76].x);
  r2.z = max(9.99999975e-005, cb1[76].y);
  r1.y = saturate(r1.y / r2.z);
  r2.z = r8.w < cb1[75].x;
  r4.w = r2.z ? r0.w : r1.y;
  r8.w = 1;
  r5.xyzw = r8.xyzw * r4.wwww;
  r0.z = 0 != r0.z;
  r0.zw = r0.zz ? float2(0,0) : r2.xy;
  r4.xyz = r5.xyz;
  r4.xyzw = float4(0.25,0.25,0.25,0.25) * r4.xyzw;
  o1.xyzw = r1.wwww ? r4.xyzw : r5.xyzw;
  r0.zw = r1.ww ? r2.xy : r0.zw;
  r3.w = r2.z ? cb0[19].w : 0;
  r1.yw = float2(-0.5,-0.5) + r1.xz;
  r0.xy = r1.yw * r0.zw + r0.xy;
  r0.xy = r0.xy + r3.zw;
  r0.xy = -cb0[16].zw + r0.xy;
  o2.xy = r0.xy / cb0[16].xy;
  o2.zw = float2(0,1);
  o0.xy = r1.xz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.2.6 on Fri Jan 22 22:48:23 2016
//
//
// Buffer Definitions: 
//
// cbuffer cb1
// {
//
//   float4 cb1[77];                    // Offset:    0 Size:  1232
//
// }
//
// cbuffer cb0
// {
//
//   float4 cb0[23];                    // Offset:    0 Size:   368
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s0_s                              sampler      NA          NA    0        1
// t0                                texture  float4          2d    0        1
// cb0                               cbuffer      NA          NA    0        1
// cb1                               cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VertexID              0   x           0   VERTID    uint   x   
// SV_InstanceID            0   x           1   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xy  
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[77], immediateIndexed
dcl_constantbuffer cb0[23], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_sgv v0.x, vertex_id
dcl_input_sgv v1.x, instance_id
dcl_output o0.xy
dcl_output o1.xyzw
dcl_output_siv o2.xyzw, position
dcl_temps 10
dcl_indexableTemp x0[4], 4
ushr r0.x, cb0[21].x, l(2)
and r0.y, v0.x, l(1)
ishl r0.zw, v0.xxxx, l(0, 0, 30, 28)
itof r0.yzw, r0.yyzw
ftou r0.zw, r0.zzzw
ushr r1.xy, r0.zwzz, l(31, 30, 0, 0)
utof r0.z, r1.y
ftou r2.x, r0.y
mov r2.y, r1.x
utof r1.xz, r2.xxyx
udiv r0.x, r2.x, v1.x, r0.x
utof r2.x, r2.x
utof r2.y, r0.x
ushr r0.x, v0.x, l(4)
ishl r3.x, r0.x, l(1)
mov r3.yz, l(0,0,0,0)
utof r0.xy, r3.xyxx
mad r0.xy, r2.xyxx, l(4.000000, 2.000000, 0.000000, 0.000000), r0.xyxx
utof r2.xy, cb0[21].zwzz
mad r0.xy, r0.xyxx, r2.xyxx, cb0[22].zwzz
mul r2.xyz, r0.xyxx, cb0[0].zwzz
mad r4.xyz, cb0[0].zwzz, l(-0.500000, -0.500000, 0.500000, 0.000000), r2.xyzx
sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r4.xyxx, t0.xyzw, s0, l(0.000000)
mov x0[0].xyzw, r5.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r4.zyzz, t0.xyzw, s0, l(0.000000)
mov x0[1].xyzw, r4.xyzw
mad r2.xyz, cb0[0].zwzz, l(-0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
mov x0[2].xyzw, r6.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.zyzz, t0.xyzw, s0, l(0.000000)
mov x0[3].xyzw, r2.xyzw
min r7.xyzw, r4.xyzw, r5.xyzw
min r8.xyzw, r2.xyzw, r6.xyzw
min r7.xyzw, r7.xyzw, r8.xyzw
max r8.xyzw, r4.xyzw, r5.xyzw
max r9.xyzw, r2.xyzw, r6.xyzw
max r8.xyzw, r8.xyzw, r9.xyzw
add r7.xyz, -r7.xyzx, r8.xyzx
dp3 r1.w, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r1.w, cb0[20].x, r1.w
lt r3.x, r7.w, cb1[75].x
add r3.y, cb1[75].w, cb1[75].x
lt r3.y, r8.w, r3.y
and r3.xy, r3.xyxx, l(1, 1, 0, 0)
ine r3.x, r3.y, r3.x
or r1.w, r1.w, r3.x
add r3.x, r7.w, r8.w
mul r3.y, r3.x, l(0.500000)
lt r7.x, cb1[75].x, r3.y
mad r3.x, r3.x, l(0.500000), -cb1[75].x
add r3.x, r3.x, -cb1[75].w
max r3.x, r3.x, l(0.000000)
add r3.x, r3.x, cb1[75].x
movc r3.x, r7.x, r3.x, r3.y
mul r3.x, r3.x, l(0.000010)
mul r3.y, cb1[75].z, cb1[75].y
mad r7.x, cb1[75].x, l(0.000010), -r3.x
mul r7.x, r3.y, r7.x
mad r7.y, cb1[75].x, l(0.000010), -cb1[75].z
mul r3.x, r3.x, r7.y
div r3.x, r7.x, r3.x
min r3.x, |r3.x|, l(1.000000)
lt r3.x, r3.x, cb0[20].y
or r1.w, r1.w, r3.x
if_nz r1.w
  mov r8.xyzw, x0[r1.y + 0].xyzw
  ishl r1.y, v0.x, l(29)
  itof r1.y, r1.y
  ftou r1.y, r1.y
  ushr r9.x, r1.y, l(31)
  ushr r9.y, r0.w, l(31)
  utof r7.xz, r9.xxyx
  add r7.xz, r0.xxyx, r7.xxzx
  add r0.xy, r7.xzxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
else 
  add r4.xyzw, r4.xyzw, r5.xyzw
  add r4.xyzw, r6.xyzw, r4.xyzw
  add r2.xyzw, r2.xyzw, r4.xyzw
  mul r8.xyzw, r2.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
endif 
lt r0.w, cb1[75].x, r8.w
add r1.y, r8.w, -cb1[75].x
add r1.y, r1.y, -cb1[75].w
max r2.x, r1.y, l(0.000000)
add r2.x, r2.x, cb1[75].x
movc r0.w, r0.w, r2.x, r8.w
mul r0.w, r0.w, l(0.000010)
mad r2.x, cb1[75].x, l(0.000010), -r0.w
mul r2.x, r3.y, r2.x
mul r0.w, r7.y, r0.w
div r0.w, r2.x, r0.w
min r0.w, |r0.w|, l(1.000000)
mad r2.xy, r0.wwww, cb0[22].xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
add r0.w, -r8.w, cb1[75].x
div_sat r0.w, r0.w, cb1[76].x
max r2.z, cb1[76].y, l(0.000100)
div_sat r1.y, r1.y, r2.z
lt r2.z, r8.w, cb1[75].x
movc r4.w, r2.z, r0.w, r1.y
mov r8.w, l(1.000000)
mul r5.xyzw, r4.wwww, r8.xyzw
ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), r0.z
movc r0.zw, r0.zzzz, l(0,0,0,0), r2.xxxy
mov r4.xyz, r5.xyzx
mul r4.xyzw, r4.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
movc o1.xyzw, r1.wwww, r4.xyzw, r5.xyzw
movc r0.zw, r1.wwww, r2.xxxy, r0.zzzw
and r3.w, r2.z, cb0[19].w
add r1.yw, r1.xxxz, l(0.000000, -0.500000, 0.000000, -0.500000)
mad r0.xy, r1.ywyy, r0.zwzz, r0.xyxx
add r0.xy, r3.zwzz, r0.xyxx
add r0.xy, r0.xyxx, -cb0[16].zwzz
div o2.xy, r0.xyxx, cb0[16].xyxx
mov o2.zw, l(0,0,0,1.000000)
mov o0.xy, r1.xzxx
ret 
// Approximately 116 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
