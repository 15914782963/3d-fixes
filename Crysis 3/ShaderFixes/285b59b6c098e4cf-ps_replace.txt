
cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 g_GeneralParams : packoffset(c2);
  float4 vFadeParams[6] : packoffset(c3);
  float4 g_vProjectionParams : packoffset(c9);
  float4 PS_NearFarClipDist : packoffset(c10);
  float4 pFadeOrigin : packoffset(c11);
  float4 PS_ScreenSize : packoffset(c12);
  float4 g_vAttenParams : packoffset(c13);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
SamplerState _cubetex2_s : register(s2);
SamplerState _cubetex3_s : register(s3);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);
TextureCube<float4> _cubetex2 : register(t2);
TextureCube<float4> _cubetex3 : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = _tex0.Sample(_tex0_s, v1.xy).x;
  r0.yzw = -r0.xxx * v2.xyz + g_LightPos.xyz;
  r0.yzw = g_LightPos.www * r0.yzw;
  r0.y = dot(r0.yzw, -r0.yzw);
  r0.y = saturate(1 + r0.y);
  r0.y = saturate(r0.y / g_vAttenParams.w);
  r0.z = r0.y * r0.y;
  r0.y = -r0.y * 2 + 3;
  r0.y = r0.z * r0.y;
  r0.y = g_vAttenParams.x * r0.y;
  o0.w = r0.y;
  o1.w = r0.y;
  r0.yzw = _tex1.Sample(_tex1_s, v1.xy).xyz;
  r1.yzw = r0.yzw * float3(2,2,2) + float3(-1,-1,-1);
  r0.y = dot(r1.yz, r1.yz);
  r0.y = min(1, r0.y);
  r0.y = 1 + r0.y;
  r0.y = 2 / r0.y;
  r2.xy = r1.yz * r0.yy;
  r1.x = -1 + r0.y;
  r0.y = 0 < r1.w;
  r2.zw = r0.yy ? r1.xw : -r1.xw;
  r1.xyzw = _cubetex2.Sample(_cubetex2_s, r2.xyz).xyzw;
  r0.y = r1.w * r1.w;
  r0.y = 16 * r0.y;
  r0.yzw = r1.xyz * r0.yyy;
  o0.xyz = g_LightDiffuse.xyz * r0.yzw;
  r0.y = dot(v2.xyz, v2.xyz);
  r0.y = rsqrt(r0.y);
  r0.yzw = v2.xyz * r0.yyy;
  r1.x = dot(r0.yzw, r2.xyz);
  r1.x = r1.x + r1.x;
  r0.yzw = r2.xyz * -r1.xxx + r0.yzw;
  r1.x = dot(r0.yzw, r0.yzw);
  r1.x = rsqrt(r1.x);
  r0.yzw = r1.xxx * r0.yzw;
  r1.xyz = float3(0,0,0) < r0.yzw;
  r2.xyz = g_vProjectionParams.xyz + g_LightPos.xyz;
  r2.xyz = -r0.xxx * v2.xyz + r2.xyz;
  r2.xyz = r2.xyz / r0.yzw;
  r3.xyz = -g_vProjectionParams.xyz + g_LightPos.xyz;
  r3.xyz = -r0.xxx * v2.xyz + r3.xyz;
  r3.xyz = r3.xyz / r0.yzw;
  r1.xyz = r1.xyz ? r2.xyz : r3.xyz;
  r1.x = min(r1.x, r1.y);
  r1.x = min(r1.x, r1.z);
  r0.yzw = r1.xxx * r0.yzw;
  r1.x = dot(r0.yzw, r0.yzw);
  r0.xyz = r0.xxx * v2.xyz + r0.yzw;
  r0.xyz = -g_LightPos.xyz + r0.xyz;
  r0.w = min(1, r1.x);
  r0.w = 1 + -r0.w;
  r0.w = saturate(r2.w * r0.w);
  r1.x = 1 + -r2.w;
  r0.w = r0.w * r1.x + r2.w;
  r0.w = -r0.w * g_GeneralParams.x + g_GeneralParams.x;
  r0.xyzw = _cubetex3.SampleLevel(_cubetex3_s, r0.xyz, r0.w).xyzw;
  r0.w = r0.w * r0.w;
  r0.w = 16 * r0.w;
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = g_LightDiffuse.xyz * g_LightDiffuse.www;
  o1.xyz = r1.xyz * r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 g_GeneralParams;            // Offset:   32 Size:    16
//   float4 vFadeParams[6];             // Offset:   48 Size:    96 [unused]
//   float4 g_vProjectionParams;        // Offset:  144 Size:    16
//   float4 PS_NearFarClipDist;         // Offset:  160 Size:    16 [unused]
//   float4 pFadeOrigin;                // Offset:  176 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:  192 Size:    16 [unused]
//   float4 g_vAttenParams;             // Offset:  208 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex1                             sampler      NA          NA    1        1
// _cubetex2                         sampler      NA          NA    2        1
// _cubetex3                         sampler      NA          NA    3        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _cubetex2                         texture  float4        cube    2        1
// _cubetex3                         texture  float4        cube    3        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[14], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
mad r0.yzw, -r0.xxxx, v2.xxyz, cb0[0].xxyz
mul r0.yzw, r0.yyzw, cb0[0].wwww
dp3 r0.y, r0.yzwy, -r0.yzwy
add_sat r0.y, r0.y, l(1.000000)
div_sat r0.y, r0.y, cb0[13].w
mul r0.z, r0.y, r0.y
mad r0.y, -r0.y, l(2.000000), l(3.000000)
mul r0.y, r0.y, r0.z
mul r0.y, r0.y, cb0[13].x
mov o0.w, r0.y
mov o1.w, r0.y
sample_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t1.wxyz, s1
mad r1.yzw, r0.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
dp2 r0.y, r1.yzyy, r1.yzyy
min r0.y, r0.y, l(1.000000)
add r0.y, r0.y, l(1.000000)
div r0.y, l(2.000000), r0.y
mul r2.xy, r0.yyyy, r1.yzyy
add r1.x, r0.y, l(-1.000000)
lt r0.y, l(0.000000), r1.w
movc r2.zw, r0.yyyy, r1.xxxw, -r1.xxxw
sample_indexable(texturecube)(float,float,float,float) r1.xyzw, r2.xyzx, t2.xyzw, s2
mul r0.y, r1.w, r1.w
mul r0.y, r0.y, l(16.000000)
mul r0.yzw, r0.yyyy, r1.xxyz
mul o0.xyz, r0.yzwy, cb0[1].xyzx
dp3 r0.y, v2.xyzx, v2.xyzx
rsq r0.y, r0.y
mul r0.yzw, r0.yyyy, v2.xxyz
dp3 r1.x, r0.yzwy, r2.xyzx
add r1.x, r1.x, r1.x
mad r0.yzw, r2.xxyz, -r1.xxxx, r0.yyzw
dp3 r1.x, r0.yzwy, r0.yzwy
rsq r1.x, r1.x
mul r0.yzw, r0.yyzw, r1.xxxx
lt r1.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.yzwy
add r2.xyz, cb0[0].xyzx, cb0[9].xyzx
mad r2.xyz, -r0.xxxx, v2.xyzx, r2.xyzx
div r2.xyz, r2.xyzx, r0.yzwy
add r3.xyz, cb0[0].xyzx, -cb0[9].xyzx
mad r3.xyz, -r0.xxxx, v2.xyzx, r3.xyzx
div r3.xyz, r3.xyzx, r0.yzwy
movc r1.xyz, r1.xyzx, r2.xyzx, r3.xyzx
min r1.x, r1.y, r1.x
min r1.x, r1.z, r1.x
mul r0.yzw, r0.yyzw, r1.xxxx
dp3 r1.x, r0.yzwy, r0.yzwy
mad r0.xyz, r0.xxxx, v2.xyzx, r0.yzwy
add r0.xyz, r0.xyzx, -cb0[0].xyzx
min r0.w, r1.x, l(1.000000)
add r0.w, -r0.w, l(1.000000)
mul_sat r0.w, r0.w, r2.w
add r1.x, -r2.w, l(1.000000)
mad r0.w, r0.w, r1.x, r2.w
mad r0.w, -r0.w, cb0[2].x, cb0[2].x
sample_l_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.xyzx, t3.xyzw, s3, r0.w
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, l(16.000000)
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, cb0[1].wwww, cb0[1].xyzx
mul o1.xyz, r0.xyzx, r1.xyzx
ret 
// Approximately 63 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
