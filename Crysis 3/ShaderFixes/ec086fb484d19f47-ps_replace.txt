//Rain Drop
cbuffer PER_BATCH : register(b0)
{
  float4 PS_NearFarClipDist : packoffset(c0);
  float4 sceneRainParams0 : packoffset(c1);
  float4 sceneRainParams1 : packoffset(c2);
}
SamplerState rainHDRSampler_s : register(s0);
SamplerState depthMapSampler_s : register(s1);
SamplerState rainDistOccSampler_s : register(s2);
SamplerState rainfallSampler_s : register(s3);
SamplerState rainStreakSampler_s : register(s4);
Texture2D<float4> rainHDRSampler : register(t0);
Texture2D<float4> depthMapSampler : register(t1);
Texture2D<float4> rainDistOccSampler : register(t2);
Texture2D<float4> rainfallSampler : register(t3);
Texture2D<float4> rainStreakSampler : register(t4);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0,
  
  float4 g_VS_NearFarClipDist : TEXCOORD6,
  float4 g_VS_ScreenSize : TEXCOORD10)
  
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  r0.xy = v2.xy / v2.ww;
  r0.x = depthMapSampler.Sample(depthMapSampler_s, r0.xy).x;
  
  //float4 stereo = StereoParams.Load(0);
  //float depth = r0.x * g_VS_NearFarClipDist.y;
  //v4.x -= stereo.x * (depth - stereo.y) / depth * g_VS_ScreenSize.x / 2;
  
  r0.x = r0.x * PS_NearFarClipDist.y + -v2.w;
  r0.x = saturate(r0.x + r0.x);
  r0.x = 0.300000012 * r0.x;
  r0.y = saturate(v5.z);
  r0.x = r0.x * r0.y;
  r0.y = 1 + -v5.z;
  r0.y = saturate(10 * r0.y);
  r0.x = r0.x * r0.y;

  r0.yzw = rainfallSampler.Sample(rainfallSampler_s, v3.zw).xyz;
  r0.yzw = v5.yyy * r0.yzw;
  r1.xyz = rainfallSampler.Sample(rainfallSampler_s, v3.xy).xyz;
  r0.yzw = r1.xyz * v5.xxx + r0.yzw;
  r1.xyz = rainfallSampler.Sample(rainfallSampler_s, v4.xy).xyz;
  r0.yzw = r1.xyz * v5.xxx + r0.yzw;
  r1.xyz = rainfallSampler.Sample(rainfallSampler_s, v4.zw).xyz;
  r0.yzw = r1.xyz * v5.yyy + r0.yzw;
  r0.xyz = r0.yzw * r0.xxx;
  r0.xyz = r0.xyz * sceneRainParams0.yyy + r0.xyz;
  r0.xyz = sceneRainParams0.xxx * r0.xyz;
  r1.xy = v1.xy / v1.ww;
  r0.w = rainDistOccSampler.Sample(rainDistOccSampler_s, r1.xy).x;
  r0.xyz = r0.xyz * r0.www;
  r0.w = saturate(1 + v5.z);
  r0.xyz = r0.xyz * r0.www;
  r0.x = dot(r0.xyz, float3(0.333000004,0.333000004,0.333000004));
  r0.y = 0.5 * r0.x;
  o0.w = r0.x;
  r0.xz = rainStreakSampler.Sample(rainStreakSampler_s, v3.zw).xy;
  r1.zw = rainStreakSampler.Sample(rainStreakSampler_s, v3.xy).xy;
  r0.xz = -r1.zw + r0.xz;
  r0.xz = v5.yy * r0.xz + r1.zw;
  r0.xz = float2(-0.25,-0.25) + r0.xz;
  r0.xz = r0.xz * float2(0.200000003,0.200000003) + r1.xy;
  r1.xyzw = rainHDRSampler.Sample(rainHDRSampler_s, r0.xz).xyzw;
  r0.x = 32 * r1.w;
  r0.xzw = r1.xyz * r0.xxx + float3(-0.330000013,-0.330000013,-0.330000013);
  r0.xzw = max(float3(0,0,0), r0.xzw);
  r0.xzw = r0.yyy * r0.xzw;
  o0.xyz = r0.xzw * sceneRainParams1.xxx + r0.yyy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Sun Jul 19 16:27:43 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 PS_NearFarClipDist;         // Offset:    0 Size:    16
//   float4 sceneRainParams0;           // Offset:   16 Size:    16
//   float4 sceneRainParams1;           // Offset:   32 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// rainHDRSampler                    sampler      NA          NA    0        1
// depthMapSampler                   sampler      NA          NA    1        1
// rainDistOccSampler                sampler      NA          NA    2        1
// rainfallSampler                   sampler      NA          NA    3        1
// rainStreakSampler                 sampler      NA          NA    4        1
// rainHDRSampler                    texture  float4          2d    0        1
// depthMapSampler                   texture  float4          2d    1        1
// rainDistOccSampler                texture  float4          2d    2        1
// rainfallSampler                   texture  float4          2d    3        1
// rainStreakSampler                 texture  float4          2d    4        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_temps 2
div r0.xy, v2.xyxx, v2.wwww
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t1.xyzw, s1
mad r0.x, r0.x, cb0[0].y, -v2.w
add_sat r0.x, r0.x, r0.x
mul r0.x, r0.x, l(0.300000)
mov_sat r0.y, v5.z
mul r0.x, r0.y, r0.x
add r0.y, -v5.z, l(1.000000)
mul_sat r0.y, r0.y, l(10.000000)
mul r0.x, r0.y, r0.x
sample_indexable(texture2d)(float,float,float,float) r0.yzw, v3.zwzz, t3.wxyz, s3
mul r0.yzw, r0.yyzw, v5.yyyy
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v3.xyxx, t3.xyzw, s3
mad r0.yzw, r1.xxyz, v5.xxxx, r0.yyzw
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t3.xyzw, s3
mad r0.yzw, r1.xxyz, v5.xxxx, r0.yyzw
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.zwzz, t3.xyzw, s3
mad r0.yzw, r1.xxyz, v5.yyyy, r0.yyzw
mul r0.xyz, r0.xxxx, r0.yzwy
mad r0.xyz, r0.xyzx, cb0[1].yyyy, r0.xyzx
mul r0.xyz, r0.xyzx, cb0[1].xxxx
div r1.xy, v1.xyxx, v1.wwww
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t2.yzwx, s2
mul r0.xyz, r0.wwww, r0.xyzx
add_sat r0.w, v5.z, l(1.000000)
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.x, r0.xyzx, l(0.333000, 0.333000, 0.333000, 0.000000)
mul r0.y, r0.x, l(0.500000)
mov o0.w, r0.x
sample_indexable(texture2d)(float,float,float,float) r0.xz, v3.zwzz, t4.xzyw, s4
sample_indexable(texture2d)(float,float,float,float) r1.zw, v3.xyxx, t4.zwxy, s4
add r0.xz, r0.xxzx, -r1.zzwz
mad r0.xz, v5.yyyy, r0.xxzx, r1.zzwz
add r0.xz, r0.xxzx, l(-0.250000, 0.000000, -0.250000, 0.000000)
mad r0.xz, r0.xxzx, l(0.200000, 0.000000, 0.200000, 0.000000), r1.xxyx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xzxx, t0.xyzw, s0
mul r0.x, r1.w, l(32.000000)
mad r0.xzw, r1.xxyz, r0.xxxx, l(-0.330000, 0.000000, -0.330000, -0.330000)
max r0.xzw, r0.xxzw, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r0.xzw, r0.xxzw, r0.yyyy
mad o0.xyz, r0.xzwx, cb0[2].xxxx, r0.yyyy
ret 
// Approximately 42 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
