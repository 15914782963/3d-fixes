cbuffer cb2 : register(b2)
{
  float4 cb2[224];
}


cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 g_WorldViewPos : packoffset(c2);
  float4 g_cDeferredAmbient : packoffset(c3);
  float4 g_GeneralParams : packoffset(c4);
  float4 g_cAmbGround : packoffset(c5);
  float4 g_vAmbHeightParams : packoffset(c6);
  float4 g_vProjectionParams : packoffset(c7);
  float4 PS_ScreenSize : packoffset(c8);
}

cbuffer PER_FRAME : register(b2)
{
  float4 g_PS_ProjRatio : packoffset(c223);
}
SamplerState _cubetex1_s : register(s1);
SamplerState _cubetex2_s : register(s2);
Texture2DMS<float4> _tex0MS : register(t0);
TextureCube<float4> _cubetex1 : register(t1);
TextureCube<float4> _cubetex2 : register(t2);
Texture2DMS<float4> DepthTexMS : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = PS_ScreenSize.xy * v1.xy;
  r0.xy = (int2)r0.xy;
  r0.zw = float2(0,0);
  r0.z = DepthTexMS.Load(r0.xy, 0).x;
  r0.xyw = _tex0MS.Load(r0.xy, 0).xyz;
  r1.yzw = r0.xyw * float3(2,2,2) + float3(-1,-1,-1);
  r0.x = -cb2[223].x + r0.z;
  r0.x = cb2[223].y / r0.x;
  r0.x = r0.x * v2.z + g_WorldViewPos.z;
  r0.x = -g_vAmbHeightParams.x + r0.x;
  r0.x = saturate(g_vAmbHeightParams.z * r0.x);
  r0.y = dot(r1.yz, r1.yz);
  r0.y = min(1, r0.y);
  r0.y = 1 + r0.y;
  r0.y = 2 / r0.y;
  r1.x = -1 + r0.y;
  r2.xy = r1.yz * r0.yy;
  r0.y = 0 < r1.w;
  r2.zw = r0.yy ? r1.xw : -r1.xw;
  r1.xyzw = _cubetex1.Sample(_cubetex1_s, r2.xyz).xyzw;
  r0.y = r1.w * r1.w;
  r0.y = 16 * r0.y;
  r0.yzw = r1.xyz * r0.yyy;
  r0.yzw = r0.yzw * g_LightDiffuse.xyz + g_cDeferredAmbient.xyz;
  r0.yzw = -g_cAmbGround.xyz + r0.yzw;
  r0.xyz = r0.xxx * r0.yzw + g_cAmbGround.xyz;
  r0.w = r2.z * 0.25 + 0.75;
  o0.xyz = r0.xyz * r0.www;
  o0.w = 0;
  r0.x = dot(v2.xyz, r2.xyz);
  r0.x = r0.x + r0.x;
  r0.xyz = r2.xyz * -r0.xxx + v2.xyz;
  r0.w = -r2.w * g_GeneralParams.x + g_GeneralParams.x;
  r0.xyzw = _cubetex2.SampleLevel(_cubetex2_s, r0.xyz, r0.w).xyzw;
  r0.w = r0.w * r0.w;
  r0.w = 16 * r0.w;
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = g_LightDiffuse.xyz * g_LightDiffuse.www;
  o1.xyz = r1.xyz * r0.xyz;
  o1.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Wed Jul 29 22:19:54 2015
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16 [unused]
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 g_WorldViewPos;             // Offset:   32 Size:    16
//   float4 g_cDeferredAmbient;         // Offset:   48 Size:    16
//   float4 g_GeneralParams;            // Offset:   64 Size:    16
//   float4 g_cAmbGround;               // Offset:   80 Size:    16
//   float4 g_vAmbHeightParams;         // Offset:   96 Size:    16
//   float4 g_vProjectionParams;        // Offset:  112 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:  128 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   float4 g_PS_ProjRatio;             // Offset: 3568 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _cubetex1                         sampler      NA          NA    1        1
// _cubetex2                         sampler      NA          NA    2        1
// _tex0MS                           texture  float4        2dMS    0        1
// _cubetex1                         texture  float4        cube    1        1
// _cubetex2                         texture  float4        cube    2        1
// DepthTexMS                        texture  float4        2dMS    3        1
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_FRAME                         cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb2[224], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2dms(0) (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2dms(0) (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 3
mul r0.xy, v1.xyxx, cb0[8].xyxx
ftoi r0.xy, r0.xyxx
mov r0.zw, l(0,0,0,0)
ldms_indexable(texture2dms)(float,float,float,float) r0.z, r0.xyzw, t3.yzxw, l(0)
ldms_indexable(texture2dms)(float,float,float,float) r0.xyw, r0.xyww, t0.xywz, l(0)
mad r1.yzw, r0.xxyw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
add r0.x, r0.z, -cb2[223].x
div r0.x, cb2[223].y, r0.x
mad r0.x, r0.x, v2.z, cb0[2].z
add r0.x, r0.x, -cb0[6].x
mul_sat r0.x, r0.x, cb0[6].z
dp2 r0.y, r1.yzyy, r1.yzyy
min r0.y, r0.y, l(1.000000)
add r0.y, r0.y, l(1.000000)
div r0.y, l(2.000000), r0.y
add r1.x, r0.y, l(-1.000000)
mul r2.xy, r0.yyyy, r1.yzyy
lt r0.y, l(0.000000), r1.w
movc r2.zw, r0.yyyy, r1.xxxw, -r1.xxxw
sample_indexable(texturecube)(float,float,float,float) r1.xyzw, r2.xyzx, t1.xyzw, s1
mul r0.y, r1.w, r1.w
mul r0.y, r0.y, l(16.000000)
mul r0.yzw, r0.yyyy, r1.xxyz
mad r0.yzw, r0.yyzw, cb0[1].xxyz, cb0[3].xxyz
add r0.yzw, r0.yyzw, -cb0[5].xxyz
mad r0.xyz, r0.xxxx, r0.yzwy, cb0[5].xyzx
mad r0.w, r2.z, l(0.250000), l(0.750000)
mul o0.xyz, r0.wwww, r0.xyzx
mov o0.w, l(0)
dp3 r0.x, v2.xyzx, r2.xyzx
add r0.x, r0.x, r0.x
mad r0.xyz, r2.xyzx, -r0.xxxx, v2.xyzx
mad r0.w, -r2.w, cb0[4].x, cb0[4].x
sample_l_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.xyzx, t2.xyzw, s2, r0.w
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, l(16.000000)
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, cb0[1].wwww, cb0[1].xyzx
mul o1.xyz, r0.xyzx, r1.xyzx
mov o1.w, l(0)
ret 
// Approximately 41 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
