
cbuffer PER_BATCH : register(b0)
{
  float4 g_WorldViewPos : packoffset(c0);
  row_major float4x4 g_mLightProj : packoffset(c1);
  float4 g_GeneralParams : packoffset(c5);
  float4 g_ScreenScale : packoffset(c6);
  float4 vWBasisX : packoffset(c7);
  float4 vWBasisY : packoffset(c8);
  float4 vWBasisZ : packoffset(c9);
  row_major float4x4 g_mDecalTS : packoffset(c10);
  float4 g_DecalDiffuse : packoffset(c14);
  float4 PS_NearFarClipDist : packoffset(c15);
  float4 g_DecalSpecular : packoffset(c16);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex2_s : register(s2);
SamplerState _tex5_s : register(s5);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex2 : register(t2);
Texture2D<float4> _tex5 : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = vWBasisX.xyz * v0.xxx + vWBasisZ.xyz;
  r0.xyz = vWBasisY.xyz * v0.yyy + r0.xyz;
  r1.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  r0.w = _tex0.Sample(_tex0_s, r1.xy).x;
  r1.xyz = _tex5.SampleLevel(_tex5_s, r1.xy, 0).xyz;
  r1.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.xyz = r0.xyz * r0.www + g_WorldViewPos.xyz;
  r0.w = 1;
  r2.x = dot(g_mLightProj._m00_m01_m02_m03, r0.xyzw);
  r2.y = dot(g_mLightProj._m10_m11_m12_m13, r0.xyzw);
  r2.z = dot(g_mLightProj._m20_m21_m22_m23, r0.xyzw);
  r0.x = dot(g_mLightProj._m30_m31_m32_m33, r0.xyzw);
  r0.xyz = r2.xyz / r0.xxx;
  r2.xyzw = r0.xyxy * float4(1,1,-1,-1) + float4(0,0,1,1);
  r2.xyzw = r2.xyzw < float4(0,0,0,0);
  r2.xy = (int2)r2.zw | (int2)r2.xy;
  r0.w = (int)r2.y | (int)r2.x;
  if (r0.w != 0) discard;
  r2.xy = r0.zz < float2(0,0.200000003);
  if (r2.x != 0) discard;
  r0.w = r2.y ? 5 : 1.20000005;
  r2.xyzw = _tex2.SampleLevel(_tex2_s, r0.xy, 0).xyzw;
  r0.x = -0.200000003 + r0.z;
  r0.x = r0.x * r0.w;
  r0.x = -r0.x * r0.x + 1;
  r0.y = -g_GeneralParams.w + r2.w;
  r2.xyzw = g_DecalDiffuse.xyzw * r2.xyzw;
  r0.y = r0.y < 0;
  if (r0.y != 0) discard;
  o0.xyzw = float4(0,0,1,0);
  r0.y = dot(r1.xy, r1.xy);
  r0.y = min(1, r0.y);
  r0.y = 1 + r0.y;
  r0.y = 2 / r0.y;
  r0.z = -1 + r0.y;
  r3.xy = r1.xy * r0.yy;
  r0.y = 0 < r1.z;
  r3.z = r0.y ? r0.z : -r0.z;
  r0.y = dot(r3.xyz, g_mDecalTS._m20_m21_m22);
  r0.xy = max(float2(0,0.550000012), r0.xy);
  r0.y = min(1, r0.y);
  r0.y = -0.550000012 + r0.y;
  r0.z = r0.y * -4.44444466 + 3;
  r0.y = 2.22222233 * r0.y;
  r0.y = r0.y * r0.y;
  r0.y = r0.z * r0.y;
  r0.x = r0.x * r0.y;
  o1.w = r2.w * r0.x;
  r0.xyz = sqrt(r2.xyz);
  r1.x = (int)v0.x;
  r1.y = max((int)-r1.x, (int)r1.x);
  r1.xy = (int2)r1.xy & int2(0,1);
  r1.z = -(int)r1.y;
  r1.x = r1.x ? r1.z : r1.y;
  r1.xyzw = r1.xxxx ? float4(0.5,-0.418599993,-0.0812999979,0.5) : float4(-0.168699995,-0.331200004,0.5,0.5);
  r0.w = 1;
  o1.y = dot(r1.xyzw, r0.xyzw);
  o1.x = dot(float3(0.298999995,0.587000012,0.114), r0.xyz);
  r0.x = dot(g_DecalSpecular.xyz, float3(0.212599993,0.715200007,0.0722000003));
  o1.z = sqrt(r0.x);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_WorldViewPos;             // Offset:    0 Size:    16
//   row_major float4x4 g_mLightProj;   // Offset:   16 Size:    64
//   float4 g_GeneralParams;            // Offset:   80 Size:    16
//   float4 g_ScreenScale;              // Offset:   96 Size:    16
//   float4 vWBasisX;                   // Offset:  112 Size:    16
//   float4 vWBasisY;                   // Offset:  128 Size:    16
//   float4 vWBasisZ;                   // Offset:  144 Size:    16
//   row_major float4x4 g_mDecalTS;     // Offset:  160 Size:    64
//   float4 g_DecalDiffuse;             // Offset:  224 Size:    16
//   float4 PS_NearFarClipDist;         // Offset:  240 Size:    16 [unused]
//   float4 g_DecalSpecular;            // Offset:  256 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex2                             sampler      NA          NA    2        1
// _tex5                             sampler      NA          NA    5        1
// _tex0                             texture  float4          2d    0        1
// _tex2                             texture  float4          2d    2        1
// _tex5                             texture  float4          2d    5        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[17], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 4
mad r0.xyz, cb0[7].xyzx, v0.xxxx, cb0[9].xyzx
mad r0.xyz, cb0[8].xyzx, v0.yyyy, r0.xyzx
mad r1.xy, v0.xyxx, cb0[6].xyxx, cb0[6].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t0.yzwx, s0
sample_l_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t5.xyzw, s5, l(0.000000)
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r0.xyz, r0.xyzx, r0.wwww, cb0[0].xyzx
mov r0.w, l(1.000000)
dp4 r2.x, cb0[1].xyzw, r0.xyzw
dp4 r2.y, cb0[2].xyzw, r0.xyzw
dp4 r2.z, cb0[3].xyzw, r0.xyzw
dp4 r0.x, cb0[4].xyzw, r0.xyzw
div r0.xyz, r2.xyzx, r0.xxxx
mad r2.xyzw, r0.xyxy, l(1.000000, 1.000000, -1.000000, -1.000000), l(0.000000, 0.000000, 1.000000, 1.000000)
lt r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
or r2.xy, r2.zwzz, r2.xyxx
or r0.w, r2.y, r2.x
discard_nz r0.w
lt r2.xy, r0.zzzz, l(0.000000, 0.200000, 0.000000, 0.000000)
discard_nz r2.x
movc r0.w, r2.y, l(5.000000), l(1.200000)
sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t2.xyzw, s2, l(0.000000)
add r0.x, r0.z, l(-0.200000)
mul r0.x, r0.w, r0.x
mad r0.x, -r0.x, r0.x, l(1.000000)
add r0.y, r2.w, -cb0[5].w
mul r2.xyzw, r2.xyzw, cb0[14].xyzw
lt r0.y, r0.y, l(0.000000)
discard_nz r0.y
mov o0.xyzw, l(0,0,1.000000,0)
dp2 r0.y, r1.xyxx, r1.xyxx
min r0.y, r0.y, l(1.000000)
add r0.y, r0.y, l(1.000000)
div r0.y, l(2.000000), r0.y
add r0.z, r0.y, l(-1.000000)
mul r3.xy, r0.yyyy, r1.xyxx
lt r0.y, l(0.000000), r1.z
movc r3.z, r0.y, r0.z, -r0.z
dp3 r0.y, r3.xyzx, cb0[12].xyzx
max r0.xy, r0.xyxx, l(0.000000, 0.550000, 0.000000, 0.000000)
min r0.y, r0.y, l(1.000000)
add r0.y, r0.y, l(-0.550000)
mad r0.z, r0.y, l(-4.444445), l(3.000000)
mul r0.y, r0.y, l(2.222222)
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r0.z
mul r0.x, r0.y, r0.x
mul o1.w, r0.x, r2.w
sqrt r0.xyz, r2.xyzx
ftoi r1.x, v0.x
imax r1.y, r1.x, -r1.x
and r1.xy, r1.xyxx, l(0x80000000, 1, 0, 0)
ineg r1.z, r1.y
movc r1.x, r1.x, r1.z, r1.y
movc r1.xyzw, r1.xxxx, l(0.500000,-0.418600,-0.081300,0.500000), l(-0.168700,-0.331200,0.500000,0.500000)
mov r0.w, l(1.000000)
dp4 o1.y, r1.xyzw, r0.xyzw
dp3 o1.x, l(0.299000, 0.587000, 0.114000, 0.000000), r0.xyzx
dp3 r0.x, cb0[16].xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
sqrt o1.z, r0.x
ret 
// Approximately 61 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
