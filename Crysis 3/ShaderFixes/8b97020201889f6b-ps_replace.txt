//Shadows
cbuffer PER_BATCH : register(b0)
{
  float4 vBasisMagnitudes : packoffset(c0);
  float4 vWBasisY : packoffset(c1);
  float4 vWBasisX : packoffset(c2);
  float4 irreg_kernel_2d[8] : packoffset(c3);
  float4 PS_NearFarClipDist : packoffset(c11);
  float4 vInvShadowMapWH : packoffset(c12);
  float4 fDepthShift : packoffset(c13);
  float4 fShadowFadingDist : packoffset(c14);
  float4 vCamPos : packoffset(c15);
  float4 vWBasisZ : packoffset(c16);
  float4 fDepthTestBias : packoffset(c17);
  float4 fKernelRadius : packoffset(c18);
}
SamplerState sceneDepthSampler_s : register(s0);
SamplerState sRotSampler_s : register(s2);
SamplerComparisonState SAMPLER_STATE_depthMapSampler_s : register(s1);
Texture2D<float4> sceneDepthSampler : register(t0);
Texture2D<float4> sRotSampler : register(t1);
Texture2D<float4> depthMapSampler0 : register(t2);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  
  float4 g_VS_NearFarClipDist : TEXCOORD2,
  float4 g_VS_ScreenSize : TEXCOORD3)
  
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = sceneDepthSampler.Sample(sceneDepthSampler_s, v2.xy).x;
    
  float4 stereo = StereoParams.Load(0);
  float depth = r0.x * g_VS_NearFarClipDist.y;
  v0.x -= stereo.x * (depth - stereo.y) / depth * g_VS_ScreenSize.x / 2;
  
  r0.yzw = vBasisMagnitudes.xyz * r0.xxx;
  r1.xy = v1.zw * r0.xx + v1.xy;
  r0.xy = v0.xy * r0.yz;
  r2.xyzw = vWBasisX.xyzw * r0.xxxx;
  r2.xyzw = vWBasisZ.xyzw * r0.wwww + r2.xyzw;
  r0.xyzw = vWBasisY.xyzw * r0.yyyy + r2.xyzw;
  r0.xyzw = vCamPos.xyzw + r0.xyzw;
  r0.z = -fDepthTestBias.x + r0.z;
  r0.xy = r0.xy / r0.ww;
  r0.z = max(r0.z, 0.000000000e+000);
  r0.z = min(r0.z, 9.999989867e-001);
  r0.w = 1.500000000e+001 * fKernelRadius.y;
  r1.xy = r1.xy * r0.ww;
  r1.xy = sRotSampler.Sample(sRotSampler_s, r1.xy).xy;
  r2.xyz = fKernelRadius.yxx * vInvShadowMapWH.yxx;
  r1.xyz = r2.xyz * r1.yxx;
  r1.w = -r1.x;
  r2.xyzw = irreg_kernel_2d[0].yyzz * r1.xzzw;
  r2.xyzw = r1.zwxz * irreg_kernel_2d[0].xxww + r2.xyzw;
  r2.xyzw = r2.xyzw + r0.xyxy;
  r3.x = depthMapSampler0.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r2.xy, r0.z).x;
  r3.y = depthMapSampler0.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r2.zw, r0.z).x;
  r2.xyzw = irreg_kernel_2d[1].yyzz * r1.xzzw;
  r2.xyzw = r1.zwxz * irreg_kernel_2d[1].xxww + r2.xyzw;
  r2.xyzw = r2.xyzw + r0.xyxy;
  r3.z = depthMapSampler0.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r2.xy, r0.z).x;
  r3.w = depthMapSampler0.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r2.zw, r0.z).x;
  r0.w = dot(r3.xyzw, float4(1.250000e-001,1.250000e-001,1.250000e-001,1.250000e-001));
  r2.xyzw = irreg_kernel_2d[2].yyzz * r1.xzzw;
  r2.xyzw = r1.zwxz * irreg_kernel_2d[2].xxww + r2.xyzw;
  r2.xyzw = r2.xyzw + r0.xyxy;
  r3.x = depthMapSampler0.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r2.xy, r0.z).x;
  r3.y = depthMapSampler0.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r2.zw, r0.z).x;
  r2.xyzw = irreg_kernel_2d[3].yyzz * r1.xyzw;
  r1.xyzw = r1.zwxz * irreg_kernel_2d[3].xxww + r2.xyzw;
  r1.xyzw = r1.xyzw + r0.xyxy;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + r0.xy;
  r0.xy = abs(r0.xy) + abs(r0.xy);
  r0.x = max(r0.y, r0.x);
  r0.x = r0.x * r0.x;
  r0.x = r0.x * r0.x;
  r0.x = r0.x * r0.x;
  r0.x = saturate(-fShadowFadingDist.x * r0.x + 1.000000000e+000);
  r3.z = depthMapSampler0.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r1.xy, r0.z).x;
  r3.w = depthMapSampler0.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r1.zw, r0.z).x;
  r0.y = dot(r3.xyzw, float4(1.250000e-001,1.250000e-001,1.250000e-001,1.250000e-001));
  r0.y = r0.w + r0.y;
  r0.y = -r0.y * r0.y + 1.000000000e+000;
  o0.xyzw = r0.yyyy * r0.xxxx;
  return;
}