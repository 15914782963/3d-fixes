//Decals PS
cbuffer PER_BATCH : register(b0)
{
  float4 g_WorldViewPos : packoffset(c0);
  row_major float4x4 g_mLightProj : packoffset(c1);
  float4 g_ScreenScale : packoffset(c5);
  float4 vWBasisX : packoffset(c6);
  float4 vWBasisY : packoffset(c7);
  float4 vWBasisZ : packoffset(c8);
  row_major float4x4 g_mDecalTS : packoffset(c9);
  float4 g_DecalDiffuse : packoffset(c13);
  float4 PS_NearFarClipDist : packoffset(c14);
  float4 g_DecalSpecular : packoffset(c15);
  float4 g_DecalFresnel : packoffset(c16);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex2_s : register(s2);
SamplerState _tex3_s : register(s3);
SamplerState _tex4_s : register(s4);
SamplerState _tex5_s : register(s5);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex2 : register(t2);
Texture2D<float4> _tex3 : register(t3);
Texture2D<float4> _tex4 : register(t4);
Texture2D<float4> _tex5 : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  
  row_major matrix vp : TEXCOORD0,
 row_major matrix ivp : TEXCOORD4)
  
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = vWBasisX.xyz * v0.xxx + vWBasisZ.xyz;
  r0.xyz = vWBasisY.xyz * v0.yyy + r0.xyz;
  r1.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  r0.w = _tex0.Sample(_tex0_s, r1.xy).x;
  r1.xyz = _tex5.SampleLevel(_tex5_s, r1.xy, 0.000000000e+000).xyz;
  r1.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.xyz = r0.xyz * r0.www + g_WorldViewPos.xyz;
  r0.xyz = r0.xyz * r0.www;
  r2.w = 1.000000000e+000;
  
  float4 stereo = StereoParams.Load(0);
  float4 tmp = mul(vp, r2);
  tmp.x -= stereo.x * (tmp.w - stereo.y);
  r2 = mul(ivp, tmp);
  
  r3.x = dot(g_mLightProj._m00_m01_m02_m03, r2.xyzw);
  r3.y = dot(g_mLightProj._m10_m11_m12_m13, r2.xyzw);
  r3.z = dot(g_mLightProj._m20_m21_m22_m23, r2.xyzw);
  r0.w = dot(g_mLightProj._m30_m31_m32_m33, r2.xyzw);
  r2.xyz = r3.xyz / r0.www;
  r3.xyzw = r2.xyxy * float4(1.000000e+000,1.000000e+000,-1.000000e+000,-1.000000e+000) + float4(0.000000e+000,0.000000e+000,1.000000e+000,1.000000e+000);
  r3.xyzw = r3.xyzw < float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  r3.xy = (int2)r3.zw | (int2)r3.xy;
  r0.w = (int)r3.y | (int)r3.x;
  if (r0.w != 0) discard;
  r3.xy = r2.zz < float2(0.000000e+000,2.000000e-001);
  if (r3.x != 0) discard;
  r0.w = r3.y ? 5.000000000e+000 : 1.200000048e+000;
  r1.w = dot(r1.xy, r1.xy);
  r1.w = min(r1.w, 1.000000000e+000);
  r1.w = 1.000000000e+000 + r1.w;
  r1.w = 2.000000000e+000 / r1.w;
  r2.w = -1.000000000e+000 + r1.w;
  r3.xy = r1.xy * r1.ww;
  r1.x = 0.000000000e+000 < r1.z;
  r3.z = r1.x ? r2.w : -r2.w;
  r1.x = dot(r3.xyz, g_mDecalTS._m20_m21_m22);
  r1.x = max(r1.x, 5.500000119e-001);
  r1.x = min(r1.x, 1.000000000e+000);
  r1.x = -5.500000119e-001 + r1.x;
  r1.y = r1.x * -4.444444656e+000 + 3.000000000e+000;
  r1.x = 2.222222328e+000 * r1.x;
  r1.x = r1.x * r1.x;
  r1.x = r1.y * r1.x;
  r1.y = -2.000000030e-001 + r2.z;
  r0.w = r1.y * r0.w;
  r0.w = -r0.w * r0.w + 1.000000000e+000;
  r0.w = max(r0.w, 0.000000000e+000);
  r0.w = r0.w * r1.x;
  r1.xyzw = _tex2.SampleLevel(_tex2_s, r2.xy, 0.000000000e+000).xyzw;
  r1.xyzw = g_DecalDiffuse.xyzw * r1.xyzw;
  r0.w = r1.w * r0.w;
  r1.xyz = sqrt(r1.xyz);
  o0.w = r0.w;
  o1.w = r0.w;
  r2.zw = _tex4.SampleLevel(_tex4_s, r2.xy, 0.000000000e+000).xz;
  r2.xy = _tex3.SampleLevel(_tex3_s, r2.xy, 0.000000000e+000).xy;
  r2.xy = r2.yx * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = g_DecalSpecular.w * r2.w;
  r3.xyz = g_mDecalTS._m10_m11_m12 * r2.yyy;
  r3.xyz = r2.xxx * g_mDecalTS._m00_m01_m02 + r3.xyz;
  r2.x = dot(r2.xy, -r2.xy);
  r2.x = saturate(1.000000000e+000 + r2.x);
  r2.x = sqrt(r2.x);
  r2.xyw = r2.xxx * g_mDecalTS._m20_m21_m22 + r3.xyz;
  r3.x = dot(r2.xyw, r2.xyw);
  r3.x = rsqrt(r3.x);
  r3.xyz = r3.xxx * r2.xyw;
  r3.w = r3.z >= 0.000000000e+000;
  r4.z = r3.w ? r0.w : -r0.w;
  r0.w = 1.000000000e+000 + abs(r3.z);
  r4.xy = r3.xy / r0.ww;
  o0.xyz = r4.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.x = saturate(dot(r2.xyw, -r0.xyz));
  r0.x = 1.001000047e+000 + -r0.x;
  r0.y = r0.x * r0.x;
  r0.y = r0.y * r0.y;
  r0.x = r0.x * r0.y;
  r0.x = g_DecalFresnel.y * r0.x + g_DecalFresnel.x;
  r0.x = r0.x * r2.z;
  r0.xyz = g_DecalSpecular.xyz * r0.xxx;
  r0.x = dot(r0.xyz, float3(2.126000e-001,7.152000e-001,7.220000e-002));
  o1.z = sqrt(r0.x);
  r0.x = (int)v0.x;
  r0.y = max(r0.x, -r0.x);
  r0.xy = (int2)r0.xy & int2(0,1);
  r0.z = -(int)r0.y;
  r0.x = r0.x ? r0.z : r0.y;
  r0.xyzw = r0.xxxx ? float4(5.000000e-001,-4.186000e-001,-8.130000e-002,5.000000e-001) : float4(-1.687000e-001,-3.312000e-001,5.000000e-001,5.000000e-001);
  r1.w = 1.000000000e+000;
  o1.y = dot(r0.xyzw, r1.xyzw);
  o1.x = dot(float3(2.990000e-001,5.870000e-001,1.140000e-001), r1.xyz);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_WorldViewPos;             // Offset:    0 Size:    16
//   row_major float4x4 g_mLightProj;   // Offset:   16 Size:    64
//   float4 g_ScreenScale;              // Offset:   80 Size:    16
//   float4 vWBasisX;                   // Offset:   96 Size:    16
//   float4 vWBasisY;                   // Offset:  112 Size:    16
//   float4 vWBasisZ;                   // Offset:  128 Size:    16
//   row_major float4x4 g_mDecalTS;     // Offset:  144 Size:    64
//   float4 g_DecalDiffuse;             // Offset:  208 Size:    16
//   float4 PS_NearFarClipDist;         // Offset:  224 Size:    16 [unused]
//   float4 g_DecalSpecular;            // Offset:  240 Size:    16
//   float4 g_DecalFresnel;             // Offset:  256 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex2                             sampler      NA          NA    2        1
// _tex3                             sampler      NA          NA    3        1
// _tex4                             sampler      NA          NA    4        1
// _tex5                             sampler      NA          NA    5        1
// _tex0                             texture  float4          2d    0        1
// _tex2                             texture  float4          2d    2        1
// _tex3                             texture  float4          2d    3        1
// _tex4                             texture  float4          2d    4        1
// _tex5                             texture  float4          2d    5        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[17], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 5
mad r0.xyz, cb0[6].xyzx, v0.xxxx, cb0[8].xyzx
mad r0.xyz, cb0[7].xyzx, v0.yyyy, r0.xyzx
mad r1.xy, v0.xyxx, cb0[5].xyxx, cb0[5].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t0.yzwx, s0
sample_l_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t5.xyzw, s5, l(0.000000)
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r2.xyz, r0.xyzx, r0.wwww, cb0[0].xyzx
mul r0.xyz, r0.wwww, r0.xyzx
mov r2.w, l(1.000000)
dp4 r3.x, cb0[1].xyzw, r2.xyzw
dp4 r3.y, cb0[2].xyzw, r2.xyzw
dp4 r3.z, cb0[3].xyzw, r2.xyzw
dp4 r0.w, cb0[4].xyzw, r2.xyzw
div r2.xyz, r3.xyzx, r0.wwww
mad r3.xyzw, r2.xyxy, l(1.000000, 1.000000, -1.000000, -1.000000), l(0.000000, 0.000000, 1.000000, 1.000000)
lt r3.xyzw, r3.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
or r3.xy, r3.zwzz, r3.xyxx
or r0.w, r3.y, r3.x
discard_nz r0.w
lt r3.xy, r2.zzzz, l(0.000000, 0.200000, 0.000000, 0.000000)
discard_nz r3.x
movc r0.w, r3.y, l(5.000000), l(1.200000)
dp2 r1.w, r1.xyxx, r1.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, r1.w, l(1.000000)
div r1.w, l(2.000000), r1.w
add r2.w, r1.w, l(-1.000000)
mul r3.xy, r1.wwww, r1.xyxx
lt r1.x, l(0.000000), r1.z
movc r3.z, r1.x, r2.w, -r2.w
dp3 r1.x, r3.xyzx, cb0[11].xyzx
max r1.x, r1.x, l(0.550000)
min r1.x, r1.x, l(1.000000)
add r1.x, r1.x, l(-0.550000)
mad r1.y, r1.x, l(-4.444445), l(3.000000)
mul r1.x, r1.x, l(2.222222)
mul r1.x, r1.x, r1.x
mul r1.x, r1.x, r1.y
add r1.y, r2.z, l(-0.200000)
mul r0.w, r0.w, r1.y
mad r0.w, -r0.w, r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
mul r0.w, r1.x, r0.w
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r2.xyxx, t2.xyzw, s2, l(0.000000)
mul r1.xyzw, r1.xyzw, cb0[13].xyzw
mul r0.w, r0.w, r1.w
sqrt r1.xyz, r1.xyzx
mov o0.w, r0.w
mov o1.w, r0.w
sample_l_indexable(texture2d)(float,float,float,float) r2.zw, r2.xyxx, t4.ywxz, s4, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.xy, r2.xyxx, t3.xyzw, s3, l(0.000000)
mad r2.xy, r2.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.w, r2.w, cb0[15].w
mul r3.xyz, r2.yyyy, cb0[10].xyzx
mad r3.xyz, r2.xxxx, cb0[9].xyzx, r3.xyzx
dp2 r2.x, r2.xyxx, -r2.xyxx
add_sat r2.x, r2.x, l(1.000000)
sqrt r2.x, r2.x
mad r2.xyw, r2.xxxx, cb0[11].xyxz, r3.xyxz
dp3 r3.x, r2.xywx, r2.xywx
rsq r3.x, r3.x
mul r3.xyz, r2.xywx, r3.xxxx
ge r3.w, r3.z, l(0.000000)
movc r4.z, r3.w, r0.w, -r0.w
add r0.w, |r3.z|, l(1.000000)
div r4.xy, r3.xyxx, r0.wwww
mad o0.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3_sat r0.x, r2.xywx, -r0.xyzx
add r0.x, -r0.x, l(1.001000)
mul r0.y, r0.x, r0.x
mul r0.y, r0.y, r0.y
mul r0.x, r0.y, r0.x
mad r0.x, cb0[16].y, r0.x, cb0[16].x
mul r0.x, r2.z, r0.x
mul r0.xyz, r0.xxxx, cb0[15].xyzx
dp3 r0.x, r0.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
sqrt o1.z, r0.x
ftoi r0.x, v0.x
imax r0.y, r0.x, -r0.x
and r0.xy, r0.xyxx, l(0x80000000, 1, 0, 0)
ineg r0.z, r0.y
movc r0.x, r0.x, r0.z, r0.y
movc r0.xyzw, r0.xxxx, l(0.500000,-0.418600,-0.081300,0.500000), l(-0.168700,-0.331200,0.500000,0.500000)
mov r1.w, l(1.000000)
dp4 o1.y, r0.xyzw, r1.xyzw
dp3 o1.x, l(0.299000, 0.587000, 0.114000, 0.000000), r1.xyzx
ret 
// Approximately 90 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
