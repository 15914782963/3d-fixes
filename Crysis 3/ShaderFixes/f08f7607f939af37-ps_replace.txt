//Lights
cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  row_major float4x4 g_mLightProj : packoffset(c2);
  float4 g_GeneralParams : packoffset(c6);
  float4 g_ScreenScale : packoffset(c7);
  float4 vWBasisX : packoffset(c8);
  float4 vWBasisY : packoffset(c9);
  float4 vWBasisZ : packoffset(c10);
  row_major float4x4 g_mLightShadowProj : packoffset(c11);
  float4 SSDOParams : packoffset(c15);
  float4 PS_ScreenSize : packoffset(c16);
  float4 pFadeOrigin : packoffset(c17);
  float4 PS_NearFarClipDist : packoffset(c18);
  float4 irreg_kernel_2d[8] : packoffset(c19);
  float4 vFadeParams[6] : packoffset(c27);
}
SamplerState _tex2_s : register(s2);
SamplerState _tex7_s : register(s7);
SamplerState _tex8_s : register(s8);
SamplerComparisonState SAMPLER_STATE_depthMapSampler_s : register(s3);
Texture2DMS<float4> _tex0MS : register(t0);
Texture2DMS<float4> _tex1MS : register(t1);
Texture2D<float4> _tex2 : register(t2);
Texture2D<float4> _tex3_d3d10 : register(t3);
Texture2D<float4> _tex7 : register(t7);
Texture2D<float4> _tex8 : register(t8);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  float4 g_VS_NearFarClipDist : TEXCOORD0,
  float4 g_VS_ScreenSize : TEXCOORD1,
  uint v1 : SV_SAMPLEINDEX0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
  
  
  
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

   r1.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  r1.zw = PS_ScreenSize.xy * r1.xy;
  r2.xyzw = _tex8.Sample(_tex8_s, r1.xy).xyzw;
  
  r2.xyzw = r2.xyzw * float4(0.977199972,0.977199972,0.977199972,1) + float4(-0.488599986,-0.488599986,-0.488599986,0);
  r1.xy = (int2)r1.zw;
  r1.zw = float2(0,0);
  
  r0.w = _tex0MS.Load(r1.xy, v1.x).x;
  
  float4 stereo = StereoParams.Load(0);
  float depth = r0.w * g_VS_NearFarClipDist.y;
  v0.x -= stereo.x * (depth - stereo.y) / depth * g_VS_ScreenSize.x / 2;

  r0.xyz = vWBasisX.xyz * v0.xxx + vWBasisZ.xyz;
  r0.xyz = vWBasisY.xyz * v0.yyy + r0.xyz;
  

  
  r1.xyzw = _tex1MS.Load(r1.xy, v1.x).xyzw;
  r3.xyz = r0.xyz * r0.www;
  r0.xyz = -r0.xyz * r0.www + g_LightPos.xyz;
  r3.w = 1;
  r4.x = dot(g_mLightShadowProj._m00_m01_m02_m03, r3.xyzw);
  r4.y = dot(g_mLightShadowProj._m10_m11_m12_m13, r3.xyzw);
  r0.w = dot(g_mLightShadowProj._m30_m31_m32_m33, r3.xyzw);
  r4.xyzw = r4.xyxy / r0.wwww;
  r5.xy = float2(1000,0.001953125) * g_GeneralParams.xx;
  r5.xz = r5.xx * r4.zw;
  r5.xz = _tex7.Sample(_tex7_s, r5.xz).xy;
  r5.xyz = r5.zxx * r5.yyy;
  r5.w = -r5.x;
  r6.xyzw = irreg_kernel_2d[0].yyzz * r5.xzzw;
  r6.xyzw = r5.zwxz * irreg_kernel_2d[0].xxww + r6.xyzw;
  r6.xyzw = r6.xyzw + r4.zwzw;
  r0.w = dot(g_mLightShadowProj._m20_m21_m22_m23, r3.xyzw);
  r0.w = -g_GeneralParams.w + r0.w;
  r7.x = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r6.xy, r0.w).x;
  r7.y = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r6.zw, r0.w).x;
  r6.xyzw = irreg_kernel_2d[1].yyzz * r5.xzzw;
  r6.xyzw = r5.zwxz * irreg_kernel_2d[1].xxww + r6.xyzw;
  r6.xyzw = r6.xyzw + r4.zwzw;
  r7.z = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r6.xy, r0.w).x;
  r7.w = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r6.zw, r0.w).x;
  r6.x = dot(r7.xyzw, float4(0.0625,0.0625,0.0625,0.0625));
  r7.xyzw = irreg_kernel_2d[2].yyzz * r5.xzzw;
  r7.xyzw = r5.zwxz * irreg_kernel_2d[2].xxww + r7.xyzw;
  r7.xyzw = r7.xyzw + r4.zwzw;
  r8.x = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r7.xy, r0.w).x;
  r8.y = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r7.zw, r0.w).x;
  r7.xyzw = irreg_kernel_2d[3].yyzz * r5.xzzw;
  r7.xyzw = r5.zwxz * irreg_kernel_2d[3].xxww + r7.xyzw;
  r7.xyzw = r7.xyzw + r4.zwzw;
  r8.z = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r7.xy, r0.w).x;
  r8.w = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r7.zw, r0.w).x;
  r6.y = dot(r8.xyzw, float4(0.0625,0.0625,0.0625,0.0625));
  r6.x = r6.x + r6.y;
  r7.xyzw = irreg_kernel_2d[4].yyzz * r5.xzzw;
  r7.xyzw = r5.zwxz * irreg_kernel_2d[4].xxww + r7.xyzw;
  r7.xyzw = r7.xyzw + r4.zwzw;
  r8.x = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r7.xy, r0.w).x;
  r8.y = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r7.zw, r0.w).x;
  r7.xyzw = irreg_kernel_2d[5].yyzz * r5.xzzw;
  r7.xyzw = r5.zwxz * irreg_kernel_2d[5].xxww + r7.xyzw;
  r7.xyzw = r7.xyzw + r4.zwzw;
  r8.z = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r7.xy, r0.w).x;
  r8.w = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r7.zw, r0.w).x;
  r6.y = dot(r8.xyzw, float4(0.0625,0.0625,0.0625,0.0625));
  r6.x = r6.x + r6.y;
  r7.xyzw = irreg_kernel_2d[6].yyzz * r5.xzzw;
  r7.xyzw = r5.zwxz * irreg_kernel_2d[6].xxww + r7.xyzw;
  r7.xyzw = r7.xyzw + r4.zwzw;
  r8.x = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r7.xy, r0.w).x;
  r8.y = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r7.zw, r0.w).x;
  r7.xyzw = irreg_kernel_2d[7].yyzz * r5.xyzw;
  r5.xyzw = r5.zwxz * irreg_kernel_2d[7].xxww + r7.xyzw;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r8.z = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r4.xy, r0.w).x;
  r8.w = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r4.zw, r0.w).x;
  r0.w = dot(r8.xyzw, float4(0.0625,0.0625,0.0625,0.0625));
  r0.w = r6.x + r0.w;
  r4.x = dot(g_mLightProj._m00_m01_m02_m03, r3.xyzw);
  r4.y = dot(g_mLightProj._m10_m11_m12_m13, r3.xyzw);
  r3.w = dot(g_mLightProj._m30_m31_m32_m33, r3.xyzw);
  r4.xy = r4.xy / r3.ww;
  r4.xyz = _tex2.SampleLevel(_tex2_s, r4.xy, 0).xyz;
  r4.xyz = r4.xyz * r0.www;
  r4.xyz = g_LightDiffuse.xyz * r4.xyz;
  r5.xyz = g_LightPos.www * r0.xyz;
  r0.w = dot(r5.xyz, -r5.xyz);
  r0.w = saturate(1 + r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.w = 4 * r1.w;
  r1.yzw = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r3.w = dot(r0.xyz, r0.xyz);
  r3.w = rsqrt(r3.w);
  r5.xyz = r3.www * r0.xyz;
  r0.x = dot(r1.yz, r1.yz);
  r0.x = min(1, r0.x);
  r0.x = 1 + r0.x;
  r0.x = 2 / r0.x;
  r1.x = -1 + r0.x;
  r6.xy = r1.yz * r0.xx;
  r0.x = 0 < r1.w;
  r6.zw = r0.xx ? r1.xw : -r1.xw;
  r0.x = dot(-r6.xyz, r5.xyz);
  r0.x = saturate(r0.x * 0.600000024 + 0.400000006);
  r0.y = saturate(dot(r5.xyz, r6.xyz));
  r0.x = r0.x * r0.w + r0.y;
  r0.yzw = r0.yyy * r4.xyz;
  r1.xyz = r0.xxx * r4.xyz;
  r0.xyz = g_LightDiffuse.www * r0.yzw;
  r5.w = 0.282090008;
  r0.w = dot(r5.xyzw, r2.xyzw);
  r0.w = saturate(SSDOParams.x * r0.w);
  r0.w = 1 + -r0.w;
  o0.xyz = r1.xyz * r0.www;
  o0.w = 0;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = -r3.xyz * r0.www + r5.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = saturate(dot(r6.xyz, r1.xyz));
  r1.x = r6.w * 10 + 1;
  r1.x = exp2(r1.x);
  r0.w = log2(r0.w);
  r0.w = r1.x * r0.w;
  r1.x = r1.x * 0.125 + 0.25;
  r0.w = exp2(r0.w);
  r0.w = r1.x * r0.w;
  o1.xyz = r0.xyz * r0.www;
  o1.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Tue Jul 21 08:04:46 2015
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   row_major float4x4 g_mLightProj;   // Offset:   32 Size:    64
//   float4 g_GeneralParams;            // Offset:   96 Size:    16
//   float4 g_ScreenScale;              // Offset:  112 Size:    16
//   float4 vWBasisX;                   // Offset:  128 Size:    16
//   float4 vWBasisY;                   // Offset:  144 Size:    16
//   float4 vWBasisZ;                   // Offset:  160 Size:    16
//   row_major float4x4 g_mLightShadowProj;// Offset:  176 Size:    64
//   float4 SSDOParams;                 // Offset:  240 Size:    16
//   float4 PS_ScreenSize;              // Offset:  256 Size:    16
//   float4 pFadeOrigin;                // Offset:  272 Size:    16 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  288 Size:    16 [unused]
//   float4 irreg_kernel_2d[8];         // Offset:  304 Size:   128
//   float4 vFadeParams[6];             // Offset:  432 Size:    96 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex2                             sampler      NA          NA    2        1
// SAMPLER_STATE_depthMapSampler   sampler_c      NA          NA    3        1
// _tex7                             sampler      NA          NA    7        1
// _tex8                             sampler      NA          NA    8        1
// _tex0MS                           texture  float4        2dMS    0        1
// _tex1MS                           texture  float4        2dMS    1        1
// _tex2                             texture  float4          2d    2        1
// _tex3_d3d10                       texture  float4          2d    3        1
// _tex7                             texture  float4          2d    7        1
// _tex8                             texture  float4          2d    8        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// SV_SAMPLEINDEX           0   x           1   SAMPLE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
// Pixel Shader runs at sample frequency
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[27], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s3, mode_comparison
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2dms(0) (float,float,float,float) t0
dcl_resource_texture2dms(0) (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps_sgv v1.x, sampleIndex
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 9
mad r0.xyz, cb0[8].xyzx, v0.xxxx, cb0[10].xyzx
mad r0.xyz, cb0[9].xyzx, v0.yyyy, r0.xyzx
mad r1.xy, v0.xyxx, cb0[7].xyxx, cb0[7].zwzz
mul r1.zw, r1.xxxy, cb0[16].xxxy
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyxx, t8.xyzw, s8
mad r2.xyzw, r2.xyzw, l(0.977200, 0.977200, 0.977200, 1.000000), l(-0.488600, -0.488600, -0.488600, 0.000000)
ftoi r1.xy, r1.zwzz
mov r1.zw, l(0,0,0,0)
ldms_indexable(texture2dms)(float,float,float,float) r0.w, r1.xyww, t0.yzwx, v1.x
ldms_indexable(texture2dms)(float,float,float,float) r1.xyzw, r1.xyzw, t1.xyzw, v1.x
mul r3.xyz, r0.wwww, r0.xyzx
mad r0.xyz, -r0.xyzx, r0.wwww, cb0[0].xyzx
mov r3.w, l(1.000000)
dp4 r4.x, cb0[11].xyzw, r3.xyzw
dp4 r4.y, cb0[12].xyzw, r3.xyzw
dp4 r0.w, cb0[14].xyzw, r3.xyzw
div r4.xyzw, r4.xyxy, r0.wwww
mul r5.xy, cb0[6].xxxx, l(1000.000000, 0.001953, 0.000000, 0.000000)
mul r5.xz, r4.zzwz, r5.xxxx
sample_indexable(texture2d)(float,float,float,float) r5.xz, r5.xzxx, t7.xzyw, s7
mul r5.xyz, r5.yyyy, r5.zxxz
mov r5.w, -r5.x
mul r6.xyzw, r5.xzzw, cb0[19].yyzz
mad r6.xyzw, r5.zwxz, cb0[19].xxww, r6.xyzw
add r6.xyzw, r4.zwzw, r6.xyzw
dp4 r0.w, cb0[13].xyzw, r3.xyzw
add r0.w, r0.w, -cb0[6].w
sample_c_indexable(texture2d)(float,float,float,float) r7.x, r6.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r7.y, r6.zwzz, t3.xxxx, s3, r0.w
mul r6.xyzw, r5.xzzw, cb0[20].yyzz
mad r6.xyzw, r5.zwxz, cb0[20].xxww, r6.xyzw
add r6.xyzw, r4.zwzw, r6.xyzw
sample_c_indexable(texture2d)(float,float,float,float) r7.z, r6.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r7.w, r6.zwzz, t3.xxxx, s3, r0.w
dp4 r6.x, r7.xyzw, l(0.062500, 0.062500, 0.062500, 0.062500)
mul r7.xyzw, r5.xzzw, cb0[21].yyzz
mad r7.xyzw, r5.zwxz, cb0[21].xxww, r7.xyzw
add r7.xyzw, r4.zwzw, r7.xyzw
sample_c_indexable(texture2d)(float,float,float,float) r8.x, r7.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r8.y, r7.zwzz, t3.xxxx, s3, r0.w
mul r7.xyzw, r5.xzzw, cb0[22].yyzz
mad r7.xyzw, r5.zwxz, cb0[22].xxww, r7.xyzw
add r7.xyzw, r4.zwzw, r7.xyzw
sample_c_indexable(texture2d)(float,float,float,float) r8.z, r7.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r8.w, r7.zwzz, t3.xxxx, s3, r0.w
dp4 r6.y, r8.xyzw, l(0.062500, 0.062500, 0.062500, 0.062500)
add r6.x, r6.y, r6.x
mul r7.xyzw, r5.xzzw, cb0[23].yyzz
mad r7.xyzw, r5.zwxz, cb0[23].xxww, r7.xyzw
add r7.xyzw, r4.zwzw, r7.xyzw
sample_c_indexable(texture2d)(float,float,float,float) r8.x, r7.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r8.y, r7.zwzz, t3.xxxx, s3, r0.w
mul r7.xyzw, r5.xzzw, cb0[24].yyzz
mad r7.xyzw, r5.zwxz, cb0[24].xxww, r7.xyzw
add r7.xyzw, r4.zwzw, r7.xyzw
sample_c_indexable(texture2d)(float,float,float,float) r8.z, r7.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r8.w, r7.zwzz, t3.xxxx, s3, r0.w
dp4 r6.y, r8.xyzw, l(0.062500, 0.062500, 0.062500, 0.062500)
add r6.x, r6.y, r6.x
mul r7.xyzw, r5.xzzw, cb0[25].yyzz
mad r7.xyzw, r5.zwxz, cb0[25].xxww, r7.xyzw
add r7.xyzw, r4.zwzw, r7.xyzw
sample_c_indexable(texture2d)(float,float,float,float) r8.x, r7.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r8.y, r7.zwzz, t3.xxxx, s3, r0.w
mul r7.xyzw, r5.xyzw, cb0[26].yyzz
mad r5.xyzw, r5.zwxz, cb0[26].xxww, r7.xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
sample_c_indexable(texture2d)(float,float,float,float) r8.z, r4.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r8.w, r4.zwzz, t3.xxxx, s3, r0.w
dp4 r0.w, r8.xyzw, l(0.062500, 0.062500, 0.062500, 0.062500)
add r0.w, r0.w, r6.x
dp4 r4.x, cb0[2].xyzw, r3.xyzw
dp4 r4.y, cb0[3].xyzw, r3.xyzw
dp4 r3.w, cb0[5].xyzw, r3.xyzw
div r4.xy, r4.xyxx, r3.wwww
sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t2.xyzw, s2, l(0.000000)
mul r4.xyz, r0.wwww, r4.xyzx
mul r4.xyz, r4.xyzx, cb0[1].xyzx
mul r5.xyz, r0.xyzx, cb0[0].wwww
dp3 r0.w, r5.xyzx, -r5.xyzx
add_sat r0.w, r0.w, l(1.000000)
mul r4.xyz, r0.wwww, r4.xyzx
mul r0.w, r1.w, l(4.000000)
mad r1.yzw, r1.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
dp3 r3.w, r0.xyzx, r0.xyzx
rsq r3.w, r3.w
mul r5.xyz, r0.xyzx, r3.wwww
dp2 r0.x, r1.yzyy, r1.yzyy
min r0.x, r0.x, l(1.000000)
add r0.x, r0.x, l(1.000000)
div r0.x, l(2.000000), r0.x
add r1.x, r0.x, l(-1.000000)
mul r6.xy, r0.xxxx, r1.yzyy
lt r0.x, l(0.000000), r1.w
movc r6.zw, r0.xxxx, r1.xxxw, -r1.xxxw
dp3 r0.x, -r6.xyzx, r5.xyzx
mad_sat r0.x, r0.x, l(0.600000), l(0.400000)
dp3_sat r0.y, r5.xyzx, r6.xyzx
mad r0.x, r0.x, r0.w, r0.y
mul r0.yzw, r4.xxyz, r0.yyyy
mul r1.xyz, r4.xyzx, r0.xxxx
mul r0.xyz, r0.yzwy, cb0[1].wwww
mov r5.w, l(0.282090)
dp4 r0.w, r5.xyzw, r2.xyzw
mul_sat r0.w, r0.w, cb0[15].x
add r0.w, -r0.w, l(1.000000)
mul o0.xyz, r0.wwww, r1.xyzx
mov o0.w, l(0)
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mad r1.xyz, -r3.xyzx, r0.wwww, r5.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3_sat r0.w, r6.xyzx, r1.xyzx
mad r1.x, r6.w, l(10.000000), l(1.000000)
exp r1.x, r1.x
log r0.w, r0.w
mul r0.w, r0.w, r1.x
mad r1.x, r1.x, l(0.125000), l(0.250000)
exp r0.w, r0.w
mul r0.w, r0.w, r1.x
mul o1.xyz, r0.wwww, r0.xyzx
mov o1.w, l(0)
ret 
// Approximately 125 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 