//Smoke Haloing
cbuffer cb3 : register(b3)
{
  float4 cb3[7];
}


cbuffer PER_BATCH : register(b0)
{
  float4 vfViewPos : packoffset(c0);
  float3 vfSunDir : packoffset(c1);
  float3 vfColGradDelta : packoffset(c2);
  float4 vfRampParams : packoffset(c3);
  float4 AnimGenParams : packoffset(c4);
  float4 vfColGradRadial : packoffset(c5);
  float4 vfColGradParams : packoffset(c6);
  float3 vfColGradBase : packoffset(c7);
  float4 vfParams : packoffset(c8);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
}

cbuffer PER_FRAME : register(b2)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_HPosScale : packoffset(c21);
}

cbuffer PER_MATERIAL : register(b3)
{
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float4 __0AnimSpeed__1AnimAmplitude__2AnimOffset__3BumpTilling : packoffset(c5);
  float __0BumpAnimSpeed__1__2__3 : packoffset(c6);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v0.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(ObjWorldMatrix._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(ObjWorldMatrix._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(ObjWorldMatrix._m20_m21_m22_m23, r0.xyzw);
  r0.xyz = g_VS_WorldViewPos.xyz + r1.xyz;
  r0.w = 1.000000000e+000;
  r2.x = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, r0.xyzw);
  r2.y = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, r0.xyzw);
  r2.z = dot(g_VS_ViewProjMatr._m20_m21_m22_m23, r0.xyzw);
  r2.w = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, r0.xyzw);
  r0.x = saturate(r0.z * vfColGradParams.x + vfColGradParams.y);
  o0.xyzw = r2.xyzw;
  
  float4 stereo = StereoParams.Load(0);
  r2.x += stereo.x * (r2.w - stereo.y);
  
  
  r0.yz = r2.xy * float2(1.000000e+000,-1.000000e+000) + r2.ww;
  o3.zw = r2.zw;
  r0.yz = g_VS_HPosScale.xy * r0.yz;
  o3.xy = float2(5.000000e-001,5.000000e-001) * r0.yz;
  r0.y = cb3[5].z + 1.000000000e+000;
  r0.y = saturate(-v1.y + r0.y);
  r0.y = cb3[5].y * r0.y;
  r0.z = cb3[5].x * AnimGenParams.x;
  r2.xyzw = float4(-0.000000e+000,-0.000000e+000,-5.000000e-001,-5.000000e-001) + r0.zzzz;
  r2.xyzw = frac(r2.xyzw);
  r3.xyzw = r2.xyzw * r0.yyyy + -cb3[5].zzzz;
  r0.y = 5.000000000e-001 + -r2.y;
  o2.z = abs(r0.y) + abs(r0.y);
  o1.xyzw = r3.xyzw * float4(0.000000e+000,1.000000e+000,0.000000e+000,1.000000e+000) + v1.xyxy;
  r0.yw = float2(-5.000000e-001,-5.000000e-001) + v1.xy;
  r2.xy = cb3[5].ww * r0.yw;
  r2.z = r0.z * -cb3[6].x + r2.y;
  o2.xy = float2(5.000000e-001,5.000000e-001) + r2.xz;
  r0.y = dot(r1.xyz, r1.xyz);
  r0.z = rsqrt(r0.y);
  r0.y = sqrt(r0.y);
  r1.xyw = r1.xyz * r0.zzz;
  r0.z = vfParams.x * r1.z;
  r0.w = dot(r1.xyw, vfSunDir.xyz);
  r0.w = r0.w * -vfColGradParams.z + vfColGradParams.z;
  r0.w = exp2(r0.w);
  r1.x = saturate(vfColGradRadial.w * r0.y);
  r1.x = log2(r1.x);
  r1.x = vfColGradParams.w * r1.x;
  r1.x = exp2(r1.x);
  r0.w = r1.x * r0.w;
  r1.x = 2.000000000e+000 + -r0.x;
  r0.x = r1.x * r0.x;
  r1.xyz = r0.xxx * vfColGradDelta.xyz + vfColGradBase.xyz;
  o4.xyz = r0.www * vfColGradRadial.xyz + r1.xyz;
  r0.x = 1.442695022e+000 * r0.z;
  r0.x = exp2(r0.x);
  r0.x = -1.000000000e+000 + r0.x;
  r0.x = r0.x / r0.z;
  r0.z = 9.999999776e-003 < abs(r0.z);
  r0.x = r0.z ? r0.x : 1.000000000e+000;
  r0.z = vfParams.y * r0.y;
  r0.y = saturate(r0.y * vfRampParams.x + vfRampParams.y);
  r0.x = r0.x * r0.z;
  r0.x = exp2(-r0.x);
  r0.x = min(r0.x, 1.000000000e+000);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.z = 2.000000000e+000 + -r0.y;
  r0.y = r0.y * r0.z;
  r0.y = r0.y * vfRampParams.z + vfRampParams.w;
  r0.x = -r0.x * r0.y + 1.000000000e+000;
  o4.w = max(r0.x, vfParams.w);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 vfViewPos;                  // Offset:    0 Size:    16 [unused]
//   float3 vfSunDir;                   // Offset:   16 Size:    12
//   float3 vfColGradDelta;             // Offset:   32 Size:    12
//   float4 vfRampParams;               // Offset:   48 Size:    16
//   float4 AnimGenParams;              // Offset:   64 Size:    16
//   float4 vfColGradRadial;            // Offset:   80 Size:    16
//   float4 vfColGradParams;            // Offset:   96 Size:    16
//   float3 vfColGradBase;              // Offset:  112 Size:    12
//   float4 vfParams;                   // Offset:  128 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_HPosScale;             // Offset:  336 Size:    16
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float4 __0AnimSpeed__1AnimAmplitude__2AnimOffset__3BumpTilling;// Offset:   80 Size:    16
//   float __0BumpAnimSpeed__1__2__3;   // Offset:   96 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    2        1
// PER_MATERIAL                      cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float       
// BINORMAL                 0   xyzw        4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 4
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb1[0].xyzw, r0.xyzw
dp4 r1.y, cb1[1].xyzw, r0.xyzw
dp4 r1.z, cb1[2].xyzw, r0.xyzw
add r0.xyz, r1.xyzx, cb2[6].xyzx
mov r0.w, l(1.000000)
dp4 r2.x, cb2[0].xyzw, r0.xyzw
dp4 r2.y, cb2[1].xyzw, r0.xyzw
dp4 r2.z, cb2[2].xyzw, r0.xyzw
dp4 r2.w, cb2[3].xyzw, r0.xyzw
mad_sat r0.x, r0.z, cb0[6].x, cb0[6].y
mov o0.xyzw, r2.xyzw
mad r0.yz, r2.xxyx, l(0.000000, 1.000000, -1.000000, 0.000000), r2.wwww
mov o3.zw, r2.zzzw
mul r0.yz, r0.yyzy, cb2[21].xxyx
mul o3.xy, r0.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)
add r0.y, l(1.000000), cb3[5].z
add_sat r0.y, r0.y, -v1.y
mul r0.y, r0.y, cb3[5].y
mul r0.z, cb0[4].x, cb3[5].x
add r2.xyzw, r0.zzzz, l(-0.000000, -0.000000, -0.500000, -0.500000)
frc r2.xyzw, r2.xyzw
mad r3.xyzw, r2.xyzw, r0.yyyy, -cb3[5].zzzz
add r0.y, -r2.y, l(0.500000)
add o2.z, |r0.y|, |r0.y|
mad o1.xyzw, r3.xyzw, l(0.000000, 1.000000, 0.000000, 1.000000), v1.xyxy
add r0.yw, v1.xxxy, l(0.000000, -0.500000, 0.000000, -0.500000)
mul r2.xy, r0.ywyy, cb3[5].wwww
mad r2.z, r0.z, -cb3[6].x, r2.y
add o2.xy, r2.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
dp3 r0.y, r1.xyzx, r1.xyzx
rsq r0.z, r0.y
sqrt r0.y, r0.y
mul r1.xyw, r0.zzzz, r1.xyxz
mul r0.z, r1.z, cb0[8].x
dp3 r0.w, r1.xywx, cb0[1].xyzx
mad r0.w, r0.w, -cb0[6].z, cb0[6].z
exp r0.w, r0.w
mul_sat r1.x, r0.y, cb0[5].w
log r1.x, r1.x
mul r1.x, r1.x, cb0[6].w
exp r1.x, r1.x
mul r0.w, r0.w, r1.x
add r1.x, -r0.x, l(2.000000)
mul r0.x, r0.x, r1.x
mad r1.xyz, r0.xxxx, cb0[2].xyzx, cb0[7].xyzx
mad o4.xyz, r0.wwww, cb0[5].xyzx, r1.xyzx
mul r0.x, r0.z, l(1.442695)
exp r0.x, r0.x
add r0.x, r0.x, l(-1.000000)
div r0.x, r0.x, r0.z
lt r0.z, l(0.010000), |r0.z|
movc r0.x, r0.z, r0.x, l(1.000000)
mul r0.z, r0.y, cb0[8].y
mad_sat r0.y, r0.y, cb0[3].x, cb0[3].y
mul r0.x, r0.z, r0.x
exp r0.x, -r0.x
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
add r0.z, -r0.y, l(2.000000)
mul r0.y, r0.z, r0.y
mad r0.y, r0.y, cb0[3].z, cb0[3].w
mad r0.x, -r0.x, r0.y, l(1.000000)
max o4.w, r0.x, cb0[8].w
ret 
// Approximately 66 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
