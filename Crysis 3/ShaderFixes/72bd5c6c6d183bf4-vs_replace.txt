//Water (Sea) HAlos
cbuffer cb3 : register(b3)
{
  float4 cb3[5];
}


cbuffer PER_BATCH : register(b0)
{
  row_major float4x4 mViewProjI : packoffset(c0);
  float4 OceanParams0 : packoffset(c4);
  float4 OceanParams1 : packoffset(c5);
  float3 CameraFrontVector : packoffset(c6);
  float4 CameraUpVector : packoffset(c7);
  float4 VS_SunColor : packoffset(c8);
  float4 CameraRightVector : packoffset(c9);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  row_major float4x4 mReflProj : packoffset(c3);
}

cbuffer PER_FRAME : register(b2)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  float4 g_VS_NearFarClipDist : packoffset(c9);
  float4 g_VS_HPosScale : packoffset(c21);
}

cbuffer PER_MATERIAL : register(b3)
{
  float4 MatSpecColor : packoffset(c1);
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float4 __0Tilling__1DetailTilling__2RipplesNormalsScale__3FakeCameraSpeed : packoffset(c4);
}
SamplerState FFTVertexTexSampler_s : register(s0);
Texture2D<float4> FFTVertexTexSampler : register(t0);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : TEXCOORD7)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = min(OceanParams0.w, 2.000000000e+000);
  r0.x = 1.000000e+000 / r0.x;
  r0.x = 1.000000000e+002 * r0.x;
  r1.xyzw = float4(7.070000e-001,7.070000e-001,-7.070000e-001,7.070000e-001) * v0.xyyx;
  r1.xy = r1.xy + r1.zw;
  r1.z = -3.000000119e-001 + r1.y;
  r0.xy = r1.xz * -r0.xx;
  r0.z = 7.500000000e-001 < abs(CameraFrontVector.z);
  r0.zw = r0.zz ? -CameraUpVector.xy : CameraFrontVector.xy;
  r0.yz = r0.zw * r0.yy;
  r0.xy = CameraRightVector.xy * r0.xx + r0.yz;
  r0.z = dot(r0.xy, r0.xy);
  r0.w = rsqrt(r0.z);
  r0.z = 8.500000089e-002 * r0.z;
  r0.xy = r0.xy * r0.ww;
  r0.w = dot(CameraFrontVector.xy, CameraFrontVector.xy);
  r0.w = rsqrt(r0.w);
  r1.xy = CameraFrontVector.xy * r0.ww;
  r0.w = dot(r1.xy, r0.xy);
  r1.x = 1.000000000e+000 + r0.w;
  r1.x = r1.x * r1.x;
  r1.y = g_VS_WorldViewPos.z + -OceanParams1.w;
  r1.x = r1.x * abs(r1.y);
  r1.x = r1.x * 6.250000000e-002 + 1.000000000e+000;
  r0.z = r1.x * r0.z;
  r1.x = 0.000000000e+000 < -r0.w;
  r0.w = -r0.w < 0.000000000e+000;
  r0.w = ((int)r1.x ? -1 : 0) + ((int)r0.w ? 1 : 0);
  r0.w = r0.w;
  r0.w = v0.z * r0.w;
  r0.w = 9.800000191e-001 < r0.w;
  r0.z = r0.w ? g_VS_NearFarClipDist.y : r0.z;
  r0.z = min(r0.z, 1.638400000e+004);
  r1.xy = g_VS_WorldViewPos.xy * float2(1.000000e-001,1.000000e-001);
  r1.xy = frac(r1.xy);
  r1.xy = float2(1.000000e+001,1.000000e+001) * r1.xy;
  r0.w = v0.z < 9.800000191e-001;
  r1.xy = r0.ww ? r1.xy : 0;
  r1.xy = g_VS_WorldViewPos.xy + -r1.xy;
  r0.xy = r0.xy * r0.zz + r1.xy;
  r0.z = OceanParams1.w;
  r0.w = 1.000000000e+000;
  r1.x = dot(ObjWorldMatrix._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(ObjWorldMatrix._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(ObjWorldMatrix._m20_m21_m22_m23, r0.xyzw);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.yzw = g_VS_WorldViewPos.xyz + r1.xyz;
  r0.x = sqrt(r0.x);
  r0.x = 5.000000000e-001 * r0.x;
  r0.x = min(r0.x, 1.000000000e+000);
  r0.x = r0.x * r0.x;
  r1.xyzw = OceanParams0.wwww * r0.yzyz;
  r2.xy = float2(1.562500e-002,1.562500e-002) * r1.zw;
  r1.xyzw = r1.xyzw * float4(1.562500e-002,1.562500e-002,1.562500e-002,1.562500e-002) + float4(1.562500e-002,0.000000e+000,0.000000e+000,1.562500e-002);
  r2.xyz = FFTVertexTexSampler.SampleLevel(FFTVertexTexSampler_s, r2.xy, 0.000000000e+000).xyz;
  r2.xyw = r2.xyz * r0.xxx;
  r2.xyw = OceanParams1.xxx * r2.xyw;
  r0.xyz = r2.xyw * float3(9.000000e-002,9.000000e-002,6.000000e-002) + r0.yzw;
  r2.xyw = g_VS_WorldViewPos.xyz + -r0.xyz;
  r3.x = dot(r2.xyw, r2.xyw);
  r3.x = r3.x < 4.000000000e+000;
  r0.w = 1.000000000e+000;
  r3.y = dot(g_VS_ViewProjMatr._m20_m21_m22_m23, r0.xyzw);
  r3.z = 2.000000030e-001 < abs(r2.w);
  r3.z = r3.z ? 1.000000 : 0;
  r3.z = r3.y * r3.z;
  o0.z = r3.x ? r3.z : r3.y;
  r3.x = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, r0.xyzw);
  r3.y = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, r0.xyzw);
  r3.w = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, r0.xyzw);
  
float4 s = StereoParams.Load(0);
float4 r10;
r10.xyzw = r3.xyzw;
r3.x += s.x*(r3.w - s.y);
  
o0.xyw = r10.xyw; //r3.xyw;
  r3.xy = r3.xy * float2(1.000000e+000,-1.000000e+000) + r3.ww;
  r3.xy = g_VS_HPosScale.xy * r3.xy;
  o2.xy = float2(5.000000e-001,5.000000e-001) * r3.xy;
  r3.x = cb3[4].w * 5.000000000e-001;
  r3.x = min(r3.x, 3.499999940e-001);
  r3.x = max(r3.x, -3.499999940e-001);
  r3.x = g_VS_AnimGenParams.x * r3.x;
  r4.xyzw = OceanParams1.yzyz * r3.xxxx + r0.xyxy;
  r4.xyzw = cb3[4].xxxx * r4.xyzw;
  r3.x = g_VS_AnimGenParams.z * OceanParams0.y;
  r3.x = 2.499999944e-003 * r3.x;
  r5.xyzw = OceanParams1.yzyz * r3.xxxx;
  r5.xyzw = float4(1.000000e+000,1.000000e+000,2.000000e+000,2.000000e+000) * r5.xyzw;
  r4.xyzw = r4.xyzw * float4(5.000000e-003,5.000000e-003,1.000000e-002,1.000000e-002) + r5.xyzw;
  o1.zw = cb3[4].yy * r4.wz;
  o1.xy = r4.xy;
  r3.x = saturate(r3.w);
  r3.x = sqrt(r3.x);
  o2.z = -r3.x * 1.500000060e-001 + 1.000000000e+000;
  o2.w = r3.w;
  r3.x = saturate(-r3.w * 9.999999776e-003 + 1.000000000e+000);
  o3.x = dot(mReflProj._m00_m01_m02_m03, r0.xyzw);
  o3.y = dot(mReflProj._m10_m11_m12_m13, r0.xyzw);
  o3.z = dot(mReflProj._m20_m21_m22_m23, r0.xyzw);
  o3.w = dot(mReflProj._m30_m31_m32_m33, r0.xyzw);
  o7.xyz = r0.xyz;
  r0.x = 0.000000000e+000 < r2.w;
  r0.y = r2.w < 0.000000000e+000;
  o4.xyz = r2.xyw;
  r0.x = ((int)r0.x ? -1 : 0) + ((int)r0.y ? 1 : 0);
  o4.w = r0.x;
  o5.xy = cb3[1].ww * float2(1.020000e+003,1.275000e+002);
  o5.zw = cb3[1].ww * float2(1.623381e+002,2.029226e+001) + float2(3.183100e-001,3.183100e-001);
  o6.xyz = cb3[1].xyz * VS_SunColor.xyz;
  o6.w = 1.000000000e+000;
  o7.w = v0.z;
  r0.x = FFTVertexTexSampler.SampleLevel(FFTVertexTexSampler_s, r1.xy, 0.000000000e+000).z;
  r0.y = FFTVertexTexSampler.SampleLevel(FFTVertexTexSampler_s, r1.zw, 0.000000000e+000).z;
  r1.xy = r2.zz + -r0.xy;
  r1.z = 8.000000000e+000;
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r1.xyz * r0.xxx + float3(-0.000000e+000,-0.000000e+000,-1.000000e+000);
  o8.xyz = r3.xxx * r0.xyz + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  o8.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   row_major float4x4 mViewProjI;     // Offset:    0 Size:    64 [unused]
//   float4 OceanParams0;               // Offset:   64 Size:    16
//   float4 OceanParams1;               // Offset:   80 Size:    16
//   float3 CameraFrontVector;          // Offset:   96 Size:    12
//   float4 CameraUpVector;             // Offset:  112 Size:    16
//   float4 VS_SunColor;                // Offset:  128 Size:    16
//   float4 CameraRightVector;          // Offset:  144 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   row_major float4x4 mReflProj;      // Offset:   48 Size:    64
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16
//   float4 g_VS_NearFarClipDist;       // Offset:  144 Size:    16
//   float4 g_VS_HPosScale;             // Offset:  336 Size:    16
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatSpecColor;               // Offset:   16 Size:    16
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float4 __0Tilling__1DetailTilling__2RipplesNormalsScale__3FakeCameraSpeed;// Offset:   64 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// FFTVertexTexSampler               sampler      NA          NA    0        1
// FFTVertexTexSampler               texture  float4          2d    0        1
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    2        1
// PER_MATERIAL                      cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb3[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input v0.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_temps 6
min r0.x, cb0[4].w, l(2.000000)
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.x, r0.x, l(100.000000)
mul r1.xyzw, v0.xyyx, l(0.707000, 0.707000, -0.707000, 0.707000)
add r1.xy, r1.zwzz, r1.xyxx
add r1.z, r1.y, l(-0.300000)
mul r0.xy, -r0.xxxx, r1.xzxx
lt r0.z, l(0.750000), |cb0[6].z|
movc r0.zw, r0.zzzz, -cb0[7].xxxy, cb0[6].xxxy
mul r0.yz, r0.yyyy, r0.zzwz
mad r0.xy, cb0[9].xyxx, r0.xxxx, r0.yzyy
dp2 r0.z, r0.xyxx, r0.xyxx
rsq r0.w, r0.z
mul r0.z, r0.z, l(0.085000)
mul r0.xy, r0.wwww, r0.xyxx
dp2 r0.w, cb0[6].xyxx, cb0[6].xyxx
rsq r0.w, r0.w
mul r1.xy, r0.wwww, cb0[6].xyxx
dp2 r0.w, r1.xyxx, r0.xyxx
add r1.x, r0.w, l(1.000000)
mul r1.x, r1.x, r1.x
add r1.y, -cb0[5].w, cb2[6].z
mul r1.x, |r1.y|, r1.x
mad r1.x, r1.x, l(0.062500), l(1.000000)
mul r0.z, r0.z, r1.x
lt r1.x, l(0.000000), -r0.w
lt r0.w, -r0.w, l(0.000000)
iadd r0.w, -r1.x, r0.w
itof r0.w, r0.w
mul r0.w, r0.w, v0.z
lt r0.w, l(0.980000), r0.w
movc r0.z, r0.w, cb2[9].y, r0.z
min r0.z, r0.z, l(16384.000000)
mul r1.xy, l(0.100000, 0.100000, 0.000000, 0.000000), cb2[6].xyxx
frc r1.xy, r1.xyxx
mul r1.xy, r1.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000)
lt r0.w, v0.z, l(0.980000)
and r1.xy, r1.xyxx, r0.wwww
add r1.xy, -r1.xyxx, cb2[6].xyxx
mad r0.xy, r0.xyxx, r0.zzzz, r1.xyxx
mov r0.z, cb0[5].w
mov r0.w, l(1.000000)
dp4 r1.x, cb1[0].xyzw, r0.xyzw
dp4 r1.y, cb1[1].xyzw, r0.xyzw
dp4 r1.z, cb1[2].xyzw, r0.xyzw
dp3 r0.x, r1.xyzx, r1.xyzx
add r0.yzw, r1.xxyz, cb2[6].xxyz
sqrt r0.x, r0.x
mul r0.x, r0.x, l(0.500000)
min r0.x, r0.x, l(1.000000)
mul r0.x, r0.x, r0.x
mul r1.xyzw, r0.yzyz, cb0[4].wwww
mul r2.xy, r1.zwzz, l(0.015625, 0.015625, 0.000000, 0.000000)
mad r1.xyzw, r1.xyzw, l(0.015625, 0.015625, 0.015625, 0.015625), l(0.015625, 0.000000, 0.000000, 0.015625)
sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t0.xyzw, s0, l(0.000000)
mul r2.xyw, r0.xxxx, r2.xyxz
mul r2.xyw, r2.xyxw, cb0[5].xxxx
mad r0.xyz, r2.xywx, l(0.090000, 0.090000, 0.060000, 0.000000), r0.yzwy
add r2.xyw, -r0.xyxz, cb2[6].xyxz
dp3 r3.x, r2.xywx, r2.xywx
lt r3.x, r3.x, l(4.000000)
mov r0.w, l(1.000000)
dp4 r3.y, cb2[2].xyzw, r0.xyzw
lt r3.z, l(0.200000), |r2.w|
and r3.z, r3.z, l(0x3f800000)
mul r3.z, r3.z, r3.y
movc o0.z, r3.x, r3.z, r3.y
dp4 r3.x, cb2[0].xyzw, r0.xyzw
dp4 r3.y, cb2[1].xyzw, r0.xyzw
dp4 r3.w, cb2[3].xyzw, r0.xyzw
mov o0.xyw, r3.xyxw
mad r3.xy, r3.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r3.wwww
mul r3.xy, r3.xyxx, cb2[21].xyxx
mul o2.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r3.x, l(0.500000), cb3[4].w
min r3.x, r3.x, l(0.350000)
max r3.x, r3.x, l(-0.350000)
mul r3.x, r3.x, cb2[8].x
mad r4.xyzw, cb0[5].yzyz, r3.xxxx, r0.xyxy
mul r4.xyzw, r4.xyzw, cb3[4].xxxx
mul r3.x, cb0[4].y, cb2[8].z
mul r3.x, r3.x, l(0.002500)
mul r5.xyzw, r3.xxxx, cb0[5].yzyz
mul r5.xyzw, r5.xyzw, l(1.000000, 1.000000, 2.000000, 2.000000)
mad r4.xyzw, r4.xyzw, l(0.005000, 0.005000, 0.010000, 0.010000), r5.xyzw
mul o1.zw, r4.wwwz, cb3[4].yyyy
mov o1.xy, r4.xyxx
mov_sat r3.x, r3.w
sqrt r3.x, r3.x
mad o2.z, -r3.x, l(0.150000), l(1.000000)
mov o2.w, r3.w
mad_sat r3.x, -r3.w, l(0.010000), l(1.000000)
dp4 o3.x, cb1[3].xyzw, r0.xyzw
dp4 o3.y, cb1[4].xyzw, r0.xyzw
dp4 o3.z, cb1[5].xyzw, r0.xyzw
dp4 o3.w, cb1[6].xyzw, r0.xyzw
mov o7.xyz, r0.xyzx
lt r0.x, l(0.000000), r2.w
lt r0.y, r2.w, l(0.000000)
mov o4.xyz, r2.xywx
iadd r0.x, -r0.x, r0.y
itof o4.w, r0.x
mul o5.xy, l(1020.000000, 127.500000, 0.000000, 0.000000), cb3[1].wwww
mad o5.zw, cb3[1].wwww, l(0.000000, 0.000000, 162.338089, 20.292261), l(0.000000, 0.000000, 0.318310, 0.318310)
mul o6.xyz, cb0[8].xyzx, cb3[1].xyzx
mov o6.w, l(1.000000)
mov o7.w, v0.z
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r1.xyxx, t0.zxyw, s0, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.xzyw, s0, l(0.000000)
add r1.xy, -r0.xyxx, r2.zzzz
mov r1.z, l(8.000000)
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mad r0.xyz, r1.xyzx, r0.xxxx, l(-0.000000, -0.000000, -1.000000, 0.000000)
mad o8.xyz, r3.xxxx, r0.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mov o8.w, l(1.000000)
ret 
// Approximately 117 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 