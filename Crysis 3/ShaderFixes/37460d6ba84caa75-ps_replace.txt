//Lights unverified
cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 g_GeneralParams : packoffset(c2);
  float4 g_ScreenScale : packoffset(c3);
  float4 vWBasisX : packoffset(c4);
  float4 vWBasisY : packoffset(c5);
  float4 vWBasisZ : packoffset(c6);
  float4 vFadeParams[6] : packoffset(c7);
  float4 g_vProjectionParams : packoffset(c13);
  float4 PS_NearFarClipDist : packoffset(c14);
  float4 pFadeOrigin : packoffset(c15);
  float4 PS_ScreenSize : packoffset(c16);
  float4 g_vAttenParams : packoffset(c17);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_Target0,
  
    float4 g_VS_NearFarClipDist : TEXCOORD0,
  float4 g_VS_ScreenSize : TEXCOORD1)
  
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r1.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  r0.w = _tex0.Sample(_tex0_s, r1.xy).x;
  
  float4 stereo = StereoParams.Load(0);
  float depth = r0.w * g_VS_NearFarClipDist.y;
  v0.x -= stereo.x * (depth - stereo.y) / depth * g_VS_ScreenSize.x / 2;
  
  r0.xyz = vWBasisX.xyz * v0.xxx + vWBasisZ.xyz;
  r0.xyz = vWBasisY.xyz * v0.yyy + r0.xyz;

  r1.xyz = _tex1.Sample(_tex1_s, r1.xy).xyz;
  r1.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.xyz = -r0.xyz * r0.www + g_LightPos.xyz;
  r0.xyz = g_LightPos.www * r0.xyz;
  r0.x = dot(r0.xyz, -r0.xyz);
  r0.x = saturate(1 + r0.x);
  r0.x = saturate(r0.x / g_vAttenParams.w);
  r0.y = r0.x * r0.x;
  r0.x = -r0.x * 2 + 3;
  r0.x = r0.y * r0.x;
  o0.w = g_vAttenParams.x * r0.x;
  r0.x = dot(r1.xy, r1.xy);
  r0.y = 0 < r1.z;
  r0.x = min(1, r0.x);
  r0.x = 1 + r0.x;
  r0.x = 2 / r0.x;
  r0.x = -1 + r0.x;
  r0.x = r0.y ? r0.x : -r0.x;
  r0.x = r0.x * 0.25 + 0.75;
  o0.xyz = g_LightDiffuse.xyz * r0.xxx;
  return;
}