cbuffer cb2 : register(b2)
{
  float4 cb2[14];
}


cbuffer PER_BATCH : register(b0)
{
  float3 SkyDome_NightMoonTexGenUp : packoffset(c0);
  float4 vfViewPos : packoffset(c1);
  float3 SkyDome_NightMoonTexGenRight : packoffset(c2);
  float4 SkyDome_NightMoonDirSize : packoffset(c3);
  float3 vfSunDir : packoffset(c4);
  float4 miscCamFront : packoffset(c5);
  float3 vfColGradDelta : packoffset(c6);
  float4 vfRampParams : packoffset(c7);
  float4 vfColGradRadial : packoffset(c8);
  float4 vfParams : packoffset(c9);
  float4 vfColGradParams : packoffset(c10);
  float3 vfColGradBase : packoffset(c11);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
}

cbuffer PER_FRAME : register(b2)
{
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_NearFarClipDist : packoffset(c9);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(ObjWorldMatrix._m00_m01_m02_m03, v0.xyzw);
  r0.y = dot(ObjWorldMatrix._m10_m11_m12_m13, v0.xyzw);
  r0.z = dot(ObjWorldMatrix._m20_m21_m22_m23, v0.xyzw);
  r0.w = v0.w;
  r1.x = dot(cb2[10].xyzw, r0.xyzw);
  r1.y = dot(cb2[11].xyzw, r0.xyzw);
  r1.z = dot(cb2[13].xyzw, r0.xyzw);
  o0.xyzw = r1.xyzz;
  r0.w = dot(SkyDome_NightMoonTexGenRight.xyz, v0.xyz);
  r0.z = dot(SkyDome_NightMoonTexGenUp.xyz, v0.xyz);
  o1.zw = r0.zw * SkyDome_NightMoonDirSize.ww + float2(0.5,0.5);
  o1.xy = v1.xy;
  o2.xyz = v0.xyz;
  r0.x = dot(v0.xyz, -miscCamFront.xyz);
  r0.x = 1 / r0.x;
  r0.yzw = cb2[9].yyy * v0.xyz;
  r0.xyz = r0.yzw * r0.xxx + vfViewPos.xyz;
  r0.w = saturate(r0.z * vfColGradParams.x + vfColGradParams.y);
  r0.xyz = -cb2[6].xyz + r0.xyz;
  r1.x = 2 + -r0.w;
  r0.w = r1.x * r0.w;
  r1.xyz = r0.www * vfColGradDelta.xyz + vfColGradBase.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r0.w);
  r0.w = sqrt(r0.w);
  r2.xyz = r1.www * r0.xyz;
  r0.x = vfParams.x * r0.z;
  r0.y = dot(r2.xyz, vfSunDir.xyz);
  r0.y = r0.y * -vfColGradParams.z + vfColGradParams.z;
  r0.y = exp2(r0.y);
  r0.z = saturate(vfColGradRadial.w * r0.w);
  r0.z = log2(r0.z);
  r0.z = vfColGradParams.w * r0.z;
  r0.z = exp2(r0.z);
  r0.y = r0.z * r0.y;
  o3.xyz = r0.yyy * vfColGradRadial.xyz + r1.xyz;
  r0.y = 1.44269502 * r0.x;
  r0.y = exp2(r0.y);
  r0.y = -1 + r0.y;
  r0.y = r0.y / r0.x;
  r0.x = 0.00999999978 < abs(r0.x);
  r0.x = r0.x ? r0.y : 1;
  r0.y = vfParams.y * r0.w;
  r0.z = saturate(r0.w * vfRampParams.x + vfRampParams.y);
  r0.x = r0.x * r0.y;
  r0.x = exp2(-r0.x);
  r0.x = min(1, r0.x);
  r0.x = 1 + -r0.x;
  r0.y = 2 + -r0.z;
  r0.y = r0.z * r0.y;
  r0.y = r0.y * vfRampParams.z + vfRampParams.w;
  r0.x = -r0.x * r0.y + 1;
  o3.w = max(vfParams.w, r0.x);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 SkyDome_NightMoonTexGenUp;  // Offset:    0 Size:    12
//   float4 vfViewPos;                  // Offset:   16 Size:    16
//   float3 SkyDome_NightMoonTexGenRight;// Offset:   32 Size:    12
//   float4 SkyDome_NightMoonDirSize;   // Offset:   48 Size:    16
//   float3 vfSunDir;                   // Offset:   64 Size:    12
//   float4 miscCamFront;               // Offset:   80 Size:    16
//   float3 vfColGradDelta;             // Offset:   96 Size:    12
//   float4 vfRampParams;               // Offset:  112 Size:    16
//   float4 vfColGradRadial;            // Offset:  128 Size:    16
//   float4 vfParams;                   // Offset:  144 Size:    16
//   float4 vfColGradParams;            // Offset:  160 Size:    16
//   float3 vfColGradBase;              // Offset:  176 Size:    12
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//
// }
//
// cbuffer PER_FRAME
// {
//
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_NearFarClipDist;       // Offset:  144 Size:    16
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[12], immediateIndexed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_constantbuffer cb2[14], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_temps 3
dp4 r0.x, cb1[0].xyzw, v0.xyzw
dp4 r0.y, cb1[1].xyzw, v0.xyzw
dp4 r0.z, cb1[2].xyzw, v0.xyzw
mov r0.w, v0.w
dp4 r1.x, cb2[10].xyzw, r0.xyzw
dp4 r1.y, cb2[11].xyzw, r0.xyzw
dp4 r1.z, cb2[13].xyzw, r0.xyzw
mov o0.xyzw, r1.xyzz
dp3 r0.w, cb0[2].xyzx, v0.xyzx
dp3 r0.z, cb0[0].xyzx, v0.xyzx
mad o1.zw, r0.zzzw, cb0[3].wwww, l(0.000000, 0.000000, 0.500000, 0.500000)
mov o1.xy, v1.xyxx
mov o2.xyz, v0.xyzx
dp3 r0.x, v0.xyzx, -cb0[5].xyzx
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.yzw, v0.xxyz, cb2[9].yyyy
mad r0.xyz, r0.yzwy, r0.xxxx, cb0[1].xyzx
mad_sat r0.w, r0.z, cb0[10].x, cb0[10].y
add r0.xyz, r0.xyzx, -cb2[6].xyzx
add r1.x, -r0.w, l(2.000000)
mul r0.w, r0.w, r1.x
mad r1.xyz, r0.wwww, cb0[6].xyzx, cb0[11].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.w, r0.w
sqrt r0.w, r0.w
mul r2.xyz, r0.xyzx, r1.wwww
mul r0.x, r0.z, cb0[9].x
dp3 r0.y, r2.xyzx, cb0[4].xyzx
mad r0.y, r0.y, -cb0[10].z, cb0[10].z
exp r0.y, r0.y
mul_sat r0.z, r0.w, cb0[8].w
log r0.z, r0.z
mul r0.z, r0.z, cb0[10].w
exp r0.z, r0.z
mul r0.y, r0.y, r0.z
mad o3.xyz, r0.yyyy, cb0[8].xyzx, r1.xyzx
mul r0.y, r0.x, l(1.442695)
exp r0.y, r0.y
add r0.y, r0.y, l(-1.000000)
div r0.y, r0.y, r0.x
lt r0.x, l(0.010000), |r0.x|
movc r0.x, r0.x, r0.y, l(1.000000)
mul r0.y, r0.w, cb0[9].y
mad_sat r0.z, r0.w, cb0[7].x, cb0[7].y
mul r0.x, r0.y, r0.x
exp r0.x, -r0.x
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
add r0.y, -r0.z, l(2.000000)
mul r0.y, r0.y, r0.z
mad r0.y, r0.y, cb0[7].z, cb0[7].w
mad r0.x, -r0.x, r0.y, l(1.000000)
max o3.w, r0.x, cb0[9].w
ret 
// Approximately 54 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
