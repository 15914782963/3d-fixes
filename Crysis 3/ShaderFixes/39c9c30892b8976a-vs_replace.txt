//Water Halo
cbuffer cb3 : register(b3)
{
  float4 cb3[5];
}


cbuffer PER_BATCH : register(b0)
{
  float4 vfViewPos : packoffset(c0);
  float3 vfSunDir : packoffset(c1);
  float4 vfParams : packoffset(c2);
  float3 vfColGradBase : packoffset(c3);
  float4 vfColGradParams : packoffset(c4);
  float4 vfColGradRadial : packoffset(c5);
  float4 vfRampParams : packoffset(c6);
  float3 vfColGradDelta : packoffset(c7);
  float4 _InstancingParams : packoffset(c8);
  float4 AnimParams : packoffset(c9);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 Ambient : packoffset(c3);
  float4 BendInfo : packoffset(c4);
  float4 AmbientOp : packoffset(c5);
}

cbuffer PER_FRAME : register(b2)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  float4 g_VS_NearFarClipDist : packoffset(c9);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
  float4 g_VS_HPosScale : packoffset(c21);
}

cbuffer PER_MATERIAL : register(b3)
{
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float4 __0TillingLayer0__1TillingLayer1__2SpeedLayer0__3SpeedLayer1 : packoffset(c4);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : COLOR0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = 1;
  r1.xyz = v0.xyz;
  r1.w = 1;
  r0.x = dot(ObjWorldMatrix._m00_m01_m02_m03, r1.xyzw);
  r0.y = dot(ObjWorldMatrix._m10_m11_m12_m13, r1.xyzw);
  r0.z = dot(ObjWorldMatrix._m20_m21_m22_m23, r1.xyzw);
  r1.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r0.xyzw);
  r1.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r0.xyzw);
  o5.xyz = r0.xyz;
  o0.xyzw = r1.xyzw;
  
    float4 stereo = StereoParams.Load(0);
  r1.x += stereo.x * (r1.w - stereo.y);
  
  r0.xy = r1.xy * float2(1,-1) + r1.ww;
  r0.xy = g_VS_HPosScale.xy * r0.xy;
  o4.xy = float2(0.5,0.5) * r0.xy;
  o4.zw = r1.zw;
  o5.w = g_VS_NearFarClipDist.w * r1.w;
  r0.xyzw = cb3[4].xxyy * v1.xyxy;
  r1.w = AnimParams.x;
  r1.z = 0;
  o1.xy = r1.wz * cb3[4].zz + r0.xy;
  o1.zw = r1.zw * cb3[4].ww + r0.wz;
  r0.xyz = float3(9.99999997e-007,0,0) + v3.xyz;
  r1.x = dot(ObjWorldMatrix._m00_m01_m02, r0.xyz);
  r1.y = dot(ObjWorldMatrix._m10_m11_m12, r0.xyz);
  r1.z = dot(ObjWorldMatrix._m20_m21_m22, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  o2.xyz = r1.xyz * r0.xxx;
  o2.w = v3.w;
  r0.xyz = float3(-9.99999997e-007,0,0) + v4.xyz;
  r1.x = dot(ObjWorldMatrix._m00_m01_m02, r0.xyz);
  r1.y = dot(ObjWorldMatrix._m10_m11_m12, r0.xyz);
  r1.z = dot(ObjWorldMatrix._m20_m21_m22, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  o3.xyz = r1.xyz * r0.xxx;
  o3.w = 0;
  o6.xyzw = AmbientOp.xyzw;
  o7.w = AmbientOp.w * v2.w;
  o7.xyz = v2.zyx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Fri Jul 24 08:31:13 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 vfViewPos;                  // Offset:    0 Size:    16 [unused]
//   float3 vfSunDir;                   // Offset:   16 Size:    12 [unused]
//   float4 vfParams;                   // Offset:   32 Size:    16 [unused]
//   float3 vfColGradBase;              // Offset:   48 Size:    12 [unused]
//   float4 vfColGradParams;            // Offset:   64 Size:    16 [unused]
//   float4 vfColGradRadial;            // Offset:   80 Size:    16 [unused]
//   float4 vfRampParams;               // Offset:   96 Size:    16 [unused]
//   float3 vfColGradDelta;             // Offset:  112 Size:    12 [unused]
//   float4 _InstancingParams;          // Offset:  128 Size:    16 [unused]
//   float4 AnimParams;                 // Offset:  144 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 Ambient;                    // Offset:   48 Size:    16 [unused]
//   float4 BendInfo;                   // Offset:   64 Size:    16 [unused]
//   float4 AmbientOp;                  // Offset:   80 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16 [unused]
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   float4 g_VS_NearFarClipDist;       // Offset:  144 Size:    16
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//   float4 g_VS_HPosScale;             // Offset:  336 Size:    16
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float4 __0TillingLayer0__1TillingLayer1__2SpeedLayer0__3SpeedLayer1;// Offset:   64 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    2        1
// PER_MATERIAL                      cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// COLOR                    0   xyzw        7     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb3[5], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_temps 2
mov r0.w, l(1.000000)
mov r1.xyz, v0.xyzx
mov r1.w, l(1.000000)
dp4 r0.x, cb1[0].xyzw, r1.xyzw
dp4 r0.y, cb1[1].xyzw, r1.xyzw
dp4 r0.z, cb1[2].xyzw, r1.xyzw
dp4 r1.x, cb2[10].xyzw, r0.xyzw
dp4 r1.y, cb2[11].xyzw, r0.xyzw
dp4 r1.z, cb2[12].xyzw, r0.xyzw
dp4 r1.w, cb2[13].xyzw, r0.xyzw
mov o5.xyz, r0.xyzx
mov o0.xyzw, r1.xyzw
mad r0.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r1.wwww
mul r0.xy, r0.xyxx, cb2[21].xyxx
mul o4.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o4.zw, r1.zzzw
mul o5.w, r1.w, cb2[9].w
mul r0.xyzw, v1.xyxy, cb3[4].xxyy
mov r1.w, cb0[9].x
mov r1.z, l(0)
mad o1.xy, r1.wzww, cb3[4].zzzz, r0.xyxx
mad o1.zw, r1.zzzw, cb3[4].wwww, r0.wwwz
add r0.xyz, v3.xyzx, l(0.000001, 0.000000, 0.000000, 0.000000)
dp3 r1.x, cb1[0].xyzx, r0.xyzx
dp3 r1.y, cb1[1].xyzx, r0.xyzx
dp3 r1.z, cb1[2].xyzx, r0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul o2.xyz, r0.xxxx, r1.xyzx
mov o2.w, v3.w
add r0.xyz, v4.xyzx, l(-0.000001, 0.000000, 0.000000, 0.000000)
dp3 r1.x, cb1[0].xyzx, r0.xyzx
dp3 r1.y, cb1[1].xyzx, r0.xyzx
dp3 r1.z, cb1[2].xyzx, r0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul o3.xyz, r0.xxxx, r1.xyzx
mov o3.w, l(0)
mov o6.xyzw, cb1[5].xyzw
mul o7.w, v2.w, cb1[5].w
mov o7.xyz, v2.zyxz
ret 
// Approximately 42 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
