//Water Haloing not sure is fixed, maybe there is another broke shader in water
cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}


cbuffer PER_BATCH : register(b0)
{
  float4 cViewerColorToWaterPlane : packoffset(c0);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float4x4 vpMatrix : packoffset(c0);
  row_major float3x4 ObjWorldMat : packoffset(c4);
}

cbuffer PER_FRAME : register(b2)
{
  float4 g_VS_HPosScale : packoffset(c21);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(vpMatrix._m20_m21_m22_m23, v0.xyzw);
  o0.z = cViewerColorToWaterPlane.x * r0.x;
  o1.z = r0.x;
  r0.x = dot(vpMatrix._m00_m01_m02_m03, v0.xyzw);
  r0.y = dot(vpMatrix._m10_m11_m12_m13, v0.xyzw);
  r0.w = dot(vpMatrix._m30_m31_m32_m33, v0.xyzw);
  o0.xyw = r0.xyw;
  
  float4 stereo = StereoParams.Load(0);
  r0.x += stereo.x * (r0.w - stereo.y);
  
  r0.x = r0.x + r0.w;
  r1.x = cb2[21].x * r0.x;
  r0.x = -r0.y + r0.w;
  o1.w = r0.w;
  r1.y = cb2[21].y * r0.x;
  o1.xy = float2(5.000000e-001,5.000000e-001) * r1.xy;
  o2.x = dot(ObjWorldMat._m00_m01_m02_m03, v0.xyzw);
  o2.y = dot(ObjWorldMat._m10_m11_m12_m13, v0.xyzw);
  o2.z = dot(ObjWorldMat._m20_m21_m22_m23, v0.xyzw);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 cViewerColorToWaterPlane;   // Offset:    0 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float4x4 vpMatrix;       // Offset:    0 Size:    64
//   row_major float3x4 ObjWorldMat;    // Offset:   64 Size:    48
//
// }
//
// cbuffer PER_FRAME
// {
//
//   float4 g_VS_HPosScale;             // Offset:  336 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_input v0.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_temps 2
dp4 r0.x, cb1[2].xyzw, v0.xyzw
mul o0.z, r0.x, cb0[0].x
mov o1.z, r0.x
dp4 r0.x, cb1[0].xyzw, v0.xyzw
dp4 r0.y, cb1[1].xyzw, v0.xyzw
dp4 r0.w, cb1[3].xyzw, v0.xyzw
mov o0.xyw, r0.xyxw
add r0.x, r0.w, r0.x
mul r1.x, r0.x, cb2[21].x
add r0.x, r0.w, -r0.y
mov o1.w, r0.w
mul r1.y, r0.x, cb2[21].y
mul o1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
dp4 o2.x, cb1[4].xyzw, v0.xyzw
dp4 o2.y, cb1[5].xyzw, v0.xyzw
dp4 o2.z, cb1[6].xyzw, v0.xyzw
ret 
// Approximately 17 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
