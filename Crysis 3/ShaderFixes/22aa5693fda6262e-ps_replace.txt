//Lights PS 2
cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 vWBasisX : packoffset(c2);
  float4 vWBasisY : packoffset(c3);
  float4 vWBasisZ : packoffset(c4);
  row_major float4x4 g_AreaLightParams : packoffset(c5);
  float4 SSDOParams : packoffset(c9);
  float4 PS_ScreenSize : packoffset(c10);
  float4 pFadeOrigin : packoffset(c11);
  float4 PS_NearFarClipDist : packoffset(c12);
  float4 g_AreaLightTexParams : packoffset(c13);
  float4 irreg_kernel_2d[8] : packoffset(c14);
  float4 vFadeParams[6] : packoffset(c22);
}
SamplerState _tex6_s : register(s6);
SamplerState _tex8_s : register(s8);
Texture2DMS<float4> _tex0MS : register(t0);
Texture2DMS<float4> _tex1MS : register(t1);
Texture2D<float4> _tex6 : register(t6);
Texture2D<float4> _tex8 : register(t8);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
      row_major matrix vp : TEXCOORD2,
  row_major matrix ivp : TEXCOORD6,
  uint v3 : SV_SAMPLEINDEX0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = PS_ScreenSize.xy * v1.xy;
  r0.xy = (int2)r0.xy;
  r0.zw = float2(0,0);
  r1.x = _tex0MS.Load(r0.xy, v3.x).x;
  
      float4 stereo = StereoParams.Load(0);
  float4 tmp = mul(vp, v2 * r1.x);
  tmp.x -= stereo.x * (tmp.w - stereo.y);
  v2 = mul(ivp, tmp) / r1.x;
  
  r1.yzw = v2.xyz * r1.xxx;
  r2.xyz = -r1.xxx * v2.xyz + g_LightPos.xyz;
  r1.x = dot(g_AreaLightParams._m00_m01_m02, r2.xyz);
  r3.xyz = g_AreaLightParams._m00_m01_m02 * r1.xxx;
  r4.xyz = r1.xxx * g_AreaLightParams._m00_m01_m02 + -r2.xyz;
  r5.x = dot(r4.xyz, g_AreaLightParams._m10_m11_m12);
  r5.y = dot(r4.xyz, g_AreaLightParams._m20_m21_m22);
  r4.xy = max(-g_AreaLightParams._m30_m31, r5.xy);
  r4.xy = min(g_AreaLightParams._m30_m31, r4.xy);
  r4.yzw = g_AreaLightParams._m20_m21_m22 * r4.yyy;
  r4.xyz = g_AreaLightParams._m10_m11_m12 * r4.xxx + r4.yzw;
  r2.w = dot(r3.xyz, r3.xyz);
  r2.w = sqrt(r2.w);
  r3.xy = r2.ww * g_AreaLightParams._m32_m33 + g_AreaLightParams._m13_m13;
  r3.xy = g_AreaLightParams._m13_m13 / r3.xy;
  r2.w = max(r3.x, r3.y);
  r2.w = -r2.w * g_AreaLightTexParams.y + g_AreaLightTexParams.y;
  r3.zw = float2(-1,1) * g_AreaLightParams._m32_m33;
  r5.xy = r5.xy * r3.zw;
  r3.xy = -r5.xy * r3.xy + float2(0.5,0.5);
  r5.xyz = _tex6.SampleLevel(_tex6_s, r3.xy, r2.w).xyz;
  r4.xyz = r4.xyz + r2.xyz;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = rsqrt(r2.w);
  r6.xyz = r4.xyz * r2.www;
  r2.w = dot(-r6.xyz, g_AreaLightParams._m00_m01_m02);
  r4.xyz = g_LightPos.www * r4.xyz;
  r3.x = dot(r4.xyz, -r4.xyz);
  r3.x = saturate(1 + r3.x);
  r3.y = 9.99999997e-007 + r2.w;
  r3.y = saturate(g_AreaLightParams._m03 / r3.y);
  r3.y = log2(r3.y);
  r3.y = g_AreaLightParams._m23 * r3.y;
  r3.y = exp2(r3.y);
  r3.y = 1 + -r3.y;
  r3.x = r3.x * r3.y;
  r3.x = r3.x * r3.x;
  r0.xyzw = _tex1MS.Load(r0.xy, v3.x).xyzw;
  r4.yzw = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.x = dot(r4.yz, r4.yz);
  r0.x = min(1, r0.x);
  r0.x = 1 + r0.x;
  r0.x = 2 / r0.x;
  r7.xy = r4.yz * r0.xx;
  r4.x = -1 + r0.x;
  r0.x = 0 < r4.w;
  r7.zw = r0.xx ? r4.xw : -r4.xw;
  r0.x = 4 * r0.w;
  r0.y = saturate(dot(r6.xyz, r7.xyz));
  r2.w = saturate(r2.w);
  r0.y = r2.w * r0.y;
  r0.z = dot(r1.yzw, r1.yzw);
  r0.z = rsqrt(r0.z);
  r1.yzw = r1.yzw * r0.zzz;
  r0.z = dot(-r7.xyz, r6.xyz);
  r0.z = saturate(r0.z * 0.600000024 + 0.400000006);
  r4.xyz = g_LightDiffuse.xyz * r5.xyz;
  r4.xyz = r4.xyz * r3.xxx;
  r0.x = r0.z * r0.x + r0.y;
  r0.xzw = r0.xxx * r4.xyz;
  r5.xyzw = _tex8.Sample(_tex8_s, v1.xy).xyzw;
  r6.w = 0.282090008;
  r5.xyzw = r5.xyzw * float4(0.977199972,0.977199972,0.977199972,1) + float4(-0.488599986,-0.488599986,-0.488599986,0);
  r2.w = dot(r6.xyzw, r5.xyzw);
  r2.w = saturate(SSDOParams.x * r2.w);
  r2.w = 1 + -r2.w;
  o0.xyz = r2.www * r0.xzw;
  r0.x = dot(-r1.yzw, r7.xyz);
  r0.x = r0.x + r0.x;
  r0.xzw = r7.xyz * -r0.xxx + -r1.yzw;
  r1.y = dot(r0.xzw, g_AreaLightParams._m00_m01_m02);
  r1.z = saturate(r1.y);
  r1.x = r1.x / r1.y;
  r5.xyz = r1.xxx * r0.xzw;
  r1.y = dot(r5.xyz, r5.xyz);
  r1.y = sqrt(r1.y);
  r0.xzw = r0.xzw * r1.xxx + -r2.xyz;
  r1.x = r7.w * 10 + 1;
  r1.x = exp2(r1.x);
  r1.w = 0.00048828125 * r1.x;
  r2.x = r1.x * 0.125 + 0.25;
  r2.y = -r1.x * 0.00048828125 + 1;
  r1.y = r1.y * r2.y + 1;
  r0.xzw = r0.xzw / r1.yyy;
  r3.x = dot(r0.xzw, g_AreaLightParams._m10_m11_m12);
  r3.y = dot(r0.xzw, g_AreaLightParams._m20_m21_m22);
  r0.xz = max(-g_AreaLightParams._m30_m31, r3.xy);
  r0.xz = min(g_AreaLightParams._m30_m31, r0.xz);
  r0.xz = r0.xz + -r3.xy;
  r0.x = dot(r0.xz, r0.xz);
  r0.x = min(1, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = log2(r0.x);
  r0.x = r1.x * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r0.x * r2.x;
  r0.xzw = r0.xxx * r1.zzz;
  r1.x = 0 != g_AreaLightTexParams.x;
  if (r1.x != 0) {
    r1.x = -r1.w * g_AreaLightTexParams.z + g_AreaLightTexParams.z;
    r1.yz = -r3.xy * r3.zw + float2(0.5,0.5);
    r1.xyz = _tex6.SampleLevel(_tex6_s, r1.yz, r1.x).xyz;
    r0.xzw = r1.xyz * r0.www;
  }
  r1.xyz = r4.xyz * r0.yyy;
  r1.xyz = g_LightDiffuse.www * r1.xyz;
  o1.xyz = r1.xyz * r0.xzw;
  o0.w = 0;
  o1.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Fri Jul 24 21:38:52 2015
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 vWBasisX;                   // Offset:   32 Size:    16 [unused]
//   float4 vWBasisY;                   // Offset:   48 Size:    16 [unused]
//   float4 vWBasisZ;                   // Offset:   64 Size:    16 [unused]
//   row_major float4x4 g_AreaLightParams;// Offset:   80 Size:    64
//   float4 SSDOParams;                 // Offset:  144 Size:    16
//   float4 PS_ScreenSize;              // Offset:  160 Size:    16
//   float4 pFadeOrigin;                // Offset:  176 Size:    16 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  192 Size:    16 [unused]
//   float4 g_AreaLightTexParams;       // Offset:  208 Size:    16
//   float4 irreg_kernel_2d[8];         // Offset:  224 Size:   128 [unused]
//   float4 vFadeParams[6];             // Offset:  352 Size:    96 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex6                             sampler      NA          NA    6        1
// _tex8                             sampler      NA          NA    8        1
// _tex0MS                           texture  float4        2dMS    0        1
// _tex1MS                           texture  float4        2dMS    1        1
// _tex6                             texture  float4          2d    6        1
// _tex8                             texture  float4          2d    8        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
// SV_SAMPLEINDEX           0   x           3   SAMPLE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
// Pixel Shader runs at sample frequency
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[14], immediateIndexed
dcl_sampler s6, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2dms(0) (float,float,float,float) t0
dcl_resource_texture2dms(0) (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps_sgv v3.x, sampleIndex
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 8
mul r0.xy, v1.xyxx, cb0[10].xyxx
ftoi r0.xy, r0.xyxx
mov r0.zw, l(0,0,0,0)
ldms_indexable(texture2dms)(float,float,float,float) r1.x, r0.xyww, t0.xyzw, v3.x
mul r1.yzw, r1.xxxx, v2.xxyz
mad r2.xyz, -r1.xxxx, v2.xyzx, cb0[0].xyzx
dp3 r1.x, cb0[5].xyzx, r2.xyzx
mul r3.xyz, r1.xxxx, cb0[5].xyzx
mad r4.xyz, r1.xxxx, cb0[5].xyzx, -r2.xyzx
dp3 r5.x, r4.xyzx, cb0[6].xyzx
dp3 r5.y, r4.xyzx, cb0[7].xyzx
max r4.xy, r5.xyxx, -cb0[8].xyxx
min r4.xy, r4.xyxx, cb0[8].xyxx
mul r4.yzw, r4.yyyy, cb0[7].xxyz
mad r4.xyz, cb0[6].xyzx, r4.xxxx, r4.yzwy
dp3 r2.w, r3.xyzx, r3.xyzx
sqrt r2.w, r2.w
mad r3.xy, r2.wwww, cb0[8].zwzz, cb0[6].wwww
div r3.xy, cb0[6].wwww, r3.xyxx
max r2.w, r3.y, r3.x
mad r2.w, -r2.w, cb0[13].y, cb0[13].y
mul r3.zw, cb0[8].zzzw, l(0.000000, 0.000000, -1.000000, 1.000000)
mul r5.xy, r3.zwzz, r5.xyxx
mad r3.xy, -r5.xyxx, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r3.xyxx, t6.xyzw, s6, r2.w
add r4.xyz, r2.xyzx, r4.xyzx
dp3 r2.w, r4.xyzx, r4.xyzx
rsq r2.w, r2.w
mul r6.xyz, r2.wwww, r4.xyzx
dp3 r2.w, -r6.xyzx, cb0[5].xyzx
mul r4.xyz, r4.xyzx, cb0[0].wwww
dp3 r3.x, r4.xyzx, -r4.xyzx
add_sat r3.x, r3.x, l(1.000000)
add r3.y, r2.w, l(0.000001)
div_sat r3.y, cb0[5].w, r3.y
log r3.y, r3.y
mul r3.y, r3.y, cb0[7].w
exp r3.y, r3.y
add r3.y, -r3.y, l(1.000000)
mul r3.x, r3.y, r3.x
mul r3.x, r3.x, r3.x
ldms_indexable(texture2dms)(float,float,float,float) r0.xyzw, r0.xyzw, t1.xyzw, v3.x
mad r4.yzw, r0.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
dp2 r0.x, r4.yzyy, r4.yzyy
min r0.x, r0.x, l(1.000000)
add r0.x, r0.x, l(1.000000)
div r0.x, l(2.000000), r0.x
mul r7.xy, r0.xxxx, r4.yzyy
add r4.x, r0.x, l(-1.000000)
lt r0.x, l(0.000000), r4.w
movc r7.zw, r0.xxxx, r4.xxxw, -r4.xxxw
mul r0.x, r0.w, l(4.000000)
dp3_sat r0.y, r6.xyzx, r7.xyzx
mov_sat r2.w, r2.w
mul r0.y, r0.y, r2.w
dp3 r0.z, r1.yzwy, r1.yzwy
rsq r0.z, r0.z
mul r1.yzw, r0.zzzz, r1.yyzw
dp3 r0.z, -r7.xyzx, r6.xyzx
mad_sat r0.z, r0.z, l(0.600000), l(0.400000)
mul r4.xyz, r5.xyzx, cb0[1].xyzx
mul r4.xyz, r3.xxxx, r4.xyzx
mad r0.x, r0.z, r0.x, r0.y
mul r0.xzw, r4.xxyz, r0.xxxx
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, v1.xyxx, t8.xyzw, s8
mov r6.w, l(0.282090)
mad r5.xyzw, r5.xyzw, l(0.977200, 0.977200, 0.977200, 1.000000), l(-0.488600, -0.488600, -0.488600, 0.000000)
dp4 r2.w, r6.xyzw, r5.xyzw
mul_sat r2.w, r2.w, cb0[9].x
add r2.w, -r2.w, l(1.000000)
mul o0.xyz, r0.xzwx, r2.wwww
dp3 r0.x, -r1.yzwy, r7.xyzx
add r0.x, r0.x, r0.x
mad r0.xzw, r7.xxyz, -r0.xxxx, -r1.yyzw
dp3 r1.y, r0.xzwx, cb0[5].xyzx
mov_sat r1.z, r1.y
div r1.x, r1.x, r1.y
mul r5.xyz, r0.xzwx, r1.xxxx
dp3 r1.y, r5.xyzx, r5.xyzx
sqrt r1.y, r1.y
mad r0.xzw, r0.xxzw, r1.xxxx, -r2.xxyz
mad r1.x, r7.w, l(10.000000), l(1.000000)
exp r1.x, r1.x
mul r1.w, r1.x, l(0.000488)
mad r2.x, r1.x, l(0.125000), l(0.250000)
mad r2.y, -r1.x, l(0.000488), l(1.000000)
mad r1.y, r1.y, r2.y, l(1.000000)
div r0.xzw, r0.xxzw, r1.yyyy
dp3 r3.x, r0.xzwx, cb0[6].xyzx
dp3 r3.y, r0.xzwx, cb0[7].xyzx
max r0.xz, r3.xxyx, -cb0[8].xxyx
min r0.xz, r0.xxzx, cb0[8].xxyx
add r0.xz, -r3.xxyx, r0.xxzx
dp2 r0.x, r0.xzxx, r0.xzxx
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
log r0.x, r0.x
mul r0.x, r0.x, r1.x
exp r0.x, r0.x
mul r0.x, r2.x, r0.x
mul r0.xzw, r1.zzzz, r0.xxxx
ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[13].x
if_nz r1.x
  mad r1.x, -r1.w, cb0[13].z, cb0[13].z
  mad r1.yz, -r3.xxyx, r3.zzwz, l(0.000000, 0.500000, 0.500000, 0.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r1.xyz, r1.yzyy, t6.xyzw, s6, r1.x
  mul r0.xzw, r0.wwww, r1.xxyz
endif 
mul r1.xyz, r0.yyyy, r4.xyzx
mul r1.xyz, r1.xyzx, cb0[1].wwww
mul o1.xyz, r0.xzwx, r1.xyzx
mov o0.w, l(0)
mov o1.w, l(0)
ret 
// Approximately 114 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 