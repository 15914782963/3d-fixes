cbuffer cb2 : register(b2)
{
  float4 cb2[14];
}


cbuffer PER_BATCH : register(b0)
{
  float3 SkyDome_NightMoonTexGenUp : packoffset(c0);
  float3 SkyDome_NightMoonTexGenRight : packoffset(c1);
  float4 SkyDome_NightMoonDirSize : packoffset(c2);
  float4 StarSize : packoffset(c3);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
}

cbuffer PER_FRAME : register(b2)
{
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR0,
  out float2 o2 : TEXCOORD0)
{
  const float4 icb[] = { { 0.897908, -0.347609, 0, 0},
                              { 0.550299, 0.273587, 0, 0},
                              { 0.823886, 0.098853, 0, 0},
                              { 0.922739, -0.122109, 0, 0},
                              { 0.800630, -0.088957, 0, 0},
                              { 0.711673, 0.158864, 0, 0},
                              { 0.870538, 0.085485, 0, 0},
                              { 0.956022, -0.058115, 0, 0} };
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(ObjWorldMatrix._m00_m01_m02_m03, v0.xyzw);
  r0.y = dot(ObjWorldMatrix._m10_m11_m12_m13, v0.xyzw);
  r0.z = dot(ObjWorldMatrix._m20_m21_m22_m23, v0.xyzw);
  r0.w = v0.w;
  r1.x = dot(cb2[10].xyzw, r0.xyzw);
  r1.y = dot(cb2[11].xyzw, r0.xyzw);
  r1.z = dot(cb2[13].xyzw, r0.xyzw);
  o0.xyzw = r1.xyzz;
  r0.xy = float2(256,256) * v0.xy;
  r0.xy = frac(r0.xy);
  r0.y = 1 + r0.y;
  r0.x = r0.y * StarSize.w + r0.x;
  r0.x = frac(r0.x);
  r0.x = 8 * r0.x;
  r0.y = frac(r0.x);
  r0.x = (int)r0.x;
  r0.x = r0.y * icb[r0.x+0].y + icb[r0.x+0].x;
  r0.y = v2.w * -7.94000006 + 6.5;
  r0.y = -1.44000006 + -r0.y;
  r0.y = 0.928771198 * r0.y;
  r0.y = exp2(r0.y);
  r0.x = r0.x * r0.y;
  o1.xyz = v2.zyx * r0.xxx;
  o1.w = r0.x;
  r0.x = dot(SkyDome_NightMoonTexGenRight.xyz, v0.xyz);
  r0.y = dot(SkyDome_NightMoonTexGenUp.xyz, v0.xyz);
  r0.xy = saturate(r0.xy * SkyDome_NightMoonDirSize.ww + float2(0.5,0.5));
  r0.xy = r0.xy * float2(2,2) + float2(-1,-1);
  r0.xy = abs(r0.xy) * abs(r0.xy);
  r0.x = r0.x + r0.y;
  r0.x = r0.x >= 1;
  r0.x = r0.x ? 1.000000 : 0;
  o2.xy = StarSize.xy * r0.xx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 SkyDome_NightMoonTexGenUp;  // Offset:    0 Size:    12
//   float3 SkyDome_NightMoonTexGenRight;// Offset:   16 Size:    12
//   float4 SkyDome_NightMoonDirSize;   // Offset:   32 Size:    16
//   float4 StarSize;                   // Offset:   48 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.897908, -0.347609, 0, 0},
                              { 0.550299, 0.273587, 0, 0},
                              { 0.823886, 0.098853, 0, 0},
                              { 0.922739, -0.122109, 0, 0},
                              { 0.800630, -0.088957, 0, 0},
                              { 0.711673, 0.158864, 0, 0},
                              { 0.870538, 0.085485, 0, 0},
                              { 0.956022, -0.058115, 0, 0} }
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_constantbuffer cb2[14], immediateIndexed
dcl_input v0.xyzw
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 2
dp4 r0.x, cb1[0].xyzw, v0.xyzw
dp4 r0.y, cb1[1].xyzw, v0.xyzw
dp4 r0.z, cb1[2].xyzw, v0.xyzw
mov r0.w, v0.w
dp4 r1.x, cb2[10].xyzw, r0.xyzw
dp4 r1.y, cb2[11].xyzw, r0.xyzw
dp4 r1.z, cb2[13].xyzw, r0.xyzw
mov o0.xyzw, r1.xyzz
mul r0.xy, v0.xyxx, l(256.000000, 256.000000, 0.000000, 0.000000)
frc r0.xy, r0.xyxx
add r0.y, r0.y, l(1.000000)
mad r0.x, r0.y, cb0[3].w, r0.x
frc r0.x, r0.x
mul r0.x, r0.x, l(8.000000)
frc r0.y, r0.x
ftoi r0.x, r0.x
mad r0.x, r0.y, icb[r0.x + 0].y, icb[r0.x + 0].x
mad r0.y, v2.w, l(-7.940000), l(6.500000)
add r0.y, -r0.y, l(-1.440000)
mul r0.y, r0.y, l(0.928771)
exp r0.y, r0.y
mul r0.x, r0.y, r0.x
mul o1.xyz, r0.xxxx, v2.zyxz
mov o1.w, r0.x
dp3 r0.x, cb0[1].xyzx, v0.xyzx
dp3 r0.y, cb0[0].xyzx, v0.xyzx
mad_sat r0.xy, r0.xyxx, cb0[2].wwww, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.xy, |r0.xyxx|, |r0.xyxx|
add r0.x, r0.y, r0.x
ge r0.x, r0.x, l(1.000000)
and r0.x, r0.x, l(0x3f800000)
mul o2.xy, r0.xxxx, cb0[3].xyxx
ret 
// Approximately 34 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
