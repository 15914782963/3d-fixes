//Lights
cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  row_major float4x4 g_mLightProj : packoffset(c2);
  float4 g_ScreenScale : packoffset(c6);
  float4 vWBasisX : packoffset(c7);
  float4 vWBasisY : packoffset(c8);
  float4 vWBasisZ : packoffset(c9);
  float4 SSDOParams : packoffset(c10);
  float4 PS_ScreenSize : packoffset(c11);
  float4 pFadeOrigin : packoffset(c12);
  float4 PS_NearFarClipDist : packoffset(c13);
  float4 irreg_kernel_2d[8] : packoffset(c14);
  float4 vFadeParams[6] : packoffset(c22);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
SamplerState _tex2_s : register(s2);
SamplerState _tex8_s : register(s8);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);
Texture2D<float4> _tex2 : register(t2);
Texture2D<float4> _tex8 : register(t8);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  
  float4 g_VS_NearFarClipDist : TEXCOORD0,
  float4 g_VS_ScreenSize : TEXCOORD1)
  
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r1.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  r0.w = _tex0.Sample(_tex0_s, r1.xy).x;
  
  float4 stereo = StereoParams.Load(0);
  float depth = r0.w * g_VS_NearFarClipDist.y;
  v0.x -= stereo.x * (depth - stereo.y) / depth * g_VS_ScreenSize.x / 2;
  
  r0.xyz = vWBasisX.xyz * v0.xxx + vWBasisZ.xyz;
  r0.xyz = vWBasisY.xyz * v0.yyy + r0.xyz;
  //r1.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  //r0.w = _tex0.Sample(_tex0_s, r1.xy).x;
  r2.xyz = r0.xyz * r0.www;
  r0.xyz = -r0.xyz * r0.www + g_LightPos.xyz;
  r2.w = 1.000000000e+000;
  r3.x = dot(g_mLightProj._m00_m01_m02_m03, r2.xyzw);
  r3.y = dot(g_mLightProj._m10_m11_m12_m13, r2.xyzw);
  r0.w = dot(g_mLightProj._m30_m31_m32_m33, r2.xyzw);
  r1.zw = r3.xy / r0.ww;
  r3.xyz = _tex2.SampleLevel(_tex2_s, r1.zw, 0.000000000e+000).xyz;
  r3.xyz = g_LightDiffuse.xyz * r3.xyz;
  r4.xyz = g_LightPos.www * r0.xyz;
  r0.w = dot(r4.xyz, -r4.xyz);
  r0.w = saturate(1.000000000e+000 + r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r4.xyzw = _tex1.Sample(_tex1_s, r1.xy).xyzw;
  r1.xyzw = _tex8.Sample(_tex8_s, r1.xy).xyzw;
  r1.xyzw = r1.xyzw * float4(9.772000e-001,9.772000e-001,9.772000e-001,1.000000e+000) + float4(-4.886000e-001,-4.886000e-001,-4.886000e-001,0.000000e+000);
  r5.yzw = r4.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.w = 4.000000000e+000 * r4.w;
  r3.w = dot(r5.yz, r5.yz);
  r3.w = min(r3.w, 1.000000000e+000);
  r3.w = 1.000000000e+000 + r3.w;
  r3.w = 2.000000000e+000 / r3.w;
  r5.x = -1.000000000e+000 + r3.w;
  r4.xy = r5.yz * r3.ww;
  r3.w = 0.000000000e+000 < r5.w;
  r4.zw = r3.ww ? r5.xw : -r5.xw;
  r3.w = dot(-r4.xyz, r0.xyz);
  r3.w = saturate(r3.w * 6.000000238e-001 + 4.000000060e-001);
  r5.x = saturate(dot(r0.xyz, r4.xyz));
  r2.w = r3.w * r2.w + r5.x;
  r5.xyz = r5.xxx * r3.xyz;
  r3.xyz = r2.www * r3.xyz;
  r5.xyz = g_LightDiffuse.www * r5.xyz;
  r0.w = 2.820900083e-001;
  r0.w = dot(r0.xyzw, r1.xyzw);
  r0.w = saturate(SSDOParams.x * r0.w);
  r0.w = 1.000000000e+000 + -r0.w;
  o0.xyz = r3.xyz * r0.www;
  o0.w = 0.000000000e+000;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = -r2.xyz * r0.www + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.x = saturate(dot(r4.xyz, r0.xyz));
  r0.y = r4.w * 1.000000000e+001 + 1.000000000e+000;
  r0.y = exp2(r0.y);
  r0.x = log2(r0.x);
  r0.x = r0.y * r0.x;
  r0.y = r0.y * 1.250000000e-001 + 2.500000000e-001;
  r0.x = exp2(r0.x);
  r0.x = r0.y * r0.x;
  o1.xyz = r5.xyz * r0.xxx;
  o1.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   row_major float4x4 g_mLightProj;   // Offset:   32 Size:    64
//   float4 g_ScreenScale;              // Offset:   96 Size:    16
//   float4 vWBasisX;                   // Offset:  112 Size:    16
//   float4 vWBasisY;                   // Offset:  128 Size:    16
//   float4 vWBasisZ;                   // Offset:  144 Size:    16
//   float4 SSDOParams;                 // Offset:  160 Size:    16
//   float4 PS_ScreenSize;              // Offset:  176 Size:    16 [unused]
//   float4 pFadeOrigin;                // Offset:  192 Size:    16 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  208 Size:    16 [unused]
//   float4 irreg_kernel_2d[8];         // Offset:  224 Size:   128 [unused]
//   float4 vFadeParams[6];             // Offset:  352 Size:    96 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex1                             sampler      NA          NA    1        1
// _tex2                             sampler      NA          NA    2        1
// _tex8                             sampler      NA          NA    8        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _tex2                             texture  float4          2d    2        1
// _tex8                             texture  float4          2d    8        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[11], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 6
mad r0.xyz, cb0[7].xyzx, v0.xxxx, cb0[9].xyzx
mad r0.xyz, cb0[8].xyzx, v0.yyyy, r0.xyzx
mad r1.xy, v0.xyxx, cb0[6].xyxx, cb0[6].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t0.yzwx, s0
mul r2.xyz, r0.wwww, r0.xyzx
mad r0.xyz, -r0.xyzx, r0.wwww, cb0[0].xyzx
mov r2.w, l(1.000000)
dp4 r3.x, cb0[2].xyzw, r2.xyzw
dp4 r3.y, cb0[3].xyzw, r2.xyzw
dp4 r0.w, cb0[5].xyzw, r2.xyzw
div r1.zw, r3.xxxy, r0.wwww
sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r1.zwzz, t2.xyzw, s2, l(0.000000)
mul r3.xyz, r3.xyzx, cb0[1].xyzx
mul r4.xyz, r0.xyzx, cb0[0].wwww
dp3 r0.w, r4.xyzx, -r4.xyzx
add_sat r0.w, r0.w, l(1.000000)
mul r3.xyz, r0.wwww, r3.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyxx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t8.xyzw, s8
mad r1.xyzw, r1.xyzw, l(0.977200, 0.977200, 0.977200, 1.000000), l(-0.488600, -0.488600, -0.488600, 0.000000)
mad r5.yzw, r4.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
mul r2.w, r4.w, l(4.000000)
dp2 r3.w, r5.yzyy, r5.yzyy
min r3.w, r3.w, l(1.000000)
add r3.w, r3.w, l(1.000000)
div r3.w, l(2.000000), r3.w
add r5.x, r3.w, l(-1.000000)
mul r4.xy, r3.wwww, r5.yzyy
lt r3.w, l(0.000000), r5.w
movc r4.zw, r3.wwww, r5.xxxw, -r5.xxxw
dp3 r3.w, -r4.xyzx, r0.xyzx
mad_sat r3.w, r3.w, l(0.600000), l(0.400000)
dp3_sat r5.x, r0.xyzx, r4.xyzx
mad r2.w, r3.w, r2.w, r5.x
mul r5.xyz, r3.xyzx, r5.xxxx
mul r3.xyz, r3.xyzx, r2.wwww
mul r5.xyz, r5.xyzx, cb0[1].wwww
mov r0.w, l(0.282090)
dp4 r0.w, r0.xyzw, r1.xyzw
mul_sat r0.w, r0.w, cb0[10].x
add r0.w, -r0.w, l(1.000000)
mul o0.xyz, r0.wwww, r3.xyzx
mov o0.w, l(0)
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mad r0.xyz, -r2.xyzx, r0.wwww, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3_sat r0.x, r4.xyzx, r0.xyzx
mad r0.y, r4.w, l(10.000000), l(1.000000)
exp r0.y, r0.y
log r0.x, r0.x
mul r0.x, r0.x, r0.y
mad r0.y, r0.y, l(0.125000), l(0.250000)
exp r0.x, r0.x
mul r0.x, r0.x, r0.y
mul o1.xyz, r0.xxxx, r5.xyzx
mov o1.w, l(0)
ret 
// Approximately 63 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 