//Shadows Clouds PS
cbuffer PER_BATCH : register(b0)
{
  float4 CloudShadowParams : packoffset(c0);
  float4 PS_NearFarClipDist : packoffset(c1);
  float4 g_vViewPos : packoffset(c2);
  float4 CloudShadowAnimParams : packoffset(c3);
}
SamplerState sceneDepthSampler_s : register(s0);
SamplerState cloudShadowMap_s : register(s1);
Texture2D<float4> sceneDepthSampler : register(t0);
Texture2D<float4> cloudShadowMap : register(t1);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD4,
  out float4 o0 : SV_Target0,
  
    float4 g_VS_NearFarClipDist : TEXCOORD2,
  float4 g_VS_ScreenSize : TEXCOORD3)
  
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = sceneDepthSampler.Sample(sceneDepthSampler_s, v2.xy).x;
  
  float4 stereo = StereoParams.Load(0);
  float depth = r0.x * g_VS_NearFarClipDist.y;
  v3.x -= stereo.x * (depth - stereo.y) / depth * g_VS_ScreenSize.x / 2;
  
  r0.xyz = v3.xyz * r0.xxx + g_vViewPos.xyz;
  r0.xy = r0.zz * float2(-0.100000001,-0.100000001) + r0.xy;
  r0.xy = r0.xy * CloudShadowAnimParams.xy + -CloudShadowAnimParams.zw;
  r0.x = cloudShadowMap.SampleLevel(cloudShadowMap_s, r0.xy, 0).x;
  r0.x = saturate(CloudShadowParams.w * r0.x);
  r0.y = r0.x * -2 + 1;
  r0.x = CloudShadowParams.z * r0.y + r0.x;
    
  o0.xyzw = float4(1,1,1,1) + -r0.xxxx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Wed Jul 29 22:40:35 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 CloudShadowParams;          // Offset:    0 Size:    16
//   float4 PS_NearFarClipDist;         // Offset:   16 Size:    16 [unused]
//   float4 g_vViewPos;                 // Offset:   32 Size:    16
//   float4 CloudShadowAnimParams;      // Offset:   48 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sceneDepthSampler                 sampler      NA          NA    0        1
// cloudShadowMap                    sampler      NA          NA    1        1
// sceneDepthSampler                 texture  float4          2d    0        1
// cloudShadowMap                    texture  float4          2d    1        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float       
// TEXCOORD                 1   xyzw        2     NONE   float   xy  
// TEXCOORD                 4   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.x, v2.xyxx, t0.xyzw, s0
mad r0.xyz, v3.xyzx, r0.xxxx, cb0[2].xyzx
mad r0.xy, r0.zzzz, l(-0.100000, -0.100000, 0.000000, 0.000000), r0.xyxx
mad r0.xy, r0.xyxx, cb0[3].xyxx, -cb0[3].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t1.xyzw, s1, l(0.000000)
mul_sat r0.x, r0.x, cb0[0].w
mad r0.y, r0.x, l(-2.000000), l(1.000000)
mad r0.x, cb0[0].z, r0.y, r0.x
add o0.xyzw, -r0.xxxx, l(1.000000, 1.000000, 1.000000, 1.000000)
ret 
// Approximately 10 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
