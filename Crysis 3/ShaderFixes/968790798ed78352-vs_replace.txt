// High quality water, no ripple

cbuffer cb3 : register(b3)
{
  float4 cb3[5];
}


cbuffer PER_BATCH : register(b0)
{
  float4 VS_SunColor : packoffset(c0);
  float4 cViewerColorToWaterPlane : packoffset(c1);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
}

// Filled out extra fields in PER_FRAME
cbuffer PER_FRAME : register(b2)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_SunLightDir : packoffset(c4);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_ScreenSize : packoffset(c7);
  float4 g_VS_AnimGenParams : packoffset(c8);
  float4 g_VS_NearFarClipDist : packoffset(c9);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
  float4 g_VS_HPosScale : packoffset(c21);
}

cbuffer PER_MATERIAL : register(b3)
{
  float4 MatSpecColor : packoffset(c1);
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float2 __0Tilling__1DetailTilling__2__3 : packoffset(c4);
  float VertexWaveScale : packoffset(c6);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,

  out row_major matrix vp : TEXCOORD5,
  out row_major matrix ivp : TEXCOORD9

  )
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);

  vp = g_VS_ViewProjMatr;

//Work out Inverse
float det = determinant(vp);
ivp[0].x = vp[1].y*(vp[2].z*vp[3].w - vp[2].w*vp[3].z) + vp[1].z*(vp[2].w*vp[3].y - vp[2].y*vp[3].w) + vp[1].w*(vp[2].y*vp[3].z - vp[2].z*vp[3].y);
ivp[0].y = vp[0].y*(vp[2].w*vp[3].z - vp[2].z*vp[3].w) + vp[0].z*(vp[2].y*vp[3].w - vp[2].w*vp[3].y) + vp[0].w*(vp[2].z*vp[3].y - vp[2].y*vp[3].z);
ivp[0].z = vp[0].y*(vp[1].z*vp[3].w - vp[1].w*vp[3].z) + vp[0].z*(vp[1].w*vp[3].y - vp[1].y*vp[3].w) + vp[0].w*(vp[1].y*vp[3].z - vp[1].z*vp[3].y);
ivp[0].w = vp[0].y*(vp[1].w*vp[2].z - vp[1].z*vp[2].w) + vp[0].z*(vp[1].y*vp[2].w - vp[1].w*vp[2].y) + vp[0].w*(vp[1].z*vp[2].y - vp[1].y*vp[2].z);
ivp[1].x = vp[1].x*(vp[2].w*vp[3].z - vp[2].z*vp[3].w) + vp[1].z*(vp[2].x*vp[3].w - vp[2].w*vp[3].x) + vp[1].w*(vp[2].z*vp[3].x - vp[2].x*vp[3].z);
ivp[1].y = vp[0].x*(vp[2].z*vp[3].w - vp[2].w*vp[3].z) + vp[0].z*(vp[2].w*vp[3].x - vp[2].x*vp[3].w) + vp[0].w*(vp[2].x*vp[3].z - vp[2].z*vp[3].x);
ivp[1].z = vp[0].x*(vp[1].w*vp[3].z - vp[1].z*vp[3].w) + vp[0].z*(vp[1].x*vp[3].w - vp[1].w*vp[3].x) + vp[0].w*(vp[1].z*vp[3].x - vp[1].x*vp[3].z);
ivp[1].w = vp[0].x*(vp[1].z*vp[2].w - vp[1].w*vp[2].z) + vp[0].z*(vp[1].w*vp[2].x - vp[1].x*vp[2].w) + vp[0].w*(vp[1].x*vp[2].z - vp[1].z*vp[2].x);
ivp[2].x = vp[1].x*(vp[2].y*vp[3].w - vp[2].w*vp[3].y) + vp[1].y*(vp[2].w*vp[3].x - vp[2].x*vp[3].w) + vp[1].w*(vp[2].x*vp[3].y - vp[2].y*vp[3].x);
ivp[2].y = vp[0].x*(vp[2].w*vp[3].y - vp[2].y*vp[3].w) + vp[0].y*(vp[2].x*vp[3].w - vp[2].w*vp[3].x) + vp[0].w*(vp[2].y*vp[3].x - vp[2].x*vp[3].y);
ivp[2].z = vp[0].x*(vp[1].y*vp[3].w - vp[1].w*vp[3].y) + vp[0].y*(vp[1].w*vp[3].x - vp[1].x*vp[3].w) + vp[0].w*(vp[1].x*vp[3].y - vp[1].y*vp[3].x);
ivp[2].w = vp[0].x*(vp[1].w*vp[2].y - vp[1].y*vp[2].w) + vp[0].y*(vp[1].x*vp[2].w - vp[1].w*vp[2].x) + vp[0].w*(vp[1].y*vp[2].x - vp[1].x*vp[2].y);
ivp[3].x = vp[1].x*(vp[2].z*vp[3].y - vp[2].y*vp[3].z) + vp[1].y*(vp[2].x*vp[3].z - vp[2].z*vp[3].x) + vp[1].z*(vp[2].y*vp[3].x - vp[2].x*vp[3].y);
ivp[3].y = vp[0].x*(vp[2].y*vp[3].z - vp[2].z*vp[3].y) + vp[0].y*(vp[2].z*vp[3].x - vp[2].x*vp[3].z) + vp[0].z*(vp[2].x*vp[3].y - vp[2].y*vp[3].x);
ivp[3].z = vp[0].x*(vp[1].z*vp[3].y - vp[1].y*vp[3].z) + vp[0].y*(vp[1].x*vp[3].z - vp[1].z*vp[3].x) + vp[0].z*(vp[1].y*vp[3].x - vp[1].x*vp[3].y);
ivp[3].w = vp[0].x*(vp[1].y*vp[2].z - vp[1].z*vp[2].y) + vp[0].y*(vp[1].z*vp[2].x - vp[1].x*vp[2].z) + vp[0].z*(vp[1].x*vp[2].y - vp[1].y*vp[2].x);
ivp /= det;
//End Inverse

  r0.xyz = v0.xyz;
  r0.w = 1;
  r1.x = dot(ObjWorldMatrix._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(ObjWorldMatrix._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(ObjWorldMatrix._m20_m21_m22_m23, r0.xyzw);
  r0.xyz = g_VS_WorldViewPos.xyz + r1.xyz;
  r1.xyz = g_VS_WorldViewPos.xyz + -r0.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = r1.w < cViewerColorToWaterPlane.y;
  r2.x = 0.200000003 < abs(r1.z);
  r2.x = r2.x ? 1.000000 : 0;
  r0.w = 1;
  r2.y = dot(g_VS_ViewProjMatr._m20_m21_m22_m23, r0.xyzw);
  r2.x = r2.y * r2.x;
  o0.z = r1.w ? r2.x : r2.y;
  r2.x = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, r0.xyzw);
  r2.y = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, r0.xyzw);
  r2.w = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, r0.xyzw);

//float4 tmp = mul(vp, float4(r0.xyz, 1));
//float adj = stereo.x * (tmp.w - stereo.y);
//r0.xyz -= mul(ivp, float4(adj, 0, 0, 0));

  o5.xyz = r0.xyz;
  o0.xyw = r2.xyw;

//r2.x += stereo.x * (r2.w - stereo.y) * params.z;

  r0.xy = r2.xy * float2(1,-1) + r2.ww;
  r0.xy = g_VS_HPosScale.xy * r0.xy;
  o2.xy = float2(0.5,0.5) * r0.xy;

//o2.x += stereo.x * (r2.w - stereo.y) * params.z / 2;

  r0.x = 1;
  r0.z = cb3[4].x;
  r0.xyzw = v1.xyxy * r0.xxzz;
  r0.xyzw = cb3[4].xxyy * r0.xyzw;
  o1.xyzw = float4(1,1,2,2) * r0.xyzw;
  r0.x = 0.0199999996 * r2.w;
  o2.w = r2.w;
  r0.x = saturate(r0.x);
  r0.x = sqrt(r0.x);
  o2.z = 1 + -r0.x;
  r0.x = 0 < r1.z;
  r0.y = r1.z < 0;
  o3.xyz = r1.xyz;
  r0.x = ((int)r0.x ? -1 : 0) + ((int)r0.y ? 1 : 0);
  o3.w = (int)r0.x;
  r0.xyz = cb3[1].xyz * VS_SunColor.xyz;
  o4.xyz = VS_SunColor.www * r0.xyz;
  o4.w = 1;
  o5.w = v0.z;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Fri Jul 24 00:49:23 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 VS_SunColor;                // Offset:    0 Size:    16
//   float4 cViewerColorToWaterPlane;   // Offset:   16 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_HPosScale;             // Offset:  336 Size:    16
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatSpecColor;               // Offset:   16 Size:    16
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float2 __0Tilling__1DetailTilling__2__3;// Offset:   64 Size:     8
//   float VertexWaveScale;             // Offset:   96 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    2        1
// PER_MATERIAL                      cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[2], immediateIndexed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb3[5], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 3
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb1[0].xyzw, r0.xyzw
dp4 r1.y, cb1[1].xyzw, r0.xyzw
dp4 r1.z, cb1[2].xyzw, r0.xyzw
add r0.xyz, r1.xyzx, cb2[6].xyzx
add r1.xyz, -r0.xyzx, cb2[6].xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
lt r1.w, r1.w, cb0[1].y
lt r2.x, l(0.200000), |r1.z|
and r2.x, r2.x, l(0x3f800000)
mov r0.w, l(1.000000)
dp4 r2.y, cb2[2].xyzw, r0.xyzw
mul r2.x, r2.x, r2.y
movc o0.z, r1.w, r2.x, r2.y
dp4 r2.x, cb2[0].xyzw, r0.xyzw
dp4 r2.y, cb2[1].xyzw, r0.xyzw
dp4 r2.w, cb2[3].xyzw, r0.xyzw
mov o5.xyz, r0.xyzx
mov o0.xyw, r2.xyxw
mad r0.xy, r2.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r2.wwww
mul r0.xy, r0.xyxx, cb2[21].xyxx
mul o2.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov r0.x, l(1.000000)
mov r0.z, cb3[4].x
mul r0.xyzw, r0.xxzz, v1.xyxy
mul r0.xyzw, r0.xyzw, cb3[4].xxyy
mul o1.xyzw, r0.xyzw, l(1.000000, 1.000000, 2.000000, 2.000000)
mul r0.x, r2.w, l(0.020000)
mov o2.w, r2.w
mov_sat r0.x, r0.x
sqrt r0.x, r0.x
add o2.z, -r0.x, l(1.000000)
lt r0.x, l(0.000000), r1.z
lt r0.y, r1.z, l(0.000000)
mov o3.xyz, r1.xyzx
iadd r0.x, -r0.x, r0.y
itof o3.w, r0.x
mul r0.xyz, cb0[0].xyzx, cb3[1].xyzx
mul o4.xyz, r0.xyzx, cb0[0].wwww
mov o4.w, l(1.000000)
mov o5.w, v0.z
ret 
// Approximately 43 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
