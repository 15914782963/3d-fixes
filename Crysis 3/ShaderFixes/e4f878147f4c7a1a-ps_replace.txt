//Lights
cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 vWBasisX : packoffset(c2);
  float4 vWBasisY : packoffset(c3);
  float4 vWBasisZ : packoffset(c4);
  float4 SSDOParams : packoffset(c5);
  float4 PS_ScreenSize : packoffset(c6);
  float4 pFadeOrigin : packoffset(c7);
  float4 PS_NearFarClipDist : packoffset(c8);
  float4 irreg_kernel_2d[8] : packoffset(c9);
  float4 vFadeParams[6] : packoffset(c17);
}
SamplerState _tex8_s : register(s8);
Texture2DMS<float4> _tex0MS : register(t0);
Texture2DMS<float4> _tex1MS : register(t1);
Texture2D<float4> _tex8 : register(t8);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  row_major matrix vp : TEXCOORD2,
  row_major matrix ivp : TEXCOORD6,
  uint v3 : SV_SAMPLEINDEX0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = PS_ScreenSize.xy * v1.xy;
  r0.xy = (int2)r0.xy;
  r0.zw = float2(0,0);
  r1.xyzw = _tex1MS.Load(r0.xy, v3.x).xyzw;
  r0.x = _tex0MS.Load(r0.xy, v3.x).x;
  
      float4 stereo = StereoParams.Load(0);
float4 tmp = mul(vp, v2 * r0.x);
tmp.x -= stereo.x * (tmp.w - stereo.y);
v2 = mul(ivp, tmp) / r0.x;
  
  r2.yzw = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.y = 4 * r1.w;
  r0.z = dot(r2.yz, r2.yz);
  r0.z = min(1, r0.z);
  r0.z = 1 + r0.z;
  r0.z = 2 / r0.z;
  r2.x = -1 + r0.z;
  r1.xy = r2.yz * r0.zz;
  r0.z = 0 < r2.w;
  r1.zw = r0.zz ? r2.xw : -r2.xw;
  r2.xyz = -r0.xxx * v2.xyz + g_LightPos.xyz;
  r0.xzw = v2.xyz * r0.xxx;
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r2.w);
  r3.xyz = r2.xyz * r2.www;
  r2.xyz = g_LightPos.www * r2.xyz;
  r2.x = dot(r2.xyz, -r2.xyz);
  r2.x = saturate(1 + r2.x);
  r2.x = r2.x * r2.x;
  r2.xyz = g_LightDiffuse.xyz * r2.xxx;
  r2.w = dot(-r1.xyz, r3.xyz);
  r2.w = saturate(r2.w * 0.600000024 + 0.400000006);
  r4.x = saturate(dot(r3.xyz, r1.xyz));
  r0.y = r2.w * r0.y + r4.x;
  r4.xyz = r4.xxx * r2.xyz;
  r2.xyz = r0.yyy * r2.xyz;
  r4.xyz = g_LightDiffuse.www * r4.xyz;
  r5.xyzw = _tex8.Sample(_tex8_s, v1.xy).xyzw;
  r5.xyzw = r5.xyzw * float4(0.977199972,0.977199972,0.977199972,1) + float4(-0.488599986,-0.488599986,-0.488599986,0);
  r3.w = 0.282090008;
  r0.y = dot(r3.xyzw, r5.xyzw);
  r0.y = saturate(SSDOParams.x * r0.y);
  r0.y = 1 + -r0.y;
  o0.xyz = r2.xyz * r0.yyy;
  o0.w = 0;
  r0.y = dot(r0.xzw, r0.xzw);
  r0.y = rsqrt(r0.y);
  r0.xyz = -r0.xzw * r0.yyy + r3.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.x = saturate(dot(r1.xyz, r0.xyz));
  r0.y = r1.w * 10 + 1;
  r0.y = exp2(r0.y);
  r0.x = log2(r0.x);
  r0.x = r0.y * r0.x;
  r0.y = r0.y * 0.125 + 0.25;
  r0.x = exp2(r0.x);
  r0.x = r0.y * r0.x;
  o1.xyz = r4.xyz * r0.xxx;
  o1.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Tue Jul 21 08:51:14 2015
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 vWBasisX;                   // Offset:   32 Size:    16 [unused]
//   float4 vWBasisY;                   // Offset:   48 Size:    16 [unused]
//   float4 vWBasisZ;                   // Offset:   64 Size:    16 [unused]
//   float4 SSDOParams;                 // Offset:   80 Size:    16
//   float4 PS_ScreenSize;              // Offset:   96 Size:    16
//   float4 pFadeOrigin;                // Offset:  112 Size:    16 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  128 Size:    16 [unused]
//   float4 irreg_kernel_2d[8];         // Offset:  144 Size:   128 [unused]
//   float4 vFadeParams[6];             // Offset:  272 Size:    96 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex8                             sampler      NA          NA    8        1
// _tex0MS                           texture  float4        2dMS    0        1
// _tex1MS                           texture  float4        2dMS    1        1
// _tex8                             texture  float4          2d    8        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
// SV_SAMPLEINDEX           0   x           3   SAMPLE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
// Pixel Shader runs at sample frequency
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[7], immediateIndexed
dcl_sampler s8, mode_default
dcl_resource_texture2dms(0) (float,float,float,float) t0
dcl_resource_texture2dms(0) (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps_sgv v3.x, sampleIndex
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 6
mul r0.xy, v1.xyxx, cb0[6].xyxx
ftoi r0.xy, r0.xyxx
mov r0.zw, l(0,0,0,0)
ldms_indexable(texture2dms)(float,float,float,float) r1.xyzw, r0.xyzw, t1.xyzw, v3.x
ldms_indexable(texture2dms)(float,float,float,float) r0.x, r0.xyww, t0.xyzw, v3.x
mad r2.yzw, r1.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
mul r0.y, r1.w, l(4.000000)
dp2 r0.z, r2.yzyy, r2.yzyy
min r0.z, r0.z, l(1.000000)
add r0.z, r0.z, l(1.000000)
div r0.z, l(2.000000), r0.z
add r2.x, r0.z, l(-1.000000)
mul r1.xy, r0.zzzz, r2.yzyy
lt r0.z, l(0.000000), r2.w
movc r1.zw, r0.zzzz, r2.xxxw, -r2.xxxw
mad r2.xyz, -r0.xxxx, v2.xyzx, cb0[0].xyzx
mul r0.xzw, r0.xxxx, v2.xxyz
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r2.xyzx
mul r2.xyz, r2.xyzx, cb0[0].wwww
dp3 r2.x, r2.xyzx, -r2.xyzx
add_sat r2.x, r2.x, l(1.000000)
mul r2.x, r2.x, r2.x
mul r2.xyz, r2.xxxx, cb0[1].xyzx
dp3 r2.w, -r1.xyzx, r3.xyzx
mad_sat r2.w, r2.w, l(0.600000), l(0.400000)
dp3_sat r4.x, r3.xyzx, r1.xyzx
mad r0.y, r2.w, r0.y, r4.x
mul r4.xyz, r2.xyzx, r4.xxxx
mul r2.xyz, r2.xyzx, r0.yyyy
mul r4.xyz, r4.xyzx, cb0[1].wwww
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, v1.xyxx, t8.xyzw, s8
mad r5.xyzw, r5.xyzw, l(0.977200, 0.977200, 0.977200, 1.000000), l(-0.488600, -0.488600, -0.488600, 0.000000)
mov r3.w, l(0.282090)
dp4 r0.y, r3.xyzw, r5.xyzw
mul_sat r0.y, r0.y, cb0[5].x
add r0.y, -r0.y, l(1.000000)
mul o0.xyz, r0.yyyy, r2.xyzx
mov o0.w, l(0)
dp3 r0.y, r0.xzwx, r0.xzwx
rsq r0.y, r0.y
mad r0.xyz, -r0.xzwx, r0.yyyy, r3.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3_sat r0.x, r1.xyzx, r0.xyzx
mad r0.y, r1.w, l(10.000000), l(1.000000)
exp r0.y, r0.y
log r0.x, r0.x
mul r0.x, r0.x, r0.y
mad r0.y, r0.y, l(0.125000), l(0.250000)
exp r0.x, r0.x
mul r0.x, r0.x, r0.y
mul o1.xyz, r0.xxxx, r4.xyzx
mov o1.w, l(0)
ret 
// Approximately 57 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
