cbuffer cb2 : register(b2)
{
  float4 cb2[3];
}


cbuffer PER_BATCH : register(b0)
{
  row_major float4x4 mLightView : packoffset(c0);
  float4 PS_WorldViewPos : packoffset(c4);
  float4 PS_NearFarClipDist : packoffset(c5);
}

cbuffer PER_FRAME : register(b2)
{
  float4 g_PS_SunColor : packoffset(c1);
  float4 g_PS_SunLightDir : packoffset(c2);
}
SamplerState sceneDepthMapSampler_s : register(s0);
SamplerState waterCausticsSampler_s : register(s1);
SamplerState waterCausticsSamplerPoint_s : register(s2);
SamplerState sceneNormalsSampler_s : register(s12);
Texture2D<float4> sceneDepthMapSampler : register(t0);
Texture2D<float4> waterCausticsSamplerPoint : register(t1);
Texture2D<float4> waterCausticsSampler : register(t2);
Texture2D<float4> sceneNormalsSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = sceneDepthMapSampler.Sample(sceneDepthMapSampler_s, v1.xy).x;
  r1.xyz = r0.xxx * v2.xyz + PS_WorldViewPos.xyz;
  r1.w = 1;
  r2.x = dot(mLightView._m00_m01_m02_m03, r1.xyzw);
  r2.y = dot(mLightView._m10_m11_m12_m13, r1.xyzw);
  r0.y = dot(mLightView._m30_m31_m32_m33, r1.xyzw);
  r0.yz = r2.xy / r0.yy;
  r0.yz = r0.yz * float2(0.5,-0.5) + float2(0.5,0.5);
  r2.xyzw = waterCausticsSamplerPoint.Sample(waterCausticsSamplerPoint_s, r0.yz).xyzw;
  r0.y = r2.z < 0.00100000005;
  if (r0.y != 0) {
    o0.xyzw = float4(0,0,0,0);
    return;
  }
  r0.yzw = sceneNormalsSampler.Sample(sceneNormalsSampler_s, v1.xy).xyz;
  r3.yzw = r0.yzw * float3(2,2,2) + float3(-1,-1,-1);
  r0.y = dot(r3.yz, r3.yz);
  r0.y = min(1, r0.y);
  r0.y = 1 + r0.y;
  r0.y = 2 / r0.y;
  r4.xy = r3.yz * r0.yy;
  r3.x = -1 + r0.y;
  r0.y = 0 < r3.w;
  r4.zw = r0.yy ? r3.xw : -r3.xw;
  r0.y = r2.y * 0.00390625 + r2.x;
  r2.x = 1 / r0.y;
  r2.y = r2.w * 10 + r2.x;
  r0.yz = r2.xy + -r1.zz;
  r0.z = r0.z * abs(r0.z);
  r0.z = -2.88539004 * r0.z;
  r0.z = exp2(r0.z);
  r0.z = 1 + -r0.z;
  r0.z = max(0, r0.z);
  r0.w = 0.100000001 + r0.y;
  r0.w = saturate(10 * r0.w);
  r1.w = r0.w * -2 + 3;
  r0.w = r0.w * r0.w;
  r0.w = r1.w * r0.w;
  r2.xy = float2(0.25,1) + -r4.zw;
  r1.w = max(r2.x, r0.w);
  r0.z = r1.w * r0.z;
  r1.w = saturate(r0.y);
  r1.w = 1 + -r1.w;
  r1.w = r1.w * r1.w;
  r0.z = r1.w * r0.z;
  r2.xzw = PS_WorldViewPos.xyz + -r1.xyz;
  r1.w = dot(r2.xzw, r2.xzw);
  r1.w = 100 / r1.w;
  r1.w = min(1, r1.w);
  r0.z = r1.w * r0.z;
  r0.x = saturate(r0.x * PS_NearFarClipDist.y + -0.330000013);
  r0.x = r0.z * r0.x;
  r0.yz = cb2[2].xy * r0.yy;
  r0.w = r0.w * 2 + -1;
  r1.xyz = r4.xyz * float3(0.25,0.25,0.25) + r1.xyz;
  r1.xy = r0.yz * r0.ww + r1.xy;
  r1.w = 1;
  r3.x = dot(mLightView._m00_m01_m02_m03, r1.xyzw);
  r3.y = dot(mLightView._m10_m11_m12_m13, r1.xyzw);
  r0.y = dot(mLightView._m30_m31_m32_m33, r1.xyzw);
  r0.yz = r3.xy / r0.yy;
  r1.xyzw = r0.yzyz * float4(0.5,-0.5,0.5,-0.5) + float4(0.5,0.5,0.499799997,0.499799997);
  r2.x = waterCausticsSampler.SampleLevel(waterCausticsSampler_s, r1.xy, 0).z;
  r2.z = waterCausticsSampler.SampleLevel(waterCausticsSampler_s, r1.zw, 0).z;
  r0.yz = r0.yz * float2(0.5,-0.5) + float2(0.499599993,0.499599993);
  r2.w = waterCausticsSampler.SampleLevel(waterCausticsSampler_s, r0.yz, 0).z;
  r0.yzw = r2.xzw * r2.xzw;
  r1.xyz = r2.xzw * r0.yzw;
  r1.xyz = cb2[1].xyz * r1.xyz;
  r1.xyz = r1.xyz * r2.yyy;
  r1.xyz = cb2[2].www * r1.xyz;
  r0.yzw = r2.xzw * r0.yzw + r1.xyz;
  r0.y = dot(r0.yzw, float3(32,32,32));
  r1.w = 1 + -r0.y;
  r0.x = 0.5 * r0.x;
  o0.xyzw = r1.xyzw * r0.xxxx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   row_major float4x4 mLightView;     // Offset:    0 Size:    64
//   float4 PS_WorldViewPos;            // Offset:   64 Size:    16
//   float4 PS_NearFarClipDist;         // Offset:   80 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   float4 g_PS_SunColor;              // Offset:   16 Size:    16
//   float4 g_PS_SunLightDir;           // Offset:   32 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sceneDepthMapSampler              sampler      NA          NA    0        1
// waterCausticsSampler              sampler      NA          NA    1        1
// waterCausticsSamplerPoint         sampler      NA          NA    2        1
// sceneNormalsSampler               sampler      NA          NA   12        1
// sceneDepthMapSampler              texture  float4          2d    0        1
// waterCausticsSamplerPoint         texture  float4          2d    1        1
// waterCausticsSampler              texture  float4          2d    2        1
// sceneNormalsSampler               texture  float4          2d   12        1
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_FRAME                         cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
mad r1.xyz, r0.xxxx, v2.xyzx, cb0[4].xyzx
mov r1.w, l(1.000000)
dp4 r2.x, cb0[0].xyzw, r1.xyzw
dp4 r2.y, cb0[1].xyzw, r1.xyzw
dp4 r0.y, cb0[3].xyzw, r1.xyzw
div r0.yz, r2.xxyx, r0.yyyy
mad r0.yz, r0.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t1.xyzw, s2
lt r0.y, r2.z, l(0.001000)
if_nz r0.y
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
sample_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t12.wxyz, s12
mad r3.yzw, r0.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
dp2 r0.y, r3.yzyy, r3.yzyy
min r0.y, r0.y, l(1.000000)
add r0.y, r0.y, l(1.000000)
div r0.y, l(2.000000), r0.y
mul r4.xy, r0.yyyy, r3.yzyy
add r3.x, r0.y, l(-1.000000)
lt r0.y, l(0.000000), r3.w
movc r4.zw, r0.yyyy, r3.xxxw, -r3.xxxw
mad r0.y, r2.y, l(0.003906), r2.x
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mad r2.y, r2.w, l(10.000000), r2.x
add r0.yz, -r1.zzzz, r2.xxyx
mul r0.z, |r0.z|, r0.z
mul r0.z, r0.z, l(-2.885390)
exp r0.z, r0.z
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000000)
add r0.w, r0.y, l(0.100000)
mul_sat r0.w, r0.w, l(10.000000)
mad r1.w, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.w
add r2.xy, -r4.zwzz, l(0.250000, 1.000000, 0.000000, 0.000000)
max r1.w, r0.w, r2.x
mul r0.z, r0.z, r1.w
mov_sat r1.w, r0.y
add r1.w, -r1.w, l(1.000000)
mul r1.w, r1.w, r1.w
mul r0.z, r0.z, r1.w
add r2.xzw, -r1.xxyz, cb0[4].xxyz
dp3 r1.w, r2.xzwx, r2.xzwx
div r1.w, l(100.000000), r1.w
min r1.w, r1.w, l(1.000000)
mul r0.z, r0.z, r1.w
mad_sat r0.x, r0.x, cb0[5].y, l(-0.330000)
mul r0.x, r0.x, r0.z
mul r0.yz, r0.yyyy, cb2[2].xxyx
mad r0.w, r0.w, l(2.000000), l(-1.000000)
mad r1.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r1.xyzx
mad r1.xy, r0.yzyy, r0.wwww, r1.xyxx
mov r1.w, l(1.000000)
dp4 r3.x, cb0[0].xyzw, r1.xyzw
dp4 r3.y, cb0[1].xyzw, r1.xyzw
dp4 r0.y, cb0[3].xyzw, r1.xyzw
div r0.yz, r3.xxyx, r0.yyyy
mad r1.xyzw, r0.yzyz, l(0.500000, -0.500000, 0.500000, -0.500000), l(0.500000, 0.500000, 0.499800, 0.499800)
sample_l_indexable(texture2d)(float,float,float,float) r2.x, r1.xyxx, t2.zwxy, s1, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.z, r1.zwzz, t2.xwzy, s1, l(0.000000)
mad r0.yz, r0.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.499600, 0.499600, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.w, r0.yzyy, t2.xwyz, s1, l(0.000000)
mul r0.yzw, r2.xxzw, r2.xxzw
mul r1.xyz, r0.yzwy, r2.xzwx
mul r1.xyz, r1.xyzx, cb2[1].xyzx
mul r1.xyz, r2.yyyy, r1.xyzx
mul r1.xyz, r1.xyzx, cb2[2].wwww
mad r0.yzw, r2.xxzw, r0.yyzw, r1.xxyz
dp3 r0.y, r0.yzwy, l(32.000000, 32.000000, 32.000000, 0.000000)
add r1.w, -r0.y, l(1.000000)
mul r0.x, r0.x, l(0.500000)
mul o0.xyzw, r0.xxxx, r1.xyzw
ret 
// Approximately 77 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
