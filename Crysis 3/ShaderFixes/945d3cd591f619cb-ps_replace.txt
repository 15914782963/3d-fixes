
cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 g_GeneralParams : packoffset(c2);
  float4 vFadeParams[6] : packoffset(c3);
  float4 g_vProjectionParams : packoffset(c9);
  float4 PS_NearFarClipDist : packoffset(c10);
  float4 pFadeOrigin : packoffset(c11);
  float4 PS_ScreenSize : packoffset(c12);
  float4 g_vAttenParams : packoffset(c13);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = _tex1.Sample(_tex1_s, v1.xy).xyz;
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.x = dot(r0.xy, r0.xy);
  r0.y = 0 < r0.z;
  r0.x = min(1, r0.x);
  r0.x = 1 + r0.x;
  r0.x = 2 / r0.x;
  r0.x = -1 + r0.x;
  r0.x = r0.y ? r0.x : -r0.x;
  r0.x = r0.x * 0.25 + 0.75;
  o0.xyz = g_LightDiffuse.xyz * r0.xxx;
  r0.x = _tex0.Sample(_tex0_s, v1.xy).x;
  r0.xyz = -r0.xxx * v2.xyz + g_LightPos.xyz;
  r0.xyz = g_LightPos.www * r0.xyz;
  r0.x = dot(r0.xyz, -r0.xyz);
  r0.x = saturate(1 + r0.x);
  r0.x = saturate(r0.x / g_vAttenParams.w);
  r0.y = r0.x * r0.x;
  r0.x = -r0.x * 2 + 3;
  r0.x = r0.y * r0.x;
  r0.x = g_vAttenParams.x * r0.x;
  o0.w = r0.x;
  o1.w = r0.x;
  o1.xyz = float3(0,0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 g_GeneralParams;            // Offset:   32 Size:    16 [unused]
//   float4 vFadeParams[6];             // Offset:   48 Size:    96 [unused]
//   float4 g_vProjectionParams;        // Offset:  144 Size:    16 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  160 Size:    16 [unused]
//   float4 pFadeOrigin;                // Offset:  176 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:  192 Size:    16 [unused]
//   float4 g_vAttenParams;             // Offset:  208 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex1                             sampler      NA          NA    1        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[14], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t1.xyzw, s1
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp2 r0.x, r0.xyxx, r0.xyxx
lt r0.y, l(0.000000), r0.z
min r0.x, r0.x, l(1.000000)
add r0.x, r0.x, l(1.000000)
div r0.x, l(2.000000), r0.x
add r0.x, r0.x, l(-1.000000)
movc r0.x, r0.y, r0.x, -r0.x
mad r0.x, r0.x, l(0.250000), l(0.750000)
mul o0.xyz, r0.xxxx, cb0[1].xyzx
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
mad r0.xyz, -r0.xxxx, v2.xyzx, cb0[0].xyzx
mul r0.xyz, r0.xyzx, cb0[0].wwww
dp3 r0.x, r0.xyzx, -r0.xyzx
add_sat r0.x, r0.x, l(1.000000)
div_sat r0.x, r0.x, cb0[13].w
mul r0.y, r0.x, r0.x
mad r0.x, -r0.x, l(2.000000), l(3.000000)
mul r0.x, r0.x, r0.y
mul r0.x, r0.x, cb0[13].x
mov o0.w, r0.x
mov o1.w, r0.x
mov o1.xyz, l(0,0,0,0)
ret 
// Approximately 25 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
