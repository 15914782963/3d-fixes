// Lights
cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 g_GeneralParams : packoffset(c2);
  float4 g_ScreenScale : packoffset(c3);
  float4 vWBasisX : packoffset(c4);
  float4 vWBasisY : packoffset(c5);
  float4 vWBasisZ : packoffset(c6);
  float4 vFadeParams[6] : packoffset(c7);
  float4 g_vProjectionParams : packoffset(c13);
  float4 PS_NearFarClipDist : packoffset(c14);
  float4 pFadeOrigin : packoffset(c15);
  float4 PS_ScreenSize : packoffset(c16);
  float4 g_vAttenParams : packoffset(c17);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
SamplerState _cubetex2_s : register(s2);
SamplerState _cubetex3_s : register(s3);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);
TextureCube<float4> _cubetex2 : register(t2);
TextureCube<float4> _cubetex3 : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  
    float4 g_VS_NearFarClipDist : TEXCOORD0,
  float4 g_VS_ScreenSize : TEXCOORD1)
  
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  r0.z = _tex0.Sample(_tex0_s, r0.xy).x;
  r0.xyw = _tex1.Sample(_tex1_s, r0.xy).xyz;
  r1.yzw = r0.xyw * float3(2,2,2) + float3(-1,-1,-1);
  
  float4 stereo = StereoParams.Load(0);
float depth = r0.w * g_VS_NearFarClipDist.y;
v0.x -= stereo.x * (depth - stereo.y) / depth * g_VS_ScreenSize.x / 2;
  
  r0.xyw = vWBasisX.xyz * v0.xxx + vWBasisZ.xyz;
  r0.xyw = vWBasisY.xyz * v0.yyy + r0.xyw;
  r2.xyz = r0.xyw * r0.zzz + -pFadeOrigin.xyz;
  r3.xyz = -r0.xyw * r0.zzz + g_LightPos.xyz;
  r3.xyz = g_LightPos.www * r3.xyz;
  r0.z = dot(r3.xyz, -r3.xyz);
  r0.z = saturate(1 + r0.z);
  r0.z = saturate(r0.z / g_vAttenParams.w);
  r3.xyzw = vFadeParams[1].xyzw * r2.yyyy;
  r3.xyzw = r2.xxxx * vFadeParams[0].xyzw + r3.xyzw;
  r3.xyzw = r2.zzzz * vFadeParams[2].xyzw + r3.xyzw;
  r3.xyzw = saturate(vFadeParams[3].xyzw + r3.xyzw);
  r3.xyzw = float4(1,1,1,1) + -r3.xyzw;
  r3.xy = r3.xy * r3.zw;
  r2.w = 1;
  r4.x = saturate(dot(r2.xyzw, vFadeParams[4].xyzw));
  r4.y = saturate(dot(r2.xyzw, vFadeParams[5].xyzw));
  r2.xy = float2(1,1) + -r4.xy;
  r2.xy = r3.xy * r2.xy;
  r2.x = r2.x * r2.y;
  r2.x = r2.x * r2.x;
  r2.y = r0.z * r0.z;
  r0.z = -r0.z * 2 + 3;
  r0.z = r2.y * r0.z;
  r0.z = g_vAttenParams.x * r0.z;
  r0.z = r0.z * r2.x;
  o0.w = r0.z;
  o1.w = r0.z;
  r0.z = dot(r1.yz, r1.yz);
  r0.z = min(1, r0.z);
  r0.z = 1 + r0.z;
  r0.z = 2 / r0.z;
  r1.x = -1 + r0.z;
  r2.xy = r1.yz * r0.zz;
  r0.z = 0 < r1.w;
  r2.zw = r0.zz ? r1.xw : -r1.xw;
  r1.xyzw = _cubetex2.Sample(_cubetex2_s, r2.xyz).xyzw;
  r0.z = r1.w * r1.w;
  r0.z = 16 * r0.z;
  r1.xyz = r1.xyz * r0.zzz;
  o0.xyz = g_LightDiffuse.xyz * r1.xyz;
  r0.z = dot(r0.xyw, r0.xyw);
  r0.z = rsqrt(r0.z);
  r0.xyz = r0.xyw * r0.zzz;
  r0.w = dot(r0.xyz, r2.xyz);
  r0.w = r0.w + r0.w;
  r0.xyz = r2.xyz * -r0.www + r0.xyz;
  r0.w = -r2.w * g_GeneralParams.x + g_GeneralParams.x;
  r0.xyzw = _cubetex3.SampleLevel(_cubetex3_s, r0.xyz, r0.w).xyzw;
  r0.w = r0.w * r0.w;
  r0.w = 16 * r0.w;
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = g_LightDiffuse.xyz * g_LightDiffuse.www;
  o1.xyz = r1.xyz * r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Fri Jul 24 22:34:01 2015
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 g_GeneralParams;            // Offset:   32 Size:    16
//   float4 g_ScreenScale;              // Offset:   48 Size:    16
//   float4 vWBasisX;                   // Offset:   64 Size:    16
//   float4 vWBasisY;                   // Offset:   80 Size:    16
//   float4 vWBasisZ;                   // Offset:   96 Size:    16
//   float4 vFadeParams[6];             // Offset:  112 Size:    96
//   float4 g_vProjectionParams;        // Offset:  208 Size:    16 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  224 Size:    16 [unused]
//   float4 pFadeOrigin;                // Offset:  240 Size:    16
//   float4 PS_ScreenSize;              // Offset:  256 Size:    16 [unused]
//   float4 g_vAttenParams;             // Offset:  272 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex1                             sampler      NA          NA    1        1
// _cubetex2                         sampler      NA          NA    2        1
// _cubetex3                         sampler      NA          NA    3        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _cubetex2                         texture  float4        cube    2        1
// _cubetex3                         texture  float4        cube    3        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[18], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 5
mad r0.xy, v0.xyxx, cb0[3].xyxx, cb0[3].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t0.yzxw, s0
sample_indexable(texture2d)(float,float,float,float) r0.xyw, r0.xyxx, t1.xywz, s1
mad r1.yzw, r0.xxyw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
mad r0.xyw, cb0[4].xyxz, v0.xxxx, cb0[6].xyxz
mad r0.xyw, cb0[5].xyxz, v0.yyyy, r0.xyxw
mad r2.xyz, r0.xywx, r0.zzzz, -cb0[15].xyzx
mad r3.xyz, -r0.xywx, r0.zzzz, cb0[0].xyzx
mul r3.xyz, r3.xyzx, cb0[0].wwww
dp3 r0.z, r3.xyzx, -r3.xyzx
add_sat r0.z, r0.z, l(1.000000)
div_sat r0.z, r0.z, cb0[17].w
mul r3.xyzw, r2.yyyy, cb0[8].xyzw
mad r3.xyzw, r2.xxxx, cb0[7].xyzw, r3.xyzw
mad r3.xyzw, r2.zzzz, cb0[9].xyzw, r3.xyzw
add_sat r3.xyzw, r3.xyzw, cb0[10].xyzw
add r3.xyzw, -r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
mul r3.xy, r3.zwzz, r3.xyxx
mov r2.w, l(1.000000)
dp4_sat r4.x, r2.xyzw, cb0[11].xyzw
dp4_sat r4.y, r2.xyzw, cb0[12].xyzw
add r2.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, r3.xyxx
mul r2.x, r2.y, r2.x
mul r2.x, r2.x, r2.x
mul r2.y, r0.z, r0.z
mad r0.z, -r0.z, l(2.000000), l(3.000000)
mul r0.z, r0.z, r2.y
mul r0.z, r0.z, cb0[17].x
mul r0.z, r2.x, r0.z
mov o0.w, r0.z
mov o1.w, r0.z
dp2 r0.z, r1.yzyy, r1.yzyy
min r0.z, r0.z, l(1.000000)
add r0.z, r0.z, l(1.000000)
div r0.z, l(2.000000), r0.z
add r1.x, r0.z, l(-1.000000)
mul r2.xy, r0.zzzz, r1.yzyy
lt r0.z, l(0.000000), r1.w
movc r2.zw, r0.zzzz, r1.xxxw, -r1.xxxw
sample_indexable(texturecube)(float,float,float,float) r1.xyzw, r2.xyzx, t2.xyzw, s2
mul r0.z, r1.w, r1.w
mul r0.z, r0.z, l(16.000000)
mul r1.xyz, r0.zzzz, r1.xyzx
mul o0.xyz, r1.xyzx, cb0[1].xyzx
dp3 r0.z, r0.xywx, r0.xywx
rsq r0.z, r0.z
mul r0.xyz, r0.zzzz, r0.xywx
dp3 r0.w, r0.xyzx, r2.xyzx
add r0.w, r0.w, r0.w
mad r0.xyz, r2.xyzx, -r0.wwww, r0.xyzx
mad r0.w, -r2.w, cb0[2].x, cb0[2].x
sample_l_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.xyzx, t3.xyzw, s3, r0.w
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, l(16.000000)
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, cb0[1].wwww, cb0[1].xyzx
mul o1.xyz, r0.xyzx, r1.xyzx
ret 
// Approximately 59 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
