cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}


cbuffer PER_BATCH : register(b0)
{
  row_major float4x4 sceneRainMtx : packoffset(c0);
  float4 sceneRainParams0 : packoffset(c4);
  float4 unscaledFactor : packoffset(c5);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float4x4 vpMatrix : packoffset(c0);
}

cbuffer PER_FRAME : register(b2)
{
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  float4 g_VS_HPosScale : packoffset(c21);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cb2[8].w + sceneRainParams0.w;
  sincos(r0.x, r0.x, r1.x);
  r0.y = r0.x;
  r0.z = r1.x;
  r0.yz = r0.yz * float2(2,2) + cb2[6].xy;
  r1.x = v0.z;
  r1.yz = cb2[6].xy;
  r1.w = v0.z == 1.000000;
  r0.xw = sceneRainParams0.zz * float2(8,4) + float2(8,1);
  r0.xyz = r1.www ? r0.xyz : r1.xyz;
  r2.yw = r0.xx + -r0.ww;
  r0.xw = float2(0.00999999978,0.00999999978) * v0.yx;
  r0.xw = r1.ww ? r0.xw : v0.yx;
  r2.xz = sceneRainParams0.ww * r0.xw;
  r1.x = dot(sceneRainMtx._m01_m00_m02, r2.xzw);
  r1.y = dot(sceneRainMtx._m11_m10_m12, r2.xzw);
  r0.xy = r1.xy + r0.yz;
  r1.x = dot(sceneRainMtx._m21_m20_m22, r2.xzw);
  r0.z = cb2[6].z + r1.x;
  r0.w = v0.w;
  r1.x = dot(vpMatrix._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(vpMatrix._m10_m11_m12_m13, r0.xyzw);
  o0.xy = r1.xy;
  r3.z = dot(vpMatrix._m20_m21_m22_m23, r0.xyzw);
  r3.w = dot(vpMatrix._m30_m31_m32_m33, r0.xyzw);
  o0.zw = r3.zw;
  r0.zw = unscaledFactor.zw * r3.zw;
  r1.xy = r1.xy * float2(1,-1) + r3.ww;
  r3.xy = unscaledFactor.xy * r1.xy;
  r0.xy = float2(0.5,0.5) * r3.xy;
  o1.xyzw = r0.xyzw;
  o2.xy = cb2[21].xy * r0.xy;
  o2.zw = r0.zw;
  r0.x = cb2[8].z * sceneRainParams0.x;
  r0.yz = float2(0.100000001,1.25) * r0.xx;
  o3.xyzw = r2.xwzw * float4(1.5,1.5,3,3) + r0.yzyz;
  r1.xyzw = r2.xyzw * float4(1,1,2,2) + float4(0.200000003,0.200000003,0.200000003,0.200000003);
  o4.xyzw = r0.xxxx * float4(-0.200000003,1.875,-0.200000003,1.875) + r1.xyzw;
  r0.x = dot(r2.xz, r2.xz);
  r0.x = rsqrt(r0.x);
  r0.xy = r2.zx * r0.xx;
  r0.xy = abs(r0.xy) * abs(r0.xy);
  o5.xy = r0.xy * r0.xy;
  o5.z = saturate(1 + -v0.z);
  o5.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   row_major float4x4 sceneRainMtx;   // Offset:    0 Size:    64
//   float4 sceneRainParams0;           // Offset:   64 Size:    16
//   float4 unscaledFactor;             // Offset:   80 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float4x4 vpMatrix;       // Offset:    0 Size:    64
//
// }
//
// cbuffer PER_FRAME
// {
//
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16
//   float4 g_VS_HPosScale;             // Offset:  336 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_input v0.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 4
add r0.x, cb0[4].w, cb2[8].w
sincos r0.x, r1.x, r0.x
mov r0.y, r0.x
mov r0.z, r1.x
mad r0.yz, r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), cb2[6].xxyx
mov r1.x, v0.z
mov r1.yz, cb2[6].xxyx
eq r1.w, v0.z, l(1.000000)
mad r0.xw, cb0[4].zzzz, l(8.000000, 0.000000, 0.000000, 4.000000), l(8.000000, 0.000000, 0.000000, 1.000000)
movc r0.xyz, r1.wwww, r0.xyzx, r1.xyzx
add r2.yw, -r0.wwww, r0.xxxx
mul r0.xw, v0.yyyx, l(0.010000, 0.000000, 0.000000, 0.010000)
movc r0.xw, r1.wwww, r0.xxxw, v0.yyyx
mul r2.xz, r0.xxwx, cb0[4].wwww
dp3 r1.x, cb0[0].yxzy, r2.xzwx
dp3 r1.y, cb0[1].yxzy, r2.xzwx
add r0.xy, r0.yzyy, r1.xyxx
dp3 r1.x, cb0[2].yxzy, r2.xzwx
add r0.z, r1.x, cb2[6].z
mov r0.w, v0.w
dp4 r1.x, cb1[0].xyzw, r0.xyzw
dp4 r1.y, cb1[1].xyzw, r0.xyzw
mov o0.xy, r1.xyxx
dp4 r3.z, cb1[2].xyzw, r0.xyzw
dp4 r3.w, cb1[3].xyzw, r0.xyzw
mov o0.zw, r3.zzzw
mul r0.zw, r3.zzzw, cb0[5].zzzw
mad r1.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r3.wwww
mul r3.xy, r1.xyxx, cb0[5].xyxx
mul r0.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.xyzw, r0.xyzw
mul o2.xy, r0.xyxx, cb2[21].xyxx
mov o2.zw, r0.zzzw
mul r0.x, cb0[4].x, cb2[8].z
mul r0.yz, r0.xxxx, l(0.000000, 0.100000, 1.250000, 0.000000)
mad o3.xyzw, r2.xwzw, l(1.500000, 1.500000, 3.000000, 3.000000), r0.yzyz
mad r1.xyzw, r2.xyzw, l(1.000000, 1.000000, 2.000000, 2.000000), l(0.200000, 0.200000, 0.200000, 0.200000)
mad o4.xyzw, r0.xxxx, l(-0.200000, 1.875000, -0.200000, 1.875000), r1.xyzw
dp2 r0.x, r2.xzxx, r2.xzxx
rsq r0.x, r0.x
mul r0.xy, r0.xxxx, r2.zxzz
mul r0.xy, |r0.xyxx|, |r0.xyxx|
mul o5.xy, r0.xyxx, r0.xyxx
add_sat o5.z, -v0.z, l(1.000000)
mov o5.w, l(0)
ret 
// Approximately 46 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
