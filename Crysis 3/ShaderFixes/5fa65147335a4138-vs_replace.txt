//Rain Drop VS
//cbuffer cb2 : register(b2)
//{
//  float4 cb2[22];
//}


cbuffer PER_BATCH : register(b0)
{
  row_major float4x4 sceneRainMtx : packoffset(c0);
  float4 sceneRainParams0 : packoffset(c4);
  float4 unscaledFactor : packoffset(c5);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float4x4 vpMatrix : packoffset(c0);
}

cbuffer PER_FRAME : register(b2)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_SunLightDir : packoffset(c4);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_ScreenSize : packoffset(c7);
  float4 g_VS_AnimGenParams : packoffset(c8);
  float4 g_VS_NearFarClipDist : packoffset(c9);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
  float4 g_VS_HPosScale : packoffset(c21);
 
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  
  out float4 nearfar : TEXCOORD6,
  out float4 res : TEXCOORD10)
  
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = g_VS_AnimGenParams.w + sceneRainParams0.w;
  sincos(r0.x, r0.x, r1.x);
  r0.y = r0.x;
  r0.z = r1.x;
  r0.yz = r0.yz * float2(2,2) + g_VS_WorldViewPos.xy;
  r1.x = v0.z;
  r1.yz = g_VS_WorldViewPos.xy;
  r1.w = v0.z == 1.000000;
  r0.xw = sceneRainParams0.zz * float2(8,4) + float2(8,1);
  r0.xyz = r1.www ? r0.xyz : r1.xyz;
  r2.yw = r0.xx + -r0.ww;
  r0.xw = float2(0.00999999978,0.00999999978) * v0.yx;
  r0.xw = r1.ww ? r0.xw : v0.yx;
  r2.xz = sceneRainParams0.ww * r0.xw;
  r1.x = dot(sceneRainMtx._m01_m00_m02, r2.xzw);
  r1.y = dot(sceneRainMtx._m11_m10_m12, r2.xzw);
  r0.xy = r1.xy + r0.yz;
  r1.x = dot(sceneRainMtx._m21_m20_m22, r2.xzw);
  r0.z = g_VS_WorldViewPos.z + r1.x;
  r0.w = v0.w;
  r1.x = dot(vpMatrix._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(vpMatrix._m10_m11_m12_m13, r0.xyzw);
  o0.xy = r1.xy;
  r3.z = dot(vpMatrix._m20_m21_m22_m23, r0.xyzw);
  r3.w = dot(vpMatrix._m30_m31_m32_m33, r0.xyzw);
  o0.zw = r3.zw;
  r0.zw = unscaledFactor.zw * r3.zw;
  r1.xy = r1.xy * float2(1,-1) + r3.ww;
  r3.xy = unscaledFactor.xy * r1.xy;
  r0.xy = float2(0.5,0.5) * r3.xy;
  o1.xyzw = r0.xyzw;
  o2.xy = g_VS_HPosScale.xy * r0.xy;
  o2.zw = r0.zw;
  r0.x = g_VS_AnimGenParams.z * sceneRainParams0.x;
  r0.yz = float2(0.100000001,1.25) * r0.xx;
  o3.xyzw = r2.xwzw * float4(1.5,1.5,3,3) + r0.yzyz;
  r1.xyzw = r2.xyzw * float4(1,1,2,2) + float4(0.200000003,0.200000003,0.200000003,0.200000003);
  o4.xyzw = r0.xxxx * float4(-0.200000003,1.875,-0.200000003,1.875) + r1.xyzw;
  r0.x = dot(r2.xz, r2.xz);
  r0.x = rsqrt(r0.x);
  r0.xy = r2.zx * r0.xx;
  r0.xy = abs(r0.xy) * abs(r0.xy);
  o5.xy = r0.xy * r0.xy;
  o5.z = saturate(1 + -v0.z);
  o5.w = 0;
  
   // Pass far clipping plane and screen resolution through to pixel shader:
  nearfar = g_VS_NearFarClipDist;
  res = g_VS_ScreenSize;
  
  return;
}