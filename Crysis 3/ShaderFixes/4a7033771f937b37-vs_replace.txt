//Gun Issue, some kind of Halo - Disable for the moment
//<CalledPixelShaders>1f1c4f1d2bb75019 aa2bd988d9c2acbf ac915f0310808442 c328a5cc067ea12c d10410ffda529f6b d2eb1bb1efe1c976 </CalledPixelShaders>
cbuffer PER_BATCH : register(b0)
{
  float4 vfViewPos : packoffset(c0);
  float4 vfParams : packoffset(c1);
  float3 vSkinPrecisionOffset : packoffset(c2);
  float4 vfRampParams : packoffset(c3);
  float4 _InstancingParams : packoffset(c4);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
}

cbuffer PER_FRAME : register(b2)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
  float4 g_VS_HPosScale : packoffset(c21);
}

cbuffer SKIN_DATA : register(b6)
{
  row_major float2x4 _g_SkinQuat[150] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BLENDWEIGHT0,
  int4 v5 : BLENDINDICES0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = (uint4)v5.xyzw << int4(1,1,1,1);
  r1.xyzw = _g_SkinQuat[r0.y/2]._m10_m11_m12_m13 * v4.yyyy;
  r1.xyzw = _g_SkinQuat[r0.x/2]._m10_m11_m12_m13 * v4.xxxx + r1.xyzw;
  r1.xyzw = _g_SkinQuat[r0.z/2]._m10_m11_m12_m13 * v4.zzzz + r1.xyzw;
  r1.xyzw = _g_SkinQuat[r0.w/2]._m10_m11_m12_m13 * v4.wwww + r1.xyzw;
  r2.xyzw = _g_SkinQuat[r0.y/2]._m00_m01_m02_m03 * v4.yyyy;
  r2.xyzw = _g_SkinQuat[r0.x/2]._m00_m01_m02_m03 * v4.xxxx + r2.xyzw;
  r2.xyzw = _g_SkinQuat[r0.z/2]._m00_m01_m02_m03 * v4.zzzz + r2.xyzw;
  r0.xyzw = _g_SkinQuat[r0.w/2]._m00_m01_m02_m03 * v4.wwww + r2.xyzw;
  r2.x = dot(r0.xyzw, r0.xyzw);
  r2.x = rsqrt(r2.x);
  r1.xyzw = r2.xxxx * r1.xyzw;
  r0.xyzw = r2.xxxx * r0.xyzw;
  r2.xyz = r1.www * r0.xyz;
  r2.xyz = r0.www * r1.xyz + -r2.xyz;
  r3.xyz = r0.zxy * r1.yzx;
  r1.xyz = r0.yzx * r1.zxy + -r3.xyz;
  r1.xyz = r2.xyz + r1.xyz;
  r2.xyz = vSkinPrecisionOffset.xyz + v0.xyz;
  r3.xyz = r2.zxy * r0.xyz;
  r3.xyz = r0.zxy * r2.xyz + -r3.xyz;
  r3.xyz = r0.www * r2.yzx + r3.xyz;
  r4.xyz = r3.xyz * r0.zxy;
  r0.xyz = r0.yzx * r3.yzx + -r4.xyz;
  r0.xyz = r0.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + r2.xyz;
  r0.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + r0.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(ObjWorldMatrix._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(ObjWorldMatrix._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(ObjWorldMatrix._m20_m21_m22_m23, r0.xyzw);
  r1.w = 1.000000000e+000;
  r0.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r1.xyzw);
  r0.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r1.xyzw);
  r0.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r1.xyzw);
  r0.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r1.xyzw);
  o2.xyzw = r1.xyzw;
  o0.xyzw = r0.xyzw;
  r0.xy = r0.xy * float2(1.000000e+000,-1.000000e+000) + r0.ww;
  o3.zw = r0.zw;
  r0.xy = g_VS_HPosScale.xy * r0.xy;
  o3.xy = float2(5.000000e-001,5.000000e-001) * r0.xy;
  o1.xyzw = v1.xyxy;
  
  o0 = 0;
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 vfViewPos;                  // Offset:    0 Size:    16 [unused]
//   float4 vfParams;                   // Offset:   16 Size:    16 [unused]
//   float3 vSkinPrecisionOffset;       // Offset:   32 Size:    12
//   float4 vfRampParams;               // Offset:   48 Size:    16 [unused]
//   float4 _InstancingParams;          // Offset:   64 Size:    16 [unused]
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16 [unused]
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//   float4 g_VS_HPosScale;             // Offset:  336 Size:    16
//
// }
//
// cbuffer SKIN_DATA
// {
//
//   row_major float2x4 _g_SkinQuat[150];// Offset:    0 Size:  4800
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    2        1
// SKIN_DATA                         cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float       
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
// BLENDINDICES             0   xyzw        5     NONE     int   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb6[300], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 5
ishl r0.xyzw, v5.xyzw, l(1, 1, 1, 1)
mul r1.xyzw, v4.yyyy, cb6[r0.y + 1].xyzw
mad r1.xyzw, cb6[r0.x + 1].xyzw, v4.xxxx, r1.xyzw
mad r1.xyzw, cb6[r0.z + 1].xyzw, v4.zzzz, r1.xyzw
mad r1.xyzw, cb6[r0.w + 1].xyzw, v4.wwww, r1.xyzw
mul r2.xyzw, v4.yyyy, cb6[r0.y + 0].xyzw
mad r2.xyzw, cb6[r0.x + 0].xyzw, v4.xxxx, r2.xyzw
mad r2.xyzw, cb6[r0.z + 0].xyzw, v4.zzzz, r2.xyzw
mad r0.xyzw, cb6[r0.w + 0].xyzw, v4.wwww, r2.xyzw
dp4 r2.x, r0.xyzw, r0.xyzw
rsq r2.x, r2.x
mul r1.xyzw, r1.xyzw, r2.xxxx
mul r0.xyzw, r0.xyzw, r2.xxxx
mul r2.xyz, r0.xyzx, r1.wwww
mad r2.xyz, r0.wwww, r1.xyzx, -r2.xyzx
mul r3.xyz, r1.yzxy, r0.zxyz
mad r1.xyz, r0.yzxy, r1.zxyz, -r3.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
add r2.xyz, v0.xyzx, cb0[2].xyzx
mul r3.xyz, r0.xyzx, r2.zxyz
mad r3.xyz, r0.zxyz, r2.xyzx, -r3.xyzx
mad r3.xyz, r0.wwww, r2.yzxy, r3.xyzx
mul r4.xyz, r0.zxyz, r3.xyzx
mad r0.xyz, r0.yzxy, r3.yzxy, -r4.xyzx
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r2.xyzx
mad r0.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb1[0].xyzw, r0.xyzw
dp4 r1.y, cb1[1].xyzw, r0.xyzw
dp4 r1.z, cb1[2].xyzw, r0.xyzw
mov r1.w, l(1.000000)
dp4 r0.x, cb2[10].xyzw, r1.xyzw
dp4 r0.y, cb2[11].xyzw, r1.xyzw
dp4 r0.z, cb2[12].xyzw, r1.xyzw
dp4 r0.w, cb2[13].xyzw, r1.xyzw
mov o2.xyzw, r1.xyzw
mov o0.xyzw, r0.xyzw
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r0.wwww
mov o3.zw, r0.zzzw
mul r0.xy, r0.xyxx, cb2[21].xyxx
mul o3.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.xyzw, v1.xyxy
ret 
// Approximately 43 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
