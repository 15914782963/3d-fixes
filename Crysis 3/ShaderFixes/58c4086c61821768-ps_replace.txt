//Lights
cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 g_ScreenScale : packoffset(c2);
  float4 vWBasisX : packoffset(c3);
  float4 vWBasisY : packoffset(c4);
  float4 vWBasisZ : packoffset(c5);
  row_major float4x4 g_AreaLightParams : packoffset(c6);
  float4 SSDOParams : packoffset(c10);
  float4 PS_ScreenSize : packoffset(c11);
  float4 pFadeOrigin : packoffset(c12);
  float4 PS_NearFarClipDist : packoffset(c13);
  float4 g_AreaLightTexParams : packoffset(c14);
  float4 irreg_kernel_2d[8] : packoffset(c15);
  float4 vFadeParams[6] : packoffset(c23);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
SamplerState _tex8_s : register(s8);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);
Texture2D<float4> _tex8 : register(t8);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  
  
  float4 g_VS_NearFarClipDist : TEXCOORD0,
  float4 g_VS_ScreenSize : TEXCOORD1)
  
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r1.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  r0.w = _tex0.Sample(_tex0_s, r1.xy).x;
  
  float4 stereo = StereoParams.Load(0);
float depth = r0.w * g_VS_NearFarClipDist.y;
v0.x -= stereo.x * (depth - stereo.y) / depth * g_VS_ScreenSize.x / 2;
  
  r0.xyz = vWBasisX.xyz * v0.xxx + vWBasisZ.xyz;
  r0.xyz = vWBasisY.xyz * v0.yyy + r0.xyz;
  
  r2.xyz = -r0.xyz * r0.www + g_LightPos.xyz;
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(g_AreaLightParams._m00_m01_m02, r2.xyz);
  r3.xyz = r0.www * g_AreaLightParams._m00_m01_m02 + -r2.xyz;
  r4.x = dot(r3.xyz, g_AreaLightParams._m10_m11_m12);
  r4.y = dot(r3.xyz, g_AreaLightParams._m20_m21_m22);
  r1.zw = max(-g_AreaLightParams._m30_m31, r4.xy);
  r1.zw = min(g_AreaLightParams._m30_m31, r1.zw);
  r3.xyz = g_AreaLightParams._m20_m21_m22 * r1.www;
  r3.xyz = g_AreaLightParams._m10_m11_m12 * r1.zzz + r3.xyz;
  r3.xyz = r3.xyz + r2.xyz;
  r1.z = dot(r3.xyz, r3.xyz);
  r1.z = rsqrt(r1.z);
  r4.xyz = r3.xyz * r1.zzz;
  r3.xyz = g_LightPos.www * r3.xyz;
  r1.z = dot(r3.xyz, -r3.xyz);
  r1.z = saturate(1 + r1.z);
  r1.w = dot(-r4.xyz, g_AreaLightParams._m00_m01_m02);
  r2.w = 9.99999997e-007 + r1.w;
  r1.w = saturate(r1.w);
  r2.w = saturate(g_AreaLightParams._m03 / r2.w);
  r2.w = log2(r2.w);
  r2.w = g_AreaLightParams._m23 * r2.w;
  r2.w = exp2(r2.w);
  r2.w = 1 + -r2.w;
  r1.z = r2.w * r1.z;
  r1.z = r1.z * r1.z;
  r3.xyz = g_LightDiffuse.xyz * r1.zzz;
  r5.xyzw = _tex1.Sample(_tex1_s, r1.xy).xyzw;
  r6.xyzw = _tex8.Sample(_tex8_s, r1.xy).xyzw;
  r6.xyzw = r6.xyzw * float4(0.977199972,0.977199972,0.977199972,1) + float4(-0.488599986,-0.488599986,-0.488599986,0);
  r7.yzw = r5.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.x = 4 * r5.w;
  r1.y = dot(r7.yz, r7.yz);
  r1.y = min(1, r1.y);
  r1.y = 1 + r1.y;
  r1.y = 2 / r1.y;
  r7.x = -1 + r1.y;
  r5.xy = r7.yz * r1.yy;
  r1.y = 0 < r7.w;
  r5.zw = r1.yy ? r7.xw : -r7.xw;
  r1.y = saturate(dot(r4.xyz, r5.xyz));
  r1.y = r1.y * r1.w;
  r1.z = dot(-r5.xyz, r4.xyz);
  r1.z = saturate(r1.z * 0.600000024 + 0.400000006);
  r1.x = r1.z * r1.x + r1.y;
  r1.yzw = r1.yyy * r3.xyz;
  r3.xyz = r1.xxx * r3.xyz;
  r1.xyz = g_LightDiffuse.www * r1.yzw;
  r4.w = 0.282090008;
  r1.w = dot(r4.xyzw, r6.xyzw);
  r1.w = saturate(SSDOParams.x * r1.w);
  r1.w = 1 + -r1.w;
  o0.xyz = r3.xyz * r1.www;
  o0.w = 0;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  r0.xyz = r1.www * r0.xyz;
  r1.w = dot(-r0.xyz, r5.xyz);
  r1.w = r1.w + r1.w;
  r0.xyz = r5.xyz * -r1.www + -r0.xyz;
  r1.w = r5.w * 10 + 1;
  r1.w = exp2(r1.w);
  r2.w = dot(r0.xyz, g_AreaLightParams._m00_m01_m02);
  r0.w = r0.w / r2.w;
  r2.w = saturate(r2.w);
  r2.xyz = r0.xyz * r0.www + -r2.xyz;
  r0.xyz = r0.xyz * r0.www;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.y = -r1.w * 0.00048828125 + 1;
  r0.x = r0.x * r0.y + 1;
  r0.xyz = r2.xyz / r0.xxx;
  r2.x = dot(r0.xyz, g_AreaLightParams._m10_m11_m12);
  r2.y = dot(r0.xyz, g_AreaLightParams._m20_m21_m22);
  r0.xy = max(-g_AreaLightParams._m30_m31, r2.xy);
  r0.xy = min(g_AreaLightParams._m30_m31, r0.xy);
  r0.xy = r0.xy + -r2.xy;
  r0.x = dot(r0.xy, r0.xy);
  r0.x = min(1, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = log2(r0.x);
  r0.x = r1.w * r0.x;
  r0.y = r1.w * 0.125 + 0.25;
  r0.x = exp2(r0.x);
  r0.x = r0.x * r0.y;
  r0.x = r0.x * r2.w;
  o1.xyz = r1.xyz * r0.xxx;
  o1.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Fri Jul 24 21:01:08 2015
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 g_ScreenScale;              // Offset:   32 Size:    16
//   float4 vWBasisX;                   // Offset:   48 Size:    16
//   float4 vWBasisY;                   // Offset:   64 Size:    16
//   float4 vWBasisZ;                   // Offset:   80 Size:    16
//   row_major float4x4 g_AreaLightParams;// Offset:   96 Size:    64
//   float4 SSDOParams;                 // Offset:  160 Size:    16
//   float4 PS_ScreenSize;              // Offset:  176 Size:    16 [unused]
//   float4 pFadeOrigin;                // Offset:  192 Size:    16 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  208 Size:    16 [unused]
//   float4 g_AreaLightTexParams;       // Offset:  224 Size:    16 [unused]
//   float4 irreg_kernel_2d[8];         // Offset:  240 Size:   128 [unused]
//   float4 vFadeParams[6];             // Offset:  368 Size:    96 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex1                             sampler      NA          NA    1        1
// _tex8                             sampler      NA          NA    8        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _tex8                             texture  float4          2d    8        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[11], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 8
mad r0.xyz, cb0[3].xyzx, v0.xxxx, cb0[5].xyzx
mad r0.xyz, cb0[4].xyzx, v0.yyyy, r0.xyzx
mad r1.xy, v0.xyxx, cb0[2].xyxx, cb0[2].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t0.yzwx, s0
mad r2.xyz, -r0.xyzx, r0.wwww, cb0[0].xyzx
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, cb0[6].xyzx, r2.xyzx
mad r3.xyz, r0.wwww, cb0[6].xyzx, -r2.xyzx
dp3 r4.x, r3.xyzx, cb0[7].xyzx
dp3 r4.y, r3.xyzx, cb0[8].xyzx
max r1.zw, r4.xxxy, -cb0[9].xxxy
min r1.zw, r1.zzzw, cb0[9].xxxy
mul r3.xyz, r1.wwww, cb0[8].xyzx
mad r3.xyz, cb0[7].xyzx, r1.zzzz, r3.xyzx
add r3.xyz, r2.xyzx, r3.xyzx
dp3 r1.z, r3.xyzx, r3.xyzx
rsq r1.z, r1.z
mul r4.xyz, r1.zzzz, r3.xyzx
mul r3.xyz, r3.xyzx, cb0[0].wwww
dp3 r1.z, r3.xyzx, -r3.xyzx
add_sat r1.z, r1.z, l(1.000000)
dp3 r1.w, -r4.xyzx, cb0[6].xyzx
add r2.w, r1.w, l(0.000001)
mov_sat r1.w, r1.w
div_sat r2.w, cb0[6].w, r2.w
log r2.w, r2.w
mul r2.w, r2.w, cb0[8].w
exp r2.w, r2.w
add r2.w, -r2.w, l(1.000000)
mul r1.z, r1.z, r2.w
mul r1.z, r1.z, r1.z
mul r3.xyz, r1.zzzz, cb0[1].xyzx
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r1.xyxx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r6.xyzw, r1.xyxx, t8.xyzw, s8
mad r6.xyzw, r6.xyzw, l(0.977200, 0.977200, 0.977200, 1.000000), l(-0.488600, -0.488600, -0.488600, 0.000000)
mad r7.yzw, r5.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
mul r1.x, r5.w, l(4.000000)
dp2 r1.y, r7.yzyy, r7.yzyy
min r1.y, r1.y, l(1.000000)
add r1.y, r1.y, l(1.000000)
div r1.y, l(2.000000), r1.y
add r7.x, r1.y, l(-1.000000)
mul r5.xy, r1.yyyy, r7.yzyy
lt r1.y, l(0.000000), r7.w
movc r5.zw, r1.yyyy, r7.xxxw, -r7.xxxw
dp3_sat r1.y, r4.xyzx, r5.xyzx
mul r1.y, r1.w, r1.y
dp3 r1.z, -r5.xyzx, r4.xyzx
mad_sat r1.z, r1.z, l(0.600000), l(0.400000)
mad r1.x, r1.z, r1.x, r1.y
mul r1.yzw, r3.xxyz, r1.yyyy
mul r3.xyz, r3.xyzx, r1.xxxx
mul r1.xyz, r1.yzwy, cb0[1].wwww
mov r4.w, l(0.282090)
dp4 r1.w, r4.xyzw, r6.xyzw
mul_sat r1.w, r1.w, cb0[10].x
add r1.w, -r1.w, l(1.000000)
mul o0.xyz, r1.wwww, r3.xyzx
mov o0.w, l(0)
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww
dp3 r1.w, -r0.xyzx, r5.xyzx
add r1.w, r1.w, r1.w
mad r0.xyz, r5.xyzx, -r1.wwww, -r0.xyzx
mad r1.w, r5.w, l(10.000000), l(1.000000)
exp r1.w, r1.w
dp3 r2.w, r0.xyzx, cb0[6].xyzx
div r0.w, r0.w, r2.w
mov_sat r2.w, r2.w
mad r2.xyz, r0.xyzx, r0.wwww, -r2.xyzx
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
mad r0.y, -r1.w, l(0.000488), l(1.000000)
mad r0.x, r0.x, r0.y, l(1.000000)
div r0.xyz, r2.xyzx, r0.xxxx
dp3 r2.x, r0.xyzx, cb0[7].xyzx
dp3 r2.y, r0.xyzx, cb0[8].xyzx
max r0.xy, r2.xyxx, -cb0[9].xyxx
min r0.xy, r0.xyxx, cb0[9].xyxx
add r0.xy, -r2.xyxx, r0.xyxx
dp2 r0.x, r0.xyxx, r0.xyxx
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
log r0.x, r0.x
mul r0.x, r0.x, r1.w
mad r0.y, r1.w, l(0.125000), l(0.250000)
exp r0.x, r0.x
mul r0.x, r0.y, r0.x
mul r0.x, r2.w, r0.x
mul o1.xyz, r0.xxxx, r1.xyzx
mov o1.w, l(0)
ret 
// Approximately 94 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
