//Halo
cbuffer PER_BATCH : register(b0)
{
  float4 vfViewPos : packoffset(c0);
  float4 vfParams : packoffset(c1);
  float3 vSkinPrecisionOffset : packoffset(c2);
  float4 vfRampParams : packoffset(c3);
  float4 _InstancingParams : packoffset(c4);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 Ambient : packoffset(c3);
  float4 BendInfo : packoffset(c4);
  float4 AmbientOp : packoffset(c5);
  float4 AvgFogVolumeContrib : packoffset(c6);
}

cbuffer PER_FRAME : register(b2)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
  float4 g_VS_HPosScale : packoffset(c21);
}

cbuffer SKIN_DATA : register(b6)
{
  row_major float2x4 _g_SkinQuat[150] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BLENDWEIGHT0,
  int4 v5 : BLENDINDICES0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : COLOR0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = (uint4)v5.xyzw << int4(1,1,1,1);
  r1.xyzw = _g_SkinQuat[r0.y/2]._m10_m11_m12_m13 * v4.yyyy;
  r1.xyzw = _g_SkinQuat[r0.x/2]._m10_m11_m12_m13 * v4.xxxx + r1.xyzw;
  r1.xyzw = _g_SkinQuat[r0.z/2]._m10_m11_m12_m13 * v4.zzzz + r1.xyzw;
  r1.xyzw = _g_SkinQuat[r0.w/2]._m10_m11_m12_m13 * v4.wwww + r1.xyzw;
  r2.xyzw = _g_SkinQuat[r0.y/2]._m00_m01_m02_m03 * v4.yyyy;
  r2.xyzw = _g_SkinQuat[r0.x/2]._m00_m01_m02_m03 * v4.xxxx + r2.xyzw;
  r2.xyzw = _g_SkinQuat[r0.z/2]._m00_m01_m02_m03 * v4.zzzz + r2.xyzw;
  r0.xyzw = _g_SkinQuat[r0.w/2]._m00_m01_m02_m03 * v4.wwww + r2.xyzw;
  r2.x = dot(r0.xyzw, r0.xyzw);
  r2.x = rsqrt(r2.x);
  r1.xyzw = r2.xxxx * r1.xyzw;
  r0.xyzw = r2.xxxx * r0.xyzw;
  r2.xyz = r1.www * r0.xyz;
  r2.xyz = r0.www * r1.xyz + -r2.xyz;
  r3.xyz = r0.zxy * r1.yzx;
  r1.xyz = r0.yzx * r1.zxy + -r3.xyz;
  r1.xyz = r2.xyz + r1.xyz;
  r2.xyz = vSkinPrecisionOffset.xyz + v0.xyz;
  r3.xyz = r2.zxy * r0.xyz;
  r3.xyz = r0.zxy * r2.xyz + -r3.xyz;
  r3.xyz = r0.www * r2.yzx + r3.xyz;
  r4.xyz = r3.xyz * r0.zxy;
  r3.xyz = r0.yzx * r3.yzx + -r4.xyz;
  r2.xyz = r3.xyz * float3(2,2,2) + r2.xyz;
  r1.xyz = r1.xyz * float3(2,2,2) + r2.xyz;
  r1.w = 1;
  r2.x = dot(ObjWorldMatrix._m00_m01_m02_m03, r1.xyzw);
  r2.y = dot(ObjWorldMatrix._m10_m11_m12_m13, r1.xyzw);
  r2.z = dot(ObjWorldMatrix._m20_m21_m22_m23, r1.xyzw);
  r2.w = 1;
  r1.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r2.xyzw);
  r1.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r2.xyzw);
  r1.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r2.xyzw);
  r1.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r2.xyzw);
  o0.xyzw = r1.xyzw;
  
      float4 stereo = StereoParams.Load(0);
  r1.x += stereo.x * (r1.w - stereo.y);
  
  r1.xy = r1.xy * float2(1,-1) + r1.ww;
  o5.zw = r1.zw;
  r1.xy = g_VS_HPosScale.xy * r1.xy;
  o5.xy = float2(0.5,0.5) * r1.xy;
  o1.xyzw = v1.xyzw;
  r1.xyz = float3(0,0,9.99999997e-007) + v3.yzx;
  r1.xyz = r1.xyz * r0.zxy;
  r3.xyz = float3(0,9.99999997e-007,0) + v3.zxy;
  r1.xyz = r0.yzx * r3.xyz + -r1.xyz;
  r3.xyz = float3(9.99999997e-007,0,0) + v3.xyz;
  r2.w = dot(r0.xyz, r3.xyz);
  r1.w = -r2.w;
  r3.xyzw = float4(9.99999997e-007,0,0,0) + v3.xyzw;
  r1.xyzw = r3.xyzw * r0.wwww + r1.xyzw;
  r0.xyz = r0.xyz * v3.www + r1.xyz;
  r3.xyz = float3(-2,-2,-2) * r0.xyz;
  r1.xyz = -r0.xyz;
  r0.xyz = float3(2,2,-2) * r1.www;
  r4.xyz = r1.wzy * r0.yzy + float3(-1,0,0);
  r0.xyz = r1.zwx * r0.xyz + float3(0,-1,0);
  r0.xyz = r1.yyy * r3.xyz + r0.xyz;
  r1.xyz = r1.xxx * r3.xyz + r4.xyz;
  r3.x = dot(ObjWorldMatrix._m00_m01_m02, r1.xyz);
  r3.y = dot(ObjWorldMatrix._m10_m11_m12, r1.xyz);
  r3.z = dot(ObjWorldMatrix._m20_m21_m22, r1.xyz);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r3.xyz * r0.www;
  r3.x = dot(ObjWorldMatrix._m00_m01_m02, r0.xyz);
  r3.y = dot(ObjWorldMatrix._m10_m11_m12, r0.xyz);
  r3.z = dot(ObjWorldMatrix._m20_m21_m22, r0.xyz);
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r3.xyz * r0.xxx;
  r3.xyz = r1.zxy * r0.yzx;
  r3.xyz = r1.yzx * r0.zxy + -r3.xyz;
  o2.xyz = r1.xyz;
  o3.xyz = r0.xyz;
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r3.xyz * r0.xxx;
  r0.w = 0 < v3.w;
  r1.x = v3.w < 0;
  r0.w = ((int)r0.w ? -1 : 0) + ((int)r1.x ? 1 : 0);
  r0.w = (int)r0.w;
  r0.xyz = r0.xyz * r0.www;
  r1.x = dot(-r2.xyz, -r2.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = -r2.xyz * r1.xxx;
  r0.x = dot(r1.xyz, r0.xyz);
  r0.y = 0 < r0.x;
  r0.x = r0.x < 0;
  r0.x = ((int)r0.y ? -1 : 0) + ((int)r0.x ? 1 : 0);
  r0.x = (int)r0.x;
  o2.w = r0.w * r0.x;
  o3.w = 0;
  r0.x = vfParams.x * r2.z;
  r0.y = 1.44269502 * r0.x;
  r0.y = exp2(r0.y);
  r0.y = -1 + r0.y;
  r0.y = r0.y / r0.x;
  r0.x = 0.00999999978 < abs(r0.x);
  r0.x = r0.x ? r0.y : 1;
  r0.y = dot(r2.xyz, r2.xyz);
  o4.xyz = r2.xyz;
  r0.y = sqrt(r0.y);
  r0.z = vfParams.y * r0.y;
  r0.y = saturate(r0.y * vfRampParams.x + vfRampParams.y);
  r0.x = r0.x * r0.z;
  r0.x = exp2(-r0.x);
  r0.x = min(1, r0.x);
  r0.x = 1 + -r0.x;
  r0.z = 2 + -r0.y;
  r0.y = r0.y * r0.z;
  r0.y = r0.y * vfRampParams.z + vfRampParams.w;
  r0.x = -r0.x * r0.y + 1;
  o4.w = max(vfParams.w, r0.x);
  o6.xyzw = AvgFogVolumeContrib.xyzw;
  o7.xyzw = AmbientOp.xyzw;
  o8.xyzw = v2.zyxw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Wed Jul 29 23:02:23 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 vfViewPos;                  // Offset:    0 Size:    16 [unused]
//   float4 vfParams;                   // Offset:   16 Size:    16
//   float3 vSkinPrecisionOffset;       // Offset:   32 Size:    12
//   float4 vfRampParams;               // Offset:   48 Size:    16
//   float4 _InstancingParams;          // Offset:   64 Size:    16 [unused]
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 Ambient;                    // Offset:   48 Size:    16 [unused]
//   float4 BendInfo;                   // Offset:   64 Size:    16 [unused]
//   float4 AmbientOp;                  // Offset:   80 Size:    16
//   float4 AvgFogVolumeContrib;        // Offset:   96 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16 [unused]
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//   float4 g_VS_HPosScale;             // Offset:  336 Size:    16
//
// }
//
// cbuffer SKIN_DATA
// {
//
//   row_major float2x4 _g_SkinQuat[150];// Offset:    0 Size:  4800
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    2        1
// SKIN_DATA                         cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
// BLENDINDICES             0   xyzw        5     NONE     int   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// COLOR                    0   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb6[300], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_temps 5
ishl r0.xyzw, v5.xyzw, l(1, 1, 1, 1)
mul r1.xyzw, v4.yyyy, cb6[r0.y + 1].xyzw
mad r1.xyzw, cb6[r0.x + 1].xyzw, v4.xxxx, r1.xyzw
mad r1.xyzw, cb6[r0.z + 1].xyzw, v4.zzzz, r1.xyzw
mad r1.xyzw, cb6[r0.w + 1].xyzw, v4.wwww, r1.xyzw
mul r2.xyzw, v4.yyyy, cb6[r0.y + 0].xyzw
mad r2.xyzw, cb6[r0.x + 0].xyzw, v4.xxxx, r2.xyzw
mad r2.xyzw, cb6[r0.z + 0].xyzw, v4.zzzz, r2.xyzw
mad r0.xyzw, cb6[r0.w + 0].xyzw, v4.wwww, r2.xyzw
dp4 r2.x, r0.xyzw, r0.xyzw
rsq r2.x, r2.x
mul r1.xyzw, r1.xyzw, r2.xxxx
mul r0.xyzw, r0.xyzw, r2.xxxx
mul r2.xyz, r0.xyzx, r1.wwww
mad r2.xyz, r0.wwww, r1.xyzx, -r2.xyzx
mul r3.xyz, r1.yzxy, r0.zxyz
mad r1.xyz, r0.yzxy, r1.zxyz, -r3.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
add r2.xyz, v0.xyzx, cb0[2].xyzx
mul r3.xyz, r0.xyzx, r2.zxyz
mad r3.xyz, r0.zxyz, r2.xyzx, -r3.xyzx
mad r3.xyz, r0.wwww, r2.yzxy, r3.xyzx
mul r4.xyz, r0.zxyz, r3.xyzx
mad r3.xyz, r0.yzxy, r3.yzxy, -r4.xyzx
mad r2.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r2.xyzx
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r2.xyzx
mov r1.w, l(1.000000)
dp4 r2.x, cb1[0].xyzw, r1.xyzw
dp4 r2.y, cb1[1].xyzw, r1.xyzw
dp4 r2.z, cb1[2].xyzw, r1.xyzw
mov r2.w, l(1.000000)
dp4 r1.x, cb2[10].xyzw, r2.xyzw
dp4 r1.y, cb2[11].xyzw, r2.xyzw
dp4 r1.z, cb2[12].xyzw, r2.xyzw
dp4 r1.w, cb2[13].xyzw, r2.xyzw
mov o0.xyzw, r1.xyzw
mad r1.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r1.wwww
mov o5.zw, r1.zzzw
mul r1.xy, r1.xyxx, cb2[21].xyxx
mul o5.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.xyzw, v1.xyzw
add r1.xyz, v3.yzxy, l(0.000000, 0.000000, 0.000001, 0.000000)
mul r1.xyz, r0.zxyz, r1.xyzx
add r3.xyz, v3.zxyz, l(0.000000, 0.000001, 0.000000, 0.000000)
mad r1.xyz, r0.yzxy, r3.xyzx, -r1.xyzx
add r3.xyz, v3.xyzx, l(0.000001, 0.000000, 0.000000, 0.000000)
dp3 r2.w, r0.xyzx, r3.xyzx
mov r1.w, -r2.w
add r3.xyzw, v3.xyzw, l(0.000001, 0.000000, 0.000000, 0.000000)
mad r1.xyzw, r3.xyzw, r0.wwww, r1.xyzw
mad r0.xyz, r0.xyzx, v3.wwww, r1.xyzx
mul r3.xyz, r0.xyzx, l(-2.000000, -2.000000, -2.000000, 0.000000)
mov r1.xyz, -r0.xyzx
mul r0.xyz, r1.wwww, l(2.000000, 2.000000, -2.000000, 0.000000)
mad r4.xyz, r1.wzyw, r0.yzyy, l(-1.000000, 0.000000, 0.000000, 0.000000)
mad r0.xyz, r1.zwxz, r0.xyzx, l(0.000000, -1.000000, 0.000000, 0.000000)
mad r0.xyz, r1.yyyy, r3.xyzx, r0.xyzx
mad r1.xyz, r1.xxxx, r3.xyzx, r4.xyzx
dp3 r3.x, cb1[0].xyzx, r1.xyzx
dp3 r3.y, cb1[1].xyzx, r1.xyzx
dp3 r3.z, cb1[2].xyzx, r1.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r3.xyzx
dp3 r3.x, cb1[0].xyzx, r0.xyzx
dp3 r3.y, cb1[1].xyzx, r0.xyzx
dp3 r3.z, cb1[2].xyzx, r0.xyzx
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r3.xyzx
mul r3.xyz, r0.yzxy, r1.zxyz
mad r3.xyz, r1.yzxy, r0.zxyz, -r3.xyzx
mov o2.xyz, r1.xyzx
mov o3.xyz, r0.xyzx
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r3.xyzx
lt r0.w, l(0.000000), v3.w
lt r1.x, v3.w, l(0.000000)
iadd r0.w, -r0.w, r1.x
itof r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r1.x, -r2.xyzx, -r2.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, -r2.xyzx
dp3 r0.x, r1.xyzx, r0.xyzx
lt r0.y, l(0.000000), r0.x
lt r0.x, r0.x, l(0.000000)
iadd r0.x, -r0.y, r0.x
itof r0.x, r0.x
mul o2.w, r0.x, r0.w
mov o3.w, l(0)
mul r0.x, r2.z, cb0[1].x
mul r0.y, r0.x, l(1.442695)
exp r0.y, r0.y
add r0.y, r0.y, l(-1.000000)
div r0.y, r0.y, r0.x
lt r0.x, l(0.010000), |r0.x|
movc r0.x, r0.x, r0.y, l(1.000000)
dp3 r0.y, r2.xyzx, r2.xyzx
mov o4.xyz, r2.xyzx
sqrt r0.y, r0.y
mul r0.z, r0.y, cb0[1].y
mad_sat r0.y, r0.y, cb0[3].x, cb0[3].y
mul r0.x, r0.z, r0.x
exp r0.x, -r0.x
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
add r0.z, -r0.y, l(2.000000)
mul r0.y, r0.z, r0.y
mad r0.y, r0.y, cb0[3].z, cb0[3].w
mad r0.x, -r0.x, r0.y, l(1.000000)
max o4.w, r0.x, cb0[1].w
mov o6.xyzw, cb1[6].xyzw
mov o7.xyzw, cb1[5].xyzw
mov o8.xyzw, v2.zyxw
ret 
// Approximately 117 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
