// CRC32: A6DC1097 | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 1/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend DstColor Zero
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "SHADOWS_OFF" "SPOT" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Matrix 8 [_LightMatrix0]
//           Vector 12 [_WorldSpaceCameraPos]
//           Vector 13 [_ProjectionParams]
//           Vector 14 [_ZBufferParams]
//           Vector 15 [_LightPos]
//           Vector 16 [_LightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTexture0] 2D 2
//           SetTexture 3 [_LightTextureB0] 2D 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    def c17, 2.00000000, -1.00000000, -0.81005859, -0.50000000
    def c18, 0.00000000, 1.00000000, 0.79980469, 128.00000000
    def c19, 0.21997070, 0.70703125, 0.07098389, 5.00000000
    def c20, 0.98000002, 0.02000000, 10.00000000, 0
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

    rcp r0.x, v0.w
    mul r3.xy, v0, r0.x
    texld r0.x, r3, s1
    texld r3, r3, s0
    mad r0.w, r0.x, c14.x, c14.y
    rcp r0.y, v1.z
    mul r0.y, r0, c13.z
    mov r2.w, c18.y
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r2.xyz, r0, r0.w

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r2.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r2.x, -r31.w, r30.x, r2.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r4.x, r2, c0
    dp4 r4.y, r2, c1
    dp4 r0.w, r2, c2
    mov r0.z, r0.w
    mov r0.x, r4
    mov r0.y, r4
    add r1.xyz, -r0, c15
    add r0.xyz, r0, -c12
    dp3 r4.w, r0, r0
    dp3 r1.w, r1, r1
    rsq r4.z, r1.w
    mul r1.xyz, r4.z, r1
    mad_pp r3.xyz, r3, c17.x, c17.y
    dp3_pp r4.z, r3, r3
    rsq_pp r4.z, r4.z
    mul_pp r3.xyz, r4.z, r3
    rsq r4.w, r4.w
    mad r5.xyz, -r4.w, r0, r1
    dp3_pp r6.x, r1, r3
    rcp_pp r0.y, r4.z
    abs_pp r0.x, r6
    add_pp r0.y, r0, c17.z
    cmp r0.y, r0, c18.x, c18
    mov r4.z, r0.w
    mov r4.w, c18.y
    dp4 r0.w, r4, c11
    add r5.w, r0.y, c17
    dp4 r0.y, r4, c9
    cmp_pp r0.x, r6, r6, r0
    max_pp r0.z, r6.x, c18.x
    cmp_pp r6.y, -r5.w, r0.z, r0.x
    dp4 r0.z, r4, c10
    dp4 r0.x, r4, c8
    cmp r6.z, r0.w, c18.x, c18.y
    texldp r0.w, r0, s2
    dp4 r0.y, r2, r2
    mul r0.x, r1.w, c15.w
    rsq r0.y, r0.y
    mul r0.z, r0.w, r6
    texld r0.x, r0.x, s3
    mul r0.w, r0.z, r0.x
    mul r4.xyz, r0.y, r2
    dp3_pp r0.x, r3, r4
    cmp_pp r0.y, r0.x, c18.x, c18
    cmp_pp r0.x, -r0, c18, c18.y
    add_pp r4.w, r0.x, -r0.y
    mul_pp r1.w, r6.x, r4
    cmp_pp r2.w, -r5, r6.x, r1
    mul r0.z, r6.y, r0.w
    mul r0.xyz, r0.z, c16
    mul_pp r4.xyz, r0, c18.zzxw
    cmp_pp r6.xyz, r2.w, r0, r4
    mul_pp r4.xyz, r3, r4.w
    dp3 r0.x, r5, r5
    rsq r0.x, r0.x
    mul r0.xyz, r0.x, r5
    mov r1.w, c18.x
    cmp_pp r3.xyz, -r5.w, r3, r4
    dp3_pp r0.x, r0, r3
    dp4 r5.z, r1, c6
    dp4 r5.y, r1, c5
    dp4 r5.x, r1, c4
    dp3 r4.w, r2, r2
    rsq r1.w, r4.w
    mad r1.xyz, r2, -r1.w, r5
    dp3 r4.x, r1, r1
    rsq r0.y, r4.x
    max_pp r4.x, r0, c18
    mul r0.xyz, r0.y, r1
    mul_pp r1.x, r3.w, c18.w
    mul r2.xyz, r1.w, r2
    dp3_sat r0.x, -r2, r0
    pow_pp r3, r4.x, r1.x
    add r0.x, -r0, c18.y
    pow r1, r0.x, c19.w
    mov r0.z, r1.x
    mov_sat r0.x, r0.w
    mov_pp r0.y, r3.x
    mul r0.w, r0.y, r0.x
    mad r1.x, r0.z, c20, c20.y
    mov_pp r0.xyz, c16
    dp3_pp r0.x, c19, r0
    mul_pp_sat r1.y, r2.w, c20.z
    mul r1.x, r1, r1.y
    mul r0.y, r1.x, c20.z
    mul r0.x, r0.w, r0
    mul_pp r0.x, r0, r0.y
    exp_pp oC0.x, -r6.x
    exp_pp oC0.y, -r6.y
    exp_pp oC0.z, -r6.z
    exp_pp oC0.w, -r0.x
