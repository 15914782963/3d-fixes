// CRC32: 0C4D62EC | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 3/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend One One
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Matrix 8 [_LightMatrix0]
//           Vector 12 [_WorldSpaceCameraPos]
//           Vector 13 [_ProjectionParams]
//           Vector 14 [_ZBufferParams]
//           Vector 15 [_LightPositionRange]
//           Vector 16 [_LightShadowData]
//           Vector 17 [_LightPos]
//           Vector 18 [_LightColor]
//           Vector 19 [_SkylightColor]
//           Vector 20 [_SunlightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTextureB0] 2D 2
//           SetTexture 3 [_ShadowMapTexture] CUBE 3
//           SetTexture 4 [_LightTexture0] CUBE 4
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_cube s3
    dcl_cube s4
    def c21, 2.00000000, -1.00000000, -0.81005859, -0.50000000
    def c22, 0.00000000, 1.00000000, 0.97000003, 0.79980469
    def c23, 1.00000000, 0.00392157, 0.00001538, 0.00000006
    def c24, 0.50000000, 0.05000000, 0.04000000, 0.03000000
    def c25, 0.25000000, 128.00000000, 5.00000000, 10.00000000
    def c26, 0.21997070, 0.70703125, 0.07098389, 0
    def c27, 0.98000002, 0.02000000, 0, 0
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

    rcp r0.x, v0.w
    mul r6.xy, v0, r0.x
    texld r0.x, r6, s1
    mad r0.w, r0.x, c14.x, c14.y
    rcp r0.y, v1.z
    mul r0.y, r0, c13.z
    mov r2.w, c22.y
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r2.xyz, r0, r0.w

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r2.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r2.x, -r31.w, r30.x, r2.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r5.x, r2, c0
    dp4 r5.y, r2, c1
    dp4 r0.w, r2, c2
    mov r1.z, r0.w
    mov r1.x, r5
    mov r1.y, r5
    add r0.xyz, r1, -c17
    dp3 r3.w, r0, r0
    add r1.xyz, r1, -c12
    dp3 r1.w, r1, r1
    rsq r4.w, r3.w
    mul r3.xyz, r4.w, r0
    rsq r1.w, r1.w
    mad r4.xyz, -r1.w, r1, -r3
    dp3 r1.x, r4, r4
    rsq r5.z, r1.x
    texld r1, r6, s0
    mul r4.xyz, r5.z, r4
    dp4 r5.z, r2, r2
    mad_pp r1.xyz, r1, c21.x, c21.y
    dp3_pp r2.w, r1, r1
    rsq_pp r2.w, r2.w
    mul_pp r1.xyz, r2.w, r1
    dp3_pp r6.w, -r3, r1
    rsq r5.z, r5.z
    mul r6.xyz, r5.z, r2
    dp3_pp r5.z, r1, r6
    cmp_pp r5.w, r5.z, c22.x, c22.y
    cmp_pp r5.z, -r5, c22.x, c22.y
    add_pp r7.w, r5.z, -r5
    abs_pp r5.z, r6.w
    cmp_pp r8.x, r6.w, r6.w, r5.z
    mov r3.xyz, -r3
    mov_pp r5.z, r0.w
    mov_pp r5.w, c22.y
    mul_pp r6.xyz, r1, r7.w
    dp4 r7.z, r5, c10
    dp4 r7.x, r5, c8
    dp4 r7.y, r5, c9
    texld r5, r0, s3
    rcp r0.x, r4.w
    texld r0.w, r7, s4
    mul r0.x, r0, c15.w
    dp4 r0.y, r5, c23
    mad r0.y, -r0.x, c22.z, r0
    mul r0.x, r3.w, c17.w
    mov r0.z, c16.x
    cmp r0.z, r0.y, c22.y, r0
    texld r0.x, r0.x, s2
    rcp_pp r0.y, r2.w
    mul r0.z, r0.x, r0
    mul r2.w, r0.z, r0
    add_pp r0.x, r0.y, c21.z
    cmp r0.w, r0.x, c22.x, c22.y
    add r3.w, r0, c21
    max_pp r0.x, r6.w, c22
    cmp_pp r0.x, -r3.w, r0, r8
    mul r4.w, r0.x, r2
    cmp_pp r0.xyz, -r3.w, r1, r6
    dp3_pp r0.z, r0, r4
    mul r1.xyz, r4.w, c18
    mul_pp r0.x, r6.w, r7.w
    cmp_pp r0.x, -r3.w, r6.w, r0
    mul_pp r4.xyz, r1, c22.wwxw
    cmp_pp r1.xyz, r0.x, r1, r4
    mov r3.w, c22.x
    mad_pp r0.y, r0, c24.x, c24.x
    dp4 r4.z, r3, c6
    dp4 r4.y, r3, c5
    dp4 r4.x, r3, c4
    dp3 r3.x, r2, r2
    rsq r4.w, r3.x
    mad r4.xyz, r2, -r4.w, r4
    mul r2.xyz, r4.w, r2
    max_pp r0.z, r0, c22.x
    mul_pp r1.w, r1, c25.y
    pow_pp r3, r0.z, r1.w
    dp3 r0.z, r4, r4
    mov_pp r1.w, r3.x
    rsq r0.z, r0.z
    mul r3.xyz, r0.z, r4
    dp3_sat r2.x, -r2, r3
    mov_sat r0.z, r2.w
    add r3.x, -r2, c22.y
    pow r2, r3.x, c25.z
    mul r0.z, r1.w, r0
    mov_pp r3.xyz, c18
    dp3_pp r1.w, c26, r3
    mul r0.z, r0, r1.w
    mad r1.w, r2.x, c27.x, c27.y
    mul_pp_sat r2.x, r0, c25.w
    mul r1.w, r1, r2.x
    mad r0.x, r0.y, c21, c21.y
    abs r0.x, r0
    mad r0.x, r0, c24, c24
    add r0.x, r0, -r0.y
    mad r0.x, r0.w, r0, r0.y
    mul r1.w, r1, c25
    mov r2.xyz, c20
    mad r2.xyz, r2, c24.x, c24.x
    mul r2.xyz, r2, c19.z
    mad r0.x, r0, r0, c24.y
    mul r3.xyz, r2, c24.zyww
    mul r2.xyz, r0.x, c19
    mul_pp r0.w, r0.z, r1
    mad r2.xyz, r2, c25.x, r3
    add_pp r0.xyz, r1, r2
    mov_pp oC0, r0.wxyz
