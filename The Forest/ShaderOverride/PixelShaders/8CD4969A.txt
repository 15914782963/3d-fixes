// CRC32: 8CD4969A | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 2/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend One One
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "GI_OFF" "POINT_COOKIE" "SHADOWS_OFF" "SKY_OCCLUSION_OFF" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Matrix 8 [_LightMatrix0]
//           Vector 12 [_WorldSpaceCameraPos]
//           Vector 13 [_ProjectionParams]
//           Vector 14 [_ZBufferParams]
//           Vector 15 [_LightPos]
//           Vector 16 [_LightColor]
//           Vector 17 [_SkylightColor]
//           Vector 18 [_SunlightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTextureB0] 2D 2
//           SetTexture 3 [_LightTexture0] CUBE 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_cube s3
    def c19, 2.00000000, -1.00000000, -0.81005859, -0.50000000
    def c20, 0.00000000, 1.00000000, 0.79980469, 0.50000000
    def c21, 0.05000000, 0.04000000, 0.03000000, 0.25000000
    def c22, 128.00000000, 0.21997070, 0.70703125, 0.07098389
    def c23, 5.00000000, 0.98000002, 0.02000000, 10.00000000
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz
    rcp r0.x, v0.w
    mul r3.xy, v0, r0.x
    texld r0.x, r3, s1
    texld r3, r3, s0
    mad r0.w, r0.x, c14.x, c14.y
    rcp r0.y, v1.z
    mul r0.y, r0, c13.z
    mov r1.w, c20.y
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r1.xyz, r0, r0.w

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r1.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r1.x, r31.w, r30.x, r1.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r0.z, r1, c2
    dp4 r0.x, r1, c0
    dp4 r0.y, r1, c1
    dp4 r4.w, r1, r1
    mov r2.z, r0
    mov r2.x, r0
    mov r2.y, r0
    add r5.xyz, r2, -c15
    dp3 r2.w, r5, r5
    rsq r0.w, r2.w
    mad_pp r4.xyz, r3, c19.x, c19.y
    mul r3.xyz, r0.w, r5
    dp3_pp r0.w, r4, r4
    rsq_pp r1.w, r0.w
    rsq r0.w, r4.w
    mul_pp r4.xyz, r1.w, r4
    mul r5.xyz, r0.w, r1
    dp3_pp r0.w, r4, r5
    dp3_pp r4.w, -r3, r4
    abs_pp r5.y, r4.w
    cmp_pp r5.x, r0.w, c20, c20.y
    cmp_pp r0.w, -r0, c20.x, c20.y
    add_pp r5.w, r0, -r5.x
    mov_pp r0.w, c20.y
    cmp_pp r6.x, r4.w, r4.w, r5.y
    dp4 r5.z, r0, c10
    dp4 r5.x, r0, c8
    dp4 r5.y, r0, c9
    mul r0.x, r2.w, c15.w
    rcp_pp r0.y, r1.w
    add_pp r0.y, r0, c19.z
    cmp r2.w, r0.y, c20.x, c20.y
    add r6.w, r2, c19
    texld r0.w, r5, s3
    texld r0.x, r0.x, s2
    mul r1.w, r0.x, r0
    max_pp r0.x, r4.w, c20
    cmp_pp r0.x, -r6.w, r0, r6
    mul_pp r6.xyz, r4, r5.w
    mul_pp r0.w, r4, r5
    mul r0.x, r0, r1.w
    mul r0.xyz, r0.x, c16
    mul_pp r5.xyz, r0, c20.zzxw
    cmp_pp r0.w, -r6, r4, r0
    cmp_pp r0.xyz, r0.w, r0, r5
    cmp_pp r4.xyz, -r6.w, r4, r6
    mad_pp r4.w, r4.y, c20, c20
    add r2.xyz, r2, -c12
    dp3 r5.y, r2, r2
    mad r5.x, r4.w, c19, c19.y
    rsq r5.y, r5.y
    mad r6.xyz, -r5.y, r2, -r3
    abs r5.x, r5
    mad r5.x, r5, c20.w, c20.w
    add r5.x, r5, -r4.w
    mad r2.w, r2, r5.x, r4
    mov r2.xyz, c18
    mad r2.xyz, r2, c20.w, c20.w
    mul r2.xyz, r2, c17.z
    mad r2.w, r2, r2, c21.x
    mul r5.xyz, r2, c21.yxzw
    mul r2.xyz, r2.w, c17
    mad r2.xyz, r2, c21.w, r5
    add_pp oC0.xyz, r0, r2
    mov r2.xyz, -r3
    dp3 r2.w, r6, r6
    rsq r4.w, r2.w
    mov r2.w, c20.x
    dp3 r3.x, r1, r1
    dp4 r0.z, r2, c6
    dp4 r0.y, r2, c5
    dp4 r0.x, r2, c4
    rsq r2.w, r3.x
    mad r0.xyz, r1, -r2.w, r0
    mul r2.xyz, r4.w, r6
    dp3_pp r2.x, r4, r2
    dp3 r3.x, r0, r0
    rsq r2.y, r3.x
    mul r3.xyz, r2.w, r1
    mul r0.xyz, r2.y, r0
    dp3_sat r0.x, -r3, r0
    mul_pp r1.x, r3.w, c22
    max_pp r2.x, r2, c20
    pow_pp r3, r2.x, r1.x
    add r0.x, -r0, c20.y
    pow r2, r0.x, c23.x
    mov r0.z, r2.x
    mov_pp r0.y, r3.x
    mov_sat r0.x, r1.w
    mul r1.x, r0.y, r0
    mad r1.y, r0.z, c23, c23.z
    mov_pp r0.xyz, c16
    dp3_pp r0.x, c22.yzww, r0
    mul_pp_sat r0.w, r0, c23
    mul r0.w, r1.y, r0
    mul r0.y, r0.w, c23.w
    mul r0.x, r1, r0
    mul_pp oC0.w, r0.x, r0.y
