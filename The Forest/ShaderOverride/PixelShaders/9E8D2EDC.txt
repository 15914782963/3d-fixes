// CRC32: 9E8D2EDC | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 3/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend One One
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "POINT" "SHADOWS_CUBE" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Vector 8 [_WorldSpaceCameraPos]
//           Vector 9 [_ProjectionParams]
//           Vector 10 [_ZBufferParams]
//           Vector 11 [_LightPositionRange]
//           Vector 12 [_LightShadowData]
//           Vector 13 [_LightPos]
//           Vector 14 [_LightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTextureB0] 2D 2
//           SetTexture 3 [_ShadowMapTexture] CUBE 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_cube s3
    def c15, 1.00000000, 2.00000000, -1.00000000, -0.81005859
    def c16, 0.00000000, 1.00000000, -0.50000000, 128.00000000
    def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000006
    def c18, 0.97000003, 0.21997070, 0.70703125, 0.07098389
    def c19, 5.00000000, 0.98000002, 0.02000000, 10.00000000
    def c20, 0.79980469, 0.00000000, 0, 0
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz
    rcp r0.x, v0.w
    mul r2.xy, v0, r0.x
    texld r0.x, r2, s1
    texld r2, r2, s0
    mad r0.w, r0.x, c10.x, c10.y
    rcp r0.y, v1.z
    mul r0.y, r0, c9.z
    mov r1.w, c15.x
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r1.xyz, r0, r0.w
    mad_pp r2.xyz, r2, c15.y, c15.z
    dp3_pp r0.w, r2, r2
    rsq_pp r0.w, r0.w
    mul_pp r2.xyz, r0.w, r2
    rcp_pp r0.w, r0.w
    add_pp r0.w, r0, c15

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r1.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r1.x, r31.w, r30.x, r1.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r3.z, r1, c2
    dp4 r3.x, r1, c0
    dp4 r3.y, r1, c1
    add r0.xyz, r3, -c13
    add r3.xyz, r3, -c8
    dp3 r5.x, r3, r3
    dp3 r3.w, r0, r0
    rsq r4.w, r3.w
    mul r4.xyz, r4.w, r0
    dp3_pp r6.x, -r4, r2
    dp4 r1.w, r1, r1
    rsq r5.x, r5.x
    mad r5.xyz, -r5.x, r3, -r4
    dp3 r3.x, r5, r5
    abs_pp r3.y, r6.x
    rsq r5.w, r3.x
    mul r5.xyz, r5.w, r5
    cmp_pp r6.z, r6.x, r6.x, r3.y
    rsq r1.w, r1.w
    mul r3.xyz, r1.w, r1
    dp3_pp r3.x, r2, r3
    cmp r0.w, r0, c16.x, c16.y
    add r1.w, r0, c16.z
    texld r0, r0, s3
    dp4 r0.y, r0, c17
    rcp r3.y, r4.w
    mul r0.x, r3.y, c11.w
    max_pp r6.y, r6.x, c16.x
    mad r0.y, -r0.x, c18.x, r0
    mov r0.z, c12.x
    mul r0.x, r3.w, c13.w
    cmp r0.y, r0, c15.x, r0.z
    texld r0.x, r0.x, s2
    mul r3.w, r0.x, r0.y
    cmp_pp r6.y, -r1.w, r6, r6.z
    mul r0.z, r3.w, r6.y
    cmp_pp r0.y, r3.x, c16.x, c16
    cmp_pp r0.x, -r3, c16, c16.y
    add_pp r0.w, r0.x, -r0.y
    mul r0.xyz, r0.z, c14
    mul_pp r4.w, r0, r6.x
    cmp_pp r4.w, -r1, r6.x, r4
    mul_pp r6.xyz, r2, r0.w
    cmp_pp r2.xyz, -r1.w, r2, r6
    dp3_pp r1.w, r5, r2
    mul_pp r3.xyz, r0, c20.xxyw
    cmp_pp r3.xyz, r4.w, r0, r3
    mov r0.xyz, -r4
    mov r0.w, c16.x
    dp4 r4.x, r0, c4
    dp4 r4.z, r0, c6
    dp4 r4.y, r0, c5
    dp3 r5.w, r1, r1
    rsq r0.w, r5.w
    mad r0.xyz, r1, -r0.w, r4
    mul r1.xyz, r0.w, r1
    dp3 r4.x, r0, r0
    rsq r2.y, r4.x
    mul r0.xyz, r2.y, r0
    dp3_sat r0.x, -r1, r0
    mul_pp r0.w, r2, c16
    max_pp r2.x, r1.w, c16
    pow_pp r1, r2.x, r0.w
    add r1.y, -r0.x, c15.x
    pow r0, r1.y, c19.x
    mov_pp r0.z, r1.x
    mov_sat r0.y, r3.w
    mov r0.w, r0.x
    mul r0.x, r0.z, r0.y
    mad r0.y, r0.w, c19, c19.z
    mul_pp_sat r0.z, r4.w, c19.w
    mul r0.z, r0.y, r0
    mov_pp r1.xyz, c14
    dp3_pp r0.y, c18.yzww, r1
    mul r0.z, r0, c19.w
    mul r0.x, r0, r0.y
    mul_pp r3.w, r0.x, r0.z
    mov_pp oC0, r3.wxyz
