// CRC32: BD936A6A | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 3/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend One One
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "POINT" "SHADOWS_OFF" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Vector 8 [_WorldSpaceCameraPos]
//           Vector 9 [_ProjectionParams]
//           Vector 10 [_ZBufferParams]
//           Vector 11 [_LightPos]
//           Vector 12 [_LightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTextureB0] 2D 2
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    def c13, 1.00000000, 2.00000000, -1.00000000, -0.81005859
    def c14, 0.00000000, 1.00000000, -0.50000000, 128.00000000
    def c15, 0.21997070, 0.70703125, 0.07098389, 5.00000000
    def c16, 0.98000002, 0.02000000, 10.00000000, 0
    def c17, 0.79980469, 0.00000000, 0, 0
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

    rcp r0.x, v0.w
    mul r2.xy, v0, r0.x
    texld r0.x, r2, s1
    texld r2, r2, s0
    mad r0.w, r0.x, c10.x, c10.y
    mad_pp r2.xyz, r2, c13.y, c13.z
    dp3_pp r4.x, r2, r2
    rsq_pp r4.x, r4.x
    rcp r0.y, v1.z
    mul r0.y, r0, c9.z
    mov r1.w, c13.x
    mul_pp r2.xyz, r4.x, r2
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r1.xyz, r0, r0.w

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r1.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r1.x, -r31.w, r30.x, r1.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r0.z, r1, c2
    dp4 r0.x, r1, c0
    dp4 r0.y, r1, c1
    add r3.xyz, r0, -c11
    dp3 r0.w, r3, r3
    rsq r3.w, r0.w
    add r0.xyz, r0, -c8
    mul r3.xyz, r3.w, r3
    dp3 r3.w, r0, r0
    rsq r3.w, r3.w
    mad r5.xyz, -r3.w, r0, -r3
    dp3_pp r3.w, -r3, r2
    dp3 r0.x, r5, r5
    rsq r0.y, r0.x
    rcp_pp r0.x, r4.x
    abs_pp r0.z, r3.w
    cmp_pp r4.y, r3.w, r3.w, r0.z
    dp4 r0.z, r1, r1
    add_pp r0.x, r0, c13.w
    cmp r0.x, r0, c14, c14.y
    add r1.w, r0.x, c14.z
    max_pp r4.x, r3.w, c14
    mul r0.x, r0.w, c11.w
    cmp_pp r4.w, -r1, r4.x, r4.y
    rsq r0.z, r0.z
    mul r4.xyz, r0.z, r1
    dp3_pp r0.z, r2, r4
    cmp_pp r0.w, r0.z, c14.x, c14.y
    texld r0.x, r0.x, s2
    mul r4.x, r0, r4.w
    mul r4.xyz, r4.x, c12
    cmp_pp r0.z, -r0, c14.x, c14.y
    add_pp r0.z, r0, -r0.w
    mul_pp r0.w, r0.z, r3
    cmp_pp r4.w, -r1, r3, r0
    mul_pp r6.xyz, r4, c17.xxyw
    cmp_pp r4.xyz, r4.w, r4, r6
    mul_pp r6.xyz, r2, r0.z
    mov r3.w, c14.x
    mov r3.xyz, -r3
    mul r5.xyz, r0.y, r5
    dp4 r0.w, r3, c6
    dp4 r0.z, r3, c5
    dp4 r0.y, r3, c4
    dp3 r5.w, r1, r1
    rsq r3.w, r5.w
    mad r3.xyz, r1, -r3.w, r0.yzww
    cmp_pp r2.xyz, -r1.w, r2, r6
    dp3_pp r0.y, r5, r2
    dp3 r0.z, r3, r3
    rsq r0.z, r0.z
    mul r2.xyz, r0.z, r3
    mul r1.xyz, r3.w, r1
    mul_pp r0.z, r2.w, c14.w
    dp3_sat r0.w, -r1, r2
    max_pp r0.y, r0, c14.x
    pow_pp r2, r0.y, r0.z
    add r0.y, -r0.w, c13.x
    pow r1, r0.y, c15.w
    mov r0.z, r1.x
    mov_pp r0.y, r2.x
    mov_sat r0.x, r0
    mul r0.x, r0.y, r0
    mad r0.y, r0.z, c16.x, c16
    mul_pp_sat r0.z, r4.w, c16
    mul r0.z, r0.y, r0
    mov_pp r1.xyz, c12
    dp3_pp r0.y, c15, r1
    mul r0.z, r0, c16
    mul r0.x, r0, r0.y
    mul_pp r4.w, r0.x, r0.z
    mov_pp oC0, r4.wxyz
