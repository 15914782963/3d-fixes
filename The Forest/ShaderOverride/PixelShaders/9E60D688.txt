// CRC32: 9E60D688 | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 1/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend DstColor Zero
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Matrix 8 [_LightMatrix0]
//           Vector 12 [_WorldSpaceCameraPos]
//           Vector 13 [_ProjectionParams]
//           Vector 14 [_ZBufferParams]
//           Vector 15 [_LightPositionRange]
//           Vector 16 [_LightShadowData]
//           Vector 17 [_LightPos]
//           Vector 18 [_LightColor]
//           Vector 19 [_SkylightColor]
//           Vector 20 [_SunlightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTextureB0] 2D 2
//           SetTexture 3 [_ShadowMapTexture] CUBE 3
//           SetTexture 4 [_LightTexture0] CUBE 4
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_cube s3
    dcl_cube s4
    def c21, 2.00000000, -1.00000000, -0.81005859, -0.50000000
    def c22, 0.00000000, 1.00000000, 0.00781250, -0.00781250
    def c23, 1.00000000, 0.00392157, 0.00001538, 0.00000006
    def c24, 0.97000003, 0.25000000, 0.79980469, 0.00000000
    def c25, 0.50000000, 0.05000000, 0.04000000, 0.03000000
    def c26, 128.00000000, 0.21997070, 0.70703125, 0.07098389
    def c27, 5.00000000, 0.98000002, 0.02000000, 10.00000000
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

    rcp r0.x, v0.w
    mul r6.xy, v0, r0.x
    texld r0.x, r6, s1
    mad r0.w, r0.x, c14.x, c14.y
    rcp r0.y, v1.z
    mul r0.y, r0, c13.z
    mov r1.w, c22.y
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r1.xyz, r0, r0.w

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r1.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r1.x, r31.w, r30.x, r1.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r6.z, r1, c0
    dp4 r4.w, r1, c2
    dp4 r6.w, r1, c1
    mov r3.z, r4.w
    mov r3.x, r6.z
    mov r3.y, r6.w
    add r4.xyz, r3, -c17
    dp3 r7.x, r4, r4
    rsq r3.w, r7.x
    rcp r0.x, r3.w
    mul r7.y, r0.x, c15.w
    add r2.xyz, r4, c22.zwww
    texld r2, r2, s3
    dp4 r5.w, r2, c23
    add r0.xyz, r4, c22.wzww
    texld r0, r0, s3
    dp4 r5.z, r0, c23
    add r2.xyz, r4, c22.z
    add r0.xyz, r4, c22.wwzw
    texld r2, r2, s3
    dp4 r5.x, r2, c23
    texld r2, r6, s0
    mov_pp r6.x, r6.w
    texld r0, r0, s3
    dp4 r5.y, r0, c23
    mad r0, -r7.y, c24.x, r5
    mov r5.x, c16
    cmp r0, r0, c22.y, r5.x
    dp4 r5.x, r1, r1
    dp4_pp r0.w, r0, c24.y
    mad_pp r2.xyz, r2, c21.x, c21.y
    dp3_pp r1.w, r2, r2
    rsq_pp r5.w, r1.w
    mul r0.x, r7, c17.w
    texld r0.x, r0.x, s2
    mul r7.x, r0, r0.w
    rcp_pp r0.w, r5.w
    rsq r5.x, r5.x
    mul_pp r2.xyz, r5.w, r2
    mul r5.xyz, r5.x, r1
    dp3_pp r1.w, r2, r5
    mov_pp r6.y, r4.w
    mov_pp r6.w, c22.y
    add_pp r0.w, r0, c21.z
    cmp r4.w, r0, c22.x, c22.y
    dp4 r5.z, r6.zxyw, c10
    dp4 r5.y, r6.zxyw, c9
    dp4 r5.x, r6.zxyw, c8
    mul r4.xyz, r3.w, r4
    texld r0.w, r5, s4
    dp3_pp r6.y, -r4, r2
    add r5.w, r4, c21
    cmp_pp r0.y, -r1.w, c22.x, c22
    cmp_pp r0.z, r1.w, c22.x, c22.y
    add_pp r1.w, r0.y, -r0.z
    mul_pp r0.xyz, r2, r1.w
    cmp_pp r0.xyz, -r5.w, r2, r0
    mad_pp r6.x, r0.y, c25, c25
    mad r3.w, r6.x, c21.x, c21.y
    abs r2.y, r3.w
    mad r2.z, r2.y, c25.x, c25.x
    abs_pp r2.x, r6.y
    cmp_pp r2.y, r6, r6, r2.x
    add r3.w, r2.z, -r6.x
    mad r3.w, r4, r3, r6.x
    max_pp r2.x, r6.y, c22
    mul_pp r1.w, r6.y, r1
    mov r4.w, c22.x
    mul r0.w, r7.x, r0
    cmp_pp r2.x, -r5.w, r2, r2.y
    mul r2.x, r2, r0.w
    mul r2.xyz, r2.x, c18
    mul_pp r5.xyz, r2, c24.zzww
    cmp_pp r1.w, -r5, r6.y, r1
    cmp_pp r2.xyz, r1.w, r2, r5
    mov r5.xyz, c20
    mad r6.xyz, r5, c25.x, c25.x
    mad r3.w, r3, r3, c25.y
    mul r6.xyz, r6, c19.z
    mul r5.xyz, r3.w, c19
    add r3.xyz, r3, -c12
    dp3 r3.w, r3, r3
    rsq r3.w, r3.w
    mad r3.xyz, -r3.w, r3, -r4
    mul r6.xyz, r6, c25.zyww
    mad r5.xyz, r5, c24.y, r6
    add_pp r2.xyz, r2, r5
    mov r4.xyz, -r4
    exp_pp oC0.x, -r2.x
    dp3 r2.x, r3, r3
    exp_pp oC0.y, -r2.y
    rsq r2.y, r2.x
    dp3 r2.x, r1, r1
    mul r3.xyz, r2.y, r3
    dp3_pp r0.x, r0, r3
    rsq r2.x, r2.x
    mul r3.xyz, r2.x, r1
    dp4 r5.z, r4, c6
    dp4 r5.y, r4, c5
    dp4 r5.x, r4, c4
    mad r4.xyz, r1, -r2.x, r5
    dp3 r2.y, r4, r4
    rsq r0.y, r2.y
    max_pp r2.y, r0.x, c22.x
    mul r0.xyz, r0.y, r4
    dp3_sat r0.x, -r3, r0
    mul_pp r1.x, r2.w, c26
    pow_pp r4, r2.y, r1.x
    add r0.x, -r0, c22.y
    pow r3, r0.x, c27.x
    mov r0.z, r3.x
    mov_sat r0.x, r0.w
    mov_pp r0.y, r4.x
    mul r0.w, r0.y, r0.x
    mad r1.x, r0.z, c27.y, c27.z
    mov_pp r0.xyz, c18
    dp3_pp r0.x, c26.yzww, r0
    mul_pp_sat r1.y, r1.w, c27.w
    mul r1.x, r1, r1.y
    mul r0.y, r1.x, c27.w
    mul r0.x, r0.w, r0
    mul_pp r0.x, r0, r0.y
    exp_pp oC0.z, -r2.z
    exp_pp oC0.w, -r0.x
