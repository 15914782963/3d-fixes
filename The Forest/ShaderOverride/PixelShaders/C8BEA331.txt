// CRC32: C8BEA331 | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 3/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend One One
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Vector 8 [_WorldSpaceCameraPos]
//           Vector 9 [_ProjectionParams]
//           Vector 10 [_ZBufferParams]
//           Vector 11 [_LightPositionRange]
//           Vector 12 [_LightShadowData]
//           Vector 13 [_LightPos]
//           Vector 14 [_LightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTextureB0] 2D 2
//           SetTexture 3 [_ShadowMapTexture] CUBE 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_cube s3
    def c15, 1.00000000, 2.00000000, -1.00000000, -0.81005859
    def c16, 0.00000000, 1.00000000, -0.50000000, 128.00000000
    def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
    def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000006
    def c19, 0.21997070, 0.70703125, 0.07098389, 5.00000000
    def c20, 0.98000002, 0.02000000, 10.00000000, 0
    def c21, 0.79980469, 0.00000000, 0, 0
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz
    rcp r0.x, v0.w
    mul r7.xy, v0, r0.x
    texld r0.x, r7, s1
    mad r0.w, r0.x, c10.x, c10.y
    rcp r0.y, v1.z
    mul r0.y, r0, c9.z
    mov r1.w, c15.x
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r1.xyz, r0, r0.w

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r1.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r1.x, r31.w, r30.x, r1.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r0.z, r1, c2
    dp4 r0.x, r1, c0
    dp4 r0.y, r1, c1
    add r2.xyz, r0, -c13
    add r0.xyz, r0, -c8
    dp3 r0.w, r0, r0
    dp3 r5.w, r2, r2
    rsq r2.w, r5.w
    mul r4.xyz, r2.w, r2
    rsq r0.w, r0.w
    mad r5.xyz, -r0.w, r0, -r4
    dp3 r0.x, r5, r5
    rsq r4.w, r0.x
    rcp r0.w, r2.w
    mul r5.xyz, r4.w, r5
    add r3.xyz, r2, c17.yxyw
    add r6.xyz, r2, c17.yyxw
    add r0.xyz, r2, c17.xyyw
    mul r6.w, r0, c11
    texld r0, r0, s3
    dp4 r3.w, r0, c18
    texld r0, r3, s3
    dp4 r3.z, r0, c18
    texld r0, r6, s3
    dp4 r3.y, r0, c18
    texld r0, r7, s0
    add r2.xyz, r2, c17.x
    texld r2, r2, s3
    dp4 r3.x, r2, c18
    mad r2, -r6.w, c17.z, r3
    mad_pp r0.xyz, r0, c15.y, c15.z
    dp3_pp r3.x, r0, r0
    mov r3.y, c12.x
    cmp r2, r2, c15.x, r3.y
    rsq_pp r6.x, r3.x
    mul_pp r3.xyz, r6.x, r0
    dp4_pp r0.y, r2, c17.w
    dp3_pp r2.w, -r4, r3
    abs_pp r0.z, r2.w
    mul r0.x, r5.w, c13.w
    texld r0.x, r0.x, s2
    mul r3.w, r0.x, r0.y
    dp4 r0.y, r1, r1
    rcp_pp r0.x, r6.x
    add_pp r0.x, r0, c15.w
    cmp r1.w, r0.x, c16.x, c16.y
    cmp_pp r2.y, r2.w, r2.w, r0.z
    rsq r0.y, r0.y
    mul r0.xyz, r0.y, r1
    dp3_pp r0.x, r3, r0
    cmp_pp r0.y, r0.x, c16.x, c16
    cmp_pp r0.x, -r0, c16, c16.y
    add_pp r6.x, r0, -r0.y
    mul_pp r5.w, r6.x, r2
    add r1.w, r1, c16.z
    max_pp r2.x, r2.w, c16
    cmp_pp r5.w, -r1, r2, r5
    cmp_pp r2.x, -r1.w, r2, r2.y
    mul r0.z, r3.w, r2.x
    mul r0.xyz, r0.z, c14
    mul_pp r2.xyz, r0, c21.xxyw
    cmp_pp r0.xyz, r5.w, r0, r2
    mul_pp r6.xyz, r3, r6.x
    cmp_pp r3.xyz, -r1.w, r3, r6
    dp3_pp r1.w, r5, r3
    mov r2.xyz, -r4
    mov r2.w, c16.x
    dp4 r4.x, r2, c4
    dp4 r4.z, r2, c6
    dp4 r4.y, r2, c5
    dp3 r4.w, r1, r1
    rsq r2.w, r4.w
    mad r2.xyz, r1, -r2.w, r4
    dp3 r4.x, r2, r2
    rsq r3.x, r4.x
    mul r1.xyz, r2.w, r1
    mul r2.xyz, r3.x, r2
    dp3_sat r1.x, -r1, r2
    max_pp r1.w, r1, c16.x
    mul_pp r0.w, r0, c16
    pow_pp r2, r1.w, r0.w
    add r0.w, -r1.x, c15.x
    pow r1, r0.w, c19.w
    mov_pp r1.y, r2.x
    mov_sat r0.w, r3
    mul r0.w, r1.y, r0
    mad r1.w, r1.x, c20.x, c20.y
    mov_pp r1.xyz, c14
    dp3_pp r1.x, c19, r1
    mul_pp_sat r2.x, r5.w, c20.z
    mul r1.w, r1, r2.x
    mul r1.y, r1.w, c20.z
    mul r0.w, r0, r1.x
    mul_pp r0.w, r0, r1.y
    mov_pp oC0, r0.wxyz
