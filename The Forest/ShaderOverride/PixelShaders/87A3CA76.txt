// CRC32: 87A3CA76 | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 1/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend DstColor Zero
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Matrix 8 [_LightMatrix0]
//           Vector 12 [_WorldSpaceCameraPos]
//           Vector 13 [_ProjectionParams]
//           Vector 14 [_ZBufferParams]
//           Vector 15 [_LightPositionRange]
//           Vector 16 [_LightShadowData]
//           Vector 17 [_LightPos]
//           Vector 18 [_LightColor]
//           Vector 19 [_SkylightColor]
//           Vector 20 [_SunlightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTextureB0] 2D 2
//           SetTexture 3 [_ShadowMapTexture] CUBE 3
//           SetTexture 4 [_LightTexture0] CUBE 4
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_cube s3
    dcl_cube s4
    def c21, 2.00000000, -1.00000000, -0.81005859, -0.50000000
    def c22, 0.00000000, 1.00000000, 0.97000003, 0.79980469
    def c23, 1.00000000, 0.00392157, 0.00001538, 0.00000006
    def c24, 0.50000000, 0.05000000, 0.04000000, 0.03000000
    def c25, 0.25000000, 128.00000000, 5.00000000, 10.00000000
    def c26, 0.21997070, 0.70703125, 0.07098389, 0
    def c27, 0.98000002, 0.02000000, 0, 0
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

    rcp r0.x, v0.w
    mul r0.xy, v0, r0.x
    texld r1, r0, s0
    texld r0.x, r0, s1
    rcp r0.z, v1.z
    mad r0.w, r0.x, c14.x, c14.y
    mul r0.y, r0.z, c13.z
    mad_pp r1.xyz, r1, c21.x, c21.y
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r2.xyz, r0, r0.w
    dp3_pp r0.x, r1, r1
    mov r2.w, c22.y
    dp4 r0.y, r2, r2
    rsq_pp r0.w, r0.x
    rsq r0.y, r0.y
    mul_pp r6.xyz, r0.w, r1
    mul r0.xyz, r0.y, r2
    dp3_pp r0.x, r6, r0

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r2.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r2.x, -r31.w, r30.x, r2.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r0.z, r2, c2
    cmp_pp r0.y, r0.x, c22.x, c22
    cmp_pp r0.x, -r0, c22, c22.y
    add_pp r7.x, r0, -r0.y
    dp4 r0.y, r2, c1
    rcp_pp r0.x, r0.w
    add_pp r0.w, r0.x, c21.z
    dp4 r0.x, r2, c0
    cmp r3.w, r0, c22.x, c22.y
    mul_pp r3.xyz, r6, r7.x
    add r6.w, r3, c21
    cmp_pp r4.xyz, -r6.w, r6, r3
    mad_pp r4.w, r4.y, c24.x, c24.x
    mad r0.w, r4, c21.x, c21.y
    abs r5.w, r0
    mov r1.z, r0
    mov r1.x, r0
    mov r1.y, r0
    add r5.xyz, r1, -c17
    dp3 r2.w, r5, r5
    rsq r7.z, r2.w
    mul r3.xyz, r7.z, r5
    dp3_pp r7.y, -r3, r6
    abs_pp r0.w, r7.y
    mad r8.x, r5.w, c24, c24
    cmp_pp r7.w, r7.y, r7.y, r0
    mov_pp r0.w, c22.y
    dp4 r6.z, r0, c10
    dp4 r6.x, r0, c8
    dp4 r6.y, r0, c9
    texld r5, r5, s3
    dp4 r0.y, r5, c23
    rcp r0.x, r7.z
    mul r0.x, r0, c15.w
    mad r0.y, -r0.x, c22.z, r0
    mov r0.z, c16.x
    mul r0.x, r2.w, c17.w
    add r5.w, r8.x, -r4
    mad r3.w, r3, r5, r4
    texld r0.w, r6, s4
    cmp r0.y, r0, c22, r0.z
    texld r0.x, r0.x, s2
    mul r0.x, r0, r0.y
    mul r2.w, r0.x, r0
    max_pp r0.x, r7.y, c22
    cmp_pp r0.x, -r6.w, r0, r7.w
    mul r0.x, r0, r2.w
    mul r0.xyz, r0.x, c18
    mul_pp r0.w, r7.y, r7.x
    mul_pp r5.xyz, r0, c22.wwxw
    cmp_pp r0.w, -r6, r7.y, r0
    cmp_pp r0.xyz, r0.w, r0, r5
    mov r5.xyz, c20
    mad r6.xyz, r5, c24.x, c24.x
    mad r3.w, r3, r3, c24.y
    mul r6.xyz, r6, c19.z
    mul r5.xyz, r3.w, c19
    add r1.xyz, r1, -c12
    dp3 r3.w, r1, r1
    rsq r3.w, r3.w
    mad r1.xyz, -r3.w, r1, -r3
    mul r6.xyz, r6, c24.zyww
    mad r5.xyz, r5, c25.x, r6
    add_pp r0.xyz, r0, r5
    exp_pp oC0.x, -r0.x
    dp3 r0.x, r1, r1
    rsq r0.x, r0.x
    mul r1.xyz, r0.x, r1
    dp3_pp r0.x, r4, r1
    exp_pp oC0.y, -r0.y
    dp3 r0.y, r2, r2
    mov r3.w, c22.x
    mov r3.xyz, -r3
    rsq r0.y, r0.y
    dp4 r5.z, r3, c6
    dp4 r5.y, r3, c5
    dp4 r5.x, r3, c4
    mad r3.xyz, r2, -r0.y, r5
    dp3 r3.w, r3, r3
    rsq r1.x, r3.w
    mul r2.xyz, r0.y, r2
    mul r1.xyz, r1.x, r3
    mul_pp r0.y, r1.w, c25
    max_pp r0.x, r0, c22
    pow_pp r3, r0.x, r0.y
    dp3_sat r1.x, -r2, r1
    add r0.x, -r1, c22.y
    pow r1, r0.x, c25.z
    mov_pp r0.y, r3.x
    mov_sat r0.x, r2.w
    mul r0.x, r0.y, r0
    mad r0.y, r1.x, c27.x, c27
    mul_pp_sat r0.w, r0, c25
    mul r0.w, r0.y, r0
    mov_pp r1.xyz, c18
    dp3_pp r0.y, c26, r1
    mul r0.w, r0, c25
    mul r0.x, r0, r0.y
    mul_pp r0.x, r0, r0.w
    exp_pp oC0.z, -r0.z
    exp_pp oC0.w, -r0.x
