// CRC32: CBC4B3F6 | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 2/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend One One
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "GI_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SKY_OCCLUSION_OFF" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Matrix 8 [_LightMatrix0]
//           Vector 12 [_WorldSpaceCameraPos]
//           Vector 13 [_ProjectionParams]
//           Vector 14 [_ZBufferParams]
//           Vector 15 [_LightPositionRange]
//           Vector 16 [_LightShadowData]
//           Vector 17 [_LightPos]
//           Vector 18 [_LightColor]
//           Vector 19 [_SkylightColor]
//           Vector 20 [_SunlightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTextureB0] 2D 2
//           SetTexture 3 [_ShadowMapTexture] CUBE 3
//           SetTexture 4 [_LightTexture0] CUBE 4
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_cube s3
    dcl_cube s4
    def c21, 2.00000000, -1.00000000, -0.81005859, -0.50000000
    def c22, 0.00000000, 1.00000000, 0.97000003, 0.79980469
    def c23, 1.00000000, 0.00392157, 0.00001538, 0.00000006
    def c24, 0.50000000, 0.05000000, 0.04000000, 0.03000000
    def c25, 0.25000000, 128.00000000, 5.00000000, 10.00000000
    def c26, 0.21997070, 0.70703125, 0.07098389, 0
    def c27, 0.98000002, 0.02000000, 0, 0
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

    rcp r0.x, v0.w
    mul r1.xy, v0, r0.x
    texld r0.x, r1, s1
    texld r1, r1, s0
    mad_pp r5.xyz, r1, c21.x, c21.y
    mad r0.w, r0.x, c14.x, c14.y
    rcp r0.y, v1.z
    mul r0.y, r0, c13.z
    mov r2.w, c22.y
    dp3_pp r3.w, r5, r5
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r2.xyz, r0, r0.w

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r2.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r2.x, -r31.w, r30.x, r2.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r4.x, r2, c0
    dp4 r4.y, r2, c1
    dp4 r0.w, r2, c2
    dp4 r4.z, r2, r2
    rsq_pp r2.w, r3.w
    rsq r3.w, r4.z
    mul_pp r5.xyz, r2.w, r5
    mul r6.xyz, r3.w, r2
    dp3_pp r4.z, r5, r6
    cmp_pp r4.w, r4.z, c22.x, c22.y
    cmp_pp r4.z, -r4, c22.x, c22.y
    add_pp r7.x, r4.z, -r4.w
    mov_pp r4.z, r0.w
    mov_pp r4.w, c22.y
    mov r3.z, r0.w
    mov r3.x, r4
    mov r3.y, r4
    add r0.xyz, r3, -c17
    dp3 r5.w, r0, r0
    rsq r6.w, r5.w
    mul r1.xyz, r6.w, r0
    dp3_pp r3.w, -r1, r5
    abs_pp r6.x, r3.w
    cmp_pp r7.y, r3.w, r3.w, r6.x
    dp4 r6.z, r4, c10
    dp4 r6.x, r4, c8
    dp4 r6.y, r4, c9
    texld r4, r0, s3
    texld r0.w, r6, s4
    rcp r0.x, r6.w
    mul_pp r6.xyz, r5, r7.x
    dp4 r0.y, r4, c23
    mul r0.x, r0, c15.w
    mad r0.y, -r0.x, c22.z, r0
    mul r0.x, r5.w, c17.w
    mov r0.z, c16.x
    cmp r0.z, r0.y, c22.y, r0
    texld r0.x, r0.x, s2
    rcp_pp r0.y, r2.w
    mul r0.z, r0.x, r0
    mul r2.w, r0.z, r0
    add_pp r0.x, r0.y, c21.z
    cmp r4.w, r0.x, c22.x, c22.y
    add r5.w, r4, c21
    max_pp r0.x, r3.w, c22
    mul_pp r0.w, r3, r7.x
    cmp_pp r0.x, -r5.w, r0, r7.y
    mul r0.x, r0, r2.w
    mul r0.xyz, r0.x, c18
    mul_pp r4.xyz, r0, c22.wwxw
    cmp_pp r0.w, -r5, r3, r0
    cmp_pp r0.xyz, r0.w, r0, r4
    cmp_pp r4.xyz, -r5.w, r5, r6
    add r3.xyz, r3, -c12
    mad_pp r3.w, r4.y, c24.x, c24.x
    dp3 r5.y, r3, r3
    mad r5.x, r3.w, c21, c21.y
    rsq r5.y, r5.y
    mad r6.xyz, -r5.y, r3, -r1
    abs r5.x, r5
    mad r5.x, r5, c24, c24
    add r5.x, r5, -r3.w
    mad r3.w, r4, r5.x, r3
    mov r3.xyz, c20
    mad r3.xyz, r3, c24.x, c24.x
    mul r3.xyz, r3, c19.z
    mad r3.w, r3, r3, c24.y
    mul r5.xyz, r3, c24.zyww
    mul r3.xyz, r3.w, c19
    mad r3.xyz, r3, c25.x, r5
    add_pp oC0.xyz, r0, r3
    mov r3.xyz, -r1
    dp3 r3.w, r6, r6
    rsq r4.w, r3.w
    mov r3.w, c22.x
    dp4 r0.z, r3, c6
    dp4 r0.y, r3, c5
    dp4 r0.x, r3, c4
    dp3 r1.x, r2, r2
    rsq r3.x, r1.x
    mad r0.xyz, r2, -r3.x, r0
    mul r1.xyz, r4.w, r6
    dp3_pp r1.x, r4, r1
    dp3 r3.y, r0, r0
    rsq r1.y, r3.y
    mul r0.xyz, r1.y, r0
    mul r2.xyz, r3.x, r2
    dp3_sat r0.x, -r2, r0
    max_pp r1.x, r1, c22
    mul_pp r1.y, r1.w, c25
    pow_pp r3, r1.x, r1.y
    add r0.x, -r0, c22.y
    pow r1, r0.x, c25.z
    mov r0.z, r1.x
    mov_pp r0.y, r3.x
    mov_sat r0.x, r2.w
    mul r1.x, r0.y, r0
    mad r1.y, r0.z, c27.x, c27
    mov_pp r0.xyz, c18
    dp3_pp r0.x, c26, r0
    mul_pp_sat r0.w, r0, c25
    mul r0.w, r1.y, r0
    mul r0.y, r0.w, c25.w
    mul r0.x, r1, r0
    mul_pp oC0.w, r0.x, r0.y
