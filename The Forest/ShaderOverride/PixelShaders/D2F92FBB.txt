// CRC32: D2F92FBB | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 2/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend One One
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "DIRECTIONAL_COOKIE" "GI_OFF" "SHADOWS_OFF" "SKY_OCCLUSION_OFF" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Matrix 8 [_LightMatrix0]
//           Vector 12 [_WorldSpaceCameraPos]
//           Vector 13 [_ProjectionParams]
//           Vector 14 [_ZBufferParams]
//           Vector 15 [_LightDir]
//           Vector 16 [_LightColor]
//           Vector 17 [_SkylightColor]
//           Vector 18 [_SunlightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTexture0] 2D 2
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    def c19, 2.00000000, -1.00000000, -0.81005859, -0.50000000
    def c20, 0.00000000, 1.00000000, 0.79980469, 0.50000000
    def c21, 0.05000000, 0.04000000, 0.03000000, 0.25000000
    def c22, 128.00000000, 0.21997070, 0.70703125, 0.07098389
    def c23, 5.00000000, 0.98000002, 0.02000000, 10.00000000
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

    rcp r0.x, v0.w
    mul r0.xy, v0, r0.x
    texld r1, r0, s0
    texld r0.x, r0, s1
    rcp r0.z, v1.z
    mad_pp r2.xyz, r1, c19.x, c19.y
    mad r0.w, r0.x, c14.x, c14.y
    rcp r1.x, r0.w
    mul r0.y, r0.z, c13.z
    mul r0.xyz, v1, r0.y
    mul r0.xyz, r0, r1.x
    dp3_pp r1.x, r2, r2
    mov r0.w, c20.y
    dp4 r1.y, r0, r0
    rsq_pp r2.w, r1.x
    mul_pp r4.xyz, r2.w, r2
    rsq r1.y, r1.y
    mul r1.xyz, r1.y, r0
    dp3_pp r1.y, r4, r1
    cmp_pp r1.z, -r1.y, c20.x, c20.y
    rcp_pp r1.x, r2.w
    cmp_pp r1.y, r1, c20.x, c20
    add_pp r1.x, r1, c19.z
    cmp r2.x, r1, c20, c20.y
    add_pp r4.w, r1.z, -r1.y
    dp3_pp r5.z, r4, -c15
    mul_pp r1.xyz, r4, r4.w
    add r2.w, r2.x, c19
    cmp_pp r1.xyz, -r2.w, r4, r1
    mad_pp r2.y, r1, c20.w, c20.w
    mad r2.z, r2.y, c19.x, c19.y
    abs r2.z, r2
    mad r2.z, r2, c20.w, c20.w
    add r2.z, r2, -r2.y
    mad r5.w, r2.x, r2.z, r2.y

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r0.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r0.x, -r31.w, r30.x, r0.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r2.x, r0, c0
    dp4 r2.y, r0, c1
    dp4 r2.z, r0, c2
    mov_pp r3.x, r2
    mov_pp r3.y, r2
    mov_pp r3.z, r2
    mov_pp r3.w, c20.y
    dp4 r5.y, r3, c9
    dp4 r5.x, r3, c8
    abs_pp r3.x, r5.z
    cmp_pp r3.y, r5.z, r5.z, r3.x
    max_pp r3.x, r5.z, c20
    texld r0.w, r5, s2
    cmp_pp r3.x, -r2.w, r3, r3.y
    mul r3.x, r3, r0.w
    mul_pp r4.w, r5.z, r4
    cmp_pp r2.w, -r2, r5.z, r4
    mul r3.xyz, r3.x, c16
    mul_pp r4.xyz, r3, c20.zzxw
    mov r5.xyz, c18
    mad r5.xyz, r5, c20.w, c20.w
    mul r5.xyz, r5, c17.z
    cmp_pp r3.xyz, r2.w, r3, r4
    mad r3.w, r5, r5, c21.x
    mul r4.xyz, r3.w, c17
    add r2.xyz, r2, -c12
    dp3 r3.w, r2, r2
    mul r5.xyz, r5, c21.yxzw
    mad r4.xyz, r4, c21.w, r5
    add_pp oC0.xyz, r3, r4
    dp3 r3.y, r0, r0
    rsq r3.w, r3.w
    mad r2.xyz, -r3.w, r2, -c15
    dp3 r3.x, r2, r2
    rsq r5.x, r3.x
    rsq r4.w, r3.y
    mul r2.xyz, r5.x, r2
    dp3_pp r1.x, r1, r2
    mov r3.w, c20.x
    mov r3.xyz, -c15
    dp4 r4.z, r3, c6
    dp4 r4.x, r3, c4
    dp4 r4.y, r3, c5
    mad r3.xyz, r0, -r4.w, r4
    dp3 r3.w, r3, r3
    mul r0.xyz, r4.w, r0
    rsq r1.y, r3.w
    max_pp r2.x, r1, c20
    mul r1.xyz, r1.y, r3
    dp3_sat r0.x, -r0, r1
    mul_pp r1.w, r1, c22.x
    pow_pp r3, r2.x, r1.w
    add r0.x, -r0, c20.y
    pow r1, r0.x, c23.x
    mov r0.z, r1.x
    mov_sat r0.x, r0.w
    mov_pp r0.y, r3.x
    mul r0.w, r0.y, r0.x
    mad r1.x, r0.z, c23.y, c23.z
    mov_pp r0.xyz, c16
    dp3_pp r0.x, c22.yzww, r0
    mul_pp_sat r1.y, r2.w, c23.w
    mul r1.x, r1, r1.y
    mul r0.y, r1.x, c23.w
    mul r0.x, r0.w, r0
    mul_pp oC0.w, r0.x, r0.y
