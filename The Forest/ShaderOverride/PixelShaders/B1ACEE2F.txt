// CRC32: B1ACEE2F | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 3/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend One One
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Matrix 8 [_LightMatrix0]
//           Vector 12 [_WorldSpaceCameraPos]
//           Vector 13 [_ProjectionParams]
//           Vector 14 [_ZBufferParams]
//           Vector 15 [_LightPos]
//           Vector 16 [_LightColor]
//           Vector 17 [_SkylightColor]
//           Vector 18 [_SunlightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTextureB0] 2D 2
//           SetTexture 3 [_LightTexture0] CUBE 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_cube s3
    def c19, 2.00000000, -1.00000000, -0.81005859, -0.50000000
    def c20, 0.00000000, 1.00000000, 0.79980469, 0.50000000
    def c21, 0.05000000, 0.04000000, 0.03000000, 0.25000000
    def c22, 128.00000000, 0.21997070, 0.70703125, 0.07098389
    def c23, 5.00000000, 0.98000002, 0.02000000, 10.00000000
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz
    rcp r0.x, v0.w
    mul r5.xy, v0, r0.x
    texld r0.x, r5, s1
    mad r0.w, r0.x, c14.x, c14.y
    rcp r0.y, v1.z
    mul r0.y, r0, c13.z
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r2.xyz, r0, r0.w
    mov r2.w, c20.y

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r2.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r2.x, r31.w, r30.x, r2.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r0.z, r2, c2
    dp4 r0.x, r2, c0
    dp4 r0.y, r2, c1
    dp4 r2.w, r2, r2
    mov r1.z, r0
    mov r1.x, r0
    mov r1.y, r0
    add r3.xyz, r1, -c15
    dp3 r3.w, r3, r3
    add r1.xyz, r1, -c12
    rsq r0.w, r3.w
    mul r3.xyz, r0.w, r3
    dp3 r1.w, r1, r1
    rsq r0.w, r1.w
    mad r4.xyz, -r0.w, r1, -r3
    texld r1, r5, s0
    dp3 r0.w, r4, r4
    rsq r0.w, r0.w
    rsq r2.w, r2.w
    mul r5.xyz, r2.w, r2
    mul r4.xyz, r0.w, r4
    mad_pp r1.xyz, r1, c19.x, c19.y
    dp3_pp r0.w, r1, r1
    rsq_pp r4.w, r0.w
    mul_pp r1.xyz, r4.w, r1
    dp3_pp r2.w, -r3, r1
    dp3_pp r0.w, r1, r5
    cmp_pp r5.x, r0.w, c20, c20.y
    cmp_pp r0.w, -r0, c20.x, c20.y
    add_pp r5.w, r0, -r5.x
    abs_pp r0.w, r2
    cmp_pp r6.w, r2, r2, r0
    mov_pp r0.w, c20.y
    dp4 r6.x, r0, c8
    mov r3.xyz, -r3
    dp4 r6.z, r0, c10
    dp4 r6.y, r0, c9
    mul r0.x, r3.w, c15.w
    rcp_pp r0.y, r4.w
    texld r0.w, r6, s3
    texld r0.x, r0.x, s2
    mul r4.w, r0.x, r0
    add_pp r0.y, r0, c19.z
    cmp r0.w, r0.y, c20.x, c20.y
    add r3.w, r0, c19
    max_pp r0.x, r2.w, c20
    cmp_pp r0.x, -r3.w, r0, r6.w
    mul_pp r5.xyz, r1, r5.w
    mul r6.x, r0, r4.w
    cmp_pp r0.xyz, -r3.w, r1, r5
    dp3_pp r0.z, r0, r4
    mul r1.xyz, r6.x, c16
    mul_pp r0.x, r2.w, r5.w
    cmp_pp r0.x, -r3.w, r2.w, r0
    mul_pp r4.xyz, r1, c20.zzxw
    cmp_pp r1.xyz, r0.x, r1, r4
    mov r3.w, c20.x
    dp4 r4.z, r3, c6
    dp4 r4.y, r3, c5
    dp4 r4.x, r3, c4
    dp3 r3.x, r2, r2
    mul_pp r2.w, r1, c22.x
    rsq r1.w, r3.x
    mad r4.xyz, r2, -r1.w, r4
    max_pp r0.z, r0, c20.x
    pow_pp r3, r0.z, r2.w
    dp3 r0.z, r4, r4
    mov_pp r2.w, r3.x
    rsq r0.z, r0.z
    mul r3.xyz, r0.z, r4
    mul r2.xyz, r1.w, r2
    dp3_sat r1.w, -r2, r3
    mov_sat r0.z, r4.w
    mad_pp r0.y, r0, c20.w, c20.w
    add r1.w, -r1, c20.y
    mul r0.z, r2.w, r0
    pow r2, r1.w, c23.x
    mov_pp r3.xyz, c16
    dp3_pp r1.w, c22.yzww, r3
    mul r0.z, r0, r1.w
    mad r1.w, r2.x, c23.y, c23.z
    mul_pp_sat r2.x, r0, c23.w
    mad r0.x, r0.y, c19, c19.y
    mul r2.x, r1.w, r2
    abs r1.w, r0.x
    mul r0.x, r2, c23.w
    mad r1.w, r1, c20, c20
    mov r2.xyz, c18
    add r1.w, r1, -r0.y
    mad r0.y, r0.w, r1.w, r0
    mad r2.xyz, r2, c20.w, c20.w
    mul r2.xyz, r2, c17.z
    mad r0.y, r0, r0, c21.x
    mul r3.xyz, r2, c21.yxzw
    mul r2.xyz, r0.y, c17
    mul_pp r0.w, r0.z, r0.x
    mad r2.xyz, r2, c21.w, r3
    add_pp r0.xyz, r1, r2
    mov_pp oC0, r0.wxyz
