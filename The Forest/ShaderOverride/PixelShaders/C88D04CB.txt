// CRC32: C88D04CB | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 3/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend One One
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [unity_World2Shadow0]
//           Matrix 4 [_CameraToWorld]
//           Matrix 8 [_WorldToCamera]
//           Matrix 12 [_LightMatrix0]
//           Vector 16 [_WorldSpaceCameraPos]
//           Vector 17 [_ProjectionParams]
//           Vector 18 [_ZBufferParams]
//           Vector 19 [_LightShadowData]
//           Vector 20 [unity_ShadowFadeCenterAndType]
//           Vector 21 [_LightPos]
//           Vector 22 [_LightColor]
//           Vector 23 [_ShadowOffsets0]
//           Vector 24 [_ShadowOffsets1]
//           Vector 25 [_ShadowOffsets2]
//           Vector 26 [_ShadowOffsets3]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTexture0] 2D 2
//           SetTexture 3 [_LightTextureB0] 2D 3
//           SetTexture 4 [_ShadowMapTexture] 2D 4
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    def c27, 1.00000000, 2.00000000, -1.00000000, -0.81005859
    def c28, 0.00000000, 1.00000000, -0.50000000, 128.00000000
    def c29, 0.25000000, 0.21997070, 0.70703125, 0.07098389
    def c30, 5.00000000, 0.98000002, 0.02000000, 10.00000000
    def c31, 0.79980469, 0.00000000, 0, 0
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz
    rcp r0.x, v0.w
    mul r5.xy, v0, r0.x
    texld r0.x, r5, s1
    mad r0.w, r0.x, c18.x, c18.y
    rcp r0.y, v1.z
    mul r0.y, r0, c17.z
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r2.xyz, r0, r0.w
    mov r2.w, c27.x

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r2.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r2.x, r31.w, r30.x, r2.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r3.z, r2, c5
    dp4 r3.w, r2, c6
    dp4 r0.x, r2, c4
    mov r0.y, r3.z
    mov r0.z, r3.w
    mov r0.w, c27.x
    dp4 r1.x, r0, c3
    dp4 r3.x, r0, c0
    dp4 r3.y, r0, c1
    rcp r4.z, r1.x
    mad r1.xy, r4.z, r3, c26
    texld r1.x, r1, s4
    dp4 r5.z, r0, c14
    dp4 r2.w, r2, r2
    mad r4.xy, r4.z, r3, c25
    mov r1.w, r1.x
    texld r1.x, r4, s4
    mad r4.xy, r4.z, r3, c24
    mov r1.z, r1.x
    texld r1.x, r4, s4
    mad r3.xy, r4.z, r3, c23
    mov r1.y, r1.x
    texld r1.x, r3, s4
    dp4 r3.x, r0, c2
    mad r1, -r3.x, r4.z, r1
    mov r4.z, r3.w
    mov r3.w, c19.x
    cmp r1, r1, c27.x, r3.w
    dp4_pp r4.w, r1, c29.x
    mov r4.y, r3.z
    mov r4.x, r0
    add r6.xyz, -r4, c20
    dp3 r1.w, r6, r6
    add r3.xyz, -r4, c21
    dp4 r6.z, r0, c15
    dp3 r6.w, r3, r3
    rsq r1.x, r6.w
    mul r1.xyz, r1.x, r3
    texld r3, r5, s0
    rsq r1.w, r1.w
    rcp r5.x, r1.w
    mad_pp r3.xyz, r3, c27.y, c27.z
    add r5.y, -r2.z, r5.x
    dp3_pp r1.w, r3, r3
    rsq_pp r5.x, r1.w
    mad r1.w, r5.y, c20, r2.z
    mad_sat r5.y, r1.w, c19.z, c19.w
    mul_pp r3.xyz, r5.x, r3
    add_sat r6.y, r4.w, r5
    dp3_pp r1.w, r1, r3
    rcp_pp r4.w, r5.x
    abs_pp r5.y, r1.w
    add_pp r4.w, r4, c27
    cmp r4.w, r4, c28.x, c28.y
    add r4.w, r4, c28.z
    cmp_pp r5.y, r1.w, r1.w, r5
    max_pp r5.x, r1.w, c28
    cmp_pp r6.x, -r4.w, r5, r5.y
    dp4 r5.x, r0, c12
    dp4 r5.y, r0, c13
    mov r5.w, r6.z
    texldp r0.w, r5, s2
    cmp r0.y, r6.z, c28.x, c28
    mul r0.x, r6.w, c21.w
    mul r0.y, r0.w, r0
    texld r0.x, r0.x, s3
    mul r0.x, r0.y, r0
    mul r0.w, r0.x, r6.y
    mul r0.x, r0.w, r6
    rsq r5.w, r2.w
    mul r6.xyz, r5.w, r2
    dp3_pp r5.w, r3, r6
    mul r0.xyz, r0.x, c22
    add r4.xyz, r4, -c16
    dp3 r2.w, r4, r4
    rsq r2.w, r2.w
    mad r4.xyz, -r2.w, r4, r1
    mul_pp r5.xyz, r0, c31.xxyw
    cmp_pp r6.x, r5.w, c28, c28.y
    cmp_pp r2.w, -r5, c28.x, c28.y
    add_pp r5.w, r2, -r6.x
    dp3 r2.w, r4, r4
    rsq r6.x, r2.w
    mul_pp r6.y, r5.w, r1.w
    cmp_pp r2.w, -r4, r1, r6.y
    mov r1.w, c28.x
    mul r4.xyz, r6.x, r4
    cmp_pp r0.xyz, r2.w, r0, r5
    mul_pp r5.xyz, r3, r5.w
    cmp_pp r3.xyz, -r4.w, r3, r5
    dp3_pp r3.x, r4, r3
    dp4 r6.z, r1, c10
    dp4 r6.y, r1, c9
    dp3 r5.w, r2, r2
    dp4 r6.x, r1, c8
    rsq r1.w, r5.w
    mad r1.xyz, r2, -r1.w, r6
    mul r2.xyz, r1.w, r2
    dp3 r4.w, r1, r1
    rsq r3.y, r4.w
    mul r1.xyz, r3.y, r1
    dp3_sat r1.x, -r2, r1
    mul_pp r1.w, r3, c28
    max_pp r4.x, r3, c28
    pow_pp r3, r4.x, r1.w
    add r2.x, -r1, c27
    pow r1, r2.x, c30.x
    mov_pp r1.y, r3.x
    mov_sat r0.w, r0
    mul r0.w, r1.y, r0
    mad r1.w, r1.x, c30.y, c30.z
    mov_pp r1.xyz, c22
    dp3_pp r1.x, c29.yzww, r1
    mul_pp_sat r2.x, r2.w, c30.w
    mul r1.w, r1, r2.x
    mul r1.y, r1.w, c30.w
    mul r0.w, r0, r1.x
    mul_pp r0.w, r0, r1.y
    mov_pp oC0, r0.wxyz
