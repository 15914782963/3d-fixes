// CRC32: 7716AAF3 | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 1/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend DstColor Zero
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SPOT" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [unity_World2Shadow0]
//           Matrix 4 [_CameraToWorld]
//           Matrix 8 [_WorldToCamera]
//           Matrix 12 [_LightMatrix0]
//           Vector 16 [_WorldSpaceCameraPos]
//           Vector 17 [_ProjectionParams]
//           Vector 18 [_ZBufferParams]
//           Vector 19 [_LightShadowData]
//           Vector 20 [unity_ShadowFadeCenterAndType]
//           Vector 21 [_LightPos]
//           Vector 22 [_LightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTexture0] 2D 2
//           SetTexture 3 [_LightTextureB0] 2D 3
//           SetTexture 4 [_ShadowMapTexture] 2D 4
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    def c23, 2.00000000, -1.00000000, -0.81005859, -0.50000000
    def c24, 0.00000000, 1.00000000, 0.79980469, 128.00000000
    def c25, 0.21997070, 0.70703125, 0.07098389, 5.00000000
    def c26, 0.98000002, 0.02000000, 10.00000000, 0
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

    rcp r0.x, v0.w
    mul r6.xy, v0, r0.x
    texld r0.x, r6, s1
    mad r0.w, r0.x, c18.x, c18.y
    rcp r0.y, v1.z
    mul r0.y, r0, c17.z
    mov r2.w, c24.y
    mov r1.w, c24.y
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r1.xyz, r0, r0.w

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// Assumes the game is storing matrix columns in registers (highly likely)
// c180 is the inverse of the MV matrix (From DX9Settings.ini)
// c190 is the MVP matrix (From DX9Settings.ini)

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

// This is a variation of the stereo-correction formula for view-space coords:
texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r1.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r1.x, -r31.w, r30.x, r1.x // X += separation * (depth - convergence) * P.I[0,0]

    dp4 r2.x, r1, c4
    dp4 r2.y, r1, c5
    dp4 r0.w, r1, c6
    mov r4.z, r0.w
    mov r4.x, r2
    mov r4.y, r2
    add r0.xyz, r4, -c16
    add r3.xyz, -r4, c21
    dp3 r3.w, r3, r3
    rsq r2.z, r3.w
    mul r3.xyz, r2.z, r3
    mov r2.z, r0.w
    dp3 r5.x, r0, r0
    rsq r0.w, r5.x
    mad r5.xyz, -r0.w, r0, r3
    dp4 r4.w, r2, c15
    dp4 r0.z, r2, c14
    dp4 r0.x, r2, c12
    dp4 r0.y, r2, c13
    mov r0.w, r4
    texldp r0.w, r0, s2
    mul r0.x, r3.w, c21.w
    cmp r0.y, r4.w, c24.x, c24
    mul r0.y, r0.w, r0
    texld r0.x, r0.x, s3
    mul r3.w, r0.y, r0.x
    dp4 r0.w, r2, c3
    dp4 r0.z, r2, c2
    dp4 r0.y, r2, c1
    dp4 r0.x, r2, c0
    texldp r0.x, r0, s4
    mov r2.x, c19
    add r0.y, c24, -r2.x
    add r2.xyz, -r4, c20
    dp3 r2.x, r2, r2
    mad r2.w, r0.x, r0.y, c19.x
    texld r0, r6, s0
    rsq r2.x, r2.x
    rcp r2.y, r2.x
    mad_pp r0.xyz, r0, c23.x, c23.y
    dp3_pp r2.x, r0, r0
    add r2.y, -r1.z, r2
    mad r2.y, r2, c20.w, r1.z
    rsq_pp r2.x, r2.x
    mul_pp r0.xyz, r2.x, r0
    mad_sat r2.y, r2, c19.z, c19.w
    add_sat r2.z, r2.w, r2.y
    dp3_pp r4.w, r3, r0
    mul r2.w, r3, r2.z
    abs_pp r2.y, r4.w
    cmp_pp r4.x, r4.w, r4.w, r2.y
    dp4 r2.y, r1, r1
    rcp_pp r2.x, r2.x
    add_pp r1.w, r2.x, c23.z
    rsq r2.x, r2.y
    mul r2.xyz, r2.x, r1
    dp3_pp r2.x, r0, r2
    cmp_pp r2.y, r2.x, c24.x, c24
    cmp_pp r2.x, -r2, c24, c24.y
    cmp r1.w, r1, c24.x, c24.y
    add r1.w, r1, c23
    max_pp r3.w, r4, c24.x
    cmp_pp r3.w, -r1, r3, r4.x
    add_pp r5.w, r2.x, -r2.y
    mul r2.z, r3.w, r2.w
    mul r2.xyz, r2.z, c22
    mul_pp r3.w, r4, r5
    cmp_pp r4.w, -r1, r4, r3
    mul_pp r4.xyz, r2, c24.zzxw
    cmp_pp r6.xyz, r4.w, r2, r4
    mul_pp r4.xyz, r0, r5.w
    dp3 r2.x, r5, r5
    rsq r2.x, r2.x
    mul r2.xyz, r2.x, r5
    mov r3.w, c24.x
    cmp_pp r0.xyz, -r1.w, r0, r4
    dp3_pp r0.x, r2, r0
    dp4 r5.z, r3, c10
    dp4 r5.y, r3, c9
    dp3 r5.w, r1, r1
    dp4 r5.x, r3, c8
    rsq r3.w, r5.w
    mad r3.xyz, r1, -r3.w, r5
    dp3 r1.w, r3, r3
    rsq r0.y, r1.w
    max_pp r2.x, r0, c24
    mul r0.xyz, r0.y, r3
    mul r1.xyz, r3.w, r1
    dp3_sat r0.x, -r1, r0
    mul_pp r0.w, r0, c24
    pow_pp r1, r2.x, r0.w
    add r1.y, -r0.x, c24
    pow r0, r1.y, c25.w
    mov_pp r0.z, r1.x
    mov_sat r0.y, r2.w
    mul r0.w, r0.z, r0.y
    mad r1.x, r0, c26, c26.y
    mov_pp r0.xyz, c22
    dp3_pp r0.x, c25, r0
    mul_pp_sat r1.y, r4.w, c26.z
    mul r1.x, r1, r1.y
    mul r0.y, r1.x, c26.z
    mul r0.x, r0.w, r0
    mul_pp r0.x, r0, r0.y
    exp_pp oC0.x, -r6.x
    exp_pp oC0.y, -r6.y
    exp_pp oC0.z, -r6.z
    exp_pp oC0.w, -r0.x
