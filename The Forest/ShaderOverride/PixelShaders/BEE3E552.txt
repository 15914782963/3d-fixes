// CRC32: BEE3E552 | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 1/3 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend DstColor Zero
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SUNSHINE_FILTER_PCF_4x4" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_WorldToCamera]
//           Matrix 8 [_LightMatrix0]
//           Vector 12 [_WorldSpaceCameraPos]
//           Vector 13 [_ProjectionParams]
//           Vector 14 [_ZBufferParams]
//           Vector 15 [_LightShadowData]
//           Vector 16 [unity_ShadowFadeCenterAndType]
//           Vector 17 [_LightDir]
//           Vector 18 [_LightColor]
//           Vector 19 [_SkylightColor]
//           Vector 20 [_SunlightColor]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_ShadowMapTexture] 2D 2
//           SetTexture 3 [_LightTexture0] 2D 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    def c21, 2.00000000, -1.00000000, -0.81005859, -0.50000000
    def c22, 0.00000000, 1.00000000, 0.79980469, 0.50000000
    def c23, 0.05000000, 0.04000000, 0.03000000, 0.25000000
    def c24, 128.00000000, 0.21997070, 0.70703125, 0.07098389
    def c25, 5.00000000, 0.98000002, 0.02000000, 10.00000000
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

// This variant is SHADOWS_SCREEN, meaning it's copying a shadow generated in
// Hidden/Internal-PrePassCollectShadows to the screen, so we discard the
// stereo adjustment from the VS and get the screen coordinates directly:
mov r20, v0
texldl r31, c220.z, s13
add r31.w, r20.w, -r31.y
mul r31.w, r31.w, c220.w
mad r20.x, -r31.w, r31.x, r20.x

    rcp r0.x, r20.w
    mul r5.xy, r20, r0.x
    texld r1, r5, s0
    texld r0.x, r5, s1
    mad r0.w, r0.x, c14.x, c14.y
    rcp r0.y, v1.z
    mul r0.y, r0, c13.z
    mad_pp r1.xyz, r1, c21.x, c21.y
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r2.xyz, r0, r0.w
    dp3_pp r0.x, r1, r1
    mov r2.w, c22.y
    dp4 r0.y, r2, r2
    rsq_pp r0.w, r0.x
    rsq r0.y, r0.y
    mul_pp r3.xyz, r0.w, r1
    mul r0.xyz, r0.y, r2
    dp3_pp r0.x, r3, r0

// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
// For a detailed explanation of what we are doing here, see this thread:
// https://forums.geforce.com/default/topic/781954/3d-vision/dreamfall-chapters/post/4352670/#4352670

// Transpose first component of the MV.I matrix regs into r30:
mov r30.x, c180.x
mov r30.y, c181.x
mov r30.z, c182.x
mov r30.w, c183.x
dp4 r30.x, r30, c190 // Calculate P[0,0]
rcp r30.x, r30.x // Calculate P.I[0,0]

add r31.w, r2.z, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r2.x, -r31.w, r30.x, r2.x // X -= separation * (depth - convergence) * P.I[0,0]

    dp4 r0.z, r2, c2
    cmp_pp r0.y, r0.x, c22.x, c22
    cmp_pp r0.x, -r0, c22, c22.y
    add_pp r5.z, r0.x, -r0.y
    dp4 r0.y, r2, c1
    rcp_pp r0.x, r0.w
    add_pp r0.w, r0.x, c21.z
    dp4 r0.x, r2, c0
    cmp r3.w, r0, c22.x, c22.y
    add r5.w, r3, c21
    mul_pp r4.xyz, r3, r5.z
    cmp_pp r4.xyz, -r5.w, r3, r4
    mad_pp r4.w, r4.y, c22, c22
    mov r1.z, r0
    mov r1.x, r0
    mov r1.y, r0
    add r6.xyz, -r1, c16
    dp3 r0.w, r6, r6
    mad r2.w, r4, c21.x, c21.y
    rsq r0.w, r0.w
    rcp r0.w, r0.w
    add r0.w, -r2.z, r0
    abs r6.z, r2.w
    mad r2.w, r0, c16, r2.z
    mov_pp r0.w, c22.y
    dp4 r6.x, r0, c8
    dp4 r6.y, r0, c9
    texld r0.x, r5, s2
    texld r0.w, r6, s3
    mad_sat r0.y, r2.w, c15.z, c15.w
    add_sat r0.y, r0.x, r0
    dp3_pp r6.x, r3, -c17
    mul r2.w, r0.y, r0
    abs_pp r0.x, r6
    cmp_pp r0.y, r6.x, r6.x, r0.x
    mul_pp r0.w, r6.x, r5.z
    max_pp r0.x, r6, c22
    cmp_pp r0.x, -r5.w, r0, r0.y
    mul r0.x, r0, r2.w
    mul r0.xyz, r0.x, c18
    mad r5.x, r6.z, c22.w, c22.w
    add r5.x, r5, -r4.w
    mad r3.w, r3, r5.x, r4
    mul_pp r3.xyz, r0, c22.zzxw
    cmp_pp r0.w, -r5, r6.x, r0
    cmp_pp r0.xyz, r0.w, r0, r3
    mov r3.xyz, c20
    mad r3.xyz, r3, c22.w, c22.w
    mul r5.xyz, r3, c19.z
    mad r3.w, r3, r3, c23.x
    mul r5.xyz, r5, c23.yxzw
    mul r3.xyz, r3.w, c19
    mad r3.xyz, r3, c23.w, r5
    add_pp r0.xyz, r0, r3
    add r1.xyz, r1, -c12
    dp3 r3.w, r1, r1
    rsq r3.x, r3.w
    mad r1.xyz, -r3.x, r1, -c17
    exp_pp oC0.x, -r0.x
    mov r3.w, c22.x
    dp3 r0.x, r1, r1
    exp_pp oC0.y, -r0.y
    rsq r0.y, r0.x
    mul r1.xyz, r0.y, r1
    dp3 r3.x, r2, r2
    rsq r0.x, r3.x
    mov r3.xyz, -c17
    dp3_pp r0.y, r4, r1
    dp4 r5.z, r3, c6
    dp4 r5.x, r3, c4
    dp4 r5.y, r3, c5
    mad r3.xyz, r2, -r0.x, r5
    dp3 r3.w, r3, r3
    rsq r1.x, r3.w
    mul r2.xyz, r0.x, r2
    mul r1.xyz, r1.x, r3
    mul_pp r0.x, r1.w, c24
    max_pp r0.y, r0, c22.x
    pow_pp r3, r0.y, r0.x
    dp3_sat r1.x, -r2, r1
    add r0.x, -r1, c22.y
    pow r1, r0.x, c25.x
    mov_pp r0.y, r3.x
    mov_sat r0.x, r2.w
    mul r0.x, r0.y, r0
    mad r0.y, r1.x, c25, c25.z
    mul_pp_sat r0.w, r0, c25
    mul r0.w, r0.y, r0
    mov_pp r1.xyz, c18
    dp3_pp r0.y, c24.yzww, r1
    mul r0.w, r0, c25
    mul r0.x, r0, r0.y
    mul_pp r0.x, r0, r0.w
    exp_pp oC0.z, -r0.z
    exp_pp oC0.w, -r0.x
