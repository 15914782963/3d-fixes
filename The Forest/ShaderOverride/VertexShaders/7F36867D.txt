// CRC32: 7F36867D | Matched 7 variants of 7 shaders: Hidden/Internal-Flare, Hidden/Internal-GUITexture, Hidden/Internal-Halo, Particles/Additive, Particles/Additive_Layer, Particles/Alpha Blended, Particles/Multiply
// 
//    Unity headers extracted from Internal-Flare.shader
//    Shader "Hidden/Internal-Flare" {
//      SubShader 1/1 {
//        Tags { "RenderType"="Overlay" }
//        Pass 1/1 {
//          Tags { "RenderType"="Overlay" }
//          ZTest Always
//          ZWrite Off
//          Cull Off
//          Blend One One
//          ColorMask RGB
//          GpuProgramID 33804
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_FlareTexture_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Internal-GUITexture.shader
//    Shader "Hidden/Internal-GUITexture" {
//      Properties {
//       _MainTex ("Texture", any) = "" { }
//      }
//      Fallback Off
//      SubShader 1/1 {
//        Tags { "RenderType"="Overlay" "ForceSupported"="True" }
//        Pass 1/1 {
//          Tags { "RenderType"="Overlay" "ForceSupported"="True" }
//          ZTest Always
//          ZWrite Off
//          Cull Off
//          Blend SrcAlpha OneMinusSrcAlpha
//          GpuProgramID 60335
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Internal-Halo.shader
//    Shader "Hidden/Internal-Halo" {
//      SubShader 1/1 {
//        Tags { "RenderType"="Overlay" }
//        Pass 1/1 {
//          Tags { "RenderType"="Overlay" }
//          ZWrite Off
//          Cull Off
//          Blend OneMinusDstColor One
//          AlphaTest Greater 0
//          ColorMask RGB
//          GpuProgramID 31767
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_HaloFalloff_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Particle Add.shader
//    Shader "Particles/Additive" {
//      Properties {
//       _TintColor ("Tint Color", Color) = (0.5,0.5,0.5,0.5)
//       _MainTex ("Particle Texture", 2D) = "white" { }
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Blend SrcAlpha One
//          AlphaTest Greater 0.01
//          ColorMask RGB
//          GpuProgramID 23090
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Add_Layer.shader
//    Shader "Particles/Additive_Layer" {
//      Properties {
//       _TintColor ("Tint Color", Color) = (0.5,0.5,0.5,0.5)
//       _MainTex ("Particle Texture", 2D) = "white" { }
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      SubShader 1/3 {
//        Tags { "QUEUE"="Transparent+1" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent+1" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          BindChannels {
//             Bind "vertex", Vertex
//             Bind "color", Color
//             Bind "texcoord", TexCoord
//            }
//          ZWrite Off
//          Cull Off
//          Fog { Mode Off }
//          Blend SrcAlpha One
//          AlphaTest Greater 0.01
//          ColorMask RGB
//          Offset -1, -1
//          GpuProgramID 19652
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Particle Alpha Blend.shader
//    Shader "Particles/Alpha Blended" {
//      Properties {
//       _TintColor ("Tint Color", Color) = (0.5,0.5,0.5,0.5)
//       _MainTex ("Particle Texture", 2D) = "white" { }
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Blend SrcAlpha OneMinusSrcAlpha
//          AlphaTest Greater 0.01
//          ColorMask RGB
//          GpuProgramID 29002
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Particle Multiply.shader
//    Shader "Particles/Multiply" {
//      Properties {
//       _MainTex ("Particle Texture", 2D) = "white" { }
//       _InvFade ("Soft Particles Factor", Range(0.01,3)) = 1
//      }
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Blend Zero SrcColor
//          GpuProgramID 33137
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Keywords { "SOFTPARTICLES_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//              Vector 4 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    vs_3_0 // Converted from vs_2_0 with DarkStarSword's shadertool.py
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2

dcl_texcoord o0
dcl_position o1
dcl_color o2

def c220, 0, 1, 0.0625, 0.5

// For the auto HUD depth:
dcl_2d s2 // Copy of _CameraDepthTexture
defi i0, 255, 0, 0, 0
def c227, 0.00390625, 64, 0, 0.5 // 1/i0.x, 0.5

    dp4 r0.x, c0, v0
    dp4 r0.y, c1, v0
    dp4 r0.z, c2, v0
    dp4 r0.w, c3, v0
    mad o0.xy, v2, c4, c4.zwzw
    mov o2, v1

// Only adjust when originally drawn at screen depth:
if_eq r0.w, c220.y

	// Auto depth: sample a number of points on the depth buffer to
	// determine an appropriate depth for this object, starting at the near
	// clipping plane and working towards original x + separation.
	//
	// You can think of this as a line in three dimensional space that
	// starts at each eye and stretches out towards infinity. We sample 255
	// points along this line (evenly spaced in the X axis) and compare
	// with the depth buffer to find where the line is first intersected.
	//
	// Based on DarkStarSword's stereo crosshair code originally developed
	// for Miasmata, adapted to HLSL and made to use coordinates other than
	// (0,0), then adapted back to assembly for UE3.

	// This variant uses the undocumented stereo register injected by the
	// driver instead of the Helix Mod stereo sampler

	// Screen depth coordinates to sample around - Several icons are drawn
	// simultaneously, so we cannot use the first vertex position like we
	// do in Dreamfall Chapters. Instead we just use the current vertex
	// position, which can cause the icon to stretch, but it's better than
	// the alternatives. We could maybe force the game to DX11 and use
	// 3DMigoto's vertex buffer copying support to solve this like Far Cry 4.
	mov r22, r0

	// near clipping plane - for Unity we get this from _ZBufferParams
	rcp r20.w, c150.w

	// offset = separation * (near - convergence) / near
	mad r20.x, r20.w, c255.y, c255.x
	rcp r31.w, r20.w
	mul r20.x, r20.x, r31.w

	// Total distance to cover
	// distance = separation - starting X offset:
	add r20.y, c255.y, -r20.x

	// old_offset = offset
	mov r21.x, r20.x

	// Precompute some constants:
	// distance / 255:
	mul r20.z, r20.y, c227.x

	rep i0
		// offset += distance / 255:
		add r20.x, r20.x, r20.z

		// Calculate W for this adjustment amount:
		// w = (separation * convergence) / (separation - offset):
		add r20.w, c255.y, -r20.x
		rcp r20.w, r20.w
		mul r20.w, -c255.x, r20.w

		// sample_x = x + offset, sample_y = y (not flipped compared to UE3)
		mov r23.y, r22.y
		add r23.x, r22.x, r20.x
		// Convert to texture coordinates (coords / 2 + 0.5):
		mad r23.xy, r23.xy, c220.w, c220.w
		// Sample depth buffer:
		texldl r5, r23.xy, s2

		// scale depth buffer to world Z (game dependent - look for scaling applied to
		// the depth buffer wherever else it is used. In the case of Unity we use
		// _ZBufferParams):
		mad r5.x, r5.x, c150.x, c150.y
		add r5.y, c150.z, c150.w // Derive 1/far from _ZBufferParams
		mul r5.x, r5.x, r5.y
		rcp r5.x, r5.x

		// If the sampled depth is closer than the calculated depth, exit the loop:
		break_ge r20.w, r5.x

		// old_offset = offset
		mov r21.x, r20.x
	endrep

	// Finally adjust the X coordinate:
	add r0.x, r0.x, r21.x
endif

mov o1, r0
