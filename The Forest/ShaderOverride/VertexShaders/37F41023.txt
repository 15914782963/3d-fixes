// CRC32: 37F41023 | Matched 2 variants of 1 shaders: Alloy/Core/Rsrm Cube Ambient Detail (Stippled)
// 
//    Unity headers extracted from Stippled-Rsrm Cube Detail Ambient.shader
//    Shader "Alloy/Core/Rsrm Cube Ambient Detail (Stippled)" {
//      Properties {
//       _StippleNear ("Stipple Near", Float) = 10
//       _StippleFar ("Stipple Far", Float) = 20
//       _Cutoff ("Alpha cutoff", Range(0,1)) = 0.5
//       _Color ("Main Color", Color) = (1,1,1,1)
//       _MainTex ("Base (RGB) Trans (A)", 2D) = "white" {}
//       _Metallic ("Metalness", Range(0,1)) = 1
//       _Smoothness ("Smoothness", Range(0,1)) = 1
//       _ReflectanceMap ("Metalness (R) Smoothness (A)", 2D) = "white" {}
//       _AoMap ("Ambient Occlusion (G)", 2D) = "white" {}
//       _BumpMap ("Normalmap", 2D) = "bump" {}
//       _DetailTex ("Detail (RGB) Height (A)", 2D) = "white" {}
//       _DetailBump ("Detail Normalmap", 2D) = "bump" {}
//       _DetailReflectance ("Detail Metalness (R) Smoothness (A)", 2D) = "white" {}
//       _Rsrm ("Radially-Symmetric Reflection Map", 2D) = "black" {}
//       _EnvMap ("Ambient Cube Map", CUBE) = "black" {}
//       _EnvIntensity ("Ambient Cube Intensity", Range(0,25)) = 0.5
//      }
//      Fallback "Transparent/Cutout/Bumped Diffuse"
//      SubShader 1/1 {
//        LOD 300
//        Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
//        Pass 4/4 {
//          Name "PREPASS"
//          Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
//          ZWrite Off
//          Program "vp" {
//            SubProgram "d3d9 " {
// 1:           Keywords { "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "LIGHTMAP_OFF" }
// 2:           Keywords { "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" "LIGHTMAP_OFF" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "normal" Normal
//              Bind "texcoord" TexCoord0
//              Bind "tangent" TexCoord2
//              Matrix 0 [glstate_matrix_mvp]
//              Matrix 4 [_Object2World]
//              Vector 8 [_WorldSpaceCameraPos]
//              Vector 9 [_ProjectionParams]
//              Vector 10 [_ScreenParams]
//              Vector 11 [unity_Scale]
//              Float 12 [_Cutoff]
//              Float 13 [_StippleNear]
//              Float 14 [_StippleFar]
//              Vector 15 [_MainTex_ST]
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    vs_3_0
    dcl_position o0
    dcl_color o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_texcoord2 o4
    dcl_texcoord3 o5
    dcl_texcoord4 o6
    def c16, 1, 0.5, 0, 0
    dcl_position v0
    dcl_tangent v1
    dcl_normal v2
    dcl_texcoord v3
    dcl_color v4

def c220, 0, 1, 0.0625, 0.5
dcl_2d s0

    mov r0.xyz, v1
    mul r1.xyz, v2.zxyw, r0.yzxw
    mov r0.xyz, v1
    mad r2.xyz, v2.yzxw, r0.zxyw, -r1
    dp4 r1.w, v0, c3
    dp4 r1.z, v0, c2
    dp4 r1.x, v0, c0
    dp4 r1.y, v0, c1

mov o0, r1 // Relocated from line 39 with shadertool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's shadertool.py:
// shadertool.py -i --auto-fix-vertex-halo --only-autofixed --ignore-parse-errors 37F41023.txt
texldl r3, c220.z, s0
add r3.w, r1.w, -r3.y
mad r1.x, r3.w, r3.x, r1.x

    mul r0.xyz, r1.xyww, c16.y
    mul r0.y, r0, c9.x
    mad o3.xy, r0.z, c10.zwzw, r0
    mul r2.xyz, r2, v1.w
    dp3 r0.y, r2, c4
    dp3 r0.x, v1, c4
    dp3 r0.z, v2, c4
    mul o4.xyz, r0, c11.w
    dp3 r0.y, r2, c5
    dp3 r0.x, v1, c5
    dp3 r0.z, v2, c5
    mul o5.xyz, r0, c11.w
    dp3 r0.y, r2, c6
    dp3 r0.x, v1, c6
    dp3 r0.z, v2, c6
    mul o6.xyz, r0, c11.w

//     mov o0, r1 // Relocated to line 23 with shadertool.py
    dp4 r0.x, v0, c4
    dp4 r0.y, v0, c6
    add r0.xy, r0, -c8.xzzw
    mul r0.zw, r0.xyxy, r0.xyxy
    mov r0.y, c14.x
    mov r0.x, c13
    mul r1.xy, r0, r0
    add r0.x, r0.z, r0.w
    add r0.y, r1, -r1.x
    mov r0.z, c12.x
    add r0.x, r0, -r1
    rcp r0.y, r0.y
    add r0.z, c16.x, -r0
    mul r0.x, r0, r0.y
    mov o1, v4
    mov o3.zw, r1
    mul_sat o2.z, r0.x, r0
    mad o2.xy, v3, c15, c15.zwzw

// approximately 43 instruction slots used
