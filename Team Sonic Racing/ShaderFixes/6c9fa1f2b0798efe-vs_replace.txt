// HUD - backgrounds
// ---- Created with 3Dmigoto v1.3.16 on Sun Jun 02 03:39:58 2019

cbuffer cbWorldMatrix : register(b4)
{
  row_major float3x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldViewProj : packoffset(c3);
}

cbuffer cbViewProjection : register(b5)
{
  row_major float3x4 gView : packoffset(c0);
  row_major float4x4 gProjection : packoffset(c3);
  row_major float4x4 gViewProjection : packoffset(c7);
  row_major float3x4 gViewInverse : packoffset(c11);
  float4 gCameraPositionTime : packoffset(c14);
  float4 gITMGF : packoffset(c15);
  float2 gfLinearZ : packoffset(c16);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "hud.hlsl"

void main(
  float3 v0 : POSITION0,
  float4 v1 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v0.xyz;
  r0.w = 1;
  r1.x = dot(gWorld._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(gWorld._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(gWorld._m20_m21_m22_m23, r0.xyzw);
  r1.w = 1;
  o0.x = dot(gViewProjection._m00_m01_m02_m03, r1.xyzw);
  o0.y = dot(gViewProjection._m10_m11_m12_m13, r1.xyzw);
  o0.z = dot(gViewProjection._m20_m21_m22_m23, r1.xyzw);
  o0.w = dot(gViewProjection._m30_m31_m32_m33, r1.xyzw);
  o1.xyzw = v1.xyzw;

adjust_hud(o0);

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//   using 3Dmigoto v1.3.16 on Sun Jun 02 03:39:58 2019
//
//
// Buffer Definitions:
//
// cbuffer cbWorldMatrix
// {
//
//   row_major float3x4 gWorld;         // Offset:    0 Size:    48
//   row_major float4x4 gWorldViewProj; // Offset:   48 Size:    64 [unused]
//
// }
//
// cbuffer cbViewProjection
// {
//
//   row_major float3x4 gView;          // Offset:    0 Size:    48 [unused]
//   row_major float4x4 gProjection;    // Offset:   48 Size:    64 [unused]
//   row_major float4x4 gViewProjection;// Offset:  112 Size:    64
//   row_major float3x4 gViewInverse;   // Offset:  176 Size:    48 [unused]
//   float4 gCameraPositionTime;        // Offset:  224 Size:    16 [unused]
//   float4 gITMGF;                     // Offset:  240 Size:    16 [unused]
//   float2 gfLinearZ;                  // Offset:  256 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbWorldMatrix                     cbuffer      NA          NA    4        1
// cbViewProjection                  cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb4[3], immediateIndexed
dcl_constantbuffer cb5[11], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_temps 2
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb4[0].xyzw, r0.xyzw
dp4 r1.y, cb4[1].xyzw, r0.xyzw
dp4 r1.z, cb4[2].xyzw, r0.xyzw
mov r1.w, l(1.000000)
dp4 o0.x, cb5[7].xyzw, r1.xyzw
dp4 o0.y, cb5[8].xyzw, r1.xyzw
dp4 o0.z, cb5[9].xyzw, r1.xyzw
dp4 o0.w, cb5[10].xyzw, r1.xyzw
mov o1.xyzw, v1.xyzw
ret
// Approximately 12 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
