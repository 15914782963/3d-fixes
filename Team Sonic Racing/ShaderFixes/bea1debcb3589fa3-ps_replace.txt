// Fog. Broken when camera is tilted. Cloud / hot air balloon track is good test where track goes vertical
//
// ---- Created with 3Dmigoto v1.3.16 on Sun Jun 02 01:34:12 2019

cbuffer cbViewProjection : register(b5)
{
  row_major float3x4 gView : packoffset(c0);
  row_major float4x4 gProjection : packoffset(c3);
  row_major float4x4 gViewProjection : packoffset(c7);
  row_major float3x4 gViewInverse : packoffset(c11);
  float4 gCameraPositionTime : packoffset(c14);
  float4 gITMGF : packoffset(c15);
  float2 gfLinearZ : packoffset(c16);
}

cbuffer cbLightData : register(b6)
{
  float4 gFogParams : packoffset(c0);
  float3 gFogColour : packoffset(c1);
  float4 gLightAmbient : packoffset(c2);
  float4 gIblTexMipLevels : packoffset(c3);

  struct
  {
    float3 direction;
    float3 position;
    float4 colour;
    float4 lightConst;
    float4 spotConst;
  } gLight[8] : packoffset(c4);

}

cbuffer c0 : register(b0)
{
  float4 gNearFarPlane : packoffset(c0);
  row_major float4x4 gInverseViewProj : packoffset(c1);
}

SamplerState gDepth_smp_s : register(s0);
SamplerState gMrt0_smp_s : register(s1);
SamplerState gSrc_smp_s : register(s2);
Texture2D<float4> gDepth_tex : register(t0);
Texture2D<float4> gMrt0_tex : register(t1);
Texture2D<float4> gSrc_tex : register(t2);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float2 w1 : TEXCOORD1,
  float2 v2 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = w1.xy;
  r0.z = 1;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.z = gDepth_tex.Sample(gDepth_smp_s, v1.xy).x;
  r0.w = -gNearFarPlane.x + r1.z;
  r0.w = gNearFarPlane.y / r0.w;
  r0.xyw = r0.xyz * r0.www;

// Possibly need correction here? No noticeable difference
//float4 s = StereoParams.Load(0);
//r0.x -= s.x * (r0.w - s.y);

  r0.xyz = r0.xyw / -r0.zzz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.x = -gFogParams.x + r0.x;
  r0.x = saturate(gFogParams.w * r0.x);
  r0.y = gMrt0_tex.Sample(gMrt0_smp_s, v1.xy).w;
  r0.y = gFogParams.z * r0.y;
  r0.x = r0.x * r0.y;
  r1.xy = v2.xy;
  r1.w = 1;

// Correct fog while camera is vertical:
float4 s = StereoParams.Load(0);
r1.x -= s.x;

  r0.y = dot(gInverseViewProj._m10_m11_m12_m13, r1.xyzw);
  r0.z = dot(gInverseViewProj._m30_m31_m32_m33, r1.xyzw);
  r0.y = r0.y / r0.z;
  r0.y = -gITMGF.y + r0.y;
  r0.z = gITMGF.z + -gITMGF.y;
  r0.y = saturate(r0.y / r0.z);
  r0.y = gITMGF.w * r0.y;
  r0.x = max(r0.x, r0.y);
  r0.yzw = gSrc_tex.Sample(gSrc_smp_s, v1.xy).xyz;
  r1.xyz = gFogColour.xyz + -r0.yzw;
  o0.xyz = r0.xxx * r1.xyz + r0.yzw;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//   using 3Dmigoto v1.3.16 on Sun Jun 02 01:34:12 2019
//
//
// Buffer Definitions:
//
// cbuffer cbViewProjection
// {
//
//   row_major float3x4 gView;          // Offset:    0 Size:    48 [unused]
//   row_major float4x4 gProjection;    // Offset:   48 Size:    64 [unused]
//   row_major float4x4 gViewProjection;// Offset:  112 Size:    64 [unused]
//   row_major float3x4 gViewInverse;   // Offset:  176 Size:    48 [unused]
//   float4 gCameraPositionTime;        // Offset:  224 Size:    16 [unused]
//   float4 gITMGF;                     // Offset:  240 Size:    16
//   float2 gfLinearZ;                  // Offset:  256 Size:     8 [unused]
//
// }
//
// cbuffer cbLightData
// {
//
//   float4 gFogParams;                 // Offset:    0 Size:    16
//   float3 gFogColour;                 // Offset:   16 Size:    12
//   float4 gLightAmbient;              // Offset:   32 Size:    16 [unused]
//   float4 gIblTexMipLevels;           // Offset:   48 Size:    16 [unused]
//
//   struct LightParams
//   {
//
//       float3 direction;              // Offset:   64
//       float3 position;               // Offset:   80
//       float4 colour;                 // Offset:   96
//       float4 lightConst;             // Offset:  112
//       float4 spotConst;              // Offset:  128
//
//   } gLight[8];                       // Offset:   64 Size:   640 [unused]
//
// }
//
// cbuffer c0
// {
//
//   float4 gNearFarPlane;              // Offset:    0 Size:    16
//   row_major float4x4 gInverseViewProj;// Offset:   16 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gDepth_smp                        sampler      NA          NA    0        1
// gMrt0_smp                         sampler      NA          NA    1        1
// gSrc_smp                          sampler      NA          NA    2        1
// gDepth_tex                        texture  float4          2d    0        1
// gMrt0_tex                         texture  float4          2d    1        1
// gSrc_tex                          texture  float4          2d    2        1
// c0                                cbuffer      NA          NA    0        1
// cbViewProjection                  cbuffer      NA          NA    5        1
// cbLightData                       cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xy          2     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb5[16], immediateIndexed
dcl_constantbuffer cb6[2], immediateIndexed
dcl_constantbuffer cb0[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 2
mov r0.xy, v1.zwzz
mov r0.z, l(1.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.z, v1.xyxx, t0.yzxw, s0
add r0.w, r1.z, -cb0[0].x
div r0.w, cb0[0].y, r0.w
mul r0.xyw, r0.wwww, r0.xyxz
div r0.xyz, r0.xywx, -r0.zzzz
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
add r0.x, r0.x, -cb6[0].x
mul_sat r0.x, r0.x, cb6[0].w
sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t1.xwyz, s1
mul r0.y, r0.y, cb6[0].z
mul r0.x, r0.y, r0.x
mov r1.xy, v2.xyxx
mov r1.w, l(1.000000)
dp4 r0.y, cb0[2].xyzw, r1.xyzw
dp4 r0.z, cb0[4].xyzw, r1.xyzw
div r0.y, r0.y, r0.z
add r0.y, r0.y, -cb5[15].y
add r0.z, -cb5[15].y, cb5[15].z
div_sat r0.y, r0.y, r0.z
mul r0.y, r0.y, cb5[15].w
max r0.x, r0.y, r0.x
sample_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t2.wxyz, s2
add r1.xyz, -r0.yzwy, cb6[1].xyzx
mad o0.xyz, r0.xxxx, r1.xyzx, r0.yzwy
mov o0.w, l(1.000000)
ret
// Approximately 32 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
