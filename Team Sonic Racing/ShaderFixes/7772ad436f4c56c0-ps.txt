//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//   using 3Dmigoto v1.3.16 on Sun May 26 04:32:55 2019
//
//
// Buffer Definitions:
//
// cbuffer cbCommonModifiers
// {
//
//   float4 gColourMul;                 // Index:    0.xyzw           Components:     4
//   float4 gColourAdd;                 // Index:    1.xyzw           Components:     4
//   float gAlphaRef;                   // Index:    2.x              Components:     1
//   float4 gFogMul;                    // Index:    3.xyzw           Components:     4
//   float4 gDualSpecular;              // Index:    4.xyzw           Components:     4
//
// }
//
// cbuffer cbLightData
// {
//
//   float4 gFogParams;                 // Index:    0.xyzw           Components:     4
//   float3 gFogColour;                 // Index:    1.xyz            Components:     3
//   float4 gLightAmbient;              // Index:    2.xyzw           Components:     4
//   float4 gIblTexMipLevels;           // Index:    3.xyzw           Components:     4
//
//   struct LightParams
//   {
//
//       float3 direction;              // Index:    4
//       float3 position;               // Index:    5
//       float4 colour;                 // Index:    6
//       float4 lightConst;             // Index:    7
//       float3 spotConst;              // Index:    8
//
//   } gLight[8];                       // Index:    4-43.z           Components:   159
//
// }
//
// cbuffer cbShadow
// {
//
//   float4 gSplitSpheres[4];           // Index:    0 1 2 3          Components:    16
//   float4 gShadowOffset;              // Index:    4.xyzw           Components:     4
//   float4 gSplitData[4];              // Index:    5 6 7 8          Components:    16
//   row_major float3x4 gShadowMatrix[4];// Index:    9-20             Components:    48 [unused]
//
// }
//
// cbuffer cbViewProjection
// {
//
//   row_major float3x4 gView;          // Index:    0 1 2            Components:    12 [unused]
//   row_major float4x4 gProjection;    // Index:    3 4 5 6          Components:    16 [unused]
//   row_major float4x4 gViewProjection;// Index:    7 8 9 10         Components:    16 [unused]
//   row_major float3x4 gViewInverse;   // Index:   11 12 13          Components:    12 [unused]
//   float4 gCameraPositionTime;        // Index:   14.xyzw           Components:     4
//   float4 gITMGF;                     // Index:   15.xyzw           Components:     4 [unused]
//   float2 gfLinearZ;                  // Index:   16.xy             Components:     2 [unused]
//
// }
//
// cbuffer c_default
// {
//
//   float4 gFresnelColour;             // Index:    0.xyzw           Components:     4
//   float4 gFresnelFactorPowerLitUnlit;// Index:    1.xyzw           Components:     4
//   float4 gFresnelTypeAddDotshift;    // Index:    2.xyzw           Components:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gMetalRoughTexture_smp            sampler      NA          NA    0        1
// gAlbedoTexture_smp                sampler      NA          NA    2        1
// gNormalTexture_smp                sampler      NA          NA    4        1
// gShadowTexture_smp              sampler_c      NA          NA    7        1
// gLightTexture_smp                 sampler      NA          NA    8        1
// gMetalRoughTexture_tex            texture  float4          2d    0        1
// gAlbedoTexture_tex                texture  float4          2d    2        1
// gNormalTexture_tex                texture  float4          2d    4        1
// gShadowTexture_tex                texture  float4          2d    7        1
// gLightTexture_tex                 texture  float4        cube    8        1
// c_default                         cbuffer      NA          NA    0        1
// cbCommonModifiers                 cbuffer      NA          NA    2        1
// cbViewProjection                  cbuffer      NA          NA    5        1
// cbLightData                       cbuffer      NA          NA    6        1
// cbShadow                          cbuffer      NA          NA    7        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xyz
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyz
// TEXCOORD                 4   xyzw        5     NONE   float   xyz
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[5], immediateIndexed
dcl_constantbuffer cb6[39], dynamicIndexed
dcl_constantbuffer cb7[8], immediateIndexed
dcl_constantbuffer cb5[15], immediateIndexed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s7, mode_comparison
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texturecube (float,float,float,float) t8
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyz
dcl_output o0.xyzw
dcl_temps 17
dp3 r0.x, v2.xyzx, v2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v2.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t2.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r2.xy, v1.xyxx, t4.xyzw, s4
dp3 r0.w, v6.xyzx, v6.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, v6.xyzx
mul r4.xyz, r0.zxyz, r3.yzxy
mad r4.xyz, r0.yzxy, r3.zxyz, -r4.xyzx
mul r4.xyz, r4.xyzx, v6.wwww
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r2.xyxx, r2.xyxx
add r0.w, -r0.w, l(1.000000)
sqrt r0.w, r0.w
mul r2.yzw, r4.xxyz, r2.yyyy
mad r2.xyz, r2.xxxx, r3.xyzx, r2.yzwy
mad r0.xyz, r0.wwww, r0.xyzx, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xy, v1.xyxx, t0.xyzw, s0
add r3.xyz, -v7.xyzx, cb5[14].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r2.z, r0.w
mul r4.xyz, r2.zzzz, r3.xyzx
ge r2.w, cb0[2].x, l(2.000000)
dp3 r3.w, r4.xyzx, -r0.xyzx
add r3.w, r3.w, l(1.000000)
log r3.w, r3.w
mul r3.w, r3.w, cb0[1].y
exp r3.w, r3.w
mul r3.w, r3.w, cb0[1].x
dp3 r4.w, r4.xyzx, r0.xyzx
add r5.x, -|r4.w|, cb0[2].z
log r5.x, |r5.x|
mul r5.x, r5.x, cb0[1].y
exp r5.x, r5.x
mad_sat r5.x, r5.x, cb0[1].x, cb0[2].y
movc r2.w, r2.w, r3.w, r5.x
mul r3.w, r2.w, cb0[1].z
add r5.xyz, -r1.xyzx, cb0[0].xyzx
mad r1.xyz, r3.wwww, r5.xyzx, r1.xyzx
mul r5.xyz, cb0[0].wwww, cb0[0].xyzx
mul r5.xyz, r2.wwww, r5.xyzx
add r6.xyz, v7.xyzx, -cb7[0].xyzx
dp3 r2.w, r6.xyzx, r6.xyzx
lt r2.w, r2.w, cb7[0].w
if_nz r2.w
  mad r6.xy, v3.xyxx, cb7[5].xyxx, cb7[5].zwzz
  mad r2.w, v3.w, cb7[4].x, v3.z
  add r2.w, r2.w, -cb7[4].y
  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r6.xyxx, t7.xxxx, s7, r2.w
else
  add r6.xyz, v7.xyzx, -cb7[1].xyzx
  dp3 r3.w, r6.xyzx, r6.xyzx
  lt r3.w, r3.w, cb7[1].w
  if_nz r3.w
    mad r6.xy, v4.xyxx, cb7[6].xyxx, cb7[6].zwzz
    mad r3.w, v3.w, cb7[4].x, v4.z
    add r3.w, r3.w, -cb7[4].y
    sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r6.xyxx, t7.xxxx, s7, r3.w
  else
    add r6.xyz, v7.xyzx, -cb7[2].xyzx
    dp3 r3.w, r6.xyzx, r6.xyzx
    lt r3.w, r3.w, cb7[2].w
    if_nz r3.w
      mad r6.xy, v5.xyxx, cb7[7].xyxx, cb7[7].zwzz
      mad r3.w, v3.w, cb7[4].x, v5.z
      add r3.w, r3.w, -cb7[4].y
      sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r6.xyxx, t7.xxxx, s7, r3.w
    else
      mov r2.w, l(1.000000)
    endif
  endif
endif
mad r6.xyz, -r1.xyzx, r2.xxxx, r1.xyzx
mul r6.xyz, r6.xyzx, l(0.318309873, 0.318309873, 0.318309873, 0.000000)
mul r7.xyz, r6.xyzx, cb6[2].xyzx
max r3.w, r2.y, l(0.060000)
add r1.xyz, r1.xyzx, l(-0.040000, -0.040000, -0.040000, 0.000000)
mad r1.xyz, r2.xxxx, r1.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000)
min r8.x, |r4.w|, l(1.000000)
mul r2.x, r3.w, r3.w
mul r2.x, r2.x, r2.x
mul_sat r3.w, r1.y, l(50.000000)
ne r5.w, l(0.000000), cb2[4].y
eq r6.w, l(3.000000), cb2[4].w
max r7.w, l(0.060000), cb2[4].y
mul r7.w, r7.w, r7.w
mul r7.w, r7.w, r7.w
mul r9.xyz, r1.xyzx, cb2[4].zzzz
mov r10.xyz, r7.xyzx
mov r11.xyz, l(0,0,0,0)
mov r8.zw, l(0,0,1.000000,0)
loop
  ige r9.w, r8.w, l(6)
  breakc_nz r9.w
  imul null, r9.w, r8.w, l(5)
  add r12.xyz, -v7.xyzx, cb6[r9.w + 5].xyzx
  add r13.xyz, -r12.xyzx, -cb6[r9.w + 4].xyzx
  mad r12.xyz, cb6[r9.w + 7].wwww, r13.xyzx, r12.xyzx
  dp3 r10.w, r12.xyzx, r12.xyzx
  sqrt r10.w, r10.w
  div r12.xyz, r12.xyzx, r10.wwww
  dp3 r11.w, -cb6[r9.w + 4].xyzx, r12.xyzx
  add_sat r11.w, r11.w, -cb6[r9.w + 8].x
  mul r11.w, r11.w, cb6[r9.w + 8].y
  max r11.w, r11.w, l(1.000000012E-007)
  log r11.w, r11.w
  mul r11.w, r11.w, cb6[r9.w + 8].z
  exp r11.w, r11.w
  add r10.w, r10.w, -cb6[r9.w + 7].x
  div_sat r10.w, r10.w, cb6[r9.w + 7].y
  add r10.w, -r10.w, l(1.000000)
  log r10.w, r10.w
  mul r10.w, r10.w, cb6[r9.w + 7].z
  exp r10.w, r10.w
  mul r10.w, r10.w, r11.w
  dp3_sat r8.y, r0.xyzx, r12.xyzx
  mul r13.xyz, cb6[r9.w + 6].wwww, cb6[r9.w + 6].xyzx
  mad r12.xyz, r3.xyzx, r2.zzzz, r12.xyzx
  dp3 r9.w, r12.xyzx, r12.xyzx
  rsq r9.w, r9.w
  mul r12.xyz, r9.wwww, r12.xyzx
  dp3_sat r9.w, r0.xyzx, r12.xyzx
  dp3_sat r11.w, r4.xyzx, r12.xyzx
  mad r12.x, r9.w, r2.x, -r9.w
  mad r12.x, r12.x, r9.w, l(1.000000)
  mul r12.x, r12.x, r12.x
  mul r12.x, r12.x, l(3.14159274)
  div r12.x, r2.x, r12.x
  add r11.w, -r11.w, l(1.000000)
  mul r12.y, r11.w, r11.w
  mul r12.y, r12.y, r12.y
  mul r12.z, r11.w, r12.y
  mad r11.w, -r12.y, r11.w, l(1.000000)
  mul r14.xyz, r1.xyzx, r11.wwww
  mad r12.yzw, r3.wwww, r12.zzzz, r14.xxyz
  mad r14.xy, -r2.xxxx, r8.xyxx, r8.xyxx
  mad r14.xy, r8.xyxx, r14.xyxx, r2.xxxx
  sqrt r14.xy, r14.xyxx
  add r14.xy, r8.xyxx, r14.xyxx
  mul r11.w, r14.y, r14.x
  div r11.w, l(1.000000, 1.000000, 1.000000, 1.000000), r11.w
  mul r14.xyz, r12.yzwy, r12.xxxx
  mul r15.xyz, r11.wwww, r14.xyzx
  if_nz r5.w
    if_nz r6.w
      mad r12.x, r9.w, r7.w, -r9.w
      mad r12.x, r12.x, r9.w, l(1.000000)
      mul r12.x, r12.x, r12.x
      mul r12.x, r12.x, l(3.14159274)
      div r12.x, r7.w, r12.x
      mad r16.xy, -r7.wwww, r8.xyxx, r8.xyxx
      mad r16.xy, r8.xyxx, r16.xyxx, r7.wwww
      sqrt r16.xy, r16.xyxx
      add r16.xy, r8.xyxx, r16.xyxx
      mul r13.w, r16.y, r16.x
      div r13.w, l(1.000000, 1.000000, 1.000000, 1.000000), r13.w
      mul r12.xyz, r12.yzwy, r12.xxxx
      mul r12.xyz, r13.wwww, r12.xyzx
      mul r12.xyz, r12.xyzx, cb2[4].zzzz
    else
      log r9.w, r9.w
      mul r9.w, r9.w, cb2[4].y
      exp r9.w, r9.w
      mul r12.xyz, r9.wwww, r9.xyzx
    endif
    mad r15.xyz, r14.xyzx, r11.wwww, r12.xyzx
  endif
  mul r12.xyz, r8.yyyy, r15.xyzx
  movc r9.w, r8.w, l(1.000000), r2.w
  mad r11.w, r9.w, l(0.750000), l(0.250000)
  movc r8.z, r8.w, r8.z, r11.w
  mul r9.w, r9.w, r10.w
  mul r13.xyz, r13.xyzx, r9.wwww
  mul r14.xyz, r8.yyyy, r13.xyzx
  mad r10.xyz, r14.xyzx, r6.xyzx, r10.xyzx
  mad r11.xyz, r13.xyzx, r12.xyzx, r11.xyzx
  iadd r8.w, r8.w, l(1)
endloop
lt r2.x, l(0.000000), cb6[3].x
if_nz r2.x
  max r2.x, r2.y, l(0.00781250000)
  log r2.x, r2.x
  mad r2.x, -r2.x, l(1.200000), l(1.000000)
  mov_sat r4.w, r4.w
  mad r6.xyzw, r2.yyyy, l(-1.000000, -0.027500, -0.572000, 0.022000), l(1.000000, 0.042500, 1.040000, -0.040000)
  mul r2.y, r6.x, r6.x
  mul r2.z, r4.w, l(-9.280000)
  exp r2.z, r2.z
  min r2.y, r2.z, r2.y
  mad r2.y, r2.y, r6.x, r6.y
  mad r2.yz, r2.yyyy, l(0.000000, -1.040000, 1.040000, 0.000000), r6.zzwz
  mul r2.z, r3.w, r2.z
  mad r1.xyz, r1.xyzx, r2.yyyy, r2.zzzz
  add r2.y, l(-2.000000), cb6[3].x
  add r2.x, -r2.x, r2.y
  dp3 r2.y, -r4.xyzx, r0.xyzx
  add r2.y, r2.y, r2.y
  mad r0.xyz, r0.xyzx, -r2.yyyy, -r4.xyzx
  sample_l_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t8.xyzw, s8, r2.x
  mul r0.xyz, r1.xyzx, r0.xyzx
  mul r0.xyz, r8.zzzz, r0.xyzx
else
  mov r0.xyz, l(0,0,0,0)
endif
mad r1.xyz, r5.xyzx, cb0[1].wwww, r10.xyzx
add r1.xyz, r11.xyzx, r1.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
mad r0.xyz, r0.xyzx, cb2[0].xyzx, cb2[1].xyzx
mad r1.x, r1.w, cb2[0].w, cb2[1].w
sqrt r0.w, r0.w
add r0.w, r0.w, -cb6[0].x
mul_sat r0.w, r0.w, cb6[0].w
mul r0.w, r0.w, cb6[0].z
mov_sat r1.y, cb2[3].x
mul r0.w, r0.w, r1.y
add r1.yzw, -r0.xxyz, cb6[1].xxyz
mad o0.xyz, r0.wwww, r1.yzwy, r0.xyzx
add r0.x, r1.x, -cb2[2].x
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x
mov o0.w, r1.x
ret
// Approximately 229 instruction slots used