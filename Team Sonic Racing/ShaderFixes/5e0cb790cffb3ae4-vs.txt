// asmtool.py --auto-fix-vertex-halo -i --only-autofixed 5e0cb790cffb3ae4-vs.txt
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//   using 3Dmigoto v1.3.16 on Sun May 26 02:39:54 2019
//
//
// Buffer Definitions:
//
// cbuffer c0
// {
//
//   row_major float4x4 g_worldViewProj;// Index:    0 1 2 3          Components:    16
//   row_major float4x4 g_invWorldViewProj;// Index:    4 5 6 7          Components:    16 [unused]
//   float4 gTexScaleOffset;            // Index:    8.xyzw           Components:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// c0                                cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_input v0.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_temps 3
// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r2.xyzw, l(0, 0, 0, 0), t125.xyzw

mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb0[0].xyzw, r0.xyzw
dp4 r1.y, cb0[1].xyzw, r0.xyzw
dp4 r1.z, cb0[2].xyzw, r0.xyzw
dp4 r1.w, cb0[3].xyzw, r0.xyzw
mov o0.xyzw, r1.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --auto-fix-vertex-halo -i --only-autofixed 5e0cb790cffb3ae4-vs.txt
ne r2.w, r1.w, l(1.0)
if_nz r2.w
  add r2.w, r1.w, -r2.y
  mad r1.x, r2.w, r2.x, r1.x
endif

mov o1.xyzw, r1.xyzw
ret
// Approximately 9 instruction slots used