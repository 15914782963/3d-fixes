// Shadows - Low

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//   using 3Dmigoto v1.3.16 on Sat Jun 01 21:12:25 2019
//
//
// Buffer Definitions:
//
// cbuffer c0
// {
//
//   row_major float4x4 gWorldViewProj; // Index:    0 1 2 3          Components:    16 [unused]
//   row_major float3x4 gWorldView;     // Index:    4 5 6            Components:    12 [unused]
//   float4 gSampleOffset;              // Index:    7.xyzw           Components:     4
//   float4 gRandMapScale;              // Index:    8.xyzw           Components:     4
//   float4 gSampleKernel[4];           // Index:    9 10 11 12       Components:    16
//   float4 gScaleOffset;               // Index:   13.xyzw           Components:     4
//
// }
//
// cbuffer c2
// {
//
//   row_major float3x4 ShadowMatrix[4];// Index:    0-11             Components:    48
//   float4 RadiusBlendFilter[4];       // Index:   12 13 14 15       Components:    16
//   float4 SphereCentre[4];            // Index:   16 17 18 19       Components:    16
//   float4 BlendStartSphereCentre[4];  // Index:   20 21 22 23       Components:    16
//   float4 NearFar;                    // Index:   24.xyzw           Components:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s0_smp                            sampler      NA          NA    0        1
// s1_smp                            sampler      NA          NA    1        1
// s2_smp                          sampler_c      NA          NA    2        1
// s4_smp                          sampler_c      NA          NA    4        1
// s0_tex                            texture  float4          2d    0        1
// s1_tex                            texture  float4          2d    1        1
// s2_tex                            texture  float4          2d    2        1
// s4_tex                            texture  float4          2d    4        1
// c0                                cbuffer      NA          NA    0        1
// c2                                cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[14], immediateIndexed
dcl_constantbuffer cb2[25], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_comparison
dcl_sampler s4, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_output o0.xyzw
dcl_temps 31
// StereoParams:
dcl_resource_texture2d (float,float,float,float) t125
ld_indexable(texture2d)(float,float,float,float) r9.xyzw, l(0, 0, 0, 0), t125.xyzw

mad r0.xy, v1.xyxx, cb0[7].xyxx, cb0[7].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t0.yzxw, s0
add r0.z, r0.z, -cb2[24].x
div r0.z, cb2[24].y, r0.z
mov r1.xy, v1.zwzz
mov r1.z, l(-1.000000)
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mul r1.xyw, r0.zzzz, r1.xyxz
div r1.xyz, r1.xywx, -r1.zzzz

// Derive P.I._m00 from WV and WVP like Unity:

// 1. Calculate 1/determinant of the MV matrix, simplifying by assuming the
//    4th column of the MV matrix is 0,0,0,1
//
// mathomatic simplified it to:
// 1 / ((m12*((m20*m01) - (m21*m00))) + (m02*((m21*m10) - (m20*m11))) + (m22*((m00*m11) - (m01*m10))));
//
// Replace row numbers with register components (assumes column-major order):
//   (mv2.x*((mv0.y*mv1.z) - (mv0.z*mv1.y)))
// + (mv2.y*((mv0.z*mv1.x) - (mv0.x*mv1.z)))
// + (mv2.z*((mv0.x*mv1.y) - (mv0.y*mv1.x)))

// Do some multiplications in parallel with SIMD instructions:
mul r20.xyz, cb0[4].yzxw, cb0[5].zxyw	// mv0.y*mv1.z, mv0.z*mv1.x, mv0.x*mv1.y
mul r21.xyz, cb0[4].zxyw, cb0[5].yzxw	// mv0.z*mv1.y, mv0.x*mv1.z, mv0.y*mv1.x
// Do the subtractions:
add r20.xyz, r20.xyzw, -r21.xyzw	// mv0.y*mv1.z - mv0.z*mv1.y, mv0.z*mv1.x - mv0.x*mv1.z, mv0.x*mv1.y - mv0.y*mv1.x
// Now the final three multiplications and the two additions:
dp3 r22.w, r20.xyzw, cb0[6].xyzw
// And finally get 1/determinant:
rcp r22.w, r22.w

// 2. Calculate the 1st row of the inverted MV matrix, simplifying by assuimg
//    the 4th column of the MV matrix is 0,0,0,1
//
// m00 = (mv1.y*mv2.z - mv1.z*mv2.y) / determinant
// m01 = (mv1.z*mv2.x - mv1.x*mv2.z) / determinant
// m02 = (mv1.x*mv2.y - mv1.y*mv2.x) / determinant

// Do some multiplications in parallel with SIMD instructions:
mul r20.xyz, cb0[5].yzxw, cb0[6].zxyw	// mv1.y*mv2.z, mv1.z*mv2.x, mv1.x*mv2.y
mul r21.xyz, cb0[5].zxyw, cb0[6].yzxw	// mv1.z*mv2.y, mv1.x*mv2.z, mv1.y*mv2.x
// Do the subtractions:
add r20.xyz, r20.xyzw, -r21.xyzw	// mv1.y*mv2.z - mv1.z*mv2.y, mv1.z*mv2.x - mv1.x*mv2.z, mv1.x*mv2.y - mv1.y*mv2.x
// Multiply against 1/determinant:
mul r20.xyz, r20.xyzw, r22.wwww

// 3. Multiply the first row of the inverted MV matrix with the 1st column of
//    the MVP matrix (MV.I[0,3] is 0, so only worry about the 1st three):
dp3 r30.x, r20.xyzw, cb0[0].xyzw

// View-space shadow stereo correction:
add r9.w, -r1.z, -r9.y
mul r9.w, r9.w, r9.x
div r9.w, r9.w, r30.x
add r1.x, r1.x, -r9.w

mul r0.xy, r0.xyxx, cb0[8].xyxx
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t1.xyzw, s1
mov r2.xy, l(0,2,0,0)
mov r3.y, l(1)
loop
  ilt r2.z, r3.y, l(0)
  breakc_nz r2.z
  add r4.xyz, r1.xyzx, -cb2[r3.y + 16].xyzx
  dp3 r3.x, r4.xyzx, r4.xyzx
  mul r2.z, cb2[r3.y + 12].x, cb2[r3.y + 12].x
  ge r2.z, r2.z, r3.x
  movc r2.xy, r2.zzzz, r3.xyxx, r2.xyxx
  iadd r3.y, r3.y, l(-1)
endloop
ige r2.z, r2.y, l(2)
discard_nz r2.z
imul null, r2.z, r2.y, l(3)
mov r1.w, l(1.000000)
dp4 r3.x, cb2[r2.z + 0].xyzw, r1.xyzw
dp4 r3.y, cb2[r2.z + 1].xyzw, r1.xyzw
dp4 r2.w, cb2[r2.z + 2].xyzw, r1.xyzw
log r3.z, -r1.z
mul r3.z, r3.z, cb0[13].z
exp r3.z, r3.z
mad r3.z, r3.z, cb0[13].x, cb0[13].y
add r2.w, r2.w, -r3.z
if_z r2.y
  mul r4.xyzw, r0.xyzw, cb2[r2.y + 12].zwzw
  mad r5.xyzw, cb0[9].xxzz, r4.xyxy, r3.xyxy
  mad r5.xyzw, cb0[9].yyww, r4.zwzw, r5.xyzw
  mad r6.xyzw, cb0[10].xxzz, r4.xyxy, r3.xyxy
  mad r6.xyzw, cb0[10].yyww, r4.zwzw, r6.xyzw
  mad r7.xyzw, cb0[11].xxzz, r4.xyxy, r3.xyxy
  mad r7.xyzw, cb0[11].yyww, r4.zwzw, r7.xyzw
  mad r8.xyzw, cb0[12].xxzz, r4.xyxy, r3.xyxy
  mad r4.xyzw, cb0[12].yyww, r4.zwzw, r8.xyzw
  sample_c_lz_indexable(texture2d)(float,float,float,float) r8.x, r5.xyxx, t2.xxxx, s2, r2.w
  sample_c_lz_indexable(texture2d)(float,float,float,float) r8.y, r5.zwzz, t2.xxxx, s2, r2.w
  sample_c_lz_indexable(texture2d)(float,float,float,float) r8.z, r6.xyxx, t2.xxxx, s2, r2.w
  sample_c_lz_indexable(texture2d)(float,float,float,float) r8.w, r6.zwzz, t2.xxxx, s2, r2.w
  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.x, r7.xyxx, t2.xxxx, s2, r2.w
  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r7.zwzz, t2.xxxx, s2, r2.w
  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.z, r4.xyxx, t2.xxxx, s2, r2.w
  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.w, r4.zwzz, t2.xxxx, s2, r2.w
  dp4 r3.w, r8.xyzw, l(0.125000, 0.125000, 0.125000, 0.125000)
  dp4 r4.x, r5.xyzw, l(0.125000, 0.125000, 0.125000, 0.125000)
  add r3.w, r3.w, r4.x
  mov r4.y, l(0)
else
  ieq r4.y, r2.y, l(1)
  if_nz r4.y
    mul r5.xyzw, r0.xyzw, cb2[r2.y + 12].zwzw
    mad r6.xyzw, cb0[9].xxzz, r5.xyxy, r3.xyxy
    mad r6.xyzw, cb0[9].yyww, r5.zwzw, r6.xyzw
    mad r7.xyzw, cb0[10].xxzz, r5.xyxy, r3.xyxy
    mad r5.xyzw, cb0[10].yyww, r5.zwzw, r7.xyzw
    sample_c_lz_indexable(texture2d)(float,float,float,float) r7.x, r6.xyxx, t4.xxxx, s4, r2.w
    sample_c_lz_indexable(texture2d)(float,float,float,float) r7.y, r6.zwzz, t4.xxxx, s4, r2.w
    sample_c_lz_indexable(texture2d)(float,float,float,float) r7.z, r5.xyxx, t4.xxxx, s4, r2.w
    sample_c_lz_indexable(texture2d)(float,float,float,float) r7.w, r5.zwzz, t4.xxxx, s4, r2.w
    dp4 r3.w, r7.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
    mov r4.x, r3.w
  else
    mul r5.xyzw, r0.xyzw, cb2[r2.y + 12].zwzw
    mad r6.xyzw, cb0[9].xxzz, r5.xyxy, r3.xyxy
    mad r6.xyzw, cb0[9].yyww, r5.zwzw, r6.xyzw
    mad r7.xyzw, cb0[10].xxzz, r5.xyxy, r3.xyxy
    mad r5.xyzw, cb0[10].yyww, r5.zwzw, r7.xyzw
    sample_c_lz_indexable(texture2d)(float,float,float,float) r7.x, r6.xyxx, t2.xxxx, s2, r2.w
    sample_c_lz_indexable(texture2d)(float,float,float,float) r7.y, r6.zwzz, t2.xxxx, s2, r2.w
    sample_c_lz_indexable(texture2d)(float,float,float,float) r7.z, r5.xyxx, t2.xxxx, s2, r2.w
    sample_c_lz_indexable(texture2d)(float,float,float,float) r7.w, r5.zwzz, t2.xxxx, s2, r2.w
    dp4 r3.w, r7.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
  endif
endif
if_z r4.y
  add r4.yzw, r1.xxyz, -cb2[r2.y + 20].xxyz
  dp3 r2.w, r4.yzwy, r4.yzwy
  mul r3.x, cb2[r2.y + 12].x, cb2[r2.y + 12].x
  lt r2.w, r3.x, r2.w
  if_nz r2.w
    sqrt r2.x, r2.x
    add r2.x, -r2.x, cb2[r2.y + 12].x
    div_sat r2.x, r2.x, cb2[r2.y + 12].y
    iadd r2.w, r2.y, l(1)
    dp4 r3.x, cb2[r2.z + 3].xyzw, r1.xyzw
    dp4 r3.y, cb2[r2.z + 4].xyzw, r1.xyzw
    dp4 r1.x, cb2[r2.z + 5].xyzw, r1.xyzw
    add r1.x, -r3.z, r1.x
    ieq r1.y, r2.w, l(1)
    if_nz r1.y
      mul r5.xyzw, r0.xyzw, cb2[r2.y + 13].zwzw
      mad r6.xyzw, cb0[9].xxzz, r5.xyxy, r3.xyxy
      mad r6.xyzw, cb0[9].yyww, r5.zwzw, r6.xyzw
      mad r7.xyzw, cb0[10].xxzz, r5.xyxy, r3.xyxy
      mad r5.xyzw, cb0[10].yyww, r5.zwzw, r7.xyzw
      sample_c_lz_indexable(texture2d)(float,float,float,float) r7.x, r6.xyxx, t4.xxxx, s4, r1.x
      sample_c_lz_indexable(texture2d)(float,float,float,float) r7.y, r6.zwzz, t4.xxxx, s4, r1.x
      sample_c_lz_indexable(texture2d)(float,float,float,float) r7.z, r5.xyxx, t4.xxxx, s4, r1.x
      sample_c_lz_indexable(texture2d)(float,float,float,float) r7.w, r5.zwzz, t4.xxxx, s4, r1.x
      dp4 r1.y, r7.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
    else
      mul r0.xyzw, r0.xyzw, cb2[r2.y + 13].zwzw
      mad r5.xyzw, cb0[9].xxzz, r0.xyxy, r3.xyxy
      mad r5.xyzw, cb0[9].yyww, r0.zwzw, r5.xyzw
      mad r6.xyzw, cb0[10].xxzz, r0.xyxy, r3.xyxy
      mad r0.xyzw, cb0[10].yyww, r0.zwzw, r6.xyzw
      sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r5.xyxx, t2.xxxx, s2, r1.x
      sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r5.zwzz, t2.xxxx, s2, r1.x
      sample_c_lz_indexable(texture2d)(float,float,float,float) r6.z, r0.xyxx, t2.xxxx, s2, r1.x
      sample_c_lz_indexable(texture2d)(float,float,float,float) r6.w, r0.zwzz, t2.xxxx, s2, r1.x
      dp4 r1.y, r6.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
    endif
    add r0.x, -r1.y, r3.w
    mad r4.x, r2.x, r0.x, r1.y
  else
    mov r4.x, r3.w
  endif
endif
mov o0.xyzw, r4.xxxx
ret
// Approximately 132 instruction slots used