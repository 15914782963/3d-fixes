// Shadows. Main shadows (e.g. from trees) fixed. Shadows from small rocks still broken
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v1.3.16 on Sun Feb 02 21:14:35 2020
//
//
// Buffer Definitions:
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4x4 InvProjectionMatrix;      // Index:    0 1 2 3          Components:    16 [unused]
//   float4x4 InvViewMatrix;            // Index:    4 5 6 7          Components:    16 [unused]
//   float4x4 ProjectionMatrix;         // Index:    8 9 10 11        Components:    16
//   float4x4 ViewMatrix;               // Index:   12 13 14 15       Components:    16
//   float4x4 ViewProjectionMatrix;     // Index:   16 17 18 19       Components:    16 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Index:   20 21 22 23       Components:    16 [unused]
//   float4x4 ViewRotProjectionMatrix_Previous;// Index:   24 25 26 27       Components:    16 [unused]
//   float4 AmbientSHR;                 // Index:   28.xyzw           Components:     4 [unused]
//   float4 AmbientSHG;                 // Index:   29.xyzw           Components:     4 [unused]
//   float4 AmbientSHB;                 // Index:   30.xyzw           Components:     4 [unused]
//   float4 CameraDistances;            // Index:   31.xyzw           Components:     4
//   float4 CameraNearPlaneSize;        // Index:   32.xyzw           Components:     4 [unused]
//   float4 DepthScale;                 // Index:   33.xyzw           Components:     4 [unused]
//   float4 DepthTextureScaleOffset;    // Index:   34.xyzw           Components:     4 [unused]
//   float4 FogParams;                  // Index:   35.xyzw           Components:     4 [unused]
//   float4 FogSHB;                     // Index:   36.xyzw           Components:     4 [unused]
//   float4 FogSHG;                     // Index:   37.xyzw           Components:     4 [unused]
//   float4 FogSHR;                     // Index:   38.xyzw           Components:     4 [unused]
//   float4 HeightFogParams;            // Index:   39.xyzw           Components:     4 [unused]
//   float4 ViewportSize;               // Index:   40.xyzw           Components:     4
//   float3 CurvedHorizonFactors;       // Index:   41.xyz            Components:     3
//   float3 ViewPoint;                  // Index:   42.xyz            Components:     3 [unused]
//   float3 CameraPosition;             // Index:   43.xyz            Components:     3
//   float3 CameraPosition_Previous;    // Index:   44.xyz            Components:     3 [unused]
//   float3 CameraPositionFractions;    // Index:   45.xyz            Components:     3 [unused]
//   float3 CameraPositionFractions_Previous;// Index:   46.xyz            Components:     3 [unused]
//   float3 CameraRight;                // Index:   47.xyz            Components:     3 [unused]
//   float3 CameraUp;                   // Index:   48.xyz            Components:     3 [unused]
//   float3 CameraDirection;            // Index:   49.xyz            Components:     3 [unused]
//   float3 DepthTextureRcpSize;        // Index:   50.xyz            Components:     3 [unused]
//   float2 MotionVectorOffsets;        // Index:   51.xy             Components:     2 [unused]
//   float2 DepthRangeCompression;      // Index:   51.zw             Components:     2 [unused]
//   float ShadowProjDepthMinValue;     // Index:   52.x              Components:     1 [unused]
//   float DistanceScale;               // Index:   52.y              Components:     1 [unused]
//   float WorldSpaceZOffset;           // Index:   52.z              Components:     1 [unused]
//   float WorldSpaceZOffset_Previous;  // Index:   52.w              Components:     1 [unused]
//   float CameraFOVDeg;                // Index:   53.x              Components:     1 [unused]
//   float CameraTanHalfFOV;            // Index:   53.y              Components:     1 [unused]
//   float EffectsEmissiveEVBias;       // Index:   53.z              Components:     1 [unused]
//   float ShadowCSMLastSliceIndex;     // Index:   53.w              Components:     1
//   float SkyHeight;                   // Index:   54.x              Components:     1 [unused]
//   float ViewportMipBias;             // Index:   54.y              Components:     1 [unused]
//   float CameraDistanceRatio;         // Index:   54.z              Components:     1 [unused]
//   float StormFactor;                 // Index:   54.w              Components:     1 [unused]
//   float4 LocalToneMappingParams;     // Index:   55.xyzw           Components:     4 [unused]
//   float SkyLightingReference;        // Index:   56.x              Components:     1 [unused]
//   float SkyLocalToneMappingScale;    // Index:   56.y              Components:     1 [unused]
//   float4x4 ProbeMatrix[16];          // Index:   57-120            Components:   256 [unused]
//   int ProbeMask;                     // Index:  121.x              Components:     1 [unused]
//
// }
//
// cbuffer CDeferredShadowsResolveParameterProvider
// {
//
//   float4 LocalLightsShadowMapsParameters[15];// Index:    0-14             Components:    60 [unused]
//   float4 PCSSCascadeParams[3];       // Index:   15 16 17          Components:    12
//   float3 CSMFadeFactors;             // Index:   18.xyz            Components:     3
//   int NumLocalLightsShadowMaps;      // Index:   18.w              Components:     1 [unused]
//   float PCSSMaxPenumbraSize;         // Index:   19.x              Components:     1
//   float PCSSLightSize;               // Index:   19.y              Components:     1
//   float RecieverExtraBias;           // Index:   19.z              Components:     1
//   float UpscaleThresholdLoGrad;      // Index:   19.w              Components:     1 [unused]
//   float UpscaleThresholdHiGrad;      // Index:   20.x              Components:     1 [unused]
//   float LocallLightScreenSpaceShadowsFadeInFactor;// Index:   20.y              Components:     1 [unused]
//   float ASMLowSunFadeFactor;         // Index:   20.z              Components:     1
//   float4x4 TextureSpaceProjectionMatrix;// Index:   21 22 23 24       Components:    16
//   float4 TAASamplesData[9];          // Index:   25-33             Components:    36
//   float3 FrustumCornerCS[4];         // Index:   34-37.z           Components:    15
//   float4 LinearDepthReconstructionVector;// Index:   38.xyzw           Components:     4
//   float4 HierarchicalLinearDepthAtlasSamplingParams1;// Index:   39.xyzw           Components:     4 [unused]
//   float4 HalfSize;                   // Index:   40.xyzw           Components:     4
//   float3 SunDirectionVS;             // Index:   41.xyz            Components:     3
//   float RejectionThreshold;          // Index:   41.w              Components:     1
//   float3 LocalLightPosVS;            // Index:   42.xyz            Components:     3 [unused]
//   float LocalLightRadiusSq;          // Index:   42.w              Components:     1 [unused]
//   float3 LocalLightDirVS;            // Index:   43.xyz            Components:     3 [unused]
//   float LocalLightHalfOuterConeCos;  // Index:   43.w              Components:     1 [unused]
//   float3 TAAParams;                  // Index:   44.xyz            Components:     3
//   float2 ShadowScreenSize;           // Index:   45.xy             Components:     2
//   int2 ViewportSizeInt;              // Index:   45.zw             Components:     2 [unused]
//   int MaxTileCount;                  // Index:   46.x              Components:     1 [unused]
//   int TileBufferOffset;              // Index:   46.y              Components:     1
//   float StartPointDisplacement;      // Index:   46.z              Components:     1
//   float TransmissiveStartPointDisplacement;// Index:   46.w              Components:     1
//   float NearZStartPointDisplacement; // Index:   47.x              Components:     1
//   float TransmissiveShadowCasterMaxShadowFactor;// Index:   47.y              Components:     1
//
// }
//
// cbuffer CTileLightingBlendedParameterProvider
// {
//
//   float4 CSMSlice0_0;                // Index:    0.xyzw           Components:     4
//   float4 CSMSlice0_1;                // Index:    1.xyzw           Components:     4
//   float4 CSMSlice0_2;                // Index:    2.xyzw           Components:     4
//   float4 CSMSlice1_0;                // Index:    3.xyzw           Components:     4
//   float4 CSMSlice1_1;                // Index:    4.xyzw           Components:     4
//   float4 CSMSlice1_2;                // Index:    5.xyzw           Components:     4
//   float4 CSMSlice2_0;                // Index:    6.xyzw           Components:     4
//   float4 CSMSlice2_1;                // Index:    7.xyzw           Components:     4
//   float4 CSMSlice2_2;                // Index:    8.xyzw           Components:     4
//   float4 CSMSliceFade;               // Index:    9.xyzw           Components:     4 [unused]
//   float4 ShadowMapSize;              // Index:   10.xyzw           Components:     4
//   float4 LocalLightsShadowMapAtlasSize;// Index:   11.xyzw           Components:     4 [unused]
//   float4 SunColor;                   // Index:   12.xyzw           Components:     4 [unused]
//   float4 SunDirection;               // Index:   13.xyzw           Components:     4 [unused]
//   float DirectLightOcclusion;        // Index:   14.x              Components:     1 [unused]
//   int2 OmniAndSpotLightMask;         // Index:   14.yz             Components:     2 [unused]
//   int2 ExposureLightMask;            // Index:   15.xy             Components:     2 [unused]
//   int2 NumTiles;                     // Index:   15.zw             Components:     2 [unused]
//   int LightCount;                    // Index:   16.x              Components:     1 [unused]
//   int ParticlesSmallBufferFactor;    // Index:   16.y              Components:     1 [unused]
//
// }
//
// cbuffer CCloudShadowParameterProvider
// {
//
//   float CloudShadowsUVScale;         // Index:    0.x              Components:     1
//   float CloudShadowsUVOffsetX;       // Index:    0.y              Components:     1
//   float CloudShadowsUVOffsetY;       // Index:    0.z              Components:     1
//   float CloudShadowsMipScale;        // Index:    0.w              Components:     1
//   float CloudShadowsMipOffset;       // Index:    1.x              Components:     1
//   float CloudShadowsNearScale;       // Index:    1.y              Components:     1
//   float CloudShadowsFarScale;        // Index:    1.z              Components:     1
//   float CloudShadowsNearOffset;      // Index:    1.w              Components:     1
//   float CloudShadowsFarOffset;       // Index:    2.x              Components:     1
//   float CloudShadowsFadeScale;       // Index:    2.y              Components:     1
//   float CloudShadowsFadeOffset;      // Index:    2.z              Components:     1
//
// }
//
// cbuffer CAdaptiveShadowMapResolveParameterProvider
// {
//
//   float4x4 ASMLongRangeIndexTexMat;  // Index:    0 1 2 3          Components:    16
//   float4x4 ASMLongRangePreRenderIndexTexMat;// Index:    4 5 6 7          Components:    16 [unused]
//   float3 ASMLongRangeReceiverWarpVector;// Index:    8.xyz            Components:     3 [unused]
//   float ASMLongRangeDefaultShadowFactor;// Index:    8.w              Components:     1
//   float3 ASMLongRangePreRenderReceiverWarpVector;// Index:    9.xyz            Components:     3 [unused]
//   float ASMLongRangePreRenderDefaultShadowFactor;// Index:    9.w              Components:     1 [unused]
//   float3 ASMLongRangeBlockerSearchVector;// Index:   10.xyz            Components:     3 [unused]
//   float ASMTimeOfDayLerpFactor;      // Index:   10.w              Components:     1 [unused]
//   float3 ASMLongRangeLightDir;       // Index:   11.xyz            Components:     3
//   float3 ASMLongRangePreRenderLightDir;// Index:   12.xyz            Components:     3 [unused]
//   float3 ASMLongRangePreRenderBlockerSearchVector;// Index:   13.xyz            Components:     3 [unused]
//   bool IsSunLow;                     // Index:   13.w              Components:     1 [unused]
//
// }
//
// Resource bind info for ResolveTiles
// {
//
//   uint $Element;                     // Index:    0.x              Components:     1
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Wrap                              sampler      NA          NA    0        1
// ClampNoMip                        sampler      NA          NA    1        1
// PointClamp                        sampler      NA          NA    2        1
// PointClampNoMip                   sampler      NA          NA    3        1
// ColorBlackTransparentBorderPoint    sampler      NA          NA    4        1
// ShadowCmpSampler                sampler_c      NA          NA    5        1
// CloudShadowTexture                texture  float4          2d    0        1
// ASMLongRangeIndexTexture          texture  float4          2d    1        1
// ASMDepthAtlasTexture              texture  float4          2d    2        1
// ASMDepthExtentMapAtlasTexture     texture   float          2d    3        1
// CSMShadowMap                      texture  float4     2darray    4        1
// HalfGeometricEdgeTexture          texture   float          2d    5        1
// HalfLinearDepthTexture            texture   float          2d    6        1
// HalfStencilBuffer                 texture    uint          2d    7        1
// GBufferCacheTexture               texture  float4          2d    8        1
// HalfScreenEffectsHistory          texture  float4          2d    9        1
// MotionBuffer                      texture  float2          2d   10        1
// PrevMotionBuffer                  texture  float2          2d   11        1
// ResolveTiles                      texture  struct         r/o   12        1
// HalfScreenEffectsBuffer               UAV  float4          2d    0        1
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// CDeferredShadowsResolveParameterProvider    cbuffer      NA          NA    1        1
// CTileLightingBlendedParameterProvider    cbuffer      NA          NA    2        1
// CCloudShadowParameterProvider     cbuffer      NA          NA    3        1
// CAdaptiveShadowMapResolveParameterProvider    cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[54], immediateIndexed
dcl_constantbuffer cb1[48], dynamicIndexed
dcl_constantbuffer cb2[11], immediateIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_constantbuffer cb4[12], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2darray (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (uint,uint,uint,uint) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t11
dcl_resource_structured t12, 4
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.z
dcl_input vThreadIDInGroup.xy
dcl_temps 16
dcl_tgsm_structured g0, 16, 64
dcl_thread_group 8, 8, 1


dcl_resource_texture2d (float,float,float,float) t125
dcl_resource_texture1d (float,float,float,float) t120
ld_indexable(texture2d)(float,float,float,float) r12.xyzw, l(0, 0, 0, 0), t125.xyzw
ld_indexable(texture1d)(float,float,float,float) r15.xyzw, l(0, 0, 0, 0), t120.xyzw

iadd r0.x, vThreadGroupID.z, cb1[46].y
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.x, r0.x, l(0), t12.xxxx
and r1.x, r0.x, l(0x0000ffff)
ushr r1.y, r0.x, l(16)
imad r0.xy, r1.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
itof r1.zw, r0.xxxy
add r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
mul r2.xy, r1.zwzz, cb1[40].zwzz
mov r0.zw, l(0,0,0,0)

//HalfLinearDepthTexture. Linear, but in range 0-1:
ld_indexable(texture2d)(float,float,float,float) r2.z, r0.xyww, t6.yzxw

// Saving off screen xy for later:
mov r15.xy, r2.xyzw

// Convert depth to world scale using CameraDistances:
mul r15.z, r2.z, cb0[31].y

ishl r3.xy, vThreadIDInGroup.xyxx, l(1, 1, 0, 0)
imad r1.xy, r1.xyxx, l(16, 16, 0, 0), r3.xyxx
itof r1.xy, r1.xyxx
add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)

// Frustum corners:
mul r1.xy, r1.xyxx, cb0[40].zwzz
add r3.xyz, -cb1[34].xyzx, cb1[35].xyzx
mad r3.xyz, r1.xxxx, r3.xyzx, cb1[34].xyzx
add r4.xyz, -cb1[36].xyzx, cb1[37].xyzx
mad r4.xyz, r1.xxxx, r4.xyzx, cb1[36].xyzx
add r4.xyz, -r3.xyzx, r4.xyzx
mad r3.xyz, r1.yyyy, r4.xyzx, r3.xyzx
mul r4.xyz, r2.zzzz, r3.xyzx
dp3 r1.x, r4.xyzx, r4.xyzx

mad r3.xyz, r3.xyzx, r2.zzzz, cb0[43].xyzx

// Calculate world space adjustment magnitude:
add r12.w, r15.z, -r12.y
mul r12.w, r12.w, -r12.x
mul r12.w, r12.w, cb0[0].x // InvProjectionMatrix[0].x
//mul r12.w, r12.w, r15.w // debugging

// Matrices in this shader aren't working as expected (different orientation?).
// Use Frustum to convert to world space vector instead:
add r14.xyz, -cb1[34].xyzx, cb1[35].xyzx
dp3 r14.w, r14.xyzw, r14.xyzw
rsq r14.w, r14.w
mul r14.xyz, r14.xyzw, r14.wwww
mad r3.xyz, r12.wwww, r14.xyzw, r3.xyzw

dp2 r1.y, r4.xyxx, r4.xyxx
sqrt r1.xy, r1.xyxx
add r1.y, r1.y, -cb0[41].x
lt r2.w, l(0.000000), r1.y
mul r1.y, r1.y, cb0[41].y
lt r4.x, r1.y, l(1.000000)
mul r4.y, r1.y, r1.y
mad r1.y, -r1.y, l(2.000000), l(3.000000)
mul r1.y, r1.y, r4.y
mul r1.y, r1.y, cb0[41].z
movc r1.y, r4.x, r1.y, cb0[41].z
and r1.y, r1.y, r2.w
add r3.w, r1.y, r3.z
mad r1.y, -r1.x, l(0.050000), l(1.000000)
max r1.y, r1.y, l(0.000000)
mul r1.y, r1.y, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xyww, t8.xyzw
mad r5.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r6.xyz, r5.yyyy, cb0[13].xyzx
mad r5.xyw, cb0[12].xyxz, r5.xxxx, r6.xyxz
mad r5.xyz, cb0[14].xyzx, r5.zzzz, r5.xywx
ld_indexable(texture2d)(uint,uint,uint,uint) r0.z, r0.xyzw, t7.yzxw
and r0.z, r0.z, l(64)
mad r3.xyz, cb1[19].zzzz, r5.xyzx, r3.xywx
mad r0.w, cb3[0].w, r1.x, cb3[1].x
mad r5.xy, r3.xyxx, cb3[0].xxxx, cb3[0].yzyy
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r5.xyxx, t0.yzwx, s0, r0.w
mad_sat r2.w, r0.w, cb3[1].y, cb3[1].w
mad_sat r0.w, r0.w, cb3[1].z, cb3[2].x
mad_sat r5.x, r1.x, cb3[2].y, cb3[2].z
mul r5.y, r5.x, r5.x
mad r5.x, -r5.x, l(2.000000), l(3.000000)
mul r5.x, r5.x, r5.y
add r0.w, -r2.w, r0.w
mad r0.w, r5.x, r0.w, r2.w
mov r3.w, l(1.000000)
dp4 r5.y, r3.xyzw, cb2[6].xyzw
dp4 r5.z, r3.xyzw, cb2[7].xyzw
dp4 r5.w, r3.xyzw, cb2[8].xyzw
dp4 r6.y, r3.xyzw, cb2[3].xyzw
dp4 r6.z, r3.xyzw, cb2[4].xyzw
dp4 r6.w, r3.xyzw, cb2[5].xyzw
mov_sat r7.xyz, r6.yzwy
eq r7.xyz, r6.yzwy, r7.xyzx
and r2.w, r7.y, r7.x
and r2.w, r7.z, r2.w
lt r7.x, l(0.001000), r6.w
and r2.w, r2.w, r7.x
mov r6.x, l(1.000000)
mov r5.x, l(2.000000)
movc r7.xyzw, r2.wwww, r6.xyzw, r5.xyzw
dp4 r8.y, r3.xyzw, cb2[0].xyzw
dp4 r8.z, r3.xyzw, cb2[1].xyzw
dp4 r8.w, r3.xyzw, cb2[2].xyzw
mov_sat r9.xyz, r8.yzwy
eq r9.xyz, r8.yzwy, r9.xyzx
and r2.w, r9.y, r9.x
and r2.w, r9.z, r2.w
lt r5.x, l(0.001000), r8.w
and r2.w, r2.w, r5.x
mov r8.x, l(0)
movc r7.xyzw, r2.wwww, r8.yzxw, r7.yzxw
min r2.w, r7.z, cb0[53].w
eq r2.w, r2.w, cb0[53].w
lt r5.x, l(10.000000), r1.x
and r2.w, r2.w, r5.x
mad r9.xy, r7.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
add r9.xy, |r9.xyxx|, l(-0.800000, -0.800000, 0.000000, 0.000000)
mul_sat r9.xy, r9.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000)
add r9.xy, -r9.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
add r5.x, r7.w, l(-0.500000)
mad r5.x, -|r5.x|, l(2.000000), l(1.000000)
max r5.x, r5.x, l(0.000000)
min r5.x, r5.x, l(0.200000)
mul r5.x, r5.x, l(5.000000)
min r6.x, r9.y, r9.x
min r5.x, r5.x, r6.x
movc r2.w, r2.w, r5.x, l(1.000000)
lt r5.x, r7.z, cb0[53].w
if_nz r5.x
  eq r9.xyz, r7.zzzz, l(0.000000, 1.000000, 2.000000, 0.000000)
  and r9.yzw, r9.xxyz, l(0, 0x3f800000, 0x3f800000, 0x3f800000)
  dp3 r5.x, r9.yzwy, cb1[18].xyzx
  movc r6.x, r9.x, l(1.000000), l(5.000000)
  lt r1.x, r6.x, r1.x
  movc r8.xyz, r9.xxxx, r8.yzwy, r6.yzwy
  mad r8.xy, r8.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  add r8.xy, |r8.xyxx|, l(-0.800000, -0.800000, 0.000000, 0.000000)
  mul_sat r8.xy, r8.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000)
  add r8.xy, -r8.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
  add r6.x, r8.z, l(-0.500000)
  mad r6.x, -|r6.x|, l(2.000000), l(1.000000)
  max r6.x, r6.x, l(0.000000)
  min r6.x, r6.x, l(0.200000)
  mul r6.x, r6.x, l(5.000000)
  min r8.x, r8.y, r8.x
  min r6.x, r6.x, r8.x
  min r6.x, r5.x, r6.x
  movc r1.x, r1.x, r6.x, r5.x
  utof r8.xy, r0.xyxx
  mul r8.xy, r8.xyxx, l(0.0671105608, 0.00583714992, 0.000000, 0.000000)
  add r5.x, r8.y, r8.x
  frc r5.x, r5.x
  mul r5.x, r5.x, l(52.982918)
  frc r5.x, r5.x
  lt r1.x, r1.x, r5.x
  movc r5.yzw, r9.xxxx, r6.yyzw, r5.yyzw
  add r5.x, r7.z, l(1.000000)
  movc r7.xyzw, r1.xxxx, r5.yzxw, r7.xyzw
  mov r5.xyz, r7.xywx
else
  mov r5.xyz, r7.xywx
endif
add r6.xyz, r3.xyzx, -cb0[43].xyzx
dp4 r8.x, r3.xyzw, cb4[0].xyzw
dp4 r8.y, r3.xyzw, cb4[1].xyzw
dp4 r1.x, r3.xyzw, cb4[2].xyzw
sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r8.xyxx, t1.xyzw, s4, l(0.000000)
ne r5.w, r3.w, l(0.000000)
if_nz r5.w
  frc r5.w, |r3.w|
  add r5.w, r5.w, r5.w
  round_ni r3.w, |r3.w|
  mul r9.xyzw, r8.xyxy, r3.wwww
  mad r9.xyzw, r9.xyzw, l(0.000390625006, 0.000558035739, 0.000390625006, 0.000558035739), r3.xyxy
  add r3.x, r1.x, r3.z
  max r3.x, r3.x, l(0.000500)
  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.y, r9.zwzz, t2.xxxx, s5, r3.x
  add r10.xyzw, r9.zwzw, l(0.000703125028, 0.000000, -0.000703125028, 0.000000)
  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r10.xyxx, t2.xxxx, s5, r3.x
  mul r3.z, r3.z, l(0.110858)
  mad r3.y, r3.y, l(0.120892), r3.z
  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r10.zwzz, t2.xxxx, s5, r3.x
  mad r3.y, r3.z, l(0.110858), r3.y
  add r10.xyzw, r9.zwzw, l(0.000000, 0.00100446434, 0.000000, -0.00100446434)
  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r10.xyxx, t2.xxxx, s5, r3.x
  mad r3.y, r3.z, l(0.110858), r3.y
  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r10.zwzz, t2.xxxx, s5, r3.x
  mad r3.y, r3.z, l(0.110858), r3.y
  add r10.xyzw, r9.zwzw, l(0.000492187508, 0.000703124970, -0.000492187508, 0.000703124970)
  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r10.xyxx, t2.xxxx, s5, r3.x
  mad r3.y, r3.z, l(0.111050), r3.y
  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r10.zwzz, t2.xxxx, s5, r3.x
  mad r3.y, r3.z, l(0.111050), r3.y
  add r9.xyzw, r9.xyzw, l(-0.000492187508, -0.000703124970, 0.000492187508, -0.000703124970)
  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r9.xyxx, t2.xxxx, s5, r3.x
  mad r3.y, r3.z, l(0.111050), r3.y
  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.x, r9.zwzz, t2.xxxx, s5, r3.x
  mad r3.x, r3.x, l(0.111050), r3.y
else
  mov r5.w, l(0)
  mov r3.x, cb4[8].w
endif
dp3 r3.y, r6.xyzx, cb4[11].xyzx
mad r3.yzw, -r3.yyyy, cb4[11].xxyz, r6.xxyz
dp3 r3.y, r3.yzwy, r3.yzwy
sqrt r3.y, r3.y
mad_sat r3.y, r3.y, l(-0.020000), l(8.800000)
lt r3.z, l(0.000000), r5.w
if_nz r3.z
  sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r8.xyxx, t1.xyzw, s4, l(1.000000)
  frc r3.z, |r6.w|
  add r3.z, r3.z, r3.z
  ne r3.z, r5.w, r3.z
  if_nz r3.z
    round_ni r3.z, |r6.w|
    mul r9.xyzw, r8.xyxy, r3.zzzz
    mad r9.xyzw, r9.xyzw, l(0.000390625006, 0.000558035739, 0.000390625006, 0.000558035739), r6.xyxy
    add r3.z, r1.x, r6.z
    max r3.z, r3.z, l(0.000500)
    sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r9.zwzz, t2.xxxx, s5, r3.z
    add r6.xyzw, r9.zwzw, l(0.000703125028, 0.000000, -0.000703125028, 0.000000)
    sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s5, r3.z
    mul r6.x, r6.x, l(0.110858)
    mad r3.w, r3.w, l(0.120892), r6.x
    sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.zwzz, t2.xxxx, s5, r3.z
    mad r3.w, r6.x, l(0.110858), r3.w
    add r6.xyzw, r9.zwzw, l(0.000000, 0.00100446434, 0.000000, -0.00100446434)
    sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s5, r3.z
    mad r3.w, r6.x, l(0.110858), r3.w
    sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.zwzz, t2.xxxx, s5, r3.z
    mad r3.w, r6.x, l(0.110858), r3.w
    add r6.xyzw, r9.zwzw, l(0.000492187508, 0.000703124970, -0.000492187508, 0.000703124970)
    sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s5, r3.z
    mad r3.w, r6.x, l(0.111050), r3.w
    sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.zwzz, t2.xxxx, s5, r3.z
    mad r3.w, r6.x, l(0.111050), r3.w
    add r6.xyzw, r9.xyzw, l(-0.000492187508, -0.000703124970, 0.000492187508, -0.000703124970)
    sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s5, r3.z
    mad r3.w, r6.x, l(0.111050), r3.w
    sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.zwzz, t2.xxxx, s5, r3.z
    mad r3.z, r3.z, l(0.111050), r3.w
  else
    mov r3.z, cb4[8].w
  endif
  add r3.z, -r3.x, r3.z
  mad r3.x, r5.w, r3.z, r3.x
endif
add r3.x, r3.x, l(-1.000000)
mad r3.x, r3.y, r3.x, l(1.000000)
eq r3.y, r2.w, l(1.000000)
add r3.z, -r3.x, l(1.000000)
mad r3.z, cb1[20].z, r3.z, r3.x
movc r3.x, r3.y, r3.z, r3.x
lt r3.y, l(0.000000), r2.w
if_nz r3.y
  ftou r3.y, r7.z
  utof r3.zw, r0.xxxy
  mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.0671105608, 0.00583714992)
  add r3.z, r3.w, r3.z
  frc r3.z, r3.z
  mul r3.z, r3.z, l(52.982918)
  frc r3.z, r3.z
  sincos r6.x, r9.x, r3.z
  mov r10.x, -r6.x
  mul r3.zw, cb1[19].xxxx, cb1[r3.y + 15].xxxy
  max r3.zw, r3.zzzw, cb2[10].zzzw
  mul r11.xyzw, r3.zwzw, l(-0.978698, -0.0884120986, -0.841121, 0.521165)
  mov r10.y, r9.x
  dp2 r9.x, r10.yxyy, r11.xyxx
  mov r10.z, r6.x
  dp2 r9.y, r10.zyzz, r11.xyxx
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r6.y, r7.xyzx, t4.yxzw, s2, l(0.000000)
  lt r5.w, r6.y, r5.z
  mov r6.x, l(1.000000)
  and r6.xy, r5.wwww, r6.xyxx
  dp2 r9.x, r10.yxyy, r11.zwzz
  dp2 r9.y, r10.zyzz, r11.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r6.z, r7.xyzx, t4.yzxw, s2, l(0.000000)
  lt r6.w, r6.z, r5.z
  add r9.y, r6.z, r6.y
  movc r9.x, r5.w, l(2.000000), l(1.000000)
  movc r6.xy, r6.wwww, r9.xyxx, r6.xyxx
  mul r9.xyzw, r3.zwzw, l(-0.717460, -0.503220, -0.702933, 0.903134)
  dp2 r11.x, r10.yxyy, r9.xyxx
  dp2 r11.y, r10.zyzz, r9.xyxx
  add r7.xy, r5.xyxx, r11.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  dp2 r9.x, r10.yxyy, r9.zwzz
  dp2 r9.y, r10.zyzz, r9.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  mul r9.xyzw, r3.zwzw, l(-0.663198, 0.154820, -0.495102, -0.232887)
  dp2 r11.x, r10.yxyy, r9.xyxx
  dp2 r11.y, r10.zyzz, r9.xyxx
  add r7.xy, r5.xyxx, r11.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  dp2 r9.x, r10.yxyy, r9.zwzz
  dp2 r9.y, r10.zyzz, r9.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  mul r9.xyzw, r3.zwzw, l(-0.364238, -0.961791, -0.345866, -0.564379)
  dp2 r11.x, r10.yxyy, r9.xyxx
  dp2 r11.y, r10.zyzz, r9.xyxx
  add r7.xy, r5.xyxx, r11.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  dp2 r9.x, r10.yxyy, r9.zwzz
  dp2 r9.y, r10.zyzz, r9.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  mul r9.xyzw, r3.zwzw, l(-0.325663, 0.640370, -0.182714, 0.321329)
  dp2 r11.x, r10.yxyy, r9.xyxx
  dp2 r11.y, r10.zyzz, r9.xyxx
  add r7.xy, r5.xyxx, r11.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  dp2 r9.x, r10.yxyy, r9.zwzz
  dp2 r9.y, r10.zyzz, r9.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  mul r9.xyzw, r3.zwzw, l(-0.142613, -0.0227362998, -0.056429, -0.367290)
  dp2 r11.x, r10.yxyy, r9.xyxx
  dp2 r11.y, r10.zyzz, r9.xyxx
  add r7.xy, r5.xyxx, r11.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  dp2 r9.x, r10.yxyy, r9.zwzz
  dp2 r9.y, r10.zyzz, r9.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  mul r9.xyzw, r3.zwzw, l(-0.018586, 0.918882, 0.038179, -0.728996)
  dp2 r11.x, r10.yxyy, r9.xyxx
  dp2 r11.y, r10.zyzz, r9.xyxx
  add r7.xy, r5.xyxx, r11.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  dp2 r9.x, r10.yxyy, r9.zwzz
  dp2 r9.y, r10.zyzz, r9.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  mul r9.xyzw, r3.zwzw, l(0.165990, 0.093112, 0.253639, 0.719535)
  dp2 r11.x, r10.yxyy, r9.xyxx
  dp2 r11.y, r10.zyzz, r9.xyxx
  add r7.xy, r5.xyxx, r11.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  dp2 r9.x, r10.yxyy, r9.zwzz
  dp2 r9.y, r10.zyzz, r9.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  mul r9.xyzw, r3.zwzw, l(0.369549, -0.655019, 0.423627, 0.429975)
  dp2 r11.x, r10.yxyy, r9.xyxx
  dp2 r11.y, r10.zyzz, r9.xyxx
  add r7.xy, r5.xyxx, r11.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  dp2 r9.x, r10.yxyy, r9.zwzz
  dp2 r9.y, r10.zyzz, r9.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  mul r9.xyzw, r3.zwzw, l(0.530747, -0.364971, 0.566027, -0.940489)
  dp2 r11.x, r10.yxyy, r9.xyxx
  dp2 r11.y, r10.zyzz, r9.xyxx
  add r7.xy, r5.xyxx, r11.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  dp2 r9.x, r10.yxyy, r9.zwzz
  dp2 r9.y, r10.zyzz, r9.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  mul r9.xyzw, r3.zwzw, l(0.639332, 0.0284126997, 0.652089, 0.669668)
  dp2 r11.x, r10.yxyy, r9.xyxx
  dp2 r11.y, r10.zyzz, r9.xyxx
  add r7.xy, r5.xyxx, r11.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  dp2 r9.x, r10.yxyy, r9.zwzz
  dp2 r9.y, r10.zyzz, r9.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  mul r9.xyzw, r3.zwzw, l(0.773797, 0.345012, 0.968871, 0.840449)
  dp2 r11.x, r10.yxyy, r9.xyxx
  dp2 r11.y, r10.zyzz, r9.xyxx
  add r7.xy, r5.xyxx, r11.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  dp2 r9.x, r10.yxyy, r9.zwzz
  dp2 r9.y, r10.zyzz, r9.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.yzwx, s2, l(0.000000)
  lt r6.z, r5.w, r5.z
  add r9.y, r5.w, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r6.xy, r6.zzzz, r9.xyxx, r6.xyxx
  mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.991882, -0.657338)
  dp2 r9.x, r10.yxyy, r3.zwzz
  dp2 r9.y, r10.zyzz, r3.zwzz
  add r7.xy, r5.xyxx, r9.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r3.z, r7.xyzx, t4.yzxw, s2, l(0.000000)
  lt r3.w, r3.z, r5.z
  add r9.y, r3.z, r6.y
  add r9.x, r6.x, l(1.000000)
  movc r3.zw, r3.wwww, r9.xxxy, r6.xxxy
  lt r5.w, l(0.000000), r3.z
  div r3.z, r3.w, r3.z
  movc r3.z, r5.w, r3.z, l(1.000000)
  mad r3.w, r5.z, cb1[r3.y + 15].z, cb1[r3.y + 15].w
  mad r3.z, r3.z, cb1[r3.y + 15].z, cb1[r3.y + 15].w
  add r3.w, -r3.z, r3.w
  rcp r3.z, r3.z
  mul r3.z, r3.z, r3.w
  mul r3.z, r3.z, cb1[19].y
  div_sat r3.z, r3.z, cb1[19].x
  max r3.w, r3.z, l(0.400000)
  movc r6.y, r0.z, r3.w, r3.z
  mul r3.z, r6.y, cb1[19].x
  mul r3.yz, r3.zzzz, cb1[r3.y + 15].xxyx
  lt r8.zw, cb2[10].zzzw, r3.yyyz
  or r3.w, r8.w, r8.z
  if_nz r3.w
    max r3.yz, r3.yyzy, cb2[10].zzwz
    mul r9.xyzw, r3.yzyz, l(-0.978698, -0.0884120986, -0.841121, 0.521165)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r3.w, r7.xyzx, t4.xxxx, s5, r5.z
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r9.xyzw, r3.yzyz, l(-0.717460, -0.503220, -0.702933, 0.903134)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r9.xyzw, r3.yzyz, l(-0.663198, 0.154820, -0.495102, -0.232887)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r9.xyzw, r3.yzyz, l(-0.364238, -0.961791, -0.345866, -0.564379)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r9.xyzw, r3.yzyz, l(-0.325663, 0.640370, -0.182714, 0.321329)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r9.xyzw, r3.yzyz, l(-0.142613, -0.0227362998, -0.056429, -0.367290)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r9.xyzw, r3.yzyz, l(-0.018586, 0.918882, 0.038179, -0.728996)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r9.xyzw, r3.yzyz, l(0.165990, 0.093112, 0.253639, 0.719535)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r9.xyzw, r3.yzyz, l(0.369549, -0.655019, 0.423627, 0.429975)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r9.xyzw, r3.yzyz, l(0.530747, -0.364971, 0.566027, -0.940489)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r9.xyzw, r3.yzyz, l(0.639332, 0.0284126997, 0.652089, 0.669668)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r9.xyzw, r3.yzyz, l(0.773797, 0.345012, 0.968871, 0.840449)
    dp2 r11.x, r10.yxyy, r9.xyxx
    dp2 r11.y, r10.zyzz, r9.xyxx
    add r7.xy, r5.xyxx, r11.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    dp2 r9.x, r10.yxyy, r9.zwzz
    dp2 r9.y, r10.zyzz, r9.zwzz
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.w, r3.w, r5.w
    mul r3.yz, r3.yyzy, l(0.000000, 0.991882, -0.657338, 0.000000)
    dp2 r9.x, r10.yxyy, r3.yzyy
    dp2 r9.y, r10.zyzz, r3.yzyy
    add r7.xy, r5.xyxx, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r3.y, r7.xyzx, t4.xxxx, s5, r5.z
    add r3.y, r3.y, r3.w
    mul r3.y, r3.y, l(0.040000)
  else
    mad r3.zw, r5.xxxy, cb2[10].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
    round_ni r5.xy, r3.zwzz
    add r3.zw, r3.zzzw, -r5.xxxy
    mad r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.250000, 0.250000)
    add r8.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    rcp r8.zw, r8.zzzw
    rcp r9.xy, r3.zwzz
    mad r10.zw, r8.zzzw, l(0.000000, 0.000000, 0.125000, 0.125000), l(0.000000, 0.000000, -1.000000, -1.000000)
    mad r10.xy, -r9.xyxx, l(0.125000, 0.125000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
    mul r9.xyzw, r10.zwxw, cb2[10].zwzw
    mad r7.xy, r5.xyxx, cb2[10].zwzz, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r7.xyzx, t4.xxxx, s5, r5.z
    mad r7.xy, r5.xyxx, cb2[10].zwzz, r9.zwzz
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r6.w, r7.xyzx, t4.xxxx, s5, r5.z
    mul r9.xyzw, r10.zyxy, cb2[10].zwzw
    mad r7.xy, r5.xyxx, cb2[10].zwzz, r9.xyxx
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r7.w, r7.xyzx, t4.xxxx, s5, r5.z
    mad r7.xy, r5.xyxx, cb2[10].zwzz, r9.zwzz
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.x, r7.xyzx, t4.xxxx, s5, r5.z
    add r5.y, -r5.w, r6.w
    mad r5.y, r3.z, r5.y, r5.w
    add r5.x, -r7.w, r5.x
    mad r3.z, r3.z, r5.x, r7.w
    add r3.z, -r5.y, r3.z
    mad r3.y, r3.w, r3.z, r5.y
  endif
  sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r8.xyxx, t1.xyzw, s4, l(1.000000)
  round_ni r3.z, |r5.w|
  mul r3.zw, r8.xxxy, r3.zzzz
  mad r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.000390625006, 0.000558035739), r5.xxxy
  add r1.x, r1.x, r5.z
  max r1.x, r1.x, l(0.000500)
  mad r7.xyzw, r3.zwzw, l(10.000000, 7.000000, 10.000000, 7.000000), l(-0.00195312500, -0.00195312500, -0.00195312500, -0.00195312500)
  round_ni r7.xyzw, r7.xyzw
  mad r7.xyzw, r7.xyzw, l(0.100000, 0.142857149, 0.100000, 0.142857149), l(0.00117187505, 0.00167410716, 0.0988281220, 0.141183034)
  ne r5.x, r5.w, l(0.000000)
  if_nz r5.x
    add r5.xyzw, r3.zwzw, l(-0.00234375009, -0.00334821455, 0.00234375009, 0.000000)
    max r5.xyzw, r7.xyxy, r5.xyzw
    min r5.xyzw, r7.zwzw, r5.xyzw
    sample_l_indexable(texture2d)(float,float,float,float) r5.y, r5.xyxx, t3.yxzw, s1, l(0.000000)
    lt r6.w, r5.y, r1.x
    mov r5.x, l(1.000000)
    and r5.xy, r5.xyxx, r6.wwww
    sample_l_indexable(texture2d)(float,float,float,float) r5.z, r5.zwzz, t3.yzxw, s1, l(0.000000)
    lt r5.w, r5.z, r1.x
    add r8.y, r5.z, r5.y
    movc r8.x, r6.w, l(2.000000), l(1.000000)
    movc r5.xy, r5.wwww, r8.xyxx, r5.xyxx
    add r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.000000, 0.00334821455)
    max r3.zw, r7.xxxy, r3.zzzw
    min r3.zw, r7.zzzw, r3.zzzw
    sample_l_indexable(texture2d)(float,float,float,float) r3.z, r3.zwzz, t3.yzxw, s1, l(0.000000)
    lt r3.w, r3.z, r1.x
    add r7.y, r3.z, r5.y
    add r7.x, r5.x, l(1.000000)
    movc r3.zw, r3.wwww, r7.xxxy, r5.xxxy
  else
    mov r3.zw, l(0,0,0,0)
  endif
  lt r5.x, l(0.000000), r3.z
  rcp r3.z, r3.z
  mul r3.z, r3.z, r3.w
  movc r3.z, r5.x, -r3.z, l(-1.000000)
  add_sat r1.x, r1.x, r3.z
  lt r3.z, l(0.000000), cb4[8].w
  mul r1.x, r1.x, l(40.000000)
  min r1.x, r1.x, l(1.000000)
  add r3.w, r3.y, l(-1.000000)
  mad r3.w, r2.w, r3.w, l(1.000000)
  min r3.w, r3.w, r3.x
  add r1.x, -r1.x, l(1.000000)
  mul r1.x, r2.w, r1.x
  and r1.x, r1.x, r3.z
  add r2.w, -r3.w, r3.y
  mad r3.x, r1.x, r2.w, r3.w
else
  mov r6.y, l(0)
endif
min r6.z, r0.w, r3.x
ne r0.w, r6.z, l(0.000000)
if_nz r0.w
  mul r0.w, r2.z, cb0[31].y
  mad r3.x, r2.x, l(2.000000), cb0[8].z
  mad r3.y, r2.y, l(-2.000000), cb0[9].z
  add r2.zw, r3.xxxy, l(0.000000, 0.000000, -1.000000, 1.000000)
  mul r3.xy, r2.zwzz, cb1[38].xyxx
  mov r3.zw, l(0,0,-1.000000,1.000000)
  mul r3.xyz, r0.wwww, r3.xyzx
  mad r4.xyzw, r4.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
  lt r1.x, r4.w, l(0.000000)
  dp3 r2.z, r3.xyzx, r4.xyzx
  lt r2.z, l(0.000000), r2.z
  and r2.z, r1.x, r2.z
  movc r4.xyz, r2.zzzz, -r4.xyzx, r4.xyzx
  dp3 r2.z, cb1[41].xyzx, r4.xyzx
  lt r2.z, r2.z, l(0.000000)
  and r1.x, r1.x, r2.z
  movc r1.x, r1.x, cb1[46].w, cb1[46].z
  movc r1.x, r0.z, cb1[47].x, r1.x
  mul r0.w, r0.w, r1.x
  mad r3.xyz, r0.wwww, r4.xyzx, r3.xyzx
  rcp r0.w, r3.z
  dp4 r4.x, r3.xyzw, cb1[21].xyzw
  dp4 r4.y, r3.xyzw, cb1[22].xyzw
  mul r4.xy, -r0.wwww, r4.xyxx
  mad r3.xyz, -r3.zzzz, cb1[41].xyzx, r3.xyzx
  rcp r1.x, r3.z
  mov r3.w, l(1.000000)
  dp4 r5.x, r3.xyzw, cb1[21].xyzw
  dp4 r5.y, r3.xyzw, cb1[22].xyzw
  mad r3.xy, r5.xyxx, -r1.xxxx, -r4.xyxx
  add r1.x, r0.w, -r1.x
  mul r3.z, r1.x, cb0[31].y
  mul r2.zw, r3.xxxy, cb1[45].xxxy
  mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 8.000000, 8.000000)
  dp2 r1.x, r2.zwzz, r2.zwzz
  rsq r1.x, r1.x
  mul r3.xyz, r1.xxxx, r3.xyzx
  mul r4.z, -r0.w, cb0[31].y
  xor r0.w, r0.y, r0.x
  and r0.w, r0.w, l(1)
  movc r0.w, r0.w, cb1[44].x, cb1[44].y
  mad r4.xyz, r0.wwww, r3.xyzx, r4.xyzx
  movc r0.w, r0.z, l(1.000000), cb1[41].w
  mul r1.x, r0.w, r4.z
  mul r3.w, r0.w, r3.z
  mov r5.xy, r4.xyxx
  mov r5.z, r1.x
  mov r2.zw, l(0,0,0,0)
  loop
    ige r3.z, r2.w, l(8)
    breakc_nz r3.z
	//HalfLinearDepthTexture. This time used for the 'blue' shadows from rocks, etc (ray traced?):
    sample_l_indexable(texture2d)(float,float,float,float) r3.z, r5.xyxx, t6.yzxw, s3, l(0.000000)
    mad r7.x, -r3.z, r5.z, r0.w
    mov r7.yz, r5.xxyx
    mov_sat r8.xyz, r7.yzxy
    eq r8.xyz, r7.yzxy, r8.xyzx
    and r3.z, r8.y, r8.x
    and r3.z, r8.z, r3.z
    if_nz r3.z
      break
    endif
    mov r7.w, r5.z
    add r5.xyz, r3.xywx, r7.yzwy
    add r2.z, r2.z, l(0.125000)
    iadd r2.w, r2.w, l(1)
  endloop
  sample_l_indexable(texture2d)(float,float,float,float) r0.w, r5.xyxx, t8.xyzw, s3, l(0.000000)
  mad r0.w, r0.w, l(2.000000), l(-1.000000)
  lt r0.w, r0.w, l(0.000000)
  max r1.x, r2.z, cb1[47].y
  movc r0.w, r0.w, r1.x, r2.z
  mul r0.w, r0.w, r0.w
  mul r1.x, r0.w, r0.w
  mul r1.x, r0.w, r1.x
  movc r6.x, r0.z, r1.x, r0.w
else
  mov r6.x, l(0)
endif
imad r0.z, vThreadIDInGroup.y, l(8), vThreadIDInGroup.x
store_structured g0.xyz, r0.z, l(0), r6.xyzx
sync_g_t
iadd r3.xyzw, vThreadIDInGroup.xyxy, l(-1, -1, 0, -1)
imax r3.xyw, r3.xyxw, l(0, 0, 0, 0)
imad r0.w, r3.y, l(8), r3.x
ld_structured r4.xyz, r0.w, l(0), g0.xyzx
mul r5.xyz, r4.xyzx, cb1[26].wwww
mad r5.xyz, cb1[25].wwww, r6.xyzx, r5.xyzx
min r7.xyz, r4.xyzx, r6.xyzx
max r4.xyz, r4.xyzx, r6.xyzx
imad r0.w, r3.w, l(8), r3.z
ld_structured r3.xyz, r0.w, l(0), g0.xyzx
mad r5.xyz, cb1[27].wwww, r3.xyzx, r5.xyzx
min r7.xyz, r3.xyzx, r7.xyzx
max r3.xyz, r3.xyzx, r4.xyzx
iadd r4.xyzw, vThreadIDInGroup.xyxy, l(1, -1, -1, 0)
imax r2.zw, r4.yyyz, l(0, 0, 0, 0)
imin r1.x, r4.x, l(7)
imad r1.x, r2.z, l(8), r1.x
ld_structured r4.xyz, r1.x, l(0), g0.xyzx
mad r5.xyz, cb1[28].wwww, r4.xyzx, r5.xyzx
min r7.xyz, r4.xyzx, r7.xyzx
max r3.xyz, r3.xyzx, r4.xyzx
imad r1.x, r4.w, l(8), r2.w
ld_structured r4.xyz, r1.x, l(0), g0.xyzx
mad r5.xyz, cb1[29].wwww, r4.xyzx, r5.xyzx
min r7.xyz, r4.xyzx, r7.xyzx
max r3.xyz, r3.xyzx, r4.xyzx
iadd r4.xyzw, vThreadIDInGroup.xyxy, l(1, 0, -1, 1)
imin r2.zw, r4.xxxw, l(0, 0, 7, 7)
imad r2.z, r4.y, l(8), r2.z
ld_structured r4.xyw, r2.z, l(0), g0.xyxz
mad r5.xyz, cb1[30].wwww, r4.xywx, r5.xyzx
min r7.xyz, r4.xywx, r7.xyzx
max r3.xyz, r3.xyzx, r4.xywx
imax r3.w, r4.z, l(0)
imad r2.w, r2.w, l(8), r3.w
ld_structured r4.xyz, r2.w, l(0), g0.xyzx
mad r5.xyz, cb1[31].wwww, r4.xyzx, r5.xyzx
min r7.xyz, r4.xyzx, r7.xyzx
max r3.xyz, r3.xyzx, r4.xyzx
iadd r4.xyzw, vThreadIDInGroup.xyxy, l(0, 1, 1, 1)
imin r4.yzw, r4.yyzw, l(0, 7, 7, 7)
imad r2.w, r4.y, l(8), r4.x
ld_structured r8.xyz, r2.w, l(0), g0.xyzx
mad r5.xyz, cb1[32].wwww, r8.xyzx, r5.xyzx
min r7.xyz, r7.xyzx, r8.xyzx
max r3.xyz, r3.xyzx, r8.xyzx
imad r3.w, r4.w, l(8), r4.z
ld_structured r4.xyz, r3.w, l(0), g0.xyzx
mad r5.xyz, cb1[33].wwww, r4.xyzx, r5.xyzx
min r7.xyz, r4.xyzx, r7.xyzx
max r3.xyz, r3.xyzx, r4.xyzx
sample_l_indexable(texture2d)(float,float,float,float) r4.xy, r2.xyxx, t10.xyzw, s3, l(0.000000)
add r4.xyzw, r4.xxyy, l(-0.498039216, -0.498039216, -0.498039216, -0.498039216)
add r8.xy, r4.ywyy, r4.ywyy
lt r9.xyzw, r4.xyzw, l(-0.334370166, 0.334370166, -0.334370166, 0.334370166)
mad r10.xyzw, r4.yyyw, l(1.#INF0000, 4.830047, 4.830047, 4.830047), l(0.500000, 1.41502368, -1.41502368, 1.41502368)
mov_sat r10.x, r10.x
mad r3.w, r10.x, l(2.000000), l(-1.000000)
mul r4.xy, r8.xyxx, r8.xyxx
mul r4.xy, r4.xyxx, r4.xyxx
mul r3.w, r3.w, r4.x
movc r3.w, r9.y, r3.w, r10.z
movc r3.w, r9.x, r10.y, r3.w
mul r8.x, r3.w, l(0.100000)
mad r4.xz, r4.wwww, l(1.#INF0000, 0.000000, 4.830047, 0.000000), l(0.500000, 0.000000, -1.41502368, 0.000000)
mov_sat r4.x, r4.x
mad r3.w, r4.x, l(2.000000), l(-1.000000)
mul r3.w, r3.w, r4.y
movc r3.w, r9.w, r3.w, r4.z
movc r3.w, r9.z, r10.w, r3.w
mul r8.y, r3.w, l(0.100000)
mad r1.zw, r1.zzzw, cb1[40].zzzw, r8.xxxy
mov_sat r4.xy, r1.zwzz
ne r4.xy, r1.zwzz, r4.xyxx
or r3.w, r4.y, r4.x

// HalfScreenEffectsHistory - coordinates being damaged by motion buffer
//mov r15.xyzw, r1.zwxx // debugging
sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r1.zwzz, t9.xyzw, s1, l(0.000000)

// Switch to same coords used to sample depth buffer instead. Reduces
// flickering on 'blue' shadows, but some of the 'blue' shadow borders become
// noticeably pixelated:
//sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r15.xyxx, t9.xyzw, s1, l(0.000000)

movc r4.xyz, r3.wwww, r5.xyzx, r4.xyzx
sample_l_indexable(texture2d)(float,float,float,float) r1.zw, r1.zwzz, t11.zwxy, s1, l(0.000000)
movc r9.xyzw, r3.wwww, r8.xxyy, r1.zzww
add r9.xyzw, r9.xyzw, l(-0.498039216, -0.498039216, -0.498039216, -0.498039216)
add r1.zw, r9.yyyw, r9.yyyw
lt r10.xyzw, r9.xyzw, l(-0.334370166, 0.334370166, -0.334370166, 0.334370166)
mad r11.xyzw, r9.yyyw, l(1.#INF0000, 4.830047, 4.830047, 4.830047), l(0.500000, 1.41502368, -1.41502368, 1.41502368)
mov_sat r11.x, r11.x
mad r3.w, r11.x, l(2.000000), l(-1.000000)
mul r1.zw, r1.zzzw, r1.zzzw
mul r1.zw, r1.zzzw, r1.zzzw
mul r1.z, r3.w, r1.z
movc r1.z, r10.y, r1.z, r11.z
movc r1.z, r10.x, r11.y, r1.z
mul r9.x, r1.z, cb0[40].x
mad r8.zw, r9.wwww, l(0.000000, 0.000000, 1.#INF0000, 4.830047), l(0.000000, 0.000000, 0.500000, -1.41502368)
mov_sat r8.z, r8.z
mad r1.z, r8.z, l(2.000000), l(-1.000000)
mul r1.z, r1.z, r1.w
movc r1.z, r10.w, r1.z, r8.w
movc r1.z, r10.z, r11.w, r1.z
mul r9.y, r1.z, cb0[40].y
mul r1.zw, r8.xxxy, cb0[40].xxxy
dp2 r3.w, r1.zwzz, r1.zwzz
sqrt r3.w, r3.w
dp2 r1.z, |r1.zwzz|, l(2.000000, 2.000000, 0.000000, 0.000000)
min r1.z, r1.z, l(1.000000)
mul r8.xy, r9.xyxx, l(0.100000, 0.100000, 0.000000, 0.000000)
dp2 r1.w, r8.xyxx, r8.xyxx
sqrt r1.w, r1.w
mul r8.xyz, r4.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
add r9.xyz, -r7.xyzx, r3.xyzx
mad r10.xyz, r9.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
rcp r10.xyz, r10.xyzx
mad_sat r10.xyz, r1.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000), r10.xyzx
mul r1.w, r1.w, l(0.500000)
add r4.w, r3.w, r3.w
max r1.w, r1.w, r4.w
add r4.w, -r1.w, r3.w
max r1.w, r1.w, r3.w
max r1.w, r1.w, l(25.000000)
div r1.w, |r4.w|, r1.w
mad r3.w, r1.z, l(0.125000), l(0.125000)
mul r11.xyz, r3.wwww, r8.xyzx
mul r1.z, r1.z, r3.w
mad r1.z, r1.z, l(4.000000), l(1.000000)
mul r11.xyz, r1.zzzz, r11.xyzx
mad r8.xyz, r9.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r8.xyzx
div_sat r8.xyz, r11.xyzx, r8.xyzx
min r8.xyz, r8.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
max r8.xyz, r1.wwww, r8.xyzx
max r8.xyz, r8.xyzx, cb1[44].zzzz
max r8.w, r1.y, r8.z
sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t5.yxzw, s1, l(0.000000)
mul_sat r1.y, r1.y, l(24.000000)
max r10.w, r1.y, r10.z
add r1.yzw, -r5.xxyz, r6.xxyz
mad r1.yzw, r10.xxyw, r1.yyzw, r5.xxyz
max r4.xyz, r7.xyzx, r4.xyzx
min r3.xyz, r3.xyzx, r4.xyzx
add r1.yzw, r1.yyzw, -r3.xxyz
mad r3.xyz, r8.xywx, r1.yzwy, r3.xyzx
store_structured g0.x, r0.z, l(0), r3.z
sync_g_t
ieq r4.xyzw, vThreadIDInGroup.xyxy, l(0, 0, 7, 7)
or r1.yz, r4.zzwz, r4.xxyx
movc r1.yz, r1.yyzy, l(0,1.000000,1.000000,0), l(0,0.500000,0.500000,0)
ld_structured r0.z, r2.z, l(0), g0.xxxx
ld_structured r1.x, r1.x, l(0), g0.xxxx
add r0.z, r0.z, -r1.x
ld_structured r1.x, r2.w, l(0), g0.xxxx
ld_structured r0.w, r0.w, l(0), g0.xxxx
add r0.w, -r0.w, r1.x
mul r0.zw, r1.yyyz, r0.zzzw
max r3.w, |r0.w|, |r0.z|
store_uav_typed u0.xyzw, r0.xyyy, r3.xyzw
//store_uav_typed u0.xyzw, r0.xyyy, r15.xyzw // debug
ret
// Approximately 928 instruction slots used

///////////////////////////////// HLSL Code /////////////////////////////////
// // ---- Created with 3Dmigoto v1.3.16 on Sun Feb 02 21:14:35 2020
// groupshared struct { float val[4]; } g0[64];
//
// cbuffer CViewportShaderParameterProvider : register(b0)
// {
//   float4x4 InvProjectionMatrix : packoffset(c0);
//   float4x4 InvViewMatrix : packoffset(c4);
//   float4x4 ProjectionMatrix : packoffset(c8);
//   float4x4 ViewMatrix : packoffset(c12);
//   float4x4 ViewProjectionMatrix : packoffset(c16);
//   float4x4 ViewRotProjectionMatrix : packoffset(c20);
//   float4x4 ViewRotProjectionMatrix_Previous : packoffset(c24);
//   float4 AmbientSHR : packoffset(c28);
//   float4 AmbientSHG : packoffset(c29);
//   float4 AmbientSHB : packoffset(c30);
//   float4 CameraDistances : packoffset(c31);
//   float4 CameraNearPlaneSize : packoffset(c32);
//   float4 DepthScale : packoffset(c33);
//   float4 DepthTextureScaleOffset : packoffset(c34);
//   float4 FogParams : packoffset(c35);
//   float4 FogSHB : packoffset(c36);
//   float4 FogSHG : packoffset(c37);
//   float4 FogSHR : packoffset(c38);
//   float4 HeightFogParams : packoffset(c39);
//   float4 ViewportSize : packoffset(c40);
//   float3 CurvedHorizonFactors : packoffset(c41);
//   float3 ViewPoint : packoffset(c42);
//   float3 CameraPosition : packoffset(c43);
//   float3 CameraPosition_Previous : packoffset(c44);
//   float3 CameraPositionFractions : packoffset(c45);
//   float3 CameraPositionFractions_Previous : packoffset(c46);
//   float3 CameraRight : packoffset(c47);
//   float3 CameraUp : packoffset(c48);
//   float3 CameraDirection : packoffset(c49);
//   float3 DepthTextureRcpSize : packoffset(c50);
//   float2 MotionVectorOffsets : packoffset(c51);
//   float2 DepthRangeCompression : packoffset(c51.z);
//   float ShadowProjDepthMinValue : packoffset(c52);
//   float DistanceScale : packoffset(c52.y);
//   float WorldSpaceZOffset : packoffset(c52.z);
//   float WorldSpaceZOffset_Previous : packoffset(c52.w);
//   float CameraFOVDeg : packoffset(c53);
//   float CameraTanHalfFOV : packoffset(c53.y);
//   float EffectsEmissiveEVBias : packoffset(c53.z);
//   float ShadowCSMLastSliceIndex : packoffset(c53.w);
//   float SkyHeight : packoffset(c54);
//   float ViewportMipBias : packoffset(c54.y);
//   float CameraDistanceRatio : packoffset(c54.z);
//   float StormFactor : packoffset(c54.w);
//   float4 LocalToneMappingParams : packoffset(c55);
//   float SkyLightingReference : packoffset(c56);
//   float SkyLocalToneMappingScale : packoffset(c56.y);
//   float4x4 ProbeMatrix[16] : packoffset(c57);
//   int ProbeMask : packoffset(c121);
// }
//
// cbuffer CDeferredShadowsResolveParameterProvider : register(b1)
// {
//   float4 LocalLightsShadowMapsParameters[15] : packoffset(c0);
//   float4 PCSSCascadeParams[3] : packoffset(c15);
//   float3 CSMFadeFactors : packoffset(c18);
//   int NumLocalLightsShadowMaps : packoffset(c18.w);
//   float PCSSMaxPenumbraSize : packoffset(c19);
//   float PCSSLightSize : packoffset(c19.y);
//   float RecieverExtraBias : packoffset(c19.z);
//   float UpscaleThresholdLoGrad : packoffset(c19.w);
//   float UpscaleThresholdHiGrad : packoffset(c20);
//   float LocallLightScreenSpaceShadowsFadeInFactor : packoffset(c20.y);
//   float ASMLowSunFadeFactor : packoffset(c20.z);
//   float4x4 TextureSpaceProjectionMatrix : packoffset(c21);
//   float4 TAASamplesData[9] : packoffset(c25);
//   float3 FrustumCornerCS[4] : packoffset(c34);
//   float4 LinearDepthReconstructionVector : packoffset(c38);
//   float4 HierarchicalLinearDepthAtlasSamplingParams1 : packoffset(c39);
//   float4 HalfSize : packoffset(c40);
//   float3 SunDirectionVS : packoffset(c41);
//   float RejectionThreshold : packoffset(c41.w);
//   float3 LocalLightPosVS : packoffset(c42);
//   float LocalLightRadiusSq : packoffset(c42.w);
//   float3 LocalLightDirVS : packoffset(c43);
//   float LocalLightHalfOuterConeCos : packoffset(c43.w);
//   float3 TAAParams : packoffset(c44);
//   float2 ShadowScreenSize : packoffset(c45);
//   int2 ViewportSizeInt : packoffset(c45.z);
//   int MaxTileCount : packoffset(c46);
//   int TileBufferOffset : packoffset(c46.y);
//   float StartPointDisplacement : packoffset(c46.z);
//   float TransmissiveStartPointDisplacement : packoffset(c46.w);
//   float NearZStartPointDisplacement : packoffset(c47);
//   float TransmissiveShadowCasterMaxShadowFactor : packoffset(c47.y);
// }
//
// cbuffer CTileLightingBlendedParameterProvider : register(b2)
// {
//   float4 CSMSlice0_0 : packoffset(c0);
//   float4 CSMSlice0_1 : packoffset(c1);
//   float4 CSMSlice0_2 : packoffset(c2);
//   float4 CSMSlice1_0 : packoffset(c3);
//   float4 CSMSlice1_1 : packoffset(c4);
//   float4 CSMSlice1_2 : packoffset(c5);
//   float4 CSMSlice2_0 : packoffset(c6);
//   float4 CSMSlice2_1 : packoffset(c7);
//   float4 CSMSlice2_2 : packoffset(c8);
//   float4 CSMSliceFade : packoffset(c9);
//   float4 ShadowMapSize : packoffset(c10);
//   float4 LocalLightsShadowMapAtlasSize : packoffset(c11);
//   float4 SunColor : packoffset(c12);
//   float4 SunDirection : packoffset(c13);
//   float DirectLightOcclusion : packoffset(c14);
//   int2 OmniAndSpotLightMask : packoffset(c14.y);
//   int2 ExposureLightMask : packoffset(c15);
//   int2 NumTiles : packoffset(c15.z);
//   int LightCount : packoffset(c16);
//   int ParticlesSmallBufferFactor : packoffset(c16.y);
// }
//
// cbuffer CCloudShadowParameterProvider : register(b3)
// {
//   float CloudShadowsUVScale : packoffset(c0);
//   float CloudShadowsUVOffsetX : packoffset(c0.y);
//   float CloudShadowsUVOffsetY : packoffset(c0.z);
//   float CloudShadowsMipScale : packoffset(c0.w);
//   float CloudShadowsMipOffset : packoffset(c1);
//   float CloudShadowsNearScale : packoffset(c1.y);
//   float CloudShadowsFarScale : packoffset(c1.z);
//   float CloudShadowsNearOffset : packoffset(c1.w);
//   float CloudShadowsFarOffset : packoffset(c2);
//   float CloudShadowsFadeScale : packoffset(c2.y);
//   float CloudShadowsFadeOffset : packoffset(c2.z);
// }
//
// cbuffer CAdaptiveShadowMapResolveParameterProvider : register(b4)
// {
//   float4x4 ASMLongRangeIndexTexMat : packoffset(c0);
//   float4x4 ASMLongRangePreRenderIndexTexMat : packoffset(c4);
//   float3 ASMLongRangeReceiverWarpVector : packoffset(c8);
//   float ASMLongRangeDefaultShadowFactor : packoffset(c8.w);
//   float3 ASMLongRangePreRenderReceiverWarpVector : packoffset(c9);
//   float ASMLongRangePreRenderDefaultShadowFactor : packoffset(c9.w);
//   float3 ASMLongRangeBlockerSearchVector : packoffset(c10);
//   float ASMTimeOfDayLerpFactor : packoffset(c10.w);
//   float3 ASMLongRangeLightDir : packoffset(c11);
//   float3 ASMLongRangePreRenderLightDir : packoffset(c12);
//   float3 ASMLongRangePreRenderBlockerSearchVector : packoffset(c13);
//   bool IsSunLow : packoffset(c13.w);
// }
//
// SamplerState Wrap_s : register(s0);
// SamplerState ClampNoMip_s : register(s1);
// SamplerState PointClamp_s : register(s2);
// SamplerState PointClampNoMip_s : register(s3);
// SamplerState ColorBlackTransparentBorderPoint_s : register(s4);
// SamplerComparisonState ShadowCmpSampler_s : register(s5);
// Texture2D<float4> CloudShadowTexture : register(t0);
// Texture2D<float4> ASMLongRangeIndexTexture : register(t1);
// Texture2D<float4> ASMDepthAtlasTexture : register(t2);
// Texture2D<float> ASMDepthExtentMapAtlasTexture : register(t3);
// Texture2DArray<float4> CSMShadowMap : register(t4);
// Texture2D<float> HalfGeometricEdgeTexture : register(t5);
// Texture2D<float> HalfLinearDepthTexture : register(t6);
// Texture2D<uint> HalfStencilBuffer : register(t7);
// Texture2D<float4> GBufferCacheTexture : register(t8);
// Texture2D<float4> HalfScreenEffectsHistory : register(t9);
// Texture2D<float2> MotionBuffer : register(t10);
// Texture2D<float2> PrevMotionBuffer : register(t11);
// StructuredBuffer<uint> ResolveTiles : register(t12);
// RWTexture2D<float4> HalfScreenEffectsBuffer : register(u0);
//
//
// // 3Dmigoto declarations
// #define cmp -
// Texture1D<float4> IniParams : register(t120);
// Texture2D<float4> StereoParams : register(t125);
//
//
// void main)
// {
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_uav_typed_texture2d (float,float,float,float) u0
//   float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
//   uint4 bitmask, uiDest;
//   float4 fDest;
//
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_thread_group 8, 8, 1
//   r0.x = (int)vThreadGroupID.z + TileBufferOffset;
//   r0.x = ResolveTiles[r0.x].x;
//   r1.x = (int)r0.x & 0x0000ffff;
//   r1.y = (uint)r0.x >> 16;
//   r0.xy = mad((int2)r1.xy, int2(8,8), (int2)vThreadIDInGroup.xy);
//   r1.zw = (int2)r0.xy;
//   r1.zw = float2(0.5,0.5) + r1.zw;
//   r2.xy = HalfSize.zw * r1.zw;
//   r0.zw = float2(0,0);
//   r2.z = HalfLinearDepthTexture.Load(r0.xyw).x;
//   r3.xy = (uint2)vThreadIDInGroup.xy << int2(1,1);
//   r1.xy = mad((int2)r1.xy, int2(16,16), (int2)r3.xy);
//   r1.xy = (int2)r1.xy;
//   r1.xy = float2(0.5,0.5) + r1.xy;
//   r1.xy = ViewportSize.zw * r1.xy;
//   r3.xyz = FrustumCornerCS[1].xyz + -FrustumCornerCS[0].xyz;
//   r3.xyz = r1.xxx * r3.xyz + FrustumCornerCS[0].xyz;
//   r4.xyz = FrustumCornerCS[3].xyz + -FrustumCornerCS[2].xyz;
//   r4.xyz = r1.xxx * r4.xyz + FrustumCornerCS[2].xyz;
//   r4.xyz = r4.xyz + -r3.xyz;
//   r3.xyz = r1.yyy * r4.xyz + r3.xyz;
//   r4.xyz = r3.xyz * r2.zzz;
//   r1.x = dot(r4.xyz, r4.xyz);
//   r3.xyz = r3.xyz * r2.zzz + CameraPosition.xyz;
//   r1.y = dot(r4.xy, r4.xy);
//   r1.xy = sqrt(r1.xy);
//   r1.y = -CurvedHorizonFactors.x + r1.y;
//   r2.w = cmp(0 < r1.y);
//   r1.y = CurvedHorizonFactors.y * r1.y;
//   r4.x = cmp(r1.y < 1);
//   r4.y = r1.y * r1.y;
//   r1.y = -r1.y * 2 + 3;
//   r1.y = r4.y * r1.y;
//   r1.y = CurvedHorizonFactors.z * r1.y;
//   r1.y = r4.x ? r1.y : CurvedHorizonFactors.z;
//   r1.y = r2.w ? r1.y : 0;
//   r3.w = r3.z + r1.y;
//   r1.y = -r1.x * 0.0500000007 + 1;
//   r1.y = max(0, r1.y);
//   r1.y = 0.5 * r1.y;
//   r4.xyzw = GBufferCacheTexture.Load(r0.xyw).xyzw;
//   r5.xyz = r4.xyz * float3(2,2,2) + float3(-1,-1,-1);
//   r6.xyz = ViewMatrix._m01_m11_m21 * r5.yyy;
//   r5.xyw = ViewMatrix._m00_m10_m20 * r5.xxx + r6.xyz;
//   r5.xyz = ViewMatrix._m02_m12_m22 * r5.zzz + r5.xyw;
//   r0.z = HalfStencilBuffer.Load(r0.xyz).x;
//   r0.z = (int)r0.z & 64;
//   r3.xyz = RecieverExtraBias * r5.xyz + r3.xyw;
//   r0.w = CloudShadowsMipScale * r1.x + CloudShadowsMipOffset;
//   r5.xy = r3.xy * CloudShadowsUVScale + CloudShadowsUVOffsetX;
//   r0.w = CloudShadowTexture.SampleLevel(Wrap_s, r5.xy, r0.w).x;
//   r2.w = saturate(r0.w * CloudShadowsNearScale + CloudShadowsNearOffset);
//   r0.w = saturate(r0.w * CloudShadowsFarScale + CloudShadowsFarOffset);
//   r5.x = saturate(r1.x * CloudShadowsFadeScale + CloudShadowsFadeOffset);
//   r5.y = r5.x * r5.x;
//   r5.x = -r5.x * 2 + 3;
//   r5.x = r5.y * r5.x;
//   r0.w = r0.w + -r2.w;
//   r0.w = r5.x * r0.w + r2.w;
//   r3.w = 1;
//   r5.y = dot(r3.xyzw, CSMSlice2_0.xyzw);
//   r5.z = dot(r3.xyzw, CSMSlice2_1.xyzw);
//   r5.w = dot(r3.xyzw, CSMSlice2_2.xyzw);
//   r6.y = dot(r3.xyzw, CSMSlice1_0.xyzw);
//   r6.z = dot(r3.xyzw, CSMSlice1_1.xyzw);
//   r6.w = dot(r3.xyzw, CSMSlice1_2.xyzw);
//   r7.xyz = saturate(r6.yzw);
//   r7.xyz = cmp(r6.yzw == r7.xyz);
//   r2.w = r7.y ? r7.x : 0;
//   r2.w = r7.z ? r2.w : 0;
//   r7.x = cmp(0.00100000005 < r6.w);
//   r2.w = r7.x ? r2.w : 0;
//   r6.x = 1;
//   r5.x = 2;
//   r7.xyzw = r2.wwww ? r6.xyzw : r5.xyzw;
//   r8.y = dot(r3.xyzw, CSMSlice0_0.xyzw);
//   r8.z = dot(r3.xyzw, CSMSlice0_1.xyzw);
//   r8.w = dot(r3.xyzw, CSMSlice0_2.xyzw);
//   r9.xyz = saturate(r8.yzw);
//   r9.xyz = cmp(r8.yzw == r9.xyz);
//   r2.w = r9.y ? r9.x : 0;
//   r2.w = r9.z ? r2.w : 0;
//   r5.x = cmp(0.00100000005 < r8.w);
//   r2.w = r5.x ? r2.w : 0;
//   r8.x = 0;
//   r7.xyzw = r2.wwww ? r8.yzxw : r7.yzxw;
//   r2.w = min(ShadowCSMLastSliceIndex, r7.z);
//   r2.w = cmp(r2.w == ShadowCSMLastSliceIndex);
//   r5.x = cmp(10 < r1.x);
//   r2.w = r2.w ? r5.x : 0;
//   r9.xy = r7.xy * float2(2,2) + float2(-1,-1);
//   r9.xy = float2(-0.800000012,-0.800000012) + abs(r9.xy);
//   r9.xy = saturate(float2(5,5) * r9.xy);
//   r9.xy = float2(1,1) + -r9.xy;
//   r5.x = -0.5 + r7.w;
//   r5.x = -abs(r5.x) * 2 + 1;
//   r5.x = max(0, r5.x);
//   r5.x = min(0.200000003, r5.x);
//   r5.x = 5 * r5.x;
//   r6.x = min(r9.x, r9.y);
//   r5.x = min(r6.x, r5.x);
//   r2.w = r2.w ? r5.x : 1;
//   r5.x = cmp(r7.z < ShadowCSMLastSliceIndex);
//   if (r5.x != 0) {
//     r9.xyz = cmp(r7.zzz == float3(0,1,2));
//     r9.yzw = r9.xyz ? float3(1,1,1) : 0;
//     r5.x = dot(r9.yzw, CSMFadeFactors.xyz);
//     r6.x = r9.x ? 1 : 5;
//     r1.x = cmp(r6.x < r1.x);
//     r8.xyz = r9.xxx ? r8.yzw : r6.yzw;
//     r8.xy = r8.xy * float2(2,2) + float2(-1,-1);
//     r8.xy = float2(-0.800000012,-0.800000012) + abs(r8.xy);
//     r8.xy = saturate(float2(5,5) * r8.xy);
//     r8.xy = float2(1,1) + -r8.xy;
//     r6.x = -0.5 + r8.z;
//     r6.x = -abs(r6.x) * 2 + 1;
//     r6.x = max(0, r6.x);
//     r6.x = min(0.200000003, r6.x);
//     r6.x = 5 * r6.x;
//     r8.x = min(r8.x, r8.y);
//     r6.x = min(r8.x, r6.x);
//     r6.x = min(r6.x, r5.x);
//     r1.x = r1.x ? r6.x : r5.x;
//     r8.xy = (uint2)r0.xy;
//     r8.xy = float2(0.0671105608,0.00583714992) * r8.xy;
//     r5.x = r8.x + r8.y;
//     r5.x = frac(r5.x);
//     r5.x = 52.9829178 * r5.x;
//     r5.x = frac(r5.x);
//     r1.x = cmp(r1.x < r5.x);
//     r5.yzw = r9.xxx ? r6.yzw : r5.yzw;
//     r5.x = 1 + r7.z;
//     r7.xyzw = r1.xxxx ? r5.yzxw : r7.xyzw;
//     r5.xyz = r7.xyw;
//   } else {
//     r5.xyz = r7.xyw;
//   }
//   r6.xyz = -CameraPosition.xyz + r3.xyz;
//   r8.x = dot(r3.xyzw, ASMLongRangeIndexTexMat._m00_m10_m20_m30);
//   r8.y = dot(r3.xyzw, ASMLongRangeIndexTexMat._m01_m11_m21_m31);
//   r1.x = dot(r3.xyzw, ASMLongRangeIndexTexMat._m02_m12_m22_m32);
//   r3.xyzw = ASMLongRangeIndexTexture.SampleLevel(ColorBlackTransparentBorderPoint_s, r8.xy, 0).xyzw;
//   r5.w = cmp(r3.w != 0.000000);
//   if (r5.w != 0) {
//     r5.w = frac(abs(r3.w));
//     r5.w = r5.w + r5.w;
//     r3.w = floor(abs(r3.w));
//     r9.xyzw = r3.wwww * r8.xyxy;
//     r9.xyzw = r9.xyzw * float4(0.000390625006,0.000558035739,0.000390625006,0.000558035739) + r3.xyxy;
//     r3.x = r3.z + r1.x;
//     r3.x = max(0.000500000024, r3.x);
//     r3.y = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r9.zw, r3.x).x;
//     r10.xyzw = float4(0.000703125028,0,-0.000703125028,0) + r9.zwzw;
//     r3.z = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r10.xy, r3.x).x;
//     r3.z = 0.110858001 * r3.z;
//     r3.y = r3.y * 0.120892003 + r3.z;
//     r3.z = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r10.zw, r3.x).x;
//     r3.y = r3.z * 0.110858001 + r3.y;
//     r10.xyzw = float4(0,0.00100446434,0,-0.00100446434) + r9.zwzw;
//     r3.z = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r10.xy, r3.x).x;
//     r3.y = r3.z * 0.110858001 + r3.y;
//     r3.z = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r10.zw, r3.x).x;
//     r3.y = r3.z * 0.110858001 + r3.y;
//     r10.xyzw = float4(0.000492187508,0.00070312497,-0.000492187508,0.00070312497) + r9.zwzw;
//     r3.z = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r10.xy, r3.x).x;
//     r3.y = r3.z * 0.111050002 + r3.y;
//     r3.z = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r10.zw, r3.x).x;
//     r3.y = r3.z * 0.111050002 + r3.y;
//     r9.xyzw = float4(-0.000492187508,-0.00070312497,0.000492187508,-0.00070312497) + r9.xyzw;
//     r3.z = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r9.xy, r3.x).x;
//     r3.y = r3.z * 0.111050002 + r3.y;
//     r3.x = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r9.zw, r3.x).x;
//     r3.x = r3.x * 0.111050002 + r3.y;
//   } else {
//     r5.w = 0;
//     r3.x = ASMLongRangeDefaultShadowFactor;
//   }
//   r3.y = dot(r6.xyz, ASMLongRangeLightDir.xyz);
//   r3.yzw = -r3.yyy * ASMLongRangeLightDir.xyz + r6.xyz;
//   r3.y = dot(r3.yzw, r3.yzw);
//   r3.y = sqrt(r3.y);
//   r3.y = saturate(r3.y * -0.0199999996 + 8.80000019);
//   r3.z = cmp(0 < r5.w);
//   if (r3.z != 0) {
//     r6.xyzw = ASMLongRangeIndexTexture.SampleLevel(ColorBlackTransparentBorderPoint_s, r8.xy, 1).xyzw;
//     r3.z = frac(abs(r6.w));
//     r3.z = r3.z + r3.z;
//     r3.z = cmp(r5.w != r3.z);
//     if (r3.z != 0) {
//       r3.z = floor(abs(r6.w));
//       r9.xyzw = r3.zzzz * r8.xyxy;
//       r9.xyzw = r9.xyzw * float4(0.000390625006,0.000558035739,0.000390625006,0.000558035739) + r6.xyxy;
//       r3.z = r6.z + r1.x;
//       r3.z = max(0.000500000024, r3.z);
//       r3.w = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r9.zw, r3.z).x;
//       r6.xyzw = float4(0.000703125028,0,-0.000703125028,0) + r9.zwzw;
//       r6.x = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xy, r3.z).x;
//       r6.x = 0.110858001 * r6.x;
//       r3.w = r3.w * 0.120892003 + r6.x;
//       r6.x = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r6.zw, r3.z).x;
//       r3.w = r6.x * 0.110858001 + r3.w;
//       r6.xyzw = float4(0,0.00100446434,0,-0.00100446434) + r9.zwzw;
//       r6.x = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xy, r3.z).x;
//       r3.w = r6.x * 0.110858001 + r3.w;
//       r6.x = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r6.zw, r3.z).x;
//       r3.w = r6.x * 0.110858001 + r3.w;
//       r6.xyzw = float4(0.000492187508,0.00070312497,-0.000492187508,0.00070312497) + r9.zwzw;
//       r6.x = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xy, r3.z).x;
//       r3.w = r6.x * 0.111050002 + r3.w;
//       r6.x = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r6.zw, r3.z).x;
//       r3.w = r6.x * 0.111050002 + r3.w;
//       r6.xyzw = float4(-0.000492187508,-0.00070312497,0.000492187508,-0.00070312497) + r9.xyzw;
//       r6.x = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xy, r3.z).x;
//       r3.w = r6.x * 0.111050002 + r3.w;
//       r3.z = ASMDepthAtlasTexture.SampleCmpLevelZero(ShadowCmpSampler_s, r6.zw, r3.z).x;
//       r3.z = r3.z * 0.111050002 + r3.w;
//     } else {
//       r3.z = ASMLongRangeDefaultShadowFactor;
//     }
//     r3.z = r3.z + -r3.x;
//     r3.x = r5.w * r3.z + r3.x;
//   }
//   r3.x = -1 + r3.x;
//   r3.x = r3.y * r3.x + 1;
//   r3.y = cmp(r2.w == 1.000000);
//   r3.z = 1 + -r3.x;
//   r3.z = ASMLowSunFadeFactor * r3.z + r3.x;
//   r3.x = r3.y ? r3.z : r3.x;
//   r3.y = cmp(0 < r2.w);
//   if (r3.y != 0) {
//     r3.y = (uint)r7.z;
//     r3.zw = (uint2)r0.xy;
//     r3.zw = float2(0.0671105608,0.00583714992) * r3.zw;
//     r3.z = r3.z + r3.w;
//     r3.z = frac(r3.z);
//     r3.z = 52.9829178 * r3.z;
//     r3.z = frac(r3.z);
//     sincos(r3.z, r6.x, r9.x);
//     r10.x = -r6.x;
//     r3.zw = PCSSCascadeParams[r3.y].xy * PCSSMaxPenumbraSize;
//     r3.zw = max(ShadowMapSize.zw, r3.zw);
//     r11.xyzw = float4(-0.978698015,-0.0884120986,-0.841121018,0.521165013) * r3.zwzw;
//     r10.y = r9.x;
//     r9.x = dot(r10.yx, r11.xy);
//     r10.z = r6.x;
//     r9.y = dot(r10.zy, r11.xy);
//     r7.xy = r9.xy + r5.xy;
//     r6.y = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r5.w = cmp(r6.y < r5.z);
//     r6.x = 1;
//     r6.xy = r5.ww ? r6.xy : 0;
//     r9.x = dot(r10.yx, r11.zw);
//     r9.y = dot(r10.zy, r11.zw);
//     r7.xy = r9.xy + r5.xy;
//     r6.z = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.w = cmp(r6.z < r5.z);
//     r9.y = r6.y + r6.z;
//     r9.x = r5.w ? 2 : 1;
//     r6.xy = r6.ww ? r9.xy : r6.xy;
//     r9.xyzw = float4(-0.717459977,-0.503220022,-0.702933013,0.903133988) * r3.zwzw;
//     r11.x = dot(r10.yx, r9.xy);
//     r11.y = dot(r10.zy, r9.xy);
//     r7.xy = r11.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.x = dot(r10.yx, r9.zw);
//     r9.y = dot(r10.zy, r9.zw);
//     r7.xy = r9.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.xyzw = float4(-0.663197994,0.154819995,-0.495101988,-0.232887) * r3.zwzw;
//     r11.x = dot(r10.yx, r9.xy);
//     r11.y = dot(r10.zy, r9.xy);
//     r7.xy = r11.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.x = dot(r10.yx, r9.zw);
//     r9.y = dot(r10.zy, r9.zw);
//     r7.xy = r9.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.xyzw = float4(-0.364237994,-0.961790979,-0.345865995,-0.564378977) * r3.zwzw;
//     r11.x = dot(r10.yx, r9.xy);
//     r11.y = dot(r10.zy, r9.xy);
//     r7.xy = r11.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.x = dot(r10.yx, r9.zw);
//     r9.y = dot(r10.zy, r9.zw);
//     r7.xy = r9.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.xyzw = float4(-0.325663,0.640370011,-0.182714,0.321328998) * r3.zwzw;
//     r11.x = dot(r10.yx, r9.xy);
//     r11.y = dot(r10.zy, r9.xy);
//     r7.xy = r11.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.x = dot(r10.yx, r9.zw);
//     r9.y = dot(r10.zy, r9.zw);
//     r7.xy = r9.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.xyzw = float4(-0.142612994,-0.0227362998,-0.0564289987,-0.36728999) * r3.zwzw;
//     r11.x = dot(r10.yx, r9.xy);
//     r11.y = dot(r10.zy, r9.xy);
//     r7.xy = r11.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.x = dot(r10.yx, r9.zw);
//     r9.y = dot(r10.zy, r9.zw);
//     r7.xy = r9.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.xyzw = float4(-0.0185860004,0.918882012,0.038178999,-0.728995979) * r3.zwzw;
//     r11.x = dot(r10.yx, r9.xy);
//     r11.y = dot(r10.zy, r9.xy);
//     r7.xy = r11.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.x = dot(r10.yx, r9.zw);
//     r9.y = dot(r10.zy, r9.zw);
//     r7.xy = r9.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.xyzw = float4(0.165989995,0.0931119993,0.253639013,0.719534993) * r3.zwzw;
//     r11.x = dot(r10.yx, r9.xy);
//     r11.y = dot(r10.zy, r9.xy);
//     r7.xy = r11.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.x = dot(r10.yx, r9.zw);
//     r9.y = dot(r10.zy, r9.zw);
//     r7.xy = r9.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.xyzw = float4(0.369549006,-0.655018985,0.423626989,0.429975003) * r3.zwzw;
//     r11.x = dot(r10.yx, r9.xy);
//     r11.y = dot(r10.zy, r9.xy);
//     r7.xy = r11.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.x = dot(r10.yx, r9.zw);
//     r9.y = dot(r10.zy, r9.zw);
//     r7.xy = r9.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.xyzw = float4(0.530746996,-0.364971012,0.566026986,-0.940488994) * r3.zwzw;
//     r11.x = dot(r10.yx, r9.xy);
//     r11.y = dot(r10.zy, r9.xy);
//     r7.xy = r11.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.x = dot(r10.yx, r9.zw);
//     r9.y = dot(r10.zy, r9.zw);
//     r7.xy = r9.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.xyzw = float4(0.639331996,0.0284126997,0.652089,0.669668019) * r3.zwzw;
//     r11.x = dot(r10.yx, r9.xy);
//     r11.y = dot(r10.zy, r9.xy);
//     r7.xy = r11.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.x = dot(r10.yx, r9.zw);
//     r9.y = dot(r10.zy, r9.zw);
//     r7.xy = r9.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.xyzw = float4(0.773796976,0.345012009,0.968870997,0.840448976) * r3.zwzw;
//     r11.x = dot(r10.yx, r9.xy);
//     r11.y = dot(r10.zy, r9.xy);
//     r7.xy = r11.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r9.x = dot(r10.yx, r9.zw);
//     r9.y = dot(r10.zy, r9.zw);
//     r7.xy = r9.xy + r5.xy;
//     r5.w = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r6.z = cmp(r5.w < r5.z);
//     r9.y = r6.y + r5.w;
//     r9.x = 1 + r6.x;
//     r6.xy = r6.zz ? r9.xy : r6.xy;
//     r3.zw = float2(0.991882026,-0.657338023) * r3.zw;
//     r9.x = dot(r10.yx, r3.zw);
//     r9.y = dot(r10.zy, r3.zw);
//     r7.xy = r9.xy + r5.xy;
//     r3.z = CSMShadowMap.SampleLevel(PointClamp_s, r7.xyz, 0).x;
//     r3.w = cmp(r3.z < r5.z);
//     r9.y = r6.y + r3.z;
//     r9.x = 1 + r6.x;
//     r3.zw = r3.ww ? r9.xy : r6.xy;
//     r5.w = cmp(0 < r3.z);
//     r3.z = r3.w / r3.z;
//     r3.z = r5.w ? r3.z : 1;
//     r3.w = r5.z * PCSSCascadeParams[r3.y].z + PCSSCascadeParams[r3.y].w;
//     r3.z = r3.z * PCSSCascadeParams[r3.y].z + PCSSCascadeParams[r3.y].w;
//     r3.w = r3.w + -r3.z;
//     r3.z = rcp(r3.z);
//     r3.z = r3.w * r3.z;
//     r3.z = PCSSLightSize * r3.z;
//     r3.z = saturate(r3.z / PCSSMaxPenumbraSize);
//     r3.w = max(0.400000006, r3.z);
//     r6.y = r0.z ? r3.w : r3.z;
//     r3.z = PCSSMaxPenumbraSize * r6.y;
//     r3.yz = PCSSCascadeParams[r3.y].xy * r3.zz;
//     r8.zw = cmp(ShadowMapSize.zw < r3.yz);
//     r3.w = (int)r8.w | (int)r8.z;
//     if (r3.w != 0) {
//       r3.yz = max(ShadowMapSize.zw, r3.yz);
//       r9.xyzw = float4(-0.978698015,-0.0884120986,-0.841121018,0.521165013) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r3.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.xyzw = float4(-0.717459977,-0.503220022,-0.702933013,0.903133988) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.xyzw = float4(-0.663197994,0.154819995,-0.495101988,-0.232887) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.xyzw = float4(-0.364237994,-0.961790979,-0.345865995,-0.564378977) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.xyzw = float4(-0.325663,0.640370011,-0.182714,0.321328998) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.xyzw = float4(-0.142612994,-0.0227362998,-0.0564289987,-0.36728999) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.xyzw = float4(-0.0185860004,0.918882012,0.038178999,-0.728995979) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.xyzw = float4(0.165989995,0.0931119993,0.253639013,0.719534993) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.xyzw = float4(0.369549006,-0.655018985,0.423626989,0.429975003) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.xyzw = float4(0.530746996,-0.364971012,0.566026986,-0.940488994) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.xyzw = float4(0.639331996,0.0284126997,0.652089,0.669668019) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.xyzw = float4(0.773796976,0.345012009,0.968870997,0.840448976) * r3.yzyz;
//       r11.x = dot(r10.yx, r9.xy);
//       r11.y = dot(r10.zy, r9.xy);
//       r7.xy = r11.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r9.x = dot(r10.yx, r9.zw);
//       r9.y = dot(r10.zy, r9.zw);
//       r7.xy = r9.xy + r5.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.w = r5.w + r3.w;
//       r3.yz = float2(0.991882026,-0.657338023) * r3.yz;
//       r9.x = dot(r10.yx, r3.yz);
//       r9.y = dot(r10.zy, r3.yz);
//       r7.xy = r9.xy + r5.xy;
//       r3.y = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r3.y = r3.w + r3.y;
//       r3.y = 0.0399999991 * r3.y;
//     } else {
//       r3.zw = r5.xy * ShadowMapSize.xy + float2(0.5,0.5);
//       r5.xy = floor(r3.zw);
//       r3.zw = -r5.xy + r3.zw;
//       r3.zw = r3.zw * float2(0.5,0.5) + float2(0.25,0.25);
//       r8.zw = float2(1,1) + -r3.zw;
//       r8.zw = rcp(r8.zw);
//       r9.xy = rcp(r3.zw);
//       r10.zw = r8.zw * float2(0.125,0.125) + float2(-1,-1);
//       r10.xy = -r9.xy * float2(0.125,0.125) + float2(1,1);
//       r9.xyzw = ShadowMapSize.zwzw * r10.zwxw;
//       r7.xy = r5.xy * ShadowMapSize.zw + r9.xy;
//       r5.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r7.xy = r5.xy * ShadowMapSize.zw + r9.zw;
//       r6.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r9.xyzw = ShadowMapSize.zwzw * r10.zyxy;
//       r7.xy = r5.xy * ShadowMapSize.zw + r9.xy;
//       r7.w = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r7.xy = r5.xy * ShadowMapSize.zw + r9.zw;
//       r5.x = CSMShadowMap.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z).x;
//       r5.y = r6.w + -r5.w;
//       r5.y = r3.z * r5.y + r5.w;
//       r5.x = r5.x + -r7.w;
//       r3.z = r3.z * r5.x + r7.w;
//       r3.z = r3.z + -r5.y;
//       r3.y = r3.w * r3.z + r5.y;
//     }
//     r5.xyzw = ASMLongRangeIndexTexture.SampleLevel(ColorBlackTransparentBorderPoint_s, r8.xy, 1).xyzw;
//     r3.z = floor(abs(r5.w));
//     r3.zw = r3.zz * r8.xy;
//     r3.zw = r3.zw * float2(0.000390625006,0.000558035739) + r5.xy;
//     r1.x = r5.z + r1.x;
//     r1.x = max(0.000500000024, r1.x);
//     r7.xyzw = r3.zwzw * float4(10,7,10,7) + float4(-0.001953125,-0.001953125,-0.001953125,-0.001953125);
//     r7.xyzw = floor(r7.xyzw);
//     r7.xyzw = r7.xyzw * float4(0.100000001,0.142857149,0.100000001,0.142857149) + float4(0.00117187505,0.00167410716,0.098828122,0.141183034);
//     r5.x = cmp(r5.w != 0.000000);
//     if (r5.x != 0) {
//       r5.xyzw = float4(-0.00234375009,-0.00334821455,0.00234375009,0) + r3.zwzw;
//       r5.xyzw = max(r5.xyzw, r7.xyxy);
//       r5.xyzw = min(r5.xyzw, r7.zwzw);
//       r5.y = ASMDepthExtentMapAtlasTexture.SampleLevel(ClampNoMip_s, r5.xy, 0).x;
//       r6.w = cmp(r5.y < r1.x);
//       r5.x = 1;
//       r5.xy = r6.ww ? r5.xy : 0;
//       r5.z = ASMDepthExtentMapAtlasTexture.SampleLevel(ClampNoMip_s, r5.zw, 0).x;
//       r5.w = cmp(r5.z < r1.x);
//       r8.y = r5.y + r5.z;
//       r8.x = r6.w ? 2 : 1;
//       r5.xy = r5.ww ? r8.xy : r5.xy;
//       r3.zw = float2(0,0.00334821455) + r3.zw;
//       r3.zw = max(r3.zw, r7.xy);
//       r3.zw = min(r3.zw, r7.zw);
//       r3.z = ASMDepthExtentMapAtlasTexture.SampleLevel(ClampNoMip_s, r3.zw, 0).x;
//       r3.w = cmp(r3.z < r1.x);
//       r7.y = r5.y + r3.z;
//       r7.x = 1 + r5.x;
//       r3.zw = r3.ww ? r7.xy : r5.xy;
//     } else {
//       r3.zw = float2(0,0);
//     }
//     r5.x = cmp(0 < r3.z);
//     r3.z = rcp(r3.z);
//     r3.z = r3.w * r3.z;
//     r3.z = r5.x ? -r3.z : -1;
//     r1.x = saturate(r3.z + r1.x);
//     r3.z = cmp(0 < ASMLongRangeDefaultShadowFactor);
//     r1.x = 40 * r1.x;
//     r1.x = min(1, r1.x);
//     r3.w = -1 + r3.y;
//     r3.w = r2.w * r3.w + 1;
//     r3.w = min(r3.x, r3.w);
//     r1.x = 1 + -r1.x;
//     r1.x = r1.x * r2.w;
//     r1.x = r3.z ? r1.x : 0;
//     r2.w = r3.y + -r3.w;
//     r3.x = r1.x * r2.w + r3.w;
//   } else {
//     r6.y = 0;
//   }
//   r6.z = min(r3.x, r0.w);
//   r0.w = cmp(r6.z != 0.000000);
//   if (r0.w != 0) {
//     r0.w = CameraDistances.y * r2.z;
//     r3.x = r2.x * 2 + ProjectionMatrix._m20;
//     r3.y = r2.y * -2 + ProjectionMatrix._m21;
//     r2.zw = float2(-1,1) + r3.xy;
//     r3.xy = LinearDepthReconstructionVector.xy * r2.zw;
//     r3.zw = float2(-1,1);
//     r3.xyz = r3.xyz * r0.www;
//     r4.xyzw = r4.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
//     r1.x = cmp(r4.w < 0);
//     r2.z = dot(r3.xyz, r4.xyz);
//     r2.z = cmp(0 < r2.z);
//     r2.z = r1.x ? r2.z : 0;
//     r4.xyz = r2.zzz ? -r4.xyz : r4.xyz;
//     r2.z = dot(SunDirectionVS.xyz, r4.xyz);
//     r2.z = cmp(r2.z < 0);
//     r1.x = r1.x ? r2.z : 0;
//     r1.x = r1.x ? TransmissiveStartPointDisplacement : StartPointDisplacement;
//     r1.x = r0.z ? NearZStartPointDisplacement : r1.x;
//     r0.w = r1.x * r0.w;
//     r3.xyz = r0.www * r4.xyz + r3.xyz;
//     r0.w = rcp(r3.z);
//     r4.x = dot(r3.xyzw, TextureSpaceProjectionMatrix._m00_m10_m20_m30);
//     r4.y = dot(r3.xyzw, TextureSpaceProjectionMatrix._m01_m11_m21_m31);
//     r4.xy = r4.xy * -r0.ww;
//     r3.xyz = -r3.zzz * SunDirectionVS.xyz + r3.xyz;
//     r1.x = rcp(r3.z);
//     r3.w = 1;
//     r5.x = dot(r3.xyzw, TextureSpaceProjectionMatrix._m00_m10_m20_m30);
//     r5.y = dot(r3.xyzw, TextureSpaceProjectionMatrix._m01_m11_m21_m31);
//     r3.xy = r5.xy * -r1.xx + -r4.xy;
//     r1.x = -r1.x + r0.w;
//     r3.z = CameraDistances.y * r1.x;
//     r2.zw = ShadowScreenSize.xy * r3.xy;
//     r2.zw = float2(8,8) * r2.zw;
//     r1.x = dot(r2.zw, r2.zw);
//     r1.x = rsqrt(r1.x);
//     r3.xyz = r3.xyz * r1.xxx;
//     r4.z = CameraDistances.y * -r0.w;
//     r0.w = (int)r0.y ^ (int)r0.x;
//     r0.w = (int)r0.w & 1;
//     r0.w = r0.w ? TAAParams.x : TAAParams.y;
//     r4.xyz = r0.www * r3.xyz + r4.xyz;
//     r0.w = r0.z ? 1 : RejectionThreshold;
//     r1.x = r4.z * r0.w;
//     r3.w = r3.z * r0.w;
//     r5.xy = r4.xy;
//     r5.z = r1.x;
//     r2.zw = float2(0,0);
//     while (true) {
//       r3.z = cmp((int)r2.w >= 8);
//       if (r3.z != 0) break;
//       r3.z = HalfLinearDepthTexture.SampleLevel(PointClampNoMip_s, r5.xy, 0).x;
//       r7.x = -r3.z * r5.z + r0.w;
//       r7.yz = r5.xy;
//       r8.xyz = saturate(r7.yzx);
//       r8.xyz = cmp(r7.yzx == r8.xyz);
//       r3.z = r8.y ? r8.x : 0;
//       r3.z = r8.z ? r3.z : 0;
//       if (r3.z != 0) {
//         break;
//       }
//       r7.w = r5.z;
//       r5.xyz = r7.yzw + r3.xyw;
//       r2.z = 0.125 + r2.z;
//       r2.w = (int)r2.w + 1;
//     }
//     r0.w = GBufferCacheTexture.SampleLevel(PointClampNoMip_s, r5.xy, 0).w;
//     r0.w = r0.w * 2 + -1;
//     r0.w = cmp(r0.w < 0);
//     r1.x = max(TransmissiveShadowCasterMaxShadowFactor, r2.z);
//     r0.w = r0.w ? r1.x : r2.z;
//     r0.w = r0.w * r0.w;
//     r1.x = r0.w * r0.w;
//     r1.x = r1.x * r0.w;
//     r6.x = r0.z ? r1.x : r0.w;
//   } else {
//     r6.x = 0;
//   }
//   r0.z = mad((int)vThreadIDInGroup.y, 8, (int)vThreadIDInGroup.x);
//   g0[r0.z].val[0/4] = r6.x;
//   g0[r0.z].val[0/4+1] = r6.y;
//   g0[r0.z].val[0/4+2] = r6.z;
//   GroupMemoryBarrierWithGroupSync();
//   r3.xyzw = (int4)vThreadIDInGroup.xyxy + int4(-1,-1,0,-1);
//   r3.xyw = max(int3(0,0,0), (int3)r3.xyw);
//   r0.w = mad((int)r3.y, 8, (int)r3.x);
//   r4.x = g0[r0.w].val[0/4];
//   r4.y = g0[r0.w].val[0/4+1];
//   r4.z = g0[r0.w].val[0/4+2];
//   r5.xyz = TAASamplesData[1].www * r4.xyz;
//   r5.xyz = TAASamplesData[0].www * r6.xyz + r5.xyz;
//   r7.xyz = min(r6.xyz, r4.xyz);
//   r4.xyz = max(r6.xyz, r4.xyz);
//   r0.w = mad((int)r3.w, 8, (int)r3.z);
//   r3.x = g0[r0.w].val[0/4];
//   r3.y = g0[r0.w].val[0/4+1];
//   r3.z = g0[r0.w].val[0/4+2];
//   r5.xyz = TAASamplesData[2].www * r3.xyz + r5.xyz;
//   r7.xyz = min(r7.xyz, r3.xyz);
//   r3.xyz = max(r4.xyz, r3.xyz);
//   r4.xyzw = (int4)vThreadIDInGroup.xyxy + int4(1,-1,-1,0);
//   r2.zw = max(int2(0,0), (int2)r4.yz);
//   r1.x = min(7, (int)r4.x);
//   r1.x = mad((int)r2.z, 8, (int)r1.x);
//   r4.x = g0[r1.x].val[0/4];
//   r4.y = g0[r1.x].val[0/4+1];
//   r4.z = g0[r1.x].val[0/4+2];
//   r5.xyz = TAASamplesData[3].www * r4.xyz + r5.xyz;
//   r7.xyz = min(r7.xyz, r4.xyz);
//   r3.xyz = max(r4.xyz, r3.xyz);
//   r1.x = mad((int)r4.w, 8, (int)r2.w);
//   r4.x = g0[r1.x].val[0/4];
//   r4.y = g0[r1.x].val[0/4+1];
//   r4.z = g0[r1.x].val[0/4+2];
//   r5.xyz = TAASamplesData[4].www * r4.xyz + r5.xyz;
//   r7.xyz = min(r7.xyz, r4.xyz);
//   r3.xyz = max(r4.xyz, r3.xyz);
//   r4.xyzw = (int4)vThreadIDInGroup.xyxy + int4(1,0,-1,1);
//   r2.zw = min(int2(0,0), (int2)r4.xw);
//   r2.z = mad((int)r4.y, 8, (int)r2.z);
//   r4.x = g0[r2.z].val[0/4];
//   r4.y = g0[r2.z].val[0/4+1];
//   r4.w = g0[r2.z].val[0/4+2];
//   r5.xyz = TAASamplesData[5].www * r4.xyw + r5.xyz;
//   r7.xyz = min(r7.xyz, r4.xyw);
//   r3.xyz = max(r4.xyw, r3.xyz);
//   r3.w = max(0, (int)r4.z);
//   r2.w = mad((int)r2.w, 8, (int)r3.w);
//   r4.x = g0[r2.w].val[0/4];
//   r4.y = g0[r2.w].val[0/4+1];
//   r4.z = g0[r2.w].val[0/4+2];
//   r5.xyz = TAASamplesData[6].www * r4.xyz + r5.xyz;
//   r7.xyz = min(r7.xyz, r4.xyz);
//   r3.xyz = max(r4.xyz, r3.xyz);
//   r4.xyzw = (int4)vThreadIDInGroup.xyxy + int4(0,1,1,1);
//   r4.yzw = min(int3(0,0,0), (int3)r4.yzw);
//   r2.w = mad((int)r4.y, 8, (int)r4.x);
//   r8.x = g0[r2.w].val[0/4];
//   r8.y = g0[r2.w].val[0/4+1];
//   r8.z = g0[r2.w].val[0/4+2];
//   r5.xyz = TAASamplesData[7].www * r8.xyz + r5.xyz;
//   r7.xyz = min(r8.xyz, r7.xyz);
//   r3.xyz = max(r8.xyz, r3.xyz);
//   r3.w = mad((int)r4.w, 8, (int)r4.z);
//   r4.x = g0[r3.w].val[0/4];
//   r4.y = g0[r3.w].val[0/4+1];
//   r4.z = g0[r3.w].val[0/4+2];
//   r5.xyz = TAASamplesData[8].www * r4.xyz + r5.xyz;
//   r7.xyz = min(r7.xyz, r4.xyz);
//   r3.xyz = max(r4.xyz, r3.xyz);
//   r4.xy = MotionBuffer.SampleLevel(PointClampNoMip_s, r2.xy, 0).xy;
//   r4.xyzw = float4(-0.498039216,-0.498039216,-0.498039216,-0.498039216) + r4.xxyy;
//   r8.xy = r4.yw + r4.yw;
//   r9.xyzw = cmp(r4.xyzw < float4(-0.334370166,0.334370166,-0.334370166,0.334370166));
//   r10.xyzw = r4.yyyw * float4(1,4.83004713,4.83004713,4.83004713) + float4(0.5,1.41502368,-1.41502368,1.41502368);
//   r10.x = saturate(r10.x);
//   r3.w = r10.x * 2 + -1;
//   r4.xy = r8.xy * r8.xy;
//   r4.xy = r4.xy * r4.xy;
//   r3.w = r4.x * r3.w;
//   r3.w = r9.y ? r3.w : r10.z;
//   r3.w = r9.x ? r10.y : r3.w;
//   r8.x = 0.100000001 * r3.w;
//   r4.xz = r4.ww * float2(1,4.83004713) + float2(0.5,-1.41502368);
//   r4.x = saturate(r4.x);
//   r3.w = r4.x * 2 + -1;
//   r3.w = r4.y * r3.w;
//   r3.w = r9.w ? r3.w : r4.z;
//   r3.w = r9.z ? r10.w : r3.w;
//   r8.y = 0.100000001 * r3.w;
//   r1.zw = r1.zw * HalfSize.zw + r8.xy;
//   r4.xy = saturate(r1.zw);
//   r4.xy = cmp(r1.zw != r4.xy);
//   r3.w = (int)r4.y | (int)r4.x;
//   r4.xyz = HalfScreenEffectsHistory.SampleLevel(ClampNoMip_s, r1.zw, 0).xyz;
//   r4.xyz = r3.www ? r5.xyz : r4.xyz;
//   r1.zw = PrevMotionBuffer.SampleLevel(ClampNoMip_s, r1.zw, 0).xy;
//   r9.xyzw = r3.wwww ? r8.xxyy : r1.zzww;
//   r9.xyzw = float4(-0.498039216,-0.498039216,-0.498039216,-0.498039216) + r9.xyzw;
//   r1.zw = r9.yw + r9.yw;
//   r10.xyzw = cmp(r9.xyzw < float4(-0.334370166,0.334370166,-0.334370166,0.334370166));
//   r11.xyzw = r9.yyyw * float4(1,4.83004713,4.83004713,4.83004713) + float4(0.5,1.41502368,-1.41502368,1.41502368);
//   r11.x = saturate(r11.x);
//   r3.w = r11.x * 2 + -1;
//   r1.zw = r1.zw * r1.zw;
//   r1.zw = r1.zw * r1.zw;
//   r1.z = r1.z * r3.w;
//   r1.z = r10.y ? r1.z : r11.z;
//   r1.z = r10.x ? r11.y : r1.z;
//   r9.x = ViewportSize.x * r1.z;
//   r8.zw = r9.ww * float2(1,4.83004713) + float2(0.5,-1.41502368);
//   r8.z = saturate(r8.z);
//   r1.z = r8.z * 2 + -1;
//   r1.z = r1.w * r1.z;
//   r1.z = r10.w ? r1.z : r8.w;
//   r1.z = r10.z ? r11.w : r1.z;
//   r9.y = ViewportSize.y * r1.z;
//   r1.zw = ViewportSize.xy * r8.xy;
//   r3.w = dot(r1.zw, r1.zw);
//   r3.w = sqrt(r3.w);
//   r1.z = dot(abs(r1.zw), float2(2,2));
//   r1.z = min(1, r1.z);
//   r8.xy = float2(0.100000001,0.100000001) * r9.xy;
//   r1.w = dot(r8.xy, r8.xy);
//   r1.w = sqrt(r1.w);
//   r8.xyz = float3(4,4,4) * r4.xyz;
//   r9.xyz = r3.xyz + -r7.xyz;
//   r10.xyz = r9.xyz * float3(16,16,16) + float3(1,1,1);
//   r10.xyz = rcp(r10.xyz);
//   r10.xyz = saturate(r1.zzz * float3(0.5,0.5,0.5) + r10.xyz);
//   r1.w = 0.5 * r1.w;
//   r4.w = r3.w + r3.w;
//   r1.w = max(r4.w, r1.w);
//   r4.w = r3.w + -r1.w;
//   r1.w = max(r3.w, r1.w);
//   r1.w = max(25, r1.w);
//   r1.w = abs(r4.w) / r1.w;
//   r3.w = r1.z * 0.125 + 0.125;
//   r11.xyz = r8.xyz * r3.www;
//   r1.z = r3.w * r1.z;
//   r1.z = r1.z * 4 + 1;
//   r11.xyz = r11.xyz * r1.zzz;
//   r8.xyz = r9.xyz * float3(4,4,4) + r8.xyz;
//   r8.xyz = saturate(r11.xyz / r8.xyz);
//   r8.xyz = min(float3(0.25,0.25,0.25), r8.xyz);
//   r8.xyz = max(r8.xyz, r1.www);
//   r8.xyz = max(TAAParams.zzz, r8.xyz);
//   r8.w = max(r8.z, r1.y);
//   r1.y = HalfGeometricEdgeTexture.SampleLevel(ClampNoMip_s, r2.xy, 0).x;
//   r1.y = saturate(24 * r1.y);
//   r10.w = max(r10.z, r1.y);
//   r1.yzw = r6.xyz + -r5.xyz;
//   r1.yzw = r10.xyw * r1.yzw + r5.xyz;
//   r4.xyz = max(r4.xyz, r7.xyz);
//   r3.xyz = min(r4.xyz, r3.xyz);
//   r1.yzw = -r3.xyz + r1.yzw;
//   r3.xyz = r8.xyw * r1.yzw + r3.xyz;
//   g0[r0.z].val[0/4] = r3.z;
//   GroupMemoryBarrierWithGroupSync();
//   r4.xyzw = cmp((int4)vThreadIDInGroup.xyxy == int4(0,0,7,7));
//   r1.yz = (int2)r4.zw | (int2)r4.xy;
//   r1.yz = r1.yz ? float2(1,1) : float2(0.5,0.5);
//   r0.z = g0[r2.z].val[0/4];
//   r1.x = g0[r1.x].val[0/4];
//   r0.z = -r1.x + r0.z;
//   r1.x = g0[r2.w].val[0/4];
//   r0.w = g0[r0.w].val[0/4];
//   r0.w = r1.x + -r0.w;
//   r0.zw = r0.zw * r1.yz;
//   r3.w = max(abs(r0.z), abs(r0.w));
// // No code for instruction (needs manual fix):
// store_uav_typed u0.xyzw, r0.xyyy, r3.xyzw
//   return;
// }
//////////////////////////////// HLSL Errors ////////////////////////////////
// C:\games\Far Cry 5\bin\ShaderFixes\c549bdc56bcb05eb-cs_replace.txt(176,10): error X3000: syntax error: unexpected token ')'
/////////////////////////////////////////////////////////////////////////////