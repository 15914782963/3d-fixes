// Ground
// VS 3108e55bd11cce26

//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v1.3.16 on Sun Feb 02 17:45:29 2020
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions:
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4x4 InvProjectionMatrix;      // Index:    0 1 2 3          Components:    16
//   float4x4 InvViewMatrix;            // Index:    4 5 6 7          Components:    16
//   float4x4 ProjectionMatrix;         // Index:    8 9 10 11        Components:    16 [unused]
//   float4x4 ViewMatrix;               // Index:   12 13 14 15       Components:    16 [unused]
//   float4x4 ViewProjectionMatrix;     // Index:   16 17 18 19       Components:    16 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Index:   20 21 22 23       Components:    16 [unused]
//   float4x4 ViewRotProjectionMatrix_Previous;// Index:   24 25 26 27       Components:    16 [unused]
//   float4 AmbientSHR;                 // Index:   28.xyzw           Components:     4 [unused]
//   float4 AmbientSHG;                 // Index:   29.xyzw           Components:     4 [unused]
//   float4 AmbientSHB;                 // Index:   30.xyzw           Components:     4 [unused]
//   float4 CameraDistances;            // Index:   31.xyzw           Components:     4 [unused]
//   float4 CameraNearPlaneSize;        // Index:   32.xyzw           Components:     4 [unused]
//   float4 DepthScale;                 // Index:   33.xyzw           Components:     4 [unused]
//   float4 DepthTextureScaleOffset;    // Index:   34.xyzw           Components:     4 [unused]
//   float4 FogParams;                  // Index:   35.xyzw           Components:     4 [unused]
//   float4 FogSHB;                     // Index:   36.xyzw           Components:     4 [unused]
//   float4 FogSHG;                     // Index:   37.xyzw           Components:     4 [unused]
//   float4 FogSHR;                     // Index:   38.xyzw           Components:     4 [unused]
//   float4 HeightFogParams;            // Index:   39.xyzw           Components:     4 [unused]
//   float4 ViewportSize;               // Index:   40.xyzw           Components:     4
//   float3 CurvedHorizonFactors;       // Index:   41.xyz            Components:     3
//   float3 ViewPoint;                  // Index:   42.xyz            Components:     3 [unused]
//   float3 CameraPosition;             // Index:   43.xyz            Components:     3
//   float3 CameraPosition_Previous;    // Index:   44.xyz            Components:     3 [unused]
//   float3 CameraPositionFractions;    // Index:   45.xyz            Components:     3 [unused]
//   float3 CameraPositionFractions_Previous;// Index:   46.xyz            Components:     3 [unused]
//   float3 CameraRight;                // Index:   47.xyz            Components:     3 [unused]
//   float3 CameraUp;                   // Index:   48.xyz            Components:     3 [unused]
//   float3 CameraDirection;            // Index:   49.xyz            Components:     3 [unused]
//   float3 DepthTextureRcpSize;        // Index:   50.xyz            Components:     3 [unused]
//   float2 MotionVectorOffsets;        // Index:   51.xy             Components:     2 [unused]
//   float2 DepthRangeCompression;      // Index:   51.zw             Components:     2 [unused]
//   float ShadowProjDepthMinValue;     // Index:   52.x              Components:     1 [unused]
//   float DistanceScale;               // Index:   52.y              Components:     1 [unused]
//   float WorldSpaceZOffset;           // Index:   52.z              Components:     1 [unused]
//   float WorldSpaceZOffset_Previous;  // Index:   52.w              Components:     1 [unused]
//   float CameraFOVDeg;                // Index:   53.x              Components:     1 [unused]
//   float CameraTanHalfFOV;            // Index:   53.y              Components:     1 [unused]
//   float EffectsEmissiveEVBias;       // Index:   53.z              Components:     1 [unused]
//   float ShadowCSMLastSliceIndex;     // Index:   53.w              Components:     1 [unused]
//   float SkyHeight;                   // Index:   54.x              Components:     1 [unused]
//   float ViewportMipBias;             // Index:   54.y              Components:     1
//   float CameraDistanceRatio;         // Index:   54.z              Components:     1 [unused]
//   float StormFactor;                 // Index:   54.w              Components:     1 [unused]
//   float4 LocalToneMappingParams;     // Index:   55.xyzw           Components:     4 [unused]
//   float SkyLightingReference;        // Index:   56.x              Components:     1 [unused]
//   float SkyLocalToneMappingScale;    // Index:   56.y              Components:     1 [unused]
//   float4x4 ProbeMatrix[16];          // Index:   57-120            Components:   256 [unused]
//   int ProbeMask;                     // Index:  121.x              Components:     1 [unused]
//
// }
//
// cbuffer CGlobalShaderParameterProvider
// {
//
//   float4 BurnColor;                  // Index:    0.xyzw           Components:     4 [unused]
//   float4 BurnParams;                 // Index:    1.xyzw           Components:     4
//   float4 BurnParams2;                // Index:    2.xyzw           Components:     4 [unused]
//   float4 BurnParams3;                // Index:    3.xyzw           Components:     4
//   float4 BurnParams4;                // Index:    4.xyzw           Components:     4
//   float4 BurnParams5;                // Index:    5.xyzw           Components:     4
//   float4 CascadedShadowScaleOffsetTile0;// Index:    6.xyzw           Components:     4 [unused]
//   float4 CascadedShadowScaleOffsetTile1;// Index:    7.xyzw           Components:     4 [unused]
//   float4 WindSimParams;              // Index:    8.xyzw           Components:     4 [unused]
//   float4 WindDirection;              // Index:    9.xyzw           Components:     4 [unused]
//   float4 PrevWindSimParams;          // Index:   10.xyzw           Components:     4 [unused]
//   float4 PrevWindDirection;          // Index:   11.xyzw           Components:     4 [unused]
//   float Time;                        // Index:   12.x              Components:     1 [unused]
//   float Time_Previous;               // Index:   12.y              Components:     1 [unused]
//   float UITime;                      // Index:   12.z              Components:     1 [unused]
//   float NormalizedTimeOfDay;         // Index:   12.w              Components:     1 [unused]
//   float FireGlowEV;                  // Index:   13.x              Components:     1 [unused]
//   float BurnSpeedScale;              // Index:   13.y              Components:     1 [unused]
//   float BurnlineMaskScale;           // Index:   13.z              Components:     1 [unused]
//   float BurnlineMaskInfluence;       // Index:   13.w              Components:     1 [unused]
//   float WorldSpaceProgressionMaskScale;// Index:   14.x              Components:     1 [unused]
//   float WorldSpaceProgressionMaskInfluence;// Index:   14.y              Components:     1 [unused]
//   float MaskTransitionSpeedModifier; // Index:   14.z              Components:     1 [unused]
//   float GlowMaskScale;               // Index:   14.w              Components:     1 [unused]
//   float FireGlowMaskInfluence;       // Index:   15.x              Components:     1 [unused]
//   float CenterBurnlineWidth;         // Index:   15.y              Components:     1 [unused]
//   float TransitionToBurnlineWidth;   // Index:   15.z              Components:     1 [unused]
//   float DissolveCutoffPoint;         // Index:   15.w              Components:     1 [unused]
//   float DissolveBlendDistance;       // Index:   16.x              Components:     1 [unused]
//   float WetnessFactor;               // Index:   16.y              Components:     1 [unused]
//   float DirtFactor;                  // Index:   16.z              Components:     1 [unused]
//   float IronSightFactor;             // Index:   16.w              Components:     1 [unused]
//   float3 DeprecatedShaderColor;      // Index:   17.xyz            Components:     3 [unused]
//   float HDRReferenceWhiteNits;       // Index:   17.w              Components:     1 [unused]
//   bool SCRGB;                        // Index:   18.x              Components:     1 [unused]
//   bool Isolate0;                     // Index:   18.y              Components:     1 [unused]
//   bool Isolate1;                     // Index:   18.z              Components:     1 [unused]
//   bool Isolate2;                     // Index:   18.w              Components:     1 [unused]
//   bool Isolate3;                     // Index:   19.x              Components:     1 [unused]
//
// }
//
// cbuffer CTerrainRendererConfigParameterProvider
// {
//
//   float2 TerrainSplatTextureSize;    // Index:    0.xy             Components:     2 [unused]
//   float2 TerrainSplatTextureSize_Dynamic;// Index:    0.zw             Components:     2 [unused]
//   float2 TerrainDomainTextureSize;   // Index:    1.xy             Components:     2 [unused]
//   float2 TerrainHeightTextureSize;   // Index:    1.zw             Components:     2 [unused]
//   float2 TerrainHeightScaleOffset;   // Index:    2.xy             Components:     2 [unused]
//   float4 TerrainUVScaleOffset;       // Index:    3.xyzw           Components:     4
//   float4 TerrainUVScaleOffset_Dynamic;// Index:    4.xyzw           Components:     4
//   float4 TerrainHeightUVScaleOffset; // Index:    5.xyzw           Components:     4 [unused]
//   float4 TerrainSplatUVScaleOffset;  // Index:    6.xyzw           Components:     4 [unused]
//   float4 TerrainSplatUVScaleOffset_Dynamic;// Index:    7.xyzw           Components:     4 [unused]
//   float4 TerrainSplatMaskUVScaleOffset;// Index:    8.xyzw           Components:     4 [unused]
//   float2 TerrainColorBlendConstants; // Index:    9.xy             Components:     2
//   float2 TerrainCliffDetailBlendConstants;// Index:    9.zw             Components:     2 [unused]
//   float TerrainCliffFarDistance;     // Index:   10.x              Components:     1 [unused]
//   float2 TerrainAtlasBlendConstants; // Index:   10.yz             Components:     2 [unused]
//   float2 TerrainSplatSlopeBlendRange;// Index:   11.xy             Components:     2 [unused]
//   float2 TerrainSlopeDebugRange;     // Index:   11.zw             Components:     2 [unused]
//   float4 TerrainDebugLayerScale;     // Index:   12.xyzw           Components:     4 [unused]
//   float4 TerrainDebugLayerBias;      // Index:   13.xyzw           Components:     4 [unused]
//   int TerrainDebugLayerBlendMode;    // Index:   14.x              Components:     1 [unused]
//   int TerrainSplatMaskIDs;           // Index:   14.y              Components:     1 [unused]
//
// }
//
// cbuffer CTerrainSampleParameterProvider
// {
//
//   float4 TerrainSampleClipRegion;    // Index:    0.xyzw           Components:     4
//   float4 TerrainSampleWorldToSectorSpace;// Index:    1.xyzw           Components:     4
//   float TerrainSampleSectorStride;   // Index:    2.x              Components:     1
//   bool TerrainSampleIsDynamicNode;   // Index:    2.y              Components:     1
//
// }
//
// cbuffer CVirtualTextureSampleParameterProvider
// {
//
//   float4 VirtualTextureSampleClipRegion;// Index:    0.xyzw           Components:     4
//   float4 VirtualTextureSampleWorldToSectorSpace;// Index:    1.xyzw           Components:     4
//   float VirtualTextureSampleSectorStride;// Index:    2.x              Components:     1
//   float2 VirtualTextureMipBias;      // Index:    2.yz             Components:     2
//   int2 VirtualTextureDither;         // Index:    3.xy             Components:     2
//
// }
//
// cbuffer CTerrainSectorBurnProvider
// {
//
//   float2 BurnSectorMin;              // Index:    0.xy             Components:     2
//   float2 BurnSectorMax;              // Index:    0.zw             Components:     2
//   bool BurnEnabled;                  // Index:    1.x              Components:     1 [unused]
//
// }
//
// Resource bind info for TerrainSampleSectorDescs
// {
//
//   uint2 $Element;                    // Index:    0.xy             Components:     2
//
// }
//
// Resource bind info for VirtualTextureSampleSectorDescs
// {
//
//   int4 $Element;                     // Index:    0.xyzw           Components:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Wrap                              sampler      NA          NA    0        1
// Clamp                             sampler      NA          NA    1        1
// Aniso2XClamp                      sampler      NA          NA    2        1
// TerrainSampleColorTexture         texture  float4     2darray    0        1
// TerrainSampleSectorDescs          texture  struct         r/o    1        1
// PageTableTexture                  texture    uint          2d    2        1
// DiffuseVTexture                   texture  float4          2d    3        1
// NormalVTexture                    texture  float4          2d    4        1
// SpecularVTexture                  texture  float4          2d    5        1
// VirtualTextureSampleSectorDescs    texture  struct         r/o    6        1
// BurnedTerrainLookupTexture        texture   float          2d    7        1
// BurnedTerrainNoiseTexture         texture   float          2d    8        1
// GeometryTexture                   texture  float4          2d    9        1
// DepthTexture                      texture   float          2d   10        1
// PageIDOutputTexture                   UAV    uint          2d    3        1
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// CGlobalShaderParameterProvider    cbuffer      NA          NA    1        1
// CTerrainRendererConfigParameterProvider    cbuffer      NA          NA    2        1
// CTerrainSampleParameterProvider    cbuffer      NA          NA    3        1
// CVirtualTextureSampleParameterProvider    cbuffer      NA          NA    4        1
// CTerrainSectorBurnProvider        cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy
// SV_IsFrontFace           0   x           1    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[55], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[10], immediateIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_constantbuffer cb4[4], immediateIndexed
dcl_constantbuffer cb5[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2darray (float,float,float,float) t0
dcl_resource_structured t1, 8
dcl_resource_texture2d (uint,uint,uint,uint) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_structured t6, 16
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_uav_typed_texture2d (uint,uint,uint,uint) u3
dcl_input_ps_siv linear noperspective centroid v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 11
dcl_resource_texture2d (float,float,float,float) t125
ld_indexable(texture2d)(float,float,float,float) r10.xyzw, l(0, 0, 0, 0), t125.xyzw

ftoi r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyww, t9.xyzw
mad r1.xyzw, r1.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
add r2.xyz, -|r1.xyxx|, l(1.000000, 1.000000, 1.000000, 0.000000)
add r3.z, -|r1.y|, r2.x
ge r2.x, r3.z, l(0.000000)
ge r4.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
movc r4.xyzw, r4.xyzw, l(1.000000,1.000000,1.000000,1.000000), l(-1.000000,-1.000000,-1.000000,-1.000000)
mul r2.yz, r2.yyzy, r4.xxyx
movc r3.xy, r2.xxxx, r1.xyxx, r2.yzyy
dp3 r1.x, r3.xyzx, r3.xyzx
rsq r1.x, r1.x
mul r2.xyz, r1.xxxx, r3.xyzx
add r3.xyz, -|r1.zwzz|, l(1.000000, 1.000000, 1.000000, 0.000000)
add r5.z, -|r1.w|, r3.x
ge r1.x, r5.z, l(0.000000)
mul r3.xy, r4.zwzz, r3.yzyy
movc r5.xy, r1.xxxx, r1.zwzz, r3.xyxx
dp3 r1.x, r5.xyzx, r5.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, r5.xyzx
mul r3.xy, v0.xyxx, cb0[40].zwzz
mad r3.xy, r3.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)

//   r3.z = DepthTexture.Load(r0.xyz).x;
ld_indexable(texture2d)(float,float,float,float) r3.z, r0.xyzw, t10.yzxw
mov r3.w, l(1.000000)

// InvProjectionMatrix
dp4 r4.x, r3.xyzw, cb0[0].xyzw
dp4 r4.y, r3.xyzw, cb0[1].xyzw
dp4 r4.z, r3.xyzw, cb0[2].xyzw
dp4 r0.z, r3.xyzw, cb0[3].xyzw

// Linear depth now in -r4.z/r0.z, copy to temp reg:
div r10.z, -r4.z, r0.z
// Calculate stereo correction amount:
add r10.w, r10.z, -r10.y
mul r10.w, r10.w, -r10.x
mul r10.w, r10.w, cb0[0].x // View-space
div r10.w, r10.w, r10.z // Perspective divide
// Remove stereo correction in view-space:
add r4.x, r4.x, r10.w

div r3.xyz, r4.xyzx, r0.zzzz

dp3 r4.x, r3.xyzx, cb0[4].xyzx
dp3 r4.y, r3.xyzx, cb0[5].xyzx
dp3 r4.z, r3.xyzx, cb0[6].xyzx
add r3.xyz, r4.xyzx, cb0[43].xyzx
add r5.xyzw, v0.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
mul r5.xyzw, r5.xyzw, cb0[40].zwzw
mad r5.xyzw, r5.zwxy, l(2.000000, -2.000000, 2.000000, -2.000000), l(-1.000000, 1.000000, -1.000000, 1.000000)
mov r6.xy, r5.zwzz
mov r6.zw, l(0,0,-1.000000,1.000000)

// InvProjectionMatrix
dp4 r7.x, r6.xyzw, cb0[0].xyzw
dp4 r7.y, r6.xyzw, cb0[1].xyzw
dp4 r7.z, r6.xyzw, cb0[2].xyzw
dp4 r0.z, r6.xyzw, cb0[3].xyzw

// Remove stereo correction in view-space:
add r7.x, r7.x, r10.w

div r6.xyz, r7.xyzx, r0.zzzz

dp3 r7.x, r6.xyzx, cb0[4].xyzx
dp3 r7.y, r6.xyzx, cb0[5].xyzx
dp3 r7.z, r6.xyzx, cb0[6].xyzx
dp3 r0.z, r7.xyzx, r7.xyzx
rsq r0.z, r0.z
mul r6.xyz, r0.zzzz, r7.xyzx
dp3 r0.z, r2.xyzx, r6.xyzx
dp3 r0.w, r2.xyzx, r4.xyzx
div r0.z, r0.w, r0.z
mad r4.zw, r0.zzzz, r6.xxxy, -r4.xxxy
mov r5.zw, l(0,0,-1.000000,1.000000)

// InvProjectionMatrix
dp4 r6.x, r5.xyzw, cb0[0].xyzw
dp4 r6.y, r5.xyzw, cb0[1].xyzw
dp4 r6.z, r5.xyzw, cb0[2].xyzw
dp4 r0.z, r5.xyzw, cb0[3].xyzw

// Remove stereo correction in view-space:
add r6.x, r6.x, r10.w

div r5.xyz, r6.xyzx, r0.zzzz

dp3 r6.x, r5.xyzx, cb0[4].xyzx
dp3 r6.y, r5.xyzx, cb0[5].xyzx
dp3 r6.z, r5.xyzx, cb0[6].xyzx
dp3 r0.z, r6.xyzx, r6.xyzx
rsq r0.z, r0.z
mul r5.xyz, r0.zzzz, r6.xyzx
dp3 r0.z, r2.xyzx, r5.xyzx
div r0.z, r0.w, r0.z
mad r0.zw, r0.zzzz, r5.xxxy, -r4.xxxy
dp2 r1.w, r4.xyxx, r4.xyxx
sqrt r1.w, r1.w
add r1.w, r1.w, -cb0[41].x
lt r2.x, l(0.000000), r1.w
mul r1.w, r1.w, cb0[41].y
lt r2.y, r1.w, l(1.000000)
mul r2.z, r1.w, r1.w
mad r1.w, -r1.w, l(2.000000), l(3.000000)
mul r1.w, r1.w, r2.z
mul r1.w, r1.w, cb0[41].z
movc r1.w, r2.y, r1.w, cb0[41].z
and r1.w, r1.w, r2.x
add r3.w, r1.w, r3.z
add r2.xyz, -r3.xywx, cb0[43].xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
sqrt r1.w, r1.w
mad r2.xy, r3.xyxx, cb3[0].xyxx, cb3[0].zwzz
max r2.x, |r2.y|, |r2.x|
ge r2.x, l(1.000000), r2.x
mad r2.yz, r3.xxyx, cb3[1].xxyx, cb3[1].zzwz
round_ni r3.zw, r2.zzzy
ftou r3.zw, r3.zzzw
frc r2.yz, r2.yyzy
utof r4.xy, r3.zwzz
mad r2.w, r4.x, cb3[2].x, r4.y
and r2.w, r2.w, r2.x
ftoi r2.w, r2.w
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r4.xy, r2.w, l(0), t1.xyxx
ishl r2.w, r3.w, l(16)
or r2.w, r3.z, r2.w
and r3.zw, r4.xxxy, l(0, 0, 1023, 1023)
movc r5.xy, r3.zwzz, l(1,8,0,0), l(0,0,0,0)
ubfe r6.xyzw, l(10, 10, 10, 10), l(10, 20, 10, 20), r4.xxyy
movc r7.xyzw, r6.xyzw, l(2,4,16,32), l(0,0,0,0)
iadd r4.x, r5.x, r7.x
iadd r4.x, r7.y, r4.x
iadd r4.x, r5.y, r4.x
iadd r4.x, r7.z, r4.x
iadd r4.x, r7.w, r4.x
and r2.x, r2.x, r4.x
firstbit_lo r2.x, r2.x
ieq r5.xyzw, r2.xxxx, l(1, 2, 3, 4)
movc r4.x, r5.w, r6.z, r6.w
movc r3.w, r5.z, r3.w, r4.x
movc r3.w, r5.y, r6.y, r3.w
movc r3.w, r5.x, r6.x, r3.w
movc r3.z, r2.x, r3.w, r3.z
iadd r3.z, r3.z, l(-1)
ishl r3.w, l(1), r2.x
utof r3.w, r3.w
div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
ushr r4.x, r2.w, l(16)
and r4.y, r2.w, l(0x0000ffff)
ubfe r2.xw, r2.xxxx, l(0, 0, 0, 0), r4.xxxy
utof r2.xw, r2.xxxw
add r2.xy, r2.xwxx, r2.yzyy
mul r2.xy, r3.wwww, r2.xyxx
utof r5.z, r3.z
movc r6.xyzw, cb3[2].yyyy, cb2[4].xyzw, cb2[3].xyzw
mad r5.xy, r6.xyxx, r2.xyxx, r6.zwzz
sample_l_indexable(texture2darray)(float,float,float,float) r2.xyz, r5.xyzx, t0.xyzw, s2, l(0.000000)
exp r2.w, cb0[54].y
mul r3.zw, r2.wwww, r4.zzzw
mul r0.zw, r0.zzzw, r2.wwww
mad r4.xy, r3.xyxx, cb4[0].xyxx, cb4[0].zwzz
max r2.w, |r4.y|, |r4.x|
ge r2.w, l(1.000000), r2.w
and r2.w, r2.w, l(0x3f800000)
mad r4.xyzw, r3.xyxy, cb4[1].xyxy, cb4[1].zwzw
round_ni r5.xyzw, r4.zwzw
mad r6.x, r5.w, cb4[2].x, r5.z
mul r2.w, r2.w, r6.x
ftoi r2.w, r2.w
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r6.xyzw, r2.w, l(0), t6.xyzw
add r4.xyzw, r4.xyzw, -r5.xyzw
and r2.w, r6.w, l(0x0000ffff)
mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.015625, 0.015625)
mul r3.zw, r6.xxxx, r3.zzzw
mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.015625, 0.015625)
mul r0.zw, r6.xxxx, r0.zzzw
mul r3.zw, r3.zzzw, cb4[2].yyyy
mul r0.zw, r0.zzzw, cb4[2].yyyy
itof r2.w, r2.w
dp2 r5.x, r3.zwzz, r3.zwzz
dp2 r5.y, r0.zwzz, r0.zwzz
max r5.xy, r5.xyxx, l(9.999999939E-009, 9.999999939E-009, 0.000000, 0.000000)
max r5.z, r5.y, r5.x
log r5.z, r5.z
mul r5.w, r5.z, l(0.500000)
min r5.x, r5.y, r5.x
log r5.x, r5.x
mad r5.x, -r5.x, l(0.500000), r5.w
min r5.x, r5.x, l(2.000000)
mad r5.x, r5.z, l(0.500000), -r5.x
add r5.y, r5.x, cb4[2].z
max r5.y, r5.y, l(0.000000)
min r5.y, r2.w, r5.y
round_pi r5.z, r5.y
add r5.w, r5.z, l(-1.000000)
max r5.w, r5.w, l(0.000000)
min r5.zw, r2.wwww, r5.zzzw
add_sat r5.y, -r5.w, r5.y
mul r4.xyzw, r6.xxxx, r4.xyzw
add r6.x, r6.x, l(-1.000000)
min r4.xyzw, r4.xyzw, r6.xxxx
add r4.xyzw, r6.yzyz, r4.xyzw
mul r4.xyzw, r4.xyzw, l(0.00390625000, 0.00390625000, 0.00000190734863, 0.00000190734863)
ftou r4.xy, r4.xyxx
ftou r7.xyzw, v0.xyyy
and r6.xy, r7.xwxx, l(7, 7, 0, 0)
ieq r6.xy, r6.xyxx, cb4[3].xyxx
and r6.x, r6.y, r6.x
if_nz r6.x
  ishr r6.x, r6.w, l(16)
  round_ni r5.x, r5.x
  max r5.x, r5.x, l(0.000000)
  min r2.w, r2.w, r5.x
  ftou r2.w, r2.w
  ushr r6.yz, r4.xxyx, r2.wwww
  ishl r5.x, r6.x, l(28)
  ishl r2.w, r2.w, l(24)
  or r2.w, r2.w, r5.x
  ishl r5.x, r6.z, l(12)
  or r2.w, r2.w, r5.x
  or r2.w, r6.y, r2.w
  ushr r6.xyzw, r7.xyzw, l(3, 3, 3, 3)
  store_uav_typed u3.xyzw, r6.xyzw, r2.wwww
endif
ftoi r6.zw, r5.wwww
ishr r2.w, l(2048), r6.w
itof r2.w, r2.w
mul r7.xy, r2.wwww, r4.zwzz
ftoi r6.xy, r7.xyxx
ld_indexable(texture2d)(uint,uint,uint,uint) r2.w, r6.xyzw, t2.yzwx
and r5.x, r2.w, l(63)
ubfe r6.xy, l(6, 4, 0, 0), l(6, 12, 0, 0), r2.wwww
ishr r2.w, l(0x00080000), r6.y
itof r2.w, r2.w
mul r2.w, r2.w, l(0.0000946969667)
ushr r6.zw, r4.xxxy, r6.yyyy
utof r6.zw, r6.zzzw
ishl r7.xy, l(256, 1, 0, 0), r6.yyyy
itof r7.xy, r7.xyxx
mul r6.y, r7.x, l(0.00000190734863)
itof r8.x, r5.x
itof r8.y, r6.x
mad r7.xz, r8.xxyx, l(264.000000, 0.000000, 264.000000, 0.000000), l(4.000000, 0.000000, 4.000000, 0.000000)
mul r7.xz, r7.xxzx, l(0.0000946969667, 0.000000, 0.0000946969667, 0.000000)
mad r6.xy, -r6.zwzz, r6.yyyy, r4.zwzz
mad r6.xy, r6.xyxx, r2.wwww, r7.xzxx
mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.0000946969667, 0.0000946969667)
div r3.zw, r3.zzzw, r7.yyyy
mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.0000946969667, 0.0000946969667)
div r0.zw, r0.zzzw, r7.yyyy
sample_d_indexable(texture2d)(float,float,float,float) r7.xyz, r6.xyxx, t3.xyzw, s2, r3.zwzz, r0.zwzz
sample_d_indexable(texture2d)(float,float,float,float) r6.zw, r6.xyxx, t4.zwxy, s2, r3.zwzz, r0.zwzz
sample_d_indexable(texture2d)(float,float,float,float) r8.xyz, r6.xyxx, t5.xyzw, s2, r3.zwzz, r0.zwzz
mul r7.xyz, r7.xyzx, r7.xyzx
mad r6.xy, r6.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r2.w, r6.xyxx, r6.xyxx
add r2.w, -r2.w, l(1.000000)
max r2.w, r2.w, l(0.000000)
sqrt r6.z, r2.w
add r2.w, -r8.z, l(1.000000)
ftoi r9.zw, r5.zzzz
ishr r5.x, l(2048), r9.w
itof r5.x, r5.x
mul r8.zw, r4.zzzw, r5.xxxx
ftoi r9.xy, r8.zwzz
ld_indexable(texture2d)(uint,uint,uint,uint) r5.x, r9.xyzw, t2.xyzw
and r6.w, r5.x, l(63)
ubfe r8.zw, l(0, 0, 6, 4), l(0, 0, 6, 12), r5.xxxx
ishr r5.x, l(0x00080000), r8.w
itof r5.x, r5.x
mul r5.x, r5.x, l(0.0000946969667)
ushr r4.xy, r4.xyxx, r8.wwww
utof r4.xy, r4.xyxx
ishl r7.w, l(256), r8.w
itof r7.w, r7.w
mul r7.w, r7.w, l(0.00000190734863)
itof r9.x, r6.w
itof r9.y, r8.z
mad r8.zw, r9.xxxy, l(0.000000, 0.000000, 264.000000, 264.000000), l(0.000000, 0.000000, 4.000000, 4.000000)
mul r8.zw, r8.zzzw, l(0.000000, 0.000000, 0.0000946969667, 0.0000946969667)
mad r4.xy, -r4.xyxx, r7.wwww, r4.zwzz
mad r4.xy, r4.xyxx, r5.xxxx, r8.zwzz
mul r4.zw, r3.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
add r5.x, -r5.w, r5.z
mad r3.zw, -r4.zzzw, r5.xxxx, r3.zzzw
mul r4.zw, r0.zzzw, r5.xxxx
mad r0.zw, -r4.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), r0.zzzw
sample_d_indexable(texture2d)(float,float,float,float) r5.xzw, r4.xyxx, t3.xwyz, s2, r3.zwzz, r0.zwzz
sample_d_indexable(texture2d)(float,float,float,float) r4.zw, r4.xyxx, t4.zwxy, s2, r3.zwzz, r0.zwzz
sample_d_indexable(texture2d)(float,float,float,float) r9.xyz, r4.xyxx, t5.xyzw, s2, r3.zwzz, r0.zwzz
mad r4.xy, r4.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.z, r4.xyxx, r4.xyxx
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000000)
sqrt r4.z, r0.z
add r0.z, -r9.z, l(1.000000)
mul r0.w, r5.y, r5.y
mad r5.xyz, r5.xzwx, r5.xzwx, -r7.xyzx
mad r5.xyz, r0.wwww, r5.xyzx, r7.xyzx
add r4.xyz, -r6.xyzx, r4.xyzx
mad r4.xyz, r0.wwww, r4.xyzx, r6.xyzx
add r3.zw, -r8.yyyx, r9.yyyx
mad r3.zw, r0.wwww, r3.zzzw, r8.yyyx
add r0.z, -r2.w, r0.z
mad r0.z, r0.w, r0.z, r2.w
mad_sat r0.w, r1.w, cb2[9].x, cb2[9].y
mul r0.z, r0.z, r0.w
add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mad r2.xyz, r0.zzzz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mul r2.xyz, r2.xyzx, r5.xyzx
add r2.xyz, r2.xyzx, r2.xyzx
ge r0.z, r1.z, l(0.000000)
movc r5.z, r0.z, l(1.000000), l(-1.000000)
mul r6.x, r1.z, r5.z
mov r6.yz, l(0,0,0,0)
mov r5.xy, l(0,0,0,0)
mad r5.xyw, -r5.xyxz, r1.yzyx, r6.xyxz
dp2 r0.z, r5.xwxx, r5.xwxx
rsq r0.z, r0.z
mul r5.xyw, r0.zzzz, r5.xyxw
mul r6.xyz, r1.zxyz, r5.ywxy
mad r6.xyz, r1.yzxy, r5.wxyw, -r6.xyzx
dp3 r0.z, r6.xyzx, r6.xyzx
rsq r0.z, r0.z
mul r6.xyz, r0.zzzz, r6.xyzx
mul r6.xyz, r5.zzzz, r6.xyzx
mul r6.xyz, r4.yyyy, r6.xyzx
mad r4.xyw, r4.xxxx, r5.xyxw, r6.xyxz
mad r1.xyz, r4.zzzz, r1.xyzx, r4.xywx
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, r1.xyzx
add r0.zw, r3.xxxy, -cb5[0].xxxy
add r4.xy, -cb5[0].xyxx, cb5[0].zwzz
div r4.xy, r0.zwzz, r4.xyxx
add r4.z, -r4.y, l(1.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.z, r4.xzxx, t7.yzxw, s1, l(0.000000)
mad r4.xy, r4.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
add r4.xy, |r4.xyxx|, l(-0.700000, -0.700000, 0.000000, 0.000000)
mul_sat r4.xy, r4.xyxx, l(3.33333325, 3.33333325, 0.000000, 0.000000)
mad r0.z, r4.x, -r0.z, r0.z
mad_sat r0.z, r4.y, -r0.z, r0.z
mul r3.xy, r3.xyxx, cb1[3].wwww
mul r3.xy, r3.xyxx, l(0.070000, 0.070000, 0.000000, 0.000000)
sample_b_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t8.yzwx, s0, cb0[54].y
add r1.w, -cb1[1].z, cb1[3].z
mad r0.w, r0.w, r1.w, cb1[1].z
add r0.w, r0.w, l(-1.000000)
mad r0.z, r0.z, r0.w, l(1.000000)
mul r2.xyz, r0.zzzz, r2.xyzx
mul r0.w, r0.z, r3.w
mul r1.w, r3.z, cb1[4].z
mad r2.w, -r3.z, cb1[4].z, r3.z
mad o0.z, r0.z, r2.w, r1.w
mul r1.w, cb1[5].z, l(0.150000)
mad r2.w, -cb1[5].z, l(0.150000), l(0.150000)
mad r0.z, r0.z, r2.w, r1.w
sqrt r2.xyz, r2.xyzx
dp3 r3.x, l(0.250000, 0.500000, 0.250000, 0.000000), r2.xyzx
dp2 r3.y, l(0.500000, -0.500000, 0.000000, 0.000000), r2.xzxx
dp3 r3.z, l(-0.250000, 0.500000, -0.250000, 0.000000), r2.xyzx
add r2.xyz, r3.xyzx, l(0.000000, 0.498039216, 0.498039216, 0.000000)
and r0.xy, r0.xyxx, l(1, 1, 0, 0)
ieq r1.w, r0.y, r0.x
movc o0.y, r1.w, r2.y, r2.z
utof r0.x, r0.x
mad r1.w, r0.x, l(0.400000), l(0.200000)
mad r0.x, -r0.x, l(0.400000), l(0.800000)
movc r0.x, r0.y, r1.w, r0.x
mad r0.y, r0.w, l(15.000000), r0.x
round_ni r0.y, r0.y
mul r0.y, r0.y, l(16.000000)
ftou r0.y, r0.y
utof r0.y, r0.y
mul o0.w, r0.y, l(0.00392156886)
mad o1.xyz, r1.xyzx, l(0.498039216, 0.498039216, 0.498039216, 0.000000), l(0.498039216, 0.498039216, 0.498039216, 0.000000)
mad r0.x, r0.z, l(15.000000), r0.x
round_ni r0.x, r0.x
ftou r0.x, r0.x
utof r0.x, r0.x
mul o2.z, r0.x, l(0.00392156886)
mov o0.x, r2.x
mov o1.w, l(0)
mov o2.xyw, l(0.498039216,0.498039216,0,0)
ret
// Approximately 359 instruction slots used

///////////////////////////////// HLSL Code /////////////////////////////////
// // ---- Created with 3Dmigoto v1.3.16 on Sun Feb 02 17:45:29 2020
//
// cbuffer CViewportShaderParameterProvider : register(b0)
// {
//   float4x4 InvProjectionMatrix : packoffset(c0);
//   float4x4 InvViewMatrix : packoffset(c4);
//   float4x4 ProjectionMatrix : packoffset(c8);
//   float4x4 ViewMatrix : packoffset(c12);
//   float4x4 ViewProjectionMatrix : packoffset(c16);
//   float4x4 ViewRotProjectionMatrix : packoffset(c20);
//   float4x4 ViewRotProjectionMatrix_Previous : packoffset(c24);
//   float4 AmbientSHR : packoffset(c28);
//   float4 AmbientSHG : packoffset(c29);
//   float4 AmbientSHB : packoffset(c30);
//   float4 CameraDistances : packoffset(c31);
//   float4 CameraNearPlaneSize : packoffset(c32);
//   float4 DepthScale : packoffset(c33);
//   float4 DepthTextureScaleOffset : packoffset(c34);
//   float4 FogParams : packoffset(c35);
//   float4 FogSHB : packoffset(c36);
//   float4 FogSHG : packoffset(c37);
//   float4 FogSHR : packoffset(c38);
//   float4 HeightFogParams : packoffset(c39);
//   float4 ViewportSize : packoffset(c40);
//   float3 CurvedHorizonFactors : packoffset(c41);
//   float3 ViewPoint : packoffset(c42);
//   float3 CameraPosition : packoffset(c43);
//   float3 CameraPosition_Previous : packoffset(c44);
//   float3 CameraPositionFractions : packoffset(c45);
//   float3 CameraPositionFractions_Previous : packoffset(c46);
//   float3 CameraRight : packoffset(c47);
//   float3 CameraUp : packoffset(c48);
//   float3 CameraDirection : packoffset(c49);
//   float3 DepthTextureRcpSize : packoffset(c50);
//   float2 MotionVectorOffsets : packoffset(c51);
//   float2 DepthRangeCompression : packoffset(c51.z);
//   float ShadowProjDepthMinValue : packoffset(c52);
//   float DistanceScale : packoffset(c52.y);
//   float WorldSpaceZOffset : packoffset(c52.z);
//   float WorldSpaceZOffset_Previous : packoffset(c52.w);
//   float CameraFOVDeg : packoffset(c53);
//   float CameraTanHalfFOV : packoffset(c53.y);
//   float EffectsEmissiveEVBias : packoffset(c53.z);
//   float ShadowCSMLastSliceIndex : packoffset(c53.w);
//   float SkyHeight : packoffset(c54);
//   float ViewportMipBias : packoffset(c54.y);
//   float CameraDistanceRatio : packoffset(c54.z);
//   float StormFactor : packoffset(c54.w);
//   float4 LocalToneMappingParams : packoffset(c55);
//   float SkyLightingReference : packoffset(c56);
//   float SkyLocalToneMappingScale : packoffset(c56.y);
//   float4x4 ProbeMatrix[16] : packoffset(c57);
//   int ProbeMask : packoffset(c121);
// }
//
// cbuffer CGlobalShaderParameterProvider : register(b1)
// {
//   float4 BurnColor : packoffset(c0);
//   float4 BurnParams : packoffset(c1);
//   float4 BurnParams2 : packoffset(c2);
//   float4 BurnParams3 : packoffset(c3);
//   float4 BurnParams4 : packoffset(c4);
//   float4 BurnParams5 : packoffset(c5);
//   float4 CascadedShadowScaleOffsetTile0 : packoffset(c6);
//   float4 CascadedShadowScaleOffsetTile1 : packoffset(c7);
//   float4 WindSimParams : packoffset(c8);
//   float4 WindDirection : packoffset(c9);
//   float4 PrevWindSimParams : packoffset(c10);
//   float4 PrevWindDirection : packoffset(c11);
//   float Time : packoffset(c12);
//   float Time_Previous : packoffset(c12.y);
//   float UITime : packoffset(c12.z);
//   float NormalizedTimeOfDay : packoffset(c12.w);
//   float FireGlowEV : packoffset(c13);
//   float BurnSpeedScale : packoffset(c13.y);
//   float BurnlineMaskScale : packoffset(c13.z);
//   float BurnlineMaskInfluence : packoffset(c13.w);
//   float WorldSpaceProgressionMaskScale : packoffset(c14);
//   float WorldSpaceProgressionMaskInfluence : packoffset(c14.y);
//   float MaskTransitionSpeedModifier : packoffset(c14.z);
//   float GlowMaskScale : packoffset(c14.w);
//   float FireGlowMaskInfluence : packoffset(c15);
//   float CenterBurnlineWidth : packoffset(c15.y);
//   float TransitionToBurnlineWidth : packoffset(c15.z);
//   float DissolveCutoffPoint : packoffset(c15.w);
//   float DissolveBlendDistance : packoffset(c16);
//   float WetnessFactor : packoffset(c16.y);
//   float DirtFactor : packoffset(c16.z);
//   float IronSightFactor : packoffset(c16.w);
//   float3 DeprecatedShaderColor : packoffset(c17);
//   float HDRReferenceWhiteNits : packoffset(c17.w);
//   bool SCRGB : packoffset(c18);
//   bool Isolate0 : packoffset(c18.y);
//   bool Isolate1 : packoffset(c18.z);
//   bool Isolate2 : packoffset(c18.w);
//   bool Isolate3 : packoffset(c19);
// }
//
// cbuffer CTerrainRendererConfigParameterProvider : register(b2)
// {
//   float2 TerrainSplatTextureSize : packoffset(c0);
//   float2 TerrainSplatTextureSize_Dynamic : packoffset(c0.z);
//   float2 TerrainDomainTextureSize : packoffset(c1);
//   float2 TerrainHeightTextureSize : packoffset(c1.z);
//   float2 TerrainHeightScaleOffset : packoffset(c2);
//   float4 TerrainUVScaleOffset : packoffset(c3);
//   float4 TerrainUVScaleOffset_Dynamic : packoffset(c4);
//   float4 TerrainHeightUVScaleOffset : packoffset(c5);
//   float4 TerrainSplatUVScaleOffset : packoffset(c6);
//   float4 TerrainSplatUVScaleOffset_Dynamic : packoffset(c7);
//   float4 TerrainSplatMaskUVScaleOffset : packoffset(c8);
//   float2 TerrainColorBlendConstants : packoffset(c9);
//   float2 TerrainCliffDetailBlendConstants : packoffset(c9.z);
//   float TerrainCliffFarDistance : packoffset(c10);
//   float2 TerrainAtlasBlendConstants : packoffset(c10.y);
//   float2 TerrainSplatSlopeBlendRange : packoffset(c11);
//   float2 TerrainSlopeDebugRange : packoffset(c11.z);
//   float4 TerrainDebugLayerScale : packoffset(c12);
//   float4 TerrainDebugLayerBias : packoffset(c13);
//   int TerrainDebugLayerBlendMode : packoffset(c14);
//   int TerrainSplatMaskIDs : packoffset(c14.y);
// }
//
// cbuffer CTerrainSampleParameterProvider : register(b3)
// {
//   float4 TerrainSampleClipRegion : packoffset(c0);
//   float4 TerrainSampleWorldToSectorSpace : packoffset(c1);
//   float TerrainSampleSectorStride : packoffset(c2);
//   bool TerrainSampleIsDynamicNode : packoffset(c2.y);
// }
//
// cbuffer CVirtualTextureSampleParameterProvider : register(b4)
// {
//   float4 VirtualTextureSampleClipRegion : packoffset(c0);
//   float4 VirtualTextureSampleWorldToSectorSpace : packoffset(c1);
//   float VirtualTextureSampleSectorStride : packoffset(c2);
//   float2 VirtualTextureMipBias : packoffset(c2.y);
//   int2 VirtualTextureDither : packoffset(c3);
// }
//
// cbuffer CTerrainSectorBurnProvider : register(b5)
// {
//   float2 BurnSectorMin : packoffset(c0);
//   float2 BurnSectorMax : packoffset(c0.z);
//   bool BurnEnabled : packoffset(c1);
// }
//
// SamplerState Wrap_s : register(s0);
// SamplerState Clamp_s : register(s1);
// SamplerState Aniso2XClamp_s : register(s2);
// Texture2DArray<float4> TerrainSampleColorTexture : register(t0);
// StructuredBuffer<uint2> TerrainSampleSectorDescs : register(t1);
// Texture2D<uint> PageTableTexture : register(t2);
// Texture2D<float4> DiffuseVTexture : register(t3);
// Texture2D<float4> NormalVTexture : register(t4);
// Texture2D<float4> SpecularVTexture : register(t5);
// StructuredBuffer<int4> VirtualTextureSampleSectorDescs : register(t6);
// Texture2D<float> BurnedTerrainLookupTexture : register(t7);
// Texture2D<float> BurnedTerrainNoiseTexture : register(t8);
// Texture2D<float4> GeometryTexture : register(t9);
// Texture2D<float> DepthTexture : register(t10);
// RWTexture2D<uint> PageIDOutputTexture : register(u3);
//
//
// // 3Dmigoto declarations
// #define cmp -
// Texture1D<float4> IniParams : register(t120);
// Texture2D<float4> StereoParams : register(t125);
//
//
// void main(
//   float4 v0 : SV_Position0,
//   uint v1 : SV_IsFrontFace0,
//   out float4 o0 : SV_Target0,
//   out float4 o1 : SV_Target1,
//   out float4 o2 : SV_Target2)
// {
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_uav_typed_texture2d (uint,uint,uint,uint) u3
//   float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
//   uint4 bitmask, uiDest;
//   float4 fDest;
//
//   r0.xy = (int2)v0.xy;
//   r0.zw = float2(0,0);
//   r1.xyzw = GeometryTexture.Load(r0.xyw).xyzw;
//   r1.xyzw = r1.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
//   r2.xyz = float3(1,1,1) + -abs(r1.xyx);
//   r3.z = r2.x + -abs(r1.y);
//   r2.x = cmp(r3.z >= 0);
//   r4.xyzw = cmp(r1.xyzw >= float4(0,0,0,0));
//   r4.xyzw = r4.xyzw ? float4(1,1,1,1) : float4(-1,-1,-1,-1);
//   r2.yz = r4.xy * r2.yz;
//   r3.xy = r2.xx ? r1.xy : r2.yz;
//   r1.x = dot(r3.xyz, r3.xyz);
//   r1.x = rsqrt(r1.x);
//   r2.xyz = r3.xyz * r1.xxx;
//   r3.xyz = float3(1,1,1) + -abs(r1.zwz);
//   r5.z = r3.x + -abs(r1.w);
//   r1.x = cmp(r5.z >= 0);
//   r3.xy = r3.yz * r4.zw;
//   r5.xy = r1.xx ? r1.zw : r3.xy;
//   r1.x = dot(r5.xyz, r5.xyz);
//   r1.x = rsqrt(r1.x);
//   r1.xyz = r5.xyz * r1.xxx;
//   r3.xy = ViewportSize.zw * v0.xy;
//   r3.xy = r3.xy * float2(2,-2) + float2(-1,1);
//   r3.z = DepthTexture.Load(r0.xyz).x;
//   r3.w = 1;
//   r4.x = dot(r3.xyzw, InvProjectionMatrix._m00_m10_m20_m30);
//   r4.y = dot(r3.xyzw, InvProjectionMatrix._m01_m11_m21_m31);
//   r4.z = dot(r3.xyzw, InvProjectionMatrix._m02_m12_m22_m32);
//   r0.z = dot(r3.xyzw, InvProjectionMatrix._m03_m13_m23_m33);
//   r3.xyz = r4.xyz / r0.zzz;
//   r4.x = dot(r3.xyz, InvViewMatrix._m00_m10_m20);
//   r4.y = dot(r3.xyz, InvViewMatrix._m01_m11_m21);
//   r4.z = dot(r3.xyz, InvViewMatrix._m02_m12_m22);
//   r3.xyz = CameraPosition.xyz + r4.xyz;
//   r5.xyzw = float4(1,0,0,1) + v0.xyxy;
//   r5.xyzw = ViewportSize.zwzw * r5.xyzw;
//   r5.xyzw = r5.zwxy * float4(2,-2,2,-2) + float4(-1,1,-1,1);
//   r6.xy = r5.zw;
//   r6.zw = float2(-1,1);
//   r7.x = dot(r6.xyzw, InvProjectionMatrix._m00_m10_m20_m30);
//   r7.y = dot(r6.xyzw, InvProjectionMatrix._m01_m11_m21_m31);
//   r7.z = dot(r6.xyzw, InvProjectionMatrix._m02_m12_m22_m32);
//   r0.z = dot(r6.xyzw, InvProjectionMatrix._m03_m13_m23_m33);
//   r6.xyz = r7.xyz / r0.zzz;
//   r7.x = dot(r6.xyz, InvViewMatrix._m00_m10_m20);
//   r7.y = dot(r6.xyz, InvViewMatrix._m01_m11_m21);
//   r7.z = dot(r6.xyz, InvViewMatrix._m02_m12_m22);
//   r0.z = dot(r7.xyz, r7.xyz);
//   r0.z = rsqrt(r0.z);
//   r6.xyz = r7.xyz * r0.zzz;
//   r0.z = dot(r2.xyz, r6.xyz);
//   r0.w = dot(r2.xyz, r4.xyz);
//   r0.z = r0.w / r0.z;
//   r4.zw = r0.zz * r6.xy + -r4.xy;
//   r5.zw = float2(-1,1);
//   r6.x = dot(r5.xyzw, InvProjectionMatrix._m00_m10_m20_m30);
//   r6.y = dot(r5.xyzw, InvProjectionMatrix._m01_m11_m21_m31);
//   r6.z = dot(r5.xyzw, InvProjectionMatrix._m02_m12_m22_m32);
//   r0.z = dot(r5.xyzw, InvProjectionMatrix._m03_m13_m23_m33);
//   r5.xyz = r6.xyz / r0.zzz;
//   r6.x = dot(r5.xyz, InvViewMatrix._m00_m10_m20);
//   r6.y = dot(r5.xyz, InvViewMatrix._m01_m11_m21);
//   r6.z = dot(r5.xyz, InvViewMatrix._m02_m12_m22);
//   r0.z = dot(r6.xyz, r6.xyz);
//   r0.z = rsqrt(r0.z);
//   r5.xyz = r6.xyz * r0.zzz;
//   r0.z = dot(r2.xyz, r5.xyz);
//   r0.z = r0.w / r0.z;
//   r0.zw = r0.zz * r5.xy + -r4.xy;
//   r1.w = dot(r4.xy, r4.xy);
//   r1.w = sqrt(r1.w);
//   r1.w = -CurvedHorizonFactors.x + r1.w;
//   r2.x = cmp(0 < r1.w);
//   r1.w = CurvedHorizonFactors.y * r1.w;
//   r2.y = cmp(r1.w < 1);
//   r2.z = r1.w * r1.w;
//   r1.w = -r1.w * 2 + 3;
//   r1.w = r2.z * r1.w;
//   r1.w = CurvedHorizonFactors.z * r1.w;
//   r1.w = r2.y ? r1.w : CurvedHorizonFactors.z;
//   r1.w = r2.x ? r1.w : 0;
//   r3.w = r3.z + r1.w;
//   r2.xyz = CameraPosition.xyz + -r3.xyw;
//   r1.w = dot(r2.xyz, r2.xyz);
//   r1.w = sqrt(r1.w);
//   r2.xy = r3.xy * TerrainSampleClipRegion.xy + TerrainSampleClipRegion.zw;
//   r2.x = max(abs(r2.x), abs(r2.y));
//   r2.x = cmp(1 >= r2.x);
//   r2.yz = r3.xy * TerrainSampleWorldToSectorSpace.xy + TerrainSampleWorldToSectorSpace.zw;
//   r3.zw = floor(r2.zy);
//   r3.zw = (uint2)r3.zw;
//   r2.yz = frac(r2.yz);
//   r4.xy = (uint2)r3.zw;
//   r2.w = r4.x * TerrainSampleSectorStride + r4.y;
//   r2.w = r2.x ? r2.w : 0;
//   r2.w = (int)r2.w;
//   r4.xy = TerrainSampleSectorDescs[r2.w].xy;
//   r2.w = (uint)r3.w << 16;
//   r2.w = (int)r3.z | (int)r2.w;
//   r3.zw = (int2)r4.xy & int2(1023,1023);
//   r5.xy = r3.zw ? float2(1,8) : float2(0,0);
//   if (10 == 0) r6.x = 0; else if (10+10 < 32) {   r6.x = (uint)r4.x << (32-(10 + 10)); r6.x = (uint)r6.x >> (32-10);  } else r6.x = (uint)r4.x >> 10;
//   if (10 == 0) r6.y = 0; else if (10+20 < 32) {   r6.y = (uint)r4.x << (32-(10 + 20)); r6.y = (uint)r6.y >> (32-10);  } else r6.y = (uint)r4.x >> 20;
//   if (10 == 0) r6.z = 0; else if (10+10 < 32) {   r6.z = (uint)r4.y << (32-(10 + 10)); r6.z = (uint)r6.z >> (32-10);  } else r6.z = (uint)r4.y >> 10;
//   if (10 == 0) r6.w = 0; else if (10+20 < 32) {   r6.w = (uint)r4.y << (32-(10 + 20)); r6.w = (uint)r6.w >> (32-10);  } else r6.w = (uint)r4.y >> 20;
//   r7.xyzw = r6.xyzw ? float4(2,4,16,32) : float4(0,0,0,0);
//   r4.x = (int)r5.x + (int)r7.x;
//   r4.x = (int)r7.y + (int)r4.x;
//   r4.x = (int)r5.y + (int)r4.x;
//   r4.x = (int)r7.z + (int)r4.x;
//   r4.x = (int)r7.w + (int)r4.x;
//   r2.x = r2.x ? r4.x : 0;
//   r2.x = firstbitlow((uint)r2.x);
//   r5.xyzw = cmp((int4)r2.xxxx == int4(1,2,3,4));
//   r4.x = r5.w ? r6.z : r6.w;
//   r3.w = r5.z ? r3.w : r4.x;
//   r3.w = r5.y ? r6.y : r3.w;
//   r3.w = r5.x ? r6.x : r3.w;
//   r3.z = r2.x ? r3.w : r3.z;
//   r3.z = (int)r3.z + -1;
//   r3.w = 1 << (int)r2.x;
//   r3.w = (uint)r3.w;
//   r3.w = 1 / r3.w;
//   r4.x = (uint)r2.w >> 16;
//   r4.y = (int)r2.w & 0x0000ffff;
//   if (r2.x == 0) r2.x = 0; else if (r2.x+0 < 32) {   r2.x = (uint)r4.x << (32-(r2.x + 0)); r2.x = (uint)r2.x >> (32-r2.x);  } else r2.x = (uint)r4.x >> 0;
//   if (r2.x == 0) r2.w = 0; else if (r2.x+0 < 32) {   r2.w = (uint)r4.y << (32-(r2.x + 0)); r2.w = (uint)r2.w >> (32-r2.x);  } else r2.w = (uint)r4.y >> 0;
//   r2.xw = (uint2)r2.xw;
//   r2.xy = r2.yz + r2.xw;
//   r2.xy = r2.xy * r3.ww;
//   r5.z = (uint)r3.z;
//   r6.xyzw = TerrainSampleIsDynamicNode ? TerrainUVScaleOffset_Dynamic.xyzw : TerrainUVScaleOffset.xyzw;
//   r5.xy = r6.xy * r2.xy + r6.zw;
//   r2.xyz = TerrainSampleColorTexture.SampleLevel(Aniso2XClamp_s, r5.xyz, 0).xyz;
//   r2.w = exp2(ViewportMipBias);
//   r3.zw = r4.zw * r2.ww;
//   r0.zw = r2.ww * r0.zw;
//   r4.xy = r3.xy * VirtualTextureSampleClipRegion.xy + VirtualTextureSampleClipRegion.zw;
//   r2.w = max(abs(r4.x), abs(r4.y));
//   r2.w = cmp(1 >= r2.w);
//   r2.w = r2.w ? 1.000000 : 0;
//   r4.xyzw = r3.xyxy * VirtualTextureSampleWorldToSectorSpace.xyxy + VirtualTextureSampleWorldToSectorSpace.zwzw;
//   r5.xyzw = floor(r4.zwzw);
//   r6.x = r5.w * VirtualTextureSampleSectorStride + r5.z;
//   r2.w = r6.x * r2.w;
//   r2.w = (int)r2.w;
//   r6.xyzw = VirtualTextureSampleSectorDescs[r2.w].xyzw;
//   r4.xyzw = -r5.xyzw + r4.xyzw;
//   r2.w = (int)r6.w & 0x0000ffff;
//   r3.zw = float2(0.015625,0.015625) * r3.zw;
//   r3.zw = r3.zw * r6.xx;
//   r0.zw = float2(0.015625,0.015625) * r0.zw;
//   r0.zw = r0.zw * r6.xx;
//   r3.zw = VirtualTextureMipBias.xx * r3.zw;
//   r0.zw = VirtualTextureMipBias.xx * r0.zw;
//   r2.w = (int)r2.w;
//   r5.x = dot(r3.zw, r3.zw);
//   r5.y = dot(r0.zw, r0.zw);
//   r5.xy = max(float2(9.99999994e-009,9.99999994e-009), r5.xy);
//   r5.z = max(r5.x, r5.y);
//   r5.z = log2(r5.z);
//   r5.w = 0.5 * r5.z;
//   r5.x = min(r5.x, r5.y);
//   r5.x = log2(r5.x);
//   r5.x = -r5.x * 0.5 + r5.w;
//   r5.x = min(2, r5.x);
//   r5.x = r5.z * 0.5 + -r5.x;
//   r5.y = VirtualTextureMipBias.y + r5.x;
//   r5.y = max(0, r5.y);
//   r5.y = min(r5.y, r2.w);
//   r5.z = ceil(r5.y);
//   r5.w = -1 + r5.z;
//   r5.w = max(0, r5.w);
//   r5.zw = min(r5.zw, r2.ww);
//   r5.y = saturate(r5.y + -r5.w);
//   r4.xyzw = r4.xyzw * r6.xxxx;
//   r6.x = -1 + r6.x;
//   r4.xyzw = min(r6.xxxx, r4.xyzw);
//   r4.xyzw = r4.xyzw + r6.yzyz;
//   r4.xyzw = float4(0.00390625,0.00390625,1.90734863e-006,1.90734863e-006) * r4.xyzw;
//   r4.xy = (uint2)r4.xy;
//   r7.xyzw = (uint4)v0.xyyy;
//   r6.xy = (int2)r7.xw & int2(7,7);
//   r6.xy = cmp((int2)r6.xy == (int2)VirtualTextureDither.xy);
//   r6.x = r6.y ? r6.x : 0;
//   if (r6.x != 0) {
//     r6.x = (uint)r6.w >> 16;
//     r5.x = floor(r5.x);
//     r5.x = max(0, r5.x);
//     r2.w = min(r5.x, r2.w);
//     r2.w = (uint)r2.w;
//     r6.yz = (uint2)r4.xy >> (uint2)r2.ww;
//     r5.x = (uint)r6.x << 28;
//     r2.w = (uint)r2.w << 24;
//     r2.w = (int)r2.w | (int)r5.x;
//     r5.x = (uint)r6.z << 12;
//     r2.w = (int)r2.w | (int)r5.x;
//     r2.w = (int)r6.y | (int)r2.w;
//     r6.xyzw = (uint4)r7.xyzw >> int4(3,3,3,3);
//   // No code for instruction (needs manual fix):
//     store_uav_typed u3.xyzw, r6.xyzw, r2.wwww
//   }
//   r6.zw = (int2)r5.ww;
//   r2.w = 2048 >> (int)r6.w;
//   r2.w = (int)r2.w;
//   r7.xy = r4.zw * r2.ww;
//   r6.xy = (int2)r7.xy;
//   r2.w = PageTableTexture.Load(r6.xyz).x;
//   r5.x = (int)r2.w & 63;
//   if (6 == 0) r6.x = 0; else if (6+6 < 32) {   r6.x = (uint)r2.w << (32-(6 + 6)); r6.x = (uint)r6.x >> (32-6);  } else r6.x = (uint)r2.w >> 6;
//   if (4 == 0) r6.y = 0; else if (4+12 < 32) {   r6.y = (uint)r2.w << (32-(4 + 12)); r6.y = (uint)r6.y >> (32-4);  } else r6.y = (uint)r2.w >> 12;
//   r2.w = 0x00080000 >> (int)r6.y;
//   r2.w = (int)r2.w;
//   r2.w = 9.46969667e-005 * r2.w;
//   r6.zw = (uint2)r4.xy >> (uint2)r6.yy;
//   r6.zw = (uint2)r6.zw;
//   r7.xy = int2(256,1) << (int2)r6.yy;
//   r7.xy = (int2)r7.xy;
//   r6.y = 1.90734863e-006 * r7.x;
//   r8.x = (int)r5.x;
//   r8.y = (int)r6.x;
//   r7.xz = r8.xy * float2(264,264) + float2(4,4);
//   r7.xz = float2(9.46969667e-005,9.46969667e-005) * r7.xz;
//   r6.xy = -r6.zw * r6.yy + r4.zw;
//   r6.xy = r6.xy * r2.ww + r7.xz;
//   r3.zw = float2(9.46969667e-005,9.46969667e-005) * r3.zw;
//   r3.zw = r3.zw / r7.yy;
//   r0.zw = float2(9.46969667e-005,9.46969667e-005) * r0.zw;
//   r0.zw = r0.zw / r7.yy;
//   r7.xyz = DiffuseVTexture.SampleGrad(Aniso2XClamp_s, r6.xy, r3.zwz, r0.zwz).xyz;
//   r6.zw = NormalVTexture.SampleGrad(Aniso2XClamp_s, r6.xy, r3.zz, r0.zz).xy;
//   r8.xyz = SpecularVTexture.SampleGrad(Aniso2XClamp_s, r6.xy, r3.zwz, r0.zwz).xyz;
//   r7.xyz = r7.xyz * r7.xyz;
//   r6.xy = r6.zw * float2(2,2) + float2(-1,-1);
//   r2.w = dot(r6.xy, r6.xy);
//   r2.w = 1 + -r2.w;
//   r2.w = max(0, r2.w);
//   r6.z = sqrt(r2.w);
//   r2.w = 1 + -r8.z;
//   r9.zw = (int2)r5.zz;
//   r5.x = 2048 >> (int)r9.w;
//   r5.x = (int)r5.x;
//   r8.zw = r5.xx * r4.zw;
//   r9.xy = (int2)r8.zw;
//   r5.x = PageTableTexture.Load(r9.xyz).x;
//   r6.w = (int)r5.x & 63;
//   if (6 == 0) r8.z = 0; else if (6+6 < 32) {   r8.z = (uint)r5.x << (32-(6 + 6)); r8.z = (uint)r8.z >> (32-6);  } else r8.z = (uint)r5.x >> 6;
//   if (4 == 0) r8.w = 0; else if (4+12 < 32) {   r8.w = (uint)r5.x << (32-(4 + 12)); r8.w = (uint)r8.w >> (32-4);  } else r8.w = (uint)r5.x >> 12;
//   r5.x = 0x00080000 >> (int)r8.w;
//   r5.x = (int)r5.x;
//   r5.x = 9.46969667e-005 * r5.x;
//   r4.xy = (uint2)r4.xy >> (uint2)r8.ww;
//   r4.xy = (uint2)r4.xy;
//   r7.w = 256 << (int)r8.w;
//   r7.w = (int)r7.w;
//   r7.w = 1.90734863e-006 * r7.w;
//   r9.x = (int)r6.w;
//   r9.y = (int)r8.z;
//   r8.zw = r9.xy * float2(264,264) + float2(4,4);
//   r8.zw = float2(9.46969667e-005,9.46969667e-005) * r8.zw;
//   r4.xy = -r4.xy * r7.ww + r4.zw;
//   r4.xy = r4.xy * r5.xx + r8.zw;
//   r4.zw = float2(0.5,0.5) * r3.zw;
//   r5.x = r5.z + -r5.w;
//   r3.zw = -r4.zw * r5.xx + r3.zw;
//   r4.zw = r5.xx * r0.zw;
//   r0.zw = -r4.zw * float2(0.5,0.5) + r0.zw;
//   r5.xzw = DiffuseVTexture.SampleGrad(Aniso2XClamp_s, r4.xy, r3.zzz, r0.zzz).xyz;
//   r4.zw = NormalVTexture.SampleGrad(Aniso2XClamp_s, r4.xy, r3.zz, r0.zz).xy;
//   r9.xyz = SpecularVTexture.SampleGrad(Aniso2XClamp_s, r4.xy, r3.zwz, r0.zwz).xyz;
//   r4.xy = r4.zw * float2(2,2) + float2(-1,-1);
//   r0.z = dot(r4.xy, r4.xy);
//   r0.z = 1 + -r0.z;
//   r0.z = max(0, r0.z);
//   r4.z = sqrt(r0.z);
//   r0.z = 1 + -r9.z;
//   r0.w = r5.y * r5.y;
//   r5.xyz = r5.xzw * r5.xzw + -r7.xyz;
//   r5.xyz = r0.www * r5.xyz + r7.xyz;
//   r4.xyz = r4.xyz + -r6.xyz;
//   r4.xyz = r0.www * r4.xyz + r6.xyz;
//   r3.zw = r9.yx + -r8.yx;
//   r3.zw = r0.ww * r3.zw + r8.yx;
//   r0.z = r0.z + -r2.w;
//   r0.z = r0.w * r0.z + r2.w;
//   r0.w = saturate(r1.w * TerrainColorBlendConstants.x + TerrainColorBlendConstants.y);
//   r0.z = r0.w * r0.z;
//   r2.xyz = float3(-0.5,-0.5,-0.5) + r2.xyz;
//   r2.xyz = r0.zzz * r2.xyz + float3(0.5,0.5,0.5);
//   r2.xyz = r5.xyz * r2.xyz;
//   r2.xyz = r2.xyz + r2.xyz;
//   r0.z = cmp(r1.z >= 0);
//   r5.z = r0.z ? 1 : -1;
//   r6.x = r5.z * r1.z;
//   r6.yz = float2(0,0);
//   r5.xy = float2(0,0);
//   r5.xyw = -r5.xyz * r1.yzx + r6.xyz;
//   r0.z = dot(r5.xw, r5.xw);
//   r0.z = rsqrt(r0.z);
//   r5.xyw = r5.xyw * r0.zzz;
//   r6.xyz = r5.ywx * r1.zxy;
//   r6.xyz = r1.yzx * r5.wxy + -r6.xyz;
//   r0.z = dot(r6.xyz, r6.xyz);
//   r0.z = rsqrt(r0.z);
//   r6.xyz = r6.xyz * r0.zzz;
//   r6.xyz = r6.xyz * r5.zzz;
//   r6.xyz = r6.xyz * r4.yyy;
//   r4.xyw = r4.xxx * r5.xyw + r6.xyz;
//   r1.xyz = r4.zzz * r1.xyz + r4.xyw;
//   r0.z = dot(r1.xyz, r1.xyz);
//   r0.z = rsqrt(r0.z);
//   r1.xyz = r1.xyz * r0.zzz;
//   r0.zw = -BurnSectorMin.xy + r3.xy;
//   r4.xy = BurnSectorMax.xy + -BurnSectorMin.xy;
//   r4.xy = r0.zw / r4.xy;
//   r4.z = 1 + -r4.y;
//   r0.z = BurnedTerrainLookupTexture.SampleLevel(Clamp_s, r4.xz, 0).x;
//   r4.xy = r4.xy * float2(2,2) + float2(-1,-1);
//   r4.xy = float2(-0.699999988,-0.699999988) + abs(r4.xy);
//   r4.xy = saturate(float2(3.33333325,3.33333325) * r4.xy);
//   r0.z = r4.x * -r0.z + r0.z;
//   r0.z = saturate(r4.y * -r0.z + r0.z);
//   r3.xy = BurnParams3.ww * r3.xy;
//   r3.xy = float2(0.0700000003,0.0700000003) * r3.xy;
//   r0.w = BurnedTerrainNoiseTexture.SampleBias(Wrap_s, r3.xy, ViewportMipBias).x;
//   r1.w = BurnParams3.z + -BurnParams.z;
//   r0.w = r0.w * r1.w + BurnParams.z;
//   r0.w = -1 + r0.w;
//   r0.z = r0.z * r0.w + 1;
//   r2.xyz = r2.xyz * r0.zzz;
//   r0.w = r3.w * r0.z;
//   r1.w = BurnParams4.z * r3.z;
//   r2.w = -r3.z * BurnParams4.z + r3.z;
//   o0.z = r0.z * r2.w + r1.w;
//   r1.w = 0.150000006 * BurnParams5.z;
//   r2.w = -BurnParams5.z * 0.150000006 + 0.150000006;
//   r0.z = r0.z * r2.w + r1.w;
//   r2.xyz = sqrt(r2.xyz);
//   r3.x = dot(float3(0.25,0.5,0.25), r2.xyz);
//   r3.y = dot(float2(0.5,-0.5), r2.xz);
//   r3.z = dot(float3(-0.25,0.5,-0.25), r2.xyz);
//   r2.xyz = float3(0,0.498039216,0.498039216) + r3.xyz;
//   r0.xy = (int2)r0.xy & int2(1,1);
//   r1.w = cmp((int)r0.y == (int)r0.x);
//   o0.y = r1.w ? r2.y : r2.z;
//   r0.x = (uint)r0.x;
//   r1.w = r0.x * 0.400000006 + 0.200000003;
//   r0.x = -r0.x * 0.400000006 + 0.800000012;
//   r0.x = r0.y ? r1.w : r0.x;
//   r0.y = r0.w * 15 + r0.x;
//   r0.y = floor(r0.y);
//   r0.y = 16 * r0.y;
//   r0.y = (uint)r0.y;
//   r0.y = (uint)r0.y;
//   o0.w = 0.00392156886 * r0.y;
//   o1.xyz = r1.xyz * float3(0.498039216,0.498039216,0.498039216) + float3(0.498039216,0.498039216,0.498039216);
//   r0.x = r0.z * 15 + r0.x;
//   r0.x = floor(r0.x);
//   r0.x = (uint)r0.x;
//   r0.x = (uint)r0.x;
//   o2.z = 0.00392156886 * r0.x;
//   o0.x = r2.x;
//   o1.w = 0;
//   o2.xyw = float3(0.498039216,0.498039216,0);
//   return;
// }
//////////////////////////////// HLSL Errors ////////////////////////////////
// C:\games\Far Cry 5\bin\ShaderFixes\f0cdf18c9b146f27-ps_replace.txt(310,61-89): error X3082: int or unsigned int type required
/////////////////////////////////////////////////////////////////////////////