// God rays

    ps_3_0
    def c4, 0, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

// This is basically the same fix that we do for Unreal god rays & some Unity
// games, but here we were missing the necessary debug into to identify the
// correct register to adjust (or even suggest that this was the technique
// being used). I just used trial and error to find the correct constant
// register, and the fact that this works proves that they are using the same
// basic technique.

texldl r31, c220.z, s13
mov r23, c3
mad r23.x, r31.x, c220.w, r23.x

    texld_pp r0, v0, s0
    add_pp r1, -r23.xyxy, v0.xyxy
    mad_pp r0.yz, r1.xxyw, -c2.xxyw, v0.xxyw
    texld_pp r2, r0.yzzw, s0
    mad_pp r0.yz, r1.xxyw, -c2.xxyw, r0
    mul_pp r0.w, r2.x, c0.y
    mad_pp r0.x, r0.x, c0.x, r0.w
    texld_pp r2, r0.yzzw, s0
    mad_pp r0.yz, r1.xxyw, -c2.xxyw, r0
    mad_pp r0.x, r2.x, c0.z, r0.x
    texld_pp r2, r0.yzzw, s0
    mad_pp r0.yz, r1.xxyw, -c2.xxyw, r0
    mad_pp r0.x, r2.x, c0.w, r0.x
    texld_pp r2, r0.yzzw, s0
    mad_pp r0.yz, r1.xxyw, -c2.xxyw, r0
    mad_pp r0.x, r2.x, c1.x, r0.x
    texld_pp r2, r0.yzzw, s0
    mad_pp r0.yz, r1.xxyw, -c2.xxyw, r0
    mul_pp r1.xy, r1.zwzw, c2.zwzw
    dp2add_pp r0.w, r1, r1, c4.x
    rsq_pp r0.w, r0.w
    rcp_pp r0.w, r0.w
    add_pp r0.w, -r0.w, c4.y
    texld_pp r1, r0.yzzw, s0
    mad_pp r0.x, r2.x, c1.y, r0.x
    mad_pp r0.x, r1.x, c1.z, r0.x
    mul_pp r0.x, r0.w, r0.x
    cmp_pp oC0.xyz, r0.w, r0.x, c4.x
    mov_pp oC0.w, c4.y

// approximately 30 instruction slots used (7 texture, 23 arithmetic)
