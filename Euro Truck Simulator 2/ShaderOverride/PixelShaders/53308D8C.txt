// God rays

//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
// Parameters:
//
//   sampler2D $_texture;
//   
//   struct
//   {
//       float4 _normalized_to_texture;
//       float4 _viewport_coord_to_es_ray;
//       float4 _viewport_size;
//       float3 _additional_ambient_color;
//       float4 _fog_density;
//       float3 _fog_color;
//       float3 _fog_color2;
//       float3 _fog_color2_direction_es;
//       float4 _fog_gradient_plane_es;
//       float _fog_gradient;
//       float2 _input_texture_size;
//       float4 _range_def;
//       float _luminance_scale_factor;
//       float3 _eye_adapt_factors;
//       float2 _low_intensity_factors;
//       float3 _low_intensity_color;
//       float4 _tonemap_params;
//       float3 _bloom_minimal_color;
//       float3 _bloom_half_intensity;
//       float3 _bloom_multiplier;
//       float3 _scene_multiplier;
//       float2 _dof_range;
//       float4 _color_correction;
//       float4 _distortion;
//       float _distortion_blur;
//       float4 _filter_offsets[7];
//       float4 _filter_weights[4];
//       row_major float4x4 _envmap_matrix;
//       float4 _reflection_from_scene;
//       float4 _reflection_plane;
//       float2 _reflection_strengths;
//       float3 _sunshaft_color;
//       float4 _sunshaft_params;
//       float2 _sunshaft_sun_position;
//       float2 _sunshaft_area_clamp;
//       float4 _debug_remap;
//
//   } _deferred_param1;
//
//
// Registers:
//
//   Name             Reg   Size
//   ---------------- ----- ----
//   _deferred_param1 c0      46
//   $_texture        s0       1
//

    ps_3_0
    def c46, 0, 1, 0, 0
    dcl_texcoord_pp v0.xy
    dcl_2d s0

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

// This is basically the same fix that we do for Unreal god rays & some Unity
// games, but here we were missing the necessary debug into to identify the
// correct register to adjust (or even suggest that this was the technique
// being used). I just used trial and error to find the correct constant
// register, and the fact that this works proves that they are using the same
// basic technique.

// Updated version includes debug info now and this shader changed a little,
// including which constant register needed to be adjusted.

texldl r31, c220.z, s13
mov r23, c45
mad r23.x, r31.x, c220.w, r23.x


    texld r0, v0, s0
    add_pp r1, -r23.xyxy, v0.xyxy
    mad_pp r0.yz, r1.xxyw, -c44.xxyw, v0.xxyw
    texld_pp r2, r0.yzzw, s0
    mad_pp r0.yz, r1.xxyw, -c44.xxyw, r0
    mul_pp r0.w, r2.x, c32.y
    mad_pp r0.x, r0.x, c32.x, r0.w
    texld_pp r2, r0.yzzw, s0
    mad_pp r0.yz, r1.xxyw, -c44.xxyw, r0
    mad_pp r0.x, r2.x, c32.z, r0.x
    texld_pp r2, r0.yzzw, s0
    mad_pp r0.yz, r1.xxyw, -c44.xxyw, r0
    mad_pp r0.x, r2.x, c32.w, r0.x
    texld_pp r2, r0.yzzw, s0
    mad_pp r0.yz, r1.xxyw, -c44.xxyw, r0
    mad_pp r0.x, r2.x, c33.x, r0.x
    texld_pp r2, r0.yzzw, s0
    mad_pp r0.yz, r1.xxyw, -c44.xxyw, r0
    mul_pp r1.xy, r1.zwzw, c44.zwzw
    dp2add_pp r0.w, r1, r1, c46.x
    rsq_pp r0.w, r0.w
    rcp_pp r0.w, r0.w
    add_sat_pp r0.w, -r0.w, c46.y
    texld_pp r1, r0.yzzw, s0
    mad_pp r0.x, r2.x, c33.y, r0.x
    mad_pp r0.x, r1.x, c33.z, r0.x
    mul_pp oC0.xyz, r0.w, r0.x
    mov_pp oC0.w, c46.y

// approximately 29 instruction slots used (7 texture, 22 arithmetic)
