;------------------------------------------------------------------------------------------------------
; Logging options.
; Comment line or set value to 0 for no logging.
;------------------------------------------------------------------------------------------------------
[Logging]

; Log all API usage
calls=1

; Log Input key actions
input=1

; Super verbose massive log
debug=0

; Unbuffered logging to avoid missing anything at file end
unbuffered=0

; Force the CPU affinity to use only a single CPU for debugging multi-threaded
force_cpu_affinity=0

; Log NVAPI convergence modifications
convergence=1
; Log NVAPI separation modifications
separation=1


; ------------------------------------------------------------------------------------------------------
; Default constants to pass directly to shaders as IniParams
; ------------------------------------------------------------------------------------------------------
[Constants]
; x = 0.8
; y = 1.0
; z = 1.2
; w = 2.0

; x7 is used by the 3DVision2SBS custom shader. To use, find the [Present]
; section below and uncomment the 'run = CustomShader3DVision2SBS' line.
; 0 = Regular 3D Vision
; 1 = Reversed 3D Vision
; 2 = Side by Side
; 3 = Reversed Side by Side
; 4 = Top and Bottom
; 5 = Reversed Top and Bottom
x7 = 0


;------------------------------------------------------------------------------------------------------
; Custom settings override for any of [convergence, separation, x, y, z, w]
;
; Four types are supported - by default the bindings will simply load the
; configured settings, but type=hold can be specified to have a preset
; active while the button is held, type=toggle can be used to make a simple
; on/off toggle, and type=cycle can be used to cycle between several presets.
;
; Delays (type=hold only) and linear or cosine trasition periods (any key type)
; can be used to better synchonrise setting changes to the game's animations,
; or to smoothly adjust UI elements over a short period of time.
;
; Key bindings: For A-Z and 0-9 on the number row, just use that single
; character. For everything else (including mouse buttons), use the virtual key
; name (with or without the VK_ prefix) or hex code from this article:
; http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
;
; Keys can also be from XBox controllers using:
;   XB_LEFT_TRIGGER, XB_RIGHT_TRIGGER,
;   XB_LEFT_SHOULDER, XB_RIGHT_SHOULDER,
;   XB_LEFT_THUMB, XB_RIGHT_THUMB,
;   XB_DPAD_UP, XB_DPAD_DOWN, XB_DPAD_LEFT, XB_DPAD_RIGHT,
;   XB_A, XB_B, XB_X, XB_Y, XB_START, XB_BACK, XB_GUIDE
; By default all attached controllers are used - to associate a binding with a
; specific controller add the controller number 1-4 to the prefix, like
; XB2_LEFT_TRIGGER, though this may be more useful for hunting than playing.
;------------------------------------------------------------------------------------------------------

; Example for changing default settings
;[Key1]
;Key = z
;separation = 100.0
;convergence = 4.0
;x = 0.98

; Example to support momentary hold type overrides, like aiming.
;[Key2]
;Key = RBUTTON
;convergence = 0.1
;type = hold

; Example for a toggle override.
;[Key3]
;Key = q
;separation = 0.1
;type = toggle
;y = 0.0

; Example for a momentary hold, but with a delay followed by a smooth
; transition (ms) on hold and release to sync better with the game. Note that
; delay only works with type=hold (for now), while transitions will work with
; all types.
;[Key4]
;Key = XB_LEFT_TRIGGER
;type = hold
;y = 0.25
;delay = 100
;transition = 100
;transition_type = linear
;release_delay = 0
;release_transition = 500
;release_transition_type = cosine

; Example of a cycle transition that might be used to provide several presets
; that set both convergence and UI depth to suit different scenes in a game.
; Cosine transitions are used to smooth the changes over 1/10 of a second.
;[Key5]
;Key = Q
;type = cycle
;convergence = 1.45, 1.13, 0.98
;z           = 0.25,  0.5, 0.75
;transition = 100
;transition_type = cosine


;------------------------------------------------------------------------------------------------------
; Shader hunting options.
; Default setup is to use keyboard similar to Helix presets
;------------------------------------------------------------------------------------------------------
[Hunting]

; 0: Release mode is with shader hunting disabled, optimized for speed.
; 1: Hunting mode enabled
; 2: Hunting mode "soft disabled" - can be turned on via the toggle_hunting key
hunting=2

; Highlight mode of currently selected shader / rendertarget.
; "skip" = skip shader. don't render anything using the currently selected shader.
; "original" = fall back to original shader if the currently selected shader was patched.
; "pink" = make the output hot pink to make it standout.
; "mono" = disable stereo for the selected shader / rendertarget.
; "zero" = shader output is all zero. NOTE: this has a big performance impact.
marking_mode=skip

; Key bindings: For A-Z and 0-9 on the number row, just use that single
; character. For everything else (including mouse buttons), use the virtual key
; name (with or without the VK_ prefix) or hex code from this article:
; http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
;
; XBox controllers are supported using the same bindings as the [Key] sections
; (see above). If the game already uses the first controller you might try
; using the second controller for hunting with e.g. XB2_LEFT_SHOULDER

; rotate through all VISIBLE pixel shaders at the current scene.
previous_pixelshader=VK_NUMPAD1
next_pixelshader=VK_NUMPAD2
mark_pixelshader=VK_NUMPAD3

; rotate through all VISIBLE vertex shaders at the current scene.
previous_vertexshader=VK_NUMPAD4
next_vertexshader=VK_NUMPAD5
mark_vertexshader=VK_NUMPAD6

; rotate through all USED index buffers at the current scene.
previous_indexbuffer=VK_NUMPAD7
next_indexbuffer=VK_NUMPAD8
mark_indexbuffer=VK_NUMPAD9

; rotate through all USED render targets at the current scene.
previous_rendertarget=VK_DIVIDE
next_rendertarget=VK_MULTIPLY
mark_rendertarget=VK_SUBTRACT

; rotate through all VISIBLE geometry shaders at the current scene.
; This is disabled since these keys are commonly pressed while alt+tabbed out
;previous_geometryshader = <
;next_geometryshader = >
;mark_geometryshader = /

; rotate through all VISIBLE domain shaders at the current scene.
; This is disabled since these keys are commonly pressed while alt+tabbed out
;previous_domainshader = [
;next_domainshader = ]
;mark_domainshader = \

; rotate through all VISIBLE hull shaders at the current scene.
; This is disabled only because it is rarely needed
;previous_hullshader = MINUS
;next_hullshader = EQUALS
;mark_hullshader = BACKSPACE

; rotate through all USED compute shaders at the current scene.
; Disabling compute shaders may cause crashes, so these are
; not enabled by default:
;previous_computeshader = PAGE_UP
;next_computeshader = PAGE_DOWN
;mark_computeshader = HOME

; Re-enable shaders once done with hunting:
done_hunting=VK_ADD

; Screenshot as pns
take_screenshot=VK_SNAPSHOT

; reload all fixes from ShaderFixes folder
reload_fixes=VK_F10

; Key to turn hunting itself on/off.  This will also show/hide overlay.
; Hunting must be set to either 1 or 2 to enable this toggle.
toggle_hunting=VK_NUMPAD0

; Key to reload the settings from the the d3dx.ini without restarting. This can
; be the same key as reload_fixes for convenience, or a different key may be
; used to avoid resetting the ini parameters every time the shaders are
; reloaded. Note that not all settings can be reloaded, so if something doesn't
; work as expected you may still have to restart the game:
reload_config=VK_F10

; Hold this key to temporarily disable the fix - useful to quickly check what
; an effect looked like in the original game.
show_original=VK_F9

; tunable parameter to use in modified shaders as variable (StereoParams.Load(int3(1,0,0)).xyzw)
; enabling tuning results in a small performance hit because the parameter texture
;tune_enable=1
;tune_step=0.1
;tune1_up=VK_INSERT
;tune1_down=VK_DELETE
;tune2_up=X
;tune2_down=Z

; Auto-repeat key rate in events per second.
repeat_rate=6

; Dumps out the contents of each render target after every immediate draw call
; for the next frame. Takes up a large amount of space, so disabled by default.
;analyse_frame=VK_F8

; Specifies options for the frame analysis feature. Options can be combined by
; separating them with a space.
;          log: Log draw calls and state changes (one log file per context)
;         hold: Continue analysing subsequent frames while the key is held
;  dump_rt_jps: Dumps out render targets as JPS files. These are the easiest to
;               work with and don't take up as much space as DDS files, but they
;               are not dumped for every render target and are missing some data.
;  dump_rt_dds: Dumps out render targets as DDS files. WARNING: This option may
;               require hundreds of gigabytes and a long time! Only use it if
;               you absolutely need more information than you can get otherwise.
;               Will also dump buffer type render targets & UAVs as .buf files.
;      dump_rt: Dumps render targets as JPS files when possible, or DDS when not.
;     clear_rt: Clears each render target the first time they are used in the
;               frame. Makes it easier to see what is being drawn if the game
;               doesn't clear them, but might cause some effects not to render.
;   dump_depth: Dumps depth/stencil targets as DDS files
; dump_tex_jps: Dumps textures as JPS files
; dump_tex_dds: Dumps textures as DDS files (Same warning as for dump_rt_dds)
;               Will also dump buffer type shader resource views as .buf files.
;     dump_tex: Dumps textures as JPS files when possible, or DDS when not.
;      dump_cb: Dumps constant buffers as binary .buf files
;  dump_cb_txt: Decodes constant buffers as an array of float4s
;      dump_vb: Dumps vertex buffers as binary .buf files
;  dump_vb_txt: Decodes vertex buffers as an array of float4s
;      dump_ib: Dumps index buffers as binary .buf files
;  dump_ib_txt: Decodes index buffers
; filename_reg: Normally the draw number is the first part of the filename so
;               that the files will be sorted in the order they were used in
;               the game. Sometimes it is more desirable to examine how a
;               specific output changed through the frame and this option will
;               place the register number first in the filename to allow that.
;         mono: Dump out mono textures instead of stereo. To dump both, specify
;               'mono stereo'. If neither are specified, defaults to stereo.
; analyse_options can also be specified in [ShaderOverride*] and
; [TextureOverride*] sections to set up triggers to change the options mid-way
; through a frame analysis, either for a single draw call (default), or
; permanently (by adding the 'persist' keyword).
analyse_options = log dump_rt_jps clear_rt



;------------------------------------------------------------------------------------------------------
; Chain load other wrapper DLLs instead of system DLLs.
;------------------------------------------------------------------------------------------------------
[System]

;proxy_d3d9=d3d9_helix.dll
;proxy_d3d11=d3d11_helix.dll

; Options to use hooking instead of wrapping. Used in MGSV. Possible objects to hook include:
;   deferred_contexts
;   immediate_context
;   device
;   all - all of the above
; crash/hang workarounds:
;   except_set_shader_resources - work around crash on Win 7 with evil update
;   except_set_samplers - work around crash on Win 10
;   except_set_rasterizer_state - work around crash on Win 7 without evil update
;   skip_dxgi_factory - hack for MGSV, not recommended for other games as it
;                       may disable core 3DMigoto functionality in some cases
;   recommended - hook supported objects, safe workarounds enabled, skips not enabled
;hook=recommended

; Option to allow IDXGIFactory2 to be created and wrapped.  We have typically had good
; luck with returning an error for all non-dx11 requests, but some games error out
; with these checks in place.
; Start with allow_check_interfaces, if that doesn't work then try allow_dxgi1_2.
;allow_check_interface=1
;allow_dxgi1_2=1


;------------------------------------------------------------------------------------------------------
; Settings to force display device to a specific mode.
; Uncomment a value to force the specific setting.
;------------------------------------------------------------------------------------------------------
[Device]

; overrides screen resolution.
;width=1280
;height=720

; overrides refresh rate set by game.
;refresh_rate=60

; filters available video modes to those providing given refresh rates.
; some games don't explicitely set the refresh rate, but use the video mode.
; use this if setting refresh_rate doesn't work.
;filter_refresh_rate=24,59,60

; full_screen=1 forces creation of full screen devices and swap chains.
; use this for 3dtvplay if game won't active stereo mode.
; full_screen=2 will also disable SetWindowPos which might help in some games.
full_screen=1

; This toggles forcing the full screen mode on and off. It will not take effect
; immediately, but will change what happens the next time the game tries to
; change the fullscreen mode. This is a specific hack to workaround a bug in
; Unity games, which crash when alt+tabbing out from exclusive mode fullscreen.
;
; To switch out of a Unity game without it crashing:
; Enable this option, Press F7, Alt+Enter, Alt+Tab
toggle_full_screen = VK_F7

; some games explicitely disable stereo, prohibiting any stereo attempts.
; settings this to 1 ignores all stereo disabling calls and also calls NvAPI_Stereo_Enable to force stereo on.
;force_stereo=1

; almost all DX11 games deactivate window message handling.
; setting this to 1 reenables print screen handling, alt-tab key handling etc.
;allow_windowcommands=1

; Indicates where the resolution is obtained for texture hashes. Comment this
; out to never special case hashes that match the resolution or a multiple.
; Possible values are swap_chain and depth_stencil. Recommended to test which
; works for a given game (e.g. CryEngine always creates a swap chain that
; matches the native resolution so has to use depth_stencil).
get_resolution_from = swap_chain


;------------------------------------------------------------------------------------------------------
; Settings for NVidia stereo driver.
;------------------------------------------------------------------------------------------------------
[Stereo]

; games which have their own stereo renderer disable the NVidia automatic
; stereo mode and render themselves into stereo buffers (Crysis 3 for example).
; Setting this to 1 disables the game stereo renderer and enables NVidia auto stereo mechanism.
; This also forces 'false' as a return for any request for NvAPI_Stereo_IsEnabled.
automatic_mode=0

; Some games (CryEngine games, for example) lock the separation & convergence
; to a specific value, which can be undesirable. Set this to 1 to ignore these
; requests from the game to unlock the separation:
unlock_separation=0
unlock_convergence=0

; games without predefined profiles can't save stereo settings.
; enabling this options automatically creates a profile for unknown games.
create_profile=0

; sets the global surface creation heuristic for NVidia stero driver.
; 0 = NVAPI_STEREO_SURFACECREATEMODE_AUTO - use driver registry profile settings for surface creation mode.
; 1 = NVAPI_STEREO_SURFACECREATEMODE_FORCESTEREO - Always create stereo surfaces.
; 2 = NVAPI_STEREO_SURFACECREATEMODE_FORCEMONO - Always create mono surfaces.
;surface_createmode=1

; overrides surface creation mode for square surfaces.
;surface_square_createmode=1

; Force the NvAPI_Initialize to return an error so that games think stereo and NVidia is unavailable.
force_no_nvapi=0


;------------------------------------------------------------------------------------------------------
; Settings for GPU manipulations.
; Render settings override
;------------------------------------------------------------------------------------------------------
[Rendering]

; GPU program manipulations.

; Type of shader hashes in use:
;   3dmigoto = Traditional hash used by 3DMigoto (unseeded software FNV-1)
;   embedded = Use the first half of the MD5-like hash embedded within the
;              shaders to skip the hash calculation altogether.
;   bytecode = Only hash bytecode and signatures with hardware accelerated
;              CRC32C. Used to minimise duplicate shaders in certain games, but
;              potentially carries a higher risk of hash collisions between
;              unrelated shaders in some games (e.g. that only differ in
;              variable names). May occasionally avoid hash changes on game
;              updates due to changes in the game developer's build environment
;              (shader compiler version, build path embedded in debug info,
;              constants renamed, etc). Will not avoid hash changes if the
;              shader code, constant values, etc are changed.
shader_hash = 3dmigoto

; Shaders in game will be replaced by these custom shaders.
override_directory=ShaderFixes

; Automatically patched shaders will be written here if caching is enabled.
cache_directory=ShaderCache

; Shaders that are directly compiled by the game, instead of binary, go here.
storage_directory=ShaderFromGame

; cache all compiled .txt shaders into .bin. this removes loading stalls.
cache_shaders=0

; thread save data structure access. required on multithreaded rendering.
use_criticalsection=1

; Setting this option disables scissor limits
rasterizer_disable_scissor=1

; Tracks copies and updates to textures which may cause their hash to become
; out of sync with their contents - enable if texture hashes seem unreliable:
;track_texture_updates=1

; Registers where the StereoParams and IniParams textures will be assigned -
; change if the game already uses these registers. Newly decompiled shaders
; will use the new registers, but existing shaders will not be updated - best
; workflow is to remove ShaderCache after changing these and run a search and
; replace on all shaders in ShaderFixes. Set to -1 to disable if not required.
stereo_params = 125
ini_params = 120

;------------------------------------------------------------------------------------------------------
; Analyzation options.
;
; save all autofixed shaders as HLSL
export_fixed=0

; save all shaders sent to DX11 as ASM, or as HLSL text files if compiled by game.
export_shaders=0

; save all shaders seen as HLSL code, autofixed or not. 1= HLSL only, 2=HLSL+OriginalASM, 3=HLSL+OriginalASM+RecompiledASM
export_hlsl=0

; stores a ShaderUsage.txt file on any marking button press.
dump_usage=1

;------------------------------------------------------------------------------------------------------
; Automatic shader fixes. Those settings here apply only on newly read shaders.
; All existing *_replace.txt or *_replace.bin files are not tampered with.
; If you change settings here, the best workflow is to delete all shaders in
; the shader cache directory and let them be fixed again.

; Stereoize all shader parameters with position semantic.
fix_sv_position=0

; Pixel depth evaluation.
;fix_ZRepair_DepthTexture1=SceneDepthTexture.x
;fix_ZRepair_Dependencies1=MinZ_MaxZRatio
;fix_ZRepair_ZPosCalc1=zTex * MinZ_MaxZRatio.z - MinZ_MaxZRatio.w
;fix_ZRepair_DepthTexture2=SceneDepthTexture.x
;fix_ZRepair_Dependencies2=
;fix_ZRepair_ZPosCalc2=zTex
;fix_ZRepair_PositionTexture=PositionTexture
;fix_ZRepair_PositionCalc=1024 * %s

; Inject depth texture if other depth sources are unavailable.
;fix_ZRepair_DepthTextureHash=8a19f087b004598f

; Correct inverse transformations in pixel shaders using evaluated depth.
;fix_InvTransform=ScreenToLight,InverseTranslatedViewProjectionMatrix

; Back projection coordinate fix.
;
; Available variables in expressions:
; stereoParams.x = Separation value in range [0..1] or [-0..-1] dependent on active eye
; stereoParams.y = Convergence value in w coordinates (1/z)
; stereoParams.z = -1/1 for left/right eye
; stereoParams.w = Separation value without eye separation
; stereoTune.x = tune value 1 (default is 1)
; stereoTune.y = tune value 2 (default is 1)
; stereoTune.z = tune value 3 (default is 1)
; stereoTune.w = tune value 4 (default is 1)
; stereoScreenRes.x = Primary swap chain backbuffer horizontal resolution
; stereoScreenRes.y = Primary swap chain backbuffer vertical resolution
; zpos = current pixel z position in pixel shader
; wpos = current pixel w position in pixel shader

; Send inverse transformations from vertex shaders to pixel shaders.
;fix_BackProjectionTransform1=ScreenToTranslatedWorldMatrix._m00,ScreenToTranslatedWorldMatrix._m02,ScreenToTranslatedWorldMatrix._m01
;fix_BackProjectionTransform2=ScreenToWorld._m00,ScreenToWorld._m02,ScreenToWorld._m01

; Position variables to correct in pixel shaders.
;fix_ObjectPosition1=PointPositionAndInverseRadius
;fix_ObjectPosition1Multiplier=1, (stereoScreenRes.x/stereoScreenRes.y)*0.5, -0.5
;fix_ObjectPosition2=SpotPositionAndInverseRadius
;fix_ObjectPosition2Multiplier=1, (stereoScreenRes.x/stereoScreenRes.y)*0.5, -0.5

; Matrix multiplications to correct in pixel shaders.
;fix_MatrixOperand1=TranslatedWorldToShadowMatrix
;fix_MatrixOperand1Multiplier=1, (stereoScreenRes.x/stereoScreenRes.y)*0.5 - viewDirection.z*0.05 + (0.02791946-stereoParams.x/stereoParams.w), 0

; autofix shader option: recompiles all vertex shaders. fixes minor differences in deferred rendering.
;recompile_all_vs=0

;------------------------------------------------------------------------------------------------------
; Shader manipulations without patches + shader filtering.
;------------------------------------------------------------------------------------------------------
;[ShaderOverride1]
;Hash=69732c4f23cb6c48
; Custom stereo separation value while rendering objects using this shader.
;Separation=0
; Custom stereo convergence value while rendering objects using this
; shader (e.g. convergence=0 will move an object to infinity).
;Convergence=0
; don't draw anything using this shader.
;Handling=skip
; advanced option: use this to override only if this shader is used rendering the given index buffer.
;IndexBufferFilter=b3e56ebc
; Use replaced shader only when there is no active depth buffer (for UI filtering)
;depth_filter = depth_inactive
; Use replaced shader only when there *IS* an active depth buffer (for UI filtering)
;depth_filter = depth_active
; Only use replaced shader when it is used in conjunction with a specific shader
; (e.g. to adjust a vertex shader ONLY when it is used with a specific pixel shader)
;partner=af7b880f07630615
; Override a value from [Constants] when this shader is used:
;x=2.0
; Pass the dimensions of the active render target and resolution (obtained with
; get_resolution_from) into the shader:
;x1=rt_width
;y1=rt_height
;z1=res_width
;w1=res_height
; Use t0 from active pixel shader for texture filtering. Will be 0 if no
; [TextureOverride*] section exists for the texture or 1 if one does. For advanced
; filtering, set a value for filter_index in the [TextureOverride] section.
;x2=ps-t0
; Override the shader model to allow using newer features like Texture2DMS:
;model=vs_5_0
; There's also support for copying textures, constant buffers, depth buffers,
; etc. from one shader to another. This is a complex topic - see this page:
;    https://github.com/bo3b/3Dmigoto/wiki/Resource-Copying


;------------------------------------------------------------------------------------------------------
; texture / render target manipulations
;------------------------------------------------------------------------------------------------------
;
; NOTE: If you are trying to match a texture the same size as the resolution (or
; a /2, x2, x4 or x8 multiple), you should confirm that the same hash is used
; on different resolutions, and adjust get_resolution_from if necessary.
;
; NOTE: If you find a texture hash seems to change inconsistently, try enabling
; track_texture_updates in the [Rendering] section.
;
;[TextureOverride1]
;Hash=c3e55ebd
; NVidia stores surface creation mode heuristics in the game profile. setting
; this option overrides the creation mode for a given texture / buffer.
; 0 = NVAPI_STEREO_SURFACECREATEMODE_AUTO - use driver registry profile settings.
; 1 = NVAPI_STEREO_SURFACECREATEMODE_FORCESTEREO - create stereo surface.
; 2 = NVAPI_STEREO_SURFACECREATEMODE_FORCEMONO - create mono surface.
;StereoMode=2

;[TextureOverride2]
;Hash = e27b9d07
; Prevent the game reading from this texture - will give the game a blank
; buffer instead. Used to prevent CryEngine games falsely culling objects. Use
; debug logging and look for Map calls to identify possible hashes.
;deny_cpu_read=1
; Expand the region copied to this texture with CopySubresourceRegion (similar
; issue to rasterizer_disable_scissor). Used to solve issues with transparent
; refraction effects (like glass) in CryEngine games.
;expand_region_copy=1


;------------------------------------------------------------------------------------------------------
; Example of settings override by mouse button configuration
; Mapping of from game provided hard coded convergence values to custom values
; Those are values for L.A. Noir
; Example of settings override by mouse button configuration
;------------------------------------------------------------------------------------------------------
;[ConvergenceMap]

;Map1=from 3e99999a to 0.3
;Map2=from 3f800000 to 1.0
;Map3=from 3f666666 to 0.9


; The following custom shader can convert 3D Vision to Side-by-Side and
; Top-and-Bottom for use with 3D TVs & projectors - to enable this uncomment
; the 'run = CustomShader3DVision2SBS' in the [Present] section, set 3D Vision
; to output "checkerboard" in the control panel (which will remove the 720p
; limitation) and enable this either via the F11 key, or by setting a default
; for x7 in the [Constants] section.
[Resource3DVision2SBSBackupTexture]
[CustomShader3DVision2SBS]
; Load a custom vertex + pixel shader:
vs = ShaderFixes/3dvision2sbsvs.hlsl
ps = ShaderFixes/3dvision2sbsps.hlsl
; Explicitly unbind other shader types for safety:
hs = null
ds = null
gs = null
; Disable the OM blend stage that could interfere with the shader:
blend = disable
; Disable front/back face culling so the vertices can be in any rotation:
cull = none
; Use a triangle strip topology so we only have to output four vertices:
topology = triangle_strip
; Clear all render + depth targets to avoid compatibility issues:
o1 = null
o2 = null
o3 = null
o4 = null
o5 = null
o6 = null
o7 = null
oD = null
; Bind the back buffer as a render target. set_viewport ensures that the view
; port is the size of the buffer so the draw call will work, and no_view_cache
; is necessary for a few games like Mad Max:
o0 = set_viewport no_view_cache bb
; Back up any textures that were in the ps-t100 slot. The CustomResource
; section will already back up a lot of state, including shaders, render
; targets, depth targets, UAVs, viewports, blend state, rasterizer state,
; primitive topology, etc. but it does not back up textures:
Resource3DVision2SBSBackupTexture = reference ps-t100
; Use the reverse stereo blit to give the shader access to the back buffers of
; both eyes:
ps-t100 = stereo2mono bb
; Draw four vertices. The vertex shader will construct coordinates to cover the
; full screen using the SV_VertexID semantic so we don't need vertex buffers:
draw = 4, 0
; Restore the original texture from the ps-t100 slot:
post ps-t100 = reference Resource3DVision2SBSBackupTexture

[KeyChange3DVision2SBSOutputMode]
key = F11
; 0 = Regular 3D Vision
; 1 = Reversed 3D Vision
; 2 = Side by Side
; 3 = Reversed Side by Side
; 4 = Top and Bottom
; 5 = Reversed Top and Bottom
x7 = 1, 2, 3, 4, 5, 0
type = cycle

;;;;;;;;;;;;;;;;;;;;;;; DARKSTARSWORD'S UNITY 5 TEMPLATE ;;;;;;;;;;;;;;;;;;;;;;;

; Custom resource declarations
[Resource_UnityPerCameraRare]
max_copies_per_frame = 1

[Resource_CameraDepthTexture]
max_copies_per_frame = 1

[Resource_UnityPerCamera]
max_copies_per_frame = 1

[Resource_UnityPerDraw]
max_copies_per_frame = 1

[Resource_Inverse_MVP]
type = Buffer
format = R32G32B32A32_FLOAT
array = 4

; Clear custom resources on the present call to ensure we don't use stale data:
[Present]
; run = CustomShader3DVision2SBS
Resource_UnityPerCameraRare = null
Resource_CameraDepthTexture = null
Resource_UnityPerCamera = null
Resource_UnityPerDraw = null

; Copy the FOV from the directional lighting shader to the point/spot/physical lighting shader:
[ShaderOverrideDirectional]
Hash = b78925705424e647
Resource_UnityPerCameraRare = vs-cb1
[ShaderOverrideDirectional53]
Hash = bfae1ae6908d87a2
Resource_UnityPerCameraRare = vs-cb1
[ShaderOverrideDirectional53_9x]
Hash = f51c2a7085326040
Resource_UnityPerCameraRare = vs-cb1

[ShaderOverridePhysical50]
Hash = ca5cfc8e4d8b1ce5
vs-cb13 = Resource_UnityPerCameraRare

[ShaderOverridePhysical52]
Hash = 69294277cca1bade
vs-cb13 = Resource_UnityPerCameraRare

[CustomShader_Inverse_Unity_MVP]
max_executions_per_frame = 1
cs = ShaderFixes/inverse_unity_mvp.hlsl
cs-cb11 = Resource_UnityPerDraw
cs-u0 = Resource_Inverse_MVP
Dispatch = 1, 1, 1
post cs-cb11 = null
post cs-u0 = null

;;;;;;;;;;;;;; ALL LINES BELOW THIS POINT INSERTED BY HLSLTOOL.PY ;;;;;;;;;;;;;;

[ShaderOverride_2deb4baedad81ca1]
hash = 2deb4baedad81ca1
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_44904e567e587cab]
hash = 44904e567e587cab
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_5d0f4a41cc4ad446]
hash = 5d0f4a41cc4ad446
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_8bb3468e00a5f1b5]
hash = 8bb3468e00a5f1b5
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_996f9165c668dab7]
hash = 996f9165c668dab7
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_ac9be3fb7f3909c8]
hash = ac9be3fb7f3909c8
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_b3c0ee8bd67c89df]
hash = b3c0ee8bd67c89df
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_bda80b9e562d5031]
hash = bda80b9e562d5031
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_ca0079e101bba9c5]
hash = ca0079e101bba9c5
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_cde559dd84a6ea4d]
hash = cde559dd84a6ea4d
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_ec438fa268f752c1]
hash = ec438fa268f752c1
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb1

[ShaderOverride_ffaf6067999e20ff]
hash = ffaf6067999e20ff
ps-cb11 = Resource_UnityPerDraw
Resource_CameraDepthTexture = ps-t0
Resource_UnityPerCamera = ps-cb0

[ShaderOverride_00529864e574e789]
hash = 00529864e574e789
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_021e17a99c4c11b3]
hash = 021e17a99c4c11b3
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_07e920c0b9c47007]
hash = 07e920c0b9c47007
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_09804c4826f6baac]
hash = 09804c4826f6baac
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_0aa0d2eeefffca3e]
hash = 0aa0d2eeefffca3e
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_0ab78a4c65b35822]
hash = 0ab78a4c65b35822
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_1044e95187390a15]
hash = 1044e95187390a15
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_15ef94017988a9d6]
hash = 15ef94017988a9d6
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_18ad345b00b8c5e2]
hash = 18ad345b00b8c5e2
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_1ae52fe879b8955f]
hash = 1ae52fe879b8955f
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_1d9b6c8be6598a55]
hash = 1d9b6c8be6598a55
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_1e1f06c45c20404a]
hash = 1e1f06c45c20404a
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_21745e500abb775a]
hash = 21745e500abb775a
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_25bb4fd918ec1a0f]
hash = 25bb4fd918ec1a0f
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_26fd0895ae21281c]
hash = 26fd0895ae21281c
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_273a4913ae200edd]
hash = 273a4913ae200edd
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_281503947408d588]
hash = 281503947408d588
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_29e53af779473abc]
hash = 29e53af779473abc
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_2c37c9f8144f6727]
hash = 2c37c9f8144f6727
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_2c3dd015ffcae903]
hash = 2c3dd015ffcae903
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_2cc622692d92b35e]
hash = 2cc622692d92b35e
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_303cd4f7791d7c85]
hash = 303cd4f7791d7c85
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_30b571439771d90d]
hash = 30b571439771d90d
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_30ce76a1e786c6f2]
hash = 30ce76a1e786c6f2
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_33752314d7d01754]
hash = 33752314d7d01754
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_35a3bd413e54ecf9]
hash = 35a3bd413e54ecf9
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_399e15b7a6ed073e]
hash = 399e15b7a6ed073e
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_3cc6ee51d2d40abb]
hash = 3cc6ee51d2d40abb
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_3fcaa3017bbed82f]
hash = 3fcaa3017bbed82f
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_41968f29836a4fb2]
hash = 41968f29836a4fb2
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_4429f112c6f5a40d]
hash = 4429f112c6f5a40d
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_44c59f28fa51b0ea]
hash = 44c59f28fa51b0ea
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_450a7b0cb7c5e320]
hash = 450a7b0cb7c5e320
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_45ae8fbbebfa6e26]
hash = 45ae8fbbebfa6e26
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_46564c6c962a4082]
hash = 46564c6c962a4082
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_48ece2598e5ed3c5]
hash = 48ece2598e5ed3c5
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_4a5e316799020555]
hash = 4a5e316799020555
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_4bd65a2e339dd6e2]
hash = 4bd65a2e339dd6e2
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_557b1fd5c772973f]
hash = 557b1fd5c772973f
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_55aea87c10d8a15b]
hash = 55aea87c10d8a15b
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_5683185a20a4ffcb]
hash = 5683185a20a4ffcb
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_57535d8b0d15567e]
hash = 57535d8b0d15567e
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_58acf7261dce2fae]
hash = 58acf7261dce2fae
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_5b1900b79494cc17]
hash = 5b1900b79494cc17
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_5d44ae38febb5732]
hash = 5d44ae38febb5732
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_5e23efc938b4a945]
hash = 5e23efc938b4a945
Resource_UnityPerDraw = vs-cb1
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_5f5a87dd501d9678]
hash = 5f5a87dd501d9678
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_609823240a20d3e0]
hash = 609823240a20d3e0
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_60f45d59e0bb0301]
hash = 60f45d59e0bb0301
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_65e99bca3cf42dad]
hash = 65e99bca3cf42dad
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_6948e93048b50331]
hash = 6948e93048b50331
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_69f9633e091f573e]
hash = 69f9633e091f573e
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_6a43d777c50f71fa]
hash = 6a43d777c50f71fa
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_6dfef9936b943ec5]
hash = 6dfef9936b943ec5
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_6e4822a8115369da]
hash = 6e4822a8115369da
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_788fabe5248e5041]
hash = 788fabe5248e5041
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_7e0acac7bad32038]
hash = 7e0acac7bad32038
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_7f9fdf1f94d04ef8]
hash = 7f9fdf1f94d04ef8
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_8002d1175e1142c7]
hash = 8002d1175e1142c7
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_815d66c08cdab12a]
hash = 815d66c08cdab12a
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_86437de333f709eb]
hash = 86437de333f709eb
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_8dc01c8d4ef88b55]
hash = 8dc01c8d4ef88b55
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_92df6daaaf11b8a7]
hash = 92df6daaaf11b8a7
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_9887718514c10a6b]
hash = 9887718514c10a6b
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_9cf07af8d912f052]
hash = 9cf07af8d912f052
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_9f6cea10302994fd]
hash = 9f6cea10302994fd
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_a2154c1a9891bbea]
hash = a2154c1a9891bbea
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_a2537fdf6be5713e]
hash = a2537fdf6be5713e
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_a3993fa7f7317c4f]
hash = a3993fa7f7317c4f
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_a40225e104339bdd]
hash = a40225e104339bdd
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_a4a0bb7c09174ddb]
hash = a4a0bb7c09174ddb
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_a9774bf555cde611]
hash = a9774bf555cde611
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_aabfcb48d781de16]
hash = aabfcb48d781de16
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_ab72bdfa84141254]
hash = ab72bdfa84141254
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_b590c8b960c1fa93]
hash = b590c8b960c1fa93
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_b6f58c4100087f82]
hash = b6f58c4100087f82
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_b898e485123278eb]
hash = b898e485123278eb
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_bcfa94ba0f8d249e]
hash = bcfa94ba0f8d249e
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_bfce714a0cd0d0d0]
hash = bfce714a0cd0d0d0
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_c0446216d906dcfe]
hash = c0446216d906dcfe
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_c0b6dda4bc573c21]
hash = c0b6dda4bc573c21
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_c43b5defe7a66d9f]
hash = c43b5defe7a66d9f
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_c5d55afe3b8e2b1a]
hash = c5d55afe3b8e2b1a
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_c8d0a8d3f6552bc7]
hash = c8d0a8d3f6552bc7
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_cab3bafad3de2618]
hash = cab3bafad3de2618
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_ce205b44598f59cb]
hash = ce205b44598f59cb
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_ce87e82b20b3e4c4]
hash = ce87e82b20b3e4c4
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_d4537edaf81bec72]
hash = d4537edaf81bec72
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_d7f522b144847633]
hash = d7f522b144847633
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_dae382f090601cb4]
hash = dae382f090601cb4
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_ddbd6bea87ad1517]
hash = ddbd6bea87ad1517
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_dff38886bea76042]
hash = dff38886bea76042
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_e35db9028219eb08]
hash = e35db9028219eb08
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_e5e67e7d8e7f6bab]
hash = e5e67e7d8e7f6bab
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_eb7b3b404df5ee6f]
hash = eb7b3b404df5ee6f
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_ec5262af5d628e7d]
hash = ec5262af5d628e7d
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_ed3c67e67534d416]
hash = ed3c67e67534d416
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_ee0e5c3229ff1315]
hash = ee0e5c3229ff1315
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_ee9a8288aa98dbb7]
hash = ee9a8288aa98dbb7
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_f09c33df23fe0ca4]
hash = f09c33df23fe0ca4
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_f0fe3208930e2f7e]
hash = f0fe3208930e2f7e
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_f2017c2b45135a12]
hash = f2017c2b45135a12
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_f21e9156e2dd9426]
hash = f21e9156e2dd9426
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_f8bd253e64382163]
hash = f8bd253e64382163
Resource_UnityPerDraw = vs-cb3
run = CustomShader_Inverse_Unity_MVP
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_f8c72e6ab021ccd4]
hash = f8c72e6ab021ccd4
vs-cb11 = Resource_UnityPerDraw
vs-cb10 = copy Resource_Inverse_MVP

[ShaderOverride_6820591d6eabc35a]
hash = 6820591d6eabc35a
ps-cb11 = Resource_UnityPerDraw
ps-cb10 = copy Resource_Inverse_MVP

