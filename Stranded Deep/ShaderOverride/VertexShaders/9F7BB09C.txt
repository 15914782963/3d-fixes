// CRC32: 9F7BB09C | Matched 2 variants of 2 shaders: Unlit/Premultiplied Colored, Unlit/Transparent Colored
// 
//    Unity headers extracted from Unlit - Premultiplied Colored.shader
//    Shader "Unlit/Premultiplied Colored" {
//      Properties {
//       _MainTex ("Base (RGB), Alpha (A)", 2D) = "black" {}
//      }
//      SubShader 1/2 {
//        LOD 200
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog { Mode Off }
//          Blend One OneMinusSrcAlpha
//          ColorMask RGB
//          Offset -1, -1
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Unlit - Transparent Colored.shader
//    Shader "Unlit/Transparent Colored" {
//      Properties {
//       _MainTex ("Base (RGB), Alpha (A)", 2D) = "black" {}
//      }
//      SubShader 1/2 {
//        LOD 200
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog { Mode Off }
//          Blend SrcAlpha OneMinusSrcAlpha
//          Offset -1, -1
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

// UI - crosshair & other

    vs_3_0 // Converted from vs_2_0 with DarkStarSword's shadertool.py
    dcl_position v0
    dcl_texcoord v1
    dcl_color v2

dcl_texcoord o0
dcl_position o1
dcl_color o2

def c220, 0, 1, 0.0625, 0.5
def c221, -0.999, 0.999, 0, 0 // Full screen fade to black coordinates
def c222, 0.25, 0.32, 0.50, 0.63 // Crosshair texture coordinates
def c223, -0.01, 0.01, -0.01, 0.01 // Crosshair X+Y bounds
def c224, 0.216, 0, 0, 0 // Crosshair fade threshold
dcl_2d s0
dcl_2d s3 // Copy of _CameraDepthTexture

// For loop to improve stereo cursor accuracy:
defi i0, 255, 0, 0, 0
def c227, 0.00390625, 64, 0, 0.5 // 1/i0.x, 0.5

    mov o2, v2
    mov o0.xy, v1
    dp4 r0.w, v0, c3
    dp4 r0.z, v0, c2
    dp4 r0.y, v0, c1
    dp4 r0.x, v0, c0

// Texture blacklist unusable - crosshair, fade to black, inventory, menus, etc. use the same texture
//mov r25.x, c251.x
//if_eq r25.x, c220.x

// Blacklist full screen fade to black based on coordinate near corner of screen:
mov r30.x, c220.w // Auto-crosshair depth
if_le r0.x, c221.x
	if_le r0.y, c221.x
		mov r30.x, c220.x
	endif
	if_ge r0.y, c221.y
		mov r30.x, c220.x
	endif
endif
if_ge r0.x, c221.y
	if_le r0.y, c221.x
		mov r30.x, c220.x
	endif
	if_ge r0.y, c221.y
		mov r30.x, c220.x
	endif
endif

// Detect crosshair based on texture coordinates:
if_ge v1.x, c222.x
if_le v1.x, c222.y
if_ge v1.y, c222.z
if_le v1.y, c222.w
	// Confirm vertex is in center of screen:
	if_ge r0.x, c223.x
	if_le r0.x, c223.y
	if_ge r0.y, c223.z
	if_le r0.y, c223.w
		// Check crosshair mode
		mov r20, c200
		if_eq r20.x, c220.x // Automatic crosshair
			// Remove crosshair when it is faded out:
			if_le v2.x, c224.x
				mov r30.x, -c220.y
			endif
		else
			if_ne r20.x, c220.y // Crosshair disabled
				mov r30.x, -c220.y
			endif
		endif
	endif
	endif
	endif
	endif
endif
endif
endif
endif

texldl r31, c220.z, s0

if_eq r30.x, c220.y
	mad r0.x, r31.x, c200.z, r0.x
endif
if_eq r30.x, c220.w
	// Adjust cursor depth based on the W component of the refr_sampler copied from
	// the water shader, which has the scene depth.
	// How do I know this? The water was the only surface with a halo around nearer
	// objects, which suggests it had access to the depth buffer in some way (it
	// would use this to calculate the water opacity based on depth). None of the
	// sampler names sounded promising, so I determined that the texkill
	// instruction caused the halo (removing it removed the halo), so from there it
	// was a simple matter of looking at the samplers that provided input to that
	// instruction and directly outputing the contents of the sampler to identify
	// the channel with the depth information.

	// Stereo cursor: To improve the accuracy of the stereo cursor, we start at the
	// near clipping plane and work our way towards center + separation (ideally
	// we would loop one pixel at a time, but as the loop counts must be constant
	// we can't do that here, so we just choose a granuality in i0 and c227.
	// Alternatively we could loop one pixel at a time with a hardcoded maximum
	// number of pixels)

	rcp r20.w, c150.w		// W = starting depth = near clipping plane
	add r31.w, r20.w, -r31.y	// near - convergence
	mad r20.x, r31.w, r31.x, c220.w	// X sample coord = center + separation * (near - convergence)
	mov r20.y, c220.w		// Y sample coord = center
	add r20.z, r20.x, -c220.w	// Z = X offset from center
	add r31.z, r31.x, -r20.z	// Total distance to cover (separation - starting X offset)

	mov r21, r20			// Working copy
	mul r31.w, r31.x, r31.y		// separation * convergence (precompute this constant)
	rep i0
		mad r21.z, r31.z, c227.x, r21.z	// adjustment += (total distance to cover) / i0.x (granuality)

		// Calculate W for this adjustment amount:
		add r21.w, r31.x, -r21.z	// separation - adjustment
		rcp r21.w, r21.w
		mul r21.w, r31.w, r21.w		// w = (separation * convergence) / (separation - adjustment)

		// Read depth texture at this pixel:
		//add r21.x, c220.w, r21.z	// X = 0.5 + adjustment
		// Had to divide adjustment by 2 for whatever reason:
		mad r21.x, r21.z, c220.w, c220.w // X = 0.5 + adjustment/2
		texldl r5, r21.xy, s3

		// scale depth buffer to world Z (game dependent - look for scaling applied to
		// the depth buffer wherever else it is used. In the case of Unity we use
		// _ZBufferParams):
		mad r5.x, r5.x, c150.x, c150.y
		add r5.y, c150.z, c150.w // Derive 1/far from _ZBufferParams
		mul r5.x, r5.x, r5.y
		rcp r5.x, r5.x

		// If the sampled depth is closer than the calculated depth, exit the loop:
		break_ge r21.w, r5.x

		// Set the output depth to this pixel
		mov r20, r21
	endrep

	// Finally adjust the X coordinate:
	add r0.x, r0.x, r20.z
endif
mov o1, r0

if_eq r30.x, -c220.y
	mov o1, c220.xxxx
endif
