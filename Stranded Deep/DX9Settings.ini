[General]

; Some of the pixel shaders in this game (Beam Team/Terrain/Procedural) use all
; s13. We don't need to fix anything in them, but for some reason Helix mod
; still overrides s13 in them if we are overriding *any* pixel shader. Use s15
; instead:
DefPSSampler = 15
; For some unknown reason, using s0 in certain shaders (such as the lighting
; vertex shader) breaks the water surface from underneath, even if they are not
; using it. Use s3 instead:
DefVSSampler = 260

; Debug text not only renders in game, it mucks up the physics
UseEndScene=false

; UseRenderedShaders=true is nearly always useful, because it trims the
; list of shaders seen while hunting down to just those active in the
; current scene.  Disable this only if you get crashes during hunting.
UseRenderedShaders=true

; DumpAll will generate ASM text files for every shader seen by the game.
; This is usually worth doing once, but not useful for every run.
DumpAll=true

; Less crashes when reloading shaders:
OverrideMethod = 2

; Unity games recently started using borderless window mode, so use a profile
; that supports 3D in a window. "3D-Hub Player" is pretty minimal:
GameProfile = fxdplayer

; Mouse tends to stop working in Unity games (related to borderless window?):
InitMouse = false

; Force square surfaces (shadow maps) to be mono:
DefSquareSurfaceMode = 2

; Fixes clipping on torch
SkipSetScissorRect = true

; Allow access to the view size in pixel shaders to calculate the pixel
; position on screen. This isn't usually necessary in the generic lighting fix,
; but sometimes a situation arises where it is necessary.
DefPSViewSizeConst = 210

; Constant registers that will arrive in Vertex and Pixel Shaders, as
; c200.  The constants below will be assigned, based on the key preset.
DefVSConst1 = 200
DefPSConst1 = 200

; Allows textures to be cycled with Up/Down - use to hunt menu text CRC32
bCalcTexCRCatStart = true

; The PresetKeysList specifies which KEYs will be used.
; Multiple keys lists are supported.
; Note that the KEY sections are in hexadecimal
PresetsKeysList = 0;1;2;3;

; Holding F sets convergence to 0.086 for use with the watch
[KEY0]
Key = 70
Presets = 0;1;
Type = 2
Delay = 300
[PRES0]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3db020c5

; L sets convergence = 0.3
[KEY1]
Key = 76
Presets = 1;
Type = 1
[PRES1]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3e99999a
UseByDef = true

; X cycles UI depths
[KEY2]
Key = 88
Presets = 3;4;5;6;
Type = 1
[PRES3]
; 0.995
Const3 = 0x3f7eb852
[PRES4]
; 0
Const3 = 0x00000000
[PRES5]
; 0.5
Const3 = 0x3f000000
[PRES6]
; 0.75
Const3 = 0x3f400000
UseByDef = true

; V key cycles crosshair modes
[KEY3]
Key = 86
Presets = 7;8;9;
Type = 1
[PRES7]
Const1 = 0x3f800000
[PRES8]
Const1 = 0x40000000
[PRES9]
Const1 = 0x00000000
UseByDef = true


; Copy MV+MVP matrices from various sources in case of drawing a full-screen
; lighting effect (e.g. physical lighting effect such as specular highlights
; and environment reflections) while directional lighting is not active. Note
; that unlike the Unity 4 fix we do not ask Helix mod to inverse the MV matrix.
; This is because Unity 5 only passes in three columns of the matrix which
; won't work with the generic inverse matrix function. Instead we invert the
; matrix in assembly in the destination shader.
;
; The below shaders are pretty common one in Unity games that we can use, but
; you may need to find others (avoid UI and camera depth/normal shaders that
; often do not have a valid projection matrix). My extract_unity_headers.py
; script is useful to find other shaders that can be used here.

; DO NOT USE SUNSHINE OCCLUDER - THESE HAVE WRONG MATRICES
; DO NOT USE PARTICLES - THESE NOW BREAK RENDERING UNDERWATER!

; Skin is good
[VSB94EECDC]
; Matched 3 variants of 1 shaders: Beam Team/Standard/Skin/Skin
GetMatrixFromReg = 8
GetConst2FromReg = 0

; Rain is untested:
;[VS2CAF1457]
;; Unity headers extracted from Alpha Blended - Rain.shader
;GetMatrixFromReg = 4
;GetConst2FromReg = 0


; In Unity 5, the directional lighting shader has the inverse projection
; matrix, which we need to fix the lights/shadows, so copy it to other lighting
; shaders whenever it is active. Use a preset to set Const4 to signify when
; this matrix is valid and fall back to other techniques if it is not.

[VS00933666]
; Hidden/Internal-PrePassCollectShadows PCF_5x5
GetConst3FromReg = 4
PresIndex = 16
[VS678DC18B]
; Hidden/Internal-PrePassCollectShadows
GetConst3FromReg = 4
PresIndex = 16

[PRES10]
; PRES10 (hexadecimal) is PresIndex 16 (decimal)
; Signifies that the inverse projection matrix is currently valid
Const4 = 0x3f800000

; The lighting shaders will use the inverse projection matrix copied from the
; directional lighting shader if it is valid. At times when it is not valid the
; shader will fall back to other techniques. Point and spot lights will
; calculate it from the MV+MVP matrices passed into the shader from the game,
; and full-screen lighting effects (e.g. physical lighting) will use the
; matrices copied from other unrelated shaders (see above - additional shaders
; may be necessary). If all else fails, a hard coded constant can be set in
; the vertex shader in c220.w

[VS05F7E52C]
; Matched 65 variants of 2 shaders: Hidden/Internal-DeferredShading, Hidden/Internal-PrePassLighting
SetConst3ToReg = 170
UseMatrix = true
MatrixReg = 180
SetConst2ToReg = 190

; Water fog volume shaders:

; These shaders no longer used in Experimental build 0.05.E2:
; [PS845C4AD4]
; ; BEAM Team/Post Effects/Volumetric Fog - "CAUSTICS_ON" "INGAME/INTRO" "WATER_ABOVE"
; ; Responsible for underwater shadows (viewed from above the water), but doesn't
; ; work like the other Unity lighting shaders.  I'll need the inverse projection
; ; matrix here to correct view-space coords
; SetConst3ToReg = 170
; UseMatrix = true
; MatrixReg = 180
; SetConst2ToReg = 190
; ; Since Unity 5 update we can no longer use Helix mod to inverse the inverse
; ; view projection matrix since it is a 4x3, so we do that inside the shader.
; 
; [PSA385DB52]
; ; BEAM Team/Post Effects/Volumetric Fog - "CAUSTICS_ON" "INGAME" "WATER_BELOW"
; ; Responsible for underwater shadows (viewed from underwater), but doesn't work
; ; like the other Unity lighting shaders.  I'll need the inverse projection
; ; matrix here to correct view-space coords
; SetConst3ToReg = 170
; UseMatrix = true
; MatrixReg = 180
; SetConst2ToReg = 190
; ; Since Unity 5 update we can no longer use Helix mod to inverse the inverse
; ; view projection matrix since it is a 4x3, so we do that inside the shader.
; 
; [PS70F977D0]
; ; BEAM Team/Post Effects/Volumetric Fog - "CAUSTICS_ON" "INTRO" "WATER_BELOW"
; ; Presumably needs to be fixed as well as above
; SetConst3ToReg = 170
; UseMatrix = true
; MatrixReg = 180
; SetConst2ToReg = 190
; ; Since Unity 5 update we can no longer use Helix mod to inverse the inverse
; ; view projection matrix since it is a 4x3, so we do that inside the shader.


; Copy _CameraDepthTexture and _ZBufferParams from the Ocean shader (since this
; game does not use Unity's standard directional lighting shaders) for the
; auto-crosshair depth. Can easily add more sources if needed, could
; alternatively use _ProjectionParams instead of _ZBufferParams with slightly
; different maths.
[PS0EA8EC3C]
GetConst1FromReg = 2
GetSampler1FromReg = 2
[PS265C35AB]
GetConst1FromReg = 6
GetSampler1FromReg = 4
[PS4F70375A]
GetConst1FromReg = 6
GetSampler1FromReg = 4
[PS81856A55]
GetConst1FromReg = 6
GetSampler1FromReg = 4
[PSB9C3F754]
GetConst1FromReg = 6
GetSampler1FromReg = 4
; Ceto_OceanTopSide_BRDF:
[PS22B5F67A]
GetConst1FromReg = 12
GetSampler1FromReg = 12
[PS2503FAF4]
GetConst1FromReg = 12
GetSampler1FromReg = 12
[PSAFC6887E]
GetConst1FromReg = 15
GetSampler1FromReg = 13
[PSB50D471B]
GetConst1FromReg = 12
GetSampler1FromReg = 12
[PSC79FEB08]
GetConst1FromReg = 16
GetSampler1FromReg = 14
[PSC99CAD58]
GetConst1FromReg = 14
GetSampler1FromReg = 13
[PSFFCEF70E]
GetConst1FromReg = 15
GetSampler1FromReg = 14
; Ceto_UnderWaterPostEffect:
[PSCB4FF31D]
GetConst1FromReg = 0
GetSampler1FromReg = 0

; Can't use a preset to indicate when this is valid - that only works from a
; VS, and the Ocean VS is unusable due to using all sampler registers. Could
; potentially use a different effect as the depth source where the VS is
; overridable.

[VSFE267E35]
; UI shader
; C3193C1E - *ALL* grey/white/black textures (crosshair, inventory, menus, full screen fade to black, etc)
; CheckTexCRC = true
; ValForDefined = 1
; ValNotDefined = 0
; TexCounterReg = 251
; UseDefinedOnly = false
; DefinedTexturesVS = C3193C1E;
VBOffsetList = 0;
; Copy _CameraDepthTexture and _ZBufferParams in for auto-crosshair depth:
SetSampler1ToReg = 259
SetConst1ToReg = 150
[VBFE267E35.0]

[VS7BFE637D]
; UI - item description above crosshair & other text
; D7978EEB - a bunch of fonts :(
CheckTexCRC = true
ValForDefined = 1
ValNotDefined = 0
TexCounterReg = 251
UseDefinedOnly = false
DefinedTexturesVS =
VBOffsetList = 0;
DefinedTexturesVS = D7978EEB;
; Copy _CameraDepthTexture and _ZBufferParams to match auto-crosshair depth:
SetSampler1ToReg = 259
SetConst1ToReg = 150
[VB7BFE637D.0]
