[General]

; Some of the pixel shaders in this game (Beam Team/Terrain/Procedural) use all
; s13. We don't need to fix anything in them, but for some reason Helix mod
; still overrides s13 in them if we are overriding *any* pixel shader. Use s15
; instead:
DefPSSampler = 15

; Debug text not only renders in game, it mucks up the physics
UseEndScene=false

; UseRenderedShaders=true is nearly always useful, because it trims the
; list of shaders seen while hunting down to just those active in the
; current scene.  Disable this only if you get crashes during hunting.
UseRenderedShaders=true

; DumpAll will generate ASM text files for every shader seen by the game.
; This is usually worth doing once, but not useful for every run.
DumpAll=true

; Less crashes when reloading shaders:
OverrideMethod = 2

; Unity games recently started using borderless window mode, so use a profile
; that supports 3D in a window. "3D-Hub Player" is pretty minimal:
GameProfile = fxdplayer

; Mouse tends to stop working in Unity games (related to borderless window?):
InitMouse = false

; Force square surfaces (shadow maps) to be mono:
DefSquareSurfaceMode = 2

; Fixes clipping on torch
SkipSetScissorRect = true

; Allow access to the view size in pixel shaders to calculate the pixel
; position on screen. This isn't usually necessary in the generic lighting fix,
; but sometimes a situation arises where it is necessary.
DefPSViewSizeConst = 210

; Constant registers that will arrive in Vertex and Pixel Shaders, as
; c200.  The constants below will be assigned, based on the key preset.
DefVSConst1 = 200
DefPSConst1 = 200

; Allows textures to be cycled with Up/Down - use to hunt menu text CRC32
bCalcTexCRCatStart = true

; The PresetKeysList specifies which KEYs will be used.
; Multiple keys lists are supported.
; Note that the KEY sections are in hexadecimal
PresetsKeysList = 0;1;2;3;C;E;

; Holding F sets convergence to 0.086 for use with the watch
[KEY0]
Key = 70
Presets = 0;1;
Type = 2
Delay = 300
[PRES0]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3db020c5

; L sets convergence = 0.3
[KEY1]
Key = 76
Presets = 1;
Type = 1
[PRES1]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3e99999a
UseByDef = true

; X cycles UI depths
[KEY2]
Key = 88
Presets = 3;4;5;6;
Type = 1
[PRES3]
; 0.995
Const3 = 0x3f7eb852
[PRES4]
; 0
Const3 = 0x00000000
[PRES5]
; 0.5
Const3 = 0x3f000000
[PRES6]
; 0.75
Const3 = 0x3f400000
UseByDef = true

; V key cycles crosshair modes
[KEY3]
Key = 86
Presets = 7;8;9;
Type = 1
[PRES7]
Const1 = 0x3f800000
[PRES8]
Const1 = 0x40000000
[PRES9]
Const1 = 0x00000000
UseByDef = true


; Hold I to set Const2
[KEYC]
Key = 73
Presets = D;E;
Type = 2
[PRESD]
Const2 = 0x3f800000
[PRESE]
Const2 = 0x00000000

; Hold P to set Const4
[KEYE]
Key = 80
Presets = 11;12;
Type = 2
[PRES11]
Const4 = 0x3f800000
[PRES12]
Const4 = 0x00000000



; Copy the MVP and inverted MV matrices to all lighting shaders to allow us to
; calculate the projection matrix and find the horizontal FOV. This technique
; was first used to fix Dreamfall Chapters - take a look at the forum thread
; for that game and it's fix for more details on how this works.


; The projection matrix will be calculated from the matrices passed into the
; lighting shader whenever possible. This is not possible for directional
; lighting or other times it is drawing a full-screen quad, so we must also
; find other shaders to get the MV+MVP matrices from in that case. The below
; shader is a pretty common one in Unity games that we can use, but you may
; need to find others (avoid UI and depth shaders that often do not have a
; valid projection matrix). My extract_unity_headers.py script is useful to
; find other shaders that can be used here.
[VS61CAF50F]
; Particle Alpha Blend.shader - example of shader with MV+MVP matrices
; MV is in c0-c3. Copy this and invert it:
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
; MVP is in c4-c7. We only need the first column so only bother with c4
GetConst1FromReg = 4

; Lighting vertex shaders to copy the matrices to. We used to also copy them to
; the pixel shaders, but now we pass them from the vertex shaders to the pixel
; shaders instead, which makes it easier to tweak the FOV source on a game by
; game basis.

[VSDF7A050C]
; Unity Hidden/Internal-PrePassLighting.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; This shader will use it's own MV+MVP matrices when they are valid (still need
; to use Helix mod to inverse the MV matrix), and the passed in ones when they
; are not:
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
; Get the MV matrix passed from the game to this shader and invert it:
UseMatrix1 = true
GetMatrixFromReg1 = 0
InverseMatrix1 = true
MatrixReg1 = 184
[VS36A3FBCB]
; Unity Hidden/Internal-PrePassLighting.shader (older version of VSDF7A050C)
; This shader will use it's own MV+MVP matrices when they are valid (still need
; to use Helix mod to inverse the MV matrix), and the passed in ones when they
; are not:
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
; Get the MV matrix passed from the game to this shader and invert it:
UseMatrix1 = true
GetMatrixFromReg1 = 0
InverseMatrix1 = true
MatrixReg1 = 184
[VSBAEDDED5]
; Unity Hidden/Internal-PrePassCollectShadows.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; This shader is used for directional lighting, and must always have an
; alternate source of the MV+MVP matrices passed to it.
; Note: This shader has an MVP matrix, but not the matching MV matrix.
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190


[VS207A3665]
; Shader already uses s0, so use s3 instead:
DefVSSampler = 260

[VSB87415F7]
; Shader already uses s0, so use s3 instead:
DefVSSampler = 260

[VSB2C70A18]
; Shader already uses s0, so use s3 instead:
DefVSSampler = 260

[VSB48AE0A6]
; Shader already uses s0, so use s3 instead:
DefVSSampler = 260


; [VS4D29301F] - WATER SHADER, ALL FOUR SAMPLERS IN USE!



; Water fog volume shaders:

[PS67DFA1A0]
; BEAM Team/Post Effects/Volumetric Fog - "CAUSTICS_ON" "INGAME/INTRO" "WATER_ABOVE"
; Responsible for underwater shadows (viewed from above the water), but doesn't
; work like the other Unity lighting shaders.  I'll need the inverse projection
; matrix here to correct view-space coords
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Grab the inverse view matrix in this shader and invert it back to a regular
; view matrix so we can convert world coords to view coords and back:
UseMatrix1 = true
GetMatrixFromReg1 = 8
InverseMatrix1 = true
MatrixReg1 = 170

[PSBB51A9D8]
; BEAM Team/Post Effects/Volumetric Fog - "CAUSTICS_ON" "INGAME" "WATER_BELOW"
; Responsible for underwater shadows (viewed from underwater), but doesn't work
; like the other Unity lighting shaders.  I'll need the inverse projection
; matrix here to correct view-space coords
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Grab the inverse view matrix in this shader and invert it back to a regular
; view matrix so we can convert world coords to view coords and back:
UseMatrix1 = true
GetMatrixFromReg1 = 8
InverseMatrix1 = true
MatrixReg1 = 170

[PS5E572AA0]
; BEAM Team/Post Effects/Volumetric Fog - "CAUSTICS_ON" "INTRO" "WATER_BELOW"
; Presumably needs to be fixed as well as above
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
UseMatrix1 = true
GetMatrixFromReg1 = 8
InverseMatrix1 = true
MatrixReg1 = 170




; [VS9F7BB09C]
; ; UI shader
; ; C3193C1E - *ALL* grey/white/black textures (crosshair, inventory, menus, full screen fade to black, etc)
; CheckTexCRC = true
; ValForDefined = 1
; ValNotDefined = 0
; TexCounterReg = 251
; UseDefinedOnly = false
; DefinedTexturesVS = C3193C1E;
; VBOffsetList = 0;
; [VB9F7BB09C.0]
