// ---- Created with 3Dmigoto v1.3.0 on Sat Feb 06 02:19:26 2016
cbuffer cb1 : register(b1)
{
  float4 cb1[16];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[2];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float4 v3 : COLOR0,
  float4 v4 : COLOR1,
  out float3 o0 : TEXCOORD0,
  out float p0 : TEXCOORD7,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : COLOR0,
  out float4 o4 : COLOR1,
  out float4 o5 : SV_Position0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cmp(1.000000 == cb0[1].w);
  if (r0.x != 0) {
    r0.xy = float2(255,-2) * v4.xy;
    r0.xzw = v3.xyz * r0.xxx;
    r1.xyz = v0.xyz;
    r1.w = 1;
    r1.x = dot(r1.xyzw, cb1[5].xyzw);
    r1.y = 0.00264599989 * r1.x;
    r1.x = -1 + r1.x;
    r1.x = saturate(r1.x / 99);
    r1.x = 1 + -r1.x;
    r1.x = 0.5 + r1.x;
    r1.x = r1.y * r1.x;
    r1.x = -1 + r1.x;
    r1.x = v4.w * r1.x;
    r1.x = 1 + r1.x;
    r1.xy = v1.xy * r1.xx;
    sincos(v1.z, r2.x, r3.x);
    r1.z = r3.x * r3.x;
    r1.z = v4.w * r1.z;
    r1.z = 1 + r1.z;
    o4.xyz = r1.zzz * r0.xzw;
    r0.x = (int)cb0[0].z;
    r0.z = r3.x * r1.y;
    r0.z = r0.z + -r1.y;
    r0.z = v4.z * r0.z;
    r0.z = r1.y + r0.z;
    r1.yzw = cb1[r0.x+10].xyz * r3.xxx;
    r2.yzw = cb1[r0.x+13].xyz * r2.xxx;
    r1.yzw = r2.yzw + r1.yzw;
    r2.yzw = cb1[r0.x+13].xyz * r3.xxx;
    r3.xyz = cb1[r0.x+10].xyz * r2.xxx;
    r2.xyz = -r3.xyz + r2.yzw;
    r1.xyz = r1.yzw * r1.xxx;
    r0.xzw = r2.xyz * r0.zzz;
    r0.xzw = r1.xyz + r0.xzw;
    r1.xyz = v0.xyz + r0.xzw;
    r0.x = r1.z * cb1[0].z + cb1[0].w;
    r0.x = r1.y * cb1[0].y + r0.x;
    o5.x = r1.x * cb1[0].x + r0.x;
    r0.x = r1.z * cb1[1].z + cb1[1].w;
    r0.x = r1.y * cb1[1].y + r0.x;
    o5.y = r1.x * cb1[1].x + r0.x;
    r0.x = r1.z * cb1[2].z + cb1[2].w;
    r0.x = r1.y * cb1[2].y + r0.x;
    o5.z = r1.x * cb1[2].x + r0.x;
    r0.x = r1.z * cb1[3].z + cb1[3].w;
    r0.x = r1.y * cb1[3].y + r0.x;
    r0.x = r1.x * cb1[3].x + r0.x;
    r1.w = 1;
    p0.x = dot(r1.xyzw, cb1[5].xyzw);
    r0.z = cb0[0].x * r0.x;
    o2.w = saturate(cb0[0].y + r0.z);
    o0.xyz = r1.xyz;
    o2.xy = v2.xy;
    o2.z = r0.y;
    o3.xyzw = float4(0,0,0,0);
    o4.w = v3.w;
    o5.w = r0.x;
    o1.xyz = float3(0,0,0);
    return;
  }
  r0.x = v0.z * cb1[0].z + cb1[0].w;
  r0.x = v0.y * cb1[0].y + r0.x;
  o5.x = v0.x * cb1[0].x + r0.x;
  r0.x = v0.z * cb1[1].z + cb1[1].w;
  r0.x = v0.y * cb1[1].y + r0.x;
  o5.y = v0.x * cb1[1].x + r0.x;
  r0.x = v0.z * cb1[2].z + cb1[2].w;
  r0.x = v0.y * cb1[2].y + r0.x;
  o5.z = v0.x * cb1[2].x + r0.x;
  r0.x = v0.z * cb1[3].z + cb1[3].w;
  r0.x = v0.y * cb1[3].y + r0.x;
  r0.x = v0.x * cb1[3].x + r0.x;
  r0.yzw = -cb1[4].xyz + v0.xyz;
  r1.x = dot(r0.yzw, r0.yzw);
  r1.x = sqrt(r1.x);
  r1.y = 1 / r1.x;
  r0.yzw = r1.yyy * r0.yzw;
  r1.x = -cb1[7].w + r1.x;
  r1.x = max(0, r1.x);
  r1.x = cb1[8].w * r1.x;
  r1.x = -r1.x * r1.x;
  r1.x = exp2(r1.x);
  r0.y = saturate(dot(cb1[6].xyz, r0.yzw));
  r0.y = r0.y * r0.y;
  r0.y = r0.y * r0.y;
  r0.y = r0.y * r0.y;
  r1.yzw = cb1[8].xyz + -cb1[7].xyz;
  r0.yzw = r1.yzw * r0.yyy;
  r0.yzw = cb1[7].xyz + r0.yzw;
  r1.y = 1 + -r1.x;
  o3.xyz = r1.yyy * r0.yzw;
  r2.xyz = v0.xyz;
  r2.w = 1;
  p0.x = dot(r2.xyzw, cb1[5].xyzw);
  r0.y = cb0[0].x * r0.x;
  o2.w = saturate(cb0[0].y + r0.y);
  r0.y = 255 * v4.x;
  o4.xyz = v3.xyz * r0.yyy;
  o0.xyz = v0.xyz;
  o2.xy = v2.xy;
  o2.z = 0;
  o3.w = r1.x;
  o4.w = v3.w;
  o5.w = r0.x;
  o1.xyz = v1.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
// COLOR                    1   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 7      w        0     NONE   float      w
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// COLOR                    0   xyzw        3     NONE   float   xyzw
// COLOR                    1   xyzw        4     NONE   float   xyzw
// SV_Position              0   xyzw        5      POS   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[2], immediateIndexed
dcl_constantbuffer cb1[16], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output o0.xyz
dcl_output o0.w
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output_siv o5.xyzw, position
dcl_temps 4
eq r0.x, l(1.000000), cb0[1].w
if_nz r0.x
  mul r0.xy, v4.xyxx, l(255.000000, -2.000000, 0.000000, 0.000000)
  mul r0.xzw, r0.xxxx, v3.xxyz
  mov r1.xyz, v0.xyzx
  mov r1.w, l(1.000000)
  dp4 r1.x, r1.xyzw, cb1[5].xyzw
  mul r1.y, r1.x, l(0.002646)
  add r1.x, r1.x, l(-1.000000)
  div_sat r1.x, r1.x, l(99.000000)
  add r1.x, -r1.x, l(1.000000)
  add r1.x, r1.x, l(0.500000)
  mul r1.x, r1.x, r1.y
  add r1.x, r1.x, l(-1.000000)
  mul r1.x, r1.x, v4.w
  add r1.x, r1.x, l(1.000000)
  mul r1.xy, r1.xxxx, v1.xyxx
  sincos r2.x, r3.x, v1.z
  mul r1.z, r3.x, r3.x
  mul r1.z, r1.z, v4.w
  add r1.z, r1.z, l(1.000000)
  mul o4.xyz, r0.xzwx, r1.zzzz
  ftoi r0.x, cb0[0].z
  mul r0.z, r1.y, r3.x
  add r0.z, -r1.y, r0.z
  mul r0.z, r0.z, v4.z
  add r0.z, r0.z, r1.y
  mul r1.yzw, r3.xxxx, cb1[r0.x + 10].xxyz
  mul r2.yzw, r2.xxxx, cb1[r0.x + 13].xxyz
  add r1.yzw, r1.yyzw, r2.yyzw
  mul r2.yzw, r3.xxxx, cb1[r0.x + 13].xxyz
  mul r3.xyz, r2.xxxx, cb1[r0.x + 10].xyzx
  add r2.xyz, r2.yzwy, -r3.xyzx
  mul r1.xyz, r1.xxxx, r1.yzwy
  mul r0.xzw, r0.zzzz, r2.xxyz
  add r0.xzw, r0.xxzw, r1.xxyz
  add r1.xyz, r0.xzwx, v0.xyzx
  mad r0.x, r1.z, cb1[0].z, cb1[0].w
  mad r0.x, r1.y, cb1[0].y, r0.x
  mad o5.x, r1.x, cb1[0].x, r0.x
  mad r0.x, r1.z, cb1[1].z, cb1[1].w
  mad r0.x, r1.y, cb1[1].y, r0.x
  mad o5.y, r1.x, cb1[1].x, r0.x
  mad r0.x, r1.z, cb1[2].z, cb1[2].w
  mad r0.x, r1.y, cb1[2].y, r0.x
  mad o5.z, r1.x, cb1[2].x, r0.x
  mad r0.x, r1.z, cb1[3].z, cb1[3].w
  mad r0.x, r1.y, cb1[3].y, r0.x
  mad r0.x, r1.x, cb1[3].x, r0.x
  mov r1.w, l(1.000000)
  dp4 o0.w, r1.xyzw, cb1[5].xyzw
  mul r0.z, r0.x, cb0[0].x
  add_sat o2.w, r0.z, cb0[0].y
  mov o0.xyz, r1.xyzx
  mov o2.xy, v2.xyxx
  mov o2.z, r0.y
  mov o3.xyzw, l(0,0,0,0)
  mov o4.w, v3.w
  mov o5.w, r0.x
  mov o1.xyz, l(0,0,0,0)
  ret 
endif 
mad r0.x, v0.z, cb1[0].z, cb1[0].w
mad r0.x, v0.y, cb1[0].y, r0.x
mad o5.x, v0.x, cb1[0].x, r0.x
mad r0.x, v0.z, cb1[1].z, cb1[1].w
mad r0.x, v0.y, cb1[1].y, r0.x
mad o5.y, v0.x, cb1[1].x, r0.x
mad r0.x, v0.z, cb1[2].z, cb1[2].w
mad r0.x, v0.y, cb1[2].y, r0.x
mad o5.z, v0.x, cb1[2].x, r0.x
mad r0.x, v0.z, cb1[3].z, cb1[3].w
mad r0.x, v0.y, cb1[3].y, r0.x
mad r0.x, v0.x, cb1[3].x, r0.x
add r0.yzw, v0.xxyz, -cb1[4].xxyz
dp3 r1.x, r0.yzwy, r0.yzwy
sqrt r1.x, r1.x
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mul r0.yzw, r0.yyzw, r1.yyyy
add r1.x, r1.x, -cb1[7].w
max r1.x, r1.x, l(0.000000)
mul r1.x, r1.x, cb1[8].w
mul r1.x, r1.x, -r1.x
exp r1.x, r1.x
dp3_sat r0.y, cb1[6].xyzx, r0.yzwy
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r0.y
add r1.yzw, -cb1[7].xxyz, cb1[8].xxyz
mul r0.yzw, r0.yyyy, r1.yyzw
add r0.yzw, r0.yyzw, cb1[7].xxyz
add r1.y, -r1.x, l(1.000000)
mul o3.xyz, r0.yzwy, r1.yyyy
mov r2.xyz, v0.xyzx
mov r2.w, l(1.000000)
dp4 o0.w, r2.xyzw, cb1[5].xyzw
mul r0.y, r0.x, cb0[0].x
add_sat o2.w, r0.y, cb0[0].y
mul r0.y, v4.x, l(255.000000)
mul o4.xyz, r0.yyyy, v3.xyzx
mov o0.xyz, v0.xyzx
mov o2.xy, v2.xyxx
mov o2.z, l(0)
mov o3.w, r1.x
mov o4.w, v3.w
mov o5.w, r0.x
mov o1.xyz, v1.xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\The Witness\wrapper1349(29,14-15): warning X3578: Output value 'o1' is not completely initialized
C:\Steam\steamapps\common\The Witness\wrapper1349(29,14-15): warning X3578: Output value 'o1' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
