// ---- Created with 3Dmigoto v1.3.0 on Sat Feb 06 02:19:01 2016
cbuffer cb1 : register(b1)
{
  float4 cb1[5];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[3];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : POSITION0,
  float2 v1 : TEXCOORD1,
  out float3 o0 : TEXCOORD0,
  out float p0 : TEXCOORD1,
  out float2 o1 : TEXCOORD2,
  out float4 o2 : SV_Position0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = 1;
  r1.xyz = cb0[0].xyz * v0.xyz;
  r1.z = cb0[0].w + r1.z;
  r1.y = r1.y + r1.z;
  r0.x = r1.x + r1.y;
  r1.xyz = cb0[1].xyz * v0.xyz;
  r1.z = cb0[1].w + r1.z;
  r1.y = r1.y + r1.z;
  r0.y = r1.x + r1.y;
  r1.xyz = cb0[2].xyz * v0.xyz;
  r1.z = cb0[2].w + r1.z;
  r1.y = r1.y + r1.z;
  r0.z = r1.x + r1.y;
  p0.x = dot(r0.xyzw, cb1[4].xyzw);
  o0.xyz = r0.xyz;
  o1.xy = v1.xy;
  r0.w = r0.z * cb1[0].z + cb1[0].w;
  r0.w = r0.y * cb1[0].y + r0.w;
  o2.x = r0.x * cb1[0].x + r0.w;
  r0.w = r0.z * cb1[1].z + cb1[1].w;
  r0.w = r0.y * cb1[1].y + r0.w;
  o2.y = r0.x * cb1[1].x + r0.w;
  r0.w = r0.z * cb1[2].z + cb1[2].w;
  r0.z = r0.z * cb1[3].z + cb1[3].w;
  r0.z = r0.y * cb1[3].y + r0.z;
  r0.y = r0.y * cb1[2].y + r0.w;
  o2.z = r0.x * cb1[2].x + r0.y;
  o2.w = r0.x * cb1[3].x + r0.z;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1      w        0     NONE   float      w
// TEXCOORD                 2   xy          1     NONE   float   xy  
// SV_Position              0   xyzw        2      POS   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[3], immediateIndexed
dcl_constantbuffer cb1[5], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_output o0.xyz
dcl_output o0.w
dcl_output o1.xy
dcl_output_siv o2.xyzw, position
dcl_temps 2
mov r0.w, l(1.000000)
mul r1.xyz, v0.xyzx, cb0[0].xyzx
add r1.z, r1.z, cb0[0].w
add r1.y, r1.z, r1.y
add r0.x, r1.y, r1.x
mul r1.xyz, v0.xyzx, cb0[1].xyzx
add r1.z, r1.z, cb0[1].w
add r1.y, r1.z, r1.y
add r0.y, r1.y, r1.x
mul r1.xyz, v0.xyzx, cb0[2].xyzx
add r1.z, r1.z, cb0[2].w
add r1.y, r1.z, r1.y
add r0.z, r1.y, r1.x
dp4 o0.w, r0.xyzw, cb1[4].xyzw
mov o0.xyz, r0.xyzx
mov o1.xy, v1.xyxx
mad r0.w, r0.z, cb1[0].z, cb1[0].w
mad r0.w, r0.y, cb1[0].y, r0.w
mad o2.x, r0.x, cb1[0].x, r0.w
mad r0.w, r0.z, cb1[1].z, cb1[1].w
mad r0.w, r0.y, cb1[1].y, r0.w
mad o2.y, r0.x, cb1[1].x, r0.w
mad r0.w, r0.z, cb1[2].z, cb1[2].w
mad r0.z, r0.z, cb1[3].z, cb1[3].w
mad r0.z, r0.y, cb1[3].y, r0.z
mad r0.y, r0.y, cb1[2].y, r0.w
mad o2.z, r0.x, cb1[2].x, r0.y
mad o2.w, r0.x, cb1[3].x, r0.z
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
