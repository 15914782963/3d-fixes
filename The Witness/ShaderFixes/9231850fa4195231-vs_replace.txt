// Reflections
// PS b424f58060f2b3cd (foreground, sun reflection)
// PS 8faa10d313135706 (distance)
// ---- Created with 3Dmigoto v1.2.27 on Sat Feb 06 06:13:07 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[4];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include <ShaderFixes/matrix.hlsl>

void main( 
  float3 v0 : POSITION0,
  float2 v1 : TEXCOORD1,
  out float3 o0 : TEXCOORD0,
  out float p0 : TEXCOORD1,
  out float4 o1 : TEXCOORD2,
  out float4 o2 : TEXCOORD3,
  out float3 o3 : TEXCOORD4,
out float3 corrected_o0 : TEXCOORD5,
out float3 sun_o0 : TEXCOORD6,
  out float4 o4 : SV_Position0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);

  r0.xyz = cb0[2].xyz * v0.xyz;
  r0.z = cb0[2].w + r0.z;
  r0.y = r0.y + r0.z;
  r0.z = r0.x + r0.y;
  r1.xyz = cb0[0].xyz * v0.xyz;
  r0.w = cb0[0].w + r1.z;
  r0.w = r1.y + r0.w;
  r0.x = r1.x + r0.w;
  r1.xyz = cb0[1].xyz * v0.xyz;
  r0.w = cb0[1].w + r1.z;
  r0.w = r1.y + r0.w;
  r0.y = r1.x + r0.w;
  r1.xyz = -cb1[4].xyz + r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(r0.w);
  r0.w = log2(r0.w);
  r0.w = r0.w / 2;
  r0.w = -2 + r0.w;
  r1.xyzw = cb1[7].xyxy * cb1[6].xxxx;
  r1.xyzw = float4(0.200000003,0.200000003,0.400000006,0.400000006) * r1.xyzw;
  r2.xy = float2(0.5,0.5) * r1.xy;
  r3.xyzw = float4(0.00999999978,0.00999999978,0.00499999989,0.00499999989) * r0.xyxy;
  r2.xy = r3.xy + r2.xy;
  r2.xyzw = t1.SampleLevel(s1_s, r2.xy, r0.w, int2(0, 0)).xyzw;
  r1.xy = r3.xy + r1.xy;
  r1.zw = r3.zw + -r1.zw;
  r3.xyzw = t2.SampleLevel(s2_s, r1.zw, 0, int2(0, 0)).xyzw;
  r1.z = 2 * r3.y;
  r3.xyzw = t0.SampleLevel(s0_s, r1.xy, r0.w, int2(0, 0)).xyzw;
  r1.xyw = -r3.wxy + r2.wxy;
  r1.xyz = r1.zzz * r1.xyw;
  r1.xyz = r3.wxy + r1.xyz;
  r2.xyz = float3(-0.5,-0.5,-0.5) + r1.xyz;
  r1.xy = float2(2,2) * r1.yz;
  r0.w = 3 * r2.x;
  r1.zw = cb0[3].xx * r0.xy;
  r1.zw = cb0[3].zw + r1.zw;
  r1.xyzw = float4(-1,-1,0.0009765625,-0.0009765625) + r1.xyzw;
  r3.xyzw = t3.SampleLevel(s3_s, r1.zw, 0, int2(0, 0)).xyzw;
  r1.z = 1.25 * r3.z;
  r1.z = saturate(-0.25 + r1.z);
  r2.xw = float2(384,384) + -abs(r0.xy);
  r1.w = min(r2.x, r2.w);
  r1.w = saturate(r1.w / 32);
  r1.z = r1.z * r1.w;
  r2.xw = -cb1[7].zw + r0.xy;
  r1.w = dot(r2.xw, r2.xw);
  r1.w = sqrt(r1.w);
  r1.w = saturate(r1.w / 8);
  r1.z = r1.z * r1.w;
  r3.z = r1.z * r0.w;
  r0.w = 2 * r1.z;
  r1.xy = r1.zz * r1.xy;
  r3.xy = -r0.ww * r2.yz;
  r0.xyz = r3.xyz + r0.xyz;
  r0.w = 1;
  p0.x = dot(r0.xyzw, cb1[5].xyzw);

  o0.xyz = r0.xyz;

matrix m = matrix(cb1[0], cb1[1], cb1[2], cb1[3]);
matrix im = inverse(m);

float4 tmp = mul(m, float4(o0, 1));
float4 sun_tmp = tmp;

// World space stereo correction for the main reflection (fudge factor here
// seems to work regardless of convergence, distance, FOV, etc. But I still
// don't trust it):
tmp.x += stereo.x * (tmp.w - stereo.y) * 1.01; // * params.w;

// Alternate correction for the reflection of the sun:
sun_tmp.x -= stereo.x * stereo.y;

corrected_o0.xyz = mul(im, tmp);
sun_o0.xyz = mul(im, sun_tmp);

  o1.xy = v1.xy;
  r2.xy = cb0[3].xx * r0.xy;
  o2.xy = cb0[3].zw + r2.xy;
  r1.z = 2;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  o3.xyz = r1.xyz * r0.www;
o4 = mul(m, float4(r0.xyz, 1));


//o4.x -= stereo.x * (o4.w - stereo.y); // close, but no cigar

//o0.y += params.w; // world space coordinate of reflection


  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.27 on Sat Feb 06 06:13:07 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1      w        0     NONE   float      w
// TEXCOORD                 2   xy          1     NONE   float   xy  
// TEXCOORD                 3   xy          2     NONE   float   xy  
// TEXCOORD                 4   xyz         3     NONE   float   xyz 
// SV_Position              0   xyzw        4      POS   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input v0.xyz
dcl_input v1.xy
dcl_output o0.xyz
dcl_output o0.w
dcl_output o1.xy
dcl_output o2.xy
dcl_output o3.xyz
dcl_output_siv o4.xyzw, position
dcl_temps 4
mul r0.xyz, v0.xyzx, cb0[2].xyzx
add r0.z, r0.z, cb0[2].w
add r0.y, r0.z, r0.y
add r0.z, r0.y, r0.x
mul r1.xyz, v0.xyzx, cb0[0].xyzx
add r0.w, r1.z, cb0[0].w
add r0.w, r0.w, r1.y
add r0.x, r0.w, r1.x
mul r1.xyz, v0.xyzx, cb0[1].xyzx
add r0.w, r1.z, cb0[1].w
add r0.w, r0.w, r1.y
add r0.y, r0.w, r1.x
add r1.xyz, r0.xyzx, -cb1[4].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
log r0.w, r0.w
div r0.w, r0.w, l(2.000000)
add r0.w, r0.w, l(-2.000000)
mul r1.xyzw, cb1[6].xxxx, cb1[7].xyxy
mul r1.xyzw, r1.xyzw, l(0.200000, 0.200000, 0.400000, 0.400000)
mul r2.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r3.xyzw, r0.xyxy, l(0.010000, 0.010000, 0.005000, 0.005000)
add r2.xy, r2.xyxx, r3.xyxx
sample_l_aoffimmi(0,0,0) r2.xyzw, r2.xyxx, t1.xyzw, s1, r0.w
add r1.xy, r1.xyxx, r3.xyxx
add r1.zw, -r1.zzzw, r3.zzzw
sample_l_aoffimmi(0,0,0) r3.xyzw, r1.zwzz, t2.xyzw, s2, l(0.000000)
mul r1.z, r3.y, l(2.000000)
sample_l_aoffimmi(0,0,0) r3.xyzw, r1.xyxx, t0.xyzw, s0, r0.w
add r1.xyw, r2.wxwy, -r3.wxwy
mul r1.xyz, r1.xywx, r1.zzzz
add r1.xyz, r1.xyzx, r3.wxyw
add r2.xyz, r1.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mul r1.xy, r1.yzyy, l(2.000000, 2.000000, 0.000000, 0.000000)
mul r0.w, r2.x, l(3.000000)
mul r1.zw, r0.xxxy, cb0[3].xxxx
add r1.zw, r1.zzzw, cb0[3].zzzw
add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, 0.000976562500, -0.000976562500)
sample_l_aoffimmi(0,0,0) r3.xyzw, r1.zwzz, t3.xyzw, s3, l(0.000000)
mul r1.z, r3.z, l(1.250000)
add_sat r1.z, r1.z, l(-0.250000)
add r2.xw, -|r0.xxxy|, l(384.000000, 0.000000, 0.000000, 384.000000)
min r1.w, r2.w, r2.x
div_sat r1.w, r1.w, l(32.000000)
mul r1.z, r1.w, r1.z
add r2.xw, r0.xxxy, -cb1[7].zzzw
dp2 r1.w, r2.xwxx, r2.xwxx
sqrt r1.w, r1.w
div_sat r1.w, r1.w, l(8.000000)
mul r1.z, r1.w, r1.z
mul r3.z, r0.w, r1.z
mul r0.w, r1.z, l(2.000000)
mul r1.xy, r1.xyxx, r1.zzzz
mul r3.xy, r2.yzyy, -r0.wwww
add r0.xyz, r0.xyzx, r3.xyzx
mov r0.w, l(1.000000)
dp4 o0.w, r0.xyzw, cb1[5].xyzw
mov o0.xyz, r0.xyzx
mov o1.xy, v1.xyxx
mul r2.xy, r0.xyxx, cb0[3].xxxx
add o2.xy, r2.xyxx, cb0[3].zwzz
mov r1.z, l(2.000000)
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul o3.xyz, r0.wwww, r1.xyzx
mad r0.w, r0.z, cb1[0].z, cb1[0].w
mad r0.w, r0.y, cb1[0].y, r0.w
mad o4.x, r0.x, cb1[0].x, r0.w
mad r0.w, r0.z, cb1[1].z, cb1[1].w
mad r0.w, r0.y, cb1[1].y, r0.w
mad o4.y, r0.x, cb1[1].x, r0.w
mad r0.w, r0.z, cb1[2].z, cb1[2].w
mad r0.w, r0.y, cb1[2].y, r0.w
mad o4.z, r0.x, cb1[2].x, r0.w
mad r0.z, r0.z, cb1[3].z, cb1[3].w
mad r0.y, r0.y, cb1[3].y, r0.z
mad o4.w, r0.x, cb1[3].x, r0.y
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
