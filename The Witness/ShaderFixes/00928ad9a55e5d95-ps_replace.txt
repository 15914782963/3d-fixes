// Fog looking down from Mountain (low)
// ---- Created with 3Dmigoto v1.3.0 on Sat Feb 06 02:19:25 2016
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[10];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[7];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : TEXCOORD0,
  float w0 : TEXCOORD2,
  float3 v1 : TEXCOORD3,

float3 corrected_v0 : TEXCOORD4,
matrix m : TEXCOORD5,
matrix im : TEXCOORD9,

  float4 v2 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = -cb1[0].xyz + v0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r0.w);
  r0.w = sqrt(r0.w);
  r1.xyz = r1.xxx * r0.xyz;

float4 stereo = StereoParams.Load(0);
float4 tmp = mul(m, float4(r1.xyz, 1));
tmp.x -= stereo.x * (tmp.w - stereo.y) / tmp.w;
r1.xyz = mul(im, tmp);

  r0.x = dot(r1.xyz, cb0[4].xyz);
  r0.y = cmp(0 < r0.x);
  r1.w = cmp(r0.x < 0);
  r2.x = (int)-r0.y + (int)r1.w;
  r0.y = (int)r0.y + (int)-r1.w;
  r0.y = (int)r0.y;
  r1.w = (int)r2.x;
  r2.x = dot(cb1[0].xyzw, cb0[4].xyzw);
  r1.w = r1.w * cb0[2].x + -r2.x;
  r0.y = r0.y * cb0[2].x + -r2.x;
  r0.y = r0.y / r0.x;
  r0.x = r1.w / r0.x;
  r1.w = dot(r1.xyz, cb0[5].xyz);
  r1.x = dot(r1.xyz, cb0[6].xyz);
  r1.y = cmp(0 < r1.w);
  r1.z = cmp(r1.w < 0);
  r2.x = (int)-r1.y + (int)r1.z;
  r1.y = (int)r1.y + (int)-r1.z;
  r1.y = (int)r1.y;
  r1.z = (int)r2.x;
  r2.x = dot(cb1[0].xyzw, cb0[5].xyzw);
  r1.z = r1.z * cb0[2].y + -r2.x;
  r1.y = r1.y * cb0[2].y + -r2.x;
  r1.yz = r1.yz / r1.ww;
  r0.x = min(r1.z, r0.x);
  r0.y = max(r1.y, r0.y);
  r1.y = cmp(0 < r1.x);
  r1.z = cmp(r1.x < 0);
  r1.w = (int)-r1.y + (int)r1.z;
  r1.y = (int)r1.y + (int)-r1.z;
  r1.yz = (int2)r1.yw;
  r1.w = dot(cb1[0].xyzw, cb0[6].xyzw);
  r1.z = r1.z * cb0[2].z + -r1.w;
  r1.z = r1.z / r1.x;
  r0.x = min(r1.z, r0.x);
  r1.y = r1.y * cb0[2].z + -r1.w;
  r1.y = r1.y / r1.x;
  r0.y = max(r1.y, r0.y);
  r0.x = r0.x + -r0.y;
  r0.y = r1.x * r0.y + r1.w;
  r1.yz = cb1[1].xy * v2.xy;
  r1.zw = saturate(r1.yz);
  r1.y = r1.y * 2 + -1;
  r1.zw = cb1[6].zw * r1.zw;
  r2.xyzw = t0.SampleLevel(s0_s, r1.zw, 0, int2(0, 0)).xyzw;
  r1.z = r2.x * cb1[2].z + cb1[2].w;
  r1.w = -v2.y * cb1[1].y + 1;
  r1.w = r1.w * 2 + -1;
  r1.z = r1.w * cb1[2].y + r1.z;
  r3.x = r1.y * cb1[2].x + r1.z;
  r1.z = r2.x * cb1[3].z + cb1[3].w;
  r1.z = r1.w * cb1[3].y + r1.z;
  r3.y = r1.y * cb1[3].x + r1.z;
  r1.z = r2.x * cb1[4].z + cb1[4].w;
  r2.x = r2.x * cb1[5].z + cb1[5].w;
  r2.x = r1.w * cb1[5].y + r2.x;
  r1.z = r1.w * cb1[4].y + r1.z;
  r3.z = r1.y * cb1[4].x + r1.z;
  r1.y = r1.y * cb1[5].x + r2.x;
  r1.yzw = r3.xyz / r1.yyy;
  r1.y = dot(r1.yzw, r1.yzw);
  r1.y = sqrt(r1.y);
  r1.y = r1.y + -r0.w;
  r0.x = min(r1.y, r0.x);
  r1.x = r1.x * r0.x;
  r0.y = r1.x * 0.5 + r0.y;
  r0.y = -cb0[2].z + r0.y;
  r1.x = -0.5 / cb0[2].z;
  r1.x = cb0[1].w * r1.x;
  r0.x = r1.x * r0.x;
  r0.x = r0.x * r0.y;
  r0.x = -r0.x * r0.x;
  r0.x = 0.765534759 * r0.x;
  r0.x = exp2(r0.x);
  o0.w = 1 + -r0.x;
  r0.x = 1 / r0.w;
  r0.y = -cb1[7].w + r0.w;
  r0.y = max(0, r0.y);
  r0.y = cb1[8].w * r0.y;
  r0.y = -r0.y * r0.y;
  r0.y = exp2(r0.y);
  r0.x = saturate(-r0.z * r0.x + 1);
  r0.x = log2(r0.x);
  r0.x = cb1[9].w * r0.x;
  r0.x = exp2(r0.x);
  r1.xyz = -cb1[9].xyz + cb1[7].xyz;
  r0.xzw = r0.xxx * r1.xyz + cb1[9].xyz;
  r1.x = 1 + -r0.y;
  r0.xzw = r1.xxx * r0.xzw;
  r0.xyz = cb0[0].xyz * r0.yyy + r0.xzw;
  r0.w = cmp(0 != cb0[3].y);
  o0.xyz = r0.www ? cb0[0].xyz : r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 2      w        0     NONE   float       
// TEXCOORD                 3   xyz         1     NONE   float       
// SV_Position              0   xyzw        2      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[7], immediateIndexed
dcl_constantbuffer cb1[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyz
dcl_input_ps_siv linear noperspective v2.xy, position
dcl_output o0.xyzw
dcl_temps 4
add r0.xyz, v0.xyzx, -cb1[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.x, r0.w
sqrt r0.w, r0.w
mul r1.xyz, r0.xyzx, r1.xxxx
dp3 r0.x, r1.xyzx, cb0[4].xyzx
lt r0.y, l(0.000000), r0.x
lt r1.w, r0.x, l(0.000000)
iadd r2.x, -r0.y, r1.w
iadd r0.y, r0.y, -r1.w
itof r0.y, r0.y
itof r1.w, r2.x
dp4 r2.x, cb1[0].xyzw, cb0[4].xyzw
mad r1.w, r1.w, cb0[2].x, -r2.x
mad r0.y, r0.y, cb0[2].x, -r2.x
div r0.y, r0.y, r0.x
div r0.x, r1.w, r0.x
dp3 r1.w, r1.xyzx, cb0[5].xyzx
dp3 r1.x, r1.xyzx, cb0[6].xyzx
lt r1.y, l(0.000000), r1.w
lt r1.z, r1.w, l(0.000000)
iadd r2.x, -r1.y, r1.z
iadd r1.y, r1.y, -r1.z
itof r1.y, r1.y
itof r1.z, r2.x
dp4 r2.x, cb1[0].xyzw, cb0[5].xyzw
mad r1.z, r1.z, cb0[2].y, -r2.x
mad r1.y, r1.y, cb0[2].y, -r2.x
div r1.yz, r1.yyzy, r1.wwww
min r0.x, r0.x, r1.z
max r0.y, r0.y, r1.y
lt r1.y, l(0.000000), r1.x
lt r1.z, r1.x, l(0.000000)
iadd r1.w, -r1.y, r1.z
iadd r1.y, r1.y, -r1.z
itof r1.yz, r1.yywy
dp4 r1.w, cb1[0].xyzw, cb0[6].xyzw
mad r1.z, r1.z, cb0[2].z, -r1.w
div r1.z, r1.z, r1.x
min r0.x, r0.x, r1.z
mad r1.y, r1.y, cb0[2].z, -r1.w
div r1.y, r1.y, r1.x
max r0.y, r0.y, r1.y
add r0.x, -r0.y, r0.x
mad r0.y, r1.x, r0.y, r1.w
mul r1.yz, v2.xxyx, cb1[1].xxyx
mov_sat r1.zw, r1.yyyz
mad r1.y, r1.y, l(2.000000), l(-1.000000)
mul r1.zw, r1.zzzw, cb1[6].zzzw
sample_l_aoffimmi(0,0,0) r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
mad r1.z, r2.x, cb1[2].z, cb1[2].w
mad r1.w, -v2.y, cb1[1].y, l(1.000000)
mad r1.w, r1.w, l(2.000000), l(-1.000000)
mad r1.z, r1.w, cb1[2].y, r1.z
mad r3.x, r1.y, cb1[2].x, r1.z
mad r1.z, r2.x, cb1[3].z, cb1[3].w
mad r1.z, r1.w, cb1[3].y, r1.z
mad r3.y, r1.y, cb1[3].x, r1.z
mad r1.z, r2.x, cb1[4].z, cb1[4].w
mad r2.x, r2.x, cb1[5].z, cb1[5].w
mad r2.x, r1.w, cb1[5].y, r2.x
mad r1.z, r1.w, cb1[4].y, r1.z
mad r3.z, r1.y, cb1[4].x, r1.z
mad r1.y, r1.y, cb1[5].x, r2.x
div r1.yzw, r3.xxyz, r1.yyyy
dp3 r1.y, r1.yzwy, r1.yzwy
sqrt r1.y, r1.y
add r1.y, -r0.w, r1.y
min r0.x, r0.x, r1.y
mul r1.x, r0.x, r1.x
mad r0.y, r1.x, l(0.500000), r0.y
add r0.y, r0.y, -cb0[2].z
div r1.x, l(-0.500000), cb0[2].z
mul r1.x, r1.x, cb0[1].w
mul r0.x, r0.x, r1.x
mul r0.x, r0.y, r0.x
mul r0.x, r0.x, -r0.x
mul r0.x, r0.x, l(0.765535)
exp r0.x, r0.x
add o0.w, -r0.x, l(1.000000)
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add r0.y, r0.w, -cb1[7].w
max r0.y, r0.y, l(0.000000)
mul r0.y, r0.y, cb1[8].w
mul r0.y, r0.y, -r0.y
exp r0.y, r0.y
mad_sat r0.x, -r0.z, r0.x, l(1.000000)
log r0.x, r0.x
mul r0.x, r0.x, cb1[9].w
exp r0.x, r0.x
add r1.xyz, cb1[7].xyzx, -cb1[9].xyzx
mad r0.xzw, r0.xxxx, r1.xxyz, cb1[9].xxyz
add r1.x, -r0.y, l(1.000000)
mul r0.xzw, r0.xxzw, r1.xxxx
mad r0.xyz, cb0[0].xyzx, r0.yyyy, r0.xzwx
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[3].y
movc o0.xyz, r0.wwww, cb0[0].xyzx, r0.xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
