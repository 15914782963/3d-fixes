// ---- Created with 3Dmigoto v1.3.0 on Sat Feb 06 02:19:01 2016
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

TextureCube<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[11];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[4];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : TEXCOORD0,
  float w0 : TEXCOORD1,
  float2 v1 : TEXCOORD2,
  float4 v2 : SV_Position0,
  uint v3 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = cb1[0].xyz + -v0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xy = cb1[2].xy * v2.xy;
  r1.xy = saturate(r1.xy);
  r1.xy = cb1[3].zw * r1.xy;
  r1.xyzw = t4.SampleLevel(s4_s, r1.xy, 0, int2(0, 0)).xyzw;
  r0.w = r1.x * cb1[2].z + cb1[2].w;
  r0.w = 1 / r0.w;
  r1.x = -w0.x + r0.w;
  r1.x = saturate(8 * r1.x);
  r1.yzw = float3(0.00999999978,0.00999999978,0.25) * v0.xyw;
  r2.xyzw = cb1[1].xxxx * float4(0,0.0199999996,0.0199999996,0) + r1.yzyz;
  r3.xyzw = t2.Sample(s2_s, r2.xy).xyzw;
  r2.xyzw = t2.Sample(s2_s, r2.zw).xyzw;
  r1.yz = r3.xy + r2.xy;
  r1.yz = r1.yz * float2(2,2) + float2(-2,-2);
  r2.xw = float2(1,-1);
  r2.yz = cb0[3].zz;
  r1.yz = r2.xy * r1.yz;
  r2.xy = r2.zw * r1.yz;
  r2.z = 16;
  r1.y = dot(r2.xyz, r2.xyz);
  r1.y = rsqrt(r1.y);
  r2.xyz = r2.xyz * r1.yyy;
  r1.y = dot(r0.xyz, r2.xyz);
  r1.z = r1.y + r1.y;
  r0.xyz = r2.xyz * -r1.zzz + r0.xyz;
  r2.zw = float2(178.600006,-163.899994) + v0.xy;
  r1.z = dot(r2.zw, r2.zw);
  r1.z = sqrt(r1.z);
  r1.z = 0.699999988 + -r1.z;
  r1.z = max(0, r1.z);
  r2.zw = -cb0[3].xy + float2(1,1);
  r2.zw = r1.zz * r2.zw + cb0[3].xy;
  r1.z = 1 + -r2.z;
  r1.y = -9 * r1.y;
  r1.y = exp2(r1.y);
  r1.y = min(1, r1.y);
  r1.y = r1.z * r1.y + r2.z;
  r3.z = dot(r2.xy, cb1[4].xy);
  r1.z = dot(r2.xy, cb1[5].xy);
  r3.y = -r1.z;
  r1.z = max(4, r1.w);
  r2.yz = float2(0,0);
  r4.xy = float2(0,0);
  r4.z = r0.w;
  r1.w = 0;
  while (true) {
    r3.x = cmp((int)r1.w >= 2);
    if (r3.x != 0) break;
    r3.x = -w0.x + r4.z;
    r3.x = saturate(r3.x / r1.z);
    r3.x = 0.200000003 * r3.x;
    r5.yz = r3.yz * r3.xx;
    r3.xw = saturate(v2.xy * cb1[2].xy + r5.yz);
    r3.xw = cb1[3].zw * r3.xw;
    r6.xyzw = t4.SampleLevel(s4_s, r3.xw, 0, int2(0, 0)).xyzw;
    r3.x = r6.x * cb1[2].z + cb1[2].w;
    r5.x = 1 / r3.x;
    r3.x = cmp(r5.x < w0.x);
    r2.x = r4.z;
    r4.xyz = r3.xxx ? r2.yzx : r5.yzx;
    r1.w = (int)r1.w + 1;
  }
  r0.w = -w0.x + r4.z;
  r1.zw = saturate(v2.xy * cb1[2].xy + r4.xy);
  r1.zw = cb1[3].zw * r1.zw;
  r3.xyzw = t3.SampleLevel(s3_s, r1.zw, 0, int2(0, 0)).xyzw;
  r2.xyz = cb0[2].xyz + float3(-1,-1,-1);
  r2.xyz = r1.xxx * r2.xyz + float3(1,1,1);
  r2.xyz = r3.xyz * r2.xyz;
  r3.xyzw = t0.SampleLevel(s0_s, v1.xy, 0, int2(0, 0)).xyzw;
  r1.z = r3.w * 0.850000024 + 0.150000006;
  r3.xyz = r3.xyz * r1.zzz;
  r3.xyz = r3.xyz * r3.xyz;
  r3.xyz = r3.xyz * cb0[0].xxx + cb0[2].www;
  r3.xyz = cb0[1].xyz * r3.xyz;
  r0.w = cb0[1].w * abs(r0.w);
  r0.w = exp2(-r0.w);
  r1.z = 1 + -r0.w;
  r1.z = max(0, r1.z);
  r3.xyz = r1.zzz * r3.xyz;
  r2.xyz = r2.xyz * r0.www + r3.xyz;
  r0.xyzw = t1.SampleLevel(s1_s, r0.xyz, 0).xyzw;
  r3.xyz = v0.xyz;
  r3.w = 1;
  r4.x = dot(r3.xyzw, cb1[7].xyzw);
  r4.y = dot(r3.xyzw, cb1[8].xyzw);
  r0.w = dot(r3.xyzw, cb1[10].xyzw);
  r1.zw = r4.xy / r0.ww;
  r3.x = saturate(r1.z * 0.5 + 0.5);
  r3.y = saturate(-r1.w * 0.5 + 0.5);
  r3.xyzw = t5.SampleGrad(s5_s, r3.xy, float4(0,0,0,0), float4(0,0,0,0)).xyzw;
  r0.xyz = -r3.xyz + r0.xyz;
  r0.xyz = cb0[3].www * r0.xyz + r3.xyz;
  r0.w = r1.x * r1.y;
  r0.xyz = r0.www * r0.xyz;
  o0.xyz = r0.xyz * r2.www + r2.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1      w        0     NONE   float      w
// TEXCOORD                 2   xy          1     NONE   float   xy  
// SV_Position              0   xyzw        2      POS   float   xy  
// SV_IsFrontFace           0   x           3    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[11], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v0.xyz
dcl_input_ps linear v0.w
dcl_input_ps linear v1.xy
dcl_input_ps_siv linear noperspective v2.xy, position
dcl_output o0.xyzw
dcl_temps 7
add r0.xyz, -v0.xyzx, cb1[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xy, v2.xyxx, cb1[2].xyxx
mov_sat r1.xy, r1.xyxx
mul r1.xy, r1.xyxx, cb1[3].zwzz
sample_l_aoffimmi(0,0,0) r1.xyzw, r1.xyxx, t4.xyzw, s4, l(0.000000)
mad r0.w, r1.x, cb1[2].z, cb1[2].w
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add r1.x, r0.w, -v0.w
mul_sat r1.x, r1.x, l(8.000000)
mul r1.yzw, v0.xxyw, l(0.000000, 0.010000, 0.010000, 0.250000)
mad r2.xyzw, cb1[1].xxxx, l(0.000000, 0.020000, 0.020000, 0.000000), r1.yzyz
sample r3.xyzw, r2.xyxx, t2.xyzw, s2
sample r2.xyzw, r2.zwzz, t2.xyzw, s2
add r1.yz, r2.xxyx, r3.xxyx
mad r1.yz, r1.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -2.000000, -2.000000, 0.000000)
mov r2.xw, l(1.000000,0,0,-1.000000)
mov r2.yz, cb0[3].zzzz
mul r1.yz, r1.yyzy, r2.xxyx
mul r2.xy, r1.yzyy, r2.zwzz
mov r2.z, l(16.000000)
dp3 r1.y, r2.xyzx, r2.xyzx
rsq r1.y, r1.y
mul r2.xyz, r1.yyyy, r2.xyzx
dp3 r1.y, r0.xyzx, r2.xyzx
add r1.z, r1.y, r1.y
mad r0.xyz, r2.xyzx, -r1.zzzz, r0.xyzx
add r2.zw, v0.xxxy, l(0.000000, 0.000000, 178.600006, -163.899994)
dp2 r1.z, r2.zwzz, r2.zwzz
sqrt r1.z, r1.z
add r1.z, -r1.z, l(0.700000)
max r1.z, r1.z, l(0.000000)
add r2.zw, l(0.000000, 0.000000, 1.000000, 1.000000), -cb0[3].xxxy
mad r2.zw, r1.zzzz, r2.zzzw, cb0[3].xxxy
add r1.z, -r2.z, l(1.000000)
mul r1.y, r1.y, l(-9.000000)
exp r1.y, r1.y
min r1.y, r1.y, l(1.000000)
mad r1.y, r1.z, r1.y, r2.z
dp2 r3.z, r2.xyxx, cb1[4].xyxx
dp2 r1.z, r2.xyxx, cb1[5].xyxx
mov r3.y, -r1.z
max r1.z, r1.w, l(4.000000)
mov r2.yz, l(0,0,0,0)
mov r4.xy, l(0,0,0,0)
mov r4.z, r0.w
mov r1.w, l(0)
loop 
  ige r3.x, r1.w, l(2)
  breakc_nz r3.x
  add r3.x, r4.z, -v0.w
  div_sat r3.x, r3.x, r1.z
  mul r3.x, r3.x, l(0.200000)
  mul r5.yz, r3.xxxx, r3.yyzy
  mad_sat r3.xw, v2.xxxy, cb1[2].xxxy, r5.yyyz
  mul r3.xw, r3.xxxw, cb1[3].zzzw
  sample_l_aoffimmi(0,0,0) r6.xyzw, r3.xwxx, t4.xyzw, s4, l(0.000000)
  mad r3.x, r6.x, cb1[2].z, cb1[2].w
  div r5.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
  lt r3.x, r5.x, v0.w
  mov r2.x, r4.z
  movc r4.xyz, r3.xxxx, r2.yzxy, r5.yzxy
  iadd r1.w, r1.w, l(1)
endloop 
add r0.w, r4.z, -v0.w
mad_sat r1.zw, v2.xxxy, cb1[2].xxxy, r4.xxxy
mul r1.zw, r1.zzzw, cb1[3].zzzw
sample_l_aoffimmi(0,0,0) r3.xyzw, r1.zwzz, t3.xyzw, s3, l(0.000000)
add r2.xyz, l(-1.000000, -1.000000, -1.000000, 0.000000), cb0[2].xyzx
mad r2.xyz, r1.xxxx, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xyzx, r3.xyzx
sample_l_aoffimmi(0,0,0) r3.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)
mad r1.z, r3.w, l(0.850000), l(0.150000)
mul r3.xyz, r1.zzzz, r3.xyzx
mul r3.xyz, r3.xyzx, r3.xyzx
mad r3.xyz, r3.xyzx, cb0[0].xxxx, cb0[2].wwww
mul r3.xyz, r3.xyzx, cb0[1].xyzx
mul r0.w, |r0.w|, cb0[1].w
exp r0.w, -r0.w
add r1.z, -r0.w, l(1.000000)
max r1.z, r1.z, l(0.000000)
mul r3.xyz, r3.xyzx, r1.zzzz
mad r2.xyz, r2.xyzx, r0.wwww, r3.xyzx
sample_l r0.xyzw, r0.xyzx, t1.xyzw, s1, l(0.000000)
mov r3.xyz, v0.xyzx
mov r3.w, l(1.000000)
dp4 r4.x, r3.xyzw, cb1[7].xyzw
dp4 r4.y, r3.xyzw, cb1[8].xyzw
dp4 r0.w, r3.xyzw, cb1[10].xyzw
div r1.zw, r4.xxxy, r0.wwww
mad_sat r3.x, r1.z, l(0.500000), l(0.500000)
mad_sat r3.y, -r1.w, l(0.500000), l(0.500000)
sample_d r3.xyzw, r3.xyxx, t5.xyzw, s5, l(0.000000, 0.000000, 0.000000, 0.000000), l(0.000000, 0.000000, 0.000000, 0.000000)
add r0.xyz, r0.xyzx, -r3.xyzx
mad r0.xyz, cb0[3].wwww, r0.xyzx, r3.xyzx
mul r0.w, r1.y, r1.x
mul r0.xyz, r0.xyzx, r0.wwww
mad o0.xyz, r0.xyzx, r2.wwww, r2.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\The Witness\wrapper1349(69,55-60): error X3018: invalid subscript 'xyw'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
