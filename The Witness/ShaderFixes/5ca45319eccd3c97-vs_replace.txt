// Mouse cursor in puzzles, the puzzles themselves, maybe other stuff
// ---- Created with 3Dmigoto v1.2.27 on Sat Feb 06 03:47:21 2016
cbuffer cb0 : register(b0)
{
  float4 cb0[4];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : POSITION0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  out float4 o0 : COLOR0,
  out float2 o1 : TEXCOORD0,
  out float4 o2 : SV_Position0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xyzw = v1.xyzw;
  o1.xy = v2.xy;
  r0.xyz = v0.xyz;
  r0.w = 1;
  o2.x = dot(r0.xyzw, cb0[0].xyzw);
  o2.y = dot(r0.xyzw, cb0[1].xyzw);
  o2.z = dot(r0.xyzw, cb0[2].xyzw);
  o2.w = dot(r0.xyzw, cb0[3].xyzw);

// Don't adjust puzzles rendered to an off-screen buffer:
float4 rt_filter = IniParams.Load(int2(1, 0));
if (rt_filter.x != rt_filter.z || rt_filter.y != rt_filter.w)
	return;

// For now move the cursor to a fixed depth to line up with the puzzles:
float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);
float depth = params.x;
o2.x += stereo.x * (depth - stereo.y) / depth;

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.27 on Sat Feb 06 03:47:21 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_Position              0   xyzw        2      POS   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[4], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_output o0.xyzw
dcl_output o1.xy
dcl_output_siv o2.xyzw, position
dcl_temps 1
mov o0.xyzw, v1.xyzw
mov o1.xy, v2.xyxx
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 o2.x, r0.xyzw, cb0[0].xyzw
dp4 o2.y, r0.xyzw, cb0[1].xyzw
dp4 o2.z, r0.xyzw, cb0[2].xyzw
dp4 o2.w, r0.xyzw, cb0[3].xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
