// ---- Created with 3Dmigoto v1.3.0 on Sat Feb 06 02:19:13 2016
Texture3D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[1];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[8];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : TEXCOORD0,
  float4 v1 : COLOR0,
  float4 v2 : SV_Position0,
  uint v3 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = saturate(v1.x);
  r0.y = 1 + -r0.x;
  r0.x = v3.x ? r0.x : r0.y;
  r0.yz = cb1[0].xy * v2.xy;
  r0.w = cb0[2].z * cb0[2].z;
  r1.x = dot(r0.ww, cb0[2].zz);
  r0.w = r0.w * 3 + -r1.x;
  r1.x = -cb0[2].z + 1;
  r1.y = r1.x * r1.x;
  r1.x = -r1.y * r1.x + 1;
  r1.yz = r0.zy * float2(2,2) + float2(-1,-1);
  r1.w = cos(cb0[2].w);
  r2.x = -r1.x * 0.5 + 1;
  r2.y = r1.w * 0.150000006 + 1;
  r2.x = r2.x * r2.y + -1;
  r1.x = r1.x * r2.x + 1;
  r2.xy = r1.yz * r1.xx;
  r0.w = r1.w * r0.w;
  r0.w = 0.157000005 * r0.w;
  sincos(r0.w, r1.x, r3.x);
  r1.xw = r2.xy * r1.xx;
  r4.x = r2.y * r3.x + r1.x;
  r4.y = r2.x * r3.x + -r1.w;
  r1.xw = r4.xy * float2(0.5,0.5) + float2(0.5,0.5);
  r2.xyzw = t0.Sample(s0_s, r1.xw).xyzw;
  sincos(cb0[7].w, r1.x, r3.x);
  r0.w = r3.x * 0.25 + 0.75;
  r1.yw = r1.yz * r0.ww;
  r3.yz = r1.yw * r1.xx;
  r4.yz = r1.yw * r3.xx + -r3.zy;
  r4.xw = r1.wy * r3.xx + r3.yz;
  r4.x = cb0[7].x * r4.x;
  r3.xyzw = r4.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
  r3.xyzw = float4(0.800000012,0.800000012,0.800000012,0.800000012) * r3.xyzw;
  r4.xyzw = t1.SampleLevel(s1_s, r3.xy, 0, int2(0, 0)).xyzw;
  r1.xy = float2(1,-1) * r3.wz;
  r3.xyzw = t1.SampleLevel(s1_s, r1.xy, 0, int2(0, 0)).xyzw;
  r0.w = dot(r4.yy, r3.yy);
  r0.w = log2(r0.w);
  r0.w = 1.5 * r0.w;
  r0.w = exp2(r0.w);
  r0.w = min(1, r0.w);
  r1.xy = cb0[3].xy * r0.yz;
  r3.xy = float2(0.5,0.5) * r1.xy;
  r1.x = floor(r3.x);
  r3.z = r1.x * 0.03125 + cb0[2].w;
  r3.xyzw = t5.SampleLevel(s5_s, r3.xyz, 0).xyzw;
  r1.x = cb0[2].y * r3.x;
  r1.x = 0.0375000015 * r1.x;
  r1.xyw = r2.xyz * r0.www + r1.xxx;
  r2.xy = r0.yz * r0.yz + -r0.yz;
  r2.xy = r2.xy * float2(4,4) + float2(1,1);
  r2.zw = float2(1,1) + -r2.xy;
  r0.w = r2.z * r2.w;
  r2.xy = -r2.xy * r2.xy + float2(1,1);
  r2.x = r2.x * r2.y;
  r2.y = dot(r1.xyw, float3(0.298999995,0.587000012,0.114));
  r2.z = cb0[2].y * 0.5;
  r3.xyz = r2.yyy + -r1.xyw;
  r1.xyw = r2.zzz * r3.xyz + r1.xyw;
  r2.yzw = -cb0[5].xyz + cb0[4].xyz;
  r2.yzw = r0.www * r2.yzw + cb0[5].xyz;
  r2.yzw = -cb0[6].xyz + r2.yzw;
  r2.xyz = r2.xxx * r2.yzw + cb0[6].xyz;
  r3.xyz = r2.xyz * r1.xyw;
  r0.w = r1.z * r1.z;
  r0.w = cb0[1].y * r0.w;
  r1.z = -v2.y * cb1[0].y + 1;
  r2.w = cb0[1].x + -cb0[1].z;
  r2.w = -1 + r2.w;
  r2.w = cb0[1].w * r2.w + 1;
  r3.w = r0.w * 0.200000003 + r1.z;
  r2.w = r3.w + -r2.w;
  r3.w = 1 / cb0[1].y;
  r2.w = saturate(r3.w * r2.w);
  r3.w = r2.w * -2 + 3;
  r2.w = r2.w * r2.w;
  r2.w = r3.w * r2.w;
  r3.w = cb0[1].x + cb0[1].z;
  r0.w = -r0.w * 0.200000003 + r1.z;
  r0.w = -cb0[1].w * r3.w + r0.w;
  r1.z = 1 / -cb0[1].y;
  r0.w = saturate(r1.z * r0.w);
  r1.z = r0.w * -2 + 3;
  r0.w = r0.w * r0.w;
  r0.w = r1.z * r0.w + r2.w;
  r0.w = min(1, r0.w);
  r1.z = cmp(r0.w < 1);
  r0.yz = r0.yz * cb0[0].xy + cb0[0].zw;
  r4.xyzw = t2.Sample(s2_s, r0.yz).xyzw;
  r5.xyzw = t3.Sample(s3_s, r0.yz).xyzw;
  r6.xyzw = t4.Sample(s4_s, r0.yz).xyzw;
  if (r1.z != 0) {
    r4.xyz = float3(0,-0.344139993,1.77199996) * r6.www;
    r4.xyz = r5.www * float3(1.40199995,-0.714139998,0) + r4.xyz;
    r4.xyz = r4.xyz + r4.www;
    r4.xyz = saturate(float3(-0.703749001,0.531215012,-0.889474988) + r4.xyz);
    r4.xyz = log2(r4.xyz);
    r4.xyz = float3(2.20000005,2.20000005,2.20000005) * r4.xyz;
    r4.xyz = exp2(r4.xyz);
    r0.yz = float2(-0.5,-0.5) + r0.yz;
    r0.yz = saturate(float2(-0.5,-0.5) + abs(r0.yz));
    r0.y = r0.y + r0.z;
    r0.y = cmp(0 < r0.y);
    r4.xyz = r0.yyy ? float3(0,0,0) : r4.xyz;
    r0.y = 1 + -r0.w;
    r1.xyz = -r1.xyw * r2.xyz + r4.xyz;
    r3.xyz = r0.yyy * r1.xyz + r3.xyz;
  }
  o0.xyz = r3.xyz * r0.xxx;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float       
// COLOR                    0   xyzw        1     NONE   float   x   
// SV_Position              0   xyzw        2      POS   float   xy  
// SV_IsFrontFace           0   x           3    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture3d (float,float,float,float) t5
dcl_input_ps linear v1.x
dcl_input_ps_siv linear noperspective v2.xy, position
dcl_input_ps_sgv v3.x, is_front_face
dcl_output o0.xyzw
dcl_temps 7
mov_sat r0.x, v1.x
add r0.y, -r0.x, l(1.000000)
movc r0.x, v3.x, r0.x, r0.y
mul r0.yz, v2.xxyx, cb1[0].xxyx
mul r0.w, cb0[2].z, cb0[2].z
dp2 r1.x, r0.wwww, cb0[2].zzzz
mad r0.w, r0.w, l(3.000000), -r1.x
add r1.x, l(1.000000), -cb0[2].z
mul r1.y, r1.x, r1.x
mad r1.x, -r1.y, r1.x, l(1.000000)
mad r1.yz, r0.zzyz, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
sincos null, r1.w, cb0[2].w
mad r2.x, -r1.x, l(0.500000), l(1.000000)
mad r2.y, r1.w, l(0.150000), l(1.000000)
mad r2.x, r2.x, r2.y, l(-1.000000)
mad r1.x, r1.x, r2.x, l(1.000000)
mul r2.xy, r1.xxxx, r1.yzyy
mul r0.w, r0.w, r1.w
mul r0.w, r0.w, l(0.157000)
sincos r1.x, r3.x, r0.w
mul r1.xw, r1.xxxx, r2.xxxy
mad r4.x, r2.y, r3.x, r1.x
mad r4.y, r2.x, r3.x, -r1.w
mad r1.xw, r4.xxxy, l(0.500000, 0.000000, 0.000000, 0.500000), l(0.500000, 0.000000, 0.000000, 0.500000)
sample r2.xyzw, r1.xwxx, t0.xyzw, s0
sincos r1.x, r3.x, cb0[7].w
mad r0.w, r3.x, l(0.250000), l(0.750000)
mul r1.yw, r0.wwww, r1.yyyz
mul r3.yz, r1.xxxx, r1.yywy
mad r4.yz, r1.yywy, r3.xxxx, -r3.zzyz
mad r4.xw, r1.wwwy, r3.xxxx, r3.yyyz
mul r4.x, r4.x, cb0[7].x
mad r3.xyzw, r4.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
mul r3.xyzw, r3.xyzw, l(0.800000, 0.800000, 0.800000, 0.800000)
sample_l_aoffimmi(0,0,0) r4.xyzw, r3.xyxx, t1.xyzw, s1, l(0.000000)
mul r1.xy, r3.wzww, l(1.000000, -1.000000, 0.000000, 0.000000)
sample_l_aoffimmi(0,0,0) r3.xyzw, r1.xyxx, t1.xyzw, s1, l(0.000000)
dp2 r0.w, r4.yyyy, r3.yyyy
log r0.w, r0.w
mul r0.w, r0.w, l(1.500000)
exp r0.w, r0.w
min r0.w, r0.w, l(1.000000)
mul r1.xy, r0.yzyy, cb0[3].xyxx
mul r3.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
round_ni r1.x, r3.x
mad r3.z, r1.x, l(0.031250), cb0[2].w
sample_l r3.xyzw, r3.xyzx, t5.xyzw, s5, l(0.000000)
mul r1.x, r3.x, cb0[2].y
mul r1.x, r1.x, l(0.037500)
mad r1.xyw, r2.xyxz, r0.wwww, r1.xxxx
mad r2.xy, r0.yzyy, r0.yzyy, -r0.yzyy
mad r2.xy, r2.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
add r2.zw, -r2.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r0.w, r2.w, r2.z
mad r2.xy, -r2.xyxx, r2.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r2.x, r2.y, r2.x
dp3 r2.y, r1.xywx, l(0.299000, 0.587000, 0.114000, 0.000000)
mul r2.z, l(0.500000), cb0[2].y
add r3.xyz, -r1.xywx, r2.yyyy
mad r1.xyw, r2.zzzz, r3.xyxz, r1.xyxw
add r2.yzw, cb0[4].xxyz, -cb0[5].xxyz
mad r2.yzw, r0.wwww, r2.yyzw, cb0[5].xxyz
add r2.yzw, r2.yyzw, -cb0[6].xxyz
mad r2.xyz, r2.xxxx, r2.yzwy, cb0[6].xyzx
mul r3.xyz, r1.xywx, r2.xyzx
mul r0.w, r1.z, r1.z
mul r0.w, r0.w, cb0[1].y
mad r1.z, -v2.y, cb1[0].y, l(1.000000)
add r2.w, -cb0[1].z, cb0[1].x
add r2.w, r2.w, l(-1.000000)
mad r2.w, cb0[1].w, r2.w, l(1.000000)
mad r3.w, r0.w, l(0.200000), r1.z
add r2.w, -r2.w, r3.w
div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[1].y
mul_sat r2.w, r2.w, r3.w
mad r3.w, r2.w, l(-2.000000), l(3.000000)
mul r2.w, r2.w, r2.w
mul r2.w, r2.w, r3.w
add r3.w, cb0[1].z, cb0[1].x
mad r0.w, -r0.w, l(0.200000), r1.z
mad r0.w, -cb0[1].w, r3.w, r0.w
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), -cb0[1].y
mul_sat r0.w, r0.w, r1.z
mad r1.z, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mad r0.w, r1.z, r0.w, r2.w
min r0.w, r0.w, l(1.000000)
lt r1.z, r0.w, l(1.000000)
mad r0.yz, r0.yyzy, cb0[0].xxyx, cb0[0].zzwz
sample r4.xyzw, r0.yzyy, t2.xyzw, s2
sample r5.xyzw, r0.yzyy, t3.xyzw, s3
sample r6.xyzw, r0.yzyy, t4.xyzw, s4
if_nz r1.z
  mul r4.xyz, r6.wwww, l(0.000000, -0.344140, 1.772000, 0.000000)
  mad r4.xyz, r5.wwww, l(1.402000, -0.714140, 0.000000, 0.000000), r4.xyzx
  add r4.xyz, r4.wwww, r4.xyzx
  add_sat r4.xyz, r4.xyzx, l(-0.703749, 0.531215, -0.889475, 0.000000)
  log r4.xyz, r4.xyzx
  mul r4.xyz, r4.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
  exp r4.xyz, r4.xyzx
  add r0.yz, r0.yyzy, l(0.000000, -0.500000, -0.500000, 0.000000)
  add_sat r0.yz, |r0.yyzy|, l(0.000000, -0.500000, -0.500000, 0.000000)
  add r0.y, r0.z, r0.y
  lt r0.y, l(0.000000), r0.y
  movc r4.xyz, r0.yyyy, l(0,0,0,0), r4.xyzx
  add r0.y, -r0.w, l(1.000000)
  mad r1.xyz, -r1.xywx, r2.xyzx, r4.xyzx
  mad r3.xyz, r0.yyyy, r1.xyzx, r3.xyzx
endif 
mul o0.xyz, r0.xxxx, r3.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
