// Fog looking down from mountain
// ---- Created with 3Dmigoto v1.2.28 on Sun Feb 07 19:52:00 2016
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[10];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[7];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : TEXCOORD0,
  float w0 : TEXCOORD2,
  float3 v1 : TEXCOORD3,

float3 corrected_v0 : TEXCOORD4,
matrix m : TEXCOORD5,
matrix im : TEXCOORD9,

  float4 v2 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = -cb1[0].xyz + v0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r0.w);
  r0.w = sqrt(r0.w);
  r1.xyz = r1.xxx * r0.xyz;

float4 stereo = StereoParams.Load(0);
float4 tmp = mul(m, float4(r1.xyz, 1));
tmp.x -= stereo.x * (tmp.w - stereo.y) / tmp.w;
r1.xyz = mul(im, tmp);

  r1.w = dot(r1.xyz, cb0[4].xyz);
  r2.x = cmp(0 < r1.w);
  r2.y = cmp(r1.w < 0);
  r2.z = (int)-r2.x + (int)r2.y;
  r2.x = (int)r2.x + (int)-r2.y;
  r2.xy = (int2)r2.xz;
  r2.z = dot(cb1[0].xyzw, cb0[4].xyzw);
  r2.y = r2.y * cb0[2].x + -r2.z;
  r2.x = r2.x * cb0[2].x + -r2.z;
  r2.x = r2.x / r1.w;
  r1.w = r2.y / r1.w;
  r2.y = dot(r1.xyz, cb0[5].xyz);
  r1.x = dot(r1.xyz, cb0[6].xyz);
  r1.y = cmp(0 < r2.y);
  r1.z = cmp(r2.y < 0);
  r2.z = (int)-r1.y + (int)r1.z;
  r1.y = (int)r1.y + (int)-r1.z;
  r1.y = (int)r1.y;
  r1.z = (int)r2.z;
  r2.z = dot(cb1[0].xyzw, cb0[5].xyzw);
  r1.z = r1.z * cb0[2].y + -r2.z;
  r1.y = r1.y * cb0[2].y + -r2.z;
  r1.yz = r1.yz / r2.yy;
  r1.z = min(r1.w, r1.z);
  r1.y = max(r2.x, r1.y);
  r1.w = cmp(0 < r1.x);
  r2.x = cmp(r1.x < 0);
  r2.y = (int)-r1.w + (int)r2.x;
  r1.w = (int)r1.w + (int)-r2.x;
  r1.w = (int)r1.w;
  r2.x = (int)r2.y;
  r2.y = dot(cb1[0].xyzw, cb0[6].xyzw);
  r2.x = r2.x * cb0[2].z + -r2.y;
  r2.x = r2.x / r1.x;
  r1.z = min(r2.x, r1.z);
  r1.w = r1.w * cb0[2].z + -r2.y;
  r1.w = r1.w / r1.x;
  r1.y = max(r1.y, r1.w);
  r1.z = r1.z + -r1.y;
  r1.y = r1.x * r1.y + r2.y;
  r2.xy = cb1[1].xy * v2.xy;
  r2.yz = saturate(r2.xy);
  r1.w = r2.x * 2 + -1;
  r2.xy = cb1[6].zw * r2.yz;
  r2.xyzw = t0.SampleLevel(s0_s, r2.xy, 0, int2(0, 0)).xyzw;
  r2.y = r2.x * cb1[2].z + cb1[2].w;
  r2.z = -v2.y * cb1[1].y + 1;
  r2.z = r2.z * 2 + -1;
  r2.y = r2.z * cb1[2].y + r2.y;
  r3.x = r1.w * cb1[2].x + r2.y;
  r2.y = r2.x * cb1[3].z + cb1[3].w;
  r2.y = r2.z * cb1[3].y + r2.y;
  r3.y = r1.w * cb1[3].x + r2.y;
  r2.y = r2.x * cb1[4].z + cb1[4].w;
  r2.x = r2.x * cb1[5].z + cb1[5].w;
  r2.x = r2.z * cb1[5].y + r2.x;
  r2.y = r2.z * cb1[4].y + r2.y;
  r3.z = r1.w * cb1[4].x + r2.y;
  r1.w = r1.w * cb1[5].x + r2.x;
  r2.xyz = r3.xyz / r1.www;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = sqrt(r1.w);
  r1.w = r1.w + -r0.w;
  r1.z = min(r1.w, r1.z);
  r1.x = r1.x * r1.z;
  r1.x = r1.x * 0.5 + r1.y;
  r1.x = -cb0[2].z + r1.x;
  r1.y = -0.5 / cb0[2].z;
  r1.y = cb0[1].w * r1.y;
  r1.y = r1.y * r1.z;
  r1.x = r1.y * r1.x;
  r1.x = -r1.x * r1.x;
  r1.x = 0.765534759 * r1.x;
  r1.x = exp2(r1.x);
  o0.w = 1 + -r1.x;
  r1.x = 1 / r0.w;
  r0.w = -cb1[8].w + r0.w;
  r0.w = max(0, r0.w);
  r0.w = cb1[9].w * r0.w;
  r0.w = -r0.w * r0.w;
  r0.w = exp2(r0.w);
  r0.xyz = r1.xxx * r0.xyz;
  r0.x = saturate(dot(cb1[7].xyz, r0.xyz));
  r0.x = r0.x * r0.x;
  r0.x = r0.x * r0.x;
  r0.x = r0.x * r0.x;
  r1.xyz = cb1[9].xyz + -cb1[8].xyz;
  r0.xyz = r0.xxx * r1.xyz + cb1[8].xyz;
  r1.x = 1 + -r0.w;
  r0.xyz = r1.xxx * r0.xyz;
  r0.xyz = cb0[0].xyz * r0.www + r0.xyz;
  r0.w = cmp(0 != cb0[3].y);
  o0.xyz = r0.www ? cb0[0].xyz : r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.28 on Sun Feb 07 19:52:00 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 2      w        0     NONE   float       
// TEXCOORD                 3   xyz         1     NONE   float       
// SV_Position              0   xyzw        2      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[7], immediateIndexed
dcl_constantbuffer cb1[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyz
dcl_input_ps_siv linear noperspective v2.xy, position
dcl_output o0.xyzw
dcl_temps 4
add r0.xyz, v0.xyzx, -cb1[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.x, r0.w
sqrt r0.w, r0.w
mul r1.xyz, r0.xyzx, r1.xxxx
dp3 r1.w, r1.xyzx, cb0[4].xyzx
lt r2.x, l(0.000000), r1.w
lt r2.y, r1.w, l(0.000000)
iadd r2.z, -r2.x, r2.y
iadd r2.x, r2.x, -r2.y
itof r2.xy, r2.xzxx
dp4 r2.z, cb1[0].xyzw, cb0[4].xyzw
mad r2.y, r2.y, cb0[2].x, -r2.z
mad r2.x, r2.x, cb0[2].x, -r2.z
div r2.x, r2.x, r1.w
div r1.w, r2.y, r1.w
dp3 r2.y, r1.xyzx, cb0[5].xyzx
dp3 r1.x, r1.xyzx, cb0[6].xyzx
lt r1.y, l(0.000000), r2.y
lt r1.z, r2.y, l(0.000000)
iadd r2.z, -r1.y, r1.z
iadd r1.y, r1.y, -r1.z
itof r1.y, r1.y
itof r1.z, r2.z
dp4 r2.z, cb1[0].xyzw, cb0[5].xyzw
mad r1.z, r1.z, cb0[2].y, -r2.z
mad r1.y, r1.y, cb0[2].y, -r2.z
div r1.yz, r1.yyzy, r2.yyyy
min r1.z, r1.z, r1.w
max r1.y, r1.y, r2.x
lt r1.w, l(0.000000), r1.x
lt r2.x, r1.x, l(0.000000)
iadd r2.y, -r1.w, r2.x
iadd r1.w, r1.w, -r2.x
itof r1.w, r1.w
itof r2.x, r2.y
dp4 r2.y, cb1[0].xyzw, cb0[6].xyzw
mad r2.x, r2.x, cb0[2].z, -r2.y
div r2.x, r2.x, r1.x
min r1.z, r1.z, r2.x
mad r1.w, r1.w, cb0[2].z, -r2.y
div r1.w, r1.w, r1.x
max r1.y, r1.w, r1.y
add r1.z, -r1.y, r1.z
mad r1.y, r1.x, r1.y, r2.y
mul r2.xy, v2.xyxx, cb1[1].xyxx
mov_sat r2.yz, r2.xxyx
mad r1.w, r2.x, l(2.000000), l(-1.000000)
mul r2.xy, r2.yzyy, cb1[6].zwzz
sample_l_aoffimmi(0,0,0) r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
mad r2.y, r2.x, cb1[2].z, cb1[2].w
mad r2.z, -v2.y, cb1[1].y, l(1.000000)
mad r2.z, r2.z, l(2.000000), l(-1.000000)
mad r2.y, r2.z, cb1[2].y, r2.y
mad r3.x, r1.w, cb1[2].x, r2.y
mad r2.y, r2.x, cb1[3].z, cb1[3].w
mad r2.y, r2.z, cb1[3].y, r2.y
mad r3.y, r1.w, cb1[3].x, r2.y
mad r2.y, r2.x, cb1[4].z, cb1[4].w
mad r2.x, r2.x, cb1[5].z, cb1[5].w
mad r2.x, r2.z, cb1[5].y, r2.x
mad r2.y, r2.z, cb1[4].y, r2.y
mad r3.z, r1.w, cb1[4].x, r2.y
mad r1.w, r1.w, cb1[5].x, r2.x
div r2.xyz, r3.xyzx, r1.wwww
dp3 r1.w, r2.xyzx, r2.xyzx
sqrt r1.w, r1.w
add r1.w, -r0.w, r1.w
min r1.z, r1.z, r1.w
mul r1.x, r1.z, r1.x
mad r1.x, r1.x, l(0.500000), r1.y
add r1.x, r1.x, -cb0[2].z
div r1.y, l(-0.500000), cb0[2].z
mul r1.y, r1.y, cb0[1].w
mul r1.y, r1.z, r1.y
mul r1.x, r1.x, r1.y
mul r1.x, r1.x, -r1.x
mul r1.x, r1.x, l(0.765534759)
exp r1.x, r1.x
add o0.w, -r1.x, l(1.000000)
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add r0.w, r0.w, -cb1[8].w
max r0.w, r0.w, l(0.000000)
mul r0.w, r0.w, cb1[9].w
mul r0.w, r0.w, -r0.w
exp r0.w, r0.w
mul r0.xyz, r0.xyzx, r1.xxxx
dp3_sat r0.x, cb1[7].xyzx, r0.xyzx
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.x
add r1.xyz, -cb1[8].xyzx, cb1[9].xyzx
mad r0.xyz, r0.xxxx, r1.xyzx, cb1[8].xyzx
add r1.x, -r0.w, l(1.000000)
mul r0.xyz, r0.xyzx, r1.xxxx
mad r0.xyz, cb0[0].xyzx, r0.wwww, r0.xyzx
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[3].y
movc o0.xyz, r0.wwww, cb0[0].xyzx, r0.xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
