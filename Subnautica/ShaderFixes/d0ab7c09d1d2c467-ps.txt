// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d0ab7c09d1d2c467-ps.txt
// 3DMigoto: d0ab7c09d1d2c467 |    Unity headers extracted from UWE_SIG AlphaCutout + Noisey Wave
//    Shader "UWE/SIG AlphaCutout + Noisey Wave" {
//      Fallback "Specular"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry" "RenderType"="Opaque" }
//        Pass 1/6 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from UWE_SIG AlphaCutout + Noisey Wave:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201609010 165 8 11
//   undeciphered1a: 11
//   Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" }
//   undeciphered2: 1 8 4 8 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 544
//   Vector 32 [_LightColor0]
//   Vector 48 [_SpecColor]
//   Float 64 [_UweFogEnabled]
//   Float 68 [_UweAboveWaterFogStartDistance]
//   Vector 80 [_UweFogVsLightDirection] 3
//   Vector 112 [_UweFogLightColor]
//   Vector 128 [_UweTopAmbientColor] 3
//   Vector 160 [_UweVsWaterPlane]
//   Float 304 [_UweVolumeTextureSlices]
//   Float 308 [_UweExtinctionAndScatteringScale]
//   Float 312 [_UweSunAttenuationFactor]
//   Vector 320 [_UweFogMiePhaseConst] 3
//   Float 344 [_SkyFogDensity]
//   Vector 352 [_SkyFogColor] 3
//   Float 364 [settingsSampleDistance]
//   Vector 368 [_Color]
//   Vector 448 [_SIGstr]
//   Float 464 [_UweLocalLightScalar]
//   Float 528 [_Cutoff]
//   Matrix 176 [_UweCameraToVolumeMatrix]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 752
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 608 [unity_SHAr]
//   Vector 624 [unity_SHAg]
//   Vector 640 [unity_SHAb]
//   Vector 720 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   SetTexture 0 [_MainTex] 2D 5
//   SetTexture 1 [_BumpMap] 2D 6
//   SetTexture 2 [_SIGMap] 2D 7
//   SetTexture 3 [_UweExtinctionTexture] 2D 2
//   SetTexture 4 [_UweScatteringTexture] 2D 3
//   SetTexture 5 [_UweEmissiveTexture] 2D 4
//   SetTexture 6 [unity_ShadowMask] 2D 0
//   SetTexture 7 [unity_ProbeVolumeSH] 3D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityProbeVolume" 3
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Thu Jan 25 16:59:39 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 7     zw        2     NONE   float     zw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xyz         7     NONE   float   xyz 
// TEXCOORD                 8   xyzw        8     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[34], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[46], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture3d (float,float,float,float) t7
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v2.zw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_output o0.xyzw
dcl_temps 13
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r11.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d0ab7c09d1d2c467-ps.txt

mul r11.w, -r11.x, r11.y
mad r12.xyz, -r11.wwww, cb10[0].xyzw, cb1[4].xyzw

mov r0.y, v3.w
mov r0.z, v4.w
mov r0.w, v5.w
add r1.xyz, -r0.yzwy, r12.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
sample r2.xyzw, v1.xyxx, t0.xyzw, s5
mul r3.xyzw, r2.xyzw, cb0[23].xyzw
sample r4.xyzw, v1.zwzz, t1.xyzw, s6
mad r4.xy, r4.wyww, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r4.xyxx, r4.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r4.z, r1.w
sample r5.xyzw, v2.xyxx, t2.xyzw, s7
add r1.w, -cb0[29].x, l(1.000000)
add r4.w, -cb0[28].y, cb0[28].w
mad r1.w, r1.w, r4.w, cb0[28].y
mul r5.xz, r5.xxzx, cb0[28].xxzx
mul r1.w, r1.w, r5.y
mul r6.xyz, r1.wwww, cb0[23].xyzx
max r1.w, r5.z, l(0.010000)
mad r2.w, r2.w, cb0[23].w, -cb0[33].x
lt r2.w, r2.w, l(0.000000)
discard_nz r2.w
eq r2.w, cb3[0].x, l(1.000000)
if_nz r2.w
  eq r4.w, cb3[0].y, l(1.000000)
  mul r5.yzw, v4.wwww, cb3[2].xxyz
  mad r5.yzw, cb3[1].xxyz, v3.wwww, r5.yyzw
  mad r5.yzw, cb3[3].xxyz, v5.wwww, r5.yyzw
  add r5.yzw, r5.yyzw, cb3[4].xxyz
  movc r5.yzw, r4.wwww, r5.yyzw, r0.yyzw
  add r5.yzw, r5.yyzw, -cb3[6].xxyz
  mul r7.yzw, r5.yyzw, cb3[5].xxyz
  mad r4.w, r7.y, l(0.250000), l(0.750000)
  mad r5.y, cb3[0].z, l(0.500000), l(0.750000)
  max r7.x, r4.w, r5.y
  sample r7.xyzw, r7.xzwx, t7.xyzw, s1
else 
  sample r7.xyzw, v2.zwzz, t6.xyzw, s0
endif 
dp4_sat r4.w, r7.xyzw, cb2[45].xyzw
dp3 r7.x, v3.xyzx, r4.xyzx
dp3 r7.y, v4.xyzx, r4.xyzx
dp3 r7.z, v5.xyzx, r4.xyzx
mul r4.xyz, r4.wwww, cb0[2].xyzx
if_nz r2.w
  eq r2.w, cb3[0].y, l(1.000000)
  mul r5.yzw, v4.wwww, cb3[2].xxyz
  mad r5.yzw, cb3[1].xxyz, v3.wwww, r5.yyzw
  mad r5.yzw, cb3[3].xxyz, v5.wwww, r5.yyzw
  add r5.yzw, r5.yyzw, cb3[4].xxyz
  movc r0.yzw, r2.wwww, r5.yyzw, r0.yyzw
  add r0.yzw, r0.yyzw, -cb3[6].xxyz
  mul r8.yzw, r0.yyzw, cb3[5].xxyz
  mul r0.y, r8.y, l(0.250000)
  mul r0.z, cb3[0].z, l(0.500000)
  mad r0.w, -cb3[0].z, l(0.500000), l(0.250000)
  max r0.y, r0.z, r0.y
  min r8.x, r0.w, r0.y
  sample r9.xyzw, r8.xzwx, t7.xyzw, s1
  add r0.yzw, r8.xxzw, l(0.000000, 0.250000, 0.000000, 0.000000)
  sample r10.xyzw, r0.yzwy, t7.xyzw, s1
  add r0.yzw, r8.xxzw, l(0.000000, 0.500000, 0.000000, 0.000000)
  sample r8.xyzw, r0.yzwy, t7.xyzw, s1
  mov r7.w, l(1.000000)
  dp4 r9.x, r9.xyzw, r7.xyzw
  dp4 r9.y, r10.xyzw, r7.xyzw
  dp4 r9.z, r8.xyzw, r7.xyzw
else 
  mov r7.w, l(1.000000)
  dp4 r9.x, cb2[38].xyzw, r7.xyzw
  dp4 r9.y, cb2[39].xyzw, r7.xyzw
  dp4 r9.z, cb2[40].xyzw, r7.xyzw
endif 
add r0.yzw, r9.xxyz, v7.xxyz
mad r1.xyz, r1.xyzx, r0.xxxx, cb2[0].xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r1.xyz, r0.xxxx, r1.xyzx
dp3 r0.x, r7.xyzx, cb2[0].xyzx
max r0.xyzw, r0.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
dp3 r1.x, r7.xyzx, r1.xyzx
max r1.x, r1.x, l(0.000000)
mul r1.y, r1.w, l(128.000000)
log r1.x, r1.x
mul r1.x, r1.x, r1.y
exp r1.x, r1.x
mul r1.x, r5.x, r1.x
mul r1.yzw, r3.xxyz, r4.xxyz
mul r4.xyz, r4.xyzx, cb0[3].xyzx
mul r4.xyz, r1.xxxx, r4.xyzx
mad r1.xyz, r1.yzwy, r0.xxxx, r4.xyzx
mad r0.xyz, r3.xyzx, r0.yzwy, r1.xyzx
mad r0.xyz, r6.xyzx, r2.xyzx, r0.xyzx
ne r1.x, cb0[4].x, l(0.000000)
if_nz r1.x
  dp3 r1.x, v6.xyzx, v6.xyzx
  sqrt r0.w, r1.x
  div r1.xyz, v6.xyzx, r0.wwww
  mul r2.xyz, r1.xyzx, cb0[22].wwww
  mul r4.xyz, r2.yyyy, cb0[12].xyzx
  mad r2.xyw, cb0[11].xyxz, r2.xxxx, r4.xyxz
  mad r2.xyz, cb0[13].xyzx, r2.zzzz, r2.xywx
  add_sat r2.xyz, r2.xyzx, cb0[14].xyzx
  div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[19].x
  mad r1.w, r2.y, cb0[19].x, l(-0.500000)
  frc r2.y, r1.w
  add r1.w, r1.w, -r2.y
  add r1.w, r1.w, r2.z
  mul r2.w, r4.y, r1.w
  mov r4.x, l(0)
  add r4.xy, r2.xwxx, r4.xyxx
  sample_l r5.xyzw, r2.xwxx, t3.xyzw, s2, l(0.000000)
  sample_l r6.xyzw, r4.xyxx, t3.xyzw, s2, l(0.000000)
  add r6.xyzw, -r5.xyzw, r6.xyzw
  mad r5.xyzw, r2.yyyy, r6.wxyz, r5.wxyz
  dp3 r1.w, r1.xyzx, cb0[10].xyzx
  lt r2.z, l(0.000000), cb0[10].w
  if_nz r2.z
    lt r2.z, r1.w, l(-0.010000)
    not r4.z, r2.z
    div r4.w, -cb0[10].w, r1.w
    add r4.w, r4.w, cb0[4].y
    mul r6.x, -r0.w, cb0[21].z
    mul r6.x, r6.x, l(1.442695)
    exp r6.x, r6.x
    add r6.yzw, r0.xxyz, -cb0[22].xxyz
    mad r3.xyz, r6.xxxx, r6.yzwy, cb0[22].xyzx
    movc r5.x, r2.z, r4.w, cb0[4].y
    lt r4.w, r0.w, r5.x
    movc r2.z, r2.z, r4.w, l(-1)
    or r2.z, r4.z, r2.z
  else 
    div r4.z, -cb0[10].w, r1.w
    lt r4.w, l(0.000000), r4.z
    add r6.x, r0.w, -r4.z
    max r6.x, r6.x, l(0.000000)
    mul r6.x, -r6.x, cb0[21].z
    mul r6.x, r6.x, l(1.442695)
    exp r6.x, r6.x
    add r6.yzw, r0.xxyz, -cb0[22].xxyz
    mad r6.xyz, r6.xxxx, r6.yzwy, cb0[22].xyzx
    min r6.w, r0.w, r4.z
    movc r0.xyzw, r4.wwww, r6.xyzw, r0.xyzw
    mov r2.z, l(0)
  endif 
  if_z r2.z
    lt r2.z, r5.x, r0.w
    if_nz r2.z
      sample_l r6.xyzw, r2.xwxx, t4.xyzw, s3, l(0.000000)
      sample_l r7.xyzw, r4.xyxx, t4.xyzw, s3, l(0.000000)
      add r7.xyzw, -r6.xyzw, r7.xyzw
      mad r6.xyzw, r2.yyyy, r7.xyzw, r6.xyzw
      sample_l r7.xyzw, r2.xwxx, t5.xyzw, s4, l(0.000000)
      sample_l r4.xyzw, r4.xyxx, t5.xyzw, s4, l(0.000000)
      add r2.xzw, -r7.xxyz, r4.xxyz
      mad r2.xyz, r2.yyyy, r2.xzwx, r7.xyzx
      mul r4.xyz, r6.xyzx, cb0[19].yyyy
      mul r6.xyz, r5.yzwy, cb0[19].yyyy
      add r0.w, -r5.x, r0.w
      mul r7.xyz, r1.xyzx, r5.xxxx
      dp3 r1.x, r1.xyzx, -cb0[5].xyzx
      mad r1.x, -cb0[20].z, r1.x, cb0[20].y
      log r1.x, r1.x
      mul r1.x, r1.x, l(-1.500000)
      exp r1.x, r1.x
      mul r1.x, r1.x, cb0[20].x
      mul r1.xyz, r1.xxxx, r4.xyzx
      dp3 r2.w, cb0[5].xyzx, cb0[10].xyzx
      max r2.w, r2.w, l(0.000100)
      mad r4.xyz, cb0[7].xyzx, cb0[7].wwww, cb0[8].xyzx
      mul r4.xyz, r6.wwww, r4.xyzx
      mul r8.xyz, r6.xyzx, cb0[19].zzzz
      mul r9.xyz, r1.wwww, r8.xyzx
      div r9.xyz, r9.xyzx, r2.wwww
      mad r5.xyz, -r5.yzwy, cb0[19].yyyy, r9.xyzx
      dp3 r1.w, r7.xyzx, cb0[10].xyzx
      add r1.w, r1.w, cb0[10].w
      mul r7.xyz, r1.wwww, r8.xyzx
      div r7.xyz, r7.xyzx, r2.wwww
      mad r8.xyz, r0.wwww, r5.xyzx, r7.xyzx
      mul r8.xyz, r8.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
      exp r8.xyz, r8.xyzx
      mul r7.xyz, r7.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
      exp r7.xyz, r7.xyzx
      add r7.xyz, -r7.xyzx, r8.xyzx
      div r5.xyz, r7.xyzx, r5.xyzx
      mul r1.xyz, r1.xyzx, r4.xyzx
      mul r1.xyz, r5.xyzx, r1.xyzx
      max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      mul r4.xyz, r6.xyzx, -r0.wwww
      mul r4.xyz, r4.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
      exp r4.xyz, r4.xyzx
      mul r5.xyz, r0.wwww, -r6.xyzx
      mul r5.xyz, r5.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
      exp r5.xyz, r5.xyzx
      add r5.xyz, -r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      div r5.xyz, r5.xyzx, r6.xyzx
      mul r2.xyz, r2.xyzx, r5.xyzx
      max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      add r1.xyz, r1.xyzx, r2.xyzx
      mad r3.xyz, r0.xyzx, r4.xyzx, r1.xyzx
    else 
      mov r3.xyz, r0.xyzx
    endif 
  endif 
else 
  mov r3.xyz, r0.xyzx
endif 
mov o0.xyzw, r3.xyzw
ret 
// Approximately 0 instruction slots used