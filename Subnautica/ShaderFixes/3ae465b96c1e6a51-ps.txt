// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 3ae465b96c1e6a51-ps.txt
// 3DMigoto: 3ae465b96c1e6a51 |    Unity headers extracted from UWE_Experimental_Steve's Projected Decal
//    Shader "UWE/Experimental/Steve's Projected Decal" {
//      Fallback "Specular"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry+256" }
//        Pass 1/2 {
//          Name "PREPASS"
//          Tags { "LIGHTMODE"="PREPASSBASE" "QUEUE"="Geometry+256" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from UWE_Experimental_Steve's Projected Decal:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201609010 23 3 3
//   undeciphered1a: 2
//   undeciphered2: 1 3 3 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 80
//   Float 64 [_Scale]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   ConstBuffer "UnityPerDraw" 160
//   Matrix 64 [unity_WorldToObject]
//   SetTexture 0 [_CameraDepthTexture] 2D 0
//   SetTexture 1 [_MainTex] 2D 1
//   SetTexture 2 [_BumpMap] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Thu Jan 25 16:54:55 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[5], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyw
dcl_output o0.xyzw
dcl_temps 4
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r2.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 3ae465b96c1e6a51-ps.txt

mul r2.w, -r2.x, r2.y
mad r3.xyz, -r2.wwww, cb10[0].xyzw, cb1[4].xyzw

div r0.xy, v2.xyxx, v2.wwww
sample r0.xyzw, r0.xyxx, t0.xyzw, s0
mad r0.x, cb1[7].z, r0.x, cb1[7].w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r0.yzw, v1.xxyz, -r3.xxyz
mul r0.xyz, r0.xxxx, r0.yzwy
div r0.xyz, r0.xyzx, v2.wwww
add r0.xyz, r0.xyzx, r3.xyzx
mul r1.xyzw, r0.yyyy, cb2[5].xyzw
mad r1.xyzw, cb2[4].xyzw, r0.xxxx, r1.xyzw
mad r0.xyzw, cb2[6].xyzw, r0.zzzz, r1.xyzw
add r0.xyzw, r0.xyzw, cb2[7].xyzw
div r0.xyz, r0.xyzx, r0.wwww
div r0.xyz, r0.xyzx, cb0[4].xxxx
lt r1.xyz, |r0.xyzx|, l(0.500000, 0.500000, 0.500000, 0.000000)
and r0.y, r1.y, r1.x
and r0.y, r1.z, r0.y
if_nz r0.y
  add r0.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  sample r1.xyzw, r0.xyxx, t1.xyzw, s1
  sample r0.xyzw, r0.xyxx, t2.xyzw, s2
  mad r0.xy, r0.wyww, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  dp2 r0.w, r0.xyxx, r0.xyxx
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  sqrt r0.z, r0.w
  mad o0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  mov o0.w, r1.w
  ret 
else 
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
ret 
// Approximately 0 instruction slots used