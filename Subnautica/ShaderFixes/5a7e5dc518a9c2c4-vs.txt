// asmtool.py --remap-cb 1 101 --remap-cb 3 103 --disable-driver-stereo-cb -I ../../.. -f 5a7e5dc518a9c2c4-vs.txt
// 3DMigoto: 5a7e5dc518a9c2c4 | Matched 2 variants of 1 shaders: Custom/WaterSurface
//
//       Unity headers extracted from Custom_WaterSurface
//       Shader "Custom/WaterSurface" {
//         SubShader 1/1 {
//           Tags { "QUEUE"="Transparent" "RenderType"="Transparent" }
//           Pass 2/2 {
//             Tags { "QUEUE"="Transparent" "RenderType"="Transparent" }
//             ZWrite [_ZWriteMode]
//             Program "vp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Custom_WaterSurface:
//      API d3d11
//      Shader model vs_4_0
//      undeciphered1: 201609010 28 0 2
//      undeciphered1a: 4
// 2:   Keywords { "ENABLE_SCREEN_SPACE_REFLECTION" }
//      undeciphered2: 1 1 4 1 0 0
//      undeciphered3: 1 1 0 0
//      ConstBuffer "$Globals" 752
//      Float 528 [_PatchLength]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      Vector 80 [_ProjectionParams]
//      ConstBuffer "UnityPerDraw" 160
//      Matrix 0 [unity_ObjectToWorld]
//      ConstBuffer "UnityPerFrame" 384
//      Matrix 144 [unity_MatrixV]
//      Matrix 272 [unity_MatrixVP]
//      SetTexture 0 [_DisplacementMap] 2D 0
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityPerDraw" 2
//      BindCB "UnityPerFrame" 3
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Thu Jan 25 16:55:54 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[34], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[21], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input v0.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 14
dcl_resource_structured t101, 96
dcl_resource_structured t103, 336
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 3 103 --disable-driver-stereo-cb -I ../../.. -f 5a7e5dc518a9c2c4-vs.txt
ld_structured r4.xyzw, l(0), l(64), t101.xyzw
ld_structured r5.xyzw, l(0), l(80), t101.xyzw


// cb3 remapped to t103 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 3 103 --disable-driver-stereo-cb -I ../../.. -f 5a7e5dc518a9c2c4-vs.txt
ld_structured r6.xyzw, l(0), l(144), t103.xyzw
ld_structured r7.xyzw, l(0), l(160), t103.xyzw
ld_structured r8.xyzw, l(0), l(176), t103.xyzw
ld_structured r9.xyzw, l(0), l(192), t103.xyzw
ld_structured r10.xyzw, l(0), l(272), t103.xyzw
ld_structured r11.xyzw, l(0), l(288), t103.xyzw
ld_structured r12.xyzw, l(0), l(304), t103.xyzw
ld_structured r13.xyzw, l(0), l(320), t103.xyzw

mul r0.xyzw, v0.yyyy, cb2[1].xyzw
mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
mad r0.xyzw, cb2[3].xyzw, v0.wwww, r0.xyzw
mul r1.xy, r0.xzxx, l(100.000000, 100.000000, 0.000000, 0.000000)
div r1.xy, r1.xyxx, cb0[33].xxxx
add r1.zw, -r0.xxxz, r4.xxxz
dp2 r1.z, r1.zwzz, r1.zwzz
sqrt r1.z, r1.z
add r1.z, -r1.z, l(200.000000)
mul_sat r1.z, r1.z, l(0.00520833349)
lt r1.w, l(0.000000), r1.z
if_nz r1.w
  sample_l r2.xyzw, r1.xyxx, t0.xyzw, s0, l(0.000000)
  mul r2.xyz, r2.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000)
else 
  mov r2.xyz, l(0,0,0,0)
endif 
mad r0.xyz, r2.xyzx, r1.zzzz, r0.xyzx
mul r2.xyzw, r0.yyyy, r11.xyzw
mad r2.xyzw, r10.xyzw, r0.xxxx, r2.xyzw
mad r2.xyzw, r12.xyzw, r0.zzzz, r2.xyzw
mad r2.xyzw, r13.xyzw, r0.wwww, r2.xyzw
mul r3.xz, r2.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
mul r0.w, r2.y, r5.x
mul r3.w, r0.w, l(0.500000)
add o3.xy, r3.zzzz, r3.xwxx
mad r1.zw, r2.xxxy, l(0.000000, 0.000000, 1.000000, -1.000000), r2.wwww
mul o5.xy, r1.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r3.xyzw, r0.yyyy, r7.xyzw
mad r3.xyzw, r6.xyzw, r0.xxxx, r3.xyzw
mad r3.xyzw, r8.xyzw, r0.zzzz, r3.xyzw
add o4.xyzw, r3.xyzw, r9.xyzw
mov o0.xyzw, r2.xyzw
mov o3.zw, r2.zzzw
mov o5.zw, r2.zzzw
mov o2.xyz, r0.xyzx
mov o1.xy, r1.xyxx
ret 
// Approximately 0 instruction slots used