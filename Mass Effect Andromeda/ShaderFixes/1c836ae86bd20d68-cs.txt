//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.67 on Sun Jan 14 21:43:47 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], dynamicIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_structured t2, 112 
dcl_resource_structured t3, 304 
dcl_resource_structured t8, 16 
dcl_resource_structured t9, 4 
dcl_uav_structured u0, 16
dcl_uav_structured u1, 4
dcl_uav_typed_buffer (uint,uint,uint,uint) u2
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.xy
dcl_temps 11
dcl_tgsm_structured g0, 16, 8
dcl_tgsm_raw g1, 4
dcl_tgsm_structured g2, 4, 512
dcl_tgsm_raw g3, 4
dcl_tgsm_raw g4, 4
dcl_tgsm_raw g5, 4
dcl_tgsm_raw g6, 4
dcl_tgsm_raw g7, 4
dcl_tgsm_raw g8, 4
dcl_tgsm_raw g9, 4
dcl_thread_group 8, 4, 1
utof r0.xy, vThreadGroupID.yxyy
utof r0.z, cb0[5].x
mad r0.x, r0.x, r0.z, r0.y
ushr r0.yz, vThreadGroupID.yyxy, cb0[8].yyxy
utof r0.yz, r0.yyzy
utof r0.w, cb0[8].z
mad r0.y, r0.y, r0.w, r0.z
ftou r0.xy, r0.xyxx
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.xyzw, r0.y, l(0), t8.xyzw
ushr r0.yzw, r1.yyzw, l(0, 16, 16, 16)
and r1.yzw, r1.yyzw, l(0, 0x0000ffff, 0x0000ffff, 0x0000ffff)
iadd r2.x, r0.y, r1.y
iadd r2.x, r1.z, r2.x
iadd r2.x, r0.z, r2.x
iadd r2.x, r1.w, r2.x
iadd r2.x, r0.w, r2.x
if_z r2.x
  if_z vThreadIDInGroupFlattened.x
    store_structured u0.xyzw, r0.x, l(0), l(0,0,0,0)
  endif 
  ret 
endif 
mov r2.xy, vThreadGroupID.xyxx
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.x, r2.xyzw, t0.xyzw
if_z vThreadIDInGroupFlattened.x
  store_raw g3.x, l(0), l(0)
  store_raw g4.x, l(0), l(0)
  store_raw g5.x, l(0), l(0)
  store_raw g6.x, l(0), l(0)
  store_raw g7.x, l(0), l(0)
  store_raw g8.x, l(0), l(0)
  store_raw g9.x, l(0), l(0)
endif 
utof r2.yz, vThreadGroupID.xxyx
mul r2.yz, r2.yyzy, cb0[4].zzwz
iadd r3.xy, vThreadGroupID.xyxx, l(1, 1, 0, 0)
utof r3.xy, r3.xyxx
mul r3.xy, r3.xyxx, cb0[4].zwzz
mad r2.yz, r2.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
mad r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
and r2.w, vThreadIDInGroupFlattened.x, l(3)
ushr r3.z, vThreadIDInGroupFlattened.x, l(2)
bfi r3.w, l(2), l(2), vThreadIDInGroupFlattened.x, l(0)
and r4.xy, r3.zzzz, l(4, 2, 0, 0)
movc r5.x, r4.x, r3.x, r2.y
movc r5.y, r4.y, -r3.y, -r2.z
ubfe r2.y, l(1), l(2), vThreadIDInGroupFlattened.x
movc r5.z, r2.y, l(1.000000), r2.x
mov r5.w, l(1.000000)
dp4 r2.x, r5.xyzw, cb0[r2.w + 0].xyzw
store_structured g0.x, r3.z, r3.w, r2.x
sync_g_t
ld_structured r2.x, r3.z, l(12), g0.xxxx
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
ld_structured r2.y, r3.z, r3.w, g0.xxxx
mul r2.x, r2.x, r2.y
store_structured g0.x, r3.z, r3.w, r2.x
sync_g_t
ult r2.x, vThreadIDInGroupFlattened.x, l(4)
if_nz r2.x
  ishl r2.x, vThreadIDInGroupFlattened.x, l(1)
  imad r2.y, vThreadIDInGroupFlattened.x, l(2), l(1)
  ld_structured r3.xyz, r2.x, l(0), g0.xyzx
  ld_structured r2.yzw, r2.y, l(0), g0.xxyz
  add r2.yzw, -r3.xxyz, r2.yyzw
  dp3 r2.y, r2.yzwy, r2.yzwy
  lt r2.z, l(0.000000), r2.y
  div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
  and r2.y, r2.y, r2.z
  store_structured g0.x, r2.x, l(12), r2.y
endif 
sync_g_t
if_nz r1.y
  mov r2.x, vThreadIDInGroupFlattened.x
  loop 
    uge r2.y, r2.x, r1.y
    breakc_nz r2.y
    iadd r2.y, r1.x, r2.x
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r2.y, r2.y, l(0), t9.xxxx
    ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r3.xyz, r2.y, l(80), t2.xyzx
    ge r2.z, r3.z, l(1.000000)
    if_nz r2.z
      ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r4.xyzw, r2.y, l(0), t2.xyzw
      div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
      lt r2.w, r3.y, l(2.000000)
      if_nz r2.w
        ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r5.xyz, r2.y, l(32), t2.xyzx
        dp3 r2.w, r4.xyzx, r5.xyzx
        mov r3.zw, l(0,0,0,0)
        loop 
          uge r4.w, r3.z, l(8)
          breakc_nz r4.w
          ld_structured r6.xyz, r3.z, l(0), g0.xyzx
          iadd r4.w, r3.z, l(1)
          ld_structured r7.xyz, r4.w, l(0), g0.xyzx
          dp3 r4.w, r5.xyzx, r6.xyzx
          lt r4.w, r4.w, r2.w
          and r4.w, r4.w, l(1)
          or r4.w, r3.w, r4.w
          dp3 r5.w, r5.xyzx, r7.xyzx
          lt r5.w, r5.w, r2.w
          and r5.w, r5.w, l(1)
          or r3.w, r4.w, r5.w
          iadd r3.z, r3.z, l(2)
        endloop 
        if_z r3.w
          mov r2.w, l(0)
        endif 
        if_nz r3.w
          div r3.x, r3.y, -r3.x
          mul r3.x, r3.x, r3.x
          mov r6.x, r2.w
          mov r6.y, l(0)
          mov r3.y, l(0)
          loop 
            uge r3.z, r6.y, l(8)
            mov r3.y, l(0)
            breakc_nz r3.z
            ld_structured r7.xyz, r6.y, l(0), g0.xyzx
            add r7.xyz, -r4.xyzx, r7.xyzx
            iadd r3.z, r6.y, l(1)
            ld_structured r8.xyz, r3.z, l(0), g0.xyzx
            add r8.xyz, -r4.xyzx, r8.xyzx
            dp3 r3.z, -r5.xyzx, r8.xyzx
            ge r4.w, r3.z, l(0.000000)
            mul r5.w, r3.z, r3.z
            dp3 r6.z, r8.xyzx, r8.xyzx
            mul r6.z, r3.x, r6.z
            ge r5.w, r5.w, r6.z
            and r4.w, r4.w, r5.w
            dp3 r5.w, -r5.xyzx, r7.xyzx
            ge r6.w, r5.w, l(0.000000)
            mul r5.w, r5.w, r5.w
            dp3 r7.w, r7.xyzx, r7.xyzx
            mul r7.w, r3.x, r7.w
            ge r5.w, r5.w, r7.w
            and r5.w, r5.w, r6.w
            and r5.w, r5.w, l(2)
            bfi r4.w, l(1), l(0), r4.w, r5.w
            ieq r5.w, r4.w, l(3)
            if_nz r5.w
              mov r6.w, l(-1)
            endif 
            if_z r5.w
              add r9.xyz, r7.xyzx, -r8.xyzx
              dp3 r5.w, -r5.xyzx, r9.xyzx
              dp3 r7.w, r9.xyzx, r9.xyzx
              mul r7.w, r3.x, r7.w
              mad r7.w, r5.w, r5.w, -r7.w
              dp3 r8.w, r9.xyzx, r8.xyzx
              mul r8.w, r3.x, r8.w
              mad r5.w, r3.z, r5.w, -r8.w
              add r8.w, r5.w, r5.w
              mad r3.z, r3.z, r3.z, -r6.z
              mul r3.z, r7.w, r3.z
              mul r3.z, r3.z, l(4.000000)
              mad r3.z, r8.w, r8.w, -r3.z
              ne r6.z, r7.w, l(0.000000)
              ge r8.w, r3.z, l(0.000000)
              and r6.z, r6.z, r8.w
              if_z r6.z
                mov r6.w, l(0)
              endif 
              if_nz r6.z
                sqrt r3.z, r3.z
                add r6.z, r7.w, r7.w
                rcp r6.z, r6.z
                mad r7.w, -r5.w, l(2.000000), r3.z
                mul r7.w, r6.z, r7.w
                mad r3.z, -r5.w, l(2.000000), -r3.z
                mul r3.z, r6.z, r3.z
                if_nz r4.w
                  lt r5.w, l(0.000000), r7.w
                  lt r6.z, r7.w, l(1.000000)
                  and r5.w, r5.w, r6.z
                  movc r5.w, r5.w, r7.w, r3.z
                  mad r10.xyz, r9.xyzx, r5.wwww, r8.xyzx
                  ieq r5.w, r4.w, l(1)
                  movc r8.xyz, r5.wwww, r8.xyzx, r10.xyzx
                  movc r7.xyz, r5.wwww, r10.xyzx, r7.xyzx
                  mov r6.w, l(-1)
                endif 
                if_z r4.w
                  ge r4.w, l(0.000000), r7.w
                  ge r5.w, r7.w, l(1.000000)
                  or r4.w, r4.w, r5.w
                  if_nz r4.w
                    mov r6.w, l(0)
                  endif 
                  if_z r4.w
                    mad r7.xyz, r9.xyzx, r3.zzzz, r8.xyzx
                    mad r8.xyz, r9.xyzx, r7.wwww, r8.xyzx
                    dp3 r3.z, r8.xyzx, -r5.xyzx
                    ge r6.w, r3.z, l(0.000000)
                  endif 
                endif 
              endif 
            endif 
            add r8.xyz, -r7.xyzx, r8.xyzx
            dp3 r3.z, r8.xyzx, r8.xyzx
            lt r4.w, l(0.000000), r3.z
            dp3 r5.w, r7.xyzx, r8.xyzx
            div_sat r3.z, -r5.w, r3.z
            and r3.z, r3.z, r4.w
            mad r7.xyz, r8.xyzx, r3.zzzz, r7.xyzx
            dp3 r3.z, r7.xyzx, r7.xyzx
            lt r3.z, r3.z, r2.z
            and r3.z, r6.w, r3.z
            if_nz r3.z
              mov r6.x, l(-1)
              mov r3.y, l(-1)
              break 
            endif 
            iadd r6.y, r6.y, l(2)
            mov r3.y, r3.z
          endloop 
          mov r2.w, r6.x
          if_z r3.y
            mov r2.w, l(0)
          endif 
        endif 
      else 
        mov r3.xz, l(0,0,0,0)
        loop 
          uge r4.w, r3.z, l(4)
          breakc_nz r4.w
          ishl r4.w, r3.z, l(1)
          ld_structured r5.xyzw, r4.w, l(0), g0.xyzw
          imad r4.w, r3.z, l(2), l(1)
          ld_structured r6.yzw, r4.w, l(0), g0.xxyz
          add r6.yzw, -r5.xxyz, r6.yyzw
          add r7.xyz, r4.xyzx, -r5.xyzx
          dp3 r4.w, r7.xyzx, r6.yzwy
          mul_sat r4.w, r5.w, r4.w
          mad r5.xyz, r6.yzwy, r4.wwww, r5.xyzx
          add r5.xyz, r4.xyzx, -r5.xyzx
          dp3 r4.w, r5.xyzx, r5.xyzx
          lt r4.w, r4.w, r2.z
          and r4.w, r4.w, l(1)
          or r3.x, r3.x, r4.w
          iadd r3.z, r3.z, l(1)
        endloop 
        ine r2.w, r3.x, l(0)
      endif 
    else 
      mov r2.w, l(0)
    endif 
    if_nz r2.w
      imm_atomic_iadd r4.x, g4, l(0), l(1)
      ult r2.z, r4.x, l(512)
      if_nz r2.z
        store_structured g2.x, r4.x, l(0), r2.y
      endif 
    endif 
    iadd r2.x, r2.x, l(32)
  endloop 
  sync_g_t
  if_z vThreadIDInGroupFlattened.x
    ld_raw r2.x, l(0), g4.xxxx
    ld_raw r2.y, l(0), g3.xxxx
    iadd r2.x, r2.x, r2.y
    store_raw g3.x, l(0), r2.x
  endif 
  iadd r1.x, r1.y, r1.x
  sync_g_t
endif 
if_nz r0.y
  mov r1.y, vThreadIDInGroupFlattened.x
  loop 
    uge r2.x, r1.y, r0.y
    breakc_nz r2.x
    iadd r2.x, r1.x, r1.y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r2.x, r2.x, l(0), t9.xxxx
    ld_structured_indexable(structured_buffer, stride=304)(mixed,mixed,mixed,mixed) r2.yzw, r2.x, l(80), t3.xxyz
    ge r2.w, r2.w, l(1.000000)
    if_nz r2.w
      ld_structured_indexable(structured_buffer, stride=304)(mixed,mixed,mixed,mixed) r3.xyzw, r2.x, l(0), t3.xyzw
      div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
      lt r3.w, r2.z, l(2.000000)
      if_nz r3.w
        ld_structured_indexable(structured_buffer, stride=304)(mixed,mixed,mixed,mixed) r4.xyz, r2.x, l(32), t3.xyzx
        dp3 r3.w, r3.xyzx, r4.xyzx
        mov r4.w, l(0)
        mov r5.x, l(0)
        loop 
          uge r5.y, r4.w, l(8)
          breakc_nz r5.y
          ld_structured r5.yzw, r4.w, l(0), g0.xxyz
          iadd r6.x, r4.w, l(1)
          ld_structured r6.xyz, r6.x, l(0), g0.xyzx
          dp3 r5.y, r4.xyzx, r5.yzwy
          lt r5.y, r5.y, r3.w
          and r5.y, r5.y, l(1)
          or r5.y, r5.y, r5.x
          dp3 r5.z, r4.xyzx, r6.xyzx
          lt r5.z, r5.z, r3.w
          and r5.z, r5.z, l(1)
          or r5.x, r5.z, r5.y
          iadd r4.w, r4.w, l(2)
        endloop 
        if_z r5.x
          mov r3.w, l(0)
        endif 
        if_nz r5.x
          div r2.y, r2.z, -r2.y
          mul r2.y, r2.y, r2.y
          mov r6.x, r3.w
          mov r6.y, l(0)
          mov r2.z, l(0)
          loop 
            uge r4.w, r6.y, l(8)
            mov r2.z, l(0)
            breakc_nz r4.w
            ld_structured r5.yzw, r6.y, l(0), g0.xxyz
            add r5.yzw, -r3.xxyz, r5.yyzw
            iadd r4.w, r6.y, l(1)
            ld_structured r7.xyz, r4.w, l(0), g0.xyzx
            add r7.xyz, -r3.xyzx, r7.xyzx
            dp3 r4.w, -r4.xyzx, r7.xyzx
            ge r6.z, r4.w, l(0.000000)
            mul r6.w, r4.w, r4.w
            dp3 r7.w, r7.xyzx, r7.xyzx
            mul r7.w, r2.y, r7.w
            ge r6.w, r6.w, r7.w
            and r6.z, r6.w, r6.z
            dp3 r6.w, -r4.xyzx, r5.yzwy
            ge r8.x, r6.w, l(0.000000)
            mul r6.w, r6.w, r6.w
            dp3 r8.y, r5.yzwy, r5.yzwy
            mul r8.y, r2.y, r8.y
            ge r6.w, r6.w, r8.y
            and r6.w, r6.w, r8.x
            and r6.w, r6.w, l(2)
            bfi r6.z, l(1), l(0), r6.z, r6.w
            ieq r6.w, r6.z, l(3)
            if_nz r6.w
              mov r8.x, l(-1)
            endif 
            if_z r6.w
              add r8.yzw, r5.yyzw, -r7.xxyz
              dp3 r6.w, -r4.xyzx, r8.yzwy
              dp3 r9.x, r8.yzwy, r8.yzwy
              mul r9.x, r2.y, r9.x
              mad r9.x, r6.w, r6.w, -r9.x
              dp3 r9.y, r8.yzwy, r7.xyzx
              mul r9.y, r2.y, r9.y
              mad r6.w, r4.w, r6.w, -r9.y
              add r9.y, r6.w, r6.w
              mad r4.w, r4.w, r4.w, -r7.w
              mul r4.w, r9.x, r4.w
              mul r4.w, r4.w, l(4.000000)
              mad r4.w, r9.y, r9.y, -r4.w
              ne r7.w, r9.x, l(0.000000)
              ge r9.y, r4.w, l(0.000000)
              and r7.w, r7.w, r9.y
              if_z r7.w
                mov r8.x, l(0)
              endif 
              if_nz r7.w
                sqrt r4.w, r4.w
                add r7.w, r9.x, r9.x
                rcp r7.w, r7.w
                mad r9.x, -r6.w, l(2.000000), r4.w
                mul r9.x, r7.w, r9.x
                mad r4.w, -r6.w, l(2.000000), -r4.w
                mul r4.w, r7.w, r4.w
                if_nz r6.z
                  lt r6.w, l(0.000000), r9.x
                  lt r7.w, r9.x, l(1.000000)
                  and r6.w, r6.w, r7.w
                  movc r6.w, r6.w, r9.x, r4.w
                  mad r9.yzw, r8.yyzw, r6.wwww, r7.xxyz
                  ieq r6.w, r6.z, l(1)
                  movc r7.xyz, r6.wwww, r7.xyzx, r9.yzwy
                  movc r5.yzw, r6.wwww, r9.yyzw, r5.yyzw
                  mov r8.x, l(-1)
                endif 
                if_z r6.z
                  ge r6.z, l(0.000000), r9.x
                  ge r6.w, r9.x, l(1.000000)
                  or r6.z, r6.w, r6.z
                  if_nz r6.z
                    mov r8.x, l(0)
                  endif 
                  if_z r6.z
                    mad r5.yzw, r8.yyzw, r4.wwww, r7.xxyz
                    mad r7.xyz, r8.yzwy, r9.xxxx, r7.xyzx
                    dp3 r4.w, r7.xyzx, -r4.xyzx
                    ge r8.x, r4.w, l(0.000000)
                  endif 
                endif 
              endif 
            endif 
            add r7.xyz, -r5.yzwy, r7.xyzx
            dp3 r4.w, r7.xyzx, r7.xyzx
            lt r6.z, l(0.000000), r4.w
            dp3 r6.w, r5.yzwy, r7.xyzx
            div_sat r4.w, -r6.w, r4.w
            and r4.w, r4.w, r6.z
            mad r5.yzw, r7.xxyz, r4.wwww, r5.yyzw
            dp3 r4.w, r5.yzwy, r5.yzwy
            lt r4.w, r4.w, r2.w
            and r4.w, r8.x, r4.w
            if_nz r4.w
              mov r6.x, l(-1)
              mov r2.z, l(-1)
              break 
            endif 
            iadd r6.y, r6.y, l(2)
            mov r2.z, r4.w
          endloop 
          mov r3.w, r6.x
          if_z r2.z
            mov r3.w, l(0)
          endif 
        endif 
      else 
        mov r2.y, l(0)
        mov r4.x, l(0)
        loop 
          uge r4.y, r4.x, l(4)
          breakc_nz r4.y
          ishl r4.y, r4.x, l(1)
          ld_structured r7.xyzw, r4.y, l(0), g0.xyzw
          imad r4.y, r4.x, l(2), l(1)
          ld_structured r4.yzw, r4.y, l(0), g0.xxyz
          add r4.yzw, -r7.xxyz, r4.yyzw
          add r5.yzw, r3.xxyz, -r7.xxyz
          dp3 r5.y, r5.yzwy, r4.yzwy
          mul_sat r5.y, r7.w, r5.y
          mad r4.yzw, r4.yyzw, r5.yyyy, r7.xxyz
          add r4.yzw, r3.xxyz, -r4.yyzw
          dp3 r4.y, r4.yzwy, r4.yzwy
          lt r4.y, r4.y, r2.w
          and r4.y, r4.y, l(1)
          or r2.y, r2.y, r4.y
          iadd r4.x, r4.x, l(1)
        endloop 
        ine r3.w, r2.y, l(0)
      endif 
    else 
      mov r3.w, l(0)
    endif 
    if_nz r3.w
      imm_atomic_iadd r3.x, g5, l(0), l(1)
      ld_raw r2.w, l(0), g3.xxxx
      iadd r2.w, r2.w, r3.x
      ult r3.x, r2.w, l(512)
      if_nz r3.x
        store_structured g2.x, r2.w, l(0), r2.x
      endif 
    endif 
    iadd r1.y, r1.y, l(32)
  endloop 
  sync_g_t
  if_z vThreadIDInGroupFlattened.x
    ld_raw r0.y, l(0), g5.xxxx
    ld_raw r1.x, l(0), g3.xxxx
    iadd r0.y, r0.y, r1.x
    store_raw g3.x, l(0), r0.y
  endif 
  sync_g_t
endif 
if_nz r1.z
  if_z vThreadIDInGroupFlattened.x
    ld_raw r0.y, l(0), g6.xxxx
    ld_raw r1.x, l(0), g3.xxxx
    iadd r0.y, r0.y, r1.x
    store_raw g3.x, l(0), r0.y
  endif 
  sync_g_t
endif 
if_nz r0.z
  sync_g_t
endif 
if_nz r0.w
  sync_g_t
endif 
if_nz r1.w
  sync_g_t
endif 
if_z vThreadIDInGroupFlattened.x
  ld_raw r0.y, l(0), g3.xxxx
  if_nz r0.y
    umin r0.y, r0.y, l(512)
    store_raw g3.x, l(0), r0.y
    imm_atomic_iadd r1.x, u2, l(0), r0.y
    store_raw g1.x, l(0), r1.x
    iadd r0.y, r0.y, r1.x
    ult r0.y, cb0[5].z, r0.y
    if_nz r0.y
      store_raw g3.x, l(0), l(0)
    endif 
    ld_raw r0.y, l(0), g5.xxxx
    ld_raw r0.z, l(0), g4.xxxx
    bfi r1.y, l(16), l(16), r0.y, r0.z
    ld_raw r0.y, l(0), g7.xxxx
    ld_raw r0.z, l(0), g6.xxxx
    bfi r1.z, l(16), l(16), r0.y, r0.z
    ld_raw r0.y, l(0), g9.xxxx
    ld_raw r0.z, l(0), g8.xxxx
    bfi r1.w, l(16), l(16), r0.y, r0.z
  else 
    mov r1.xyzw, l(0,0,0,0)
  endif 
  store_structured u0.xyzw, r0.x, l(0), r1.xyzw
endif 
sync_g_t
ld_raw r0.x, l(0), g3.xxxx
if_nz r0.x
  ld_raw r0.y, l(0), g1.xxxx
  mov r0.z, vThreadIDInGroupFlattened.x
  loop 
    uge r0.w, r0.z, r0.x
    breakc_nz r0.w
    iadd r0.w, r0.y, r0.z
    ld_structured r1.x, r0.z, l(0), g2.xxxx
    store_structured u1.x, r0.w, l(0), r1.x
    iadd r0.z, r0.z, l(32)
  endloop 
endif 
ret 
// Approximately 0 instruction slots used
