[Constants]
; Tile light adjustment multiplier for debugging:
y7 = 1

[ResourceInversedMatrix]
type = Buffer
format = R32G32B32A32_FLOAT
array = 4
[ResourceBackup]
[CustomShaderInverse_cs_cb0_03]
cs = ShaderFixes/inverse-cs.hlsl
ResourceBackup = ref cs-u0
cs-u0 = ResourceInversedMatrix
post cs-u0 = ResourceBackup
Dispatch = 1, 1, 1

[CommandListTileLight]
; The CPU calls UpdateSubresource() on the pointer in u2, but the left eye
; doesn't get updated. Convert it to mono and back to stereo to force both eyes
; to get the same value from the CPU, but still allow it to be updated
; independently in both eyes since the shaders change the value during
; execution, which would break things if the left eye was allowed to start
; where the right eye left off. Need to check if this works in SLI (if SLI is
; even broken in the first place - it may not be):
cs-u2 = mono copy cs-u2
cs-u2 = stereo copy cs-u2

; cb0[0:3] has an inverse transposed view-projection matrix. We also need the
; forwards view-projection matrix, so inverse it:
run = CustomShaderInverse_cs_cb0_03
ResourceBackup = ref cs-cb1
cs-cb1 = copy ResourceInversedMatrix
post cs-cb1 = ResourceBackup

[ShaderOverrideTileLight1]
hash = 358287531d379f46
run = CommandListTileLight

[ShaderOverrideTileLight2]
hash = 14f8f4febc50582f
run = CommandListTileLight

[ShaderOverrideTileLight3]
hash = 4ef93cb9ed279c4c
run = CommandListTileLight

[ShaderOverrideTileLight4]
hash = 1c836ae86bd20d68
run = CommandListTileLight
