;[TextureOverrideUAVNotRT]
;; Like StereoFlagsDX10=0x0000C000, but we can still stereoise structured buffers
;; Strictly speaking not part of the tile light fix, and needs more work to
;; apply to the game as a whole, so commented out here.
;match_bind_flags = +unordered_access -render_target
;match_priority = -1
;StereoMode = 2

[TextureOverrideCubeMapReflections]
; Fixes broken environment mapped reflections
match_misc_flags = texturecube
StereoMode = 2

[TextureOverrideTileLightStructuredBuffers1]
; This is cs-u0 in 358287531d379f46 14f8f4febc50582f 4ef93cb9ed279c4c 1c836ae86bd20d68
match_bind_flags = unordered_access shader_resource
match_misc_flags = buffer_structured
match_stride = 16
StereoMode = 1

[TextureOverrideTileLightStructuredBuffers2]
; This is cs-u1 in 358287531d379f46 14f8f4febc50582f 4ef93cb9ed279c4c 1c836ae86bd20d68
match_bind_flags = unordered_access shader_resource
match_misc_flags = buffer_structured
match_stride = 4
StereoMode = 1

[TextureOverrideTileLightRendered]
; <Register orig_hash=48afda17 type=Texture2D width=120 height=68 mips=1 array=1 format="R32G32_TYPELESS" msaa=1 msaa_quality=0 usage="DEFAULT" bind_flags=0x88 cpu_access_flags=0x0 misc_flags=0x0></Register>
; Haven't traced this - found it via binary search of the resources matched
; with TextureOverrideUAVNotRT in the d3d11_log.txt, but it's necessary to be
; stereo for working tile lighting.
hash = 48afda17
StereoMode = 1


[ResourceInversedMatrix]
type = Buffer
format = R32G32B32A32_FLOAT
array = 4
[ResourceBackup]
[CustomShaderInverse_cs_cb0_03]
cs = ShaderFixes/inverse-cs.hlsl
ResourceBackup = ref cs-u0
cs-u0 = ResourceInversedMatrix
post cs-u0 = ResourceBackup
Dispatch = 1, 1, 1

[CommandListTileLight]
; The CPU calls UpdateSubresource() on the pointer in u2, but the left eye
; doesn't get updated. Convert it to mono and back to stereo to force both eyes
; to get the same value from the CPU, but still allow it to be updated
; independently in both eyes since the shaders change the value during
; execution, which would break things if the left eye was allowed to start
; where the right eye left off. Need to check if this works in SLI (if SLI is
; even broken in the first place - it may not be):
cs-u2 = mono copy cs-u2
cs-u2 = stereo copy cs-u2

; cb0[0:3] has an inverse transposed view-projection matrix. We also need the
; forwards view-projection matrix, so inverse it:
run = CustomShaderInverse_cs_cb0_03
ResourceBackup = ref cs-cb1
cs-cb1 = copy ResourceInversedMatrix
post cs-cb1 = ResourceBackup

[ShaderOverrideTileLight1]
hash = 358287531d379f46
run = CommandListTileLight

[ShaderOverrideTileLight2]
hash = 14f8f4febc50582f
run = CommandListTileLight

[ShaderOverrideTileLight3]
hash = 4ef93cb9ed279c4c
run = CommandListTileLight

[ShaderOverrideTileLight4]
hash = 1c836ae86bd20d68
run = CommandListTileLight
