// 3DMigoto: b503c2f7619b4f47 | Matched 2 variants of 1 shaders: Decal/DeferredDecalDiffuseNormalsDynamicEditor
//
//       Unity headers extracted from Decal_DeferredDecalDiffuseNormalsDynamicEditor
//       Shader "Decal/DeferredDecalDiffuseNormalsDynamicEditor" {
//         SubShader 1/1 {
//           Pass 1/1 {
//             ZWrite Off
//             Program "fp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Decal_DeferredDecalDiffuseNormalsDynamicEditor:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201609010 88 7 2
//      undeciphered1a: 6
// 2:   Keywords { "UNITY_HDR_ON" "EnableEmmision" }
// 1:   Keywords { "UNITY_HDR_ON" }
//      undeciphered2: 1 5 6 5 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 144
//      Float 68 [_NormalPower]
//      Vector 80 [_Color]
//      Vector 96 [_SpecularColor]
//      Vector 112 [_MainTex_ST]
//      Float 140 [_AlphaMultiplier]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 80 [_ProjectionParams]
//      Vector 112 [_ZBufferParams]
//      ConstBuffer "UnityPerCameraRare" 352
//      Matrix 288 [unity_CameraToWorld]
//      ConstBuffer "UnityLighting" 752
//      Vector 608 [unity_SHAr]
//      Vector 624 [unity_SHAg]
//      Vector 640 [unity_SHAb]
//      ConstBuffer "UnityPerDraw" 160
//      Matrix 64 [unity_WorldToObject]
//      ConstBuffer "UnityProbeVolume" 112
//      Vector 0 [unity_ProbeVolumeParams]
//      Vector 80 [unity_ProbeVolumeSizeInv] 3
//      Vector 96 [unity_ProbeVolumeMin] 3
//      Matrix 16 [unity_ProbeVolumeWorldToObject]
//      SetTexture 0 [_CameraDepthTexture] 2D 3
//      SetTexture 1 [_NormalsCopy] 2D 4
//      SetTexture 2 [_MainTex] 2D 1
//      SetTexture 3 [_BumpMap] 2D 2
//      SetTexture 4 [unity_ProbeVolumeSH] 3D 0
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityPerCameraRare" 2
//      BindCB "UnityLighting" 3
//      BindCB "UnityPerDraw" 4
//      BindCB "UnityProbeVolume" 5
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

// ---- Created with 3Dmigoto v1.3.16 on Mon Jul 15 00:17:18 2019
Texture3D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb5 : register(b5)
{
  float4 cb5[7];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[8];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[41];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[9];
}




// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD2,
  float4 v2 : TEXCOORD3,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD6,
  float4 v6 : TEXCOORD4,
  float4 v7 : TEXCOORD5,
  float4 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s3_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r0.xyz = r0.xyz * r0.www;
  r2.xyz = cb2[19].xyz * r0.yyy;
  r0.xyw = cb2[18].xyz * r0.xxx + r2.xyz;
  r0.xyz = cb2[20].xyz * r0.zzz + r0.xyw;
  r0.xyz = cb2[21].xyz + r0.xyz;
  r2.xyz = cb4[5].xyz * r0.yyy;
  r2.xyz = cb4[4].xyz * r0.xxx + r2.xyz;
  r2.xyz = cb4[6].xyz * r0.zzz + r2.xyz;
  r2.xyz = cb4[7].xyz + r2.xyz;
  r3.xyz = float3(0.5,0.5,0.5) + -abs(r2.xyz);
  r4.xyz = cmp(r3.xyz < float3(0,0,0));
  r0.w = (int)r4.y | (int)r4.x;
  r0.w = (int)r4.z | (int)r0.w;
  if (r0.w != 0) discard;
  r1.xyzw = t1.Sample(s4_s, r1.xy).xyzw;
  r1.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(v4.xyz, v4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = v4.xyz * r0.www;
  r0.w = dot(r1.xyz, r4.xyz);
  r0.w = -v3.x + r0.w;
  r2.y = cmp(r0.w < 0);
  if (r2.y != 0) discard;
  r2.y = 1 + -v3.x;
  r0.w = r0.w / r2.y;
  r2.y = v3.y * r0.w;
  r0.w = saturate(r2.y * r0.w);
  r2.xy = r2.xz * float2(2,2) + float2(1,1);
  r2.xy = float2(0.5,0.5) * r2.xy;
  r2.zw = v8.zw + -v8.xy;
  r2.xy = r2.xy * r2.zw + v8.xy;
  r2.xy = r2.xy * cb0[7].xy + cb0[7].zw;
  r4.xyzw = t2.Sample(s1_s, r2.xy).xyzw;
  r4.xyzw = cb0[5].xyzw * r4.xyzw;
  r2.z = r4.w * r0.w;
  r2.w = min(r3.x, r3.y);
  r2.w = min(r2.w, r3.z);
  r3.x = v3.z + -r2.w;
  r3.x = r3.x / v3.z;
  r3.x = 1 + -r3.x;
  r3.y = v3.w * r3.x;
  r3.x = saturate(r3.y * r3.x);
  r2.w = cmp(r2.w < v3.z);
  r2.w = r2.w ? 1.000000 : 0;
  r3.x = r2.z * r3.x + -r2.z;
  r2.z = r2.w * r3.x + r2.z;
  r3.xyzw = t3.Sample(s2_s, r2.xy).xyzw;
  r2.xy = r3.wy * float2(2,2) + float2(-1,-1);
  r2.w = dot(r2.xy, r2.xy);
  r2.w = min(1, r2.w);
  r2.w = 1 + -r2.w;
  r2.w = sqrt(r2.w);
  r3.xyz = v7.xyz * r2.yyy;
  r3.xyz = r2.xxx * v6.xyz + r3.xyz;
  r2.xyw = r2.www * v5.xyz + r3.xyz;
  o2.xyz = r2.xyw * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o2.w = cb0[4].y * r2.z;
  r0.w = r2.z / r0.w;
  o1.w = cb0[6].w * r0.w;
  r0.w = cmp(cb5[0].x == 1.000000);
  if (r0.w != 0) {
    r0.w = cmp(cb5[0].y == 1.000000);
    r2.xyw = cb5[2].xyz * r0.yyy;
    r2.xyw = cb5[1].xyz * r0.xxx + r2.xyw;
    r2.xyw = cb5[3].xyz * r0.zzz + r2.xyw;
    r2.xyw = cb5[4].xyz + r2.xyw;
    r0.xyz = r0.www ? r2.xyw : r0.xyz;
    r0.xyz = -cb5[6].xyz + r0.xyz;
    r0.yzw = cb5[5].xyz * r0.xyz;
    r0.y = 0.25 * r0.y;
    r2.x = 0.5 * cb5[0].z;
    r2.y = -cb5[0].z * 0.5 + 0.25;
    r0.y = max(r2.x, r0.y);
    r0.x = min(r0.y, r2.y);
    r3.xyzw = t4.Sample(s0_s, r0.xzw).xyzw;
    r2.xyw = float3(0.25,0,0) + r0.xzw;
    r5.xyzw = t4.Sample(s0_s, r2.xyw).xyzw;
    r0.xyz = float3(0.5,0,0) + r0.xzw;
    r0.xyzw = t4.Sample(s0_s, r0.xyz).xyzw;
    r1.w = 1;
    r3.x = dot(r3.xyzw, r1.xyzw);
    r3.y = dot(r5.xyzw, r1.xyzw);
    r3.z = dot(r0.xyzw, r1.xyzw);
  } else {
    r1.w = 1;
    r3.x = dot(cb3[38].xyzw, r1.xyzw);
    r3.y = dot(cb3[39].xyzw, r1.xyzw);
    r3.z = dot(cb3[40].xyzw, r1.xyzw);
  }
  r0.xyz = max(float3(0,0,0), r3.xyz);
  r0.xyz = log2(r0.xyz);
  r0.xyz = float3(0.416666657,0.416666657,0.416666657) * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r0.xyz = r0.xyz * float3(1.05499995,1.05499995,1.05499995) + float3(-0.0549999997,-0.0549999997,-0.0549999997);
  r0.xyz = max(float3(0,0,0), r0.xyz);
  o3.xyz = r4.xyz * r0.xyz;
  o0.w = cb0[8].w * r2.z;
  o0.xyz = r4.xyz;
  o1.xyz = cb0[6].xyz;
  o3.w = r2.z;
  return;
}