// Decals. A-typical halo pattern + view space correction + FOV passed to pixel shader for 2nd view-space adjustment in 5f163d8e0205143f
//
// 3DMigoto: 5f163d8e0205143f | Matched 4 variants of 1 shaders: Decal/DeferredDecalDiffuseNormalsDynamicEditor
//
//       Unity headers extracted from Decal_DeferredDecalDiffuseNormalsDynamicEditor
//       Shader "Decal/DeferredDecalDiffuseNormalsDynamicEditor" {
//         SubShader 1/1 {
//           Pass 1/1 {
//             ZWrite Off
//             Program "vp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Decal_DeferredDecalDiffuseNormalsDynamicEditor:
//      API d3d11
//      Shader model vs_4_0
//      undeciphered1: 201609010 17 0 0
//      undeciphered1a: 3
// 4:   Keywords { "EnableEmmision" }
// 8:   Keywords { "UNITY_HDR_ON" "EnableEmmision" }
// 2:   Keywords { "UNITY_HDR_ON" }
//      undeciphered2: 1 0 3 0 0 0
//      undeciphered3: 153 4 0 0 7 8 3 4 4 5
//      ConstBuffer "UnityPerCamera" 144
//      Vector 80 [_ProjectionParams]
//      ConstBuffer "UnityPerDraw" 160
//      Matrix 0 [unity_ObjectToWorld]
//      ConstBuffer "UnityPerFrame" 384
//      Matrix 144 [unity_MatrixV]
//      Matrix 272 [unity_MatrixVP]
//      BindCB "UnityPerCamera" 0
//      BindCB "UnityPerDraw" 1
//      BindCB "UnityPerFrame" 2
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

// ---- Created with 3Dmigoto v1.3.16 on Mon Jul 15 00:05:55 2019

// Unity constant buffers reconstructed with DarkStarSword's hlsltool.py:
// hlsltool.py --reconstruct-unity-cbuffers --in-place 5f163d8e0205143f-vs_replace.txt

cbuffer UnityPerFrame : register(b2) {
  row_major matrix unity_MatrixV : packoffset(c9);
  row_major matrix unity_MatrixVP : packoffset(c17);
}

cbuffer UnityPerDraw : register(b1) {
  row_major matrix unity_ObjectToWorld : packoffset(c0);
}

cbuffer UnityPerCamera : register(b0) {
  float4 _ProjectionParams : packoffset(c5);
}


Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float4 v2 : TEXCOORD0,
  float2 v3 : TEXCOORD1,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD2,
  out float4 o2 : TEXCOORD3,
  out float4 o3 : TEXCOORD0,
  out float4 o4 : TEXCOORD1,
  out float4 o5 : TEXCOORD6,
  out float4 o6 : TEXCOORD4,
  out float4 o7 : TEXCOORD5,
  out float4 o8 : TEXCOORD7,
  out float fov : TEXCOORD8) // New
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = unity_ObjectToWorld[1].xyzw * v0.yyyy;
  r0.xyzw = unity_ObjectToWorld[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = unity_ObjectToWorld[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = unity_ObjectToWorld[3].xyzw + r0.xyzw;
  r1.xyzw = unity_MatrixVP[1].xyzw * r0.yyyy;
  r1.xyzw = unity_MatrixVP[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = unity_MatrixVP[2].xyzw * r0.zzzz + r1.xyzw;
  r1.xyzw = unity_MatrixVP[3].xyzw * r0.wwww + r1.xyzw;
  o0.xyzw = r1.xyww;

float4 s = StereoParams.Load(0);
float adj = s.x * (r1.w - s.y);
r1.x += adj;

  r1.y = _ProjectionParams.x * r1.y;
  r2.xzw = float3(0.5,0.5,0.5) * r1.xwy;
  o1.zw = r1.zw * float2(-1,1) + float2(1,0);
  o1.xy = r2.xw + r2.zz;
  r1.xyz = unity_MatrixV[1].xyz * r0.yyy;
  r1.xyz = unity_MatrixV[0].xyz * r0.xxx + r1.xyz;
  r0.xyz = unity_MatrixV[2].xyz * r0.zzz + r1.xyz;
  r0.xyz = unity_MatrixV[3].xyz * r0.www + r0.xyz;

matrix iv = inverse(unity_MatrixV);
matrix p = mul(iv, unity_MatrixVP);
fov = 1 / p._m00;
r0.x += adj * fov;

  o2.xyz = float3(-1,-1,1) * r0.xyz;
  o3.xy = v2.xy;
  o3.zw = v3.xy;
  o4.xyz = unity_ObjectToWorld[1].xyz;
  o5.xyz = unity_ObjectToWorld[1].xyz;
  o6.xyz = unity_ObjectToWorld[0].xyz;
  o7.xyz = unity_ObjectToWorld[2].xyz;
  o8.xyzw = v1.xyzw;
  return;
}
