// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed db0e8e5f2fdceb73-vs.txt
// 3DMigoto: db0e8e5f2fdceb73 | Matched 2 variants of 1 shaders: Nature/SpeedTreeEFT
//
//       Unity headers extracted from Nature_SpeedTreeEFT
//       Shader "Nature/SpeedTreeEFT" {
//         CustomEditor "SpeedTreeMaterialInspector"
//         Fallback "Transparent/Cutout/VertexLit"
//         SubShader 1/2 {
//           LOD 400
//           Tags { "DisableBatching"="LodFading" "IGNOREPROJECTOR"="true" "QUEUE"="Geometry" "RenderType"="Opaque" }
//           Pass 1/8 {
//             Name "FORWARD"
//             Tags { "DisableBatching"="LodFading" "IGNOREPROJECTOR"="true" "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//             Program "vp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Nature_SpeedTreeEFT:
//      API d3d11
//      Shader model vs_4_0
//      undeciphered1: 201609010 313 0 10
//      undeciphered1a: 14
// 1:   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP" "INSTANCING_ON" "GEOM_TYPE_LEAF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 2:   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "INSTANCING_ON" "GEOM_TYPE_LEAF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
//      undeciphered2: 1 0 8 0 0 0
//      undeciphered3: 191 7 0 0 7 8 1 2 3 4 4 5 5 6 2 1
//      ConstBuffer "$Globals" 128
//      Float 64 [_WindQuality]
//      Float 68 [_WindEnabled]
//      Vector 80 [_HueVariation]
//      Vector 96 [_Color]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 80 [_ProjectionParams]
//      ConstBuffer "UnityLighting" 752
//      Vector 656 [unity_SHBr]
//      Vector 672 [unity_SHBg]
//      Vector 688 [unity_SHBb]
//      Vector 704 [unity_SHC]
//      ConstBuffer "UnityPerDraw" 160
//      Vector 144 [unity_WorldTransformParams]
//      ConstBuffer "UnityPerFrame" 384
//      Matrix 208 [unity_MatrixInvV]
//      Matrix 272 [unity_MatrixVP]
//      ConstBuffer "UnityDrawCallInfo" 16
//      ScalarInt 0 [unity_BaseInstanceID]
//      ConstBuffer "UnityInstancing_PerDraw0" 6400
//      Matrix 0 [unity_ObjectToWorldArray0]
//      Matrix 64 [unity_ObjectToWorldArray1]
//      Matrix 128 [unity_ObjectToWorldArray2]
//      Matrix 192 [unity_ObjectToWorldArray3]
//      Matrix 256 [unity_ObjectToWorldArray4]
//      Matrix 320 [unity_ObjectToWorldArray5]
//      Matrix 384 [unity_ObjectToWorldArray6]
//      Matrix 448 [unity_ObjectToWorldArray7]
//      Matrix 512 [unity_ObjectToWorldArray8]
//      Matrix 576 [unity_ObjectToWorldArray9]
//      Matrix 640 [unity_ObjectToWorldArray10]
//      Matrix 704 [unity_ObjectToWorldArray11]
//      Matrix 768 [unity_ObjectToWorldArray12]
//      Matrix 832 [unity_ObjectToWorldArray13]
//      Matrix 896 [unity_ObjectToWorldArray14]
//      Matrix 960 [unity_ObjectToWorldArray15]
//      Matrix 1024 [unity_ObjectToWorldArray16]
//      Matrix 1088 [unity_ObjectToWorldArray17]
//      Matrix 1152 [unity_ObjectToWorldArray18]
//      Matrix 1216 [unity_ObjectToWorldArray19]
//      Matrix 1280 [unity_ObjectToWorldArray20]
//      Matrix 1344 [unity_ObjectToWorldArray21]
//      Matrix 1408 [unity_ObjectToWorldArray22]
//      Matrix 1472 [unity_ObjectToWorldArray23]
//      Matrix 1536 [unity_ObjectToWorldArray24]
//      Matrix 1600 [unity_ObjectToWorldArray25]
//      Matrix 1664 [unity_ObjectToWorldArray26]
//      Matrix 1728 [unity_ObjectToWorldArray27]
//      Matrix 1792 [unity_ObjectToWorldArray28]
//      Matrix 1856 [unity_ObjectToWorldArray29]
//      Matrix 1920 [unity_ObjectToWorldArray30]
//      Matrix 1984 [unity_ObjectToWorldArray31]
//      Matrix 2048 [unity_ObjectToWorldArray32]
//      Matrix 2112 [unity_ObjectToWorldArray33]
//      Matrix 2176 [unity_ObjectToWorldArray34]
//      Matrix 2240 [unity_ObjectToWorldArray35]
//      Matrix 2304 [unity_ObjectToWorldArray36]
//      Matrix 2368 [unity_ObjectToWorldArray37]
//      Matrix 2432 [unity_ObjectToWorldArray38]
//      Matrix 2496 [unity_ObjectToWorldArray39]
//      Matrix 2560 [unity_ObjectToWorldArray40]
//      Matrix 2624 [unity_ObjectToWorldArray41]
//      Matrix 2688 [unity_ObjectToWorldArray42]
//      Matrix 2752 [unity_ObjectToWorldArray43]
//      Matrix 2816 [unity_ObjectToWorldArray44]
//      Matrix 2880 [unity_ObjectToWorldArray45]
//      Matrix 2944 [unity_ObjectToWorldArray46]
//      Matrix 3008 [unity_ObjectToWorldArray47]
//      Matrix 3072 [unity_ObjectToWorldArray48]
//      Matrix 3136 [unity_ObjectToWorldArray49]
//      Matrix 3200 [unity_WorldToObjectArray0]
//      Matrix 3264 [unity_WorldToObjectArray1]
//      Matrix 3328 [unity_WorldToObjectArray2]
//      Matrix 3392 [unity_WorldToObjectArray3]
//      Matrix 3456 [unity_WorldToObjectArray4]
//      Matrix 3520 [unity_WorldToObjectArray5]
//      Matrix 3584 [unity_WorldToObjectArray6]
//      Matrix 3648 [unity_WorldToObjectArray7]
//      Matrix 3712 [unity_WorldToObjectArray8]
//      Matrix 3776 [unity_WorldToObjectArray9]
//      Matrix 3840 [unity_WorldToObjectArray10]
//      Matrix 3904 [unity_WorldToObjectArray11]
//      Matrix 3968 [unity_WorldToObjectArray12]
//      Matrix 4032 [unity_WorldToObjectArray13]
//      Matrix 4096 [unity_WorldToObjectArray14]
//      Matrix 4160 [unity_WorldToObjectArray15]
//      Matrix 4224 [unity_WorldToObjectArray16]
//      Matrix 4288 [unity_WorldToObjectArray17]
//      Matrix 4352 [unity_WorldToObjectArray18]
//      Matrix 4416 [unity_WorldToObjectArray19]
//      Matrix 4480 [unity_WorldToObjectArray20]
//      Matrix 4544 [unity_WorldToObjectArray21]
//      Matrix 4608 [unity_WorldToObjectArray22]
//      Matrix 4672 [unity_WorldToObjectArray23]
//      Matrix 4736 [unity_WorldToObjectArray24]
//      Matrix 4800 [unity_WorldToObjectArray25]
//      Matrix 4864 [unity_WorldToObjectArray26]
//      Matrix 4928 [unity_WorldToObjectArray27]
//      Matrix 4992 [unity_WorldToObjectArray28]
//      Matrix 5056 [unity_WorldToObjectArray29]
//      Matrix 5120 [unity_WorldToObjectArray30]
//      Matrix 5184 [unity_WorldToObjectArray31]
//      Matrix 5248 [unity_WorldToObjectArray32]
//      Matrix 5312 [unity_WorldToObjectArray33]
//      Matrix 5376 [unity_WorldToObjectArray34]
//      Matrix 5440 [unity_WorldToObjectArray35]
//      Matrix 5504 [unity_WorldToObjectArray36]
//      Matrix 5568 [unity_WorldToObjectArray37]
//      Matrix 5632 [unity_WorldToObjectArray38]
//      Matrix 5696 [unity_WorldToObjectArray39]
//      Matrix 5760 [unity_WorldToObjectArray40]
//      Matrix 5824 [unity_WorldToObjectArray41]
//      Matrix 5888 [unity_WorldToObjectArray42]
//      Matrix 5952 [unity_WorldToObjectArray43]
//      Matrix 6016 [unity_WorldToObjectArray44]
//      Matrix 6080 [unity_WorldToObjectArray45]
//      Matrix 6144 [unity_WorldToObjectArray46]
//      Matrix 6208 [unity_WorldToObjectArray47]
//      Matrix 6272 [unity_WorldToObjectArray48]
//      Matrix 6336 [unity_WorldToObjectArray49]
//      ConstBuffer "SpeedTreeWind" 256
//      Vector 0 [_ST_WindVector]
//      Vector 16 [_ST_WindGlobal]
//      Vector 32 [_ST_WindBranch]
//      Vector 48 [_ST_WindBranchTwitch]
//      Vector 64 [_ST_WindBranchWhip]
//      Vector 80 [_ST_WindBranchAnchor]
//      Vector 96 [_ST_WindBranchAdherences]
//      Vector 112 [_ST_WindTurbulences]
//      Vector 128 [_ST_WindLeaf1Ripple]
//      Vector 144 [_ST_WindLeaf1Tumble]
//      Vector 160 [_ST_WindLeaf1Twitch]
//      Vector 176 [_ST_WindLeaf2Ripple]
//      Vector 192 [_ST_WindLeaf2Tumble]
//      Vector 208 [_ST_WindLeaf2Twitch]
//      Vector 240 [_ST_WindAnimation]
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityLighting" 2
//      BindCB "UnityPerDraw" 3
//      BindCB "UnityPerFrame" 4
//      BindCB "UnityDrawCallInfo" 5
//      BindCB "UnityInstancing_PerDraw0" 6
//      BindCB "SpeedTreeWind" 7
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Mon Jul 15 00:22:19 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyz         2     NONE   float   xyz
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 1   xyzw        4     NONE   float   xyz
// TEXCOORD                 2   xyzw        5     NONE   float   xyzw
// TEXCOORD                 3   xy          6     NONE   float
// COLOR                    0   xyzw        7     NONE   float   x  w
// SV_InstanceID            0   x           8   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// TEXCOORD                 7      w        5     NONE   float      w
// TEXCOORD                 5   xyz         6     NONE   float   xyz
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// SV_InstanceID            0   x           8     NONE    uint   x
//
vs_4_0
dcl_constantbuffer cb0[7], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[45], immediateIndexed
dcl_constantbuffer cb3[10], immediateIndexed
dcl_constantbuffer cb4[21], immediateIndexed
dcl_constantbuffer cb5[1], immediateIndexed
dcl_constantbuffer cb6[400], dynamicIndexed
dcl_constantbuffer cb7[16], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_input v5.xyzw
dcl_input v7.xw
dcl_input_sgv v8.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o5.w
dcl_output o6.xyz
dcl_output o7.xyzw
dcl_output o8.x
dcl_temps 15

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw

iadd r0.x, v8.x, cb5[0].x
mul o4.xyz, v7.xxxx, cb0[6].xyzx
ishl r0.x, r0.x, l(2)
add r0.y, cb6[r0.x + 3].y, cb6[r0.x + 3].x
add r0.z, r0.y, cb6[r0.x + 3].z
add r0.w, v0.x, v2.y
add r0.w, r0.w, v2.x
frc r0.zw, r0.zzzw
mad r0.z, r0.w, l(0.500000), r0.z
add r0.z, r0.z, l(-0.300000)
mul_sat o5.z, r0.z, cb0[5].w
mul r0.z, cb0[4].y, cb0[4].x
ge r0.w, l(0.000000), r0.z
if_nz r0.w
  mov r1.xyz, l(0,0,0,0)
  mov r2.xyz, l(0,0,0,0)
else
  dp3 r3.x, cb7[0].xyzx, cb6[r0.x + 0].xyzx
  dp3 r3.y, cb7[0].xyzx, cb6[r0.x + 1].xyzx
  dp3 r3.z, cb7[0].xyzx, cb6[r0.x + 2].xyzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  rsq r0.w, r0.w
  mul r2.xyz, r0.wwww, r3.xzyx
  dp3 r3.x, cb7[5].xyzx, cb6[r0.x + 0].xyzx
  dp3 r3.y, cb7[5].xyzx, cb6[r0.x + 1].xyzx
  dp3 r3.z, cb7[5].xyzx, cb6[r0.x + 2].xyzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  rsq r0.w, r0.w
  mul r3.xyz, r0.wwww, r3.xyzx
  mul r1.xyz, r3.xyzx, cb7[5].wwww
endif
add r3.xyz, v0.xyzx, -v4.xyzx
eq r0.w, v7.w, l(0.000000)
if_nz r0.w
  dp3 r0.w, r3.xyzx, r3.xyzx
  sqrt r0.w, r0.w
  mul r4.xyz, cb4[13].yyyy, cb6[r0.x + 201].xyzx
  mad r4.xyz, cb6[r0.x + 200].xyzx, cb4[13].xxxx, r4.xyzx
  mad r4.xyz, cb6[r0.x + 202].xyzx, cb4[13].zzzz, r4.xyzx
  mad r4.xyz, cb6[r0.x + 203].xyzx, cb4[13].wwww, r4.xyzx
  mul r5.xyz, cb4[14].yyyy, cb6[r0.x + 201].xyzx
  mad r5.xyz, cb6[r0.x + 200].xyzx, cb4[14].xxxx, r5.xyzx
  mad r5.xyz, cb6[r0.x + 202].xyzx, cb4[14].zzzz, r5.xyzx
  mad r5.xyz, cb6[r0.x + 203].xyzx, cb4[14].wwww, r5.xyzx
  mul r6.xyz, cb4[15].yyyy, cb6[r0.x + 201].xyzx
  mad r6.xyz, cb6[r0.x + 200].xyzx, cb4[15].xxxx, r6.xyzx
  mad r6.xyz, cb6[r0.x + 202].xyzx, cb4[15].zzzz, r6.xyzx
  mad r6.xyz, cb6[r0.x + 203].xyzx, cb4[15].wwww, r6.xyzx
  mul r5.xyz, r3.yyyy, r5.xyzx
  mad r4.xyz, r3.xxxx, r4.xyzx, r5.xyzx
  mad r4.xyz, r3.zzzz, r6.xyzx, r4.xyzx
  dp3 r1.w, r4.xyzx, r4.xyzx
  rsq r1.w, r1.w
  mul r4.xyz, r1.wwww, r4.xyzx
  mul r3.xyz, r0.wwww, r4.xyzx
endif
lt r4.xy, l(1.000000, 0.000000, 0.000000, 0.000000), r0.zzzz
lt r0.w, r0.z, l(5.000000)
and r0.w, r0.w, r4.x
if_nz r0.w
  add r0.w, v4.y, v4.x
  eq r1.w, r0.z, l(4.000000)
  lt r2.w, l(0.000000), v5.w
  movc r4.xz, r2.wwww, cb7[11].xxyx, cb7[8].xxyx
  add r0.w, r0.w, r4.x
  add r0.w, r0.w, l(0.500000)
  frc r0.w, r0.w
  mad r0.w, r0.w, l(2.000000), l(-1.000000)
  mul r3.w, |r0.w|, |r0.w|
  mad r0.w, -|r0.w|, l(2.000000), l(3.000000)
  mad r0.w, r3.w, r0.w, l(-0.500000)
  dp2 r0.w, r0.wwww, r4.zzzz
  mul r4.xzw, v5.zzzz, l(0.062500, 0.000000, 1.000000, 16.000000)
  frc r4.xzw, r4.xxzw
  mad r4.xzw, r4.xxzw, l(2.000000, 0.000000, 2.000000, 2.000000), l(-1.000000, 0.000000, -1.000000, -1.000000)
  mul r4.xzw, r0.wwww, r4.xxzw
  mad r3.xyz, r4.xzwx, v5.xxxx, r3.xyzx
  if_nz r1.w
    mul r5.xyzw, v5.yyyy, l(0.062500, 1.000000, 16.000000, 30.299999)
    frc r5.xyzw, r5.xyzw
    mad r4.xzw, r5.xxyz, l(2.000000, 0.000000, 2.000000, 2.000000), l(-1.000000, 0.000000, -1.000000, -1.000000)
    movc r6.xyzw, r2.wwww, cb7[12].xyzw, cb7[9].xyzw
    movc r5.xyz, r2.wwww, cb7[13].xyzx, cb7[10].xyzx
    mul r0.w, r5.w, l(3.000000)
    mad r7.y, r5.w, l(3.000000), r6.x
    mad r7.x, r6.x, l(0.750000), -r0.w
    add r7.xy, r7.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
    frc r7.xy, r7.xyxx
    mad r7.xy, r7.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
    mul r7.zw, |r7.xxxy|, |r7.xxxy|
    mad r7.xy, -|r7.xyxx|, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
    mad r7.xy, r7.zwzz, r7.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
    add r7.xy, r7.xyxx, r7.xyxx
    dp3 r0.w, r3.xyzx, r3.xyzx
    sqrt r0.w, r0.w
    mad r1.w, r7.x, r7.x, r7.y
    mul r2.w, r6.z, v5.x
    mul r1.w, r1.w, r2.w
    sincos r6.x, r8.x, r1.w
    add r1.w, -r8.x, l(1.000000)
    mul r9.xyzw, r4.xxxz, r1.wwww
    mul r8.yzw, r4.wwxz, r6.xxxx
    mad r10.xy, r9.zyzz, r4.wzww, r8.wyww
    mad r11.xy, r9.xwxx, r4.xzxx, r8.xxxx
    mad r10.z, r9.w, r4.w, -r8.z
    mad r12.xy, r9.yzyy, r4.zwzz, -r8.ywyy
    mad r12.z, r9.w, r4.w, r8.z
    mul r2.w, r4.w, r4.w
    mad r12.w, r2.w, r1.w, r8.x
    mul r8.xyz, r2.zyxz, r4.wxzw
    mad r8.xyz, r4.zwxz, r2.yxzy, -r8.xyzx
    dp3 r1.w, r2.xzyx, r4.xzwx
    max r1.w, r1.w, l(-1.000000)
    min r1.w, r1.w, l(1.000000)
    add r8.w, r1.w, r8.y
    dp3 r2.z, r8.xzwx, r8.xzwx
    rsq r2.z, r2.z
    mul r4.xzw, r2.zzzz, r8.zzxw
    add r2.z, -|r1.w|, l(1.000000)
    sqrt r2.z, r2.z
    mad r2.w, |r1.w|, l(-0.0187292993), l(0.074261)
    mad r2.w, r2.w, |r1.w|, l(-0.212114394)
    mad r2.w, r2.w, |r1.w|, l(1.57072878)
    mul r3.w, r2.z, r2.w
    mad r3.w, r3.w, l(-2.000000), l(3.14159274)
    lt r1.w, r1.w, -r1.w
    and r1.w, r1.w, r3.w
    mad r1.w, r2.w, r2.z, r1.w
    mad r2.z, -r7.y, r7.y, r7.x
    mad r7.x, r5.w, l(3.000000), r5.z
    mul r7.y, r7.x, l(0.870000)
    add r5.zw, r7.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
    frc r5.zw, r5.zzzw
    mad r5.zw, r5.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
    mul r6.xz, |r5.zzwz|, |r5.zzwz|
    mad r5.zw, -|r5.zzzw|, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
    mad r5.zw, r6.xxxz, r5.zzzw, l(0.000000, 0.000000, -0.500000, -0.500000)
    add r5.zw, r5.zzzw, r5.zzzw
    mul r2.w, r5.w, r5.w
    mad r2.w, r2.w, r5.z, l(1.000000)
    mul_sat r2.w, r2.w, l(0.500000)
    log r2.w, r2.w
    mul r2.w, r2.w, r5.y
    exp r2.w, r2.w
    mul r2.z, r6.y, r2.z
    mad r1.w, r1.w, r6.w, r2.z
    mad r1.w, r5.x, r2.w, r1.w
    mul r1.w, r1.w, v5.x
    sincos r5.x, r6.x, r1.w
    add r1.w, -r6.x, l(1.000000)
    mul r7.xyzw, r4.zzzw, r1.wwww
    mul r5.xyz, r4.xzwx, r5.xxxx
    mad r8.xy, r7.zyzz, r4.xwxx, r5.zxzz
    mad r9.xy, r7.xwxx, r4.zwzz, r6.xxxx
    mad r8.z, r7.w, r4.x, -r5.y
    mad r13.xy, r7.yzyy, r4.wxww, -r5.xzxx
    mad r13.z, r7.w, r4.x, r5.y
    mul r2.z, r4.x, r4.x
    mad r8.w, r2.z, r1.w, r6.x
    mov r11.z, r12.x
    mov r11.w, r10.x
    mov r9.z, r8.y
    mov r9.w, r13.y
    dp3 r5.x, r11.xzwx, r9.xzwx
    mov r13.w, r9.y
    dp3 r5.y, r11.xwzx, r13.xzwx
    dp3 r5.z, r11.xzwx, r8.xzwx
    mov r10.w, r11.y
    dp3 r6.x, r10.ywzy, r9.xzwx
    dp3 r6.y, r10.yzwy, r13.xzwx
    dp3 r6.z, r10.ywzy, r8.xzwx
    dp3 r7.x, r12.yzwy, r9.xzwx
    dp3 r7.y, r12.ywzy, r13.xzwx
    dp3 r7.z, r12.yzwy, r8.xzwx
    dp3 r1.w, r5.xyzx, v2.xyzx
    dp3 r2.z, r6.xyzx, v2.xyzx
    dp3 r2.w, r7.xyzx, v2.xyzx
    dp3 r5.x, r5.xyzx, r3.xyzx
    dp3 r5.y, r6.xyzx, r3.xyzx
    dp3 r5.z, r7.xyzx, r3.xyzx
    dp3 r3.w, r5.xyzx, r5.xyzx
    rsq r3.w, r3.w
    mul r4.xzw, r3.wwww, r5.xxyz
    mul r3.xyz, r0.wwww, r4.xzwx
  else
    mov r1.w, v2.x
    mov r2.zw, v2.yyyz
  endif
else
  mov r1.w, v2.x
  mov r2.zw, v2.yyyz
endif
add r3.xyz, r3.xyzx, v4.xyzx
ge r0.w, r0.z, l(3.000000)
if_nz r0.w
  eq r0.z, r0.z, l(5.000000)
  if_nz r0.z
    mul r4.xzw, v3.wwww, l(0.062500, 0.000000, 1.000000, 16.000000)
    frc r4.xzw, r4.xxzw
    mad r4.xzw, r4.xxzw, l(2.000000, 0.000000, 2.000000, 2.000000), l(-1.000000, 0.000000, -1.000000, -1.000000)
    mul r4.xzw, r4.xxzw, v3.zzzz
    add r0.z, r0.y, cb7[2].x
    add r5.x, r0.z, v3.w
    mad r5.y, r0.z, cb7[3].y, v3.w
    mul r0.w, r5.x, cb7[3].y
    mul r5.z, r0.w, l(0.500000)
    add r5.w, r5.x, -v3.z
    add r5.xyzw, r5.xyzw, l(0.500000, 0.500000, 0.500000, 1.500000)
    frc r5.xyzw, r5.xyzw
    mad r5.xyzw, r5.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
    mul r6.xyzw, |r5.xyzw|, |r5.xyzw|
    mad r5.xyzw, -|r5.xyzw|, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
    mad r5.xyzw, r6.xyzw, r5.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
    add r5.xyzw, r5.xyzw, r5.xyzw
    mul r6.w, r5.z, r5.y
    lt r0.w, r6.w, l(0.000000)
    mov r6.y, -r6.w
    mov r6.xz, l(-1.000000,0,1.000000,0)
    movc r6.xy, r0.wwww, r6.xyxx, r6.zwzz
    mad r0.w, -r5.y, r5.z, r6.x
    mad r0.w, r6.y, r0.w, r6.w
    add r3.w, -r0.w, r6.x
    mad r0.w, r6.y, r3.w, r0.w
    mul r0.w, r0.w, cb7[3].x
    add r3.w, -cb7[0].w, l(1.000000)
    add r5.y, -cb7[3].x, l(1.000000)
    mul r5.x, r5.y, r5.x
    mad r0.w, r0.w, r3.w, r5.x
    mad r3.w, r5.w, cb7[4].x, l(1.000000)
    mul r0.w, r0.w, r3.w
    mul r4.xzw, r0.wwww, r4.xxzw
    mad r4.xzw, r4.xxzw, cb7[2].yyyy, r3.xxyz
    mad r5.x, r0.z, l(0.100000), v3.w
    mul r0.z, cb7[7].x, cb7[15].x
    mad r5.y, r0.z, l(0.100000), v3.w
    add r0.zw, r5.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
    frc r0.zw, r0.zzzw
    mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
    mul r5.xy, |r0.zwzz|, |r0.zwzz|
    mad r0.zw, -|r0.zzzw|, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
    mad r0.zw, r5.xxxy, r0.zzzw, l(0.000000, 0.000000, -0.500000, -0.500000)
    add r0.zw, r0.zzzw, r0.zzzw
    mul r0.zw, r0.zzzw, r0.zzzw
    mul r0.z, r0.z, r0.w
    mad r0.z, -r0.z, cb7[7].x, l(1.000000)
    mul r0.w, r5.w, cb7[0].w
    mad r0.z, r0.w, cb7[4].x, r0.z
    add r1.xyz, r1.xyzx, -r4.xzwx
    mul r1.xyz, r1.xyzx, cb7[6].yyyy
    mul r1.xyz, r0.zzzz, r1.xyzx
    mad r3.xyz, r1.xyzx, v3.zzzz, r4.xzwx
  else
    mul r1.xyz, v3.wwww, l(0.062500, 1.000000, 16.000000, 0.000000)
    frc r1.xyz, r1.xyzx
    mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r1.xyz, r1.xyzx, v3.zzzz
    add r0.y, r0.y, cb7[2].x
    add r5.x, r0.y, v3.w
    mad r5.y, r0.y, cb7[3].y, v3.w
    mul r0.y, r5.x, cb7[3].y
    mul r5.z, r0.y, l(0.500000)
    add r0.yzw, r5.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
    frc r0.yzw, r0.yyzw
    mad r0.yzw, r0.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
    mul r4.xzw, |r0.yyzw|, |r0.yyzw|
    mad r0.yzw, -|r0.yyzw|, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, 3.000000, 3.000000, 3.000000)
    mad r0.yzw, r4.xxzw, r0.yyzw, l(0.000000, -0.500000, -0.500000, -0.500000)
    add r0.yzw, r0.yyzw, r0.yyzw
    mul r5.w, r0.w, r0.z
    lt r3.w, r5.w, l(0.000000)
    mov r5.y, -r5.w
    mov r5.xz, l(-1.000000,0,1.000000,0)
    movc r4.xz, r3.wwww, r5.xxyx, r5.zzwz
    mad r0.z, -r0.z, r0.w, r4.x
    mad r0.z, r4.z, r0.z, r5.w
    add r0.w, -r0.z, r4.x
    mad r0.z, r4.z, r0.w, r0.z
    mul r0.z, r0.z, cb7[3].x
    add r0.w, -cb7[0].w, l(1.000000)
    add r3.w, -cb7[3].x, l(1.000000)
    mul r0.y, r0.y, r3.w
    mad r0.y, r0.z, r0.w, r0.y
    mul r0.yzw, r0.yyyy, r1.xxyz
    mad r3.xyz, r0.yzwy, cb7[2].yyyy, r3.xyzx
  endif
endif
dp3 r0.y, r3.xyzx, r3.xyzx
sqrt r0.y, r0.y
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb7[1].z
mad r0.z, -r0.z, l(0.250000), r3.y
max r0.z, r0.z, l(0.000000)
mul r0.z, r0.z, cb7[1].z
ne r0.w, r0.z, l(0.000000)
log r1.x, r0.z
mul r1.x, r1.x, cb7[1].w
exp r1.x, r1.x
movc r0.z, r0.w, r1.x, r0.z
add r1.x, cb7[1].x, cb6[r0.x + 3].x
mad r1.y, cb7[1].x, l(0.800000), cb6[r0.x + 3].y
add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
frc r1.xy, r1.xyxx
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r4.xz, |r1.xxyx|, |r1.xxyx|
mad r1.xy, -|r1.xyxx|, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
mad r1.xy, r4.xzxx, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
add r1.xy, r1.xyxx, r1.xyxx
mad r0.w, r1.y, r1.y, r1.x
div r1.x, cb7[6].x, cb7[1].z
mad r0.w, cb7[1].y, r0.w, r1.x
mul r0.z, r0.z, r0.w
mad r1.xz, r2.xxyx, r0.zzzz, r3.xxzx
mov r1.y, r3.y
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, r1.xyzx
mul r0.yzw, r0.yyyy, r1.xxyz
movc r0.yzw, r4.yyyy, r0.yyzw, r3.xxyz
mul r3.xyzw, r0.zzzz, cb6[r0.x + 1].xyzw
mad r3.xyzw, cb6[r0.x + 0].xyzw, r0.yyyy, r3.xyzw
mad r3.xyzw, cb6[r0.x + 2].xyzw, r0.wwww, r3.xyzw
add r4.xyzw, r3.xyzw, cb6[r0.x + 3].xyzw
mul r5.xyzw, r4.yyyy, cb4[18].xyzw
mad r5.xyzw, cb4[17].xyzw, r4.xxxx, r5.xyzw
mad r5.xyzw, cb4[19].xyzw, r4.zzzz, r5.xyzw
mad r4.xyzw, cb4[20].xyzw, r4.wwww, r5.xyzw
mad r0.yzw, cb6[r0.x + 3].xxyz, v0.wwww, r3.xxyz
mul r3.xyzw, r2.zzzz, cb6[r0.x + 1].xyzz
mad r1.xyzw, cb6[r0.x + 0].xyzz, r1.wwww, r3.xyzw
mad r1.xyzw, cb6[r0.x + 2].xyzz, r2.wwww, r1.xyzw
dp3 r2.x, r1.xywx, r1.xywx
rsq r2.x, r2.x
mul r1.xyzw, r1.xyzw, r2.xxxx
mul r2.xyz, v1.yyyy, cb6[r0.x + 1].yzxy
mad r2.xyz, cb6[r0.x + 0].yzxy, v1.xxxx, r2.xyzx
mad r2.xyz, cb6[r0.x + 2].yzxy, v1.zzzz, r2.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r2.xyz, r0.xxxx, r2.xyzx
mul r0.x, v1.w, cb3[9].w
mul r3.xyz, r1.wxyw, r2.xyzx
mad r3.xyz, r1.ywxy, r2.yzxy, -r3.xyzx
mul r3.xyz, r0.xxxx, r3.xyzx
mul r5.xyzw, r1.ywzx, r1.xyzw
dp4 r6.x, cb2[41].xyzw, r5.xyzw
dp4 r6.y, cb2[42].xyzw, r5.xyzw
dp4 r6.z, cb2[43].xyzw, r5.xyzw
mul r0.x, r1.y, r1.y
mad r0.x, r1.x, r1.x, -r0.x
mad o6.xyz, cb2[44].xyzx, r0.xxxx, r6.xyzx

// Relocated to here with asmtool.py
mov o0.xyzw, r4.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed db0e8e5f2fdceb73-vs.txt
ne r14.w, r4.w, l(1.0)
if_nz r14.w
  add r14.w, r4.w, -r14.y
  mad r4.x, r14.w, r14.x, r4.x
endif

mul r5.xz, r4.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
mul r0.x, r4.y, cb1[5].x
mul r5.w, r0.x, l(0.500000)
add o7.xy, r5.zzzz, r5.xwxx

// mov o0.xyzw, r4.xyzw // Relocated from here with asmtool.py

mov o1.x, r2.z
mov o1.y, r3.x
mov o1.z, r1.x
mov o1.w, r0.y
mov o2.x, r2.x
mov o2.y, r3.y
mov o2.z, r1.y
mov o2.w, r0.z
mov o3.x, r2.y
mov o3.y, r3.z
mov o3.z, r1.w
mov o3.w, r0.w
mov o4.w, cb0[6].w
mov o5.xy, v3.xyxx
mov o5.w, r4.z
mov o7.zw, r4.zzzw
mov o8.x, v8.x
ret
// Approximately 0 instruction slots used