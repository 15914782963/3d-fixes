// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed b26dd8ad8874b88b-vs.txt
// 3DMigoto: b26dd8ad8874b88b | Matched 2 variants of 2 shaders: Nature/SpeedTree, Nature/SpeedTreeEFT
//
// 1:    Unity headers extracted from Nature_SpeedTree
// 2:    Unity headers extracted from Nature_SpeedTreeEFT
// 1:    Shader "Nature/SpeedTree" {
// 2:    Shader "Nature/SpeedTreeEFT" {
//         CustomEditor "SpeedTreeMaterialInspector"
//         Fallback "Transparent/Cutout/VertexLit"
//         SubShader 2/2 {
//           LOD 400
//           Tags { "DisableBatching"="LodFading" "IGNOREPROJECTOR"="true" "QUEUE"="Geometry" "RenderType"="Opaque" }
//           Pass 7/8 {
//             Tags { "DisableBatching"="LodFading" "IGNOREPROJECTOR"="true" "LIGHTMODE"="SHADOWCASTER" "QUEUE"="Geometry" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//             Program "vp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
// 1: Unity 5.3 headers extracted from Nature_SpeedTree:
// 2: Unity 5.3 headers extracted from Nature_SpeedTreeEFT:
//      API d3d11
//      Shader model vs_4_0
//      undeciphered1: 201609010 60 0 0
//      undeciphered1a: 5
//      Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
//      undeciphered2: 1 0 4 0 0 0
//      undeciphered3: 95 6 0 0 1 2 3 4 4 5 6 7 2 1
//      ConstBuffer "UnityLighting" 752
//      Vector 0 [_WorldSpaceLightPos0]
//      ConstBuffer "UnityShadows" 416
//      Vector 80 [unity_LightShadowBias]
//      ConstBuffer "UnityPerDraw" 160
//      Vector 128 [unity_LODFade]
//      Matrix 0 [unity_ObjectToWorld]
//      Matrix 64 [unity_WorldToObject]
//      ConstBuffer "UnityPerFrame" 384
//      Matrix 208 [unity_MatrixInvV]
//      Matrix 272 [unity_MatrixVP]
//      BindCB "UnityLighting" 0
//      BindCB "UnityShadows" 1
//      BindCB "UnityPerDraw" 2
//      BindCB "UnityPerFrame" 3
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Mon Jul 15 00:16:58 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float
// NORMAL                   0   xyz         2     NONE   float   xyz
// TEXCOORD                 0   xyzw        3     NONE   float   xy
// TEXCOORD                 1   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   xyzw        5     NONE   float
// TEXCOORD                 3   xy          6     NONE   float   xy
// COLOR                    0   xyzw        7     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 1   xy          1     NONE   float   xy
//
vs_4_0
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[9], immediateIndexed
dcl_constantbuffer cb3[21], immediateIndexed
dcl_input v0.xyzw
dcl_input v2.xyz
dcl_input v3.xy
dcl_input v4.xyzw
dcl_input v6.xy
dcl_input v7.w
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_temps 6

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r5.xyzw, l(0, 0, 0, 0), t125.xyzw

mul r0.xyz, cb2[5].xyzx, cb3[15].yyyy
mad r0.xyz, cb2[4].xyzx, cb3[15].xxxx, r0.xyzx
mad r0.xyz, cb2[6].xyzx, cb3[15].zzzz, r0.xyzx
mad r0.xyz, cb2[7].xyzx, cb3[15].wwww, r0.xyzx
mul r1.xyz, cb2[5].xyzx, cb3[13].yyyy
mad r1.xyz, cb2[4].xyzx, cb3[13].xxxx, r1.xyzx
mad r1.xyz, cb2[6].xyzx, cb3[13].zzzz, r1.xyzx
mad r1.xyz, cb2[7].xyzx, cb3[13].wwww, r1.xyzx
mul r2.xyz, cb2[5].xyzx, cb3[14].yyyy
mad r2.xyz, cb2[4].xyzx, cb3[14].xxxx, r2.xyzx
mad r2.xyz, cb2[6].xyzx, cb3[14].zzzz, r2.xyzx
mad r2.xyz, cb2[7].xyzx, cb3[14].wwww, r2.xyzx
add r0.w, v4.w, l(-1.000000)
mad r0.w, cb2[8].x, r0.w, l(1.000000)
add r3.xyz, v0.xyzx, -v4.xyzx
mul r4.xyz, r0.wwww, r3.xyzx
mul r2.xyz, r2.xyzx, r4.yyyy
mad r1.xyz, r4.xxxx, r1.xyzx, r2.xyzx
mad r0.xyz, r4.zzzz, r0.xyzx, r1.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
sqrt r0.w, r0.w
dp3 r1.x, r0.xyzx, r0.xyzx
rsq r1.x, r1.x
mul r0.xyz, r0.xyzx, r1.xxxx
mul r0.xyz, r0.wwww, r0.xyzx
mov r1.x, v4.w
mov r1.yz, v6.xxyx
add r1.xyz, -r3.xyzx, r1.xyzx
mad r1.xyz, cb2[8].xxxx, r1.xyzx, r3.xyzx
eq r0.w, v7.w, l(0.000000)
movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
add r0.xyz, r0.xyzx, v4.xyzx
mul r1.xyzw, r0.yyyy, cb2[1].xyzw
mad r1.xyzw, cb2[0].xyzw, r0.xxxx, r1.xyzw
mad r0.xyzw, cb2[2].xyzw, r0.zzzz, r1.xyzw
mad r0.xyzw, cb2[3].xyzw, v0.wwww, r0.xyzw
mad r1.xyz, -r0.xyzx, cb0[0].wwww, cb0[0].xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
dp3 r2.x, v2.xyzx, cb2[4].xyzx
dp3 r2.y, v2.xyzx, cb2[5].xyzx
dp3 r2.z, v2.xyzx, cb2[6].xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
dp3 r1.x, r2.xyzx, r1.xyzx
mad r1.x, -r1.x, r1.x, l(1.000000)
sqrt r1.x, r1.x
mul r1.x, r1.x, cb1[5].z
mad r1.xyz, -r2.xyzx, r1.xxxx, r0.xyzx
ne r1.w, cb1[5].z, l(0.000000)
movc r0.xyz, r1.wwww, r1.xyzx, r0.xyzx
mul r1.xyzw, r0.yyyy, cb3[18].xyzw
mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
mad r0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw

// Relocated to here with asmtool.py
mov o0.xyw, r0.xyxw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed b26dd8ad8874b88b-vs.txt
ne r5.w, r0.w, l(1.0)
if_nz r5.w
  add r5.w, r0.w, -r5.y
  mad r0.x, r5.w, r5.x, r0.x
endif

div r1.x, cb1[5].x, r0.w
min r1.x, r1.x, l(0.000000)
max r1.x, r1.x, l(-1.000000)
add r0.z, r0.z, r1.x
min r1.x, r0.w, r0.z

// mov o0.xyw, r0.xyxw // Relocated from here with asmtool.py

add r0.x, -r0.z, r1.x
mad o0.z, cb1[5].y, r0.x, r0.z
mov o1.xy, v3.xyxx
ret
// Approximately 0 instruction slots used