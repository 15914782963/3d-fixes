// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed ad837326ebe21134-ps.txt
// 3DMigoto: ad837326ebe21134 | Matched 3 variants of 1 shaders: MK4/Rock
//
//       Unity headers extracted from MK4_Rock
//       Shader "MK4/Rock" {
//         CustomEditor "ShaderForgeMaterialInspector"
//         Fallback "Diffuse"
//         SubShader 1/1 {
//           Tags { "RenderType"="Opaque" }
//           Pass 2/4 {
//             Name "FORWARD"
//             Tags { "LIGHTMODE"="FORWARDBASE" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//             Program "fp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from MK4_Rock:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201609010 247 10 6
//      undeciphered1a: 13
// 2:   Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "FOG_EXP2" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
// 4:   Keywords { "DIRECTIONAL" "FOG_EXP2" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
// 1:   Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
//      undeciphered2: 1 10 6 9 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 288
//      Vector 32 [_LightColor0]
//      Vector 64 [_Color]
//      Float 80 [_Metallic]
//      Float 84 [_Gloss]
//      Vector 96 [_Aldebo_ST]
//      Vector 112 [_MaskRGBA_ST]
//      Vector 128 [_Normalmap_ST]
//      Vector 144 [_MaskBump_ST]
//      Vector 160 [_Detail_ST]
//      Vector 176 [_DetailBump_ST]
//      Float 192 [_Detailscale]
//      Vector 208 [_AO_ST]
//      Vector 224 [_MaskColor]
//      Float 240 [_DetailBumpInt]
//      Float 244 [_DetailDiffInt]
//      Float 248 [_Maskscale]
//      Float 252 [_MaskPower]
//      Float 256 [_MaskBumpInt]
//      Float 260 [_AOPower]
//      Float 264 [_DetailBlendDodge]
//      Float 268 [_SmoothBlend]
//      Float 272 [_NormalmapInt]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      Vector 80 [_ProjectionParams]
//      ConstBuffer "UnityLighting" 752
//      Vector 0 [_WorldSpaceLightPos0]
//      Vector 608 [unity_SHAr]
//      Vector 624 [unity_SHAg]
//      Vector 640 [unity_SHAb]
//      ConstBuffer "UnityFog" 32
//      Vector 0 [unity_FogColor]
//      Vector 16 [unity_FogParams]
//      ConstBuffer "UnityReflectionProbes" 128
//      Vector 0 [unity_SpecCube0_BoxMax]
//      Vector 16 [unity_SpecCube0_BoxMin]
//      Vector 32 [unity_SpecCube0_ProbePosition]
//      Vector 48 [unity_SpecCube0_HDR]
//      Vector 64 [unity_SpecCube1_BoxMax]
//      Vector 80 [unity_SpecCube1_BoxMin]
//      Vector 96 [unity_SpecCube1_ProbePosition]
//      Vector 112 [unity_SpecCube1_HDR]
//      ConstBuffer "UnityProbeVolume" 112
//      Vector 0 [unity_ProbeVolumeParams]
//      Vector 80 [unity_ProbeVolumeSizeInv] 3
//      Vector 96 [unity_ProbeVolumeMin] 3
//      Matrix 16 [unity_ProbeVolumeWorldToObject]
//      SetTexture 0 [_Normalmap] 2D 4
//      SetTexture 1 [_DetailBump] 2D 7
//      SetTexture 2 [_MaskBump] 2D 5
//      SetTexture 3 [_AO] 2D 8
//      SetTexture 4 [_Detail] 2D 6
//      SetTexture 5 [_Aldebo] 2D 2
//      SetTexture 6 [_MaskRGBA] 2D 3
//      SetTexture 7 [unity_SpecCube0] CUBE 0
//      SetTexture 8 [unity_SpecCube1] CUBE -1
//      SetTexture 9 [unity_ProbeVolumeSH] 3D 1
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityLighting" 2
//      BindCB "UnityFog" 3
//      BindCB "UnityReflectionProbes" 4
//      BindCB "UnityProbeVolume" 5
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Mon Jul 15 00:16:17 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float
// TEXCOORD                 2   xy          2     NONE   float
// TEXCOORD                 9     z         2     NONE   float     z
// TEXCOORD                 3   xyzw        3     NONE   float   xyz
// TEXCOORD                 4   xyz         4     NONE   float   xyz
// TEXCOORD                 5   xyz         5     NONE   float   xyz
// TEXCOORD                 6   xyz         6     NONE   float   xyz
// TEXCOORD                10   xyzw        7     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[18], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[41], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texturecube (float,float,float,float) t7
dcl_resource_texturecube (float,float,float,float) t8
dcl_resource_texture3d (float,float,float,float) t9
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.z
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_output o0.xyzw
dcl_temps 15
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r13.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed ad837326ebe21134-ps.txt

mul r13.w, -r13.x, r13.y
mad r14.xyz, -r13.wwww, cb10[0].xyzw, cb1[4].xyzw

dp3 r0.x, v4.xyzx, v4.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v4.xyzx
add r1.xyz, -v3.xyzx, r14.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r1.xyzx
mad r3.xy, v1.xyxx, cb0[8].xyxx, cb0[8].zwzz
sample r3.xyzw, r3.xyxx, t0.xyzw, s4
add r4.xy, r3.wyww, r3.wyww
mad r3.xy, r3.wyww, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r3.xyxx, r3.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r4.z, r1.w
add r3.xyz, r4.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r4.xy, v1.xyxx, cb0[12].xxxx
mad r4.zw, r4.xxxy, cb0[11].xxxy, cb0[11].zzzw
sample r5.xyzw, r4.zwzz, t1.xyzw, s7
add r6.xy, r5.wyww, r5.wyww
mad r4.zw, r5.wwwy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
dp2 r1.w, r4.zwzz, r4.zwzz
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r6.z, r1.w
mad r3.xyz, cb0[17].xxxx, r3.xyzx, l(0.000000, 0.000000, 2.000000, 0.000000)
add r5.xyz, r6.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r5.xyz, cb0[15].xxxx, r5.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
dp3 r1.w, r5.xyzx, r5.xyzx
rsq r1.w, r1.w
mul r5.xyz, r1.wwww, r5.xyzx
mul r6.xyz, r5.xyzx, l(-1.000000, -1.000000, 1.000000, 0.000000)
dp3 r1.w, r3.xyzx, r6.xyzx
mul r6.xyz, r1.wwww, r3.xyzx
div r6.xyz, r6.xyzx, r3.zzzz
mad r5.xyz, -r5.xyzx, l(-1.000000, -1.000000, 1.000000, 0.000000), r6.xyzx
mul r4.zw, v1.xxxy, cb0[15].zzzz
mad r6.xy, r4.zwzz, cb0[9].xyxx, cb0[9].zwzz
sample r6.xyzw, r6.xyxx, t2.xyzw, s5
add r7.xy, r6.wyww, r6.wyww
mad r6.xy, r6.wyww, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r6.xyxx, r6.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r7.z, r1.w
add r6.xyz, r7.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r6.xyz, cb0[16].xxxx, r6.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mul r7.xyz, r6.xyzx, l(-1.000000, -1.000000, 1.000000, 0.000000)
dp3 r1.w, r3.xyzx, r7.xyzx
mul r3.xyw, r1.wwww, r3.xyxz
div r3.xyz, r3.xywx, r3.zzzz
mad r3.xyz, -r6.xyzx, l(-1.000000, -1.000000, 1.000000, 0.000000), r3.xyzx
mov_sat r1.w, r0.y
round_ne r1.w, r1.w
add r3.xyz, -r5.xyzx, r3.xyzx
mad r3.xyz, r1.wwww, r3.xyzx, r5.xyzx
mul r5.xyz, r3.yyyy, v6.xyzx
mad r3.xyw, r3.xxxx, v5.xyxz, r5.xyxz
mad r0.xyz, r3.zzzz, r0.xyzx, r3.xywx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r3.xyz, r0.xyzx, r1.wwww
dp3 r0.x, cb2[0].xyzx, cb2[0].xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, cb2[0].xyzx
mad r1.xyz, r1.xyzx, r0.wwww, r0.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mad r0.w, cb0[5].y, l(10.000000), l(1.000000)
exp r0.w, r0.w
add r1.w, -cb0[5].y, l(1.000000)
dp3 r2.w, -r2.xyzx, r3.xyzx
add r2.w, r2.w, r2.w
mad r5.xyz, r3.xyzx, -r2.wwww, -r2.xyzx
eq r2.w, cb5[0].x, l(1.000000)
if_nz r2.w
  eq r2.w, cb5[0].y, l(1.000000)
  mul r6.xyz, v3.yyyy, cb5[2].xyzx
  mad r6.xyz, cb5[1].xyzx, v3.xxxx, r6.xyzx
  mad r6.xyz, cb5[3].xyzx, v3.zzzz, r6.xyzx
  add r6.xyz, r6.xyzx, cb5[4].xyzx
  movc r6.xyz, r2.wwww, r6.xyzx, v3.xyzx
  add r6.xyz, r6.xyzx, -cb5[6].xyzx
  mul r6.yzw, r6.xxyz, cb5[5].xxyz
  mul r2.w, r6.y, l(0.250000)
  mul r5.w, cb5[0].z, l(0.500000)
  mad r6.y, -cb5[0].z, l(0.500000), l(0.250000)
  max r2.w, r2.w, r5.w
  min r6.x, r6.y, r2.w
  sample r7.xyzw, r6.xzwx, t9.xyzw, s1
  add r8.xyz, r6.xzwx, l(0.250000, 0.000000, 0.000000, 0.000000)
  sample r8.xyzw, r8.xyzx, t9.xyzw, s1
  add r6.xyz, r6.xzwx, l(0.500000, 0.000000, 0.000000, 0.000000)
  sample r6.xyzw, r6.xyzx, t9.xyzw, s1
  mov r3.w, l(1.000000)
  dp4 r7.x, r7.xyzw, r3.xyzw
  dp4 r7.y, r8.xyzw, r3.xyzw
  dp4 r7.z, r6.xyzw, r3.xyzw
else
  mov r3.w, l(1.000000)
  dp4 r7.x, cb2[38].xyzw, r3.xyzw
  dp4 r7.y, cb2[39].xyzw, r3.xyzw
  dp4 r7.z, cb2[40].xyzw, r3.xyzw
endif
add r6.xyz, r7.xyzx, v7.xyzx
max r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
log r6.xyz, r6.xyzx
mul r6.xyz, r6.xyzx, l(0.416666657, 0.416666657, 0.416666657, 0.000000)
exp r6.xyz, r6.xyzx
mad r6.xyz, r6.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
max r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r2.w, l(0.000000), cb4[2].w
if_nz r2.w
  dp3 r2.w, r5.xyzx, r5.xyzx
  rsq r2.w, r2.w
  mul r7.xyz, r2.wwww, r5.xyzx
  add r8.xyz, -v3.xyzx, cb4[0].xyzx
  div r8.xyz, r8.xyzx, r7.xyzx
  add r9.xyz, -v3.xyzx, cb4[1].xyzx
  div r9.xyz, r9.xyzx, r7.xyzx
  lt r10.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r7.xyzx
  movc r8.xyz, r10.xyzx, r8.xyzx, r9.xyzx
  min r2.w, r8.y, r8.x
  min r2.w, r8.z, r2.w
  add r8.xyz, v3.xyzx, -cb4[2].xyzx
  mad r7.xyz, r7.xyzx, r2.wwww, r8.xyzx
else
  mov r7.xyz, r5.xyzx
endif
mul r2.w, r1.w, l(0.797884583)
mad r8.xy, -r1.wwww, l(0.700000, 0.797884583, 0.000000, 0.000000), l(1.700000, 1.000000, 0.000000, 0.000000)
mul r3.w, r1.w, r8.x
mul r3.w, r3.w, l(6.000000)
sample_l r7.xyzw, r7.xyzx, t7.xyzw, s0, r3.w
add r5.w, r7.w, l(-1.000000)
mad r5.w, cb4[3].w, r5.w, l(1.000000)
mul r5.w, r5.w, cb4[3].x
mul r8.xzw, r7.xxyz, r5.wwww
lt r6.w, cb4[1].w, l(0.999990)
if_nz r6.w
  lt r6.w, l(0.000000), cb4[6].w
  if_nz r6.w
    dp3 r6.w, r5.xyzx, r5.xyzx
    rsq r6.w, r6.w
    mul r9.xyz, r5.xyzx, r6.wwww
    add r10.xyz, -v3.xyzx, cb4[4].xyzx
    div r10.xyz, r10.xyzx, r9.xyzx
    add r11.xyz, -v3.xyzx, cb4[5].xyzx
    div r11.xyz, r11.xyzx, r9.xyzx
    lt r12.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r9.xyzx
    movc r10.xyz, r12.xyzx, r10.xyzx, r11.xyzx
    min r6.w, r10.y, r10.x
    min r6.w, r10.z, r6.w
    add r10.xyz, v3.xyzx, -cb4[6].xyzx
    mad r5.xyz, r9.xyzx, r6.wwww, r10.xyzx
  endif
  sample_l r9.xyzw, r5.xyzx, t8.xyzw, s0, r3.w
  add r3.w, r9.w, l(-1.000000)
  mad r3.w, cb4[7].w, r3.w, l(1.000000)
  mul r3.w, r3.w, cb4[7].x
  mul r5.xyz, r9.xyzx, r3.wwww
  mad r7.xyz, r5.wwww, r7.xyzx, -r5.xyzx
  mad r8.xzw, cb4[1].wwww, r7.xxyz, r5.xxyz
endif
dp3 r3.w, r3.xyzx, r0.xyzx
max r3.w, r3.w, l(0.000000)
mad r5.xy, v1.xyxx, cb0[13].xyxx, cb0[13].zwzz
sample r5.xyzw, r5.xyxx, t3.xyzw, s8
add r5.y, -cb0[16].y, l(1.000000)
add r5.z, -r5.x, l(1.000000)
mad r5.x, r5.y, r5.z, r5.x
dp3 r0.x, r0.xyzx, r1.xyzx
mad r0.yz, r4.xxyx, cb0[10].xxyx, cb0[10].zzwz
sample r7.xyzw, r0.yzyy, t4.xyzw, s6
mad r0.yz, v1.xxyx, cb0[6].xxyx, cb0[6].zzwz
sample r9.xyzw, r0.yzyy, t5.xyzw, s2
mad r0.yz, r4.zzwz, cb0[7].xxyx, cb0[7].zzwz
sample r4.xyzw, r0.yzyy, t6.xyzw, s3
mov_sat r0.y, r3.y
mul r0.z, r0.y, cb0[15].w
lt r5.yzw, l(0.000000, 0.500000, 0.500000, 0.500000), r9.xxyz
add r10.xyz, r9.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mad r10.xyz, -r10.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
add r7.xyz, r7.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mad r7.xyz, cb0[15].yyyy, r7.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
add r11.xyz, -r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r10.xyz, -r10.xyzx, r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r12.xyz, r9.xyzx, r7.xyzx
add r12.xyz, r12.xyzx, r12.xyzx
movc_sat r5.yzw, r5.yyzw, r10.xxyz, r12.xxyz
lt r10.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), r7.xyzx
add r11.xyz, r11.xyzx, r11.xyzx
div r11.xyz, r9.xyzx, r11.xyzx
add r9.xyz, -r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r9.xyz, r9.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
div r7.xyz, r9.xyzx, r7.xyzx
add r7.xyz, -r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
movc_sat r7.xyz, r10.xyzx, r11.xyzx, r7.xyzx
add r7.xyz, -r5.yzwy, r7.xyzx
mad r5.yzw, cb0[16].zzzz, r7.xxyz, r5.yyzw
round_ne r0.z, r0.z
mad r0.y, cb0[15].w, r0.y, -r0.z
mad r0.y, cb0[16].w, r0.y, r0.z
mul r0.y, r0.y, r4.w
mad r4.xyz, r4.xyzx, cb0[14].xyzx, -r5.yzwy
mad r4.xyz, r0.yyyy, r4.xyzx, r5.yzwy
mul r5.yzw, r4.xxyz, cb0[4].xxyz
mad r4.xyz, r4.xyzx, cb0[4].xyzx, l(-0.220916301, -0.220916301, -0.220916301, 0.000000)
mad r4.xyz, cb0[5].xxxx, r4.xyzx, l(0.220916301, 0.220916301, 0.220916301, 0.000000)
mad r0.y, -cb0[5].x, l(0.779083729), l(0.779083729)
mul r5.yzw, r0.yyyy, r5.yyzw
dp3 r0.z, r3.xyzx, r2.xyzx
max r0.xz, r0.xxzx, l(0.000000, 0.000000, 0.000000, 0.000000)
dp3 r1.x, r3.xyzx, r1.xyzx
mad r1.y, r3.w, r8.y, r2.w
mad r1.z, r0.z, r8.y, r2.w
mad r1.y, r1.y, r1.z, l(0.000010)
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mul r1.y, r1.y, l(0.250000)
mul r1.z, r1.w, r1.w
mul r1.z, r1.z, r1.z
max r1.xz, r1.xxzx, l(0.000000, 0.000000, 0.000100, 0.000000)
div r1.z, l(2.000000), r1.z
add r1.z, r1.z, l(-2.000000)
max r1.z, r1.z, l(0.000100)
add r2.x, r1.z, l(2.000000)
mul r2.x, r2.x, l(0.159154937)
log r1.x, r1.x
mul r1.z, r1.x, r1.z
exp r1.z, r1.z
mul r1.z, r2.x, r1.z
mul r1.y, r1.y, r3.w
mul r1.y, r1.z, r1.y
mul r1.y, r1.y, l(0.616850257)
max r1.y, r1.y, l(0.000000)
mul r0.w, r0.w, r1.x
exp r0.w, r0.w
mul r0.w, r1.y, r0.w
mul r1.xyz, r0.wwww, cb0[2].xyzx
add r0.yw, -r0.yyyx, l(0.000000, 1.000000, 0.000000, 1.000000)
mul r2.x, r0.w, r0.w
mul r2.x, r2.x, r2.x
mul r0.w, r0.w, r2.x
add r2.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r2.xyz, r2.xyzx, r0.wwww, r4.xyzx
add_sat r0.y, r0.y, cb0[5].y
mul r3.xyz, r5.xxxx, r8.xzwx
add r0.zw, -r0.zzzz, l(0.000000, 0.000000, 1.000000, 1.000010)
mul r7.xy, r0.zwzz, r0.zwzz
mul r7.xy, r7.xyxx, r7.xyxx
mul r0.zw, r0.zzzw, r7.xxxy
add r7.xyz, -r4.xyzx, r0.yyyy
mad r4.xyz, r0.zzzz, r7.xyzx, r4.xyzx
mul r3.xyz, r3.xyzx, r4.xyzx
mad r1.xyz, r1.xyzx, r2.xyzx, r3.xyzx
add r0.y, r0.x, r0.x
mul r0.x, r0.x, r0.y
mad r0.x, r0.x, r1.w, l(-0.500000)
add r0.y, -r3.w, l(1.000010)
mul r0.z, r0.y, r0.y
mul r0.z, r0.z, r0.z
mul r0.y, r0.z, r0.y
mad r0.y, r0.x, r0.y, l(1.000000)
mad r0.x, r0.x, r0.w, l(1.000000)
mul r0.x, r0.x, r0.y
mul r0.x, r3.w, r0.x
mul r0.yzw, r5.xxxx, r6.xxyz
mad r0.xyz, r0.xxxx, cb0[2].xyzx, r0.yzwy
mad r0.xyz, r0.xyzx, r5.yzwy, r1.xyzx
div r0.w, v2.z, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mul r0.w, r0.w, cb3[1].x
mul r0.w, r0.w, -r0.w
exp r0.w, r0.w
add r0.xyz, r0.xyzx, -cb3[0].xyzx
mad o0.xyz, r0.wwww, r0.xyzx, cb3[0].xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used