// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 95ff00bc2034aaba-vs.txt
// 3DMigoto: 95ff00bc2034aaba | Matched 2 variants of 1 shaders: Nature/SpeedTreeEFT
//
//       Unity headers extracted from Nature_SpeedTreeEFT
//       Shader "Nature/SpeedTreeEFT" {
//         CustomEditor "SpeedTreeMaterialInspector"
//         Fallback "Transparent/Cutout/VertexLit"
//         SubShader 1/2 {
//           LOD 400
//           Tags { "DisableBatching"="LodFading" "IGNOREPROJECTOR"="true" "QUEUE"="Geometry" "RenderType"="Opaque" }
//           Pass 7/8 {
//             Tags { "DisableBatching"="LodFading" "IGNOREPROJECTOR"="true" "LIGHTMODE"="SHADOWCASTER" "QUEUE"="Geometry" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//             Program "vp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Nature_SpeedTreeEFT:
//      API d3d11
//      Shader model vs_4_0
//      undeciphered1: 201609010 169 0 7
//      undeciphered1a: 5
// 1:   Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "INSTANCING_ON" "GEOM_TYPE_BRANCH" }
// 2:   Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "INSTANCING_ON" "GEOM_TYPE_BRANCH_DETAIL" }
//      undeciphered2: 1 0 8 0 0 0
//      undeciphered3: 11 3 0 0 1 2 3 4
//      ConstBuffer "$Globals" 80
//      Float 32 [_WindQuality]
//      Float 36 [_WindEnabled]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 80 [_ProjectionParams]
//      Vector 96 [_ScreenParams]
//      ConstBuffer "UnityLighting" 752
//      Vector 0 [_WorldSpaceLightPos0]
//      ConstBuffer "UnityShadows" 416
//      Vector 80 [unity_LightShadowBias]
//      ConstBuffer "UnityPerFrame" 384
//      Matrix 272 [unity_MatrixVP]
//      ConstBuffer "UnityDrawCallInfo" 16
//      ScalarInt 0 [unity_BaseInstanceID]
//      ConstBuffer "UnityInstancing_PerDraw0" 6400
//      Matrix 0 [unity_ObjectToWorldArray0]
//      Matrix 64 [unity_ObjectToWorldArray1]
//      Matrix 128 [unity_ObjectToWorldArray2]
//      Matrix 192 [unity_ObjectToWorldArray3]
//      Matrix 256 [unity_ObjectToWorldArray4]
//      Matrix 320 [unity_ObjectToWorldArray5]
//      Matrix 384 [unity_ObjectToWorldArray6]
//      Matrix 448 [unity_ObjectToWorldArray7]
//      Matrix 512 [unity_ObjectToWorldArray8]
//      Matrix 576 [unity_ObjectToWorldArray9]
//      Matrix 640 [unity_ObjectToWorldArray10]
//      Matrix 704 [unity_ObjectToWorldArray11]
//      Matrix 768 [unity_ObjectToWorldArray12]
//      Matrix 832 [unity_ObjectToWorldArray13]
//      Matrix 896 [unity_ObjectToWorldArray14]
//      Matrix 960 [unity_ObjectToWorldArray15]
//      Matrix 1024 [unity_ObjectToWorldArray16]
//      Matrix 1088 [unity_ObjectToWorldArray17]
//      Matrix 1152 [unity_ObjectToWorldArray18]
//      Matrix 1216 [unity_ObjectToWorldArray19]
//      Matrix 1280 [unity_ObjectToWorldArray20]
//      Matrix 1344 [unity_ObjectToWorldArray21]
//      Matrix 1408 [unity_ObjectToWorldArray22]
//      Matrix 1472 [unity_ObjectToWorldArray23]
//      Matrix 1536 [unity_ObjectToWorldArray24]
//      Matrix 1600 [unity_ObjectToWorldArray25]
//      Matrix 1664 [unity_ObjectToWorldArray26]
//      Matrix 1728 [unity_ObjectToWorldArray27]
//      Matrix 1792 [unity_ObjectToWorldArray28]
//      Matrix 1856 [unity_ObjectToWorldArray29]
//      Matrix 1920 [unity_ObjectToWorldArray30]
//      Matrix 1984 [unity_ObjectToWorldArray31]
//      Matrix 2048 [unity_ObjectToWorldArray32]
//      Matrix 2112 [unity_ObjectToWorldArray33]
//      Matrix 2176 [unity_ObjectToWorldArray34]
//      Matrix 2240 [unity_ObjectToWorldArray35]
//      Matrix 2304 [unity_ObjectToWorldArray36]
//      Matrix 2368 [unity_ObjectToWorldArray37]
//      Matrix 2432 [unity_ObjectToWorldArray38]
//      Matrix 2496 [unity_ObjectToWorldArray39]
//      Matrix 2560 [unity_ObjectToWorldArray40]
//      Matrix 2624 [unity_ObjectToWorldArray41]
//      Matrix 2688 [unity_ObjectToWorldArray42]
//      Matrix 2752 [unity_ObjectToWorldArray43]
//      Matrix 2816 [unity_ObjectToWorldArray44]
//      Matrix 2880 [unity_ObjectToWorldArray45]
//      Matrix 2944 [unity_ObjectToWorldArray46]
//      Matrix 3008 [unity_ObjectToWorldArray47]
//      Matrix 3072 [unity_ObjectToWorldArray48]
//      Matrix 3136 [unity_ObjectToWorldArray49]
//      ConstBuffer "SpeedTreeWind" 256
//      Vector 0 [_ST_WindVector]
//      Vector 16 [_ST_WindGlobal]
//      Vector 32 [_ST_WindBranch]
//      Vector 48 [_ST_WindBranchTwitch]
//      Vector 64 [_ST_WindBranchWhip]
//      Vector 80 [_ST_WindBranchAnchor]
//      Vector 96 [_ST_WindBranchAdherences]
//      Vector 112 [_ST_WindTurbulences]
//      Vector 240 [_ST_WindAnimation]
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityLighting" 2
//      BindCB "UnityShadows" 3
//      BindCB "UnityPerFrame" 4
//      BindCB "UnityDrawCallInfo" 5
//      BindCB "UnityInstancing_PerDraw0" 6
//      BindCB "SpeedTreeWind" 7
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Mon Jul 15 00:13:06 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float
// NORMAL                   0   xyz         2     NONE   float   xyz
// TEXCOORD                 0   xyzw        3     NONE   float     zw
// TEXCOORD                 1   xyzw        4     NONE   float
// TEXCOORD                 2   xyzw        5     NONE   float
// TEXCOORD                 3   xy          6     NONE   float
// COLOR                    0   xyzw        7     NONE   float
// SV_InstanceID            0   x           8   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 2   xyz         1     NONE   float   xyz
// SV_InstanceID            0   x           2     NONE    uint   x
//
vs_4_0
dcl_constantbuffer cb0[3], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[1], immediateIndexed
dcl_constantbuffer cb3[6], immediateIndexed
dcl_constantbuffer cb4[21], immediateIndexed
dcl_constantbuffer cb5[1], immediateIndexed
dcl_constantbuffer cb6[200], dynamicIndexed
dcl_constantbuffer cb7[16], immediateIndexed
dcl_input v0.xyzw
dcl_input v2.xyz
dcl_input v3.zw
dcl_input_sgv v8.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.x
dcl_temps 6

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r5.xyzw, l(0, 0, 0, 0), t125.xyzw

iadd r0.x, v8.x, cb5[0].x
mul r0.y, cb0[2].y, cb0[2].x
ge r0.z, l(0.000000), r0.y
if_nz r0.z
  mov r1.xyz, l(0,0,0,0)
  mov r0.zw, l(0,0,0,0)
else
  ishl r1.w, r0.x, l(2)
  dp3 r2.x, cb7[0].xyzx, cb6[r1.w + 0].xyzx
  dp3 r2.y, cb7[0].xyzx, cb6[r1.w + 1].xyzx
  dp3 r2.z, cb7[0].xyzx, cb6[r1.w + 2].xyzx
  dp3 r2.y, r2.xyzx, r2.xyzx
  rsq r2.y, r2.y
  mul r0.zw, r2.yyyy, r2.xxxz
  dp3 r2.x, cb7[5].xyzx, cb6[r1.w + 0].xyzx
  dp3 r2.y, cb7[5].xyzx, cb6[r1.w + 1].xyzx
  dp3 r2.z, cb7[5].xyzx, cb6[r1.w + 2].xyzx
  dp3 r1.w, r2.xyzx, r2.xyzx
  rsq r1.w, r1.w
  mul r2.xyz, r1.wwww, r2.xyzx
  mul r1.xyz, r2.xyzx, cb7[5].wwww
endif
ishl r0.x, r0.x, l(2)
ge r1.w, r0.y, l(3.000000)
if_nz r1.w
  eq r1.w, r0.y, l(5.000000)
  if_nz r1.w
    mul r2.xyz, v3.wwww, l(0.062500, 1.000000, 16.000000, 0.000000)
    frc r2.xyz, r2.xyzx
    mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r2.xyz, r2.xyzx, v3.zzzz
    add r1.w, cb6[r0.x + 3].y, cb6[r0.x + 3].x
    add r1.w, r1.w, cb7[2].x
    add r3.x, r1.w, v3.w
    mad r3.y, r1.w, cb7[3].y, v3.w
    mul r2.w, r3.x, cb7[3].y
    mul r3.z, r2.w, l(0.500000)
    add r3.w, r3.x, -v3.z
    add r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 1.500000)
    frc r3.xyzw, r3.xyzw
    mad r3.xyzw, r3.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
    mul r4.xyzw, |r3.xyzw|, |r3.xyzw|
    mad r3.xyzw, -|r3.xyzw|, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
    mad r3.xyzw, r4.xyzw, r3.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
    add r3.xyzw, r3.xyzw, r3.xyzw
    mul r4.w, r3.z, r3.y
    lt r2.w, r4.w, l(0.000000)
    mov r4.y, -r4.w
    mov r4.xz, l(-1.000000,0,1.000000,0)
    movc r4.xy, r2.wwww, r4.xyxx, r4.zwzz
    mad r2.w, -r3.y, r3.z, r4.x
    mad r2.w, r4.y, r2.w, r4.w
    add r3.y, -r2.w, r4.x
    mad r2.w, r4.y, r3.y, r2.w
    mul r2.w, r2.w, cb7[3].x
    add r3.y, -cb7[0].w, l(1.000000)
    add r3.z, -cb7[3].x, l(1.000000)
    mul r3.x, r3.z, r3.x
    mad r2.w, r2.w, r3.y, r3.x
    mad r3.x, r3.w, cb7[4].x, l(1.000000)
    mul r2.w, r2.w, r3.x
    mul r2.xyz, r2.wwww, r2.xyzx
    mad r2.xyz, r2.xyzx, cb7[2].yyyy, v0.xyzx
    mad r3.x, r1.w, l(0.100000), v3.w
    mul r1.w, cb7[7].x, cb7[15].x
    mad r3.y, r1.w, l(0.100000), v3.w
    add r3.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
    frc r3.xy, r3.xyxx
    mad r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
    mul r4.xy, |r3.xyxx|, |r3.xyxx|
    mad r3.xy, -|r3.xyxx|, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
    mad r3.xy, r4.xyxx, r3.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
    add r3.xy, r3.xyxx, r3.xyxx
    mul r3.xy, r3.xyxx, r3.xyxx
    mul r1.w, r3.x, r3.y
    mad r1.w, -r1.w, cb7[7].x, l(1.000000)
    mul r2.w, r3.w, cb7[0].w
    mad r1.w, r2.w, cb7[4].x, r1.w
    add r1.xyz, r1.xyzx, -r2.xyzx
    mul r1.xyz, r1.xyzx, cb7[6].yyyy
    mul r1.xyz, r1.wwww, r1.xyzx
    mad r1.xyz, r1.xyzx, v3.zzzz, r2.xyzx
  else
    mul r2.xyz, v3.wwww, l(0.062500, 1.000000, 16.000000, 0.000000)
    frc r2.xyz, r2.xyzx
    mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r2.xyz, r2.xyzx, v3.zzzz
    add r1.w, cb6[r0.x + 3].y, cb6[r0.x + 3].x
    add r1.w, r1.w, cb7[2].x
    add r3.x, r1.w, v3.w
    mad r3.y, r1.w, cb7[3].y, v3.w
    mul r1.w, r3.x, cb7[3].y
    mul r3.z, r1.w, l(0.500000)
    add r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    frc r3.xyz, r3.xyzx
    mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r4.xyz, |r3.xyzx|, |r3.xyzx|
    mad r3.xyz, -|r3.xyzx|, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
    mad r3.xyz, r4.xyzx, r3.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    add r3.xyz, r3.xyzx, r3.xyzx
    mul r4.w, r3.z, r3.y
    lt r1.w, r4.w, l(0.000000)
    mov r4.y, -r4.w
    mov r4.xz, l(-1.000000,0,1.000000,0)
    movc r4.xy, r1.wwww, r4.xyxx, r4.zwzz
    mad r1.w, -r3.y, r3.z, r4.x
    mad r1.w, r4.y, r1.w, r4.w
    add r2.w, -r1.w, r4.x
    mad r1.w, r4.y, r2.w, r1.w
    mul r1.w, r1.w, cb7[3].x
    add r2.w, -cb7[0].w, l(1.000000)
    add r3.y, -cb7[3].x, l(1.000000)
    mul r3.x, r3.y, r3.x
    mad r1.w, r1.w, r2.w, r3.x
    mul r2.xyz, r1.wwww, r2.xyzx
    mad r1.xyz, r2.xyzx, cb7[2].yyyy, v0.xyzx
  endif
else
  mov r1.xyz, v0.xyzx
endif
lt r0.y, l(0.000000), r0.y
dp3 r1.w, r1.xyzx, r1.xyzx
sqrt r1.w, r1.w
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb7[1].z
mad r2.x, -r2.x, l(0.250000), r1.y
max r2.x, r2.x, l(0.000000)
mul r2.x, r2.x, cb7[1].z
ne r2.y, r2.x, l(0.000000)
log r2.z, r2.x
mul r2.z, r2.z, cb7[1].w
exp r2.z, r2.z
movc r2.x, r2.y, r2.z, r2.x
add r3.x, cb7[1].x, cb6[r0.x + 3].x
mad r3.y, cb7[1].x, l(0.800000), cb6[r0.x + 3].y
add r2.yz, r3.xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
frc r2.yz, r2.yyzy
mad r2.yz, r2.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
mul r3.xy, |r2.yzyy|, |r2.yzyy|
mad r2.yz, -|r2.yyzy|, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
mad r2.yz, r3.xxyx, r2.yyzy, l(0.000000, -0.500000, -0.500000, 0.000000)
add r2.yz, r2.yyzy, r2.yyzy
mad r2.y, r2.z, r2.z, r2.y
div r2.z, cb7[6].x, cb7[1].z
mad r2.y, cb7[1].y, r2.y, r2.z
mul r2.x, r2.x, r2.y
mad r2.xz, r0.zzwz, r2.xxxx, r1.xxzx
mov r2.y, r1.y
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r2.xyzx
mul r2.xyz, r1.wwww, r2.xyzx
movc r0.yzw, r0.yyyy, r2.xxyz, r1.xxyz
mul r1.xyzw, r0.zzzz, cb6[r0.x + 1].xyzw
mad r1.xyzw, cb6[r0.x + 0].xyzw, r0.yyyy, r1.xyzw
mad r1.xyzw, cb6[r0.x + 2].xyzw, r0.wwww, r1.xyzw
mad r1.xyzw, cb6[r0.x + 3].xyzw, v0.wwww, r1.xyzw
ne r0.y, cb3[5].z, l(0.000000)
if_nz r0.y
  mul r0.yzw, v2.yyyy, cb6[r0.x + 1].xxyz
  mad r0.yzw, cb6[r0.x + 0].xxyz, v2.xxxx, r0.yyzw
  mad r0.xyz, cb6[r0.x + 2].xyzx, v2.zzzz, r0.yzwy
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r0.xyz, r0.wwww, r0.xyzx
  mad r2.xyz, -r1.xyzx, cb2[0].wwww, cb2[0].xyzx
  dp3 r0.w, r2.xyzx, r2.xyzx
  rsq r0.w, r0.w
  mul r2.xyz, r0.wwww, r2.xyzx
  dp3 r0.w, r0.xyzx, r2.xyzx
  mad r0.w, -r0.w, r0.w, l(1.000000)
  sqrt r0.w, r0.w
  mul r0.w, r0.w, cb3[5].z
  mad r1.xyz, -r0.xyzx, r0.wwww, r1.xyzx
endif
mul r0.xyzw, r1.yyyy, cb4[18].xyzw
mad r0.xyzw, cb4[17].xyzw, r1.xxxx, r0.xyzw
mad r0.xyzw, cb4[19].xyzw, r1.zzzz, r0.xyzw
mad r0.xyzw, cb4[20].xyzw, r1.wwww, r0.xyzw

// Relocated to here with asmtool.py
mov o0.xyw, r0.xyxw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 95ff00bc2034aaba-vs.txt
ne r5.w, r0.w, l(1.0)
if_nz r5.w
  add r5.w, r0.w, -r5.y
  mad r0.x, r5.w, r5.x, r0.x
endif

div r1.x, cb3[5].x, r0.w
min r1.x, r1.x, l(0.000000)
max r1.x, r1.x, l(-1.000000)
add r0.z, r0.z, r1.x
min r1.x, r0.w, r0.z
add r1.x, -r0.z, r1.x
mad o0.z, cb3[5].y, r1.x, r0.z
mul r0.z, r0.y, cb1[5].x
mul r1.xzw, r0.xxwz, l(0.500000, 0.000000, 0.500000, 0.500000)
add r1.xy, r1.zzzz, r1.xwxx
mul r1.zw, cb1[6].xxxy, l(0.000000, 0.000000, 0.250000, 0.250000)
mul o1.xy, r1.zwzz, r1.xyxx

// mov o0.xyw, r0.xyxw // Relocated from here with asmtool.py

mov o1.z, r0.w
mov o2.x, v8.x
ret
// Approximately 0 instruction slots used