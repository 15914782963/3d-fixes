// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 656cd6b35558c495-ps.txt
// 3DMigoto: 656cd6b35558c495 |    Unity headers extracted from p0_AlphaBumpedFresnel
//    Shader "p0/AlphaBumpedFresnel" {
//      CustomEditor "FresnelMaterialEditor"
//      SubShader 1/1 {
//        LOD 300
//        Tags { "IGNOREPROJECTOR"="true" "QUEUE"="AlphaTest+2" "RenderType"="TransparentCutout" }
//        Pass 5/5 {
//          Name "META"
//          Tags { "IGNOREPROJECTOR"="true" "LIGHTMODE"="META" "QUEUE"="AlphaTest+2" "RenderType"="TransparentCutout" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from p0_AlphaBumpedFresnel:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201609010 134 2 14
//   undeciphered1a: 7
//   Keywords { "EDITOR_VISUALIZATION" }
//   undeciphered2: 1 2 3 2 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 208
//   Vector 80 [_Color]
//   Vector 96 [_DefVals] 3
//   ScalarInt 112 [_CheckAlbedo]
//   Vector 128 [_AlbedoCompareColor]
//   Float 144 [_AlbedoMinLuminance]
//   Float 148 [_AlbedoMaxLuminance]
//   Float 152 [_AlbedoHueTolerance]
//   Float 156 [_AlbedoSaturationTolerance]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityMetaPass" 48
//   ScalarInt 32 [unity_VisualizationMode]
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_BumpMap] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityMetaPass" 2
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Mon Jul 15 00:06:46 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_output o0.xyzw
dcl_temps 9
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r7.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 656cd6b35558c495-ps.txt

mul r7.w, -r7.x, r7.y
mad r8.xyz, -r7.wwww, cb10[0].xyzw, cb1[4].xyzw

if_z cb2[2].x
  mov r0.x, v2.w
  mov r0.y, v3.w
  mov r0.z, v4.w
  add r0.xyz, -r0.xyzx, r8.xyzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r0.xyz, r0.wwww, r0.xyzx
  mul r1.xyz, r0.yyyy, v3.xyzx
  mad r0.xyw, v2.xyxz, r0.xxxx, r1.xyxz
  mad r0.xyz, v4.xyzx, r0.zzzz, r0.xywx
  sample r1.xyzw, v1.xyxx, t0.xyzw, s0
  mul r1.xyz, r1.xyzx, cb0[5].xyzx
  sample r2.xyzw, v1.zwzz, t1.xyzw, s1
  mad r2.xy, r2.wyww, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  dp2 r0.w, r2.xyxx, r2.xyxx
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  sqrt r2.z, r0.w
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r0.xyz, r0.wwww, r0.xyzx
  dp3 r0.x, r0.xyzx, r2.xyzx
  add r0.x, -r0.x, l(1.000000)
  mul r0.x, r0.x, r0.x
  mul r0.x, r0.x, l(0.500000)
  mad r0.x, cb0[6].y, r0.x, cb0[6].x
  mul r0.yzw, r0.xxxx, r1.xxyz
  ge r2.xyz, l(0.040450, 0.040450, 0.040450, 0.000000), r0.yzwy
  mul r3.xyz, r0.yzwy, l(0.0773993805, 0.0773993805, 0.0773993805, 0.000000)
  lt r4.xyz, r0.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
  mad r5.xyz, r1.xyzx, r0.xxxx, l(0.055000, 0.055000, 0.055000, 0.000000)
  mul r5.xyz, r5.xyzx, l(0.947867334, 0.947867334, 0.947867334, 0.000000)
  log r5.xyz, r5.xyzx
  mul r5.xyz, r5.xyzx, l(2.400000, 2.400000, 2.400000, 0.000000)
  exp r5.xyz, r5.xyzx
  log r6.xyz, r0.yzwy
  mul r6.xyz, r6.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
  exp r6.xyz, r6.xyzx
  movc r4.xyz, r4.xyzx, r5.xyzx, r6.xyzx
  movc r2.xyz, r2.xyzx, r3.xyzx, r4.xyzx
  dp3 r1.w, r2.xyzx, l(0.212672904, 0.715152204, 0.072175, 0.000000)
  dp3 r3.x, r2.xyzx, l(0.333300, 0.333300, 0.333300, 0.000000)
  movc r1.w, cb0[7].x, r1.w, r3.x
  if_z cb0[7].x
    ge r3.x, r1.w, l(0.012000)
    ge r3.y, l(0.900000), r1.w
    and r3.x, r3.y, r3.x
    mov r2.w, l(0)
    movc o0.xyzw, r3.xxxx, r2.xyzw, l(1.000000,0,0,1.000000)
  else
    ge r3.x, r1.w, cb0[9].x
    ge r1.w, cb0[9].y, r1.w
    and r1.w, r1.w, r3.x
    if_nz r1.w
      lt r3.xy, r0.zyzz, r0.wwww
      and r1.w, r3.y, r3.x
      if_nz r1.w
        ne r1.w, r0.w, l(0.000000)
        lt r3.x, r0.z, r0.y
        movc r3.x, r3.x, r0.z, r0.y
        mad r3.x, r1.z, r0.x, -r3.x
        ne r3.z, r3.x, l(0.000000)
        div r4.z, r3.x, r0.w
        mad r3.w, r1.x, r0.x, -r0.z
        div r3.x, r3.w, r3.x
        add r4.y, r3.x, l(4.000000)
        add r5.y, r3.w, l(4.000000)
        mov r5.z, l(0)
        movc r4.yz, r3.zzzz, r4.yyzy, r5.yyzy
        mul r3.x, r4.y, l(0.166666672)
        lt r3.z, r4.y, l(36.000000)
        mad r3.w, r4.y, l(0.166666672), l(1.000000)
        movc r4.x, r3.z, r3.w, r3.x
        and r3.xz, r1.wwww, r4.xxzx
      else
        lt r1.w, r0.y, r0.z
        if_nz r1.w
          ne r1.w, r0.z, l(0.000000)
          movc r3.y, r3.y, r0.y, r0.w
          mad r3.y, r1.y, r0.x, -r3.y
          ne r3.w, r3.y, l(0.000000)
          div r4.z, r3.y, r0.z
          mad r1.z, r1.z, r0.x, -r0.y
          div r3.y, r1.z, r3.y
          add r4.y, r3.y, l(2.000000)
          add r5.y, r1.z, l(2.000000)
          mov r5.z, l(0)
          movc r4.yz, r3.wwww, r4.yyzy, r5.yyzy
          mul r1.z, r4.y, l(0.166666672)
          lt r3.y, r4.y, l(36.000000)
          mad r3.w, r4.y, l(0.166666672), l(1.000000)
          movc r4.x, r3.y, r3.w, r1.z
          and r3.xz, r1.wwww, r4.xxzx
        else
          ne r1.z, r0.y, l(0.000000)
          lt r1.w, r0.w, r0.z
          movc r0.z, r1.w, r0.w, r0.z
          mad r0.z, r1.x, r0.x, -r0.z
          ne r1.x, r0.z, l(0.000000)
          div r4.z, r0.z, r0.y
          mad r5.y, r1.y, r0.x, -r0.w
          div r4.y, r5.y, r0.z
          mov r5.z, l(0)
          movc r0.yz, r1.xxxx, r4.yyzy, r5.yyzy
          mul r0.w, r0.y, l(0.166666672)
          lt r1.x, r0.y, l(36.000000)
          mad r0.y, r0.y, l(0.166666672), l(1.000000)
          movc r0.x, r1.x, r0.y, r0.w
          and r3.xz, r0.xxzx, r1.zzzz
        endif
      endif
      lt r0.xy, cb0[8].yxyy, cb0[8].zzzz
      and r0.x, r0.y, r0.x
      if_nz r0.x
        ne r0.x, cb0[8].z, l(0.000000)
        min r0.y, cb0[8].y, cb0[8].x
        add r0.y, -r0.y, cb0[8].z
        ne r0.z, r0.y, l(0.000000)
        div r1.z, r0.y, cb0[8].z
        add r0.w, -cb0[8].y, cb0[8].x
        div r0.y, r0.w, r0.y
        add r1.y, r0.y, l(4.000000)
        add r4.y, r0.w, l(4.000000)
        mov r4.z, l(0)
        movc r1.yz, r0.zzzz, r1.yyzy, r4.yyzy
        mul r0.y, r1.y, l(0.166666672)
        lt r0.z, r1.y, l(36.000000)
        mad r0.w, r1.y, l(0.166666672), l(1.000000)
        movc r1.x, r0.z, r0.w, r0.y
        and r0.xy, r0.xxxx, r1.xzxx
      else
        lt r0.z, cb0[8].x, cb0[8].y
        if_nz r0.z
          ne r0.z, cb0[8].y, l(0.000000)
          min r0.w, cb0[8].x, cb0[8].z
          add r0.w, -r0.w, cb0[8].y
          ne r1.x, r0.w, l(0.000000)
          div r1.z, r0.w, cb0[8].y
          add r1.w, -cb0[8].x, cb0[8].z
          div r0.w, r1.w, r0.w
          add r1.y, r0.w, l(2.000000)
          add r4.y, r1.w, l(2.000000)
          mov r4.z, l(0)
          movc r1.yz, r1.xxxx, r1.yyzy, r4.yyzy
          mul r0.w, r1.y, l(0.166666672)
          lt r1.w, r1.y, l(36.000000)
          mad r1.y, r1.y, l(0.166666672), l(1.000000)
          movc r1.x, r1.w, r1.y, r0.w
          and r0.xy, r0.zzzz, r1.xzxx
        else
          ne r0.z, cb0[8].x, l(0.000000)
          min r0.w, cb0[8].z, cb0[8].y
          add r0.w, -r0.w, cb0[8].x
          ne r1.x, r0.w, l(0.000000)
          div r1.z, r0.w, cb0[8].x
          add r4.y, -cb0[8].z, cb0[8].y
          div r1.y, r4.y, r0.w
          mov r4.z, l(0)
          movc r1.yz, r1.xxxx, r1.yyzy, r4.yyzy
          mul r0.w, r1.y, l(0.166666672)
          lt r1.w, r1.y, l(36.000000)
          mad r1.y, r1.y, l(0.166666672), l(1.000000)
          movc r1.x, r1.w, r1.y, r0.w
          and r0.xy, r0.zzzz, r1.xzxx
        endif
      endif
      add r0.zw, r0.yyyx, -cb0[9].wwwz
      lt r1.xy, r0.zwzz, r3.zxzz
      add r0.xy, r0.yxyy, cb0[9].wzww
      lt r0.xz, r3.zzxz, r0.xxyx
      and r0.x, r0.x, r1.x
      add r0.yw, r0.yyyw, l(0.000000, -1.000000, 0.000000, 1.000000)
      lt r0.w, r0.w, r3.x
      or r0.w, r0.w, r1.y
      and r0.x, r0.w, r0.x
      lt r0.y, r3.x, r0.y
      or r0.y, r0.y, r0.z
      and r0.x, r0.y, r0.x
      mov r2.w, l(0)
      movc o0.xyzw, r0.xxxx, r2.xyzw, l(1.000000,0,0,1.000000)
    else
      mov o0.xyzw, l(1.000000,0,0,1.000000)
    endif
  endif
else
  ieq r0.x, cb2[2].x, l(1)
  and o0.xyzw, r0.xxxx, l(0x3f800000, 0, 0, 0x3f800000)
endif
ret
// Approximately 0 instruction slots used