// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed ba5f591664820387-ps.txt
// 3DMigoto: ba5f591664820387 | Matched 4 variants of 1 shaders: p0/Reflective/Bumped Specular
//
//       Unity headers extracted from p0_Reflective_Bumped Specular
//       Shader "p0/Reflective/Bumped Specular" {
//         Fallback "Reflective/Bumped Diffuse"
//         SubShader 1/1 {
//           LOD 400
//           Tags { "RenderType"="Opaque" }
//           Pass 6/6 {
//             Name "META"
//             Tags { "LIGHTMODE"="META" "RenderType"="Opaque" }
//             Program "fp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from p0_Reflective_Bumped Specular:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201609010 159 2 16
//      undeciphered1a: 8
// 8:   Keywords { "EDITOR_VISUALIZATION" "Rain" "USEDECALS" }
// 2:   Keywords { "EDITOR_VISUALIZATION" "Rain" }
// 4:   Keywords { "EDITOR_VISUALIZATION" "USEDECALS" }
// 1:   Keywords { "EDITOR_VISUALIZATION" }
//      undeciphered2: 1 2 3 2 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 240
//      Vector 64 [_Color]
//      Float 96 [_Shininess]
//      Float 104 [_SpecPower]
//      Vector 128 [_DefVals] 3
//      ScalarInt 140 [_CheckPureMetal]
//      ScalarInt 144 [_CheckAlbedo]
//      Vector 160 [_AlbedoCompareColor]
//      Float 176 [_AlbedoMinLuminance]
//      Float 180 [_AlbedoMaxLuminance]
//      Float 184 [_AlbedoHueTolerance]
//      Float 188 [_AlbedoSaturationTolerance]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      ConstBuffer "UnityMetaPass" 48
//      ScalarInt 32 [unity_VisualizationMode]
//      SetTexture 0 [_MainTex] 2D 0
//      SetTexture 1 [_BumpMap] 2D 1
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityMetaPass" 2
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Mon Jul 15 00:17:58 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[12], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_output o0.xyzw
dcl_temps 10
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r8.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed ba5f591664820387-ps.txt

mul r8.w, -r8.x, r8.y
mad r9.xyz, -r8.wwww, cb10[0].xyzw, cb1[4].xyzw

mov r0.x, v2.w
mov r0.y, v3.w
mov r0.z, v4.w
add r0.xyz, -r0.xyzx, r9.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, r0.yyyy, v3.xyzx
mad r0.xyw, v2.xyxz, r0.xxxx, r1.xyxz
mad r0.xyz, v4.xyzx, r0.zzzz, r0.xywx
sample r1.xyzw, v1.xyxx, t0.xyzw, s0
mul r1.xyz, r1.xyzx, cb0[4].xyzx
mul r0.w, cb0[6].z, cb0[6].x
sample r2.xyzw, v1.zwzz, t1.xyzw, s1
mad r2.xy, r2.wyww, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r2.z, r1.w
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww
dp3 r0.x, r0.xyzx, r2.xyzx
add r0.x, -r0.x, l(1.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, l(0.500000)
mad r0.x, cb0[8].y, r0.x, cb0[8].x
mul r2.xyz, r0.xxxx, r1.xyzx
if_z cb2[2].x
  ge r3.xyz, l(0.040450, 0.040450, 0.040450, 0.000000), r2.xyzx
  mul r4.xyz, r2.xyzx, l(0.0773993805, 0.0773993805, 0.0773993805, 0.000000)
  lt r5.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mad r6.xyz, r1.xyzx, r0.xxxx, l(0.055000, 0.055000, 0.055000, 0.000000)
  mul r6.xyz, r6.xyzx, l(0.947867334, 0.947867334, 0.947867334, 0.000000)
  log r6.xyz, r6.xyzx
  mul r6.xyz, r6.xyzx, l(2.400000, 2.400000, 2.400000, 0.000000)
  exp r6.xyz, r6.xyzx
  log r7.xyz, r2.xyzx
  mul r7.xyz, r7.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
  exp r7.xyz, r7.xyzx
  movc r5.xyz, r5.xyzx, r6.xyzx, r7.xyzx
  movc r3.xyz, r3.xyzx, r4.xyzx, r5.xyzx
  mad r0.y, r0.w, l(0.305306017), l(0.682171106)
  mad r0.y, r0.w, r0.y, l(0.0125228781)
  mul r0.y, r0.y, r0.w
  dp3 r0.y, r0.yyyy, l(0.333300, 0.333300, 0.333300, 0.000000)
  ge r0.y, r0.y, l(0.450000)
  dp3 r0.z, r3.xyzx, l(0.212672904, 0.715152204, 0.072175, 0.000000)
  dp3 r1.w, r3.xyzx, l(0.333300, 0.333300, 0.333300, 0.000000)
  movc r0.z, cb0[9].x, r0.z, r1.w
  ine r1.w, cb0[8].w, l(0)
  and r1.w, r0.y, r1.w
  ne r4.x, r0.z, l(0.000000)
  and r1.w, r1.w, r4.x
  if_z r1.w
    if_z cb0[9].x
      ge r1.w, r0.z, l(0.012000)
      or r0.y, r0.y, r1.w
      ge r1.w, l(0.900000), r0.z
      and r0.y, r0.y, r1.w
      mov r3.w, l(0)
      movc o0.xyzw, r0.yyyy, r3.xyzw, l(1.000000,0,0,1.000000)
    else
      ge r0.y, r0.z, cb0[11].x
      ge r0.z, cb0[11].y, r0.z
      and r0.y, r0.z, r0.y
      if_nz r0.y
        lt r0.yz, r2.yyxy, r2.zzzz
        and r0.y, r0.z, r0.y
        if_nz r0.y
          ne r0.y, r2.z, l(0.000000)
          lt r1.w, r2.y, r2.x
          movc r1.w, r1.w, r2.y, r2.x
          mad r1.w, r1.z, r0.x, -r1.w
          ne r4.x, r1.w, l(0.000000)
          div r4.z, r1.w, r2.z
          mad r4.w, r1.x, r0.x, -r2.y
          div r1.w, r4.w, r1.w
          add r4.y, r1.w, l(4.000000)
          add r5.y, r4.w, l(4.000000)
          mov r5.z, l(0)
          movc r4.yz, r4.xxxx, r4.yyzy, r5.yyzy
          mul r1.w, r4.y, l(0.166666672)
          lt r4.w, r4.y, l(36.000000)
          mad r4.y, r4.y, l(0.166666672), l(1.000000)
          movc r4.x, r4.w, r4.y, r1.w
          and r4.xy, r0.yyyy, r4.xzxx
        else
          lt r0.y, r2.x, r2.y
          if_nz r0.y
            ne r0.y, r2.y, l(0.000000)
            movc r0.z, r0.z, r2.x, r2.z
            mad r0.z, r1.y, r0.x, -r0.z
            ne r1.w, r0.z, l(0.000000)
            div r5.z, r0.z, r2.y
            mad r1.z, r1.z, r0.x, -r2.x
            div r0.z, r1.z, r0.z
            add r5.y, r0.z, l(2.000000)
            add r6.y, r1.z, l(2.000000)
            mov r6.z, l(0)
            movc r5.yz, r1.wwww, r5.yyzy, r6.yyzy
            mul r0.z, r5.y, l(0.166666672)
            lt r1.z, r5.y, l(36.000000)
            mad r1.w, r5.y, l(0.166666672), l(1.000000)
            movc r5.x, r1.z, r1.w, r0.z
            and r4.xy, r0.yyyy, r5.xzxx
          else
            ne r0.y, r2.x, l(0.000000)
            lt r0.z, r2.z, r2.y
            movc r0.z, r0.z, r2.z, r2.y
            mad r0.z, r1.x, r0.x, -r0.z
            ne r1.x, r0.z, l(0.000000)
            div r5.z, r0.z, r2.x
            mad r1.y, r1.y, r0.x, -r2.z
            div r5.y, r1.y, r0.z
            mov r1.z, l(0)
            movc r1.yz, r1.xxxx, r5.yyzy, r1.yyzy
            mul r0.x, r1.y, l(0.166666672)
            lt r0.z, r1.y, l(36.000000)
            mad r1.y, r1.y, l(0.166666672), l(1.000000)
            movc r1.x, r0.z, r1.y, r0.x
            and r4.xy, r0.yyyy, r1.xzxx
          endif
        endif
        lt r0.xy, cb0[10].yxyy, cb0[10].zzzz
        and r0.x, r0.y, r0.x
        if_nz r0.x
          ne r0.x, cb0[10].z, l(0.000000)
          min r0.y, cb0[10].y, cb0[10].x
          add r0.y, -r0.y, cb0[10].z
          ne r0.z, r0.y, l(0.000000)
          div r1.z, r0.y, cb0[10].z
          add r1.x, -cb0[10].y, cb0[10].x
          div r0.y, r1.x, r0.y
          add r1.y, r0.y, l(4.000000)
          add r5.y, r1.x, l(4.000000)
          mov r5.z, l(0)
          movc r1.yz, r0.zzzz, r1.yyzy, r5.yyzy
          mul r0.y, r1.y, l(0.166666672)
          lt r0.z, r1.y, l(36.000000)
          mad r1.y, r1.y, l(0.166666672), l(1.000000)
          movc r1.x, r0.z, r1.y, r0.y
          and r0.xy, r0.xxxx, r1.xzxx
        else
          lt r0.z, cb0[10].x, cb0[10].y
          if_nz r0.z
            ne r0.z, cb0[10].y, l(0.000000)
            min r1.x, cb0[10].x, cb0[10].z
            add r1.x, -r1.x, cb0[10].y
            ne r1.y, r1.x, l(0.000000)
            div r5.z, r1.x, cb0[10].y
            add r1.z, -cb0[10].x, cb0[10].z
            div r1.x, r1.z, r1.x
            add r5.y, r1.x, l(2.000000)
            add r6.y, r1.z, l(2.000000)
            mov r6.z, l(0)
            movc r1.yz, r1.yyyy, r5.yyzy, r6.yyzy
            mul r1.w, r1.y, l(0.166666672)
            lt r4.z, r1.y, l(36.000000)
            mad r1.y, r1.y, l(0.166666672), l(1.000000)
            movc r1.x, r4.z, r1.y, r1.w
            and r0.xy, r0.zzzz, r1.xzxx
          else
            ne r0.z, cb0[10].x, l(0.000000)
            min r1.x, cb0[10].z, cb0[10].y
            add r1.x, -r1.x, cb0[10].x
            ne r1.y, r1.x, l(0.000000)
            div r5.z, r1.x, cb0[10].x
            add r6.y, -cb0[10].z, cb0[10].y
            div r5.y, r6.y, r1.x
            mov r6.z, l(0)
            movc r1.yz, r1.yyyy, r5.yyzy, r6.yyzy
            mul r1.w, r1.y, l(0.166666672)
            lt r4.z, r1.y, l(36.000000)
            mad r1.y, r1.y, l(0.166666672), l(1.000000)
            movc r1.x, r4.z, r1.y, r1.w
            and r0.xy, r0.zzzz, r1.xzxx
          endif
        endif
        add r1.xy, r0.yxyy, -cb0[11].wzww
        lt r1.xz, r1.xxyx, r4.yyxy
        add r0.xy, r0.yxyy, cb0[11].wzww
        lt r0.xz, r4.yyxy, r0.xxyx
        and r0.x, r0.x, r1.x
        add r1.x, r1.y, l(1.000000)
        lt r1.x, r1.x, r4.x
        or r1.x, r1.x, r1.z
        and r0.x, r0.x, r1.x
        add r0.y, r0.y, l(-1.000000)
        lt r0.y, r4.x, r0.y
        or r0.y, r0.y, r0.z
        and r0.x, r0.y, r0.x
        mov r3.w, l(0)
        movc o0.xyzw, r0.xxxx, r3.xyzw, l(1.000000,0,0,1.000000)
      else
        mov o0.xyzw, l(1.000000,0,0,1.000000)
      endif
    endif
  else
    mov o0.xyzw, l(1.000000,1.000000,0,1.000000)
  endif
else
  ieq r0.x, cb2[2].x, l(1)
  mad r1.xyz, r2.xyzx, l(0.305306017, 0.305306017, 0.305306017, 0.000000), l(0.682171106, 0.682171106, 0.682171106, 0.000000)
  mad r1.xyz, r2.xyzx, r1.xyzx, l(0.0125228781, 0.0125228781, 0.0125228781, 0.000000)
  mul r1.xyz, r1.xyzx, r2.xyzx
  mad r0.y, r0.w, l(0.305306017), l(0.682171106)
  mad r0.y, r0.w, r0.y, l(0.0125228781)
  mul r0.y, r0.y, r0.w
  dp3 r0.y, r0.yyyy, l(0.333300, 0.333300, 0.333300, 0.000000)
  ge r3.xyz, r0.yyyy, l(0.020000, 0.070000, 0.450000, 0.000000)
  ge r0.yzw, l(0.000000, 0.070000, 0.220000, 1.000000), r0.yyyy
  and r0.yzw, r0.yyzw, r3.xxyz
  or r0.y, r0.z, r0.y
  dp3 r0.z, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  eq r0.z, r0.z, l(0.000000)
  mov r2.w, l(0)
  movc r1.xyzw, r0.zzzz, r2.xyzw, l(1.000000,1.000000,0,1.000000)
  movc r1.xyzw, cb0[8].wwww, r1.xyzw, r2.xyzw
  movc r1.xyzw, r0.wwww, r1.xyzw, l(1.000000,0,0,1.000000)
  movc r1.xyzw, r0.yyyy, r2.xyzw, r1.xyzw
  and o0.xyzw, r0.xxxx, r1.xyzw
endif
ret
// Approximately 0 instruction slots used