// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9551d5c72492cc4b-ps.txt
// 3DMigoto: 9551d5c72492cc4b | Matched 2 variants of 1 shaders: Terrain/Bumped Specular
//
//       Unity headers extracted from Terrain_Bumped Specular
//       Shader "Terrain/Bumped Specular" {
//         Fallback "Nature/Terrain/Diffuse"
//         SubShader 1/1 {
//           Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" "SplatCount"="4" }
//           Pass 6/6 {
//             Name "META"
//             Tags { "LIGHTMODE"="META" "QUEUE"="Geometry-100" "RenderType"="Opaque" "SplatCount"="4" }
//             Program "fp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Terrain_Bumped Specular:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201609010 168 9 16
//      undeciphered1a: 7
// 2:   Keywords { "EDITOR_VISUALIZATION" "Rain" }
// 1:   Keywords { "EDITOR_VISUALIZATION" }
//      undeciphered2: 1 9 3 9 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 240
//      Float 64 [_Shininess]
//      Vector 80 [_DefVals] 3
//      ScalarInt 92 [_CheckPureMetal]
//      ScalarInt 96 [_CheckAlbedo]
//      Vector 112 [_AlbedoCompareColor]
//      Float 128 [_AlbedoMinLuminance]
//      Float 132 [_AlbedoMaxLuminance]
//      Float 136 [_AlbedoHueTolerance]
//      Float 140 [_AlbedoSaturationTolerance]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      ConstBuffer "UnityMetaPass" 48
//      ScalarInt 32 [unity_VisualizationMode]
//      SetTexture 0 [_Control] 2D 0
//      SetTexture 1 [_Splat0] 2D 1
//      SetTexture 2 [_Splat1] 2D 2
//      SetTexture 3 [_Splat2] 2D 3
//      SetTexture 4 [_Splat3] 2D 4
//      SetTexture 5 [_Normal0] 2D 5
//      SetTexture 6 [_Normal1] 2D 6
//      SetTexture 7 [_Normal2] 2D 7
//      SetTexture 8 [_Normal3] 2D 8
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityMetaPass" 2
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Mon Jul 15 00:13:01 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xy          3     NONE   float   xy
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyzw
dcl_output o0.xyzw
dcl_temps 9
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r7.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9551d5c72492cc4b-ps.txt

mul r7.w, -r7.x, r7.y
mad r8.xyz, -r7.wwww, cb10[0].xyzw, cb1[4].xyzw

mov r0.x, v4.w
mov r0.y, v5.w
mov r0.z, v6.w
add r0.xyz, -r0.xyzx, r8.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, r0.yyyy, v5.xyzx
mad r0.xyw, v4.xyxz, r0.xxxx, r1.xyxz
mad r0.xyz, v6.xyzx, r0.zzzz, r0.xywx
sample r1.xyzw, v1.xyxx, t0.xyzw, s0
sample r2.xyzw, v1.zwzz, t1.xyzw, s1
sample r3.xyzw, v2.xyxx, t2.xyzw, s2
mul r3.xyz, r1.yyyy, r3.xyzx
mad r2.xyz, r1.xxxx, r2.xyzx, r3.xyzx
sample r3.xyzw, v2.zwzz, t3.xyzw, s3
mad r2.xyz, r1.zzzz, r3.xyzx, r2.xyzx
sample r3.xyzw, v3.xyxx, t4.xyzw, s4
mad r2.xyz, r1.wwww, r3.xyzx, r2.xyzx
sample r3.xyzw, v1.zwzz, t5.xyzw, s5
sample r4.xyzw, v2.xyxx, t6.xyzw, s6
mul r3.xz, r1.yyyy, r4.wwyw
mad r3.xy, r1.xxxx, r3.wyww, r3.xzxx
sample r4.xyzw, v2.zwzz, t7.xyzw, s7
mad r3.xy, r1.zzzz, r4.wyww, r3.xyxx
sample r4.xyzw, v3.xyxx, t8.xyzw, s8
mad r3.xy, r1.wwww, r4.wyww, r3.xyxx
dp4 r0.w, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r1.xy, r3.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mad r1.xy, r0.wwww, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r1.xyxx, r1.xyxx
min r0.w, r0.w, l(1.000000)
add r0.w, -r0.w, l(1.000000)
sqrt r1.z, r0.w
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.x, r0.xyzx, r1.xyzx
add r0.x, -r0.x, l(1.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, l(0.500000)
mad r0.x, cb0[5].y, r0.x, cb0[5].x
mul r1.xyz, r0.xxxx, r2.xyzx
if_z cb2[2].x
  ge r0.yzw, l(0.000000, 0.040450, 0.040450, 0.040450), r1.xxyz
  mul r3.xyz, r1.xyzx, l(0.0773993805, 0.0773993805, 0.0773993805, 0.000000)
  lt r4.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mad r5.xyz, r2.xyzx, r0.xxxx, l(0.055000, 0.055000, 0.055000, 0.000000)
  mul r5.xyz, r5.xyzx, l(0.947867334, 0.947867334, 0.947867334, 0.000000)
  log r5.xyz, r5.xyzx
  mul r5.xyz, r5.xyzx, l(2.400000, 2.400000, 2.400000, 0.000000)
  exp r5.xyz, r5.xyzx
  log r6.xyz, r1.xyzx
  mul r6.xyz, r6.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
  exp r6.xyz, r6.xyzx
  movc r4.xyz, r4.xyzx, r5.xyzx, r6.xyzx
  movc r3.xyz, r0.yzwy, r3.xyzx, r4.xyzx
  mad r0.y, cb0[4].x, l(0.305306017), l(0.682171106)
  mad r0.y, cb0[4].x, r0.y, l(0.0125228781)
  mul r0.y, r0.y, cb0[4].x
  dp3 r0.y, r0.yyyy, l(0.333300, 0.333300, 0.333300, 0.000000)
  ge r0.y, r0.y, l(0.450000)
  dp3 r0.z, r3.xyzx, l(0.212672904, 0.715152204, 0.072175, 0.000000)
  dp3 r0.w, r3.xyzx, l(0.333300, 0.333300, 0.333300, 0.000000)
  movc r0.z, cb0[6].x, r0.z, r0.w
  ine r0.w, cb0[5].w, l(0)
  and r0.w, r0.y, r0.w
  ne r2.w, r0.z, l(0.000000)
  and r0.w, r0.w, r2.w
  if_z r0.w
    if_z cb0[6].x
      ge r0.w, r0.z, l(0.012000)
      or r0.y, r0.w, r0.y
      ge r0.w, l(0.900000), r0.z
      and r0.y, r0.w, r0.y
      mov r3.w, l(0)
      movc o0.xyzw, r0.yyyy, r3.xyzw, l(1.000000,0,0,1.000000)
    else
      ge r0.y, r0.z, cb0[8].x
      ge r0.z, cb0[8].y, r0.z
      and r0.y, r0.z, r0.y
      if_nz r0.y
        lt r0.yz, r1.yyxy, r1.zzzz
        and r0.y, r0.z, r0.y
        if_nz r0.y
          ne r0.y, r1.z, l(0.000000)
          lt r0.w, r1.y, r1.x
          movc r0.w, r0.w, r1.y, r1.x
          mad r0.w, r2.z, r0.x, -r0.w
          ne r2.w, r0.w, l(0.000000)
          div r4.z, r0.w, r1.z
          mad r4.x, r2.x, r0.x, -r1.y
          div r0.w, r4.x, r0.w
          add r4.y, r0.w, l(4.000000)
          add r5.y, r4.x, l(4.000000)
          mov r5.z, l(0)
          movc r4.yz, r2.wwww, r4.yyzy, r5.yyzy
          mul r0.w, r4.y, l(0.166666672)
          lt r2.w, r4.y, l(36.000000)
          mad r4.y, r4.y, l(0.166666672), l(1.000000)
          movc r4.x, r2.w, r4.y, r0.w
          and r0.yw, r0.yyyy, r4.xxxz
        else
          lt r2.w, r1.x, r1.y
          if_nz r2.w
            ne r2.w, r1.y, l(0.000000)
            movc r0.z, r0.z, r1.x, r1.z
            mad r0.z, r2.y, r0.x, -r0.z
            ne r4.x, r0.z, l(0.000000)
            div r4.z, r0.z, r1.y
            mad r2.z, r2.z, r0.x, -r1.x
            div r0.z, r2.z, r0.z
            add r4.y, r0.z, l(2.000000)
            add r5.y, r2.z, l(2.000000)
            mov r5.z, l(0)
            movc r4.yz, r4.xxxx, r4.yyzy, r5.yyzy
            mul r0.z, r4.y, l(0.166666672)
            lt r2.z, r4.y, l(36.000000)
            mad r4.y, r4.y, l(0.166666672), l(1.000000)
            movc r4.x, r2.z, r4.y, r0.z
            and r0.yw, r2.wwww, r4.xxxz
          else
            ne r0.z, r1.x, l(0.000000)
            lt r2.z, r1.z, r1.y
            movc r2.z, r2.z, r1.z, r1.y
            mad r2.x, r2.x, r0.x, -r2.z
            ne r2.z, r2.x, l(0.000000)
            div r4.z, r2.x, r1.x
            mad r5.y, r2.y, r0.x, -r1.z
            div r4.y, r5.y, r2.x
            mov r5.z, l(0)
            movc r2.yz, r2.zzzz, r4.yyzy, r5.yyzy
            mul r0.x, r2.y, l(0.166666672)
            lt r2.w, r2.y, l(36.000000)
            mad r2.y, r2.y, l(0.166666672), l(1.000000)
            movc r2.x, r2.w, r2.y, r0.x
            and r0.yw, r0.zzzz, r2.xxxz
          endif
        endif
        lt r0.xz, cb0[7].yyxy, cb0[7].zzzz
        and r0.x, r0.z, r0.x
        if_nz r0.x
          ne r0.x, cb0[7].z, l(0.000000)
          min r0.z, cb0[7].y, cb0[7].x
          add r0.z, -r0.z, cb0[7].z
          ne r2.x, r0.z, l(0.000000)
          div r2.z, r0.z, cb0[7].z
          add r2.w, -cb0[7].y, cb0[7].x
          div r0.z, r2.w, r0.z
          add r2.y, r0.z, l(4.000000)
          add r4.y, r2.w, l(4.000000)
          mov r4.z, l(0)
          movc r2.yz, r2.xxxx, r2.yyzy, r4.yyzy
          mul r0.z, r2.y, l(0.166666672)
          lt r2.w, r2.y, l(36.000000)
          mad r2.y, r2.y, l(0.166666672), l(1.000000)
          movc r2.x, r2.w, r2.y, r0.z
          and r0.xz, r0.xxxx, r2.xxzx
        else
          lt r2.x, cb0[7].x, cb0[7].y
          if_nz r2.x
            ne r2.x, cb0[7].y, l(0.000000)
            min r2.y, cb0[7].x, cb0[7].z
            add r2.y, -r2.y, cb0[7].y
            ne r2.z, r2.y, l(0.000000)
            div r4.z, r2.y, cb0[7].y
            add r2.w, -cb0[7].x, cb0[7].z
            div r2.y, r2.w, r2.y
            add r4.y, r2.y, l(2.000000)
            add r5.y, r2.w, l(2.000000)
            mov r5.z, l(0)
            movc r4.yz, r2.zzzz, r4.yyzy, r5.yyzy
            mul r2.y, r4.y, l(0.166666672)
            lt r2.z, r4.y, l(36.000000)
            mad r2.w, r4.y, l(0.166666672), l(1.000000)
            movc r4.x, r2.z, r2.w, r2.y
            and r0.xz, r2.xxxx, r4.xxzx
          else
            ne r2.x, cb0[7].x, l(0.000000)
            min r2.y, cb0[7].z, cb0[7].y
            add r2.y, -r2.y, cb0[7].x
            ne r2.z, r2.y, l(0.000000)
            div r4.z, r2.y, cb0[7].x
            add r5.y, -cb0[7].z, cb0[7].y
            div r4.y, r5.y, r2.y
            mov r5.z, l(0)
            movc r4.yz, r2.zzzz, r4.yyzy, r5.yyzy
            mul r2.y, r4.y, l(0.166666672)
            lt r2.z, r4.y, l(36.000000)
            mad r2.w, r4.y, l(0.166666672), l(1.000000)
            movc r4.x, r2.z, r2.w, r2.y
            and r0.xz, r2.xxxx, r4.xxzx
          endif
        endif
        add r2.xy, r0.zxzz, -cb0[8].wzww
        lt r2.xz, r2.xxyx, r0.wwyw
        add r0.xz, r0.zzxz, cb0[8].wwzw
        lt r0.xw, r0.wwwy, r0.xxxz
        and r0.x, r0.x, r2.x
        add r2.x, r2.y, l(1.000000)
        lt r2.x, r2.x, r0.y
        or r2.x, r2.x, r2.z
        and r0.x, r0.x, r2.x
        add r0.z, r0.z, l(-1.000000)
        lt r0.y, r0.y, r0.z
        or r0.y, r0.y, r0.w
        and r0.x, r0.y, r0.x
        mov r3.w, l(0)
        movc o0.xyzw, r0.xxxx, r3.xyzw, l(1.000000,0,0,1.000000)
      else
        mov o0.xyzw, l(1.000000,0,0,1.000000)
      endif
    endif
  else
    mov o0.xyzw, l(1.000000,1.000000,0,1.000000)
  endif
else
  ieq r0.x, cb2[2].x, l(1)
  mad r0.yzw, r1.xxyz, l(0.000000, 0.305306017, 0.305306017, 0.305306017), l(0.000000, 0.682171106, 0.682171106, 0.682171106)
  mad r0.yzw, r1.xxyz, r0.yyzw, l(0.000000, 0.0125228781, 0.0125228781, 0.0125228781)
  mul r0.yzw, r0.yyzw, r1.xxyz
  mad r2.x, cb0[4].x, l(0.305306017), l(0.682171106)
  mad r2.x, cb0[4].x, r2.x, l(0.0125228781)
  mul r2.x, r2.x, cb0[4].x
  dp3 r2.x, r2.xxxx, l(0.333300, 0.333300, 0.333300, 0.000000)
  ge r2.yzw, r2.xxxx, l(0.000000, 0.020000, 0.070000, 0.450000)
  ge r3.xyz, l(0.070000, 0.220000, 1.000000, 0.000000), r2.xxxx
  and r2.xyz, r2.yzwy, r3.xyzx
  or r2.x, r2.y, r2.x
  dp3 r0.y, r0.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
  eq r0.y, r0.y, l(0.000000)
  mov r1.w, l(0)
  movc r3.xyzw, r0.yyyy, r1.xyzw, l(1.000000,1.000000,0,1.000000)
  movc r3.xyzw, cb0[5].wwww, r3.xyzw, r1.xyzw
  movc r3.xyzw, r2.zzzz, r3.xyzw, l(1.000000,0,0,1.000000)
  movc r1.xyzw, r2.xxxx, r1.xyzw, r3.xyzw
  and o0.xyzw, r0.xxxx, r1.xyzw
endif
ret
// Approximately 0 instruction slots used