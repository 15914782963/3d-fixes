// Water (Note: Miasmata v2.0.0.4 had CRC 1962D8A7.txt)
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float mesh_displacemment;
//   float4 noise_xform;
//   float4 refract_tc_ofs;
//   float4x4 world_view_proj;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   world_view_proj    c0       4
//   noise_xform        c4       1
//   mesh_displacemment c5       1
//   refract_tc_ofs     c6       1
//
//
// Default values:
//
//   world_view_proj
//     c0   = { 0, 0, 0, 0 };
//     c1   = { 0, 0, 0, 0 };
//     c2   = { 0, 0, 0, 0 };
//     c3   = { 0, 0, 0, 0 };
//
//   noise_xform
//     c4   = { 0, 0, 0, 0 };
//
//   mesh_displacemment
//     c5   = { 0, 0, 0, 0 };
//
//   refract_tc_ofs
//     c6   = { 0, 0, 0, 0 };
//

    vs_3_0
    def c7, 0.0009765625, 0.00048828125, 0.0078125, 0
    def c8, 0.5, -0.5, 1, 0
    dcl_position v0
    dcl_texcoord v1
    dcl_position o0
    dcl_texcoord o1
    dcl_texcoord1 o2.xy
    dcl_texcoord2 o3
    dcl_texcoord3 o4
    dcl_texcoord4 o5.x

dcl_texcoord5 o6 // New output - corrected world position for reflections
def c220, 0, 0, 0.0625, 0.5
dcl_2d s0

    mad o2.xy, v0, c7.x, c7.y
    add r0.z, c5.x, v0.z
    mov r0.xyw, v0
    dp4 r1.x, r0, c0
    dp4 r1.y, r0, c1
    dp4 r1.z, r0, c2
    dp4 r1.w, r0, c3
    mov o0, r1 // Moved this up - r1 is being manipulated below and need to stereoize it first

// Fixes halo in water
texldl r3, c220.z, s0
add r3.y, r1.w, -r3.y
mul r3.x, r3.x, r3.y
add r1.x, r1.x, r3.x

// texcoord0 holds the world position - we need to stereoise it to fix the real
// time reflections. Attempting to run the projected coordinate r1 back through
// the inverse world-view-projection matrix (in c180 via Helix mod) results in
// the water flying all over the place as the camera moves due to numerical
// instability in the matrix. Instead, we take just the correction amount and
// run it through the matrix which minimises the instability, resulting in high
// quality correctly positioned real time reflections. We pass the corrected
// position in a new output register, as some operations (ripples, shadows)
// still require the uncorrected position.
mov r3.yzw, c220.xxy // Correction is only in X, set YZ=0, W=1
dp4 r11.x, r3, c180
dp4 r11.y, r3, c181
dp4 r11.z, r3, c182
dp4 r11.w, r3, c183
add o6, r0, r11 // Add correction to world position
    mov o1, r0 // Uncorrected world position

    mov r0.zw, c7
    mad o4, r1, c4, r0.zzww
    mul r0, r1.w, c6
    mad o3, r1, c8.xyzz, r0
    mov o5.x, v1.x

// approximately 14 instruction slots used
