// Lights ok

cbuffer cPSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_psScene : packoffset(c0);

}

cbuffer cPSLight : register(b3)
{

  struct
  {
    float4 m_lightDir0;
    float4 m_lightColor0;
    float4 m_lightColor1;
    float4 m_lightSourcePos;
    float4 m_lightSourceColor;
    float4 m_lightSourceDir;
    float4 m_lightSourceParam1;
    float4 m_lightSourceParam2;
    float4 m_lightSourceParam3;
    float4 m_lightPos0;
    float4 m_lightParam2;
  } g_psLight : packoffset(c0);

}

cbuffer cPSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_psMaterial : packoffset(c0);

}

SamplerState g_samplerPoint_Wrap_s : register(s8);
SamplerState g_samplerPoint_Clamp_s : register(s9);
SamplerState g_samplerLinear_Clamp_s : register(s11);
Texture2D<float4> g_NormalTexture : register(t0);
Texture2D<float4> g_SpecularTexture : register(t1);
Texture2D<float4> g_DepthTexture : register(t2);
Texture3D<float4> g_lut2 : register(t8);
Texture2D<float4> g_lut1 : register(t9);
Texture2D<float4> g_MaterialTexture : register(t10);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy / v1.ww;
  r0.xy = -g_psScene.m_cameraCenterOffset.xy + r0.xy;
  r0.xy = g_psScene.m_projectionParam.xy * r0.xy;
  r0.zw = v2.xy / v2.ww;
  r1.x = g_DepthTexture.Sample(g_samplerPoint_Wrap_s, r0.zw).x;
  r1.x = -g_psScene.m_projectionParam.w + r1.x;
  r1.z = g_psScene.m_projectionParam.z / r1.x;
  r1.xy = r1.zz * r0.xy;
  
  float4 stereo = StereoParams.Load(0);
  r1.x -= stereo.x * (r1.z - stereo.y) / g_psScene.m_projection._m00;
  
  r2.xyz = g_psLight.m_lightSourcePos.xyz + -r1.xyz;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.y = 1 / r0.x;
  r0.y = -g_psLight.m_lightSourceParam1.w * r0.x + r0.y;
  r0.y = min(g_psMaterial.m_materials[7].w, r0.y);
  r0.y = max(0, r0.y);
  r3.xyz = g_psLight.m_lightSourceColor.xyz * r0.yyy;
  r0.y = rsqrt(r0.x);
  r0.x = r0.x * r0.y;
  r0.x = max(g_psMaterial.m_materials[7].x, r0.x);
  r0.x = g_psLight.m_lightSourceColor.w / r0.x;
  r4.xyz = r2.xyz * r0.yyy;
  r1.w = dot(g_psLight.m_lightSourceDir.xyz, -r4.xyz);
  r1.w = -g_psLight.m_lightSourceParam2.x + r1.w;
  r1.w = saturate(g_psLight.m_lightSourceParam2.y * r1.w);
  r1.w = log2(r1.w);
  r1.w = g_psLight.m_lightSourceParam2.z * r1.w;
  r1.w = exp2(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r3.xyz = g_psScene.m_exposure.zzz * r3.xyz;
  r5.xyz = g_NormalTexture.Sample(g_samplerPoint_Wrap_s, r0.zw).xyz;
  r6.xyzw = g_SpecularTexture.Sample(g_samplerPoint_Wrap_s, r0.zw).yxzw;
  r0.zw = r5.xy * float2(2,2) + float2(-1,-1);
  r1.w = dot(r5.zz, r5.zz);
  r5.z = -1 + r1.w;
  r1.w = dot(r0.zw, r0.zw);
  r2.w = -r5.z * r5.z + 1;
  r1.w = r2.w * r1.w + 1.00000001e-007;
  r0.zw = r2.ww * r0.zw;
  r1.w = rsqrt(r1.w);
  r5.xy = r1.ww * r0.zw;
  r0.z = dot(r4.xyz, r5.xyz);
  r0.w = -r0.z * r0.z + 1;
  r0.w = r0.w * r6.w + r0.z;
  r0.xz = saturate(float2(0.899999976,4) * r0.xz);
  r7.x = r6.z;
  r7.yz = float2(0.25,0.75);
  r8.xyzw = g_MaterialTexture.Sample(g_samplerPoint_Clamp_s, r7.xy).xyzw;
  r7.yz = g_MaterialTexture.Sample(g_samplerPoint_Clamp_s, r7.xz).xw;
  r8.xyzw = r8.wxyz * r6.wxxx;
  r0.w = saturate(max(r8.x, r0.w));
  r8.xyz = r8.yzw * r3.xyz;
  r3.xyz = r0.www * r3.xyz;
  o0.xyz = g_psLight.m_lightSourceParam3.yyy * r3.xyz;
  o0.w = 1;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = dot(-r1.xyz, r5.xyz);
  r0.w = r0.w + r0.w;
  r3.xyz = r5.xyz * -r0.www + -r1.xyz;
  r2.xyz = -r2.xyz * r0.yyy + -r3.xyz;
  r0.y = dot(r2.xyz, r2.xyz);
  r0.y = sqrt(r0.y);
  r0.x = r0.x / r0.y;
  r0.x = min(1, r0.x);
  r0.xyw = r0.xxx * r2.xyz + r4.xyz;
  r1.w = dot(r0.xyw, r0.xyw);
  r1.w = rsqrt(r1.w);
  r0.xyw = r0.xyw * r1.www + -r1.xyz;
  r1.x = dot(r0.xyw, r0.xyw);
  r1.x = rsqrt(r1.x);
  r0.xyw = r1.xxx * r0.xyw;
  r6.x = saturate(dot(r0.xyw, r5.xyz));
  r7.x = dot(r0.xyw, r4.xyz);
  r6.z = r7.z;
  r0.x = g_lut1.Sample(g_samplerLinear_Clamp_s, r7.xy).x;
  r1.xyz = r6.xyz * r6.xyz;
  r1.xyz = r1.xyz * float3(0.984375,0.9375,0.9375) + float3(0.0078125,0.03125,0.03125);
  r0.yw = g_lut2.Sample(g_samplerLinear_Clamp_s, r1.xyz).xy;
  r0.yw = r0.yw * r0.yw;
  r0.y = r0.y / r0.w;
  r0.x = r0.x * r0.y;
  r0.x = r0.x * r0.z;
  r0.xyz = r8.xyz * r0.xxx;
  o1.xyz = g_psLight.m_lightSourceParam3.xxx * r0.xyz;
  o1.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.25 on Tue Jan 19 16:26:06 2016
//
//
// Buffer Definitions: 
//
// cbuffer cPSScene
// {
//
//   struct PSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_psScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cPSLight
// {
//
//   struct PSLight
//   {
//       
//       float4 m_lightDir0;            // Offset:    0
//       float4 m_lightColor0;          // Offset:   16
//       float4 m_lightColor1;          // Offset:   32
//       float4 m_lightSourcePos;       // Offset:   48
//       float4 m_lightSourceColor;     // Offset:   64
//       float4 m_lightSourceDir;       // Offset:   80
//       float4 m_lightSourceParam1;    // Offset:   96
//       float4 m_lightSourceParam2;    // Offset:  112
//       float4 m_lightSourceParam3;    // Offset:  128
//       float4 m_lightPos0;            // Offset:  144
//       float4 m_lightParam2;          // Offset:  160
//
//   } g_psLight;                       // Offset:    0 Size:   176
//
// }
//
// cbuffer cPSMaterial
// {
//
//   struct PSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_psMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerPoint_Wrap               sampler      NA          NA    8        1
// g_samplerPoint_Clamp              sampler      NA          NA    9        1
// g_samplerLinear_Clamp             sampler      NA          NA   11        1
// g_NormalTexture                   texture  float4          2d    0        1
// g_SpecularTexture                 texture  float4          2d    1        1
// g_DepthTexture                    texture  float4          2d    2        1
// g_lut2                            texture  float4          3d    8        1
// g_lut1                            texture  float4          2d    9        1
// g_MaterialTexture                 texture  float4          2d   10        1
// cPSScene                          cbuffer      NA          NA    2        1
// cPSLight                          cbuffer      NA          NA    3        1
// cPSMaterial                       cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[29], immediateIndexed
dcl_constantbuffer cb3[9], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s11, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture3d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 9
div r0.xy, v1.xyxx, v1.wwww
add r0.xy, r0.xyxx, -cb2[28].xyxx
mul r0.xy, r0.xyxx, cb2[21].xyxx
div r0.zw, v2.xxxy, v2.wwww
sample_indexable(texture2d)(float,float,float,float) r1.x, r0.zwzz, t2.xyzw, s8
add r1.x, r1.x, -cb2[21].w
div r1.z, cb2[21].z, r1.x
mul r1.xy, r0.xyxx, r1.zzzz
add r2.xyz, -r1.xyzx, cb3[3].xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mad r0.y, -cb3[6].w, r0.x, r0.y
min r0.y, r0.y, cb4[7].w
max r0.y, r0.y, l(0.000000)
mul r3.xyz, r0.yyyy, cb3[4].xyzx
rsq r0.y, r0.x
mul r0.x, r0.y, r0.x
max r0.x, r0.x, cb4[7].x
div r0.x, cb3[4].w, r0.x
mul r4.xyz, r0.yyyy, r2.xyzx
dp3 r1.w, cb3[5].xyzx, -r4.xyzx
add r1.w, r1.w, -cb3[7].x
mul_sat r1.w, r1.w, cb3[7].y
log r1.w, r1.w
mul r1.w, r1.w, cb3[7].z
exp r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx
mul r3.xyz, r3.xyzx, cb2[23].zzzz
sample_indexable(texture2d)(float,float,float,float) r5.xyz, r0.zwzz, t0.xyzw, s8
sample_indexable(texture2d)(float,float,float,float) r6.xyzw, r0.zwzz, t1.yxzw, s8
mad r0.zw, r5.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
dp2 r1.w, r5.zzzz, r5.zzzz
add r5.z, r1.w, l(-1.000000)
dp2 r1.w, r0.zwzz, r0.zwzz
mad r2.w, -r5.z, r5.z, l(1.000000)
mad r1.w, r2.w, r1.w, l(1.000000012E-007)
mul r0.zw, r0.zzzw, r2.wwww
rsq r1.w, r1.w
mul r5.xy, r0.zwzz, r1.wwww
dp3 r0.z, r4.xyzx, r5.xyzx
mad r0.w, -r0.z, r0.z, l(1.000000)
mad r0.w, r0.w, r6.w, r0.z
mul_sat r0.xz, r0.xxzx, l(0.900000, 0.000000, 4.000000, 0.000000)
mov r7.x, r6.z
mov r7.yz, l(0,0.250000,0.750000,0)
sample_indexable(texture2d)(float,float,float,float) r8.xyzw, r7.xyxx, t10.xyzw, s9
sample_indexable(texture2d)(float,float,float,float) r7.yz, r7.xzxx, t10.yxwz, s9
mul r8.xyzw, r6.wxxx, r8.wxyz
max_sat r0.w, r0.w, r8.x
mul r8.xyz, r3.xyzx, r8.yzwy
mul r3.xyz, r3.xyzx, r0.wwww
mul o0.xyz, r3.xyzx, cb3[8].yyyy
mov o0.w, l(1.000000)
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, -r1.xyzx, r5.xyzx
add r0.w, r0.w, r0.w
mad r3.xyz, r5.xyzx, -r0.wwww, -r1.xyzx
mad r2.xyz, -r2.xyzx, r0.yyyy, -r3.xyzx
dp3 r0.y, r2.xyzx, r2.xyzx
sqrt r0.y, r0.y
div r0.x, r0.x, r0.y
min r0.x, r0.x, l(1.000000)
mad r0.xyw, r0.xxxx, r2.xyxz, r4.xyxz
dp3 r1.w, r0.xywx, r0.xywx
rsq r1.w, r1.w
mad r0.xyw, r0.xyxw, r1.wwww, -r1.xyxz
dp3 r1.x, r0.xywx, r0.xywx
rsq r1.x, r1.x
mul r0.xyw, r0.xyxw, r1.xxxx
dp3_sat r6.x, r0.xywx, r5.xyzx
dp3 r7.x, r0.xywx, r4.xyzx
mov r6.z, r7.z
sample_indexable(texture2d)(float,float,float,float) r0.x, r7.xyxx, t9.xyzw, s11
mul r1.xyz, r6.xyzx, r6.xyzx
mad r1.xyz, r1.xyzx, l(0.984375, 0.937500, 0.937500, 0.000000), l(0.00781250000, 0.031250, 0.031250, 0.000000)
sample_indexable(texture3d)(float,float,float,float) r0.yw, r1.xyzx, t8.zxwy, s11
mul r0.yw, r0.yyyw, r0.yyyw
div r0.y, r0.y, r0.w
mul r0.x, r0.y, r0.x
mul r0.x, r0.z, r0.x
mul r0.xyz, r0.xxxx, r8.xyzx
mul o1.xyz, r0.xyzx, cb3[8].xxxx
mov o1.w, l(1.000000)
ret 
// Approximately 86 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
