// Shadows

cbuffer cPSScene : register(b2)
{

  struct
  {
    float4x4 m_projectionView;
    float4x4 m_projection;
    float4x4 m_view;
    float4x4 m_shadowProjection;
    float4x4 m_shadowProjection2;
    float4 m_eyepos;
    float4 m_projectionParam;
    float4 m_viewportSize;
    float4 m_exposure;
    float4 m_fogParam[3];
    float4 m_fogColor;
    float4 m_cameraCenterOffset;
    float4 m_shadowMapResolutions;
  } g_psScene : packoffset(c0);

}

cbuffer cPSLight : register(b3)
{

  struct
  {
    float4 m_lightDir0;
    float4 m_lightColor0;
    float4 m_lightColor1;
    float4 m_lightSourcePos;
    float4 m_lightSourceColor;
    float4 m_lightSourceDir;
    float4 m_lightSourceParam1;
    float4 m_lightSourceParam2;
    float4 m_lightSourceParam3;
    float4 m_lightPos0;
    float4 m_lightParam2;
  } g_psLight : packoffset(c0);

}

cbuffer cPSMaterial : register(b4)
{

  struct
  {
    float4 m_materials[8];
  } g_psMaterial : packoffset(c0);

}

SamplerState g_samplerPoint_Wrap_s : register(s8);
SamplerState g_samplerPoint_Clamp_s : register(s9);
SamplerComparisonState g_samplerComparisonLess_Linear_Clmap_s : register(s15);
Texture2D<float4> g_NormalTexture : register(t0);
Texture2D<float4> g_SpecularTexture : register(t1);
Texture2D<float4> g_DepthTexture : register(t2);
Texture2D<float4> g_ShadowTexture : register(t3);
Texture2D<float4> g_MaterialTexture : register(t10);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = floor(v0.xyxy);
  r0.xyzw = r0.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.100000001,0.100000001,0.100000001,0.100000001);
  r0.xyzw = frac(r0.xyzw);
  r0.xyzw = cmp(r0.xyzw >= float4(0.300000012,0.300000012,0.300000012,0.300000012));
  r0.xyzw = r0.xyzw ? float4(0.625,0.625,-0.375,-0.375) : float4(0.375,0.375,-0.625,-0.625);
  r1.xy = v1.xy / v1.ww;
  r1.xy = -g_psScene.m_cameraCenterOffset.xy + r1.xy;
  r1.xy = g_psScene.m_projectionParam.xy * r1.xy;
  r1.zw = v2.xy / v2.ww;
  r2.x = g_DepthTexture.Sample(g_samplerPoint_Wrap_s, r1.zw).x;
  r2.x = -g_psScene.m_projectionParam.w + r2.x;
  r2.z = g_psScene.m_projectionParam.z / r2.x;
  r2.xy = r2.zz * r1.xy;
  
  float4 stereo = StereoParams.Load(0);
  r2.x -= stereo.x * (r2.z - stereo.y) / g_psScene.m_projection._m00;
  
  r2.w = 1;
  r1.x = dot(r2.xyzw, g_psScene.m_shadowProjection._m00_m10_m20_m30);
  r1.y = dot(r2.xyzw, g_psScene.m_shadowProjection._m01_m11_m21_m31);
  r3.x = dot(r2.xyzw, g_psScene.m_shadowProjection._m03_m13_m23_m33);
  r4.z = dot(r2.xyzw, g_psScene.m_shadowProjection._m02_m12_m22_m32);
  r2.xyz = g_psLight.m_lightSourcePos.xyz + -r2.xyz;
  r2.w = r3.x / g_psScene.m_shadowMapResolutions.y;
  r4.xy = r0.xy * r2.ww + r1.xy;
  r3.yzw = r4.xyz / r3.xxx;
  r3.y = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r3.yz, r3.w).x;
  r4.xy = r0.zy * r2.ww + r1.xy;
  r5.xyz = r4.xyz / r3.xxx;
  r0.y = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r5.xy, r5.z).x;
  r0.y = r3.y + r0.y;
  r4.xy = r0.xw * r2.ww + r1.xy;
  r5.xy = r0.zw * r2.ww + r1.xy;
  r0.xzw = r4.xyz / r3.xxx;
  r5.z = r4.z;
  r3.xyz = r5.xyz / r3.xxx;
  r1.x = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r3.xy, r3.z).x;
  r0.x = g_ShadowTexture.SampleCmp(g_samplerComparisonLess_Linear_Clmap_s, r0.xz, r0.w).x;
  r0.x = r0.y + r0.x;
  r0.x = r0.x + r1.x;
  r0.y = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.y);
  r2.xyz = r2.xyz * r0.zzz;
  r0.z = dot(g_psLight.m_lightSourceDir.xyz, -r2.xyz);
  r0.w = -g_psMaterial.m_materials[6].x + r0.z;
  r0.z = -g_psLight.m_lightSourceParam2.x + r0.z;
  r0.z = saturate(g_psLight.m_lightSourceParam2.y * r0.z);
  r0.z = log2(r0.z);
  r0.z = g_psLight.m_lightSourceParam2.z * r0.z;
  r0.z = exp2(r0.z);
  r0.w = saturate(g_psMaterial.m_materials[6].y * r0.w);
  r0.w = r0.w * r0.w;
  r0.x = r0.x * r0.w;
  r0.x = -r0.x * 0.25 + 1;
  r0.x = r0.x * r0.x + -1;
  r0.x = g_psLight.m_lightSourceParam3.z * r0.x + 1;
  r3.xyz = g_NormalTexture.Sample(g_samplerPoint_Wrap_s, r1.zw).xyz;
  r1.xz = g_SpecularTexture.Sample(g_samplerPoint_Wrap_s, r1.zw).zw;
  r3.xy = r3.xy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r3.zz, r3.zz);
  r4.z = -1 + r0.w;
  r0.w = dot(r3.xy, r3.xy);
  r1.w = -r4.z * r4.z + 1;
  r0.w = r1.w * r0.w + 1.00000001e-007;
  r3.xy = r3.xy * r1.ww;
  r0.w = rsqrt(r0.w);
  r4.xy = r3.xy * r0.ww;
  r0.w = dot(r2.xyz, r4.xyz);
  r1.w = -r0.w * r0.w + 1;
  r0.w = r1.w * r1.z + r0.w;
  r1.y = 0.25;
  r1.x = g_MaterialTexture.Sample(g_samplerPoint_Clamp_s, r1.xy).w;
  r1.x = r1.z * r1.x;
  r0.w = saturate(max(r1.x, r0.w));
  r1.x = 1 / r0.y;
  r0.y = -g_psLight.m_lightSourceParam1.w * r0.y + r1.x;
  r0.y = min(g_psMaterial.m_materials[7].w, r0.y);
  r0.y = max(0, r0.y);
  r1.xyz = g_psLight.m_lightSourceColor.xyz * r0.yyy;
  r1.xyz = r1.xyz * r0.zzz;
  r1.xyz = g_psScene.m_exposure.zzz * r1.xyz;
  r0.yzw = r1.xyz * r0.www;
  r0.xyz = r0.yzw * r0.xxx;
  o0.xyz = g_psLight.m_lightSourceParam3.yyy * r0.xyz;
  o0.w = 1;
  o1.xyzw = float4(0,0,0,1);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.25 on Thu Jan 21 00:38:50 2016
//
//
// Buffer Definitions: 
//
// cbuffer cPSScene
// {
//
//   struct PSScene
//   {
//       
//       float4x4 m_projectionView;     // Offset:    0
//       float4x4 m_projection;         // Offset:   64
//       float4x4 m_view;               // Offset:  128
//       float4x4 m_shadowProjection;   // Offset:  192
//       float4x4 m_shadowProjection2;  // Offset:  256
//       float4 m_eyepos;               // Offset:  320
//       float4 m_projectionParam;      // Offset:  336
//       float4 m_viewportSize;         // Offset:  352
//       float4 m_exposure;             // Offset:  368
//       float4 m_fogParam[3];          // Offset:  384
//       float4 m_fogColor;             // Offset:  432
//       float4 m_cameraCenterOffset;   // Offset:  448
//       float4 m_shadowMapResolutions; // Offset:  464
//
//   } g_psScene;                       // Offset:    0 Size:   480
//
// }
//
// cbuffer cPSLight
// {
//
//   struct PSLight
//   {
//       
//       float4 m_lightDir0;            // Offset:    0
//       float4 m_lightColor0;          // Offset:   16
//       float4 m_lightColor1;          // Offset:   32
//       float4 m_lightSourcePos;       // Offset:   48
//       float4 m_lightSourceColor;     // Offset:   64
//       float4 m_lightSourceDir;       // Offset:   80
//       float4 m_lightSourceParam1;    // Offset:   96
//       float4 m_lightSourceParam2;    // Offset:  112
//       float4 m_lightSourceParam3;    // Offset:  128
//       float4 m_lightPos0;            // Offset:  144
//       float4 m_lightParam2;          // Offset:  160
//
//   } g_psLight;                       // Offset:    0 Size:   176
//
// }
//
// cbuffer cPSMaterial
// {
//
//   struct PSMaterial
//   {
//       
//       float4 m_materials[8];         // Offset:    0
//
//   } g_psMaterial;                    // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samplerPoint_Wrap               sampler      NA          NA    8        1
// g_samplerPoint_Clamp              sampler      NA          NA    9        1
// g_samplerComparisonLess_Linear_Clmap  sampler_c      NA          NA   15        1
// g_NormalTexture                   texture  float4          2d    0        1
// g_SpecularTexture                 texture  float4          2d    1        1
// g_DepthTexture                    texture  float4          2d    2        1
// g_ShadowTexture                   texture  float4          2d    3        1
// g_MaterialTexture                 texture  float4          2d   10        1
// cPSScene                          cbuffer      NA          NA    2        1
// cPSLight                          cbuffer      NA          NA    3        1
// cPSMaterial                       cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[30], immediateIndexed
dcl_constantbuffer cb3[9], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 6
round_ni r0.xyzw, v0.xyxy
mad r0.xyzw, r0.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.100000, 0.100000, 0.100000, 0.100000)
frc r0.xyzw, r0.xyzw
ge r0.xyzw, r0.xyzw, l(0.300000, 0.300000, 0.300000, 0.300000)
movc r0.xyzw, r0.xyzw, l(0.625000,0.625000,-0.375000,-0.375000), l(0.375000,0.375000,-0.625000,-0.625000)
div r1.xy, v1.xyxx, v1.wwww
add r1.xy, r1.xyxx, -cb2[28].xyxx
mul r1.xy, r1.xyxx, cb2[21].xyxx
div r1.zw, v2.xxxy, v2.wwww
sample_indexable(texture2d)(float,float,float,float) r2.x, r1.zwzz, t2.xyzw, s8
add r2.x, r2.x, -cb2[21].w
div r2.z, cb2[21].z, r2.x
mul r2.xy, r1.xyxx, r2.zzzz
mov r2.w, l(1.000000)
dp4 r1.x, r2.xyzw, cb2[12].xyzw
dp4 r1.y, r2.xyzw, cb2[13].xyzw
dp4 r3.x, r2.xyzw, cb2[15].xyzw
dp4 r4.z, r2.xyzw, cb2[14].xyzw
add r2.xyz, -r2.xyzx, cb3[3].xyzx
div r2.w, r3.x, cb2[29].y
mad r4.xy, r0.xyxx, r2.wwww, r1.xyxx
div r3.yzw, r4.xxyz, r3.xxxx
sample_c_indexable(texture2d)(float,float,float,float) r3.y, r3.yzyy, t3.xxxx, s15, r3.w
mad r4.xy, r0.zyzz, r2.wwww, r1.xyxx
div r5.xyz, r4.xyzx, r3.xxxx
sample_c_indexable(texture2d)(float,float,float,float) r0.y, r5.xyxx, t3.xxxx, s15, r5.z
add r0.y, r0.y, r3.y
mad r4.xy, r0.xwxx, r2.wwww, r1.xyxx
mad r5.xy, r0.zwzz, r2.wwww, r1.xyxx
div r0.xzw, r4.xxyz, r3.xxxx
mov r5.z, r4.z
div r3.xyz, r5.xyzx, r3.xxxx
sample_c_indexable(texture2d)(float,float,float,float) r1.x, r3.xyxx, t3.xxxx, s15, r3.z
sample_c_indexable(texture2d)(float,float,float,float) r0.x, r0.xzxx, t3.xxxx, s15, r0.w
add r0.x, r0.x, r0.y
add r0.x, r1.x, r0.x
dp3 r0.y, r2.xyzx, r2.xyzx
rsq r0.z, r0.y
mul r2.xyz, r0.zzzz, r2.xyzx
dp3 r0.z, cb3[5].xyzx, -r2.xyzx
add r0.w, r0.z, -cb4[6].x
add r0.z, r0.z, -cb3[7].x
mul_sat r0.z, r0.z, cb3[7].y
log r0.z, r0.z
mul r0.z, r0.z, cb3[7].z
exp r0.z, r0.z
mul_sat r0.w, r0.w, cb4[6].y
mul r0.w, r0.w, r0.w
mul r0.x, r0.w, r0.x
mad r0.x, -r0.x, l(0.250000), l(1.000000)
mad r0.x, r0.x, r0.x, l(-1.000000)
mad r0.x, cb3[8].z, r0.x, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r1.zwzz, t0.xyzw, s8
sample_indexable(texture2d)(float,float,float,float) r1.xz, r1.zwzz, t1.zxwy, s8
mad r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r3.zzzz, r3.zzzz
add r4.z, r0.w, l(-1.000000)
dp2 r0.w, r3.xyxx, r3.xyxx
mad r1.w, -r4.z, r4.z, l(1.000000)
mad r0.w, r1.w, r0.w, l(1.000000012E-007)
mul r3.xy, r1.wwww, r3.xyxx
rsq r0.w, r0.w
mul r4.xy, r0.wwww, r3.xyxx
dp3 r0.w, r2.xyzx, r4.xyzx
mad r1.w, -r0.w, r0.w, l(1.000000)
mad r0.w, r1.w, r1.z, r0.w
mov r1.y, l(0.250000)
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t10.wxyz, s9
mul r1.x, r1.x, r1.z
max_sat r0.w, r0.w, r1.x
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mad r0.y, -cb3[6].w, r0.y, r1.x
min r0.y, r0.y, cb4[7].w
max r0.y, r0.y, l(0.000000)
mul r1.xyz, r0.yyyy, cb3[4].xyzx
mul r1.xyz, r0.zzzz, r1.xyzx
mul r1.xyz, r1.xyzx, cb2[23].zzzz
mul r0.yzw, r0.wwww, r1.xxyz
mul r0.xyz, r0.xxxx, r0.yzwy
mul o0.xyz, r0.xyzx, cb3[8].yyyy
mov o0.w, l(1.000000)
mov o1.xyzw, l(0,0,0,1.000000)
ret 
// Approximately 83 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
