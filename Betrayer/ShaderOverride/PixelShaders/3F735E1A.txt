//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 EdgeSampleOffsets[4];
//   float2 InvRandomAngleTextureSize;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D RandomAngleTexture;
//   float4 RefiningSampleOffsets[16];
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4x4 ScreenToShadowMatrix;
//   sampler2D ShadowDepthTexture;
//   float ShadowFadeFraction;
//
//
// Registers:
//
//   Name                      Reg   Size
//   ------------------------- ----- ----
//   InvRandomAngleTextureSize c0       1
//   ScreenPositionScaleBias   c1       1
//   MinZ_MaxZRatio            c2       1
//   NvStereoEnabled           c3       1
//   RefiningSampleOffsets     c8      16
//   ScreenToShadowMatrix      c24      4
//   EdgeSampleOffsets         c28      4
//   ShadowFadeFraction        c32      1
//   SceneColorTexture         s0       1
//   NvStereoFixTexture        s1       1
//   ShadowDepthTexture        s2       1
//   RandomAngleTexture        s3       1
//

    ps_3_0
    def c4, 0.0625, 0, 1, 0.999000013
    def c5, 0.5, 2, -1, 1
    def c6, 0.125, 0, 9.99999975e-005, -0.999899983
    def c7, 0.03125, 0.699999988, 0, 0
    dcl_texcoord v0.xyw
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    if_ne c3.x, -c3.x
      texld r0, c4, s1
      add r0.y, -r0.y, v0.w
      mad r0.x, r0.x, r0.y, v0.x
      mov r0.yz, v0.xyww
    else
      mov r0.xyz, v0.xyww
    endif
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    mov r0.zw, c4.y
    texldl r0, r0, s0
    mov r0.z, c4.z
    add r0.x, r0.z, -c2.y
    add r0.x, -r0.x, r0.w
    rcp r0.x, r0.x
    mul r0.x, r0.x, -c2.x
    rcp r0.y, v0.w
    mul r1.xy, r0.y, v0
    mul r1.xy, r0.x, r1
    mul r2, r1.y, c25
    mad r1, c24, r1.x, r2
    mad r1, c26, r0.x, r1
    add r1, r1, c27
    rcp r0.x, r1.w
    mul r2.xy, r0.x, r1
    min r0.w, r1.z, c4.w
    mad r1.zw, v0.xyxy, r0.y, c4.z
    mul r1.zw, r1, c0.xyxy
    mul r1.zw, r1, c5.x
    texld r3, r1.zwzw, s3
    mad_pp r3, r3.yxyx, c5.y, c5.z
    mul_pp r4, r3.wzwz, c5.wzwz
    mad r5, r4.zwzw, c28.xxzz, r2.xyxy
    mad_pp r5, r3.zwzw, c28.yyww, r5
    texld_pp r6, r5, s2
    texld_pp r5, r5.zwzw, s2
    mov_pp r6.y, r5.x
    add r1.zw, r0.w, -r6.xyxy
    cmp r1.zw, r1, c4.y, c4.z
    mad r5, r4.zwzw, c29.xxzz, r2.xyxy
    mad_pp r5, r3.zwzw, c29.yyww, r5
    texld_pp r6, r5, s2
    texld_pp r5, r5.zwzw, s2
    mov_pp r6.y, r5.x
    add r2.zw, r0.w, -r6.xyxy
    cmp r2.zw, r2, c4.y, c4.z
    dp2add_pp r0.y, r2.zwzw, c6.x, c6.y
    dp2add_pp r0.y, r1.zwzw, c6.x, r0.y
    mad r5, r4.zwzw, c30.xxzz, r2.xyxy
    mad_pp r5, r3.zwzw, c30.yyww, r5
    texld_pp r6, r5, s2
    texld_pp r5, r5.zwzw, s2
    mov_pp r6.y, r5.x
    add r1.zw, r0.w, -r6.xyxy
    cmp r1.zw, r1, c4.y, c4.z
    dp2add_pp r0.y, r1.zwzw, c6.x, r0.y
    mad r2, r4, c31.xxzz, r2.xyxy
    mad_pp r2, r3, c31.yyww, r2
    texld_pp r3, r2, s2
    texld_pp r2, r2.zwzw, s2
    mov_pp r3.y, r2.x
    add r1.zw, r0.w, -r3.xyxy
    cmp r1.zw, r1, c4.y, c4.z
    dp2add_pp r0.y, r1.zwzw, c6.x, r0.y
    add r1.z, -r0.y, c6.z
    add r1.w, r0.y, c6.w
    cmp r1.w, r1.w, c4.y, c4.z
    cmp r1.z, r1.z, c4.y, r1.w
    if_ne r1.z, -r1.z
      mad_pp r2, r1.xyxy, r0.x, c8
      mul r3, r2.xyxx, c4.zzyy
      texldl_pp r3, r3, s2
      mul r2, r2.zwxx, c4.zzyy
      texldl_pp r2, r2, s2
      mad_pp r4, r1.xyxy, r0.x, c9
      mul r5, r4.xyxx, c4.zzyy
      texldl_pp r5, r5, s2
      mul r4, r4.zwxx, c4.zzyy
      texldl_pp r4, r4, s2
      mov_pp r3.y, r2.x
      mov_pp r3.z, r5.x
      mov_pp r3.w, r4.x
      add r2, r0.w, -r3
      cmp r2, r2, c4.y, c4.z
      dp4_pp r1.z, r2, c7.x
      mad_pp r2, r1.xyxy, r0.x, c10
      mul r3, r2.xyxx, c4.zzyy
      texldl r3, r3, s2
      mul r2, r2.zwxx, c4.zzyy
      texldl r2, r2, s2
      mad_pp r4, r1.xyxy, r0.x, c11
      mul r5, r4.xyxx, c4.zzyy
      texldl r5, r5, s2
      mul r4, r4.zwxx, c4.zzyy
      texldl r4, r4, s2
      mov r3.y, r2.x
      mov r3.z, r5.x
      mov r3.w, r4.x
      add r2, r0.w, -r3
      cmp r2, r2, c4.y, c4.z
      dp4_pp r1.w, r2, c7.x
      add_pp r1.z, r1.w, r1.z
      mad_pp r2, r1.xyxy, r0.x, c12
      mul r3, r2.xyxx, c4.zzyy
      texldl r3, r3, s2
      mul r2, r2.zwxx, c4.zzyy
      texldl r2, r2, s2
      mad_pp r4, r1.xyxy, r0.x, c13
      mul r5, r4.xyxx, c4.zzyy
      texldl r5, r5, s2
      mul r4, r4.zwxx, c4.zzyy
      texldl r4, r4, s2
      mov r3.y, r2.x
      mov r3.z, r5.x
      mov r3.w, r4.x
      add r2, r0.w, -r3
      cmp r2, r2, c4.y, c4.z
      dp4_pp r1.w, r2, c7.x
      add_pp r1.z, r1.w, r1.z
      mad_pp r2, r1.xyxy, r0.x, c14
      mul r3, r2.xyxx, c4.zzyy
      texldl r3, r3, s2
      mul r2, r2.zwxx, c4.zzyy
      texldl r2, r2, s2
      mad_pp r4, r1.xyxy, r0.x, c15
      mul r5, r4.xyxx, c4.zzyy
      texldl r5, r5, s2
      mul r4, r4.zwxx, c4.zzyy
      texldl r4, r4, s2
      mov r3.y, r2.x
      mov r3.z, r5.x
      mov r3.w, r4.x
      add r2, r0.w, -r3
      cmp r2, r2, c4.y, c4.z
      dp4_pp r1.w, r2, c7.x
      add_pp r1.z, r1.w, r1.z
      mad_pp r2, r1.xyxy, r0.x, c16
      mul r3, r2.xyxx, c4.zzyy
      texldl r3, r3, s2
      mul r2, r2.zwxx, c4.zzyy
      texldl r2, r2, s2
      mad_pp r4, r1.xyxy, r0.x, c17
      mul r5, r4.xyxx, c4.zzyy
      texldl r5, r5, s2
      mul r4, r4.zwxx, c4.zzyy
      texldl r4, r4, s2
      mov r3.y, r2.x
      mov r3.z, r5.x
      mov r3.w, r4.x
      add r2, r0.w, -r3
      cmp r2, r2, c4.y, c4.z
      dp4_pp r1.w, r2, c7.x
      add_pp r1.z, r1.w, r1.z
      mad_pp r2, r1.xyxy, r0.x, c18
      mul r3, r2.xyxx, c4.zzyy
      texldl r3, r3, s2
      mul r2, r2.zwxx, c4.zzyy
      texldl r2, r2, s2
      mad_pp r4, r1.xyxy, r0.x, c19
      mul r5, r4.xyxx, c4.zzyy
      texldl r5, r5, s2
      mul r4, r4.zwxx, c4.zzyy
      texldl r4, r4, s2
      mov r3.y, r2.x
      mov r3.z, r5.x
      mov r3.w, r4.x
      add r2, r0.w, -r3
      cmp r2, r2, c4.y, c4.z
      dp4_pp r1.w, r2, c7.x
      add_pp r1.z, r1.w, r1.z
      mad_pp r2, r1.xyxy, r0.x, c20
      mul r3, r2.xyxx, c4.zzyy
      texldl r3, r3, s2
      mul r2, r2.zwxx, c4.zzyy
      texldl r2, r2, s2
      mad_pp r4, r1.xyxy, r0.x, c21
      mul r5, r4.xyxx, c4.zzyy
      texldl r5, r5, s2
      mul r4, r4.zwxx, c4.zzyy
      texldl r4, r4, s2
      mov r3.y, r2.x
      mov r3.z, r5.x
      mov r3.w, r4.x
      add r2, r0.w, -r3
      cmp r2, r2, c4.y, c4.z
      dp4_pp r1.w, r2, c7.x
      add_pp r1.z, r1.w, r1.z
      mad_pp r2, r1.xyxy, r0.x, c22
      mul r3, r2.xyxx, c4.zzyy
      texldl r3, r3, s2
      mul r2, r2.zwxx, c4.zzyy
      texldl r2, r2, s2
      mad_pp r4, r1.xyxy, r0.x, c23
      mul r5, r4.xyxx, c4.zzyy
      texldl r5, r5, s2
      mul r4, r4.zwxx, c4.zzyy
      texldl r4, r4, s2
      mov r3.y, r2.x
      mov r3.z, r5.x
      mov r3.w, r4.x
      add r2, r0.w, -r3
      cmp r2, r2, c4.y, c4.z
      dp4_pp r0.x, r2, c7.x
      add_pp r0.x, r0.x, r1.z
      lrp_pp r1.x, c7.y, r0.x, r0.y
      mov_pp r0.y, r1.x
    endif
    mul_pp r0.x, r0.y, r0.y
    mul_pp r0.x, r0.y, r0.x
    mad r0.x, r0.x, r0.x, -c4.z
    mad_pp r0.x, c32.x, r0.x, r0.z
    rsq_pp r0.x, r0.x
    rcp_pp oC0, r0.x

// approximately 256 instruction slots used (76 texture, 180 arithmetic)
