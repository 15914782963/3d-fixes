//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 EdgeSampleOffsets[2];
//   float3 FalloffParameters;
//   float2 InvRandomAngleTextureSize;
//   float4 LightPosition;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D RandomAngleTexture;
//   float4 RefiningSampleOffsets[6];
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4x4 ScreenToShadowMatrix;
//   float4x4 ScreenToWorld;
//   sampler2D ShadowDepthTexture;
//   float4 ShadowModulateColor;
//
//
// Registers:
//
//   Name                      Reg   Size
//   ------------------------- ----- ----
//   InvRandomAngleTextureSize c0       1
//   ScreenPositionScaleBias   c1       1
//   MinZ_MaxZRatio            c2       1
//   NvStereoEnabled           c3       1
//   RefiningSampleOffsets     c8       6
//   ScreenToShadowMatrix      c14      4
//   ScreenToWorld             c18      4
//   EdgeSampleOffsets         c22      2
//   ShadowModulateColor       c24      1
//   LightPosition             c25      1
//   FalloffParameters         c26      1
//   SceneColorTexture         s0       1
//   NvStereoFixTexture        s1       1
//   ShadowDepthTexture        s2       1
//   RandomAngleTexture        s3       1
//

    ps_3_0
    def c4, 0.0625, 0, 1, 0.999000013
    def c5, 0.5, 2, -1, 1
    def c6, 0.25, 0, 9.99999975e-005, -0.999899983
    def c7, 0.0833333358, 0.699999988, 0, 0
  def c200, 0.5, 0, 0.0625, 0
  dcl_2d s13
    dcl_texcoord v0.xyw
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    if_ne c3.x, -c3.x
      texld r0, c4, s1
      add r0.y, -r0.y, v0.w
      mad r0.x, r0.x, r0.y, v0.x
      mov r0.yz, v0.xyww
    else
      mov r0.xyz, v0.xyww
        endif
		   mov r16.xyw, v0
    texldl r11, c200.z, s13
    add r11.y, r16.w, -r11.y
    mul r11.x, r11.x, r11.y
    add r16.x, r16.x, r11.x
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    mov r0.zw, c4.y
    texldl r0, r0, s0
    mov r0.z, c4.z
    add r0.x, r0.z, -c2.y
    add r0.x, -r0.x, r0.w
    rcp r0.x, r0.x
    mul r0.x, r0.x, -c2.x
    rcp r0.y, r16.w
    mul r1.xy, r0.y, r16
    mul r1.xy, r0.x, r1
    mul r2, r1.y, c15
  texldl r16, c200.z, s13
  add r16.y, r0.x, -r16.y
  mul r16.x, r16.x, r16.y
  add r1.x, r1.x, -r16.x
    mad r2, c14, r1.x, r2
    mad r2, c16, r0.x, r2
    add r2, r2, c17
    rcp r0.w, r2.w
    mul r1.zw, r0.w, r2.xyxy
    min r3.x, r2.z, c4.w
    mad r2.zw, r16.xyxy, r0.y, c4.z
    mul r2.zw, r2, c0.xyxy
    mul r2.zw, r2, c5.x
    texld r4, r2.zwzw, s3
    mad_pp r4, r4.yxyx, c5.y, c5.z
    mul_pp r5, r4.wzwz, c5.wzwz
    mad r6, r5.zwzw, c22.xxzz, r1.zwzw
    mad_pp r6, r4.zwzw, c22.yyww, r6
    texld_pp r7, r6, s2
    texld_pp r6, r6.zwzw, s2
    mov_pp r7.y, r6.x
    add r2.zw, r3.x, -r7.xyxy
    cmp r2.zw, r2, c4.y, c4.z
    mad r5, r5, c23.xxzz, r1.zwzw
    mad_pp r4, r4, c23.yyww, r5
    texld_pp r5, r4, s2
    texld_pp r4, r4.zwzw, s2
    mov_pp r5.y, r4.x
    add r1.zw, r3.x, -r5.xyxy
    cmp r1.zw, r1, c4.y, c4.z
    dp2add_pp r0.y, r1.zwzw, c6.x, c6.y
    dp2add_pp r0.y, r2.zwzw, c6.x, r0.y
    add r1.z, -r0.y, c6.z
    add r1.w, r0.y, c6.w
    cmp r1.w, r1.w, c4.y, c4.z
    cmp r1.z, r1.z, c4.y, r1.w
    if_ne r1.z, -r1.z
      mad_pp r4, r2.xyxy, r0.w, c8
      mul r5, r4.xyxx, c4.zzyy
      texldl_pp r5, r5, s2
      mul r4, r4.zwxx, c4.zzyy
      texldl_pp r4, r4, s2
      mad_pp r6, r2.xyxy, r0.w, c9
      mul r7, r6.xyxx, c4.zzyy
      texldl_pp r7, r7, s2
      mul r6, r6.zwxx, c4.zzyy
      texldl_pp r6, r6, s2
      mov_pp r5.y, r4.x
      mov_pp r5.z, r7.x
      mov_pp r5.w, r6.x
      add r4, r3.x, -r5
      cmp r4, r4, c4.y, c4.z
      dp4_pp r1.z, r4, c7.x
      mad_pp r4, r2.xyxy, r0.w, c10
      mul r5, r4.xyxx, c4.zzyy
      texldl r5, r5, s2
      mul r4, r4.zwxx, c4.zzyy
      texldl r4, r4, s2
      mad_pp r6, r2.xyxy, r0.w, c11
      mul r7, r6.xyxx, c4.zzyy
      texldl r7, r7, s2
      mul r6, r6.zwxx, c4.zzyy
      texldl r6, r6, s2
      mov r5.y, r4.x
      mov r5.z, r7.x
      mov r5.w, r6.x
      add r4, r3.x, -r5
      cmp r4, r4, c4.y, c4.z
      dp4_pp r1.w, r4, c7.x
      add_pp r1.z, r1.w, r1.z
      mad_pp r4, r2.xyxy, r0.w, c12
      mul r5, r4.xyxx, c4.zzyy
      texldl r5, r5, s2
      mul r4, r4.zwxx, c4.zzyy
      texldl r4, r4, s2
      mad_pp r2, r2.xyxy, r0.w, c13
      mul r6, r2.xyxx, c4.zzyy
      texldl r6, r6, s2
      mul r2, r2.zwxx, c4.zzyy
      texldl r2, r2, s2
      mov r5.y, r4.x
      mov r5.z, r6.x
      mov r5.w, r2.x
      add r2, r3.x, -r5
      cmp r2, r2, c4.y, c4.z
      dp4_pp r0.w, r2, c7.x
      add_pp r0.w, r0.w, r1.z
      lrp_pp r1.z, c7.y, r0.w, r0.y
      mov_pp r0.y, r1.z
    endif
    mul r1.yzw, r1.y, c19.xxyz
    mad r1.xyz, c18, r1.x, r1.yzww
    mad r1.xyz, c20, r0.x, r1
    add r1.xyz, r1, c21
    add r1.xyz, -r1, c25
    mul r1.xyz, r1, c25.w
    dp3 r0.x, r1, r1
    rsq r0.x, r0.x
    rcp r0.x, r0.x
    mad r0.x, r0.x, c26.y, c26.z
    max r1.x, r0.x, c4.y
    mad r0.x, r1.x, -r1.x, c4.z
    max r1.x, r0.x, c4.y
    pow_pp r0.x, r1.x, c26.x
    add r1, -r0.z, c24
    mad_pp r1, r0.x, r1, c4.z
    mul_pp r0.x, r0.y, r0.y
    mul_pp r0.x, r0.y, r0.x
    add_pp r2, -r1, c4.z
    mad_pp oC0, r0.x, r2, r1

// approximately 149 instruction slots used (32 texture, 117 arithmetic)


