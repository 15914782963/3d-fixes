//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 EdgeSampleOffsets[2];
//   float3 FalloffParameters;
//   float2 InvRandomAngleTextureSize;
//   float4 LightPosition;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D RandomAngleTexture;
//   float4 RefiningSampleOffsets[4];
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4x4 ScreenToShadowMatrix;
//   float4x4 ScreenToWorld;
//   float2 ShadowBufferSize;
//   sampler2D ShadowDepthTexture;
//   float4 ShadowModulateColor;
//
//
// Registers:
//
//   Name                      Reg   Size
//   ------------------------- ----- ----
//   InvRandomAngleTextureSize c0       1
//   ScreenPositionScaleBias   c1       1
//   MinZ_MaxZRatio            c2       1
//   NvStereoEnabled           c3       1
//   ScreenToShadowMatrix      c8       4
//   RefiningSampleOffsets     c12      4
//   ScreenToWorld             c16      4
//   EdgeSampleOffsets         c20      2
//   ShadowBufferSize          c22      1
//   ShadowModulateColor       c23      1
//   LightPosition             c24      1
//   FalloffParameters         c25      1
//   SceneColorTexture         s0       1
//   NvStereoFixTexture        s1       1
//   ShadowDepthTexture        s2       1
//   RandomAngleTexture        s3       1
//

    ps_3_0
    def c4, 0.0625, 0, 1, 0.999000013
    def c5, 0.5, 2, -1, 1
    def c6, 9.99999975e-005, -0.999899983, 0.125, 0.699999988
  def c200, 0.5, 0, 0.0625, 0
  dcl_2d s13
    dcl_texcoord v0.xyw
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    if_ne c3.x, -c3.x
      texld r0, c4, s1
      add r0.y, -r0.y, v0.w
      mad r0.x, r0.x, r0.y, v0.x
      mov r0.yz, v0.xyww
    else
      mov r0.xyz, v0.xyww
        endif
		   mov r16.xyw, v0
    texldl r11, c200.z, s13
    add r11.y, r16.w, -r11.y
    mul r11.x, r11.x, r11.y
    add r16.x, r16.x, r11.x
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    mov r0.zw, c4.y
    texldl r0, r0, s0
    mov r0.z, c4.z
    add r0.x, r0.z, -c2.y
    add r0.x, -r0.x, r0.w
    rcp r0.x, r0.x
    mul r0.x, r0.x, -c2.x
    rcp r0.y, r16.w
    mul r1.xy, r0.y, r16
    mul r1.xy, r0.x, r1
    mul r2, r1.y, c9
  texldl r16, c200.z, s13
  add r16.y, r0.x, -r16.y
  mul r16.x, r16.x, r16.y
  add r1.x, r1.x, -r16.x
    mad r2, c8, r1.x, r2
    mad r2, c10, r0.x, r2
    add r2, r2, c11
    rcp r0.w, r2.w
    mul r1.zw, r0.w, r2.xyxy
    min r3.z, r2.z, c4.w
    mad r2.zw, r16.xyxy, r0.y, c4.z
    mul r2.zw, r2, c0.xyxy
    mul r2.zw, r2, c5.x
    texld r4, r2.zwzw, s3
    mad_pp r4, r4.yxyx, c5.y, c5.z
    mul_pp r5, r4.wzwz, c5.wzwz
    mad r6, r5.zwzw, c20.xxzz, r1.zwzw
    mad_pp r6, r4.zwzw, c20.yyww, r6
    mul r3.xyw, r6.xyzx, c4.zzzy
    texldl r7, r3, s2
    mul r3.xyw, r6.zwzx, c4.zzzy
    texldl r6, r3, s2
    add r7, -r7, r3.z
    cmp_pp r7, r7, c4.y, c4.z
    dp4_pp r0.y, r7, c4.x
    add r6, r3.z, -r6
    cmp_pp r6, r6, c4.y, c4.z
    dp4_pp r2.z, r6, c4.x
    add_pp r0.y, r0.y, r2.z
    mad r5, r5, c21.xxzz, r1.zwzw
    mad_pp r4, r4, c21.yyww, r5
    mov_pp r5.xy, r4
    mov r5.zw, r3
    texldl r6, r5, s2
    mov_pp r5.xy, r4.zwzw
    texldl r4, r5, s2
    add r6, r3.z, -r6
    cmp_pp r6, r6, c4.y, c4.z
    dp4_pp r1.z, r6, c4.x
    add_pp r0.y, r0.y, r1.z
    add r4, r3.z, -r4
    cmp_pp r4, r4, c4.y, c4.z
    dp4_pp r1.z, r4, c4.x
    add_pp r0.y, r0.y, r1.z
    add r1.z, -r0.y, c6.x
    add r1.w, r0.y, c6.y
    cmp r1.w, r1.w, c4.y, c4.z
    cmp r1.z, r1.z, c4.y, r1.w
    if_ne r1.z, -r1.z
      mad_pp r4, r2.xyxy, r0.w, c12
      mov_pp r5.xy, r4
      texldl r6, r5, s2
      mov_pp r5.xy, r4.zwzw
      texldl r7, r5, s2
      add r6, r3.z, -r6.wxyz
      add r7, r3.z, -r7.wxyz
      cmp_pp r6, r6, c4.y, c4.z
      cmp_pp r7, r7, c4.y, c4.z
      mul r4, r4, c22.xyxy
      frc_pp r4, r4
      mov_pp r8.xy, r6
      mov_pp r8.zw, r7.xyxy
      mov_pp r7.xy, r6.zwzw
      lrp_pp r6, r4.yyww, r7, r8
      mad_pp r7, r2.xyxy, r0.w, c13
      mov_pp r5.xy, r7
      texldl r8, r5, s2
      mov_pp r5.xy, r7.zwzw
      texldl r9, r5, s2
      add r8, r3.z, -r8.wxyz
      add r9, r3.z, -r9.wxyz
      cmp_pp r8, r8, c4.y, c4.z
      cmp_pp r9, r9, c4.y, c4.z
      mul r7, r7, c22.xyxy
      frc_pp r7, r7
      mov_pp r10.xy, r8
      mov_pp r10.zw, r9.xyxy
      mov_pp r9.xy, r8.zwzw
      lrp_pp r8, r7.yyww, r9, r10
      lrp_pp r9.xy, r4.xzzw, r6.ywzw, r6.xzzw
      lrp_pp r9.zw, r7.xyxz, r8.xyyw, r8.xyxz
      dp4_pp r1.z, r9, c6.z
      mad_pp r4, r2.xyxy, r0.w, c14
      mov_pp r5.xy, r4
      texldl r6, r5, s2
      mov_pp r5.xy, r4.zwzw
      texldl r7, r5, s2
      add r6, r3.z, -r6.wxyz
      add r7, r3.z, -r7.wxyz
      cmp_pp r6, r6, c4.y, c4.z
      cmp_pp r7, r7, c4.y, c4.z
      mul r4, r4, c22.xyxy
      frc_pp r4, r4
      mov_pp r8.xy, r6
      mov_pp r8.zw, r7.xyxy
      mov_pp r7.xy, r6.zwzw
      lrp_pp r6, r4.yyww, r7, r8
      mad_pp r2, r2.xyxy, r0.w, c15
      mov_pp r5.xy, r2
      texldl r7, r5, s2
      mov_pp r5.xy, r2.zwzw
      texldl r5, r5, s2
      add r7, r3.z, -r7.wxyz
      add r3, r3.z, -r5.wxyz
      cmp_pp r5, r7, c4.y, c4.z
      cmp_pp r3, r3, c4.y, c4.z
      mul r2, r2, c22.xyxy
      frc_pp r2, r2
      mov_pp r7.xy, r5
      mov_pp r7.zw, r3.xyxy
      mov_pp r3.xy, r5.zwzw
      lrp_pp r5, r2.yyww, r3, r7
      lrp_pp r3.xy, r4.xzzw, r6.ywzw, r6.xzzw
      lrp_pp r3.zw, r2.xyxz, r5.xyyw, r5.xyxz
      dp4_pp r0.w, r3, c6.z
      add_pp r0.w, r0.w, r1.z
      lrp_pp r1.z, c6.w, r0.w, r0.y
      mov_pp r0.y, r1.z
    endif
    mul r1.yzw, r1.y, c17.xxyz
    mad r1.xyz, c16, r1.x, r1.yzww
    mad r1.xyz, c18, r0.x, r1
    add r1.xyz, r1, c19
    add r1.xyz, -r1, c24
    mul r1.xyz, r1, c24.w
    dp3 r0.x, r1, r1
    rsq r0.x, r0.x
    rcp r0.x, r0.x
    mad r0.x, r0.x, c25.y, c25.z
    max r1.x, r0.x, c4.y
    mad r0.x, r1.x, -r1.x, c4.z
    max r1.x, r0.x, c4.y
    pow_pp r0.x, r1.x, c25.x
    add r1, -r0.z, c23
    mad_pp r1, r0.x, r1, c4.z
    mul_pp r0.x, r0.y, r0.y
    mul_pp r0.x, r0.y, r0.x
    add_pp r2, -r1, c4.z
    mad_pp oC0, r0.x, r2, r1

// approximately 176 instruction slots used (28 texture, 148 arithmetic)


