//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 EdgeSampleOffsets[2];
//   float3 FalloffParameters;
//   float2 InvRandomAngleTextureSize;
//   float4 LightPosition;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D RandomAngleTexture;
//   float4 RefiningSampleOffsets[2];
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4x4 ScreenToShadowMatrix;
//   float4x4 ScreenToWorld;
//   sampler2D ShadowDepthTexture;
//   float4 ShadowModulateColor;
//
//
// Registers:
//
//   Name                      Reg   Size
//   ------------------------- ----- ----
//   InvRandomAngleTextureSize c0       1
//   ScreenPositionScaleBias   c1       1
//   MinZ_MaxZRatio            c2       1
//   NvStereoEnabled           c3       1
//   ScreenToShadowMatrix      c8       4
//   ScreenToWorld             c12      4
//   RefiningSampleOffsets     c16      2
//   EdgeSampleOffsets         c18      2
//   ShadowModulateColor       c20      1
//   LightPosition             c21      1
//   FalloffParameters         c22      1
//   SceneColorTexture         s0       1
//   NvStereoFixTexture        s1       1
//   ShadowDepthTexture        s2       1
//   RandomAngleTexture        s3       1
//

    ps_3_0
    def c4, 0.0625, 0, 1, 0.999000013
    def c5, 0.5, 2, -1, 1
    def c6, 0.25, 0.00039999999, -3.99959993, 0.699999988
  def c200, 0.5, 0, 0.0625, 0
  dcl_2d s13
    dcl_texcoord v0.xyw
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    if_ne c3.x, -c3.x
      texld r0, c4, s1
      add r0.y, -r0.y, v0.w
      mad r0.x, r0.x, r0.y, v0.x
      mov r0.yz, v0.xyww
    else
      mov r0.xyz, v0.xyww
        endif
		   mov r16.xyw, v0
    texldl r11, c200.z, s13
    add r11.y, r16.w, -r11.y
    mul r11.x, r11.x, r11.y
    add r16.x, r16.x, r11.x
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    mov r0.zw, c4.y
    texldl r0, r0, s0
    mov r0.z, c4.z
    add r0.x, r0.z, -c2.y
    add r0.x, -r0.x, r0.w
    rcp r0.x, r0.x
    mul r0.x, r0.x, -c2.x
    rcp r0.y, r16.w
    mul r1.xy, r0.y, r16
    mul r1.xy, r0.x, r1
    mul r2, r1.y, c9
  texldl r16, c200.z, s13
  add r16.y, r0.x, -r16.y
  mul r16.x, r16.x, r16.y
  add r1.x, r1.x, -r16.x
    mad r2, c8, r1.x, r2
    mad r2, c10, r0.x, r2
    add r2, r2, c11
    rcp r0.w, r2.w
    mul r1.zw, r0.w, r2.xyxy
    min r3.z, r2.z, c4.w
    mad r2.zw, r16.xyxy, r0.y, c4.z
    mul r2.zw, r2, c0.xyxy
    mul r2.zw, r2, c5.x
    texld r4, r2.zwzw, s3
    mad_pp r4, r4.yxyx, c5.y, c5.z
    mul_pp r5, r4.wzwz, c5.wzwz
    mad r6, r5.zwzw, c18.xxzz, r1.zwzw
    mad_pp r6, r4.zwzw, c18.yyww, r6
    mul r3.xyw, r6.xyzx, c4.zzzy
    texldl_pp r7, r3, s2
    mul r3.xyw, r6.zwzx, c4.zzzy
    texldl r6, r3, s2
    add_pp r0.y, r6.x, r7.x
    mad r5, r5, c19.xxzz, r1.zwzw
    mad_pp r4, r4, c19.yyww, r5
    mov_pp r3.xy, r4
    texldl r5, r3, s2
    add_pp r0.y, r0.y, r5.x
    mov_pp r3.xy, r4.zwzw
    texldl r4, r3, s2
    add_pp r0.y, r0.y, r4.x
    mul_pp r1.z, r0.y, c6.x
    add r1.w, -r0.y, c6.y
    add r0.y, r0.y, c6.z
    cmp r0.y, r0.y, c4.y, c4.z
    cmp r0.y, r1.w, c4.y, r0.y
    if_ne r0.y, -r0.y
      mad_pp r4, r2.xyxy, r0.w, c16
      mov_pp r3.xy, r4
      texldl_pp r5, r3, s2
      mov_pp r3.xy, r4.zwzw
      texldl r4, r3, s2
      add_pp r0.y, r4.x, r5.x
      mad_pp r2, r2.xyxy, r0.w, c17
      mov_pp r3.xy, r2
      texldl r4, r3, s2
      add_pp r0.y, r0.y, r4.x
      mov_pp r3.xy, r2.zwzw
      texldl r2, r3, s2
      add_pp r0.y, r0.y, r2.x
      mad r0.y, r0.y, c6.x, -r1.z
      mad_pp r1.z, r0.y, c6.w, r1.z
    endif
    mul r2.xyz, r1.y, c13
    mad r1.xyw, c12.xyzz, r1.x, r2.xyzz
    mad r0.xyw, c14.xyzz, r0.x, r1
    add r0.xyw, r0, c15.xyzz
    add r0.xyw, -r0, c21.xyzz
    mul r0.xyw, r0, c21.w
    dp3 r0.x, r0.xyww, r0.xyww
    rsq r0.x, r0.x
    rcp r0.x, r0.x
    mad r0.x, r0.x, c22.y, c22.z
    max r1.x, r0.x, c4.y
    mad r0.x, r1.x, -r1.x, c4.z
    max r1.x, r0.x, c4.y
    pow_pp r0.x, r1.x, c22.x
    add r2, -r0.z, c20
    mad_pp r0, r0.x, r2, c4.z
    mul_pp r1.x, r1.z, r1.z
    mul_pp r1.x, r1.z, r1.x
    add_pp r2, -r0, c4.z
    mad_pp oC0, r1.x, r2, r0

// approximately 106 instruction slots used (20 texture, 86 arithmetic)


