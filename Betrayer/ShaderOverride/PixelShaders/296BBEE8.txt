//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 EdgeSampleOffsets[4];
//   float2 InvRandomAngleTextureSize;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D RandomAngleTexture;
//   float4 RefiningSampleOffsets[6];
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4x4 ScreenToShadowMatrix;
//   float2 ShadowBufferSize;
//   sampler2D ShadowDepthTexture;
//   float ShadowFadeFraction;
//
//
// Registers:
//
//   Name                      Reg   Size
//   ------------------------- ----- ----
//   InvRandomAngleTextureSize c0       1
//   ScreenPositionScaleBias   c1       1
//   MinZ_MaxZRatio            c2       1
//   NvStereoEnabled           c3       1
//   RefiningSampleOffsets     c8       6
//   ScreenToShadowMatrix      c14      4
//   EdgeSampleOffsets         c18      4
//   ShadowBufferSize          c22      1
//   ShadowFadeFraction        c23      1
//   SceneColorTexture         s0       1
//   NvStereoFixTexture        s1       1
//   ShadowDepthTexture        s2       1
//   RandomAngleTexture        s3       1
//

    ps_3_0
    def c4, 0.0625, 0, 1, 0.999000013
    def c5, 0.5, 2, -1, 1
    def c6, 0.03125, 9.99999975e-005, -0.999899983, 0.0833333358
    def c7, 0.699999988, 0, 0, 0
    dcl_texcoord v0.xyw
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    if_ne c3.x, -c3.x
      texld r0, c4, s1
      add r0.y, -r0.y, v0.w
      mad r0.x, r0.x, r0.y, v0.x
      mov r0.yz, v0.xyww
    else
      mov r0.xyz, v0.xyww
    endif
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    mov r0.zw, c4.y
    texldl r0, r0, s0
    mov r0.z, c4.z
    add r0.x, r0.z, -c2.y
    add r0.x, -r0.x, r0.w
    rcp r0.x, r0.x
    mul r0.x, r0.x, -c2.x
    rcp r0.y, v0.w
    mul r1.xy, r0.y, v0
    mul r1.xy, r0.x, r1
    mul r2, r1.y, c15
    mad r1, c14, r1.x, r2
    mad r1, c16, r0.x, r1
    add r1, r1, c17
    rcp r0.x, r1.w
    mul r2.xy, r0.x, r1
    min r3.z, r1.z, c4.w
    mad r0.yw, v0.xxzy, r0.y, c4.z
    mul r0.yw, r0, c0.xxzy
    mul r0.yw, r0, c5.x
    texld r4, r0.ywzw, s3
    mad_pp r4, r4.yxyx, c5.y, c5.z
    mul_pp r5, r4.wzwz, c5.wzwz
    mad r6, r5.zwzw, c18.xxzz, r2.xyxy
    mad_pp r6, r4.zwzw, c18.yyww, r6
    mul r3.xyw, r6.xyzx, c4.zzzy
    texldl r7, r3, s2
    mul r3.xyw, r6.zwzx, c4.zzzy
    texldl r6, r3, s2
    add r7, -r7, r3.z
    cmp_pp r7, r7, c4.y, c4.z
    dp4_pp r0.y, r7, c6.x
    add r6, r3.z, -r6
    cmp_pp r6, r6, c4.y, c4.z
    dp4_pp r0.w, r6, c6.x
    add_pp r0.y, r0.w, r0.y
    mad r6, r5.zwzw, c19.xxzz, r2.xyxy
    mad_pp r6, r4.zwzw, c19.yyww, r6
    mov_pp r7.xy, r6
    mov r7.zw, r3
    texldl r8, r7, s2
    mov_pp r7.xy, r6.zwzw
    texldl r6, r7, s2
    add r8, r3.z, -r8
    cmp_pp r8, r8, c4.y, c4.z
    dp4_pp r0.w, r8, c6.x
    add_pp r0.y, r0.w, r0.y
    add r6, r3.z, -r6
    cmp_pp r6, r6, c4.y, c4.z
    dp4_pp r0.w, r6, c6.x
    add_pp r0.y, r0.w, r0.y
    mad r6, r5.zwzw, c20.xxzz, r2.xyxy
    mad_pp r6, r4.zwzw, c20.yyww, r6
    mov_pp r7.xy, r6
    texldl r8, r7, s2
    mov_pp r7.xy, r6.zwzw
    texldl r6, r7, s2
    add r8, r3.z, -r8
    cmp_pp r8, r8, c4.y, c4.z
    dp4_pp r0.w, r8, c6.x
    add_pp r0.y, r0.w, r0.y
    add r6, r3.z, -r6
    cmp_pp r6, r6, c4.y, c4.z
    dp4_pp r0.w, r6, c6.x
    add_pp r0.y, r0.w, r0.y
    mad r2, r5, c21.xxzz, r2.xyxy
    mad_pp r2, r4, c21.yyww, r2
    mov_pp r7.xy, r2
    texldl r4, r7, s2
    mov_pp r7.xy, r2.zwzw
    texldl r2, r7, s2
    add r4, r3.z, -r4
    cmp_pp r4, r4, c4.y, c4.z
    dp4_pp r0.w, r4, c6.x
    add_pp r0.y, r0.w, r0.y
    add r2, -r2, r3.z
    cmp_pp r2, r2, c4.y, c4.z
    dp4_pp r0.w, r2, c6.x
    add_pp r0.y, r0.w, r0.y
    add r0.w, -r0.y, c6.y
    add r1.z, r0.y, c6.z
    cmp r1.z, r1.z, c4.y, c4.z
    cmp r0.w, r0.w, c4.y, r1.z
    if_ne r0.w, -r0.w
      mad_pp r2, r1.xyxy, r0.x, c8
      mov_pp r7.xy, r2
      texldl r4, r7, s2
      mov_pp r7.xy, r2.zwzw
      texldl r5, r7, s2
      add r4, r3.z, -r4.wxyz
      add r5, r3.z, -r5.wxyz
      cmp_pp r4, r4, c4.y, c4.z
      cmp_pp r5, r5, c4.y, c4.z
      mul r2, r2, c22.xyxy
      frc_pp r2, r2
      mov_pp r6.xy, r4
      mov_pp r6.zw, r5.xyxy
      mov_pp r5.xy, r4.zwzw
      lrp_pp r4, r2.yyww, r5, r6
      mad_pp r5, r1.xyxy, r0.x, c9
      mov_pp r7.xy, r5
      texldl r6, r7, s2
      mov_pp r7.xy, r5.zwzw
      texldl r8, r7, s2
      add r6, r3.z, -r6.wxyz
      add r8, r3.z, -r8.wxyz
      cmp_pp r6, r6, c4.y, c4.z
      cmp_pp r8, r8, c4.y, c4.z
      mul r5, r5, c22.xyxy
      frc_pp r5, r5
      mov_pp r9.xy, r6
      mov_pp r9.zw, r8.xyxy
      mov_pp r8.xy, r6.zwzw
      lrp_pp r6, r5.yyww, r8, r9
      lrp_pp r8.xy, r2.xzzw, r4.ywzw, r4.xzzw
      lrp_pp r8.zw, r5.xyxz, r6.xyyw, r6.xyxz
      dp4_pp r0.w, r8, c6.w
      mad_pp r2, r1.xyxy, r0.x, c10
      mov_pp r7.xy, r2
      texldl r4, r7, s2
      mov_pp r7.xy, r2.zwzw
      texldl r5, r7, s2
      add r4, r3.z, -r4.wxyz
      add r5, r3.z, -r5.wxyz
      cmp_pp r4, r4, c4.y, c4.z
      cmp_pp r5, r5, c4.y, c4.z
      mul r2, r2, c22.xyxy
      frc_pp r2, r2
      mov_pp r6.xy, r4
      mov_pp r6.zw, r5.xyxy
      mov_pp r5.xy, r4.zwzw
      lrp_pp r4, r2.yyww, r5, r6
      mad_pp r5, r1.xyxy, r0.x, c11
      mov_pp r7.xy, r5
      texldl r6, r7, s2
      mov_pp r7.xy, r5.zwzw
      texldl r8, r7, s2
      add r6, r3.z, -r6.wxyz
      add r8, r3.z, -r8.wxyz
      cmp_pp r6, r6, c4.y, c4.z
      cmp_pp r8, r8, c4.y, c4.z
      mul r5, r5, c22.xyxy
      frc_pp r5, r5
      mov_pp r9.xy, r6
      mov_pp r9.zw, r8.xyxy
      mov_pp r8.xy, r6.zwzw
      lrp_pp r6, r5.yyww, r8, r9
      lrp_pp r8.xy, r2.xzzw, r4.ywzw, r4.xzzw
      lrp_pp r8.zw, r5.xyxz, r6.xyyw, r6.xyxz
      dp4_pp r1.z, r8, c6.w
      add_pp r0.w, r0.w, r1.z
      mad_pp r2, r1.xyxy, r0.x, c12
      mov_pp r7.xy, r2
      texldl r4, r7, s2
      mov_pp r7.xy, r2.zwzw
      texldl r5, r7, s2
      add r4, r3.z, -r4.wxyz
      add r5, r3.z, -r5.wxyz
      cmp_pp r4, r4, c4.y, c4.z
      cmp_pp r5, r5, c4.y, c4.z
      mul r2, r2, c22.xyxy
      frc_pp r2, r2
      mov_pp r6.xy, r4
      mov_pp r6.zw, r5.xyxy
      mov_pp r5.xy, r4.zwzw
      lrp_pp r4, r2.yyww, r5, r6
      mad_pp r1, r1.xyxy, r0.x, c13
      mov_pp r7.xy, r1
      texldl r5, r7, s2
      mov_pp r7.xy, r1.zwzw
      texldl r6, r7, s2
      add r5, r3.z, -r5.wxyz
      add r3, r3.z, -r6.wxyz
      cmp_pp r5, r5, c4.y, c4.z
      cmp_pp r3, r3, c4.y, c4.z
      mul r1, r1, c22.xyxy
      frc_pp r1, r1
      mov_pp r6.xy, r5
      mov_pp r6.zw, r3.xyxy
      mov_pp r3.xy, r5.zwzw
      lrp_pp r5, r1.yyww, r3, r6
      lrp_pp r3.xy, r2.xzzw, r4.ywzw, r4.xzzw
      lrp_pp r3.zw, r1.xyxz, r5.xyyw, r5.xyxz
      dp4_pp r0.x, r3, c6.w
      add_pp r0.x, r0.x, r0.w
      lrp_pp r1.x, c7.x, r0.x, r0.y
      mov_pp r0.y, r1.x
    endif
    mul_pp r0.x, r0.y, r0.y
    mul_pp r0.x, r0.y, r0.x
    mad r0.x, r0.x, r0.x, -c4.z
    mad_pp r0.x, c23.x, r0.x, r0.z
    rsq_pp r0.x, r0.x
    rcp_pp oC0, r0.x

// approximately 230 instruction slots used (44 texture, 186 arithmetic)
