// Lights
// VS 7c59508583f977c3
cbuffer GlobalConstants : register(b0)
{
  float4 Globals[17] : packoffset(c0);
  float4 LightPositions[65] : packoffset(c17);
  float4 LightColors[65] : packoffset(c82);
}

cbuffer cbInstanceConsts : register(b1)
{
  float4 InstanceConsts[15] : packoffset(c0);
}

cbuffer cbTypeConsts : register(b2)
{
  float4 TypeConsts[6] : packoffset(c0);
}
SamplerState SamplerStateRegular_s : register(s0);
SamplerState SamplerStateNormals_s : register(s1);
SamplerState SamplerStateCubeMap_s : register(s2);
Texture2D<float> Depth : register(t0);
Texture2D<float4> Diffuse : register(t1);
Texture2D<float3> Normal : register(t2);
Texture2D<float4> Properties : register(t3);
TextureCube<float3> ProjectedCubeTexture : register(t6);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  
  // Extra input from vertex shader:
matrix vp : TEXCOORD2,
matrix ivp : TEXCOORD6)
  
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(-v2.xyz, -v2.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = -v2.xyz * r0.xxx;
  r1.xy = Globals[8].zw * v0.xy;
  r1.xy = InstanceConsts[13].zw * r1.xy;
  r2.xyz = Normal.Sample(SamplerStateNormals_s, r1.xy).xyz;
  r2.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.x = saturate(dot(r0.xyz, r2.xyz));
  r0.y = Depth.Sample(SamplerStateRegular_s, r1.xy).x;
  r0.y = r0.y * TypeConsts[0].x + TypeConsts[0].y;
  r0.y = 1 / r0.y;
  
  //r0.yzw = -r0.yyy * v2.xyz + InstanceConsts[0].xyz;
    r0.yzw = r0.yyy * v2.xyz;

float4 stereo = StereoParams.Load(0);
float4 tmp = mul(float4(r0.yzw, 1), vp);
tmp.x -= stereo.x * (tmp.w - stereo.y);
r0.yzw = -mul(tmp, ivp).xyz + InstanceConsts[0].xyz;
  
  r1.z = dot(r0.yzw, r0.yzw);
  r1.w = rsqrt(r1.z);
  r1.z = sqrt(r1.z);
  r1.z = saturate(r1.z * InstanceConsts[1].w + InstanceConsts[0].w);
  r1.z = -1 + r1.z;
  r1.z = -r1.z * r1.z + 1;
  r1.z = sqrt(r1.z);
  r1.z = 1 + -r1.z;
  r0.yzw = r1.www * r0.yzw;
  r1.w = dot(r2.xyz, r0.yzw);
  r2.xyz = Properties.Sample(SamplerStateRegular_s, r1.xy).wxz;
  r3.xyz = Diffuse.Sample(SamplerStateRegular_s, r1.xy).xyz;
  r1.x = 0.5 + -r2.z;
  r1.x = saturate(r1.x + r1.x);
  r1.x = r1.x * r1.x;
  r1.x = r1.x * r1.x;
  r1.y = r1.x * TypeConsts[2].x + r1.w;
  r2.w = r1.x * TypeConsts[2].x + 1;
  r1.x = TypeConsts[2].x * r1.x;
  r1.x = saturate(r1.x);
  r1.y = saturate(r1.y / r2.w);
  r2.w = -1 + r1.y;
  r1.x = r1.x * r2.w + 1;
  r1.x = r1.y * r1.x;
  r0.x = r1.x * r0.x + 9.99999975e-005;
  r0.x = log2(r0.x);
  r2.zw = float2(-0.501960814,-0.5) + r2.yz;
  r4.xy = saturate(r2.zw + r2.zw);
  r1.y = r4.y * TypeConsts[2].y + 9.99999975e-005;
  r0.x = r1.y * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r0.x * r1.x;
  r0.x = min(1, r0.x);
  r1.x = 0;
  r4.z = 0;
  r2.z = r2.y < 0.411764711;
  r1.y = r2.y + r2.y;
  r1.xy = saturate(r2.zz ? r1.xy : r4.xz);
  r2.z = 1 + -r4.y;
  r2.w = saturate(r1.y * 0.5 + -r1.w);
  r1.w = 1 + r1.w;
  r1.w = saturate(0.5 * r1.w);
  r1.w = r1.w * r1.w;
  r0.x = r2.w * r1.y + r0.x;
  r1.x = 0 < r1.x;
  r0.x = min(1, r0.x);
  r1.y = saturate(TypeConsts[3].z + r2.x);
  r1.y = -TypeConsts[3].z + r1.y;
  r2.w = 1 + -TypeConsts[3].z;
  r2.y = r1.y / r2.w;
  r2.xy = r2.xy * TypeConsts[3].xw + TypeConsts[4].xw;
  r0.x = r2.y * r0.x;
  r0.x = r1.z * r0.x;
  r1.y = 5 * r1.w;
  r1.y = min(1, r1.y);
  r4.xyz = r1.yyy * float3(0.100000001,0.790000021,0.939999998) + float3(0.899999976,0.209999993,0.0599999987);
  r4.xyz = r4.xyz * r2.yyy;
  r1.y = r2.x * r1.z;
  r2.xyw = InstanceConsts[14].xyz * r1.yyy;
  r2.xyw = r2.xyw * r3.xyz;
  r2.xyw = r2.xyw * r2.zzz;
  r4.xyz = r4.xyz * r1.www;
  r1.yzw = r4.xyz * r1.zzz;
  r1.xyz = r1.xxx ? r1.yzw : r0.xxx;
  r1.xyz = InstanceConsts[4].zzz * r1.xyz;
  r1.xyz = r1.xyz * r3.xyz;
  r1.xyz = r1.xyz * r2.zzz;
  r3.xyz = InstanceConsts[6].xyz * r0.zzz;
  r0.xyz = InstanceConsts[5].xyz * r0.yyy + r3.xyz;
  r0.xyz = InstanceConsts[7].xyz * r0.www + r0.xyz;
  r0.xyz = ProjectedCubeTexture.SampleLevel(SamplerStateCubeMap_s, r0.xyz, 0).xyz;
  r0.xyz = InstanceConsts[1].xyz * r0.xyz;
  o0.xyz = r0.xyz * r1.xyz + r2.xyw;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.1 on Mon Oct 12 09:17:29 2015
//
//
// Buffer Definitions: 
//
// cbuffer GlobalConstants
// {
//
//   float4 Globals[17];                // Offset:    0 Size:   272
//   float4 LightPositions[65];         // Offset:  272 Size:  1040 [unused]
//   float4 LightColors[65];            // Offset: 1312 Size:  1040 [unused]
//
// }
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts[15];         // Offset:    0 Size:   240
//
// }
//
// cbuffer cbTypeConsts
// {
//
//   float4 TypeConsts[6];              // Offset:    0 Size:    96
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SamplerStateRegular               sampler      NA          NA    0        1
// SamplerStateNormals               sampler      NA          NA    1        1
// SamplerStateCubeMap               sampler      NA          NA    2        1
// Depth                             texture   float          2d    0        1
// Diffuse                           texture  float4          2d    1        1
// Normal                            texture  float3          2d    2        1
// Properties                        texture  float4          2d    3        1
// ProjectedCubeTexture              texture  float3        cube    6        1
// GlobalConstants                   cbuffer      NA          NA    0        1
// cbInstanceConsts                  cbuffer      NA          NA    1        1
// cbTypeConsts                      cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[15], immediateIndexed
dcl_constantbuffer cb2[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t6
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear noperspective v2.xyz
dcl_output o0.xyzw
dcl_temps 5
dp3 r0.x, -v2.xyzx, -v2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, -v2.xyzx
mul r1.xy, v0.xyxx, cb0[8].zwzz
mul r1.xy, r1.xyxx, cb1[13].zwzz
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r1.xyxx, t2.xyzw, s1
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3_sat r0.x, r0.xyzx, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t0.yxzw, s0
mad r0.y, r0.y, cb2[0].x, cb2[0].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mad r0.yzw, -r0.yyyy, v2.xxyz, cb1[0].xxyz
dp3 r1.z, r0.yzwy, r0.yzwy
rsq r1.w, r1.z
sqrt r1.z, r1.z
mad_sat r1.z, r1.z, cb1[1].w, cb1[0].w
add r1.z, r1.z, l(-1.000000)
mad r1.z, -r1.z, r1.z, l(1.000000)
sqrt r1.z, r1.z
add r1.z, -r1.z, l(1.000000)
mul r0.yzw, r0.yyzw, r1.wwww
dp3 r1.w, r2.xyzx, r0.yzwy
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r1.xyxx, t3.wxzy, s0
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r1.xyxx, t1.xyzw, s0
add r1.x, -r2.z, l(0.500000)
add_sat r1.x, r1.x, r1.x
mul r1.x, r1.x, r1.x
mul r1.x, r1.x, r1.x
mad r1.y, r1.x, cb2[2].x, r1.w
mad r2.w, r1.x, cb2[2].x, l(1.000000)
mul r1.x, r1.x, cb2[2].x
mov_sat r1.x, r1.x
div_sat r1.y, r1.y, r2.w
add r2.w, r1.y, l(-1.000000)
mad r1.x, r1.x, r2.w, l(1.000000)
mul r1.x, r1.x, r1.y
mad r0.x, r1.x, r0.x, l(0.000100)
log r0.x, r0.x
add r2.zw, r2.yyyz, l(0.000000, 0.000000, -0.501961, -0.500000)
add_sat r4.xy, r2.zwzz, r2.zwzz
mad r1.y, r4.y, cb2[2].y, l(0.000100)
mul r0.x, r0.x, r1.y
exp r0.x, r0.x
mul r0.x, r1.x, r0.x
min r0.x, r0.x, l(1.000000)
mov r1.x, l(0)
mov r4.z, l(0)
lt r2.z, r2.y, l(0.411765)
add r1.y, r2.y, r2.y
movc_sat r1.xy, r2.zzzz, r1.xyxx, r4.xzxx
add r2.z, -r4.y, l(1.000000)
mad_sat r2.w, r1.y, l(0.500000), -r1.w
add r1.w, r1.w, l(1.000000)
mul_sat r1.w, r1.w, l(0.500000)
mul r1.w, r1.w, r1.w
mad r0.x, r2.w, r1.y, r0.x
lt r1.x, l(0.000000), r1.x
min r0.x, r0.x, l(1.000000)
add_sat r1.y, r2.x, cb2[3].z
add r1.y, r1.y, -cb2[3].z
add r2.w, -cb2[3].z, l(1.000000)
div r2.y, r1.y, r2.w
mad r2.xy, r2.xyxx, cb2[3].xwxx, cb2[4].xwxx
mul r0.x, r0.x, r2.y
mul r0.x, r0.x, r1.z
mul r1.y, r1.w, l(5.000000)
min r1.y, r1.y, l(1.000000)
mad r4.xyz, r1.yyyy, l(0.100000, 0.790000, 0.940000, 0.000000), l(0.900000, 0.210000, 0.060000, 0.000000)
mul r4.xyz, r2.yyyy, r4.xyzx
mul r1.y, r1.z, r2.x
mul r2.xyw, r1.yyyy, cb1[14].xyxz
mul r2.xyw, r3.xyxz, r2.xyxw
mul r2.xyw, r2.zzzz, r2.xyxw
mul r4.xyz, r1.wwww, r4.xyzx
mul r1.yzw, r1.zzzz, r4.xxyz
movc r1.xyz, r1.xxxx, r1.yzwy, r0.xxxx
mul r1.xyz, r1.xyzx, cb1[4].zzzz
mul r1.xyz, r3.xyzx, r1.xyzx
mul r1.xyz, r2.zzzz, r1.xyzx
mul r3.xyz, r0.zzzz, cb1[6].xyzx
mad r0.xyz, cb1[5].xyzx, r0.yyyy, r3.xyzx
mad r0.xyz, cb1[7].xyzx, r0.wwww, r0.xyzx
sample_l_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t6.xyzw, s2, l(0.000000)
mul r0.xyz, r0.xyzx, cb1[1].xyzx
mad o0.xyz, r0.xyzx, r1.xyzx, r2.xywx
mov o0.w, l(0)
ret 
// Approximately 90 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
