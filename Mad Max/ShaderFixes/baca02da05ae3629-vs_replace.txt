
cbuffer cbInstanceConsts : register(b1)
{
  float4 InstanceConsts[5] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  out float4 o0 : SV_Position0,
  out float2 o1 : TEXCOORD0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = InstanceConsts[1].xyzw * v0.yyyy;
  r0.xyzw = v0.xxxx * InstanceConsts[0].xyzw + r0.xyzw;
  o0.xyzw = InstanceConsts[3].xyzw + r0.xyzw;
  r0.x = v0.z / InstanceConsts[4].w;
  r0.x = InstanceConsts[4].z * r0.x;
  r0.x = round(r0.x);
  r0.y = 1 + v0.w;
  r1.x = abs(r0.y);
  r0.y = v0.w < 0;
  r1.z = v0.w;
  r1.yw = float2(1,0);
  r1.xy = r0.yy ? r1.xy : r1.zw;
  r1.z = r1.x * r0.x;
  o1.xy = r1.yz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts[5];          // Offset:    0 Size:    80
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbInstanceConsts                  cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[5], immediateIndexed
dcl_input v0.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_temps 2
mul r0.xyzw, v0.yyyy, cb1[1].xyzw
mad r0.xyzw, v0.xxxx, cb1[0].xyzw, r0.xyzw
add o0.xyzw, r0.xyzw, cb1[3].xyzw
div r0.x, v0.z, cb1[4].w
mul r0.x, r0.x, cb1[4].z
round_ne r0.x, r0.x
add r0.y, v0.w, l(1.000000)
mov r1.x, |r0.y|
lt r0.y, v0.w, l(0.000000)
mov r1.z, v0.w
mov r1.yw, l(0,1.000000,0,0)
movc r1.xy, r0.yyyy, r1.xyxx, r1.zwzz
mul r1.z, r0.x, r1.x
mov o1.xy, r1.yzyy
ret 
// Approximately 15 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
