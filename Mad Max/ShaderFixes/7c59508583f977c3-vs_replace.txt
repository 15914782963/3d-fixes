// Point lights on roof/wall with shadow in second stronghold
// Pixel shaders:
// 1f7c72f4a65758ae

cbuffer GlobalConstants : register(b0)
{
  float4 Globals[20] : packoffset(c0);
  row_major float4x4 ShadowTransform[3] : packoffset(c20);
}

cbuffer cbInstanceConsts : register(b1)
{
  float4 InstanceConsts : packoffset(c0);
}

cbuffer cbTypeConsts : register(b2)
{
  float4 TypeConsts[5] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float2 v0 : POSITION0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,

// Extra output added to copy view-projection matrix
out matrix vp : TEXCOORD2,
out matrix ivp : TEXCOORD6

  )
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy * float2(6.28318548,6.28318548) + float2(-3.14159274,-3.14159274);
  sincos(r0.xy, r0.xy, r1.xy);
  r1.x = r1.x * abs(r0.y);
  r1.z = r0.x * abs(r0.y);
  r0.xyz = InstanceConsts.www * r1.xyz + InstanceConsts.xyz;

// Full MVP matrix:
  r1.xyzw = Globals[1].xyzw * r0.yyyy;
  r1.xyzw = r0.xxxx * Globals[0].xyzw + r1.xyzw;
  r0.xyzw = r0.zzzz * Globals[2].xyzw + r1.xyzw;
  r0.xyzw = Globals[3].xyzw + r0.xyzw;

  o0.xyzw = r0.xyzw;

float4 stereo = StereoParams.Load(0);
r0.x += stereo.x * (r0.w - stereo.y);

  r1.xy = r0.xy / r0.ww;
  o1.xy = r1.xy * float2(0.5,-0.5) + float2(0.5,0.5);

// Inverse view-projection matrix:
  r1.xyzw = TypeConsts[2].xyzw * r0.yyyy;
  r1.xyzw = r0.xxxx * TypeConsts[1].xyzw + r1.xyzw;
  r0.xyzw = r0.wwww * TypeConsts[4].xyzw + r1.xyzw;
  r0.xyz = r0.xyz / r0.www;

  o2.xyz = TypeConsts[0].xxx * r0.xyz;

ivp = matrix(TypeConsts[1], TypeConsts[2], TypeConsts[3], TypeConsts[4]);

// Work out Inverse (which will be the forwards variant since the original was already inversed):
vp[0].x = ivp[1].y*(ivp[2].z*ivp[3].w - ivp[2].w*ivp[3].z) + ivp[1].z*(ivp[2].w*ivp[3].y - ivp[2].y*ivp[3].w) + ivp[1].w*(ivp[2].y*ivp[3].z - ivp[2].z*ivp[3].y);
vp[0].y = ivp[0].y*(ivp[2].w*ivp[3].z - ivp[2].z*ivp[3].w) + ivp[0].z*(ivp[2].y*ivp[3].w - ivp[2].w*ivp[3].y) + ivp[0].w*(ivp[2].z*ivp[3].y - ivp[2].y*ivp[3].z);
vp[0].z = ivp[0].y*(ivp[1].z*ivp[3].w - ivp[1].w*ivp[3].z) + ivp[0].z*(ivp[1].w*ivp[3].y - ivp[1].y*ivp[3].w) + ivp[0].w*(ivp[1].y*ivp[3].z - ivp[1].z*ivp[3].y);
vp[0].w = ivp[0].y*(ivp[1].w*ivp[2].z - ivp[1].z*ivp[2].w) + ivp[0].z*(ivp[1].y*ivp[2].w - ivp[1].w*ivp[2].y) + ivp[0].w*(ivp[1].z*ivp[2].y - ivp[1].y*ivp[2].z);
vp[1].x = ivp[1].x*(ivp[2].w*ivp[3].z - ivp[2].z*ivp[3].w) + ivp[1].z*(ivp[2].x*ivp[3].w - ivp[2].w*ivp[3].x) + ivp[1].w*(ivp[2].z*ivp[3].x - ivp[2].x*ivp[3].z);
vp[1].y = ivp[0].x*(ivp[2].z*ivp[3].w - ivp[2].w*ivp[3].z) + ivp[0].z*(ivp[2].w*ivp[3].x - ivp[2].x*ivp[3].w) + ivp[0].w*(ivp[2].x*ivp[3].z - ivp[2].z*ivp[3].x);
vp[1].z = ivp[0].x*(ivp[1].w*ivp[3].z - ivp[1].z*ivp[3].w) + ivp[0].z*(ivp[1].x*ivp[3].w - ivp[1].w*ivp[3].x) + ivp[0].w*(ivp[1].z*ivp[3].x - ivp[1].x*ivp[3].z);
vp[1].w = ivp[0].x*(ivp[1].z*ivp[2].w - ivp[1].w*ivp[2].z) + ivp[0].z*(ivp[1].w*ivp[2].x - ivp[1].x*ivp[2].w) + ivp[0].w*(ivp[1].x*ivp[2].z - ivp[1].z*ivp[2].x);
vp[2].x = ivp[1].x*(ivp[2].y*ivp[3].w - ivp[2].w*ivp[3].y) + ivp[1].y*(ivp[2].w*ivp[3].x - ivp[2].x*ivp[3].w) + ivp[1].w*(ivp[2].x*ivp[3].y - ivp[2].y*ivp[3].x);
vp[2].y = ivp[0].x*(ivp[2].w*ivp[3].y - ivp[2].y*ivp[3].w) + ivp[0].y*(ivp[2].x*ivp[3].w - ivp[2].w*ivp[3].x) + ivp[0].w*(ivp[2].y*ivp[3].x - ivp[2].x*ivp[3].y);
vp[2].z = ivp[0].x*(ivp[1].y*ivp[3].w - ivp[1].w*ivp[3].y) + ivp[0].y*(ivp[1].w*ivp[3].x - ivp[1].x*ivp[3].w) + ivp[0].w*(ivp[1].x*ivp[3].y - ivp[1].y*ivp[3].x);
vp[2].w = ivp[0].x*(ivp[1].w*ivp[2].y - ivp[1].y*ivp[2].w) + ivp[0].y*(ivp[1].x*ivp[2].w - ivp[1].w*ivp[2].x) + ivp[0].w*(ivp[1].y*ivp[2].x - ivp[1].x*ivp[2].y);
vp[3].x = ivp[1].x*(ivp[2].z*ivp[3].y - ivp[2].y*ivp[3].z) + ivp[1].y*(ivp[2].x*ivp[3].z - ivp[2].z*ivp[3].x) + ivp[1].z*(ivp[2].y*ivp[3].x - ivp[2].x*ivp[3].y);
vp[3].y = ivp[0].x*(ivp[2].y*ivp[3].z - ivp[2].z*ivp[3].y) + ivp[0].y*(ivp[2].z*ivp[3].x - ivp[2].x*ivp[3].z) + ivp[0].z*(ivp[2].x*ivp[3].y - ivp[2].y*ivp[3].x);
vp[3].z = ivp[0].x*(ivp[1].z*ivp[3].y - ivp[1].y*ivp[3].z) + ivp[0].y*(ivp[1].x*ivp[3].z - ivp[1].z*ivp[3].x) + ivp[0].z*(ivp[1].y*ivp[3].x - ivp[1].x*ivp[3].y);
vp[3].w = ivp[0].x*(ivp[1].y*ivp[2].z - ivp[1].z*ivp[2].y) + ivp[0].y*(ivp[1].z*ivp[2].x - ivp[1].x*ivp[2].z) + ivp[0].z*(ivp[1].x*ivp[2].y - ivp[1].y*ivp[2].x);
vp /= determinant(ivp);

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer GlobalConstants
// {
//
//   float4 Globals[20];                // Offset:    0 Size:   320
//   row_major float4x4 ShadowTransform[3];// Offset:  320 Size:   192 [unused]
//
// }
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts;             // Offset:    0 Size:    16
//
// }
//
// cbuffer cbTypeConsts
// {
//
//   float4 TypeConsts[5];              // Offset:    0 Size:    80
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// GlobalConstants                   cbuffer      NA          NA    0        1
// cbInstanceConsts                  cbuffer      NA          NA    1        1
// cbTypeConsts                      cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xy          0     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_constantbuffer cb2[5], immediateIndexed
dcl_input v0.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyz
dcl_temps 2
mad r0.xy, v0.xyxx, l(6.283185, 6.283185, 0.000000, 0.000000), l(-3.141593, -3.141593, 0.000000, 0.000000)
sincos r0.xy, r1.xy, r0.xyxx
mul r1.x, |r0.y|, r1.x
mul r1.z, |r0.y|, r0.x
mad r0.xyz, cb1[0].wwww, r1.xyzx, cb1[0].xyzx
mul r1.xyzw, r0.yyyy, cb0[1].xyzw
mad r1.xyzw, r0.xxxx, cb0[0].xyzw, r1.xyzw
mad r0.xyzw, r0.zzzz, cb0[2].xyzw, r1.xyzw
add r0.xyzw, r0.xyzw, cb0[3].xyzw
mov o0.xyzw, r0.xyzw
div r1.xy, r0.xyxx, r0.wwww
mad o1.xy, r1.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
mul r1.xyzw, r0.yyyy, cb2[2].xyzw
mad r1.xyzw, r0.xxxx, cb2[1].xyzw, r1.xyzw
mad r0.xyzw, r0.wwww, cb2[4].xyzw, r1.xyzw
div r0.xyz, r0.xyzx, r0.wwww
mul o2.xyz, r0.xyzx, cb2[0].xxxx
ret 
// Approximately 18 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\Mad Max\wrapper1349(24,14-15): warning X3578: Output value 'o1' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
