//lights in interior
// VS 3d4200b00bf79ba3
cbuffer cbInstanceConsts : register(b1)
{
  float4 InstanceConsts[9] : packoffset(c0);
}

cbuffer cbTypeConsts : register(b2)
{
  float4 TypeConsts[5] : packoffset(c0);
}
SamplerState SamplerStateRegular_s : register(s0);
SamplerState SamplerStateNormals_s : register(s1);
Texture2D<float> Depth : register(t0);
Texture2D<float4> Diffuse : register(t1);
Texture2D<float3> Normal : register(t2);
Texture2D<float4> Properties : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  noperspective float4 v1 : TEXCOORD0,
  noperspective float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  
  // Extra input from vertex shader:
  matrix vp : TEXCOORD2,
  matrix ivp : TEXCOORD6)
  
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = Depth.Sample(SamplerStateRegular_s, v1.xy).x;
  r0.x = r0.x * TypeConsts[0].x + TypeConsts[0].y;
  r0.x = 1 / r0.x;
  
  float3 vpos = r0.xxx * v2.xyz;
  float4 stereo = StereoParams.Load(0);
  float4 tmp = mul(float4(vpos, 1), vp);
  tmp.x -= stereo.x * (tmp.w - stereo.y);
  vpos = mul(tmp, ivp).xyz;
  
  //r0.yzw = r0.xxx * v2.xyz + -InstanceConsts[0].xyz;
  // Not sure what changes by fixing vpos here:
  r0.yzw = vpos + -InstanceConsts[0].xyz;
  
  // Not sure what changes by fixing vpos here:
  r1.xyz = vpos;

  
  r0.y = dot(InstanceConsts[3].xyz, r0.yzw);
  r1.xyz = v2.xyz * r0.xxx;
  r0.yzw = -r0.yyy * InstanceConsts[3].xyz + r1.xyz;
  r0.yzw = -InstanceConsts[0].xyz + r0.yzw;
  r1.x = dot(r0.yzw, InstanceConsts[4].xyz);
  r1.y = dot(r0.yzw, InstanceConsts[5].xyz);
  r0.yz = max(-InstanceConsts[6].yz, r1.xy);
  r0.yz = min(InstanceConsts[6].yz, r0.yz);
  r1.xyz = InstanceConsts[5].xyz * r0.zzz;
  r0.yzw = InstanceConsts[4].xyz * r0.yyy + r1.xyz;
  r0.yzw = InstanceConsts[0].xyz + r0.yzw;
  
  // These are the important ones to fix the light:
  //r1.xyz = -r0.xxx * v2.xyz + r0.yzw;
  //r0.yzw = r0.xxx * v2.xyz + -r0.yzw;
  //r2.xyz = -r0.xxx * v2.xyz + InstanceConsts[0].xyz;
  
  r1.xyz = -vpos + r0.yzw;
  r0.yzw = vpos - r0.yzw;
  r2.xyz = -vpos + InstanceConsts[0].xyz;
  
  
  r0.x = dot(r0.yzw, r0.yzw);
  r0.x = sqrt(r0.x);
  r0.x = saturate(InstanceConsts[6].x * r0.x);
  r0.x = -1 + r0.x;
  r0.x = -r0.x * r0.x + 1;
  r0.x = sqrt(r0.x);
  r0.x = 1 + -r0.x;
  r0.y = dot(r1.xyz, r1.xyz);
  r0.y = rsqrt(r0.y);
  r1.xyz = r1.xyz * r0.yyy;
  r1.w = 1;
  r0.y = saturate(dot(InstanceConsts[8].xyzw, r1.xyzw));
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = r2.xyz * r0.zzz;
  r2.xyz = Normal.Sample(SamplerStateNormals_s, v1.xy).xyz;
  r2.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.z = dot(r2.xyz, r1.xyz);
  r0.w = saturate(r0.z);
  r1.xyz = Properties.Sample(SamplerStateRegular_s, v1.xy).xzw;
  r1.w = r1.x < 0.411764711;
  r1.x = r1.x + r1.x;
  r1.x = r1.w ? r1.x : 0;
  r1.x = saturate(r1.x);
  r0.z = saturate(r1.x * 0.5 + -r0.z);
  r0.z = r0.z * r1.x + r0.w;
  r0.z = min(1, r0.z);
  r0.w = InstanceConsts[7].z * r0.z;
  r0.z = r0.z * 0.5 + r0.w;
  r0.z = saturate(InstanceConsts[7].y + r0.z);
  r0.y = r0.y * r0.z;
  r0.x = r0.x * r0.y;
  r0.y = saturate(TypeConsts[2].z + r1.z);
  r0.z = -0.5 + r1.y;
  r0.z = saturate(r0.z + r0.z);
  r0.z = 1 + -r0.z;
  r0.y = -TypeConsts[2].z + r0.y;
  r0.w = 1 + -TypeConsts[2].z;
  r0.y = r0.y / r0.w;
  r0.y = r0.y * TypeConsts[2].w + TypeConsts[3].w;
  r0.x = r0.x * r0.y;
  r0.xyw = InstanceConsts[1].xyz * r0.xxx;
  r1.xyz = Diffuse.Sample(SamplerStateRegular_s, v1.xy).xyz;
  r1.xyz = r1.xyz * r0.zzz;
  o0.xyz = r1.xyz * r0.xyw;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.1 on Sun Oct 04 09:54:23 2015
//
//
// Buffer Definitions: 
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts[9];          // Offset:    0 Size:   144
//
// }
//
// cbuffer cbTypeConsts
// {
//
//   float4 TypeConsts[5];              // Offset:    0 Size:    80
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SamplerStateRegular               sampler      NA          NA    0        1
// SamplerStateNormals               sampler      NA          NA    1        1
// Depth                             texture   float          2d    0        1
// Diffuse                           texture  float4          2d    1        1
// Normal                            texture  float3          2d    2        1
// Properties                        texture  float4          2d    3        1
// cbInstanceConsts                  cbuffer      NA          NA    1        1
// cbTypeConsts                      cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear noperspective v1.xy
dcl_input_ps linear noperspective v2.xyz
dcl_output o0.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
mad r0.x, r0.x, cb2[0].x, cb2[0].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mad r0.yzw, r0.xxxx, v2.xxyz, -cb1[0].xxyz
dp3 r0.y, cb1[3].xyzx, r0.yzwy
mul r1.xyz, r0.xxxx, v2.xyzx
mad r0.yzw, -r0.yyyy, cb1[3].xxyz, r1.xxyz
add r0.yzw, r0.yyzw, -cb1[0].xxyz
dp3 r1.x, r0.yzwy, cb1[4].xyzx
dp3 r1.y, r0.yzwy, cb1[5].xyzx
max r0.yz, r1.xxyx, -cb1[6].yyzy
min r0.yz, r0.yyzy, cb1[6].yyzy
mul r1.xyz, r0.zzzz, cb1[5].xyzx
mad r0.yzw, cb1[4].xxyz, r0.yyyy, r1.xxyz
add r0.yzw, r0.yyzw, cb1[0].xxyz
mad r1.xyz, -r0.xxxx, v2.xyzx, r0.yzwy
mad r0.yzw, r0.xxxx, v2.xxyz, -r0.yyzw
mad r2.xyz, -r0.xxxx, v2.xyzx, cb1[0].xyzx
dp3 r0.x, r0.yzwy, r0.yzwy
sqrt r0.x, r0.x
mul_sat r0.x, r0.x, cb1[6].x
add r0.x, r0.x, l(-1.000000)
mad r0.x, -r0.x, r0.x, l(1.000000)
sqrt r0.x, r0.x
add r0.x, -r0.x, l(1.000000)
dp3 r0.y, r1.xyzx, r1.xyzx
rsq r0.y, r0.y
mul r1.xyz, r0.yyyy, r1.xyzx
mov r1.w, l(1.000000)
dp4_sat r0.y, cb1[8].xyzw, r1.xyzw
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t2.xyzw, s1
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.z, r2.xyzx, r1.xyzx
mov_sat r0.w, r0.z
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t3.xzwy, s0
lt r1.w, r1.x, l(0.411765)
add r1.x, r1.x, r1.x
and r1.x, r1.x, r1.w
mov_sat r1.x, r1.x
mad_sat r0.z, r1.x, l(0.500000), -r0.z
mad r0.z, r0.z, r1.x, r0.w
min r0.z, r0.z, l(1.000000)
mul r0.w, r0.z, cb1[7].z
mad r0.z, r0.z, l(0.500000), r0.w
add_sat r0.z, r0.z, cb1[7].y
mul r0.y, r0.z, r0.y
mul r0.x, r0.y, r0.x
add_sat r0.y, r1.z, cb2[2].z
add r0.z, r1.y, l(-0.500000)
add_sat r0.z, r0.z, r0.z
add r0.z, -r0.z, l(1.000000)
add r0.y, r0.y, -cb2[2].z
add r0.w, -cb2[2].z, l(1.000000)
div r0.y, r0.y, r0.w
mad r0.y, r0.y, cb2[2].w, cb2[3].w
mul r0.x, r0.y, r0.x
mul r0.xyw, r0.xxxx, cb1[1].xyxz
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t1.xyzw, s0
mul r1.xyz, r0.zzzz, r1.xyzx
mul o0.xyz, r0.xywx, r1.xyzx
mov o0.w, l(0)
ret 
// Approximately 65 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
