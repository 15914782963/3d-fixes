
cbuffer cbInstanceConsts : register(b1)
{
  float4 InstanceConsts[15] : packoffset(c0);
}
SamplerState DepthMap_s : register(s0);
SamplerState DiffuseAlpha_s : register(s1);
SamplerState NormalMap_s : register(s2);
SamplerState MPM_s : register(s3);
SamplerState SceneNormalMap_s : register(s5);
Texture2D<float4> DepthMap : register(t0);
Texture2D<float4> DiffuseAlpha : register(t1);
Texture2D<float4> NormalMap : register(t2);
Texture2D<float4> MPM : register(t3);
Texture2D<float4> SceneNormalMap : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy / v1.ww;
  r0.z = DepthMap.Sample(DepthMap_s, r0.xy).x;
  r0.xyw = SceneNormalMap.Sample(SceneNormalMap_s, r0.xy).xyz;
  r0.xyw = r0.xyw * float3(2,2,2) + float3(-1,-1,-1);
  r0.x = saturate(dot(r0.xyw, InstanceConsts[12].xyz));
  r0.x = 1 + -r0.x;
  r0.x = -InstanceConsts[8].x + r0.x;
  r0.x = saturate(-r0.x * InstanceConsts[8].y + 1);
  r0.y = r0.z * InstanceConsts[8].z + InstanceConsts[8].w;
  r0.y = 1 / r0.y;
  r0.yzw = v2.xyz * r0.yyy + -InstanceConsts[4].xyz;
  r1.x = dot(InstanceConsts[13].xyz, r0.yzw);
  r1.y = dot(-InstanceConsts[11].xyz, r0.yzw);
  r1.z = dot(InstanceConsts[12].xyz, r0.yzw);
  r0.yzw = r1.xyz * InstanceConsts[5].yxz + float3(0.5,0.5,0.5);
  r1.xyz = r0.yzw < float3(0,0,0);
  r1.x = (int)r1.y | (int)r1.x;
  r1.x = (int)r1.z | (int)r1.x;
  if (r1.x != 0) discard;
  r1.xyz = float3(1,1,1) + -r0.yzw;
  r1.xyz = r1.xyz < float3(0,0,0);
  r1.x = (int)r1.y | (int)r1.x;
  r1.x = (int)r1.z | (int)r1.x;
  if (r1.x != 0) discard;
  r1.x = InstanceConsts[6].y * r0.w;
  r0.w = -InstanceConsts[6].x + r0.w;
  r0.yz = r0.yz * InstanceConsts[7].xy + InstanceConsts[7].zw;
  r1.y = 0 < r0.w;
  r0.w = -r0.w * InstanceConsts[6].z + 1;
  r0.w = saturate(r1.y ? r0.w : r1.x);
  r1.xyzw = DiffuseAlpha.Sample(DiffuseAlpha_s, r0.yz).wxyz;
  o0.xyz = InstanceConsts[9].xyz * r1.yzw;
  r1.y = saturate(InstanceConsts[4].w);
  r1.x = r1.x * r1.y;
  r0.w = r1.x * r0.w;
  r0.w = InstanceConsts[9].w * r0.w;
  r0.x = r0.w * r0.x;
  r1.xyz = saturate(InstanceConsts[10].xyz * r0.xxx);
  o0.w = r1.x;
  r2.xyz = NormalMap.Sample(NormalMap_s, r0.yz).xyz;
  r0.xy = MPM.Sample(MPM_s, r0.yz).yz;
  o2.yz = r0.xy;
  r0.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r2.xyz = InstanceConsts[11].xyz * r0.yyy;
  r0.xyw = r0.xxx * InstanceConsts[13].xyz + r2.xyz;
  r0.xyz = r0.zzz * InstanceConsts[12].xyz + r0.xyw;
  o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o1.w = r1.y;
  o2.w = r1.z;
  o2.x = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts[15];         // Offset:    0 Size:   240
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DepthMap                          sampler      NA          NA    0        1
// DiffuseAlpha                      sampler      NA          NA    1        1
// NormalMap                         sampler      NA          NA    2        1
// MPM                               sampler      NA          NA    3        1
// SceneNormalMap                    sampler      NA          NA    5        1
// DepthMap                          texture  float4          2d    0        1
// DiffuseAlpha                      texture  float4          2d    1        1
// NormalMap                         texture  float4          2d    2        1
// MPM                               texture  float4          2d    3        1
// SceneNormalMap                    texture  float4          2d    5        1
// cbInstanceConsts                  cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[14], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xyw
dcl_input_ps linear noperspective v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 3
div r0.xy, v1.xyxx, v1.wwww
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t0.yzxw, s0
sample_indexable(texture2d)(float,float,float,float) r0.xyw, r0.xyxx, t5.xywz, s5
mad r0.xyw, r0.xyxw, l(2.000000, 2.000000, 0.000000, 2.000000), l(-1.000000, -1.000000, 0.000000, -1.000000)
dp3_sat r0.x, r0.xywx, cb1[12].xyzx
add r0.x, -r0.x, l(1.000000)
add r0.x, r0.x, -cb1[8].x
mad_sat r0.x, -r0.x, cb1[8].y, l(1.000000)
mad r0.y, r0.z, cb1[8].z, cb1[8].w
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mad r0.yzw, v2.xxyz, r0.yyyy, -cb1[4].xxyz
dp3 r1.x, cb1[13].xyzx, r0.yzwy
dp3 r1.y, -cb1[11].xyzx, r0.yzwy
dp3 r1.z, cb1[12].xyzx, r0.yzwy
mad r0.yzw, r1.xxyz, cb1[5].yyxz, l(0.000000, 0.500000, 0.500000, 0.500000)
lt r1.xyz, r0.yzwy, l(0.000000, 0.000000, 0.000000, 0.000000)
or r1.x, r1.y, r1.x
or r1.x, r1.z, r1.x
discard_nz r1.x
add r1.xyz, -r0.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r1.x, r1.y, r1.x
or r1.x, r1.z, r1.x
discard_nz r1.x
mul r1.x, r0.w, cb1[6].y
add r0.w, r0.w, -cb1[6].x
mad r0.yz, r0.yyzy, cb1[7].xxyx, cb1[7].zzwz
lt r1.y, l(0.000000), r0.w
mad r0.w, -r0.w, cb1[6].z, l(1.000000)
movc_sat r0.w, r1.y, r0.w, r1.x
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.yzyy, t1.wxyz, s1
mul o0.xyz, r1.yzwy, cb1[9].xyzx
mov_sat r1.y, cb1[4].w
mul r1.x, r1.y, r1.x
mul r0.w, r0.w, r1.x
mul r0.w, r0.w, cb1[9].w
mul r0.x, r0.x, r0.w
mul_sat r1.xyz, r0.xxxx, cb1[10].xyzx
mov o0.w, r1.x
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.yzyy, t2.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r0.xy, r0.yzyy, t3.yzxw, s3
mov o2.yz, r0.xxyx
mad r0.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r2.xyz, r0.yyyy, cb1[11].xyzx
mad r0.xyw, r0.xxxx, cb1[13].xyxz, r2.xyxz
mad r0.xyz, r0.zzzz, cb1[12].xyzx, r0.xywx
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o1.w, r1.y
mov o2.w, r1.z
mov o2.x, l(0)
ret 
// Approximately 51 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
