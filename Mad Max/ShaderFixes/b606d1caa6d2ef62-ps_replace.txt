
cbuffer GlobalConstants : register(b0)
{
  float4 Globals[17] : packoffset(c0);
  float4 LightPositions[65] : packoffset(c17);
  float4 LightColors[65] : packoffset(c82);
}

cbuffer cbInstanceConsts : register(b1)
{
  float4 InstanceConsts[15] : packoffset(c0);
}

cbuffer cbTypeConsts : register(b2)
{
  float4 TypeConsts[6] : packoffset(c0);
}
SamplerState SamplerStateRegular_s : register(s0);
SamplerState SamplerStateNormals_s : register(s1);
Texture2D<float> Depth : register(t0);
Texture2D<float4> Diffuse : register(t1);
Texture2D<float3> Normal : register(t2);
Texture2D<float4> Properties : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = Globals[8].zw * v0.xy;
  r0.xy = InstanceConsts[13].zw * r0.xy;
  r0.z = Depth.Sample(SamplerStateRegular_s, r0.xy).x;
  r0.z = r0.z * TypeConsts[0].x + TypeConsts[0].y;
  r0.z = 1 / r0.z;
  r1.xyz = -r0.zzz * v2.xyz + InstanceConsts[0].xyz;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.z);
  r0.z = sqrt(r0.z);
  r0.z = saturate(r0.z * InstanceConsts[1].w + InstanceConsts[0].w);
  r0.z = -1 + r0.z;
  r0.z = -r0.z * r0.z + 1;
  r0.z = sqrt(r0.z);
  r0.z = 1 + -r0.z;
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = Normal.Sample(SamplerStateNormals_s, r0.xy).xyz;
  r2.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = saturate(dot(r2.xyz, r1.xyz));
  r1.x = dot(-v2.xyz, -v2.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = -v2.xyz * r1.xxx;
  r1.x = saturate(dot(r1.xyz, r2.xyz));
  r1.x = r0.w * r1.x + 9.99999975e-005;
  r1.x = log2(r1.x);
  r1.yz = Properties.Sample(SamplerStateRegular_s, r0.xy).zw;
  r2.xyz = Diffuse.Sample(SamplerStateRegular_s, r0.xy).xyz;
  r0.x = -0.5 + r1.y;
  r0.y = saturate(TypeConsts[3].z + r1.z);
  r0.y = -TypeConsts[3].z + r0.y;
  r0.x = saturate(r0.x + r0.x);
  r1.y = r0.x * TypeConsts[2].y + 9.99999975e-005;
  r0.x = 1 + -r0.x;
  r1.x = r1.y * r1.x;
  r1.x = exp2(r1.x);
  r0.w = r1.x * r0.w;
  r0.w = min(1, r0.w);
  r1.x = 1 + -TypeConsts[3].z;
  r0.y = r0.y / r1.x;
  r0.y = r0.y * TypeConsts[3].w + TypeConsts[4].w;
  r0.y = r0.w * r0.y;
  r0.y = r0.z * r0.y;
  r0.y = InstanceConsts[4].z * r0.y;
  r0.yzw = r0.yyy * r2.xyz;
  r0.xyz = r0.yzw * r0.xxx;
  o0.xyz = InstanceConsts[1].xyz * r0.xyz;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer GlobalConstants
// {
//
//   float4 Globals[17];                // Offset:    0 Size:   272
//   float4 LightPositions[65];         // Offset:  272 Size:  1040 [unused]
//   float4 LightColors[65];            // Offset: 1312 Size:  1040 [unused]
//
// }
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts[15];         // Offset:    0 Size:   240
//
// }
//
// cbuffer cbTypeConsts
// {
//
//   float4 TypeConsts[6];              // Offset:    0 Size:    96
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SamplerStateRegular               sampler      NA          NA    0        1
// SamplerStateNormals               sampler      NA          NA    1        1
// Depth                             texture   float          2d    0        1
// Diffuse                           texture  float4          2d    1        1
// Normal                            texture  float3          2d    2        1
// Properties                        texture  float4          2d    3        1
// GlobalConstants                   cbuffer      NA          NA    0        1
// cbInstanceConsts                  cbuffer      NA          NA    1        1
// cbTypeConsts                      cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[14], immediateIndexed
dcl_constantbuffer cb2[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear noperspective v2.xyz
dcl_output o0.xyzw
dcl_temps 3
mul r0.xy, v0.xyxx, cb0[8].zwzz
mul r0.xy, r0.xyxx, cb1[13].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t0.yzxw, s0
mad r0.z, r0.z, cb2[0].x, cb2[0].y
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mad r1.xyz, -r0.zzzz, v2.xyzx, cb1[0].xyzx
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.w, r0.z
sqrt r0.z, r0.z
mad_sat r0.z, r0.z, cb1[1].w, cb1[0].w
add r0.z, r0.z, l(-1.000000)
mad r0.z, -r0.z, r0.z, l(1.000000)
sqrt r0.z, r0.z
add r0.z, -r0.z, l(1.000000)
mul r1.xyz, r0.wwww, r1.xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t2.xyzw, s1
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3_sat r0.w, r2.xyzx, r1.xyzx
dp3 r1.x, -v2.xyzx, -v2.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, -v2.xyzx
dp3_sat r1.x, r1.xyzx, r2.xyzx
mad r1.x, r0.w, r1.x, l(0.000100)
log r1.x, r1.x
sample_indexable(texture2d)(float,float,float,float) r1.yz, r0.xyxx, t3.xzwy, s0
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t1.xyzw, s0
add r0.x, r1.y, l(-0.500000)
add_sat r0.y, r1.z, cb2[3].z
add r0.y, r0.y, -cb2[3].z
add_sat r0.x, r0.x, r0.x
mad r1.y, r0.x, cb2[2].y, l(0.000100)
add r0.x, -r0.x, l(1.000000)
mul r1.x, r1.x, r1.y
exp r1.x, r1.x
mul r0.w, r0.w, r1.x
min r0.w, r0.w, l(1.000000)
add r1.x, -cb2[3].z, l(1.000000)
div r0.y, r0.y, r1.x
mad r0.y, r0.y, cb2[3].w, cb2[4].w
mul r0.y, r0.y, r0.w
mul r0.y, r0.y, r0.z
mul r0.y, r0.y, cb1[4].z
mul r0.yzw, r2.xxyz, r0.yyyy
mul r0.xyz, r0.xxxx, r0.yzwy
mul o0.xyz, r0.xyzx, cb1[1].xyzx
mov o0.w, l(0)
ret 
// Approximately 50 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
