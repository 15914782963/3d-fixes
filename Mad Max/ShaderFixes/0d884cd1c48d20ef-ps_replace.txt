
cbuffer cbInstanceConsts : register(b1)
{
  float4 InstanceConsts[15] : packoffset(c0);
}
SamplerState DepthMap_s : register(s0);
SamplerState DiffuseAlpha_s : register(s1);
SamplerState NormalMap_s : register(s2);
SamplerState MPM_s : register(s3);
SamplerState ExtraMask_s : register(s4);
Texture2D<float4> DepthMap : register(t0);
Texture2D<float4> DiffuseAlpha : register(t1);
Texture2D<float4> NormalMap : register(t2);
Texture2D<float4> MPM : register(t3);
Texture2D<float4> ExtraMask : register(t4);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy / v1.ww;
  r0.x = DepthMap.Sample(DepthMap_s, r0.xy).x;
  r0.x = r0.x * InstanceConsts[8].z + InstanceConsts[8].w;
  r0.x = 1 / r0.x;
  r0.xyz = v2.xyz * r0.xxx + -InstanceConsts[4].xyz;
  r1.x = dot(InstanceConsts[13].xyz, r0.xyz);
  r1.y = dot(-InstanceConsts[11].xyz, r0.xyz);
  r1.z = dot(InstanceConsts[12].xyz, r0.xyz);
  r0.xyz = r1.xyz * InstanceConsts[5].yxz + float3(0.5,0.5,0.5);
  r1.xyz = r0.xyz < float3(0,0,0);
  r0.w = (int)r1.y | (int)r1.x;
  r0.w = (int)r1.z | (int)r0.w;
  if (r0.w != 0) discard;
  r1.xyz = float3(1,1,1) + -r0.xyz;
  r1.xyz = r1.xyz < float3(0,0,0);
  r0.w = (int)r1.y | (int)r1.x;
  r0.w = (int)r1.z | (int)r0.w;
  if (r0.w != 0) discard;
  r0.w = InstanceConsts[6].y * r0.z;
  r0.z = -InstanceConsts[6].x + r0.z;
  r1.x = 0 < r0.z;
  r0.z = -r0.z * InstanceConsts[6].z + 1;
  r0.z = saturate(r1.x ? r0.z : r0.w);
  r1.xy = r0.xy * InstanceConsts[14].zw + InstanceConsts[14].xy;
  r0.xy = r0.xy * InstanceConsts[7].xy + InstanceConsts[7].zw;
  r1.xyzw = ExtraMask.Sample(ExtraMask_s, r1.xy).xyzw;
  r0.w = 1 + -InstanceConsts[6].w;
  r0.w = r1.y * r0.w;
  r0.w = r1.w * InstanceConsts[6].w + r0.w;
  r2.xyzw = DiffuseAlpha.Sample(DiffuseAlpha_s, r0.xy).wxyz;
  r2.yzw = InstanceConsts[9].xyz * r2.yzw;
  r0.w = r2.x * r0.w;
  r1.w = saturate(InstanceConsts[4].w);
  r0.w = r1.w * r0.w;
  r0.z = r0.w * r0.z;
  r0.z = InstanceConsts[9].w * r0.z;
  r3.xyz = saturate(InstanceConsts[10].xyz * r0.zzz);
  o0.w = r3.x;
  r1.xyz = r2.yzw * r1.xyz + -r2.yzw;
  o0.xyz = InstanceConsts[6].www * r1.xyz + r2.yzw;
  r1.xyz = NormalMap.Sample(NormalMap_s, r0.xy).xyz;
  r0.xy = MPM.Sample(MPM_s, r0.xy).yz;
  o2.yz = r0.xy;
  r0.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.xyz = InstanceConsts[11].xyz * r0.yyy;
  r0.xyw = r0.xxx * InstanceConsts[13].xyz + r1.xyz;
  r0.xyz = r0.zzz * InstanceConsts[12].xyz + r0.xyw;
  o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o1.w = r3.y;
  o2.w = r3.z;
  o2.x = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts[15];         // Offset:    0 Size:   240
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DepthMap                          sampler      NA          NA    0        1
// DiffuseAlpha                      sampler      NA          NA    1        1
// NormalMap                         sampler      NA          NA    2        1
// MPM                               sampler      NA          NA    3        1
// ExtraMask                         sampler      NA          NA    4        1
// DepthMap                          texture  float4          2d    0        1
// DiffuseAlpha                      texture  float4          2d    1        1
// NormalMap                         texture  float4          2d    2        1
// MPM                               texture  float4          2d    3        1
// ExtraMask                         texture  float4          2d    4        1
// cbInstanceConsts                  cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyw
dcl_input_ps linear noperspective v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 4
div r0.xy, v1.xyxx, v1.wwww
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xyzw, s0
mad r0.x, r0.x, cb1[8].z, cb1[8].w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mad r0.xyz, v2.xyzx, r0.xxxx, -cb1[4].xyzx
dp3 r1.x, cb1[13].xyzx, r0.xyzx
dp3 r1.y, -cb1[11].xyzx, r0.xyzx
dp3 r1.z, cb1[12].xyzx, r0.xyzx
mad r0.xyz, r1.xyzx, cb1[5].yxzy, l(0.500000, 0.500000, 0.500000, 0.000000)
lt r1.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r1.y, r1.x
or r0.w, r1.z, r0.w
discard_nz r0.w
add r1.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r1.y, r1.x
or r0.w, r1.z, r0.w
discard_nz r0.w
mul r0.w, r0.z, cb1[6].y
add r0.z, r0.z, -cb1[6].x
lt r1.x, l(0.000000), r0.z
mad r0.z, -r0.z, cb1[6].z, l(1.000000)
movc_sat r0.z, r1.x, r0.z, r0.w
mad r1.xy, r0.xyxx, cb1[14].zwzz, cb1[14].xyxx
mad r0.xy, r0.xyxx, cb1[7].xyxx, cb1[7].zwzz
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t4.xyzw, s4
add r0.w, -cb1[6].w, l(1.000000)
mul r0.w, r0.w, r1.y
mad r0.w, r1.w, cb1[6].w, r0.w
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t1.wxyz, s1
mul r2.yzw, r2.yyzw, cb1[9].xxyz
mul r0.w, r0.w, r2.x
mov_sat r1.w, cb1[4].w
mul r0.w, r0.w, r1.w
mul r0.z, r0.z, r0.w
mul r0.z, r0.z, cb1[9].w
mul_sat r3.xyz, r0.zzzz, cb1[10].xyzx
mov o0.w, r3.x
mad r1.xyz, r2.yzwy, r1.xyzx, -r2.yzwy
mad o0.xyz, cb1[6].wwww, r1.xyzx, r2.yzwy
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t2.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r0.xy, r0.xyxx, t3.yzxw, s3
mov o2.yz, r0.xxyx
mad r0.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r1.xyz, r0.yyyy, cb1[11].xyzx
mad r0.xyw, r0.xxxx, cb1[13].xyxz, r1.xyxz
mad r0.xyz, r0.zzzz, cb1[12].xyzx, r0.xywx
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o1.w, r3.y
mov o2.w, r3.z
mov o2.x, l(0)
ret 
// Approximately 52 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
