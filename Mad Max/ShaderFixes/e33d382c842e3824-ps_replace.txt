
cbuffer GlobalConstants : register(b0)
{
  float4 Globals[17] : packoffset(c0);
  float4 LightPositions[65] : packoffset(c17);
  float4 LightColors[65] : packoffset(c82);
}

cbuffer cbConstants : register(b1)
{
  float4 Constants[22] : packoffset(c0);
}
SamplerState DepthSampler_s : register(s0);
SamplerState NoiseSampler_s : register(s1);
SamplerComparisonState ShadowComparisonFilter_s : register(s14);
Texture2D<float4> DepthSampler : register(t0);
Texture3D<float4> NoiseSampler : register(t1);
Texture2DArray<float4> ShadowMapTexture : register(t14);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy * v1.zw;
  r0.x = DepthSampler.Sample(DepthSampler_s, r0.xy).x;
  r1.xyzw = Constants[13].xyzw * v1.yyyy;
  r1.xyzw = v1.xxxx * Constants[12].xyzw + r1.xyzw;
  r0.xyzw = r0.xxxx * Constants[14].xyzw + r1.xyzw;
  r0.xyzw = Constants[15].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;
  r1.xyz = -Globals[4].xyz + r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r1.w = sqrt(r0.w);
  r1.w = max(9.99999975e-005, r1.w);
  r2.xyz = -r1.xyz / r1.www;
  r2.w = 0.0250000004 * r1.w;
  r2.w = min(Constants[16].z, r2.w);
  r3.x = saturate(-r2.y);
  r3.x = r3.x * r3.x;
  r3.x = r3.x * Constants[16].w + 1;
  r2.xyz = r2.xyz * r2.www;
  r1.w = r1.w / r2.w;
  r3.y = (int)r1.w;
  r3.y = min(40, (int)r3.y);
  r3.z = dot(v0.xy, float2(0.467943996,-0.703647971));
  r3.z = frac(r3.z);
  r3.y = (int)r3.y;
  r1.w = -r3.y + r1.w;
  r0.xyz = r2.xyz * r1.www + r0.xyz;
  r0.xyz = r3.zzz * r2.xyz + r0.xyz;
  r3.yzw = Constants[5].xyz * r2.yyy;
  r3.yzw = r2.xxx * Constants[4].xyz + r3.yzw;
  r3.yzw = r2.zzz * Constants[6].xyz + r3.yzw;
  r4.xyz = -Globals[4].xyz + r0.xyz;
  r5.xyz = Constants[5].xyz * r4.yyy;
  r5.xyz = r4.xxx * Constants[4].xyz + r5.xyz;
  r5.xyz = r4.zzz * Constants[6].xyz + r5.xyz;
  r5.xyz = Constants[7].xyz + r5.xyz;
  r6.xyz = Constants[9].xyz * r2.yyy;
  r6.xyz = r2.xxx * Constants[8].xyz + r6.xyz;
  r6.xyz = r2.zzz * Constants[10].xyz + r6.xyz;
  r7.xyz = Constants[9].xyz * r4.yyy;
  r4.xyw = r4.xxx * Constants[8].xyz + r7.xyz;
  r4.xyz = r4.zzz * Constants[10].xyz + r4.xyw;
  r4.xyz = Constants[11].xyz + r4.xyz;
  r0.xyz = Constants[20].xyz + r0.xyz;
  r0.xyz = Constants[17].xyz * r0.xyz;
  r7.xyz = r0.xyz;
  r8.xyz = r5.xyz;
  r9.xyz = r4.xyz;
  r10.xy = float2(0,0);
  r1.w = 0;
  while (true) {
    r4.w = (int)r1.w >= 40;
    if (r4.w != 0) break;
    r4.w = NoiseSampler.Sample(NoiseSampler_s, r7.xyz).x;
    r11.y = -r4.w * Constants[17].w + 1;
    r7.xyz = r2.xyz * Constants[17].xyz + r7.xyz;
    r10.zw = r8.xy * float2(10,10) + float2(-5,-5);
    r4.w = max(abs(r10.z), abs(r10.w));
    r4.w = r4.w < 4.94999981;
    r12.xyz = r4.www ? r8.zxy : r9.zxy;
    r12.w = r4.w ? 1 : 2;
    r12.x = saturate(r12.x);
    r4.w = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s, r12.yzw, r12.x).x;
    r11.x = r4.w * r11.y;
    r10.xy = r11.xy + r10.xy;
    r8.xyz = r8.xyz + r3.yzw;
    r9.xyz = r9.xyz + r6.xyz;
    r1.w = (int)r1.w + 1;
  }
  r0.x = Constants[17].w * Constants[17].w + 1;
  r0.xy = r10.xy * r0.xx;
  r0.xy = float2(0.200000003,0.0250000004) * r0.xy;
  r0.z = r2.w / Constants[16].z;
  r0.xy = r0.xy * r0.zz;
  r0.xy = r0.xy / r3.xx;
  r0.z = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.zzz;
  r0.z = dot(r1.xyz, -Globals[3].xyz);
  r0.z = 1 + r0.z;
  r0.z = 0.5 * r0.z;
  r0.w = Constants[16].y * Constants[16].y;
  r0.w = r0.w * 25 + 0.00100000005;
  r0.z = log2(r0.z);
  r0.z = r0.w * r0.z;
  r0.z = exp2(r0.z);
  r0.z = -1 + r0.z;
  r0.z = Constants[16].y * r0.z + 1;
  r0.w = r0.x * r0.z;
  o0.z = 0;
  r0.x = r0.x * r0.z + -1;
  o0.w = saturate(0.125 * r0.x);
  o0.xy = r0.wy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer GlobalConstants
// {
//
//   float4 Globals[17];                // Offset:    0 Size:   272
//   float4 LightPositions[65];         // Offset:  272 Size:  1040 [unused]
//   float4 LightColors[65];            // Offset: 1312 Size:  1040 [unused]
//
// }
//
// cbuffer cbConstants
// {
//
//   float4 Constants[22];              // Offset:    0 Size:   352
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DepthSampler                      sampler      NA          NA    0        1
// NoiseSampler                      sampler      NA          NA    1        1
// ShadowComparisonFilter          sampler_c      NA          NA   14        1
// DepthSampler                      texture  float4          2d    0        1
// NoiseSampler                      texture  float4          3d    1        1
// ShadowMapTexture                  texture  float4     2darray   14        1
// GlobalConstants                   cbuffer      NA          NA    0        1
// cbConstants                       cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[5], immediateIndexed
dcl_constantbuffer cb1[21], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s14, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_resource_texture2darray (float,float,float,float) t14
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_output o0.xyzw
dcl_temps 13
mul r0.xy, v1.zwzz, v1.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xyzw, s0
mul r1.xyzw, v1.yyyy, cb1[13].xyzw
mad r1.xyzw, v1.xxxx, cb1[12].xyzw, r1.xyzw
mad r0.xyzw, r0.xxxx, cb1[14].xyzw, r1.xyzw
add r0.xyzw, r0.xyzw, cb1[15].xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r1.xyz, r0.xyzx, -cb0[4].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r1.w, r0.w
max r1.w, r1.w, l(0.000100)
div r2.xyz, -r1.xyzx, r1.wwww
mul r2.w, r1.w, l(0.025000)
min r2.w, r2.w, cb1[16].z
mov_sat r3.x, -r2.y
mul r3.x, r3.x, r3.x
mad r3.x, r3.x, cb1[16].w, l(1.000000)
mul r2.xyz, r2.wwww, r2.xyzx
div r1.w, r1.w, r2.w
ftoi r3.y, r1.w
imin r3.y, r3.y, l(40)
dp2 r3.z, v0.xyxx, l(0.467944, -0.703648, 0.000000, 0.000000)
frc r3.z, r3.z
itof r3.y, r3.y
add r1.w, r1.w, -r3.y
mad r0.xyz, r2.xyzx, r1.wwww, r0.xyzx
mad r0.xyz, r3.zzzz, r2.xyzx, r0.xyzx
mul r3.yzw, r2.yyyy, cb1[5].xxyz
mad r3.yzw, r2.xxxx, cb1[4].xxyz, r3.yyzw
mad r3.yzw, r2.zzzz, cb1[6].xxyz, r3.yyzw
add r4.xyz, r0.xyzx, -cb0[4].xyzx
mul r5.xyz, r4.yyyy, cb1[5].xyzx
mad r5.xyz, r4.xxxx, cb1[4].xyzx, r5.xyzx
mad r5.xyz, r4.zzzz, cb1[6].xyzx, r5.xyzx
add r5.xyz, r5.xyzx, cb1[7].xyzx
mul r6.xyz, r2.yyyy, cb1[9].xyzx
mad r6.xyz, r2.xxxx, cb1[8].xyzx, r6.xyzx
mad r6.xyz, r2.zzzz, cb1[10].xyzx, r6.xyzx
mul r7.xyz, r4.yyyy, cb1[9].xyzx
mad r4.xyw, r4.xxxx, cb1[8].xyxz, r7.xyxz
mad r4.xyz, r4.zzzz, cb1[10].xyzx, r4.xywx
add r4.xyz, r4.xyzx, cb1[11].xyzx
add r0.xyz, r0.xyzx, cb1[20].xyzx
mul r0.xyz, r0.xyzx, cb1[17].xyzx
mov r7.xyz, r0.xyzx
mov r8.xyz, r5.xyzx
mov r9.xyz, r4.xyzx
mov r10.xy, l(0,0,0,0)
mov r1.w, l(0)
loop 
  ige r4.w, r1.w, l(40)
  breakc_nz r4.w
  sample_indexable(texture3d)(float,float,float,float) r4.w, r7.xyzx, t1.yzwx, s1
  mad r11.y, -r4.w, cb1[17].w, l(1.000000)
  mad r7.xyz, r2.xyzx, cb1[17].xyzx, r7.xyzx
  mad r10.zw, r8.xxxy, l(0.000000, 0.000000, 10.000000, 10.000000), l(0.000000, 0.000000, -5.000000, -5.000000)
  max r4.w, |r10.w|, |r10.z|
  lt r4.w, r4.w, l(4.950000)
  movc r12.xyz, r4.wwww, r8.zxyz, r9.zxyz
  movc r12.w, r4.w, l(1.000000), l(2.000000)
  mov_sat r12.x, r12.x
  sample_c_lz_indexable(texture2darray)(float,float,float,float) r4.w, r12.yzwy, t14.xxxx, s14, r12.x
  mul r11.x, r11.y, r4.w
  add r10.xy, r10.xyxx, r11.xyxx
  add r8.xyz, r3.yzwy, r8.xyzx
  add r9.xyz, r6.xyzx, r9.xyzx
  iadd r1.w, r1.w, l(1)
endloop 
mad r0.x, cb1[17].w, cb1[17].w, l(1.000000)
mul r0.xy, r0.xxxx, r10.xyxx
mul r0.xy, r0.xyxx, l(0.200000, 0.025000, 0.000000, 0.000000)
div r0.z, r2.w, cb1[16].z
mul r0.xy, r0.zzzz, r0.xyxx
div r0.xy, r0.xyxx, r3.xxxx
rsq r0.z, r0.w
mul r1.xyz, r0.zzzz, r1.xyzx
dp3 r0.z, r1.xyzx, -cb0[3].xyzx
add r0.z, r0.z, l(1.000000)
mul r0.z, r0.z, l(0.500000)
mul r0.w, cb1[16].y, cb1[16].y
mad r0.w, r0.w, l(25.000000), l(0.001000)
log r0.z, r0.z
mul r0.z, r0.z, r0.w
exp r0.z, r0.z
add r0.z, r0.z, l(-1.000000)
mad r0.z, cb1[16].y, r0.z, l(1.000000)
mul r0.w, r0.z, r0.x
mov o0.z, l(0)
mad r0.x, r0.x, r0.z, l(-1.000000)
mul_sat o0.w, r0.x, l(0.125000)
mov o0.xy, r0.wyww
ret 
// Approximately 92 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
