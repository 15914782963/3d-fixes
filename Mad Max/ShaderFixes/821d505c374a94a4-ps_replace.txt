
cbuffer GlobalConstants : register(b0)
{
  float4 Globals[17] : packoffset(c0);
  float4 LightPositions[65] : packoffset(c17);
  float4 LightColors[65] : packoffset(c82);
}

cbuffer cbConstants : register(b1)
{
  float4 Constants[39] : packoffset(c0);
}
SamplerState SamplerStateRegular_s : register(s0);
SamplerState SamplerStateNormals_s : register(s1);
SamplerState SamplerStateCubeMap_s : register(s3);
Texture2D<float> Depth : register(t0);
Texture2D<float4> Diffuse : register(t1);
Texture2D<float3> Normal : register(t2);
Texture2D<float4> Properties : register(t3);
TextureCube<float3> Environment0 : register(t6);
TextureCube<float3> Environment1 : register(t7);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = Depth.Sample(SamplerStateRegular_s, v1.xy).x;
  r0.y = 0 < r0.x;
  if (r0.y != 0) {
    r1.xyzw = Diffuse.Sample(SamplerStateRegular_s, v1.xy).xyzw;
    r0.yzw = Normal.Sample(SamplerStateNormals_s, v1.xy).xyz;
    r0.yzw = r0.yzw * float3(2,2,2) + float3(-1,-1,-1);
    r2.xyzw = Properties.Sample(SamplerStateRegular_s, v1.xy).xyzw;
    r3.xyz = float3(0.125,1,0.5) + -r2.yyz;
    r3.x = saturate(r3.x);
    r3.w = r2.x < 0.411764711;
    r4.xy = float2(-0.501960814,-0.5) + r2.xz;
    r4.xy = saturate(r4.xy + r4.xy);
    r2.x = r3.w ? 0 : r4.x;
    r3.w = dot(-v2.xyz, -v2.xyz);
    r3.w = rsqrt(r3.w);
    r4.xzw = -v2.xyz * r3.www;
    r5.xyz = -v2.xyz * r3.www + -r0.yzw;
    r0.yzw = r3.xxx * r5.xyz + r0.yzw;
    r3.x = dot(r0.yzw, r0.yzw);
    r3.x = rsqrt(r3.x);
    r0.yzw = r3.xxx * r0.yzw;
    r3.x = 5 * r3.y;
    r3.w = r2.x == 0.000000;
    r3.z = saturate(r3.z + r3.z);
    r3.z = r3.z * r3.z;
    r3.z = r3.z * r3.z;
    r5.x = 0.800000012 * r3.z;
    r5.y = min(0.400000006, r5.x);
    r3.zw = r3.ww ? r5.xy : 0;
    r0.x = r0.x * Constants[0].x + Constants[0].y;
    r0.x = 1 / r0.x;
    r5.x = r0.x * v2.y + Globals[4].y;
    r5.y = dot(r4.xzw, r0.yzw);
    r5.z = saturate(r0.z * 0.5 + 0.5);
    r6.xyz = -Globals[11].xyz + Globals[10].xyz;
    r6.xyz = r5.zzz * r6.xyz + Globals[11].xyz;
    r5.z = dot(r0.yzw, -Globals[3].xyz);
    r5.z = r5.z + r3.w;
    r3.w = 1 + r3.w;
    r3.w = saturate(r5.z / r3.w);
    r5.z = -1 + r3.w;
    r3.z = r3.z * r5.z + 1;
    r3.z = r3.w * r3.z;
    r3.w = r2.w * Constants[35].x + Constants[36].x;
    r6.xyz = Constants[0].zzz * r6.xyz;
    r5.z = saturate(r2.z * 2 + -1);
    r5.z = r5.z * 0.649999976 + 0.0500000007;
    r5.w = 1 + -r5.z;
    r6.w = saturate(r5.y * 0.899999976 + 0.100000001);
    r6.w = 1.00100005 + -r6.w;
    r6.w = min(1, r6.w);
    r7.x = r6.w * r6.w;
    r7.x = r7.x * r7.x;
    r6.w = r7.x * r6.w;
    r5.z = r5.w * r6.w + r5.z;
    r5.z = min(1, r5.z);
    r7.xyz = float3(0.00999999978,0.00999999978,0.00999999978) + r1.xyz;
    r5.w = dot(r7.xyz, r7.xyz);
    r5.w = rsqrt(r5.w);
    r7.xyz = r7.xyz * r5.www + float3(-1,-1,-1);
    r7.xyz = r4.yyy * r7.xyz + float3(1,1,1);
    r6.xyz = r6.xyz * r3.www;
    r1.xyz = r6.xyz * r1.xyz;
    r3.w = r5.y + r5.y;
    r0.yzw = r3.www * r0.yzw + -r4.xzw;
    r5.yw = Constants[33].yw * r0.ww;
    r6.xz = -r0.yy * Constants[33].xz + r5.yw;
    r5.yw = Constants[38].yw * r0.ww;
    r8.xz = -r0.yy * Constants[38].xz + r5.yw;
    r6.y = r0.z;
    r0.yzw = Environment0.SampleLevel(SamplerStateCubeMap_s, r6.xyz, r3.x).xyz;
    r8.y = r6.y;
    r6.xyz = Environment1.SampleLevel(SamplerStateCubeMap_s, r8.xyz, r3.x).xyz;
    r6.xyz = r6.xyz + -r0.yzw;
    r0.yzw = Constants[0].www * r6.xyz + r0.yzw;
    r0.yzw = r0.yzw * r7.xyz;
    r0.yzw = Constants[20].zzz * r0.yzw;
    r3.x = saturate(-r2.z * 2 + 1);
    r3.x = r3.x + r3.x;
    r3.x = max(r3.x, r2.x);
    r3.w = 3 * r2.y;
    r2.x = -r2.x * 8 + 1;
    r2.x = saturate(r3.w * r2.x + -1);
    r3.xw = float2(2,1) + r3.xx;
    r3.x = r2.w * r3.x + -r3.w;
    r2.zw = r2.wz * float2(1.60000002,4.5999999) + float2(0.200000003,-1.29999995);
    r2.x = max(r4.y, r2.x);
    r2.z = r2.z + -r3.x;
    r2.x = saturate(r2.x * r2.z + r3.x);
    r2.z = dot(float3(0.212500006,0.715399981,0.0720999986), Globals[10].zzz);
    r2.z = 3 * r2.z;
    r3.x = dot(float3(0.212500006,0.715399981,0.0720999986), Globals[2].xyz);
    r3.x = max(0.100000001, r3.x);
    r2.z = r2.z / r3.x;
    r2.z = max(0.100000001, r2.z);
    r2.z = min(1, r2.z);
    r2.y = r4.y * r3.y + r2.y;
    r3.x = Globals[9].w * r3.z;
    r2.z = saturate(r3.x * 6 + r2.z);
    r2.z = Constants[31].z * r2.z + -1;
    r2.z = Constants[31].z * r2.z;
    r2.z = r2.y * r2.z + 1;
    r2.x = r2.z * r2.x;
    r2.x = r2.x * r2.y;
    r2.y = max(0.0799999982, r2.w);
    r2.y = min(1, r2.y);
    r2.y = min(r5.z, r2.y);
    r2.x = saturate(r2.y * r2.x);
    r2.y = 1 + -r2.x;
    r2.z = 1 + -r4.y;
    r2.y = r2.y * r2.z;
    r0.yzw = r2.xxx * r0.yzw;
    r0.yzw = r1.xyz * r2.yyy + r0.yzw;
    r1.x = saturate(Globals[16].w * r0.x);
    r1.y = r5.x * Globals[16].z + -Globals[16].x;
    r1.y = min(Globals[16].y, r1.y);
    r1.y = 1 + -r1.y;
    r1.x = r1.x * r1.y + -Globals[14].w;
    r0.x = r0.x * Globals[15].w + r1.x;
    r1.x = dot(Constants[37].xyz, r4.xzw);
    r1.x = 0.5 + r1.x;
    r2.x = 1;
    r2.yzw = Globals[13].www * float3(1,1.79999995,2.79999995) + float3(1,1,1);
    r2.xyzw = r2.xyzw * -r0.xxxx;
    r2.xyzw = exp2(r2.xyzw);
    r2.xyzw = min(float4(1,1,1,1), r2.xyzw);
    r0.x = 1 + -r2.x;
    r1.y = r1.x * r1.x;
    r1.x = r1.y * r1.x;
    r1.xyz = r1.xxx * Globals[14].xyz + Globals[15].xyz;
    r1.xyz = r1.xyz * r0.xxx;
    o0.xyz = r0.yzw * r2.yzw + r1.xyz;
    o0.w = r1.w;
  } else {
    o0.xyzw = float4(0,0,0,0);
  }
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer GlobalConstants
// {
//
//   float4 Globals[17];                // Offset:    0 Size:   272
//   float4 LightPositions[65];         // Offset:  272 Size:  1040 [unused]
//   float4 LightColors[65];            // Offset: 1312 Size:  1040 [unused]
//
// }
//
// cbuffer cbConstants
// {
//
//   float4 Constants[39];              // Offset:    0 Size:   624
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SamplerStateRegular               sampler      NA          NA    0        1
// SamplerStateNormals               sampler      NA          NA    1        1
// SamplerStateCubeMap               sampler      NA          NA    3        1
// Depth                             texture   float          2d    0        1
// Diffuse                           texture  float4          2d    1        1
// Normal                            texture  float3          2d    2        1
// Properties                        texture  float4          2d    3        1
// Environment0                      texture  float3        cube    6        1
// Environment1                      texture  float3        cube    7        1
// GlobalConstants                   cbuffer      NA          NA    0        1
// cbConstants                       cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[17], immediateIndexed
dcl_constantbuffer cb1[39], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t6
dcl_resource_texturecube (float,float,float,float) t7
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 9
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
lt r0.y, l(0.000000), r0.x
if_nz r0.y
  sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s0
  sample_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t2.wxyz, s1
  mad r0.yzw, r0.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t3.xyzw, s0
  add r3.xyz, -r2.yyzy, l(0.125000, 1.000000, 0.500000, 0.000000)
  mov_sat r3.x, r3.x
  lt r3.w, r2.x, l(0.411765)
  add r4.xy, r2.xzxx, l(-0.501961, -0.500000, 0.000000, 0.000000)
  add_sat r4.xy, r4.xyxx, r4.xyxx
  movc r2.x, r3.w, l(0), r4.x
  dp3 r3.w, -v2.xyzx, -v2.xyzx
  rsq r3.w, r3.w
  mul r4.xzw, r3.wwww, -v2.xxyz
  mad r5.xyz, -v2.xyzx, r3.wwww, -r0.yzwy
  mad r0.yzw, r3.xxxx, r5.xxyz, r0.yyzw
  dp3 r3.x, r0.yzwy, r0.yzwy
  rsq r3.x, r3.x
  mul r0.yzw, r0.yyzw, r3.xxxx
  mul r3.x, r3.y, l(5.000000)
  eq r3.w, r2.x, l(0.000000)
  add_sat r3.z, r3.z, r3.z
  mul r3.z, r3.z, r3.z
  mul r3.z, r3.z, r3.z
  mul r5.x, r3.z, l(0.800000)
  min r5.y, r5.x, l(0.400000)
  and r3.zw, r3.wwww, r5.xxxy
  mad r0.x, r0.x, cb1[0].x, cb1[0].y
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mad r5.x, r0.x, v2.y, cb0[4].y
  dp3 r5.y, r4.xzwx, r0.yzwy
  mad_sat r5.z, r0.z, l(0.500000), l(0.500000)
  add r6.xyz, cb0[10].xyzx, -cb0[11].xyzx
  mad r6.xyz, r5.zzzz, r6.xyzx, cb0[11].xyzx
  dp3 r5.z, r0.yzwy, -cb0[3].xyzx
  add r5.z, r3.w, r5.z
  add r3.w, r3.w, l(1.000000)
  div_sat r3.w, r5.z, r3.w
  add r5.z, r3.w, l(-1.000000)
  mad r3.z, r3.z, r5.z, l(1.000000)
  mul r3.z, r3.z, r3.w
  mad r3.w, r2.w, cb1[35].x, cb1[36].x
  mul r6.xyz, r6.xyzx, cb1[0].zzzz
  mad_sat r5.z, r2.z, l(2.000000), l(-1.000000)
  mad r5.z, r5.z, l(0.650000), l(0.050000)
  add r5.w, -r5.z, l(1.000000)
  mad_sat r6.w, r5.y, l(0.900000), l(0.100000)
  add r6.w, -r6.w, l(1.001000)
  min r6.w, r6.w, l(1.000000)
  mul r7.x, r6.w, r6.w
  mul r7.x, r7.x, r7.x
  mul r6.w, r6.w, r7.x
  mad r5.z, r5.w, r6.w, r5.z
  min r5.z, r5.z, l(1.000000)
  add r7.xyz, r1.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000)
  dp3 r5.w, r7.xyzx, r7.xyzx
  rsq r5.w, r5.w
  mad r7.xyz, r7.xyzx, r5.wwww, l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r7.xyz, r4.yyyy, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r6.xyz, r3.wwww, r6.xyzx
  mul r1.xyz, r1.xyzx, r6.xyzx
  add r3.w, r5.y, r5.y
  mad r0.yzw, r3.wwww, r0.yyzw, -r4.xxzw
  mul r5.yw, r0.wwww, cb1[33].yyyw
  mad r6.xz, -r0.yyyy, cb1[33].xxzx, r5.yywy
  mul r5.yw, r0.wwww, cb1[38].yyyw
  mad r8.xz, -r0.yyyy, cb1[38].xxzx, r5.yywy
  mov r6.y, r0.z
  sample_l_indexable(texturecube)(float,float,float,float) r0.yzw, r6.xyzx, t6.wxyz, s3, r3.x
  mov r8.y, r6.y
  sample_l_indexable(texturecube)(float,float,float,float) r6.xyz, r8.xyzx, t7.xyzw, s3, r3.x
  add r6.xyz, -r0.yzwy, r6.xyzx
  mad r0.yzw, cb1[0].wwww, r6.xxyz, r0.yyzw
  mul r0.yzw, r7.xxyz, r0.yyzw
  mul r0.yzw, r0.yyzw, cb1[20].zzzz
  mad_sat r3.x, -r2.z, l(2.000000), l(1.000000)
  add r3.x, r3.x, r3.x
  max r3.x, r2.x, r3.x
  mul r3.w, r2.y, l(3.000000)
  mad r2.x, -r2.x, l(8.000000), l(1.000000)
  mad_sat r2.x, r3.w, r2.x, l(-1.000000)
  add r3.xw, r3.xxxx, l(2.000000, 0.000000, 0.000000, 1.000000)
  mad r3.x, r2.w, r3.x, -r3.w
  mad r2.zw, r2.wwwz, l(0.000000, 0.000000, 1.600000, 4.600000), l(0.000000, 0.000000, 0.200000, -1.300000)
  max r2.x, r2.x, r4.y
  add r2.z, -r3.x, r2.z
  mad_sat r2.x, r2.x, r2.z, r3.x
  dp3 r2.z, l(0.212500, 0.715400, 0.072100, 0.000000), cb0[10].zzzz
  mul r2.z, r2.z, l(3.000000)
  dp3 r3.x, l(0.212500, 0.715400, 0.072100, 0.000000), cb0[2].xyzx
  max r3.x, r3.x, l(0.100000)
  div r2.z, r2.z, r3.x
  max r2.z, r2.z, l(0.100000)
  min r2.z, r2.z, l(1.000000)
  mad r2.y, r4.y, r3.y, r2.y
  mul r3.x, r3.z, cb0[9].w
  mad_sat r2.z, r3.x, l(6.000000), r2.z
  mad r2.z, cb1[31].z, r2.z, l(-1.000000)
  mul r2.z, r2.z, cb1[31].z
  mad r2.z, r2.y, r2.z, l(1.000000)
  mul r2.x, r2.x, r2.z
  mul r2.x, r2.y, r2.x
  max r2.y, r2.w, l(0.080000)
  min r2.y, r2.y, l(1.000000)
  min r2.y, r2.y, r5.z
  mul_sat r2.x, r2.x, r2.y
  add r2.y, -r2.x, l(1.000000)
  add r2.z, -r4.y, l(1.000000)
  mul r2.y, r2.z, r2.y
  mul r0.yzw, r0.yyzw, r2.xxxx
  mad r0.yzw, r1.xxyz, r2.yyyy, r0.yyzw
  mul_sat r1.x, r0.x, cb0[16].w
  mad r1.y, r5.x, cb0[16].z, -cb0[16].x
  min r1.y, r1.y, cb0[16].y
  add r1.y, -r1.y, l(1.000000)
  mad r1.x, r1.x, r1.y, -cb0[14].w
  mad r0.x, r0.x, cb0[15].w, r1.x
  dp3 r1.x, cb1[37].xyzx, r4.xzwx
  add r1.x, r1.x, l(0.500000)
  mov r2.x, l(1.000000)
  mad r2.yzw, cb0[13].wwww, l(0.000000, 1.000000, 1.800000, 2.800000), l(0.000000, 1.000000, 1.000000, 1.000000)
  mul r2.xyzw, -r0.xxxx, r2.xyzw
  exp r2.xyzw, r2.xyzw
  min r2.xyzw, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  add r0.x, -r2.x, l(1.000000)
  mul r1.y, r1.x, r1.x
  mul r1.x, r1.x, r1.y
  mad r1.xyz, r1.xxxx, cb0[14].xyzx, cb0[15].xyzx
  mul r1.xyz, r0.xxxx, r1.xyzx
  mad o0.xyz, r0.yzwy, r2.yzwy, r1.xyzx
  mov o0.w, r1.w
else 
  mov o0.xyzw, l(0,0,0,0)
endif 
ret 
// Approximately 137 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
