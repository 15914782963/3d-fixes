//Lights NEW
cbuffer GlobalConstants : register(b0)
{
  float4 Globals[17] : packoffset(c0);
  float4 LightPositions[65] : packoffset(c17);
  float4 LightColors[65] : packoffset(c82);
}

cbuffer cbInstanceConsts : register(b1)
{
  float4 InstanceConsts[10] : packoffset(c0);
}
SamplerState Depth_s : register(s1);
Texture2D<float4> Depth : register(t1);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float v1 : TEXCOORD0,
  float3 w1 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = 1;
  r1.xyz = -InstanceConsts[4].xyz + w1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r1.xyz * r1.www;
  r1.x = r1.z * r1.w + 2;
  r1.y = r1.z / r2.z;
  r2.w = -r2.z;
  r1.z = dot(-r2.xyz, -r2.xyw);
  r1.w = dot(InstanceConsts[4].xyz, -r2.xyw);
  r2.w = InstanceConsts[4].w * r1.z;
  r2.w = r1.w * r1.w + -r2.w;
  r2.w = sqrt(r2.w);
  r1.w = r2.w + r1.w;
  r1.z = r1.w / r1.z;
  r1.w = InstanceConsts[4].z < -1;
  r2.w = -1 + -InstanceConsts[4].z;
  r2.w = r2.w / r2.z;
  r3.x = r2.w + r2.w;
  r1.w = r1.w ? r2.w : r3.x;
  r1.z = max(r1.w, r1.z);
  r0.xyz = r1.zzz * r2.xyz + InstanceConsts[4].xyz;
  r0.x = dot(InstanceConsts[8].xyzw, r0.xyzw);
  r3.w = 1;
  r3.xyz = r1.yyy * r2.xyz + InstanceConsts[4].xyz;
  r0.y = dot(InstanceConsts[8].xyzw, r3.xyzw);
  r0.z = r0.y + -r0.x;
  r0.y = max(0, -r0.y);
  r0.w = r1.z + -r1.y;
  r0.z = r0.w / r0.z;
  r4.xy = Globals[8].zw * v0.xy;
  r0.w = Depth.Sample(Depth_s, r4.xy).x;
  r0.w = r0.w * InstanceConsts[2].x + InstanceConsts[2].y;
  r0.w = 1 / r0.w;
  r0.x = min(r0.w, -r0.x);
  r0.w = saturate(0.5 * r0.w);
  r0.x = r0.x + -r0.y;
  r0.x = r0.z * r0.x + r1.y;
  r0.x = min(r0.x, r1.z);
  r0.y = dot(r2.xy, r2.xy);
  r0.y = InstanceConsts[4].z * r0.y;
  r0.z = dot(InstanceConsts[4].xy, r2.xy);
  r0.y = r0.z * r2.z + -r0.y;
  r0.z = dot(InstanceConsts[5].xyz, r2.xyz);
  r0.y = -r0.z / r0.y;
  r0.y = max(r0.y, r1.y);
  r0.y = min(r0.y, r0.x);
  r4.xyz = r0.yyy * r2.xyz + InstanceConsts[4].xyz;
  r0.y = dot(r4.xyz, r4.xyz);
  r0.y = rsqrt(r0.y);
  r0.y = r4.z * r0.y;
  r4.xyz = r0.xxx * r2.xyz + InstanceConsts[4].xyz;
  r0.z = dot(r4.xyz, r4.xyz);
  r0.z = rsqrt(r0.z);
  r0.z = r4.z * r0.z;
  r1.z = max(r4.z, r3.z);
  r1.z = 1 + r1.z;
  r1.x = r1.z * r1.x;
  r0.y = min(r0.z, r0.y);
  r0.z = -InstanceConsts[4].z / r2.z;
  r0.z = max(r0.z, r1.y);
  r0.x = min(r0.z, r0.x);
  r1.yzw = r0.xxx * r2.xyz + InstanceConsts[4].xyz;
  r0.x = dot(r1.yzw, r1.yzw);
  r0.x = rsqrt(r0.x);
  r0.x = r1.w * r0.x;
  r0.z = dot(r3.xyz, r3.xyz);
  r0.z = rsqrt(r0.z);
  r0.z = r3.z * r0.z;
  r0.x = min(r0.x, r0.z);
  r0.x = min(r0.y, r0.x);
  r0.x = saturate(r0.x * -3.41421366 + -2.41421366);
  r0.x = r1.x * r0.x;
  r0.x = r0.x * r0.x;
  r0.y = saturate(InstanceConsts[3].x * v1.x);
  r0.x = r0.x * r0.y;
  r0.x = r0.x * r0.w;
  r0.y = (int)r0.x & 0x7f800000;
  r0.xzw = InstanceConsts[0].xyz * r0.xxx;
  r0.y = 0x7f800000 != (int)r0.y;
  o0.xyz = r0.yyy ? r0.xzw : 0;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.1 on Wed Oct 07 21:43:59 2015
//
//
// Buffer Definitions: 
//
// cbuffer GlobalConstants
// {
//
//   float4 Globals[17];                // Offset:    0 Size:   272
//   float4 LightPositions[65];         // Offset:  272 Size:  1040 [unused]
//   float4 LightColors[65];            // Offset: 1312 Size:  1040 [unused]
//
// }
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts[10];         // Offset:    0 Size:   160
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Depth                             sampler      NA          NA    1        1
// Depth                             texture  float4          2d    1        1
// GlobalConstants                   cbuffer      NA          NA    0        1
// cbInstanceConsts                  cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   x           1     NONE   float   x   
// TEXCOORD                 2    yzw        1     NONE   float    yzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.x
dcl_input_ps linear v1.yzw
dcl_output o0.xyzw
dcl_temps 5
mov r0.w, l(1.000000)
add r1.xyz, v1.yzwy, -cb1[4].xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r1.xyzx
mad r1.x, r1.z, r1.w, l(2.000000)
div r1.y, r1.z, r2.z
mov r2.w, -r2.z
dp3 r1.z, -r2.xyzx, -r2.xywx
dp3 r1.w, cb1[4].xyzx, -r2.xywx
mul r2.w, r1.z, cb1[4].w
mad r2.w, r1.w, r1.w, -r2.w
sqrt r2.w, r2.w
add r1.w, r1.w, r2.w
div r1.z, r1.w, r1.z
lt r1.w, cb1[4].z, l(-1.000000)
add r2.w, -cb1[4].z, l(-1.000000)
div r2.w, r2.w, r2.z
add r3.x, r2.w, r2.w
movc r1.w, r1.w, r2.w, r3.x
max r1.z, r1.z, r1.w
mad r0.xyz, r1.zzzz, r2.xyzx, cb1[4].xyzx
dp4 r0.x, cb1[8].xyzw, r0.xyzw
mov r3.w, l(1.000000)
mad r3.xyz, r1.yyyy, r2.xyzx, cb1[4].xyzx
dp4 r0.y, cb1[8].xyzw, r3.xyzw
add r0.z, -r0.x, r0.y
max r0.y, -r0.y, l(0.000000)
add r0.w, -r1.y, r1.z
div r0.z, r0.w, r0.z
mul r4.xy, v0.xyxx, cb0[8].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.w, r4.xyxx, t1.yzwx, s1
mad r0.w, r0.w, cb1[2].x, cb1[2].y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
min r0.x, -r0.x, r0.w
mul_sat r0.w, r0.w, l(0.500000)
add r0.x, -r0.y, r0.x
mad r0.x, r0.z, r0.x, r1.y
min r0.x, r1.z, r0.x
dp2 r0.y, r2.xyxx, r2.xyxx
mul r0.y, r0.y, cb1[4].z
dp2 r0.z, cb1[4].xyxx, r2.xyxx
mad r0.y, r0.z, r2.z, -r0.y
dp3 r0.z, cb1[5].xyzx, r2.xyzx
div r0.y, -r0.z, r0.y
max r0.y, r1.y, r0.y
min r0.y, r0.x, r0.y
mad r4.xyz, r0.yyyy, r2.xyzx, cb1[4].xyzx
dp3 r0.y, r4.xyzx, r4.xyzx
rsq r0.y, r0.y
mul r0.y, r0.y, r4.z
mad r4.xyz, r0.xxxx, r2.xyzx, cb1[4].xyzx
dp3 r0.z, r4.xyzx, r4.xyzx
rsq r0.z, r0.z
mul r0.z, r0.z, r4.z
max r1.z, r3.z, r4.z
add r1.z, r1.z, l(1.000000)
mul r1.x, r1.x, r1.z
min r0.y, r0.y, r0.z
div r0.z, -cb1[4].z, r2.z
max r0.z, r1.y, r0.z
min r0.x, r0.x, r0.z
mad r1.yzw, r0.xxxx, r2.xxyz, cb1[4].xxyz
dp3 r0.x, r1.yzwy, r1.yzwy
rsq r0.x, r0.x
mul r0.x, r0.x, r1.w
dp3 r0.z, r3.xyzx, r3.xyzx
rsq r0.z, r0.z
mul r0.z, r0.z, r3.z
min r0.x, r0.z, r0.x
min r0.x, r0.x, r0.y
mad_sat r0.x, r0.x, l(-3.414214), l(-2.414214)
mul r0.x, r0.x, r1.x
mul r0.x, r0.x, r0.x
mul_sat r0.y, v1.x, cb1[3].x
mul r0.x, r0.y, r0.x
mul r0.x, r0.w, r0.x
and r0.y, r0.x, l(0x7f800000)
mul r0.xzw, r0.xxxx, cb1[0].xxyz
ine r0.y, l(0x7f800000), r0.y
and o0.xyz, r0.xzwx, r0.yyyy
mov o0.w, l(1.000000)
ret 
// Approximately 83 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
