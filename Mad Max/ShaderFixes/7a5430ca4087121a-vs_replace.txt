//Halo in glasses
cbuffer GlobalConstants : register(b0)
{
  float4 Globals[20] : packoffset(c0);
  row_major float4x4 ShadowTransform[3] : packoffset(c20);
}

cbuffer cbInstanceConsts : register(b1)
{
  float4 InstanceConsts[15] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float3 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float2 o8 : TEXCOORD7,
  out float3 o9 : COLOR0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = InstanceConsts[8].xyzw * v0.yyyy;
  r0.xyzw = v0.xxxx * InstanceConsts[7].xyzw + r0.xyzw;
  r0.xyzw = v0.zzzz * InstanceConsts[9].xyzw + r0.xyzw;
  r0.xyzw = InstanceConsts[10].xyzw + r0.xyzw;
  o0.xyzw = r0.xyzw;
  
  float4 stereo = StereoParams.Load(0);
  r0.x += stereo.x * (r0.w - stereo.y);

  r1.xy = InstanceConsts[5].xy * v1.yy;
  r1.xy = v1.xx * InstanceConsts[4].xy + r1.xy;
  o1.xy = InstanceConsts[6].xy + r1.xy;
  o1.zw = v1.zw;
  r1.xyz = InstanceConsts[1].xyz * v0.yyy;
  r1.xyz = v0.xxx * InstanceConsts[0].xyz + r1.xyz;
  r1.xyz = v0.zzz * InstanceConsts[2].xyz + r1.xyz;
  r1.xyz = InstanceConsts[3].xyz + r1.xyz;
  r2.xyz = -Globals[9].xyz + r1.xyz;
  r3.xyz = ShadowTransform[1]._m00_m01_m02 * r2.xxx + ShadowTransform[1]._m30_m31_m32;
  r3.xyz = ShadowTransform[1]._m10_m11_m12 * r2.yyy + r3.xyz;
  o2.xyz = ShadowTransform[1]._m20_m21_m22 * r2.zzz + r3.xyz;
  r3.xyz = ShadowTransform[2]._m00_m01_m02 * r2.xxx + ShadowTransform[2]._m30_m31_m32;
  r2.xyw = ShadowTransform[2]._m10_m11_m12 * r2.yyy + r3.xyz;
  o3.xyz = ShadowTransform[2]._m20_m21_m22 * r2.zzz + r2.xyw;
  r1.w = r1.y * Globals[13].z + -Globals[13].x;
  o4.xyz = r1.xyz;
  r1.x = min(Globals[13].y, r1.w);
  r1.x = 1 + -r1.x;
  r0.z = r0.w + -r0.z;
  r1.y = saturate(Globals[13].w * r0.z);
  r1.x = r1.y * r1.x + -Globals[12].x;
  o4.w = r0.z * Globals[12].z + r1.x;
  r1.xyz = float3(1,0.00390625,1.52587891e-005) * abs(v2.yyy);
  r1.xyz = frac(r1.xyz);
  r1.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = r1.xyz * r0.zzz;
  r2.xyz = InstanceConsts[1].xyz * r1.yyy;
  r1.xyw = r1.xxx * InstanceConsts[0].xyz + r2.xyz;
  r1.xyz = r1.zzz * InstanceConsts[2].xyz + r1.xyw;
  o5.xyz = r1.xyz;
  r0.xyz = float3(0.5,0.5,-0.5) * r0.xwy;
  o7.w = r0.w;
  o5.w = r0.x + r0.y;
  o6.w = r0.z + r0.y;
  r0.xyz = float3(1,0.00390625,1.52587891e-005) * v2.xxx;
  r0.xyz = frac(r0.xyz);
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r2.xyz = InstanceConsts[1].xyz * r0.yyy;
  r0.xyw = r0.xxx * InstanceConsts[0].xyz + r2.xyz;
  r0.xyz = r0.zzz * InstanceConsts[2].xyz + r0.xyw;
  r2.xyz = r0.zxy * r1.yzx;
  r1.xyz = r0.yzx * r1.zxy + -r2.xyz;
  r0.w = 0 < v2.y;
  r1.w = v2.y < 0;
  r0.w = ((int)r1.w ? -1 : 0) + ((int)r0.w ? 1 : 0);
  r0.w = (int)r0.w;
  o6.xyz = r1.xyz * r0.www;
  o7.xyz = r0.xyz;
  r1.xyz = InstanceConsts[12].xyz * r0.yyy;
  r0.xyw = r0.xxx * InstanceConsts[11].xyz + r1.xyz;
  r0.xyz = r0.zzz * InstanceConsts[13].xyz + r0.xyw;
  r0.z = dot(r0.xyz, r0.xyz);
  r0.z = rsqrt(r0.z);
  r0.xy = r0.xy * r0.zz;
  r0.z = -r0.y;
  o8.xy = r0.xz;
  r0.xyz = float3(1,0.015625,0.000244140625) * v2.zzz;
  o9.xyz = frac(r0.xyz);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.1 on Mon Oct 12 09:01:44 2015
//
//
// Buffer Definitions: 
//
// cbuffer GlobalConstants
// {
//
//   float4 Globals[20];                // Offset:    0 Size:   320
//   row_major float4x4 ShadowTransform[3];// Offset:  320 Size:   192
//
// }
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts[15];         // Offset:    0 Size:   240
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// GlobalConstants                   cbuffer      NA          NA    0        1
// cbInstanceConsts                  cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xy          8     NONE   float   xy  
// COLOR                    0   xyz         9     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[32], immediateIndexed
dcl_constantbuffer cb1[14], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xy
dcl_output o9.xyz
dcl_temps 4
mul r0.xyzw, v0.yyyy, cb1[8].xyzw
mad r0.xyzw, v0.xxxx, cb1[7].xyzw, r0.xyzw
mad r0.xyzw, v0.zzzz, cb1[9].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb1[10].xyzw
mov o0.xyzw, r0.xyzw
mul r1.xy, v1.yyyy, cb1[5].xyxx
mad r1.xy, v1.xxxx, cb1[4].xyxx, r1.xyxx
add o1.xy, r1.xyxx, cb1[6].xyxx
mov o1.zw, v1.zzzw
mul r1.xyz, v0.yyyy, cb1[1].xyzx
mad r1.xyz, v0.xxxx, cb1[0].xyzx, r1.xyzx
mad r1.xyz, v0.zzzz, cb1[2].xyzx, r1.xyzx
add r1.xyz, r1.xyzx, cb1[3].xyzx
add r2.xyz, r1.xyzx, -cb0[9].xyzx
mad r3.xyz, cb0[24].xyzx, r2.xxxx, cb0[27].xyzx
mad r3.xyz, cb0[25].xyzx, r2.yyyy, r3.xyzx
mad o2.xyz, cb0[26].xyzx, r2.zzzz, r3.xyzx
mad r3.xyz, cb0[28].xyzx, r2.xxxx, cb0[31].xyzx
mad r2.xyw, cb0[29].xyxz, r2.yyyy, r3.xyxz
mad o3.xyz, cb0[30].xyzx, r2.zzzz, r2.xywx
mad r1.w, r1.y, cb0[13].z, -cb0[13].x
mov o4.xyz, r1.xyzx
min r1.x, r1.w, cb0[13].y
add r1.x, -r1.x, l(1.000000)
add r0.z, -r0.z, r0.w
mul_sat r1.y, r0.z, cb0[13].w
mad r1.x, r1.y, r1.x, -cb0[12].x
mad o4.w, r0.z, cb0[12].z, r1.x
mul r1.xyz, |v2.yyyy|, l(1.000000, 0.003906, 0.000015, 0.000000)
frc r1.xyz, r1.xyzx
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, r1.xyzx
mul r2.xyz, r1.yyyy, cb1[1].xyzx
mad r1.xyw, r1.xxxx, cb1[0].xyxz, r2.xyxz
mad r1.xyz, r1.zzzz, cb1[2].xyzx, r1.xywx
mov o5.xyz, r1.xyzx
mul r0.xyz, r0.xwyx, l(0.500000, 0.500000, -0.500000, 0.000000)
mov o7.w, r0.w
add o5.w, r0.y, r0.x
add o6.w, r0.y, r0.z
mul r0.xyz, v2.xxxx, l(1.000000, 0.003906, 0.000015, 0.000000)
frc r0.xyz, r0.xyzx
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r2.xyz, r0.yyyy, cb1[1].xyzx
mad r0.xyw, r0.xxxx, cb1[0].xyxz, r2.xyxz
mad r0.xyz, r0.zzzz, cb1[2].xyzx, r0.xywx
mul r2.xyz, r1.yzxy, r0.zxyz
mad r1.xyz, r0.yzxy, r1.zxyz, -r2.xyzx
lt r0.w, l(0.000000), v2.y
lt r1.w, v2.y, l(0.000000)
iadd r0.w, r1.w, -r0.w
itof r0.w, r0.w
mul o6.xyz, r0.wwww, r1.xyzx
mov o7.xyz, r0.xyzx
mul r1.xyz, r0.yyyy, cb1[12].xyzx
mad r0.xyw, r0.xxxx, cb1[11].xyxz, r1.xyxz
mad r0.xyz, r0.zzzz, cb1[13].xyzx, r0.xywx
dp3 r0.z, r0.xyzx, r0.xyzx
rsq r0.z, r0.z
mul r0.xy, r0.zzzz, r0.xyxx
mov r0.z, -r0.y
mov o8.xy, r0.xzxx
mul r0.xyz, v2.zzzz, l(1.000000, 0.015625, 0.000244, 0.000000)
frc o9.xyz, r0.xyzx
ret 
// Approximately 70 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
