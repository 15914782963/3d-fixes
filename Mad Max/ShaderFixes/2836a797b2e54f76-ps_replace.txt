//Lights PS 2
//VS 346aa0e5f6b29dc8
//PS d09b2165321f05cf
cbuffer GlobalConstants : register(b0)
{
  float4 Globals[17] : packoffset(c0);
  float4 LightPositions[65] : packoffset(c17);
  float4 LightColors[65] : packoffset(c82);
}

cbuffer cbConstants : register(b1)
{
  float4 Constants[39] : packoffset(c0);
}
SamplerState SamplerStateRegular_s : register(s0);
SamplerState SamplerStateNormals_s : register(s1);
SamplerState SamplerStateLookups_s : register(s2);
SamplerState SamplerStateCubeMap_s : register(s3);
SamplerState ShadowDepthFilter_s : register(s15);
SamplerComparisonState ShadowComparisonFilter_s : register(s14);
Texture2D<float> Depth : register(t0);
Texture2D<float4> Diffuse : register(t1);
Texture2D<float3> Normal : register(t2);
Texture2D<float4> Properties : register(t3);
TextureCube<float3> Environment0 : register(t6);
TextureCube<float3> Environment1 : register(t7);
Texture2D<float4> BounceLightTexture : register(t8);
Texture2DArray<float4> ShadowMapTexture : register(t14);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  
  // Extra input from vertex shader:
  matrix vp : TEXCOORD2,
  matrix ivp : TEXCOORD6
  )
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = Depth.Sample(SamplerStateRegular_s, v1.xy).x;
  r0.y = 0 < r0.x;
  r0.x = r0.x * Constants[0].x + Constants[0].y;
  r0.x = 1 / r0.x;
  r1.xyz = v2.xyz * r0.xxx;
  
  // Correct shadow placement:
  float4 stereo = StereoParams.Load(0);
  float4 tmp = mul(float4(r1.xyz, 1), vp);
  tmp.x -= stereo.x * (tmp.w - stereo.y);
  r1.xyz = mul(tmp, ivp).xyz;
  
  r2.xyz = r0.xxx * v2.xyz + Globals[4].xyz;
  r2.xyz = r1.xyz + Globals[4].xyz;
  
  r3.xyz = Constants[1].xyz * r1.xxx + Constants[4].xyz;
  r1.xyw = Constants[2].xyz * r1.yyy + r3.xyz;
  r1.xyz = Constants[3].xyz * r1.zzz + r1.xyw;
  r3.x = Constants[21].w;
  r3.z = 1;
  r3.xyz = r1.xyz * r3.xxz + Constants[21].xyz;
  r4.x = Constants[22].w;
  r4.z = 1;
  r4.xyz = r1.xyz * r4.xxz + Constants[22].xyz;
  r0.zw = r1.xy * float2(10,10) + float2(-5,-5);
  r5.xy = r3.xy * float2(10,10) + float2(-5,-5);
  r0.z = max(abs(r0.z), abs(r0.w));
  r0.w = max(abs(r5.x), abs(r5.y));
  r1.w = dot(v0.xy, float2(0.467943996,-0.703647971));
  r5.x = frac(r1.w);
  r1.w = dot(v0.xy, float2(0.834930003,-0.629559994));
  r5.y = frac(r1.w);
  r0.zw = r5.xx + r0.zw;
  r0.zw = r0.zw < float2(4.94999981,4.94999981);
  r3.xyz = r0.www ? r3.xyz : r4.xyz;
  r3.xyz = r0.zzz ? r1.zxy : r3.zxy;
  r0.w = r0.w ? 1 : 2;
  r6.z = r0.z ? 0 : r0.w;
  r0.zw = float2(-0.5,-0.5) + r5.xy;
  r5.xy = float2(0.001953125,0.001953125) * r0.zw;
  r7.xyzw = Globals[12].wwww * float4(0.75,0.25,-0.25,0.75) + r3.yzyz;
  r6.xy = r0.zw * float2(0.001953125,0.001953125) + r7.xy;
  r7.xy = -r0.zw * float2(0.001953125,0.001953125) + r7.zw;
  r8.xyzw = Globals[12].wwww * float4(-0.75,-0.25,0.25,-0.75) + r3.yzyz;
  r5.z = -r5.x;
  r9.xy = r8.xy + r5.yz;
  r8.xy = r8.zw + -r5.yz;
  r10.xyzw = Globals[12].wwww * float4(1.5,0.5,-0.5,1.5) + r3.yzyz;
  r11.xy = r10.xy + -r5.yz;
  r5.xy = r10.zw + r5.yz;
  r10.xyzw = Globals[12].wwww * float4(-1.5,-0.5,0.5,-1.5) + r3.yzyz;
  r12.xy = r0.zw * float2(0.001953125,0.001953125) + r10.xy;
  r10.xy = -r0.zw * float2(0.001953125,0.001953125) + r10.zw;
  r0.z = ShadowMapTexture.Sample(ShadowDepthFilter_s, r6.xyz).x;
  r7.z = r6.z;
  r0.w = ShadowMapTexture.Sample(ShadowDepthFilter_s, r7.xyz).x;
  r9.z = r7.z;
  r1.z = ShadowMapTexture.Sample(ShadowDepthFilter_s, r9.xyz).x;
  r8.z = r9.z;
  r1.w = ShadowMapTexture.Sample(ShadowDepthFilter_s, r8.xyz).x;
  r11.z = r8.z;
  r2.w = ShadowMapTexture.Sample(ShadowDepthFilter_s, r11.xyz).x;
  r5.z = r11.z;
  r3.y = ShadowMapTexture.Sample(ShadowDepthFilter_s, r5.xyz).x;
  r12.z = r5.z;
  r3.z = ShadowMapTexture.Sample(ShadowDepthFilter_s, r12.xyz).x;
  r10.z = r12.z;
  r3.w = ShadowMapTexture.Sample(ShadowDepthFilter_s, r10.xyz).x;
  r2.xz = -Constants[29].xz + r2.xz;
  r2.xz = r2.xz * float2(0.00130208337,0.00130208337) + float2(0.501953125,0.501953125);
  r13.xyzw = BounceLightTexture.Sample(SamplerStateLookups_s, r2.xz).xyzw;
  if (r0.y != 0) {
    r14.xyzw = Diffuse.Sample(SamplerStateRegular_s, v1.xy).xyzw;
    r15.xyz = Normal.Sample(SamplerStateNormals_s, v1.xy).xyz;
    r15.xyz = r15.xyz * float3(2,2,2) + float3(-1,-1,-1);
    r16.xyzw = Properties.Sample(SamplerStateRegular_s, v1.xy).xyzw;
    r17.xyz = float3(0.125,1,0.5) + -r16.yyz;
    r17.x = saturate(r17.x);
    r0.y = r16.x < 0.411764711;
    r2.x = r16.x + r16.x;
    r4.zw = float2(-0.501960814,-0.5) + r16.xz;
    r18.xy = saturate(r4.zw + r4.zw);
    r2.z = 0;
    r18.z = 0;
    r18.xzw = saturate(r0.yyy ? r2.xzz : r18.zxx);
    r0.y = dot(-v2.xyz, -v2.xyz);
    r0.y = rsqrt(r0.y);
    r19.xyz = -v2.xyz * r0.yyy;
    r20.xyz = -v2.xyz * r0.yyy + -r15.xyz;
    r15.xyz = r17.xxx * r20.xyz + r15.xyz;
    r2.x = dot(r15.xyz, r15.xyz);
    r2.x = rsqrt(r2.x);
    r15.xyz = r15.xyz * r2.xxx;
    r2.x = 3 * r16.y;
    r20.xyz = r16.ywz * float3(8,1.60000002,4.5999999) + float3(1,0.200000003,-1.29999995);
    r2.z = exp2(r20.x);
    r4.z = 5 * r17.y;
    r4.w = r18.w == 0.000000;
    r5.w = saturate(r17.z + r17.z);
    r5.w = r5.w * r5.w;
    r5.w = r5.w * r5.w;
    r21.x = 0.800000012 * r5.w;
    r21.y = min(0.400000006, r21.x);
    r17.xz = r4.ww ? r21.xy : 0;
    r4.w = r18.y * 4 + 9.99999975e-005;
    r21.xyz = -v2.xyz * r0.yyy + -Globals[3].xyz;
    r5.w = dot(r21.xyz, r21.xyz);
    r5.w = rsqrt(r5.w);
    r21.xyz = r21.xyz * r5.www;
    r5.w = dot(r19.xyz, r15.xyz);
    r6.w = saturate(r5.w);
    r4.xy = r4.xy * float2(10,10) + float2(-5,-5);
    r4.x = max(abs(r4.x), abs(r4.y));
    r3.x = saturate(r3.x);
    r4.y = 0 < r18.w;
    if (r4.y != 0) {
      r7.w = r18.w * 0.300000012 + 0.0500000007;
      r7.w = Constants[34].x / r7.w;
      r0.zw = r3.xx + -r0.zw;
      r0.zw = saturate(r0.zw * r7.ww);
      r0.z = 1 + -r0.z;
      r0.z = r0.z + -r0.w;
      r0.z = 1 + r0.z;
      r0.w = r3.x + -r1.z;
      r0.w = saturate(r0.w * r7.w);
      r0.z = r0.z + -r0.w;
      r0.z = 1 + r0.z;
      r0.w = r3.x + -r1.w;
      r0.w = saturate(r0.w * r7.w);
      r0.z = r0.z + -r0.w;
      r0.z = 1 + r0.z;
      r0.w = r3.x + -r2.w;
      r0.w = saturate(r0.w * r7.w);
      r0.z = r0.z + -r0.w;
      r0.z = 1 + r0.z;
      r0.w = r3.x + -r3.y;
      r0.w = saturate(r0.w * r7.w);
      r0.z = r0.z + -r0.w;
      r0.z = 1 + r0.z;
      r0.w = r3.x + -r3.z;
      r0.w = saturate(r0.w * r7.w);
      r0.z = r0.z + -r0.w;
      r0.z = 1 + r0.z;
      r0.w = r3.x + -r3.w;
      r0.w = saturate(r0.w * r7.w);
      r0.z = r0.z + -r0.w;
      r0.z = 1 + r0.z;
      r0.z = 0.125 * r0.z;
      r0.z = r0.z * r0.z;
      r0.z = r0.z * r0.z;
    } else {
      r0.w = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s, r6.xyz, r3.x).x;
      r1.z = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s, r7.xyz, r3.x).x;
      r0.w = r1.z + r0.w;
      r1.z = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s, r9.xyz, r3.x).x;
      r0.w = r1.z + r0.w;
      r1.z = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s, r8.xyz, r3.x).x;
      r0.w = r1.z + r0.w;
      r1.z = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s, r11.xyz, r3.x).x;
      r0.w = r1.z + r0.w;
      r1.z = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s, r5.xyz, r3.x).x;
      r0.w = r1.z + r0.w;
      r1.z = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s, r12.xyz, r3.x).x;
      r0.w = r1.z + r0.w;
      r1.z = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s, r10.xyz, r3.x).x;
      r0.w = r1.z + r0.w;
      r0.z = 0.125 * r0.w;
    }
    r0.w = saturate(-4 + r4.x);
    r0.z = r0.z + r0.w;
    r0.z = min(1, r0.z);
    r0.w = saturate(r15.y * 0.5 + 0.5);
    r3.xyz = -Globals[11].xyz + Globals[10].xyz;
    r3.xyz = r0.www * r3.xyz + Globals[11].xyz;
    r0.w = dot(r15.xyz, -Globals[3].xyz);
    r1.z = r0.w + r17.z;
    r1.w = 1 + r17.z;
    r1.z = saturate(r1.z / r1.w);
    r1.w = -1 + r1.z;
    r1.w = r17.x * r1.w + 1;
    r1.z = r1.z * r1.w;
    r1.w = r1.z * r6.w + 9.99999975e-005;
    r1.w = log2(r1.w);
    r1.w = r4.w * r1.w;
    r1.w = exp2(r1.w);
    r1.w = r1.w * r1.z;
    r1.w = min(1, r1.w);
    r2.w = 2.5 * r18.z;
    r3.w = saturate(r18.x * 0.5 + -r0.w);
    r1.w = r3.w * r18.x + r1.w;
    r1.w = min(1, r1.w);
    r5.xyz = r16.www * Constants[35].xyz + Constants[36].xyz;
    r3.w = saturate(Constants[35].w + r5.y);
    r3.w = -Constants[35].w + r3.w;
    r4.x = 1 + -Constants[35].w;
    r3.w = r3.w / r4.x;
    r1.xy = r1.xy * float2(10,10) + float2(-5,-25);
    r1.x = max(abs(r1.x), abs(r1.y));
    r1.x = saturate(-3.70000005 + r1.x);
    r1.x = 1 + -r1.x;
    r1.y = Constants[34].y * 0.0480000004 + 1;
    r1.x = r1.x / r1.y;
    r1.y = 0.300000012 + r0.w;
    r1.y = saturate(0.769230783 * r1.y);
    r1.y = r1.y * r0.z;
    r4.x = 5 * r1.y;
    r4.x = min(1, r4.x);
    r6.xyz = r4.xxx * float3(0.100000001,0.790000021,0.939999998) + float3(0.899999976,0.209999993,0.0599999987);
    r6.xyz = r6.xyz * r3.www;
    r0.w = 0.150000006 + -r0.w;
    r0.w = saturate(r0.w + r0.w);
    r0.w = r0.z * r0.w;
    r7.xyz = float3(0.200000003,0.0460000001,0.00999999978) * r0.www;
    r0.w = min(1, r2.w);
    r7.xyz = r7.xyz * r0.www;
    r7.xyz = r7.xyz * r1.xxx;
    r6.xyz = r6.xyz * r1.yyy + r7.xyz;
    r0.w = r1.w * r0.z;
    r0.w = r0.w * r3.w;
    r6.xyz = r4.yyy ? r6.xyz : r0.www;
    r3.xyz = Constants[0].zzz * r3.xyz;
    r0.w = saturate(r16.z * 2 + -1);
    r0.w = r0.w * 0.649999976 + 0.0500000007;
    r1.x = 1 + -r0.w;
    r1.y = saturate(r5.w * 0.899999976 + 0.100000001);
    r1.y = 1.00100005 + -r1.y;
    r1.y = min(1, r1.y);
    r2.w = r1.y * r1.y;
    r2.w = r2.w * r2.w;
    r1.y = r2.w * r1.y;
    r0.w = r1.x * r1.y + r0.w;
    r0.w = min(1, r0.w);
    r1.x = 8 + r2.z;
    r1.x = 0.0398089178 * r1.x;
    r1.y = r2.z * 1.44269502 + 1.44269502;
    r2.z = dot(r21.xyz, r15.xyz);
    r2.z = r1.y * r2.z + -r1.y;
    r2.z = exp2(r2.z);
    r2.z = min(1, r2.z);
    r2.z = r2.z * r1.x;
    r7.xyz = float3(0.00999999978,0.00999999978,0.00999999978) + r14.xyz;
    r2.w = dot(r7.xyz, r7.xyz);
    r2.w = rsqrt(r2.w);
    r7.xyz = r7.xyz * r2.www + float3(-1,-1,-1);
    r7.xyz = r18.yyy * r7.xyz + float3(1,1,1);
    r8.xyz = Globals[1].xyz * r7.xyz;
    r8.xyz = r8.xyz * r1.zzz;
    r8.xyz = r8.xyz * r16.www;
    r8.xyz = r8.xyz * r0.zzz;
    r8.xyz = r8.xyz * r2.zzz;
    r1.x = r16.w * r1.x;
    r1.x = r1.x * r0.w;
    r2.z = r2.z * r1.z;
    r2.z = r2.z * r0.w;
    r2.w = dot(Constants[18].xyz, r15.xyz);
    r3.w = 0.25 + r2.w;
    r3.w = 0.800000012 * r3.w;
    r2.w = saturate(r4.y ? r3.w : r2.w);
    r4.xyw = -v2.xyz * r0.yyy + Constants[18].xyz;
    r3.w = dot(r4.xyw, r4.xyw);
    r3.w = rsqrt(r3.w);
    r4.xyw = r4.xyw * r3.www;
    r3.w = Constants[17].x * r2.w;
    r2.w = r2.w * r1.x;
    r4.x = dot(r4.xyw, r15.xyz);
    r4.x = r1.y * r4.x + -r1.y;
    r4.x = exp2(r4.x);
    r4.x = min(1, r4.x);
    r2.w = r4.x * r2.w;
    r2.w = Constants[17].y * r2.w;
    r4.xyw = Constants[25].xyz * r1.www;
    r4.xyw = Constants[16].xyz * r3.www + r4.xyw;
    r9.xyz = Constants[26].xyz * r2.zzz;
    r9.xyz = Constants[16].xyz * r2.www + r9.xyz;
    r3.xyz = r3.xyz * r5.xxx;
    r1.w = dot(Constants[31].xy, Constants[31].xy);
    r1.w = r1.w != 0.000000;
    if (r1.w != 0) {
      r10.xy = float2(0.300000012,1.29999995) + r17.zz;
      r5.y = 128 * r13.w;
      r5.x = r13.w * 128 + Constants[28].w;
      r2.zw = -r5.xy + r2.yy;
      r5.xy = r2.zw < float2(0,0);
      r5.xy = r5.xy ? Constants[30].yy : Constants[30].xx;
      r2.zw = saturate(r5.xy * r2.zw);
      r2.zw = float2(1,1) + -r2.zw;
      r1.w = dot(Constants[28].xyz, r15.xyz);
      r10.z = -r10.x;
      r5.xy = r10.xz + r1.ww;
      r10.w = -1 + -r10.x;
      r5.xy = r5.xy / r10.yw;
      r2.zw = r2.zw * r2.zw;
      r2.zw = saturate(r2.zw * r5.xy);
      r2.zw = Constants[31].xy * r2.zw;
      r1.w = r2.z + r2.w;
      r10.xyz = r13.xyz * r1.www;
      r11.xyz = -v2.xyz * r0.yyy + Constants[28].xyz;
      r0.y = dot(r11.xyz, r11.xyz);
      r0.y = rsqrt(r0.y);
      r11.xyz = r11.xyz * r0.yyy;
      r12.xyz = Globals[2].xyz * r10.xyz;
      r10.xyz = Globals[1].xyz * r10.xyz;
      r10.xyz = r10.xyz * r1.xxx;
      r0.y = dot(r11.xyz, r15.xyz);
      r0.y = r1.y * r0.y + -r1.y;
      r0.y = exp2(r0.y);
      r0.y = min(1, r0.y);
      r1.xyw = r10.xyz * r0.yyy;
    } else {
      r12.xyz = float3(0,0,0);
      r1.xyw = float3(0,0,0);
    }
    r0.y = 1 + -r5.z;
    r0.y = r17.z * r0.y + r5.z;
    r10.xyz = r12.xyz * r0.yyy;
    r4.xyw = r4.xyw * r5.zzz + r10.xyz;
    r1.xyw = r1.xyw * r0.yyy;
    r1.xyw = r9.xyz * r5.zzz + r1.xyw;
    r1.xyw = r1.xyw * r7.xyz;
    r3.xyz = Globals[2].xyz * r6.xyz + r3.xyz;
    r3.xyz = r3.xyz + r4.xyw;
    r3.xyz = r3.xyz * r14.xyz;
    r0.y = r5.w + r5.w;
    r4.xyw = r0.yyy * r15.xyz + -r19.xyz;
    r2.zw = Constants[33].yw * r4.ww;
    r5.xz = -r4.xx * Constants[33].xz + r2.zw;
    r2.zw = Constants[38].yw * r4.ww;
    r6.xz = -r4.xx * Constants[38].xz + r2.zw;
    r5.y = r4.y;
    r4.xyw = Environment0.SampleLevel(SamplerStateCubeMap_s, r5.xyz, r4.z).xyz;
    r6.y = r5.y;
    r5.xyz = Environment1.SampleLevel(SamplerStateCubeMap_s, r6.xyz, r4.z).xyz;
    r5.xyz = r5.xyz + -r4.xyw;
    r4.xyz = Constants[0].www * r5.xyz + r4.xyw;
    r4.xyz = r4.xyz * r7.xyz;
    r4.xyz = Constants[20].zzz * r4.xyz;
    r0.y = saturate(-r16.z * 2 + 1);
    r0.y = r0.y + r0.y;
    r0.y = max(r0.y, r18.w);
    r2.z = -r18.w * 8 + 1;
    r2.x = saturate(r2.x * r2.z + -1);
    r2.zw = float2(2,1) + r0.yy;
    r0.y = r16.w * r2.z + -r2.w;
    r2.x = max(r18.y, r2.x);
    r2.z = r20.y + -r0.y;
    r0.y = saturate(r2.x * r2.z + r0.y);
    r2.x = dot(float3(0.212500006,0.715399981,0.0720999986), Globals[10].zzz);
    r2.x = 3 * r2.x;
    r2.z = dot(float3(0.212500006,0.715399981,0.0720999986), Globals[2].xyz);
    r2.z = max(0.100000001, r2.z);
    r2.x = r2.x / r2.z;
    r2.x = max(0.100000001, r2.x);
    r2.x = min(1, r2.x);
    r2.z = r18.y * r17.y + r16.y;
    r0.z = r1.z * r0.z;
    r0.z = r0.z * 6 + r2.x;
    r0.z = min(1, r0.z);
    r0.z = Constants[31].z * r0.z + -1;
    r0.z = Constants[31].z * r0.z;
    r0.z = r2.z * r0.z + 1;
    r0.y = r0.z * r0.y;
    r0.y = r0.y * r2.z;
    r0.z = max(0.0799999982, r20.z);
    r0.z = min(1, r0.z);
    r0.z = min(r0.w, r0.z);
    r0.y = saturate(r0.z * r0.y);
    r0.z = 1 + -r0.y;
    r1.z = 1 + -r18.y;
    r0.z = r1.z * r0.z;
    r2.xzw = r4.xyz * r0.yyy;
    r2.xzw = r3.xyz * r0.zzz + r2.xzw;
    r0.yzw = r8.xyz * r0.www + r1.xyw;
    r0.yzw = r2.xzw + r0.yzw;
    r1.x = saturate(Globals[16].w * r0.x);
    r1.y = r2.y * Globals[16].z + -Globals[16].x;
    r1.y = min(Globals[16].y, r1.y);
    r1.y = 1 + -r1.y;
    r1.x = r1.x * r1.y + -Globals[14].w;
    r0.x = r0.x * Globals[15].w + r1.x;
    r1.x = dot(Constants[37].xyz, r19.xyz);
    r1.x = 0.5 + r1.x;
    r2.x = 1;
    r2.yzw = Globals[13].www * float3(1,1.79999995,2.79999995) + float3(1,1,1);
    r2.xyzw = r2.xyzw * -r0.xxxx;
    r2.xyzw = exp2(r2.xyzw);
    r2.xyzw = min(float4(1,1,1,1), r2.xyzw);
    r0.x = 1 + -r2.x;
    r1.y = r1.x * r1.x;
    r1.x = r1.y * r1.x;
    r1.xyz = r1.xxx * Globals[14].xyz + Globals[15].xyz;
    r1.xyz = r1.xyz * r0.xxx;
    o0.xyz = r0.yzw * r2.yzw + r1.xyz;
    o0.w = r14.w;
  } else {
    o0.xyzw = float4(0,0,0,0);
  }
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.1 on Thu Oct 01 22:24:21 2015
//
//
// Buffer Definitions: 
//
// cbuffer GlobalConstants
// {
//
//   float4 Globals[17];                // Offset:    0 Size:   272
//   float4 LightPositions[65];         // Offset:  272 Size:  1040 [unused]
//   float4 LightColors[65];            // Offset: 1312 Size:  1040 [unused]
//
// }
//
// cbuffer cbConstants
// {
//
//   float4 Constants[39];              // Offset:    0 Size:   624
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SamplerStateRegular               sampler      NA          NA    0        1
// SamplerStateNormals               sampler      NA          NA    1        1
// SamplerStateLookups               sampler      NA          NA    2        1
// SamplerStateCubeMap               sampler      NA          NA    3        1
// ShadowComparisonFilter          sampler_c      NA          NA   14        1
// ShadowDepthFilter                 sampler      NA          NA   15        1
// Depth                             texture   float          2d    0        1
// Diffuse                           texture  float4          2d    1        1
// Normal                            texture  float3          2d    2        1
// Properties                        texture  float4          2d    3        1
// Environment0                      texture  float3        cube    6        1
// Environment1                      texture  float3        cube    7        1
// BounceLightTexture                texture  float4          2d    8        1
// ShadowMapTexture                  texture  float4     2darray   14        1
// GlobalConstants                   cbuffer      NA          NA    0        1
// cbConstants                       cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[17], immediateIndexed
dcl_constantbuffer cb1[39], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s14, mode_comparison
dcl_sampler s15, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t6
dcl_resource_texturecube (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t14
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 22
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
lt r0.y, l(0.000000), r0.x
mad r0.x, r0.x, cb1[0].x, cb1[0].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r1.xyz, r0.xxxx, v2.xyzx
mad r2.xyz, r0.xxxx, v2.xyzx, cb0[4].xyzx
mad r3.xyz, cb1[1].xyzx, r1.xxxx, cb1[4].xyzx
mad r1.xyw, cb1[2].xyxz, r1.yyyy, r3.xyxz
mad r1.xyz, cb1[3].xyzx, r1.zzzz, r1.xywx
mov r3.x, cb1[21].w
mov r3.z, l(1.000000)
mad r3.xyz, r1.xyzx, r3.xxzx, cb1[21].xyzx
mov r4.x, cb1[22].w
mov r4.z, l(1.000000)
mad r4.xyz, r1.xyzx, r4.xxzx, cb1[22].xyzx
mad r0.zw, r1.xxxy, l(0.000000, 0.000000, 10.000000, 10.000000), l(0.000000, 0.000000, -5.000000, -5.000000)
mad r5.xy, r3.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000), l(-5.000000, -5.000000, 0.000000, 0.000000)
max r0.z, |r0.w|, |r0.z|
max r0.w, |r5.y|, |r5.x|
dp2 r1.w, v0.xyxx, l(0.467944, -0.703648, 0.000000, 0.000000)
frc r5.x, r1.w
dp2 r1.w, v0.xyxx, l(0.834930, -0.629560, 0.000000, 0.000000)
frc r5.y, r1.w
add r0.zw, r0.zzzw, r5.xxxx
lt r0.zw, r0.zzzw, l(0.000000, 0.000000, 4.950000, 4.950000)
movc r3.xyz, r0.wwww, r3.xyzx, r4.xyzx
movc r3.xyz, r0.zzzz, r1.zxyz, r3.zxyz
movc r0.w, r0.w, l(1.000000), l(2.000000)
movc r6.z, r0.z, l(0), r0.w
add r0.zw, r5.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
mul r5.xy, r0.zwzz, l(0.001953, 0.001953, 0.000000, 0.000000)
mad r7.xyzw, cb0[12].wwww, l(0.750000, 0.250000, -0.250000, 0.750000), r3.yzyz
mad r6.xy, r0.zwzz, l(0.001953, 0.001953, 0.000000, 0.000000), r7.xyxx
mad r7.xy, -r0.zwzz, l(0.001953, 0.001953, 0.000000, 0.000000), r7.zwzz
mad r8.xyzw, cb0[12].wwww, l(-0.750000, -0.250000, 0.250000, -0.750000), r3.yzyz
mov r5.z, -r5.x
add r9.xy, r5.yzyy, r8.xyxx
add r8.xy, -r5.yzyy, r8.zwzz
mad r10.xyzw, cb0[12].wwww, l(1.500000, 0.500000, -0.500000, 1.500000), r3.yzyz
add r11.xy, -r5.yzyy, r10.xyxx
add r5.xy, r5.yzyy, r10.zwzz
mad r10.xyzw, cb0[12].wwww, l(-1.500000, -0.500000, 0.500000, -1.500000), r3.yzyz
mad r12.xy, r0.zwzz, l(0.001953, 0.001953, 0.000000, 0.000000), r10.xyxx
mad r10.xy, -r0.zwzz, l(0.001953, 0.001953, 0.000000, 0.000000), r10.zwzz
sample_indexable(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t14.yzxw, s15
mov r7.z, r6.z
sample_indexable(texture2darray)(float,float,float,float) r0.w, r7.xyzx, t14.yzwx, s15
mov r9.z, r7.z
sample_indexable(texture2darray)(float,float,float,float) r1.z, r9.xyzx, t14.yzxw, s15
mov r8.z, r9.z
sample_indexable(texture2darray)(float,float,float,float) r1.w, r8.xyzx, t14.yzwx, s15
mov r11.z, r8.z
sample_indexable(texture2darray)(float,float,float,float) r2.w, r11.xyzx, t14.yzwx, s15
mov r5.z, r11.z
sample_indexable(texture2darray)(float,float,float,float) r3.y, r5.xyzx, t14.yxzw, s15
mov r12.z, r5.z
sample_indexable(texture2darray)(float,float,float,float) r3.z, r12.xyzx, t14.yzxw, s15
mov r10.z, r12.z
sample_indexable(texture2darray)(float,float,float,float) r3.w, r10.xyzx, t14.yzwx, s15
add r2.xz, r2.xxzx, -cb1[29].xxzx
mad r2.xz, r2.xxzx, l(0.001302, 0.000000, 0.001302, 0.000000), l(0.501953, 0.000000, 0.501953, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r13.xyzw, r2.xzxx, t8.xyzw, s2
if_nz r0.y
  sample_indexable(texture2d)(float,float,float,float) r14.xyzw, v1.xyxx, t1.xyzw, s0
  sample_indexable(texture2d)(float,float,float,float) r15.xyz, v1.xyxx, t2.xyzw, s1
  mad r15.xyz, r15.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r16.xyzw, v1.xyxx, t3.xyzw, s0
  add r17.xyz, -r16.yyzy, l(0.125000, 1.000000, 0.500000, 0.000000)
  mov_sat r17.x, r17.x
  lt r0.y, r16.x, l(0.411765)
  add r2.x, r16.x, r16.x
  add r4.zw, r16.xxxz, l(0.000000, 0.000000, -0.501961, -0.500000)
  add_sat r18.xy, r4.zwzz, r4.zwzz
  mov r2.z, l(0)
  mov r18.z, l(0)
  movc_sat r18.xzw, r0.yyyy, r2.xxzz, r18.zzxx
  dp3 r0.y, -v2.xyzx, -v2.xyzx
  rsq r0.y, r0.y
  mul r19.xyz, r0.yyyy, -v2.xyzx
  mad r20.xyz, -v2.xyzx, r0.yyyy, -r15.xyzx
  mad r15.xyz, r17.xxxx, r20.xyzx, r15.xyzx
  dp3 r2.x, r15.xyzx, r15.xyzx
  rsq r2.x, r2.x
  mul r15.xyz, r2.xxxx, r15.xyzx
  mul r2.x, r16.y, l(3.000000)
  mad r20.xyz, r16.ywzy, l(8.000000, 1.600000, 4.600000, 0.000000), l(1.000000, 0.200000, -1.300000, 0.000000)
  exp r2.z, r20.x
  mul r4.z, r17.y, l(5.000000)
  eq r4.w, r18.w, l(0.000000)
  add_sat r5.w, r17.z, r17.z
  mul r5.w, r5.w, r5.w
  mul r5.w, r5.w, r5.w
  mul r21.x, r5.w, l(0.800000)
  min r21.y, r21.x, l(0.400000)
  and r17.xz, r4.wwww, r21.xxyx
  mad r4.w, r18.y, l(4.000000), l(0.000100)
  mad r21.xyz, -v2.xyzx, r0.yyyy, -cb0[3].xyzx
  dp3 r5.w, r21.xyzx, r21.xyzx
  rsq r5.w, r5.w
  mul r21.xyz, r5.wwww, r21.xyzx
  dp3 r5.w, r19.xyzx, r15.xyzx
  mov_sat r6.w, r5.w
  mad r4.xy, r4.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000), l(-5.000000, -5.000000, 0.000000, 0.000000)
  max r4.x, |r4.y|, |r4.x|
  mov_sat r3.x, r3.x
  lt r4.y, l(0.000000), r18.w
  if_nz r4.y
    mad r7.w, r18.w, l(0.300000), l(0.050000)
    div r7.w, cb1[34].x, r7.w
    add r0.zw, -r0.zzzw, r3.xxxx
    mul_sat r0.zw, r7.wwww, r0.zzzw
    add r0.z, -r0.z, l(1.000000)
    add r0.z, -r0.w, r0.z
    add r0.z, r0.z, l(1.000000)
    add r0.w, -r1.z, r3.x
    mul_sat r0.w, r7.w, r0.w
    add r0.z, -r0.w, r0.z
    add r0.z, r0.z, l(1.000000)
    add r0.w, -r1.w, r3.x
    mul_sat r0.w, r7.w, r0.w
    add r0.z, -r0.w, r0.z
    add r0.z, r0.z, l(1.000000)
    add r0.w, -r2.w, r3.x
    mul_sat r0.w, r7.w, r0.w
    add r0.z, -r0.w, r0.z
    add r0.z, r0.z, l(1.000000)
    add r0.w, -r3.y, r3.x
    mul_sat r0.w, r7.w, r0.w
    add r0.z, -r0.w, r0.z
    add r0.z, r0.z, l(1.000000)
    add r0.w, -r3.z, r3.x
    mul_sat r0.w, r7.w, r0.w
    add r0.z, -r0.w, r0.z
    add r0.z, r0.z, l(1.000000)
    add r0.w, -r3.w, r3.x
    mul_sat r0.w, r7.w, r0.w
    add r0.z, -r0.w, r0.z
    add r0.z, r0.z, l(1.000000)
    mul r0.z, r0.z, l(0.125000)
    mul r0.z, r0.z, r0.z
    mul r0.z, r0.z, r0.z
  else 
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r0.w, r6.xyzx, t14.xxxx, s14, r3.x
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r1.z, r7.xyzx, t14.xxxx, s14, r3.x
    add r0.w, r0.w, r1.z
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r1.z, r9.xyzx, t14.xxxx, s14, r3.x
    add r0.w, r0.w, r1.z
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r1.z, r8.xyzx, t14.xxxx, s14, r3.x
    add r0.w, r0.w, r1.z
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r1.z, r11.xyzx, t14.xxxx, s14, r3.x
    add r0.w, r0.w, r1.z
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r1.z, r5.xyzx, t14.xxxx, s14, r3.x
    add r0.w, r0.w, r1.z
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r1.z, r12.xyzx, t14.xxxx, s14, r3.x
    add r0.w, r0.w, r1.z
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r1.z, r10.xyzx, t14.xxxx, s14, r3.x
    add r0.w, r0.w, r1.z
    mul r0.z, r0.w, l(0.125000)
  endif 
  add_sat r0.w, r4.x, l(-4.000000)
  add r0.z, r0.w, r0.z
  min r0.z, r0.z, l(1.000000)
  mad_sat r0.w, r15.y, l(0.500000), l(0.500000)
  add r3.xyz, cb0[10].xyzx, -cb0[11].xyzx
  mad r3.xyz, r0.wwww, r3.xyzx, cb0[11].xyzx
  dp3 r0.w, r15.xyzx, -cb0[3].xyzx
  add r1.z, r17.z, r0.w
  add r1.w, r17.z, l(1.000000)
  div_sat r1.z, r1.z, r1.w
  add r1.w, r1.z, l(-1.000000)
  mad r1.w, r17.x, r1.w, l(1.000000)
  mul r1.z, r1.w, r1.z
  mad r1.w, r1.z, r6.w, l(0.000100)
  log r1.w, r1.w
  mul r1.w, r1.w, r4.w
  exp r1.w, r1.w
  mul r1.w, r1.z, r1.w
  min r1.w, r1.w, l(1.000000)
  mul r2.w, r18.z, l(2.500000)
  mad_sat r3.w, r18.x, l(0.500000), -r0.w
  mad r1.w, r3.w, r18.x, r1.w
  min r1.w, r1.w, l(1.000000)
  mad r5.xyz, r16.wwww, cb1[35].xyzx, cb1[36].xyzx
  add_sat r3.w, r5.y, cb1[35].w
  add r3.w, r3.w, -cb1[35].w
  add r4.x, -cb1[35].w, l(1.000000)
  div r3.w, r3.w, r4.x
  mad r1.xy, r1.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000), l(-5.000000, -25.000000, 0.000000, 0.000000)
  max r1.x, |r1.y|, |r1.x|
  add_sat r1.x, r1.x, l(-3.700000)
  add r1.x, -r1.x, l(1.000000)
  mad r1.y, cb1[34].y, l(0.048000), l(1.000000)
  div r1.x, r1.x, r1.y
  add r1.y, r0.w, l(0.300000)
  mul_sat r1.y, r1.y, l(0.769231)
  mul r1.y, r0.z, r1.y
  mul r4.x, r1.y, l(5.000000)
  min r4.x, r4.x, l(1.000000)
  mad r6.xyz, r4.xxxx, l(0.100000, 0.790000, 0.940000, 0.000000), l(0.900000, 0.210000, 0.060000, 0.000000)
  mul r6.xyz, r3.wwww, r6.xyzx
  add r0.w, -r0.w, l(0.150000)
  add_sat r0.w, r0.w, r0.w
  mul r0.w, r0.w, r0.z
  mul r7.xyz, r0.wwww, l(0.200000, 0.046000, 0.010000, 0.000000)
  min r0.w, r2.w, l(1.000000)
  mul r7.xyz, r0.wwww, r7.xyzx
  mul r7.xyz, r1.xxxx, r7.xyzx
  mad r6.xyz, r6.xyzx, r1.yyyy, r7.xyzx
  mul r0.w, r0.z, r1.w
  mul r0.w, r3.w, r0.w
  movc r6.xyz, r4.yyyy, r6.xyzx, r0.wwww
  mul r3.xyz, r3.xyzx, cb1[0].zzzz
  mad_sat r0.w, r16.z, l(2.000000), l(-1.000000)
  mad r0.w, r0.w, l(0.650000), l(0.050000)
  add r1.x, -r0.w, l(1.000000)
  mad_sat r1.y, r5.w, l(0.900000), l(0.100000)
  add r1.y, -r1.y, l(1.001000)
  min r1.y, r1.y, l(1.000000)
  mul r2.w, r1.y, r1.y
  mul r2.w, r2.w, r2.w
  mul r1.y, r1.y, r2.w
  mad r0.w, r1.x, r1.y, r0.w
  min r0.w, r0.w, l(1.000000)
  add r1.x, r2.z, l(8.000000)
  mul r1.x, r1.x, l(0.039809)
  mad r1.y, r2.z, l(1.442695), l(1.442695)
  dp3 r2.z, r21.xyzx, r15.xyzx
  mad r2.z, r1.y, r2.z, -r1.y
  exp r2.z, r2.z
  min r2.z, r2.z, l(1.000000)
  mul r2.z, r1.x, r2.z
  add r7.xyz, r14.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000)
  dp3 r2.w, r7.xyzx, r7.xyzx
  rsq r2.w, r2.w
  mad r7.xyz, r7.xyzx, r2.wwww, l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r7.xyz, r18.yyyy, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r8.xyz, r7.xyzx, cb0[1].xyzx
  mul r8.xyz, r1.zzzz, r8.xyzx
  mul r8.xyz, r16.wwww, r8.xyzx
  mul r8.xyz, r0.zzzz, r8.xyzx
  mul r8.xyz, r2.zzzz, r8.xyzx
  mul r1.x, r1.x, r16.w
  mul r1.x, r0.w, r1.x
  mul r2.z, r1.z, r2.z
  mul r2.z, r0.w, r2.z
  dp3 r2.w, cb1[18].xyzx, r15.xyzx
  add r3.w, r2.w, l(0.250000)
  mul r3.w, r3.w, l(0.800000)
  movc_sat r2.w, r4.y, r3.w, r2.w
  mad r4.xyw, -v2.xyxz, r0.yyyy, cb1[18].xyxz
  dp3 r3.w, r4.xywx, r4.xywx
  rsq r3.w, r3.w
  mul r4.xyw, r3.wwww, r4.xyxw
  mul r3.w, r2.w, cb1[17].x
  mul r2.w, r1.x, r2.w
  dp3 r4.x, r4.xywx, r15.xyzx
  mad r4.x, r1.y, r4.x, -r1.y
  exp r4.x, r4.x
  min r4.x, r4.x, l(1.000000)
  mul r2.w, r2.w, r4.x
  mul r2.w, r2.w, cb1[17].y
  mul r4.xyw, r1.wwww, cb1[25].xyxz
  mad r4.xyw, cb1[16].xyxz, r3.wwww, r4.xyxw
  mul r9.xyz, r2.zzzz, cb1[26].xyzx
  mad r9.xyz, cb1[16].xyzx, r2.wwww, r9.xyzx
  mul r3.xyz, r5.xxxx, r3.xyzx
  dp2 r1.w, cb1[31].xyxx, cb1[31].xyxx
  ne r1.w, r1.w, l(0.000000)
  if_nz r1.w
    add r10.xy, r17.zzzz, l(0.300000, 1.300000, 0.000000, 0.000000)
    mul r5.y, r13.w, l(128.000000)
    mad r5.x, r13.w, l(128.000000), cb1[28].w
    add r2.zw, r2.yyyy, -r5.xxxy
    lt r5.xy, r2.zwzz, l(0.000000, 0.000000, 0.000000, 0.000000)
    movc r5.xy, r5.xyxx, cb1[30].yyyy, cb1[30].xxxx
    mul_sat r2.zw, r2.zzzw, r5.xxxy
    add r2.zw, -r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    dp3 r1.w, cb1[28].xyzx, r15.xyzx
    mov r10.z, -r10.x
    add r5.xy, r1.wwww, r10.xzxx
    add r10.w, -r10.x, l(-1.000000)
    div r5.xy, r5.xyxx, r10.ywyy
    mul r2.zw, r2.zzzw, r2.zzzw
    mul_sat r2.zw, r5.xxxy, r2.zzzw
    mul r2.zw, r2.zzzw, cb1[31].xxxy
    add r1.w, r2.w, r2.z
    mul r10.xyz, r1.wwww, r13.xyzx
    mad r11.xyz, -v2.xyzx, r0.yyyy, cb1[28].xyzx
    dp3 r0.y, r11.xyzx, r11.xyzx
    rsq r0.y, r0.y
    mul r11.xyz, r0.yyyy, r11.xyzx
    mul r12.xyz, r10.xyzx, cb0[2].xyzx
    mul r10.xyz, r10.xyzx, cb0[1].xyzx
    mul r10.xyz, r1.xxxx, r10.xyzx
    dp3 r0.y, r11.xyzx, r15.xyzx
    mad r0.y, r1.y, r0.y, -r1.y
    exp r0.y, r0.y
    min r0.y, r0.y, l(1.000000)
    mul r1.xyw, r0.yyyy, r10.xyxz
  else 
    mov r12.xyz, l(0,0,0,0)
    mov r1.xyw, l(0,0,0,0)
  endif 
  add r0.y, -r5.z, l(1.000000)
  mad r0.y, r17.z, r0.y, r5.z
  mul r10.xyz, r0.yyyy, r12.xyzx
  mad r4.xyw, r4.xyxw, r5.zzzz, r10.xyxz
  mul r1.xyw, r0.yyyy, r1.xyxw
  mad r1.xyw, r9.xyxz, r5.zzzz, r1.xyxw
  mul r1.xyw, r7.xyxz, r1.xyxw
  mad r3.xyz, cb0[2].xyzx, r6.xyzx, r3.xyzx
  add r3.xyz, r4.xywx, r3.xyzx
  mul r3.xyz, r14.xyzx, r3.xyzx
  add r0.y, r5.w, r5.w
  mad r4.xyw, r0.yyyy, r15.xyxz, -r19.xyxz
  mul r2.zw, r4.wwww, cb1[33].yyyw
  mad r5.xz, -r4.xxxx, cb1[33].xxzx, r2.zzwz
  mul r2.zw, r4.wwww, cb1[38].yyyw
  mad r6.xz, -r4.xxxx, cb1[38].xxzx, r2.zzwz
  mov r5.y, r4.y
  sample_l_indexable(texturecube)(float,float,float,float) r4.xyw, r5.xyzx, t6.xywz, s3, r4.z
  mov r6.y, r5.y
  sample_l_indexable(texturecube)(float,float,float,float) r5.xyz, r6.xyzx, t7.xyzw, s3, r4.z
  add r5.xyz, -r4.xywx, r5.xyzx
  mad r4.xyz, cb1[0].wwww, r5.xyzx, r4.xywx
  mul r4.xyz, r7.xyzx, r4.xyzx
  mul r4.xyz, r4.xyzx, cb1[20].zzzz
  mad_sat r0.y, -r16.z, l(2.000000), l(1.000000)
  add r0.y, r0.y, r0.y
  max r0.y, r18.w, r0.y
  mad r2.z, -r18.w, l(8.000000), l(1.000000)
  mad_sat r2.x, r2.x, r2.z, l(-1.000000)
  add r2.zw, r0.yyyy, l(0.000000, 0.000000, 2.000000, 1.000000)
  mad r0.y, r16.w, r2.z, -r2.w
  max r2.x, r2.x, r18.y
  add r2.z, -r0.y, r20.y
  mad_sat r0.y, r2.x, r2.z, r0.y
  dp3 r2.x, l(0.212500, 0.715400, 0.072100, 0.000000), cb0[10].zzzz
  mul r2.x, r2.x, l(3.000000)
  dp3 r2.z, l(0.212500, 0.715400, 0.072100, 0.000000), cb0[2].xyzx
  max r2.z, r2.z, l(0.100000)
  div r2.x, r2.x, r2.z
  max r2.x, r2.x, l(0.100000)
  min r2.x, r2.x, l(1.000000)
  mad r2.z, r18.y, r17.y, r16.y
  mul r0.z, r0.z, r1.z
  mad r0.z, r0.z, l(6.000000), r2.x
  min r0.z, r0.z, l(1.000000)
  mad r0.z, cb1[31].z, r0.z, l(-1.000000)
  mul r0.z, r0.z, cb1[31].z
  mad r0.z, r2.z, r0.z, l(1.000000)
  mul r0.y, r0.y, r0.z
  mul r0.y, r2.z, r0.y
  max r0.z, r20.z, l(0.080000)
  min r0.z, r0.z, l(1.000000)
  min r0.z, r0.z, r0.w
  mul_sat r0.y, r0.y, r0.z
  add r0.z, -r0.y, l(1.000000)
  add r1.z, -r18.y, l(1.000000)
  mul r0.z, r0.z, r1.z
  mul r2.xzw, r0.yyyy, r4.xxyz
  mad r2.xzw, r3.xxyz, r0.zzzz, r2.xxzw
  mad r0.yzw, r8.xxyz, r0.wwww, r1.xxyw
  add r0.yzw, r0.yyzw, r2.xxzw
  mul_sat r1.x, r0.x, cb0[16].w
  mad r1.y, r2.y, cb0[16].z, -cb0[16].x
  min r1.y, r1.y, cb0[16].y
  add r1.y, -r1.y, l(1.000000)
  mad r1.x, r1.x, r1.y, -cb0[14].w
  mad r0.x, r0.x, cb0[15].w, r1.x
  dp3 r1.x, cb1[37].xyzx, r19.xyzx
  add r1.x, r1.x, l(0.500000)
  mov r2.x, l(1.000000)
  mad r2.yzw, cb0[13].wwww, l(0.000000, 1.000000, 1.800000, 2.800000), l(0.000000, 1.000000, 1.000000, 1.000000)
  mul r2.xyzw, -r0.xxxx, r2.xyzw
  exp r2.xyzw, r2.xyzw
  min r2.xyzw, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  add r0.x, -r2.x, l(1.000000)
  mul r1.y, r1.x, r1.x
  mul r1.x, r1.x, r1.y
  mad r1.xyz, r1.xxxx, cb0[14].xyzx, cb0[15].xyzx
  mul r1.xyz, r0.xxxx, r1.xyzx
  mad o0.xyz, r0.yzwy, r2.yzwy, r1.xyzx
  mov o0.w, r14.w
else 
  mov o0.xyzw, l(0,0,0,0)
endif 
ret 
// Approximately 388 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
