; Step 1: Set to the constant buffer containing the matrix you wish to inverse:
[ResourceInverseIn]

[Constants]
; Step 2: Set to the offset within the constant buffer of the matrix you are inversing:
global $matrix_offset

; Step 3: Run the inverse shader. Choose one slot for each unique matrix you
; are inversing as each of these will only run once per frame (adding more if
; necessary):
[CustomShaderInverseSlot1]
max_executions_per_frame = 1
run = CustomShaderInverseUnlimited
ResourceInverseOutCBSlot1 = copy ResourceInverseOutUAV
[CustomShaderInverseSlot2]
max_executions_per_frame = 1
run = CustomShaderInverseUnlimited
ResourceInverseOutCBSlot2 = copy ResourceInverseOutUAV
[CustomShaderInverseSlot3]
max_executions_per_frame = 1
run = CustomShaderInverseUnlimited
ResourceInverseOutCBSlot3 = copy ResourceInverseOutUAV
[CustomShaderInverseSlot4]
max_executions_per_frame = 1
run = CustomShaderInverseUnlimited
ResourceInverseOutCBSlot4 = copy ResourceInverseOutUAV

; Step 4: Your inversed matrix is available in these constant buffers at offset 0:
[ResourceInverseOutCBSlot1]
[ResourceInverseOutCBSlot2]
[ResourceInverseOutCBSlot3]
[ResourceInverseOutCBSlot4]


; Internals - not recommended to use directly because it doesn't have any
; per-frame limits.
[ResourceInverseOutUAV]
type = RWBuffer
format = R32G32B32A32_FLOAT
array = 8
[ResourceInverseBakCB0]
[ResourceInverseBakU0]
[CustomShaderInverseUnlimited]
cs = inverse-cs.hlsl

ResourceInverseBakCB0 = ref cs-cb0
ResourceInverseBakU0 = ref cs-u0
local $bak_x = x

cs-cb0 = ResourceInverseIn
cs-u0 = ResourceInverseOutUAV
x = $matrix_offset

dispatch = 1, 1, 1

post x = $bak_x
post cs-cb0 = ref ResourceInverseBakCB0
post cs-u0 = ref ResourceInverseBakU0

;Resource\debug_cb\CB = ResourceInverseIn
;Resource\debug_cb\Buf = ResourceInverseOutUAV
