condition = stereo_available

;;;;;;;;;;;;;;;;;; DIRECTIONAL SHADOWS - IVP->VP MATRIX INVERSE ;;;;;;;;;;;;;;;;;;;;

[ShaderOverrideDirectionalShadows]
allow_duplicate_hash = true
hash = 376b9b9117e68a57

Resource\ShaderFixes\inverse-cs.ini\InverseIn = ref ps-cb0
$\ShaderFixes\inverse-cs.ini\matrix_offset = 52
run = CustomShader\ShaderFixes\inverse-cs.ini\InverseSlot1

ps-cb13 = Resource\ShaderFixes\inverse-cs.ini\InverseOutCBSlot1
post ps-cb13 = null

; The shadow ends up in the 4th subresource's alpha channel in this array:
;$\debug_2d_array\amplify = 1
;$\debug_2d_array\scale = 1/3
;$\debug_2d_array\channel = 4
;pre clear = o0 0.5
;post Resource\debug_2d_array\2DArray = o0

[ShaderOverride CS Occlusion Shadows]
; Used in victory pose in versus mode (at least in the road rage stage)
hash = b980995b053e4add
Resource\ShaderFixes\inverse-cs.ini\InverseIn = ref cs-cb0
$\ShaderFixes\inverse-cs.ini\matrix_offset = 4
run = CustomShader\ShaderFixes\inverse-cs.ini\InverseSlot1
cs-cb13 = Resource\ShaderFixes\inverse-cs.ini\InverseOutCBSlot1
post cs-cb13 = null
;post Resource\debug_2d\2d = cs-u0

[ShaderRegexLights]
shader_model = ps_5_0
temps = stereo tmp1 tmp2

[ShaderRegexLights.Pattern]
(?<before>
	//   row_major float4x4 mW2P;           // Index:\s+(?P<mW2P_off0>[0-9]+) (?P<mW2P_off1>[0-9]+) (?P<mW2P_off2>[0-9]+) (?P<mW2P_off3>[0-9]+)\s+Components:    16\n
	(.|\n)*
	//   row_major float4x4 mP2W;           // Index:\s+(?P<mP2W_off0>[0-9]+) (?P<mP2W_off1>[0-9]+) (?P<mP2W_off2>[0-9]+) (?P<mP2W_off3>[0-9]+)\s+Components:    16\n
	(.|\n)*
	// sDepth                            texture  float4          2d    (?P<depth>[0-9]+)        1\n
	(.|\n)*
	// \$Globals                          cbuffer      NA          NA    0        1\n
	(.|\n)*
	dcl_constantbuffer cb0\[[0-9]+\], dynamicIndexed\n
	(.|\n)*
	ld_indexable\(texture2d\)\(float,float,float,float\) (?P<zbuffer>r[0-9]+)\.[xyzw], r[0-9]+\.[xyzw]{4}, t(?P=depth)\.xyzw\n
	mul r[0-9]+\.xyzw, v[0-9]+\.yyyy, cb0\[[0-9]+\].xyzw\n
	mad r[0-9]+\.xyzw, v[0-9]+\.xxxx, cb0\[[0-9]+\].xyzw, r[0-9]+\.xyzw\n
	mad r[0-9]+\.xyzw, (?P=zbuffer)\.[xyzw]{4}, cb0\[[0-9]+\].xyzw, r[0-9]+\.xyzw\n
	add (?P<world_pos>r[0-9]+)\.xyzw, r[0-9]+\.xyzw, cb0\[[0-9]+\].xyzw\n
;div (?P<world_pos>r[0-9]+\.[xyzw]{3,4}), r[0-9]+\.[xyzw]{4}, r[0-9]+.wwww\n
)

(?<eyepos_prefix>
	div r[0-9]+\.[xyzw]{3,4}, (?P=world_pos)\.[xyzw]{4}, (?P=world_pos)\.wwww\n
	add (?P<eyepos>r[0-9]+)\.(?P<eyepos_mask>[xyzw]{3}), -r[0-9]+\.[xyzw]{4}, cb0\[[0-9]+\]\.(?P<eyepos_swiz>[xyzw]{4})\n
)?

; Everything below here is to find use of the mW2P and correct them in relevant
; shaders. This is not necessary for all lighting shaders, but fixes an issue
; with c8a098276aa90ec0 in the colosseum (actually, I'm not entirely sure what
; visual difference this shader makes aside from breaking things if these
; changes are missing). Since we can't match that matrix very precisely thanks
; to the variable offsets we will match the assembly pattern:
(
	(?P<interim>
		(.|\n)*
	)
	(?P<optional1>
		\s*lt r[0-9]+.w, r[0-9]+.w, l\(-0.500000\)\n
		\s*if_nz r[0-9]+.w\n
		\s*  add r[0-9]+.w, -r[0-9]+.w, l\(-0.500000\)\n
		\s*  add r[0-9]+.w, r[0-9]+.w, r[0-9]+.w\n
		\s*  mul r[0-9]+.xyzw, r[0-9]+.yyyy, cb0\[[0-9]+\].xyzw\n
		\s*  mad r[0-9]+.xyzw, r[0-9]+.xxxx, cb0\[[0-9]+\].xyzw, r[0-9]+.xyzw\n
		\s*  mad r[0-9]+.xyzw, r[0-9]+.zzzz, cb0\[[0-9]+\].xyzw, r[0-9]+.xyzw\n
		\s*  add (?P<optional_proj1>r[0-9]+).xyzw, r13.xyzw, cb0\[[0-9]+\].xyzw\n
	)
	(?P<optional2>
		\s*  div r[0-9]+.xyz, r[0-9]+.xyzx, r[0-9]+.wwww\n
		\s*  add r[0-9]+.xyz, r[0-9]+.xyzx, r[0-9]+.xyzx\n
		\s*  mul r[0-9]+.xyzw, r[0-9]+.yyyy, cb0\[[0-9]+\].xyzw\n
		\s*  mad r[0-9]+.xyzw, r[0-9]+.xxxx, cb0\[[0-9]+\].xyzw, r[0-9]+.xyzw\n
		\s*  mad r[0-9]+.xyzw, r[0-9]+.zzzz, cb0\[[0-9]+\].xyzw, r[0-9]+.xyzw\n
		\s*  add (?P<optional_proj2>r[0-9]+).xyzw, r[0-9]+.xyzw, cb0\[[0-9]+\].xyzw\n
	)
)?

[ShaderRegexLights.InsertDeclarations]
dcl_resource_texture2d (float,float,float,float) t121

[ShaderRegexLights.Pattern.Replace]
${before}
\n
div ${tmp1}.xyzw, ${world_pos}.xyzw, ${world_pos}.wwww\n

// mW2P\n
mul ${tmp2}.xyzw, ${tmp1}.xxxx, cb0[${mW2P_off0}].xyzw\n
mad ${tmp2}.xyzw, ${tmp1}.yyyy, cb0[${mW2P_off1}].xyzw, ${tmp2}.xyzw\n
mad ${tmp2}.xyzw, ${tmp1}.zzzz, cb0[${mW2P_off2}].xyzw, ${tmp2}.xyzw\n
add ${tmp2}.xyzw, ${tmp2}.xyzw, cb0[${mW2P_off3}].xyzw\n

// Stereo correct\n
ld_indexable(texture2d)(float,float,float,float) ${stereo}.xyzw, l(0, 0, 0, 0), t121.xyzw\n
add ${stereo}.w, ${tmp2}.w, -${stereo}.y\n
mad ${tmp2}.x, -${stereo}.w, ${stereo}.x, ${tmp2}.x\n

// mP2W\n
mul ${world_pos}.xyzw, ${tmp2}.xxxx, cb0[${mP2W_off0}].xyzw\n
mad ${world_pos}.xyzw, ${tmp2}.yyyy, cb0[${mP2W_off1}].xyzw, ${world_pos}.xyzw\n
mad ${world_pos}.xyzw, ${tmp2}.zzzz, cb0[${mP2W_off2}].xyzw, ${world_pos}.xyzw\n
mad ${world_pos}.xyzw, ${tmp2}.wwww, cb0[${mP2W_off3}].xyzw, ${world_pos}.xyzw\n
\n

${eyepos_prefix:-}\n

${eyepos_prefix:+// Correct reflections by stereoising eye position\n:}
${eyepos_prefix:+mul ${tmp1}.x, ${stereo}.x, -${stereo}.y\n:}
${eyepos_prefix:+mul ${tmp1}.xyzw, ${tmp1}.xxxx, cb0[${mP2W_off0}].xyzw\n:}
${eyepos_prefix:+add ${eyepos}.${eyepos_mask}, ${eyepos}.xyzw -${tmp1}.${eyepos_swiz}\n\n:}

${interim:-}\n
${optional1:-}\n
\n
${optional_proj1:+add ${stereo}.w, ${optional_proj1}.w, -${stereo}.y:}\n
${optional_proj1:+mad ${optional_proj1}.x, ${stereo}.w, ${stereo}.x, ${optional_proj1}.x:}\n
\n
${optional2:-}\n
\n
${optional_proj2:+add ${stereo}.w, ${optional_proj2}.w, -${stereo}.y:}\n
${optional_proj2:+mad ${optional_proj2}.x, ${stereo}.w, ${stereo}.x, ${optional_proj2}.x:}\n
\n
