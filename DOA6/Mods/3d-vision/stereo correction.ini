;;;;;;;;;;;;; STEREO CORRECTION AND HEURISTIC REPLACEMENT ;;;;;;;;;;;;;;;;;;;
; The 3D Vision driver gets rather confused in this game making inconsistent
; decisions that wind up with mixed 2D and 3D geometry - even within a single
; mesh! This regex

[ShaderRegexStereoCorrection]
shader_model = vs_5_0
temps = stereo heuristics tmp1 repl_sv_position
; Backing up & restoring x incurs about a 1.5fps hit, so disabling for now. We
; might want to reserve an ini param no one else is allowed to use or later
; have our own private buffer when 3DMigoto allowed them to be updated from the
; CPU this easily.
;local $bak_x = x
; Depth buffer bound heuristic:
x = oD !== -0.0
; Could also add other kinds of heuristics, like render target filtering
;post x = $bak_x

[ShaderRegexStereoCorrection.InsertDeclarations]
; Disable the driver's stereo correction by declaring cb12:
dcl_constantbuffer cb12[4], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t125
dcl_resource_texture1d (float,float,float,float) t120

[ShaderRegexStereoCorrection.Pattern]
(?P<dcl>
	dcl_output_siv (?P<sv_position>o[0-9]+)\.xyzw, position
)\n

(?P<before>
	(.|\n)*
	; mov instructions will be handled by the halo variant of the regex:
	(?<!mov)\s+
)

(?P=sv_position)

(?P<after>
	\.xyzw.*\n
	(.|\n)*
)

ret\n

[ShaderRegexStereoCorrection.Pattern.Replace]
${dcl} // ShaderRegexStereoCorrection Applied\n

${before}
${repl_sv_position}
${after}

\n
// Apply our own stereo correction:\n
// W != 1.0 heuristic:\n
eq ${tmp1}.x, ${repl_sv_position}.w, l(1.0)\n
if_z ${tmp1}.x\n
	ld_indexable(texture1d)(float,float,float,float) ${heuristics}.xyzw, l(0, 0, 0, 0), t120.xyzw\n
	// Depth buffer must be bound:\n
	eq ${tmp1}.x, ${heuristics}.x, l(1.0)\n
	if_nz ${tmp1}.x\n
		ld_indexable(texture2d)(float,float,float,float) ${stereo}.xyzw, l(0, 0, 0, 0), t125.xyzw\n
		add ${tmp1}.x, ${repl_sv_position}.w, -${stereo}.y\n
		mad ${repl_sv_position}.x, ${tmp1}.x, ${stereo}.x, ${repl_sv_position}.x\n
	endif\n
endif\n
\n
mov ${sv_position}.xyzw, ${repl_sv_position}.xyzw\n
\n
ret\n

[ShaderRegexStereoCorrectionWithHalo]
shader_model = vs_5_0
temps = stereo heuristics tmp1 repl_sv_position
; Backing up & restoring x incurs about a 1.5fps hit, so disabling for now. We
; might want to reserve an ini param no one else is allowed to use or later
; have our own private buffer when 3DMigoto allowed them to be updated from the
; CPU this easily.
;local $bak_x = x
; Depth buffer bound heuristic:
x = oD !== -0.0
; Could also add other kinds of heuristics, like render target filtering
;post x = $bak_x

[ShaderRegexStereoCorrectionWithHalo.InsertDeclarations]
; Disable the driver's stereo correction by declaring cb12:
dcl_constantbuffer cb12[4], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t125
dcl_resource_texture1d (float,float,float,float) t120

[ShaderRegexStereoCorrectionWithHalo.Pattern]
(?P<dcl>
	dcl_output_siv (?P<sv_position>o[0-9]+)\.xyzw, position
)\n
(?P<body>
	(.|\n)*
)

(?P<after>
	; Matches a move to this register with X an W components included.
	; Y & Z are allowed to be set from another instruction (e.g. electric fence sparks).
	\s*mov ((?P<d>(.|\n)*?)(?P=sv_position))\.x[yz]*w, (?P<tmp_pos_reg>r[0-9]+)\.(?P<tmp_pos_x>[xyzw])[xyzw]{2}(?P<tmp_pos_w>[xyzw])\n
)

[ShaderRegexStereoCorrectionWithHalo.Pattern.Replace]
${dcl} // ShaderRegexStereoCorrectionWithHalo Applied\n
${body}
\n
// Apply our own stereo correction (Halo variant):\n
// W != 1.0 heuristic:\n
eq ${tmp1}.x, ${tmp_pos_reg}.${tmp_pos_w}, l(1.0)\n
if_z ${tmp1}.x\n
	ld_indexable(texture1d)(float,float,float,float) ${heuristics}.xyzw, l(0, 0, 0, 0), t120.xyzw\n
	// Depth buffer must be bound:\n
	eq ${tmp1}.x, ${heuristics}.x, l(1.0)\n
	if_nz ${tmp1}.x\n
		ld_indexable(texture2d)(float,float,float,float) ${stereo}.xyzw, l(0, 0, 0, 0), t125.xyzw\n
		add ${tmp1}.x, ${tmp_pos_reg}.${tmp_pos_w}, -${stereo}.y\n
		mad ${tmp_pos_reg}.${tmp_pos_x}, ${tmp1}.x, ${stereo}.x, ${tmp_pos_reg}.${tmp_pos_x}\n
	endif\n
endif\n
\n
${after}

; Optional regex to disable the driver's stereo correction on all unmatched
; shaders. Use to make sure the above two patterns are truly stereo correcting
; everything, not the driver:
;[ShaderRegexDisableNVStereoCorrection]
;shader_model = vs_5_0
;[ShaderRegexDisableNVStereoCorrection.InsertDeclarations]
;; Disable the driver's stereo correction by declaring cb12:
;dcl_constantbuffer cb12[4], immediateIndexed
