// 3DMigoto: f981ab8c3dd0f32f | Matched 45 variants of 1 shaders: Hidden/Internal-PrePassLighting
// 
//               Unity headers extracted from Internal-PrePassLighting.shader
//               Shader "Hidden/Internal-PrePassLighting" {
//                 Properties {
//                  _LightTexture0 ("", any) = "" {}
//                  _LightTextureB0 ("", 2D) = "" {}
//                  _ShadowMapTexture ("", any) = "" {}
//                 }
//                 Fallback Off
//                 SubShader 1/1 {
// 000000007fff:     Pass 1/3 {
// 00003fff8000:     Pass 2/3 {
// 1fffc0000000:     Pass 3/3 {
//                     Tags { "ShadowSupport"="True" }
//                     ZWrite Off
//                     Fog { Mode Off }
// 000000007fff:       Blend DstColor Zero
// 1fffffff8000:       Blend One One
//                     Program "vp" {
//                       SubProgram "d3d11 " {
// 000080010002:           Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
// 002000400080:           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
// 000400080010:           Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
// 004000800100:           Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
// 080010002000:           Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
// 008001000200:           Keywords { "POINT" "SHADOWS_CUBE" }
// 000040008001:           Keywords { "POINT" "SHADOWS_OFF" }
// 100020004000:           Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
// 010002000400:           Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
// 000200040008:           Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
// 040008001000:           Keywords { "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SHADOWS_SOFT" "SPOT" }
// 001000200040:           Keywords { "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SPOT" }
// 020004000800:           Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
// 000800100020:           Keywords { "SHADOWS_DEPTH" "SPOT" }
// 000100020004:           Keywords { "SHADOWS_OFF" "SPOT" }
//                         Bind "vertex" Vertex
//                         Bind "normal" Normal
// 19fff3ffe7ff:           ConstBuffer "$Globals" 160
// 06000c001800:           ConstBuffer "$Globals" 224
//                         Float 16 [_LightAsQuad]
//                         ConstBuffer "UnityPerCamera" 128
//                         Vector 80 [_ProjectionParams]
//                         ConstBuffer "UnityPerDraw" 336
//                         Matrix 0 [glstate_matrix_mvp]
//                         Matrix 64 [glstate_matrix_modelview0]
//                         BindCB "$Globals" 0
//                         BindCB "UnityPerCamera" 1
//                         BindCB "UnityPerDraw" 2
//                       }
//                     }
//                   }
//                 }
//               }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model vs_4_0

// Replace definition with UnityPerDraw from Unity Cg source code:
// Note that matrix order is transposed between Cg and HLSL, so add row_major
// keywords to each float4x4 entry
cbuffer cb2 : register(b2)
{
  // float4 cb2[8];

  row_major float4x4 glstate_matrix_mvp;
  row_major float4x4 glstate_matrix_modelview0;
  row_major float4x4 glstate_matrix_invtrans_modelview0;
  #define UNITY_MATRIX_MVP glstate_matrix_mvp
  #define UNITY_MATRIX_MV glstate_matrix_modelview0
  #define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

  row_major uniform float4x4 _Object2World;
  row_major uniform float4x4 _World2Object;

  uniform float4 unity_Scale; // w = 1 / uniform scale
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[2];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float fov : TEXCOORD2) // New output to pass FOV to pixel shaders
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x; float convergence = stereo.y;

  r0.xyzw = UNITY_MATRIX_MVP[1].xyzw * v0.yyyy;
  r0.xyzw = UNITY_MATRIX_MVP[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = UNITY_MATRIX_MVP[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = UNITY_MATRIX_MVP[3].xyzw * v0.wwww + r0.xyzw;
  o0.xyzw = r0.xyzw;

bool full_screen = (r0.w == 1);
float depth = r0.w;

if (!full_screen) {
	r0.x += separation * (depth - convergence);
}

  r0.y = cb1[5].x * r0.y;
  r1.xzw = float3(0.5,0.5,0.5) * r0.xwy;
  o1.zw = r0.zw;
  o1.xy = r1.xw + r1.zz;
  r0.xyz = UNITY_MATRIX_MV[1].xyz * v0.yyy;
  r0.xyz = UNITY_MATRIX_MV[0].xyz * v0.xxx + r0.xyz;
  r0.xyz = UNITY_MATRIX_MV[2].xyz * v0.zzz + r0.xyz;
  r0.xyz = UNITY_MATRIX_MV[3].xyz * v0.www + r0.xyz;

if (!full_screen) {
	// Looks like UNITY_MATRIX_IT_MV is 0, so we can't just do this:
	//    float4x4 projection = mul(UNITY_MATRIX_IT_MV, UNITY_MATRIX_MVP);
	//    fov = 1 / projection[0].x;

	// Instead, we have to calculate this the long way:

	// I already have an optimised version of this calculation in assembler for
	// Unity 4 (the committed version is for column-major order, but the optimised
	// row-major version was only slightly longer). I'm guessing the HLSL
	// determinant() function won't be optimised because it can't make assumptions
	// about the matrix (and that is a *large* amount of multiplications that could
	// be eliminated), so we can probably do better, but for now this is clearer:
	float det = 1 / determinant(UNITY_MATRIX_MV);

	float3 mvi;
	mvi.x = ((UNITY_MATRIX_MV._m11 * UNITY_MATRIX_MV._m22) - (UNITY_MATRIX_MV._m21 * UNITY_MATRIX_MV._m12)) * det;
	mvi.y = ((UNITY_MATRIX_MV._m21 * UNITY_MATRIX_MV._m02) - (UNITY_MATRIX_MV._m01 * UNITY_MATRIX_MV._m22)) * det;
	mvi.z = ((UNITY_MATRIX_MV._m01 * UNITY_MATRIX_MV._m12) - (UNITY_MATRIX_MV._m11 * UNITY_MATRIX_MV._m02)) * det;

	fov = 1 / dot(mvi, UNITY_MATRIX_MVP._m00_m10_m20);

	r0.x += separation * (depth - convergence) * fov;
} else {
	// FIXME: Use values copied from elsewhere, depending on current render target
	fov = 1;
}

  r1.xyz = float3(-1,-1,1) * r0.xyz;
  r0.xyz = -r0.xyz * float3(-1,-1,1) + v1.xyz;
  o2.xyz = cb0[1].xxx * r0.xyz + r1.xyz;
  return;
}
