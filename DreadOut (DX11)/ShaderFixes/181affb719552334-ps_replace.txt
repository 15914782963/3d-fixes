// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 181affb719552334-ps_replace.txt
// 3DMigoto: 181affb719552334 | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 3/3 {
//       Tags { "ShadowSupport"="True" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend One One
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "POINT" "SHADOWS_OFF" }
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_LightTextureB0] 2D 2
//           ConstBuffer "$Globals" 160
//           Vector 48 [_LightPos]
//           Vector 64 [_LightColor]
//           Vector 80 [unity_LightmapFade]
//           ConstBuffer "UnityPerCamera" 128
//           Vector 64 [_WorldSpaceCameraPos] 3
//           Vector 80 [_ProjectionParams]
//           Vector 112 [_ZBufferParams]
//           ConstBuffer "UnityShadows" 416
//           Vector 400 [unity_ShadowFadeCenterAndType]
//           ConstBuffer "UnityPerCamera2" 64
//           Matrix 0 [_CameraToWorld]
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityShadows" 2
//           BindCB "UnityPerCamera2" 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

// ---- Created with 3Dmigoto v1.2.31 on Mon Feb 22 16:46:05 2016
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[4];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[26];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[6];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 181affb719552334-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xy = v1.xy / v1.ww;
  r1.xyzw = t1.Sample(s1_s, r0.xy).xyzw;
  r0.xyzw = t0.Sample(s0_s, r0.xy).xyzw;
  r1.x = cb1[7].x * r1.x + cb1[7].y;
  r1.x = 1 / r1.x;
  r1.y = cb1[5].z / v2.z;
  r1.yzw = v2.xyz * r1.yyy;
  r2.xyz = r1.yzw * r1.xxx;
  r3.xyz = cb3[1].xyz * r2.yyy;
  r2.xyw = cb3[0].xyz * r2.xxx + r3.xyz;
  r2.xyw = cb3[2].xyz * r2.zzz + r2.xyw;
  r2.xyw = cb3[3].xyz + r2.xyw;
  r3.xyz = -_WorldSpaceCameraPos.xyz + r2.xyw;
  r1.y = dot(r3.xyz, r3.xyz);
  r1.y = rsqrt(r1.y);
  r4.xyz = -cb0[3].xyz + r2.xyw;
  r2.xyw = -cb2[25].xyz + r2.xyw;
  r1.z = dot(r2.xyw, r2.xyw);
  r1.z = sqrt(r1.z);
  r1.x = -r1.w * r1.x + r1.z;
  r1.x = cb2[25].w * r1.x + r2.z;
  r1.x = r1.x * cb0[5].z + cb0[5].w;
  r1.x = saturate(1 + -r1.x);
  r1.z = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r1.z);
  r1.z = cb0[3].w * r1.z;
  r2.xyzw = t2.Sample(s2_s, r1.zz).xyzw;
  r2.yzw = r4.xyz * r1.www;
  r1.yzw = -r3.xyz * r1.yyy + -r2.yzw;
  r3.x = dot(r1.yzw, r1.yzw);
  r3.x = rsqrt(r3.x);
  r1.yzw = r3.xxx * r1.yzw;
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = 128 * r0.w;
  r3.x = dot(r0.xyz, r0.xyz);
  r3.x = rsqrt(r3.x);
  r0.xyz = r3.xxx * r0.xyz;
  r1.y = dot(r1.yzw, r0.xyz);
  r0.x = dot(-r2.yzw, r0.xyz);
  r0.x = max(0, r0.x);
  r0.x = r0.x * r2.x;
  r2.x = saturate(r2.x);
  r3.yzw = cb0[4].xyz * r0.xxx;
  r0.x = max(0, r1.y);
  r0.x = log2(r0.x);
  r0.x = r0.w * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r0.x * r2.x;
  r0.y = dot(cb0[4].xyz, float3(0.219999999,0.707000017,0.0710000023));
  r3.x = r0.x * r0.y;
  o0.xyzw = r3.xyzw * r1.xxxx;
  return;
}
