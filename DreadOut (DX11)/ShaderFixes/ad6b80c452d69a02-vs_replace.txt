// Halo on character, bed, furniture. Not showing up in extraction scripts for some reason, but Diffuse Detail/2d014afdc71fadf1-vs.txt is close

// hlsltool.py --auto-fix-vertex-halo --in-place ad6b80c452d69a02-vs_replace.txt
// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 27 03:32:24 2016
cbuffer cb3 : register(b3)
{
  float4 cb3[21];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[45];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[7];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.xyzw = cb3[1].xyzw * v0.yyyy;
  r0.xyzw = cb3[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb3[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = cb3[3].xyzw * v0.wwww + r0.xyzw;
  o0.xyzw = r0.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py --auto-fix-vertex-halo --in-place ad6b80c452d69a02-vs_replace.txt
if (r0.w != 1.0) { r0.x += separation * (r0.w - convergence); }

  o1.xy = v3.xy * cb0[5].xy + cb0[5].zw;
  o1.zw = v3.xy * cb0[6].xy + cb0[6].zw;
  r0.y = cb1[5].x * r0.y;
  r1.xzw = float3(0.5,0.5,0.5) * r0.xwy;
  o2.zw = r0.zw;
  o2.xy = r1.xw + r1.zz;
  r0.xyz = cb3[20].www * v2.xyz;
  r1.xyz = cb3[13].xyz * r0.yyy;
  r0.xyw = cb3[12].xyz * r0.xxx + r1.xyz;
  r0.xyz = cb3[14].xyz * r0.zzz + r0.xyw;
  r0.w = 1;
  r1.x = dot(cb2[38].xyzw, r0.xyzw);
  r1.y = dot(cb2[39].xyzw, r0.xyzw);
  r1.z = dot(cb2[40].xyzw, r0.xyzw);
  r2.xyzw = r0.xyzz * r0.yzzx;
  r3.x = dot(cb2[41].xyzw, r2.xyzw);
  r3.y = dot(cb2[42].xyzw, r2.xyzw);
  r3.z = dot(cb2[43].xyzw, r2.xyzw);
  r1.xyz = r3.xyz + r1.xyz;
  r0.y = r0.y * r0.y;
  r0.x = r0.x * r0.x + -r0.y;
  o3.xyz = cb2[44].xyz * r0.xxx + r1.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.31 on Sat Feb 27 03:32:24 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// COLOR                    0   xyzw        5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
vs_4_0
dcl_constantbuffer cb0[7], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[45], immediateIndexed
dcl_constantbuffer cb3[21], immediateIndexed
dcl_input v0.xyzw
dcl_input v2.xyz
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_temps 4
mul r0.xyzw, v0.yyyy, cb3[1].xyzw
mad r0.xyzw, cb3[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb3[2].xyzw, v0.zzzz, r0.xyzw
mad r0.xyzw, cb3[3].xyzw, v0.wwww, r0.xyzw
mov o0.xyzw, r0.xyzw
mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
mad o1.zw, v3.xxxy, cb0[6].xxxy, cb0[6].zzzw
mul r0.y, r0.y, cb1[5].x
mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
mov o2.zw, r0.zzzw
add o2.xy, r1.zzzz, r1.xwxx
mul r0.xyz, v2.xyzx, cb3[20].wwww
mul r1.xyz, r0.yyyy, cb3[13].xyzx
mad r0.xyw, cb3[12].xyxz, r0.xxxx, r1.xyxz
mad r0.xyz, cb3[14].xyzx, r0.zzzz, r0.xywx
mov r0.w, l(1.000000)
dp4 r1.x, cb2[38].xyzw, r0.xyzw
dp4 r1.y, cb2[39].xyzw, r0.xyzw
dp4 r1.z, cb2[40].xyzw, r0.xyzw
mul r2.xyzw, r0.yzzx, r0.xyzz
dp4 r3.x, cb2[41].xyzw, r2.xyzw
dp4 r3.y, cb2[42].xyzw, r2.xyzw
dp4 r3.z, cb2[43].xyzw, r2.xyzw
add r1.xyz, r1.xyzx, r3.xyzx
mul r0.y, r0.y, r0.y
mad r0.x, r0.x, r0.x, -r0.y
mad o3.xyz, cb2[44].xyzx, r0.xxxx, r1.xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
