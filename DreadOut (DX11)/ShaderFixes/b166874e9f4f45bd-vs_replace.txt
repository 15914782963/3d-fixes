// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe b166874e9f4f45bd-vs_replace.txt
// 3DMigoto: b166874e9f4f45bd | Matched 2 variants of 1 shaders: Hidden/TerrainEngine/Details/WavingDoublePass
// 
//    Unity headers extracted from WavingGrass.shader
//    Shader "Hidden/TerrainEngine/Details/WavingDoublePass" {
//      Properties {
//       _WavingTint ("Fade Color", Color) = (0.7,0.6,0.5,0)
//       _MainTex ("Base (RGB) Alpha (A)", 2D) = "white" {}
//       _WaveAndDistance ("Wave and distance", Vector) = (12,3.6,1,1)
//       _Cutoff ("Cutoff", Float) = 0.5
//      }
//      Fallback Off
//      SubShader 1/2 {
//        LOD 200
//        Tags { "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "RenderType"="Grass" }
//        Pass 1/6 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "RenderType"="Grass" }
//          Cull Off
//          ColorMask RGB
//          Program "vp" {
//            SubProgram "d3d11 " {
// 1:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
// 2:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_ON" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Bind "texcoord1" TexCoord1
//              ConstBuffer "$Globals" 176
//              Vector 144 [unity_LightmapST]
//              Vector 160 [_MainTex_ST]
//              ConstBuffer "UnityPerCamera" 128
//              Vector 80 [_ProjectionParams]
//              ConstBuffer "UnityPerDraw" 336
//              Matrix 0 [glstate_matrix_mvp]
//              ConstBuffer "UnityTerrain" 256
//              Vector 0 [_WavingTint]
//              Vector 16 [_WaveAndDistance]
//              Vector 32 [_CameraPosition]
//              BindCB "$Globals" 0
//              BindCB "UnityPerCamera" 1
//              BindCB "UnityPerDraw" 2
//              BindCB "UnityTerrain" 3
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model vs_4_0

// ---- Created with 3Dmigoto v1.2.31 on Mon Feb 22 16:46:13 2016
cbuffer cb3 : register(b3)
{
  float4 cb3[3];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[4];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[11];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float2 p1 : TEXCOORD1,
  out float4 o2 : COLOR0,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.xy = cb3[1].yy * v0.xz;
  r1.xyzw = float4(0.00600000005,0.0199999996,0.0199999996,0.0500000007) * r0.yyyy;
  r0.xyzw = r0.xxxx * float4(0.0120000001,0.0199999996,0.0599999987,0.0240000002) + r1.xyzw;
  r0.xyzw = cb3[1].xxxx * float4(1.20000005,2,1.60000002,4.80000019) + r0.xyzw;
  r0.xyzw = frac(r0.xyzw);
  r0.xyzw = r0.xyzw * float4(6.40884876,6.40884876,6.40884876,6.40884876) + float4(-3.14159274,-3.14159274,-3.14159274,-3.14159274);
  r1.xyzw = r0.xyzw * r0.xyzw;
  r2.xyzw = r1.xyzw * r0.xyzw;
  r0.xyzw = r2.xyzw * float4(-0.161616161,-0.161616161,-0.161616161,-0.161616161) + r0.xyzw;
  r2.xyzw = r2.xyzw * r1.xyzw;
  r1.xyzw = r2.xyzw * r1.xyzw;
  r0.xyzw = r2.xyzw * float4(0.00833330024,0.00833330024,0.00833330024,0.00833330024) + r0.xyzw;
  r0.xyzw = r1.xyzw * float4(-0.000198409994,-0.000198409994,-0.000198409994,-0.000198409994) + r0.xyzw;
  r0.xyzw = r0.xyzw * r0.xyzw;
  r0.xyzw = r0.xyzw * r0.xyzw;
  r1.x = cb3[1].z * v5.w;
  r1.xyzw = r1.xxxx * r0.xyzw;
  r0.x = dot(r0.xyzw, float4(0.674199879,0.674199879,0.269679934,0.134839967));
  r0.x = 0.699999988 * r0.x;
  r2.x = dot(r1.xyzw, float4(0.0240000002,0.0399999991,-0.119999997,0.0960000008));
  r2.z = dot(r1.xyzw, float4(0.00600000005,0.0199999996,-0.0199999996,0.100000001));
  r1.xz = -r2.xz * cb3[1].zz + v0.xz;
  r2.xyzw = cb2[1].xyzw * v0.yyyy;
  r2.xyzw = cb2[0].xyzw * r1.xxxx + r2.xyzw;
  r2.xyzw = cb2[2].xyzw * r1.zzzz + r2.xyzw;
  r2.xyzw = cb2[3].xyzw * v0.wwww + r2.xyzw;
  o0.xyzw = r2.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe b166874e9f4f45bd-vs_replace.txt
if (r2.w != 1.0) { r2.x += separation * (r2.w - convergence); }

  o1.xy = v3.xy * cb0[10].xy + cb0[10].zw;
  p1.xy = v4.xy * cb0[9].xy + cb0[9].zw;
  r1.y = v0.y;
  r0.yzw = -cb3[2].xyz + r1.xyz;
  r0.y = dot(r0.yzw, r0.yzw);
  r0.y = cb3[1].w + -r0.y;
  r0.y = r0.y + r0.y;
  o2.w = saturate(cb3[2].w * r0.y);
  r0.yzw = float3(-0.5,-0.5,-0.5) + cb3[0].xyz;
  r0.xyz = r0.xxx * r0.yzw + float3(0.5,0.5,0.5);
  r0.xyz = v5.xyz * r0.xyz;
  o2.xyz = r0.xyz + r0.xyz;
  r0.x = cb1[5].x * r2.y;
  r0.w = 0.5 * r0.x;
  r0.xz = float2(0.5,0.5) * r2.xw;
  o3.zw = r2.zw;
  o3.xy = r0.xw + r0.zz;
  return;
}
