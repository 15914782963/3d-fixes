// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 9bca77c39e8efb8b-vs_replace.txt
// 3DMigoto: 9bca77c39e8efb8b | Matched 2 variants of 2 shaders: Hidden/Nature/Tree Creator Bark Optimized, Nature/Tree Creator Bark
// 
//    Unity headers extracted from TreeCreatorBarkOptimized.shader
//    Shader "Hidden/Nature/Tree Creator Bark Optimized" {
//      Properties {
//       _Color ("Main Color", Color) = (1,1,1,1)
//       _MainTex ("Base (RGB) Alpha (A)", 2D) = "white" {}
//       _BumpSpecMap ("Normalmap (GA) Spec (R)", 2D) = "bump" {}
//       _TranslucencyMap ("Trans (RGB) Gloss(A)", 2D) = "white" {}
//       _SpecColor ("Specular Color", Color) = (0.5,0.5,0.5,1)
//       _Scale ("Scale", Vector) = (1,1,1,1)
//       _SquashAmount ("Squash", Float) = 1
//      }
//      Dependency "BillboardShader" = "Hidden/Nature/Tree Creator Bark Rendertex"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "RenderType"="TreeBark" }
//        Pass 1/6 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="TreeBark" }
//          Program "vp" {
//            SubProgram "d3d11 " {
//              Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "normal" Normal
//              Bind "texcoord" TexCoord0
//              Bind "texcoord1" TexCoord1
//              Bind "tangent" TexCoord2
//              ConstBuffer "$Globals" 192
//              Vector 112 [_Wind]
//              Vector 176 [_MainTex_ST]
//              ConstBuffer "UnityPerCamera" 128
//              Vector 0 [_Time]
//              Vector 64 [_WorldSpaceCameraPos] 3
//              Vector 80 [_ProjectionParams]
//              ConstBuffer "UnityLighting" 720
//              Vector 0 [_WorldSpaceLightPos0]
//              Vector 608 [unity_SHAr]
//              Vector 624 [unity_SHAg]
//              Vector 640 [unity_SHAb]
//              Vector 656 [unity_SHBr]
//              Vector 672 [unity_SHBg]
//              Vector 688 [unity_SHBb]
//              Vector 704 [unity_SHC]
//              ConstBuffer "UnityPerDraw" 336
//              Matrix 0 [glstate_matrix_mvp]
//              Matrix 192 [_Object2World]
//              Matrix 256 [_World2Object]
//              Vector 320 [unity_Scale]
//              ConstBuffer "UnityTerrain" 256
//              Vector 80 [_Scale]
//              Vector 160 [_SquashPlaneNormal]
//              Float 176 [_SquashAmount]
//              BindCB "$Globals" 0
//              BindCB "UnityPerCamera" 1
//              BindCB "UnityLighting" 2
//              BindCB "UnityPerDraw" 3
//              BindCB "UnityTerrain" 4
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from TreeCreatorBark.shader
//    Shader "Nature/Tree Creator Bark" {
//      Properties {
//       _Color ("Main Color", Color) = (1,1,1,1)
//       _Shininess ("Shininess", Range(0.01,1)) = 0.078125
//       _MainTex ("Base (RGB) Alpha (A)", 2D) = "white" {}
//       _BumpMap ("Normalmap", 2D) = "bump" {}
//       _GlossMap ("Gloss (A)", 2D) = "black" {}
//       _SpecColor ("Specular Color", Color) = (0.5,0.5,0.5,1)
//       _Scale ("Scale", Vector) = (1,1,1,1)
//       _SquashAmount ("Squash", Float) = 1
//      }
//      Dependency "OptimizedShader" = "Hidden/Nature/Tree Creator Bark Optimized"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "RenderType"="TreeBark" }
//        Pass 1/6 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="TreeBark" }
//          Program "vp" {
//            SubProgram "d3d11 " {
//              Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "normal" Normal
//              Bind "texcoord" TexCoord0
//              Bind "texcoord1" TexCoord1
//              Bind "tangent" TexCoord2
//              ConstBuffer "$Globals" 192
//              Vector 112 [_Wind]
//              Vector 176 [_MainTex_ST]
//              ConstBuffer "UnityPerCamera" 128
//              Vector 0 [_Time]
//              Vector 64 [_WorldSpaceCameraPos] 3
//              Vector 80 [_ProjectionParams]
//              ConstBuffer "UnityLighting" 720
//              Vector 0 [_WorldSpaceLightPos0]
//              Vector 608 [unity_SHAr]
//              Vector 624 [unity_SHAg]
//              Vector 640 [unity_SHAb]
//              Vector 656 [unity_SHBr]
//              Vector 672 [unity_SHBg]
//              Vector 688 [unity_SHBb]
//              Vector 704 [unity_SHC]
//              ConstBuffer "UnityPerDraw" 336
//              Matrix 0 [glstate_matrix_mvp]
//              Matrix 192 [_Object2World]
//              Matrix 256 [_World2Object]
//              Vector 320 [unity_Scale]
//              ConstBuffer "UnityTerrain" 256
//              Vector 80 [_Scale]
//              Vector 160 [_SquashPlaneNormal]
//              Float 176 [_SquashAmount]
//              BindCB "$Globals" 0
//              BindCB "UnityPerCamera" 1
//              BindCB "UnityLighting" 2
//              BindCB "UnityPerDraw" 3
//              BindCB "UnityTerrain" 4
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model vs_4_0

// ---- Created with 3Dmigoto v1.2.31 on Mon Feb 22 16:46:25 2016
cbuffer cb4 : register(b4)
{
  float4 cb4[12];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[21];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[45];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[12];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float4 o2 : COLOR0,
  out float4 o3 : TEXCOORD1,
  out float4 o4 : TEXCOORD2,
  out float4 o5 : TEXCOORD3,
  out float4 o6 : TEXCOORD4)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 9bca77c39e8efb8b-vs_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = cb3[12].w;
  r0.y = cb3[13].w;
  r0.z = cb3[14].w;
  r0.x = dot(r0.xyz, float3(1,1,1));
  r0.y = v5.x + r0.x;
  r0.z = v5.y + r0.y;
  r1.xyz = cb4[5].xyz * v0.xyz;
  r0.x = dot(r1.xyz, r0.zzz);
  r0.xyzw = cb1[0].yyyy + r0.xxyy;
  r0.xyzw = float4(1.97500002,0.792999983,0.375,0.193000004) * r0.xyzw;
  r0.xyzw = frac(r0.xyzw);
  r0.xyzw = r0.xyzw * float4(2,2,2,2) + float4(-0.5,-0.5,-0.5,-0.5);
  r0.xyzw = frac(r0.xyzw);
  r0.xyzw = r0.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
  r2.xyzw = abs(r0.xyzw) * abs(r0.xyzw);
  r0.xyzw = -abs(r0.xyzw) * float4(2,2,2,2) + float4(3,3,3,3);
  r0.xyzw = r2.xyzw * r0.xyzw;
  r0.xy = r0.xz + r0.yw;
  r2.xyz = cb0[7].xyz * r0.yyy;
  r2.xyz = v4.yyy * r2.xyz;
  r3.y = v4.y * r0.y;
  r0.y = 0.100000001 * v5.y;
  r3.xz = v2.xz * r0.yy;
  r0.z = 0.300000012;
  r0.xyz = r0.xzx * r3.xyz + r2.xyz;
  r0.xyz = r0.xyz * cb0[7].www + r1.xyz;
  r0.xyz = v4.xxx * cb0[7].xyz + r0.xyz;
  r0.w = dot(cb4[10].xyz, r0.xyz);
  r0.w = cb4[10].w + r0.w;
  r1.xyz = -r0.www * cb4[10].xyz + r0.xyz;
  r0.xyz = -r1.xyz + r0.xyz;
  r0.xyz = cb4[11].xxx * r0.xyz + r1.xyz;
  r1.xyzw = cb3[1].xyzw * r0.yyyy;
  r1.xyzw = cb3[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb3[2].xyzw * r0.zzzz + r1.xyzw;
  r1.xyzw = cb3[3].xyzw + r1.xyzw;
  o0.xyzw = r1.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed --fxc /home/dss/fxc.exe 9bca77c39e8efb8b-vs_replace.txt
if (r1.w != 1.0) { r1.x += separation * (r1.w - convergence); }

  o1.xy = v3.xy * cb0[11].xy + cb0[11].zw;
  o2.xyz = float3(1,1,1);
  o2.w = v5.w;
  r2.xyz = cb3[17].xyz * cb2[0].yyy;
  r2.xyz = cb3[16].xyz * cb2[0].xxx + r2.xyz;
  r2.xyz = cb3[18].xyz * cb2[0].zzz + r2.xyz;
  r2.xyz = cb3[19].xyz * cb2[0].www + r2.xyz;
  r0.w = dot(v1.xyz, v1.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = v1.xyz * r0.www;
  r0.w = dot(v2.xyz, v2.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = v2.xyz * r0.www;
  r5.xyz = r4.zxy * r3.yzx;
  r5.xyz = r4.yzx * r3.zxy + -r5.xyz;
  r5.xyz = v1.www * r5.xyz;
  o3.y = dot(r5.xyz, r2.xyz);
  o3.x = dot(r3.xyz, r2.xyz);
  o3.z = dot(r4.xyz, r2.xyz);
  r2.xyz = cb3[20].www * r4.xyz;
  r6.xyz = cb3[13].xyz * r2.yyy;
  r2.xyw = cb3[12].xyz * r2.xxx + r6.xyz;
  r2.xyz = cb3[14].xyz * r2.zzz + r2.xyw;
  r2.w = 1;
  r6.x = dot(cb2[38].xyzw, r2.xyzw);
  r6.y = dot(cb2[39].xyzw, r2.xyzw);
  r6.z = dot(cb2[40].xyzw, r2.xyzw);
  r7.xyzw = r2.xyzz * r2.yzzx;
  r8.x = dot(cb2[41].xyzw, r7.xyzw);
  r8.y = dot(cb2[42].xyzw, r7.xyzw);
  r8.z = dot(cb2[43].xyzw, r7.xyzw);
  r6.xyz = r8.xyz + r6.xyz;
  r0.w = r2.y * r2.y;
  r0.w = r2.x * r2.x + -r0.w;
  o4.xyz = cb2[44].xyz * r0.www + r6.xyz;
  r2.xyz = cb3[17].xyz * _WorldSpaceCameraPos.yyy;
  r2.xyz = cb3[16].xyz * _WorldSpaceCameraPos.xxx + r2.xyz;
  r2.xyz = cb3[18].xyz * _WorldSpaceCameraPos.zzz + r2.xyz;
  r2.xyz = cb3[19].xyz + r2.xyz;
  r0.xyz = r2.xyz * cb3[20].www + -r0.xyz;
  o5.x = dot(r3.xyz, r0.xyz);
  o5.z = dot(r4.xyz, r0.xyz);
  o5.y = dot(r5.xyz, r0.xyz);
  r0.x = cb1[5].x * r1.y;
  r0.w = 0.5 * r0.x;
  r0.xz = float2(0.5,0.5) * r1.xw;
  o6.zw = r1.zw;
  o6.xy = r0.xw + r0.zz;
  return;
}

/****************************** COMPILE WARNINGS ******************************
C:\Steam\SteamApps\common\DreadOut\ShaderFixes\9bca77c39e8efb8b-vs_replace.txt(200,14-15): warning X3578: Output value 'o3' is not completely initialized
C:\Steam\SteamApps\common\DreadOut\ShaderFixes\9bca77c39e8efb8b-vs_replace.txt(201,14-15): warning X3578: Output value 'o4' is not completely initialized
C:\Steam\SteamApps\common\DreadOut\ShaderFixes\9bca77c39e8efb8b-vs_replace.txt(202,14-15): warning X3578: Output value 'o5' is not completely initialized

****************************** COMPILE WARNINGS ******************************/
