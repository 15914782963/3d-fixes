
cbuffer PER_BATCH : register(b0)
{
  float3 vfColGradDelta : packoffset(c0);
  float4 vfRampParams : packoffset(c1);
  float4 vfColGradRadial : packoffset(c2);
  float4 PS_NearFarClipDist : packoffset(c3);
  float4 vfColGradParams : packoffset(c4);
  float4 volFogShadowBufSampleOffsets[8] : packoffset(c5);
  float4 HDRParams2 : packoffset(c13);
  float4 PS_ScreenSize : packoffset(c14);
  float3 vfColGradBase : packoffset(c15);
  float4 vfParams : packoffset(c16);
  float3 vfSunDir : packoffset(c17);
  float4 vfViewPos : packoffset(c18);
}
SamplerState zMap_s : register(s0);
Texture2D<float4> zMap : register(t0);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = zMap.Sample(zMap_s, v1.xy).x;
  r0.y = r0.x * v2.z + vfViewPos.z;
  r0.xzw = v2.xyz * r0.xxx;
  r0.y = saturate(r0.y * vfColGradParams.x + vfColGradParams.y);
  r1.x = 2.000000000e+000 + -r0.y;
  r0.y = r1.x * r0.y;
  r1.xyz = r0.yyy * vfColGradDelta.xyz + vfColGradBase.xyz;
  r0.y = dot(r0.xzw, r0.xzw);
  r1.w = rsqrt(r0.y);
  r0.y = sqrt(r0.y);
  r2.xyz = r1.www * r0.xzw;
  r0.x = vfParams.x * r0.w;
  r0.z = dot(r2.xyz, vfSunDir.xyz);
  r0.z = r0.z * -vfColGradParams.z + vfColGradParams.z;
  r0.z = exp2(r0.z);
  r0.w = saturate(vfColGradRadial.w * r0.y);
  r0.w = log2(r0.w);
  r0.w = vfColGradParams.w * r0.w;
  r0.w = exp2(r0.w);
  r0.z = r0.w * r0.z;
  r1.xyz = r0.zzz * vfColGradRadial.xyz + r1.xyz;
  o0.xyz = HDRParams2.yyy * r1.xyz;
  r0.z = 1.442695022e+000 * r0.x;
  r0.z = exp2(r0.z);
  r0.z = -1.000000000e+000 + r0.z;
  r0.z = r0.z / r0.x;
  r0.x = 9.999999776e-003 < abs(r0.x);
  r0.x = r0.x ? r0.z : 1.000000000e+000;
  r0.z = vfParams.y * r0.y;
  r0.y = saturate(r0.y * vfRampParams.x + vfRampParams.y);
  r0.x = r0.x * r0.z;
  r0.x = exp2(-r0.x);
  r0.x = min(r0.x, 1.000000000e+000);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.z = 2.000000000e+000 + -r0.y;
  r0.y = r0.y * r0.z;
  r0.y = r0.y * vfRampParams.z + vfRampParams.w;
  r0.x = -r0.x * r0.y + 1.000000000e+000;
  r0.x = max(r0.x, vfParams.w);
  o0.w = 1.000000000e+000 + -r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 vfColGradDelta;             // Offset:    0 Size:    12
//   float4 vfRampParams;               // Offset:   16 Size:    16
//   float4 vfColGradRadial;            // Offset:   32 Size:    16
//   float4 PS_NearFarClipDist;         // Offset:   48 Size:    16 [unused]
//   float4 vfColGradParams;            // Offset:   64 Size:    16
//   float4 volFogShadowBufSampleOffsets[8];// Offset:   80 Size:   128 [unused]
//   float4 HDRParams2;                 // Offset:  208 Size:    16
//   float4 PS_ScreenSize;              // Offset:  224 Size:    16 [unused]
//   float3 vfColGradBase;              // Offset:  240 Size:    12
//   float4 vfParams;                   // Offset:  256 Size:    16
//   float3 vfSunDir;                   // Offset:  272 Size:    12
//   float4 vfViewPos;                  // Offset:  288 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// zMap                              sampler      NA          NA    0        1
// zMap                              texture  float4          2d    0        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[19], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
mad r0.y, r0.x, v2.z, cb0[18].z
mul r0.xzw, r0.xxxx, v2.xxyz
mad_sat r0.y, r0.y, cb0[4].x, cb0[4].y
add r1.x, -r0.y, l(2.000000)
mul r0.y, r0.y, r1.x
mad r1.xyz, r0.yyyy, cb0[0].xyzx, cb0[15].xyzx
dp3 r0.y, r0.xzwx, r0.xzwx
rsq r1.w, r0.y
sqrt r0.y, r0.y
mul r2.xyz, r0.xzwx, r1.wwww
mul r0.x, r0.w, cb0[16].x
dp3 r0.z, r2.xyzx, cb0[17].xyzx
mad r0.z, r0.z, -cb0[4].z, cb0[4].z
exp r0.z, r0.z
mul_sat r0.w, r0.y, cb0[2].w
log r0.w, r0.w
mul r0.w, r0.w, cb0[4].w
exp r0.w, r0.w
mul r0.z, r0.z, r0.w
mad r1.xyz, r0.zzzz, cb0[2].xyzx, r1.xyzx
mul o0.xyz, r1.xyzx, cb0[13].yyyy
mul r0.z, r0.x, l(1.442695)
exp r0.z, r0.z
add r0.z, r0.z, l(-1.000000)
div r0.z, r0.z, r0.x
lt r0.x, l(0.010000), |r0.x|
movc r0.x, r0.x, r0.z, l(1.000000)
mul r0.z, r0.y, cb0[16].y
mad_sat r0.y, r0.y, cb0[1].x, cb0[1].y
mul r0.x, r0.z, r0.x
exp r0.x, -r0.x
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
add r0.z, -r0.y, l(2.000000)
mul r0.y, r0.z, r0.y
mad r0.y, r0.y, cb0[1].z, cb0[1].w
mad r0.x, -r0.x, r0.y, l(1.000000)
max r0.x, r0.x, cb0[16].w
add o0.w, -r0.x, l(1.000000)
ret 
// Approximately 41 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 vfColGradDelta;             // Offset:    0 Size:    12
//   float4 vfRampParams;               // Offset:   16 Size:    16
//   float4 vfColGradRadial;            // Offset:   32 Size:    16
//   float4 PS_NearFarClipDist;         // Offset:   48 Size:    16 [unused]
//   float4 vfColGradParams;            // Offset:   64 Size:    16
//   float4 volFogShadowBufSampleOffsets[8];// Offset:   80 Size:   128 [unused]
//   float4 HDRParams2;                 // Offset:  208 Size:    16
//   float4 PS_ScreenSize;              // Offset:  224 Size:    16 [unused]
//   float3 vfColGradBase;              // Offset:  240 Size:    12
//   float4 vfParams;                   // Offset:  256 Size:    16
//   float3 vfSunDir;                   // Offset:  272 Size:    12
//   float4 vfViewPos;                  // Offset:  288 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// zMap_s                            sampler      NA          NA    0        1
// zMap                              texture  float4          2d    0        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[19], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
mad r0.y, r0.x, v2.z, cb0[18].z
mul r0.xzw, r0.xxxx, v2.xxyz
mad_sat r0.y, r0.y, cb0[4].x, cb0[4].y
add r1.x, -r0.y, l(2.000000)
mul r0.y, r0.y, r1.x
mad r1.xyz, r0.yyyy, cb0[0].xyzx, cb0[15].xyzx
dp3 r0.y, r0.xzwx, r0.xzwx
rsq r1.w, r0.y
sqrt r0.y, r0.y
mul r2.xyz, r0.xzwx, r1.wwww
mul r0.x, r0.w, cb0[16].x
dp3 r0.z, r2.xyzx, cb0[17].xyzx
mad r0.z, r0.z, -cb0[4].z, cb0[4].z
exp r0.z, r0.z
mul_sat r0.w, r0.y, cb0[2].w
log r0.w, r0.w
mul r0.w, r0.w, cb0[4].w
exp r0.w, r0.w
mul r0.z, r0.z, r0.w
mad r1.xyz, r0.zzzz, cb0[2].xyzx, r1.xyzx
mul o0.xyz, r1.xyzx, cb0[13].yyyy
mul r0.z, r0.x, l(1.442695)
exp r0.z, r0.z
add r0.z, r0.z, l(-1.000000)
div r0.z, r0.z, r0.x
lt r0.x, l(0.010000), |r0.x|
movc r0.x, r0.x, r0.z, l(1.000000)
mul r0.z, r0.y, cb0[16].y
mad_sat r0.y, r0.y, cb0[1].x, cb0[1].y
mul r0.x, r0.z, r0.x
exp r0.x, -r0.x
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
add r0.z, -r0.y, l(2.000000)
mul r0.y, r0.z, r0.y
mad r0.y, r0.y, cb0[1].z, cb0[1].w
mad r0.x, -r0.x, r0.y, l(1.000000)
max r0.x, r0.x, cb0[16].w
add o0.w, -r0.x, l(1.000000)
ret 
// Approximately 41 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
