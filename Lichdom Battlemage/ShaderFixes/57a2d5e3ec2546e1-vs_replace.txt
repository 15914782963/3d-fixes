cbuffer cb4 : register(b4)
{
  float4 cb4[5];
}


cbuffer PER_BATCH : register(b0)
{
  float4 vfColGradParams : packoffset(c0);
  float4 _WaveLevels : packoffset(c1);
  float4 _WaveVtxPhases : packoffset(c2);
  float4 AnimParams : packoffset(c3);
  float4 _WaveInfoX : packoffset(c4);
  float4 _InstancingParams : packoffset(c5);
  float4 _WaveAmp : packoffset(c6);
  float3 vfColGradDelta : packoffset(c7);
  float4 vfRampParams : packoffset(c8);
  float4 _WaveFreq : packoffset(c9);
  float4 vfColGradRadial : packoffset(c10);
  float3 vfColGradBase : packoffset(c11);
  float4 vfParams : packoffset(c12);
  float3 vfSunDir : packoffset(c13);
  float4 vfViewPos : packoffset(c14);
}

cbuffer STATIC_INSTANCE : register(b2)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
  float4 AmbientOp : packoffset(c5);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  float4 g_VS_NearFarClipDist : packoffset(c9);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

cbuffer PER_MATERIAL : register(b4)
{
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float4 __0TillingLayer0__1TillingLayer1__2SpeedLayer0__3SpeedLayer1 : packoffset(c4);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : COLOR0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = float3(0.000000e+000,1.000000e-006,0.000000e+000) + v3.zxy;
  r1.xyz = float3(0.000000e+000,0.000000e+000,-1.000000e-006) + v4.yzx;
  r0.xyz = r1.xyz * r0.xyz;
  r1.xyz = float3(0.000000e+000,0.000000e+000,1.000000e-006) + v3.yzx;
  r2.xyz = float3(0.000000e+000,-1.000000e-006,0.000000e+000) + v4.zxy;
  r0.xyz = r1.xyz * r2.xyz + -r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = v3.www * r0.xyz;
  r0.w = v0.x + v0.y;
  r0.w = v0.z + r0.w;
  r0.w = r0.w * _WaveInfoX.w + _WaveInfoX.x;
  r0.w = 3.141592503e+000 * r0.w;
  r0.w = sin(r0.w);
  r0.w = r0.w * _WaveInfoX.y + _WaveInfoX.z;
  r0.xyz = r0.xyz * r0.www + v0.xyz;
  r1.w = -g_VS_WorldViewPos.x + ObjWorldMatrix._m03;
  r1.xyz = ObjWorldMatrix._m00_m01_m02;
  r0.w = 1.000000000e+000;
  r1.x = dot(r1.xyzw, r0.xyzw);
  r2.w = -g_VS_WorldViewPos.y + ObjWorldMatrix._m13;
  r2.xyz = ObjWorldMatrix._m10_m11_m12;
  r1.y = dot(r2.xyzw, r0.xyzw);
  r2.w = -g_VS_WorldViewPos.z + ObjWorldMatrix._m23;
  r2.xyz = ObjWorldMatrix._m20_m21_m22;
  r1.z = dot(r2.xyzw, r0.xyzw);
  r1.w = 1.000000000e+000;
  r0.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r1.xyzw);
  r0.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r1.xyzw);
  r0.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r1.xyzw);
  r0.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r1.xyzw);
  o5.xyz = r1.xyz;
  o0.xyzw = r0.xyzw;
  r0.xy = r0.xy * float2(1.000000e+000,-1.000000e+000) + r0.ww;
  o4.xy = float2(5.000000e-001,5.000000e-001) * r0.xy;
  o4.zw = r0.zw;
  o5.w = g_VS_NearFarClipDist.w * r0.w;
  r0.xw = float2(0.000000e+000,0.000000e+000);
  r0.yz = cb4[4].zw * -AnimParams.xx;
  o1.xy = v1.xy * cb4[4].xx + r0.xy;
  o1.zw = v1.yx * cb4[4].yy + r0.zw;
  r0.xyz = float3(1.000000e-006,0.000000e+000,0.000000e+000) + v3.xyz;
  r1.x = dot(ObjWorldMatrix._m00_m01_m02, r0.xyz);
  r1.y = dot(ObjWorldMatrix._m10_m11_m12, r0.xyz);
  r1.z = dot(ObjWorldMatrix._m20_m21_m22, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  o2.xyz = r1.xyz * r0.xxx;
  o2.w = v3.w;
  r0.xyz = float3(-1.000000e-006,0.000000e+000,0.000000e+000) + v4.xyz;
  r1.x = dot(ObjWorldMatrix._m00_m01_m02, r0.xyz);
  r1.y = dot(ObjWorldMatrix._m10_m11_m12, r0.xyz);
  r1.z = dot(ObjWorldMatrix._m20_m21_m22, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  o3.xyz = r1.xyz * r0.xxx;
  o3.w = 0.000000000e+000;
  o6.xyzw = AmbientOp.xyzw;
  o7.w = AmbientOp.w * v2.w;
  o7.xyz = v2.zyx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 vfColGradParams;            // Offset:    0 Size:    16 [unused]
//   float4 _WaveLevels;                // Offset:   16 Size:    16 [unused]
//   float4 _WaveVtxPhases;             // Offset:   32 Size:    16 [unused]
//   float4 AnimParams;                 // Offset:   48 Size:    16
//   float4 _WaveInfoX;                 // Offset:   64 Size:    16
//   float4 _InstancingParams;          // Offset:   80 Size:    16 [unused]
//   float4 _WaveAmp;                   // Offset:   96 Size:    16 [unused]
//   float3 vfColGradDelta;             // Offset:  112 Size:    12 [unused]
//   float4 vfRampParams;               // Offset:  128 Size:    16 [unused]
//   float4 _WaveFreq;                  // Offset:  144 Size:    16 [unused]
//   float4 vfColGradRadial;            // Offset:  160 Size:    16 [unused]
//   float3 vfColGradBase;              // Offset:  176 Size:    12 [unused]
//   float4 vfParams;                   // Offset:  192 Size:    16 [unused]
//   float3 vfSunDir;                   // Offset:  208 Size:    12 [unused]
//   float4 vfViewPos;                  // Offset:  224 Size:    16 [unused]
//
// }
//
// cbuffer STATIC_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//   float4 AmbientOp;                  // Offset:   80 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   float4 g_VS_NearFarClipDist;       // Offset:  144 Size:    16
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float4 __0TillingLayer0__1TillingLayer1__2SpeedLayer0__3SpeedLayer1;// Offset:   64 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// STATIC_INSTANCE                   cbuffer      NA          NA    2        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// COLOR                    0   xyzw        7     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[5], immediateIndexed
dcl_constantbuffer cb2[6], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_constantbuffer cb4[5], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_temps 3
add r0.xyz, v3.zxyz, l(0.000000, 0.000001, 0.000000, 0.000000)
add r1.xyz, v4.yzxy, l(0.000000, 0.000000, -0.000001, 0.000000)
mul r0.xyz, r0.xyzx, r1.xyzx
add r1.xyz, v3.yzxy, l(0.000000, 0.000000, 0.000001, 0.000000)
add r2.xyz, v4.zxyz, l(0.000000, -0.000001, 0.000000, 0.000000)
mad r0.xyz, r1.xyzx, r2.xyzx, -r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.xyz, r0.xyzx, v3.wwww
add r0.w, v0.y, v0.x
add r0.w, r0.w, v0.z
mad r0.w, r0.w, cb0[4].w, cb0[4].x
mul r0.w, r0.w, l(3.141593)
sincos r0.w, null, r0.w
mad r0.w, r0.w, cb0[4].y, cb0[4].z
mad r0.xyz, r0.xyzx, r0.wwww, v0.xyzx
add r1.w, cb2[0].w, -cb3[6].x
mov r1.xyz, cb2[0].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r1.xyzw, r0.xyzw
add r2.w, cb2[1].w, -cb3[6].y
mov r2.xyz, cb2[1].xyzx
dp4 r1.y, r2.xyzw, r0.xyzw
add r2.w, cb2[2].w, -cb3[6].z
mov r2.xyz, cb2[2].xyzx
dp4 r1.z, r2.xyzw, r0.xyzw
mov r1.w, l(1.000000)
dp4 r0.x, cb3[10].xyzw, r1.xyzw
dp4 r0.y, cb3[11].xyzw, r1.xyzw
dp4 r0.z, cb3[12].xyzw, r1.xyzw
dp4 r0.w, cb3[13].xyzw, r1.xyzw
mov o5.xyz, r1.xyzx
mov o0.xyzw, r0.xyzw
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r0.wwww
mul o4.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o4.zw, r0.zzzw
mul o5.w, r0.w, cb3[9].w
mov r0.xw, l(0,0,0,0)
mul r0.yz, -cb0[3].xxxx, cb4[4].zzwz
mad o1.xy, v1.xyxx, cb4[4].xxxx, r0.xyxx
mad o1.zw, v1.yyyx, cb4[4].yyyy, r0.zzzw
add r0.xyz, v3.xyzx, l(0.000001, 0.000000, 0.000000, 0.000000)
dp3 r1.x, cb2[0].xyzx, r0.xyzx
dp3 r1.y, cb2[1].xyzx, r0.xyzx
dp3 r1.z, cb2[2].xyzx, r0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul o2.xyz, r0.xxxx, r1.xyzx
mov o2.w, v3.w
add r0.xyz, v4.xyzx, l(-0.000001, 0.000000, 0.000000, 0.000000)
dp3 r1.x, cb2[0].xyzx, r0.xyzx
dp3 r1.y, cb2[1].xyzx, r0.xyzx
dp3 r1.z, cb2[2].xyzx, r0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul o3.xyz, r0.xxxx, r1.xyzx
mov o3.w, l(0)
mov o6.xyzw, cb2[5].xyzw
mul o7.w, v2.w, cb2[5].w
mov o7.xyz, v2.zyxz
ret 
// Approximately 62 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.26 on Mon Jul 06 05:21:47 2015
//
//
// Buffer Definitions: 
//
// cbuffer cb4
// {
//
//   float4 cb4[5];                     // Offset:    0 Size:    80
//
// }
//
// cbuffer PER_BATCH
// {
//
//   float4 vfColGradParams;            // Offset:    0 Size:    16 [unused]
//   float4 _WaveLevels;                // Offset:   16 Size:    16 [unused]
//   float4 _WaveVtxPhases;             // Offset:   32 Size:    16 [unused]
//   float4 AnimParams;                 // Offset:   48 Size:    16
//   float4 _WaveInfoX;                 // Offset:   64 Size:    16
//   float4 _InstancingParams;          // Offset:   80 Size:    16 [unused]
//   float4 _WaveAmp;                   // Offset:   96 Size:    16 [unused]
//   float3 vfColGradDelta;             // Offset:  112 Size:    12 [unused]
//   float4 vfRampParams;               // Offset:  128 Size:    16 [unused]
//   float4 _WaveFreq;                  // Offset:  144 Size:    16 [unused]
//   float4 vfColGradRadial;            // Offset:  160 Size:    16 [unused]
//   float3 vfColGradBase;              // Offset:  176 Size:    12 [unused]
//   float4 vfParams;                   // Offset:  192 Size:    16 [unused]
//   float3 vfSunDir;                   // Offset:  208 Size:    12 [unused]
//   float4 vfViewPos;                  // Offset:  224 Size:    16 [unused]
//
// }
//
// cbuffer STATIC_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//   float4 AmbientOp;                  // Offset:   80 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   float4 g_VS_NearFarClipDist;       // Offset:  144 Size:    16
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// STATIC_INSTANCE                   cbuffer      NA          NA    2        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// cb4                               cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// COLOR                    0   xyzw        7     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb4[5], immediateIndexed
dcl_constantbuffer cb0[5], immediateIndexed
dcl_constantbuffer cb2[6], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_temps 5
add r0.w, cb2[0].w, -cb3[6].x
mov r0.xyz, cb2[0].xyzx
add r1.x, v0.y, v0.x
add r1.x, r1.x, v0.z
mad r1.x, r1.x, cb0[4].w, cb0[4].x
mul r1.x, r1.x, l(3.141593)
sincos r1.x, null, r1.x
mad r1.x, r1.x, cb0[4].y, cb0[4].z
add r1.yzw, v3.xxyz, l(0.000000, 0.000001, 0.000000, 0.000000)
add r2.xyz, v4.xyzx, l(-0.000001, 0.000000, 0.000000, 0.000000)
mul r3.xyz, r1.wyzw, r2.yzxy
mad r3.xyz, r1.zwyz, r2.zxyz, -r3.xyzx
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx
mul r3.xyz, r3.xyzx, v3.wwww
mad r3.xyz, r3.xyzx, r1.xxxx, v0.xyzx
mov r3.w, l(1.000000)
dp4 r0.x, r0.xyzw, r3.xyzw
add r4.w, cb2[1].w, -cb3[6].y
mov r4.xyz, cb2[1].xyzx
dp4 r0.y, r4.xyzw, r3.xyzw
add r4.w, cb2[2].w, -cb3[6].z
mov r4.xyz, cb2[2].xyzx
dp4 r0.z, r4.xyzw, r3.xyzw
mov r0.w, l(1.000000)
dp4 r3.x, cb3[10].xyzw, r0.xyzw
dp4 r3.y, cb3[11].xyzw, r0.xyzw
dp4 r3.z, cb3[12].xyzw, r0.xyzw
dp4 r3.w, cb3[13].xyzw, r0.xyzw
mov o5.xyz, r0.xyzx
mov o0.xyzw, r3.xyzw
mad r0.xy, r3.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r3.wwww
mul o4.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o4.zw, r3.zzzw
mul o5.w, r3.w, cb3[9].w
mul r0.xy, cb4[4].zwzz, -cb0[3].xxxx
mov r0.z, l(0)
mad o1.xyzw, v1.xyyx, cb4[4].xxyy, r0.zxyz
dp3 r0.x, cb2[0].xyzx, r1.yzwy
dp3 r0.y, cb2[1].xyzx, r1.yzwy
dp3 r0.z, cb2[2].xyzx, r1.yzwy
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul o2.xyz, r0.wwww, r0.xyzx
mov o2.w, v3.w
dp3 r0.x, cb2[0].xyzx, r2.xyzx
dp3 r0.y, cb2[1].xyzx, r2.xyzx
dp3 r0.z, cb2[2].xyzx, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul o3.xyz, r0.wwww, r0.xyzx
mov o3.w, l(0)
mov o6.xyzw, cb2[5].xyzw
mul o7.w, v2.w, cb2[5].w
mov o7.xyz, v2.zyxz
ret 
// Approximately 57 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
