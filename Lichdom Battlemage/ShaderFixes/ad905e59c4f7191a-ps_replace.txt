// Subtle halo in sky / snow bump map

cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 vWBasisX : packoffset(c2);
  float4 vWBasisY : packoffset(c3);
  float4 vWBasisZ : packoffset(c4);
  float4 irreg_kernel_2d[8] : packoffset(c5);
  float4 PS_NearFarClipDist : packoffset(c13);
  float4 PS_ScreenSize : packoffset(c14);
  float4 SSDOParams : packoffset(c15);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
SamplerState _tex8_s : register(s8);
SamplerState _texA_s : register(s10);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);
Texture2D<float4> _tex8 : register(t8);
Texture2D<float4> _texA : register(t10);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,

row_major matrix vp : TEXCOORD2,
row_major matrix ivp : TEXCOORD6

  )
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

// Adjust located _tex0 is sampled to remove subtle halo in sky. Can't just
// adjust v1 - doing so breaks snow:

float4 stereo = StereoParams.Load(0);
float4 adj = v1;
adj.x += stereo.x * (adj.w - stereo.y) / 2;

  r0.x = _tex0.Sample(_tex0_s, adj.xy).x;
  r0.yzw = v2.xyz * r0.xxx;
  r1.xyz = -r0.xxx * v2.xyz + g_LightPos.xyz;
  r2.xyz = g_LightPos.www * r1.xyz;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.x = max(r0.x, 0.000000000e+000);
  r0.x = r0.x * r0.x;
  r2.xyz = _tex1.Sample(_tex1_s, v1.xy).xyz;
  r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r1.w = _texA.Sample(_texA_s, v1.xy).y;
  r2.w = dot(r1.xyz, r1.xyz);
  r2.w = rsqrt(r2.w);
  r3.xyz = r2.www * r1.xyz;
  r1.x = saturate(dot(r3.xyz, r2.xyz));
  r1.xyz = g_LightDiffuse.xyz * r1.xxx;
  r1.xyz = r1.xyz * r0.xxx;
  r4.xyzw = _tex8.Sample(_tex8_s, v1.xy).xyzw;
  r3.w = 2.820900083e-001;
  r4.xyzw = r4.xyzw * float4(9.772000e-001,9.772000e-001,9.772000e-001,1.000000e+000) + float4(-4.886000e-001,-4.886000e-001,-4.886000e-001,0.000000e+000);
  r0.x = dot(r3.xyzw, r4.xyzw);
  r0.x = saturate(SSDOParams.x * r0.x);
  r0.x = 1.000000000e+000 + -r0.x;
  r1.xyz = r1.xyz * r0.xxx;
  r0.x = dot(-r0.yzw, -r0.yzw);
  r0.x = rsqrt(r0.x);
  r0.xyz = -r0.yzw * r0.xxx + r3.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = r1.w * 1.000000000e+001 + 1.000000000e+000;
  r0.w = exp2(r0.w);
  r1.w = r0.w * 1.250000000e-001 + 2.500000000e-001;
  r0.x = saturate(dot(r2.xyz, r0.xyz));
  r0.x = log2(r0.x);
  r0.x = r0.w * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r1.w * r0.x;
  r0.yzw = g_LightDiffuse.www * r1.xyz;
  r0.xyz = r0.yzw * r0.xxx;
  r0.w = dot(r1.xyz, float3(1.000000e+000,1.000000e+000,1.000000e+000));
  r0.w = abs(r0.w) < 9.999999975e-007;
  r1.w = dot(r0.xyz, float3(1.000000e+000,1.000000e+000,1.000000e+000));
  r1.w = abs(r1.w) < 9.999999975e-007;
  r0.w = r0.w ? r1.w : 0;
  if (r0.w != 0) discard;
  o0.xyz = r1.xyz;
  o0.w = 0.000000000e+000;
  o1.xyz = r0.xyz;
  o1.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 vWBasisX;                   // Offset:   32 Size:    16 [unused]
//   float4 vWBasisY;                   // Offset:   48 Size:    16 [unused]
//   float4 vWBasisZ;                   // Offset:   64 Size:    16 [unused]
//   float4 irreg_kernel_2d[8];         // Offset:   80 Size:   128 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  208 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:  224 Size:    16 [unused]
//   float4 SSDOParams;                 // Offset:  240 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex1                             sampler      NA          NA    1        1
// _tex8                             sampler      NA          NA    8        1
// _texA                             sampler      NA          NA   10        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _tex8                             texture  float4          2d    8        1
// _texA                             texture  float4          2d   10        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[16], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s8, mode_default
dcl_sampler s10, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
mul r0.yzw, r0.xxxx, v2.xxyz
mad r1.xyz, -r0.xxxx, v2.xyzx, cb0[0].xyzx
mul r2.xyz, r1.xyzx, cb0[0].wwww
dp3 r0.x, r2.xyzx, r2.xyzx
add r0.x, -r0.x, l(1.000000)
max r0.x, r0.x, l(0.000000)
mul r0.x, r0.x, r0.x
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t1.xyzw, s1
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.w, v1.xyxx, t10.xzwy, s10
dp3 r2.w, r1.xyzx, r1.xyzx
rsq r2.w, r2.w
mul r3.xyz, r1.xyzx, r2.wwww
dp3_sat r1.x, r3.xyzx, r2.xyzx
mul r1.xyz, r1.xxxx, cb0[1].xyzx
mul r1.xyz, r0.xxxx, r1.xyzx
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t8.xyzw, s8
mov r3.w, l(0.282090)
mad r4.xyzw, r4.xyzw, l(0.977200, 0.977200, 0.977200, 1.000000), l(-0.488600, -0.488600, -0.488600, 0.000000)
dp4 r0.x, r3.xyzw, r4.xyzw
mul_sat r0.x, r0.x, cb0[15].x
add r0.x, -r0.x, l(1.000000)
mul r1.xyz, r0.xxxx, r1.xyzx
dp3 r0.x, -r0.yzwy, -r0.yzwy
rsq r0.x, r0.x
mad r0.xyz, -r0.yzwy, r0.xxxx, r3.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mad r0.w, r1.w, l(10.000000), l(1.000000)
exp r0.w, r0.w
mad r1.w, r0.w, l(0.125000), l(0.250000)
dp3_sat r0.x, r2.xyzx, r0.xyzx
log r0.x, r0.x
mul r0.x, r0.x, r0.w
exp r0.x, r0.x
mul r0.x, r0.x, r1.w
mul r0.yzw, r1.xxyz, cb0[1].wwww
mul r0.xyz, r0.xxxx, r0.yzwy
dp3 r0.w, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r0.w, |r0.w|, l(0.000001)
dp3 r1.w, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r1.w, |r1.w|, l(0.000001)
and r0.w, r0.w, r1.w
discard_nz r0.w
mov o0.xyz, r1.xyzx
mov o0.w, l(0)
mov o1.xyz, r0.xyzx
mov o1.w, l(0)
ret 
// Approximately 54 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 vWBasisX;                   // Offset:   32 Size:    16 [unused]
//   float4 vWBasisY;                   // Offset:   48 Size:    16 [unused]
//   float4 vWBasisZ;                   // Offset:   64 Size:    16 [unused]
//   float4 irreg_kernel_2d[8];         // Offset:   80 Size:   128 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  208 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:  224 Size:    16 [unused]
//   float4 SSDOParams;                 // Offset:  240 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0_s                           sampler      NA          NA    0        1
// _tex1_s                           sampler      NA          NA    1        1
// _tex8_s                           sampler      NA          NA    8        1
// _texA_s                           sampler      NA          NA   10        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _tex8                             texture  float4          2d    8        1
// _texA                             texture  float4          2d   10        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[16], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s8, mode_default
dcl_sampler s10, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
mul r0.yzw, r0.xxxx, v2.xxyz
mad r1.xyz, -r0.xxxx, v2.xyzx, cb0[0].xyzx
mul r2.xyz, r1.xyzx, cb0[0].wwww
dp3 r0.x, r2.xyzx, r2.xyzx
add r0.x, -r0.x, l(1.000000)
max r0.x, r0.x, l(0.000000)
mul r0.x, r0.x, r0.x
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t1.xyzw, s1
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.w, v1.xyxx, t10.xzwy, s10
dp3 r2.w, r1.xyzx, r1.xyzx
rsq r2.w, r2.w
mul r3.xyz, r1.xyzx, r2.wwww
dp3_sat r1.x, r3.xyzx, r2.xyzx
mul r1.xyz, r1.xxxx, cb0[1].xyzx
mul r1.xyz, r0.xxxx, r1.xyzx
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t8.xyzw, s8
mad r4.xyzw, r4.xyzw, l(0.977200, 0.977200, 0.977200, 1.000000), l(-0.488600, -0.488600, -0.488600, 0.000000)
mov r3.w, l(0.282090)
dp4 r0.x, r3.xyzw, r4.xyzw
mul_sat r0.x, r0.x, cb0[15].x
add r0.x, -r0.x, l(1.000000)
mul r1.xyz, r0.xxxx, r1.xyzx
dp3 r0.x, -r0.yzwy, -r0.yzwy
rsq r0.x, r0.x
mad r0.xyz, -r0.yzwy, r0.xxxx, r3.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mad r0.w, r1.w, l(10.000000), l(1.000000)
exp r0.w, r0.w
mad r1.w, r0.w, l(0.125000), l(0.250000)
dp3_sat r0.x, r2.xyzx, r0.xyzx
log r0.x, r0.x
mul r0.x, r0.x, r0.w
exp r0.x, r0.x
mul r0.x, r0.x, r1.w
mul r0.yzw, r1.xxyz, cb0[1].wwww
mul r0.xyz, r0.xxxx, r0.yzwy
dp3 r0.w, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r0.w, |r0.w|, l(0.000001)
dp3 r1.w, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r1.w, |r1.w|, l(0.000001)
and r0.w, r0.w, r1.w
discard_nz r0.w
mov o0.xyz, r1.xyzx
mov o0.w, l(0)
mov o1.xyz, r0.xyzx
mov o1.w, l(0)
ret 
// Approximately 54 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
