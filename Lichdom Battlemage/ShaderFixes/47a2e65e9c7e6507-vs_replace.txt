cbuffer cb4 : register(b4)
{
  float4 cb4[11];
}


cbuffer PER_INSTANCE : register(b1)
{
  row_major float4x4 _TCMMatrixCustom : packoffset(c0);
  float4 HMAGradients : packoffset(c4);
}

cbuffer STATIC_INSTANCE : register(b2)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
  float4 AmbientObjectCol : packoffset(c4);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_SunLightDir : packoffset(c4);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

cbuffer PER_MATERIAL : register(b4)
{
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float3 __0CapOpacityFalloff__1BackViewDep__2BackDiffuseMultiplier__3 : packoffset(c4);
  float4 BackDiffuse : packoffset(c6);
  float4 VNE_Origin : packoffset(c10);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : COLOR0,
  out float4 o6 : TEXCOORD4)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = float3(0.000000e+000,1.000000e-006,0.000000e+000) + v3.zxy;
  r1.xyz = float3(0.000000e+000,0.000000e+000,-1.000000e-006) + v4.yzx;
  r0.xyz = r1.xyz * r0.xyz;
  r1.xyz = float3(0.000000e+000,0.000000e+000,1.000000e-006) + v3.yzx;
  r2.xyz = float3(0.000000e+000,-1.000000e-006,0.000000e+000) + v4.zxy;
  r0.xyz = r1.xyz * r2.xyz + -r0.xyz;
  r0.z = dot(r0.xyz, r0.xyz);
  r0.z = rsqrt(r0.z);
  r0.xy = r0.xy * r0.zz;
  r0.xy = v3.ww * r0.xy;
  r0.z = cb4[2].y * v2.z;
  r0.xy = r0.zz * r0.xy;
  r0.w = 1.000000000e+000 + -v2.x;
  r0.z = cb4[2].z * r0.w;
  r1.x = -g_VS_WorldViewPos.x + ObjWorldMatrix._m03;
  r1.y = -g_VS_WorldViewPos.y + ObjWorldMatrix._m13;
  r1.w = -g_VS_WorldViewPos.z + ObjWorldMatrix._m23;
  r2.xyz = g_VS_WorldViewPos.xyz + r1.xyw;
  r0.w = dot(r2.xyz, float3(2.000000e+000,2.000000e+000,2.000000e+000));
  r2.y = v2.y + r0.w;
  r2.x = dot(v0.xyz, r2.yyy);
  r2.xyzw = g_VS_AnimGenParams.zzzz + r2.xxyy;
  r2.xyzw = float4(1.975000e+000,7.930000e-001,3.750000e-001,1.930000e-001) * r2.xyzw;
  r2.xyzw = frac(r2.xyzw);
  r2.xyzw = r2.xyzw * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.xyzw = cb4[2].xxxx * r2.xyzw;
  r2.xyzw = r2.xyzw * BendInfo.wwww + float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001);
  r2.xyzw = frac(r2.xyzw);
  r2.xyzw = r2.xyzw * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.xyz = abs(r2.xxz) + abs(r2.yyw);
  r0.xyz = r2.xyz * r0.xyz + v0.xyz;
  r0.w = r0.z * r0.z;
  r2.xy = BendInfo.xy * r0.ww + r0.xy;
  r2.z = r0.z;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.y = dot(r2.xyz, r2.xyz);
  r0.y = rsqrt(r0.y);
  r0.yzw = r2.xyz * r0.yyy;
  r0.xyz = r0.yzw * r0.xxx;
  r2.x = abs(ObjWorldMatrix._m00) + abs(ObjWorldMatrix._m01);
  r2.x = abs(ObjWorldMatrix._m02) + r2.x;
  r3.xyz = r0.xyz * r2.xxx + r1.xyw;
  r2.xy = r2.xx * r0.xy;
  r4.w = r1.x;
  r5.w = r1.y;
  r2.zw = r2.xy * r2.xy;
  r2.x = dot(r2.xyzw, HMAGradients.xyzw);
  r3.z = r3.z + r2.x;
  r3.w = 1.000000000e+000;
  r2.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r3.xyzw);
  r2.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r3.xyzw);
  r2.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r3.xyzw);
  r2.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r3.xyzw);
  o0.xyzw = r2.xyzw;

float4 stereo = StereoParams.Load(0);
r2.x += stereo.x * (r2.w - stereo.y);

  r2.xy = r2.xy * float2(1.000000e+000,-1.000000e+000) + r2.ww;
  o2.zw = r2.zw;
  o2.xy = float2(5.000000e-001,5.000000e-001) * r2.xy;
  o1.xy = v1.xy;
  o1.zw = float2(0.000000e+000,0.000000e+000);
  r4.xyz = ObjWorldMatrix._m00_m01_m02;
  r0.w = 1.000000000e+000;
  r2.x = dot(r4.xyzw, r0.xyzw);
  r5.xyz = ObjWorldMatrix._m10_m11_m12;
  r2.y = dot(r5.xyzw, r0.xyzw);
  r1.xyz = ObjWorldMatrix._m20_m21_m22;
  r2.z = dot(r1.xyzw, r0.xyzw);
  o3.xyz = r2.xyz;
  o3.w = 0.000000000e+000;
  r0.xyz = cb4[6].xyz * cb4[4].zzz;
  o4.xyz = AmbientObjectCol.www * r0.xyz;
  o4.w = 0.000000000e+000;
  r0.x = dot(-r2.xyz, -r2.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = -r2.xyz * r0.xxx;
  r1.xyz = float3(1.000000e-006,0.000000e+000,0.000000e+000) + v3.xyz;
  r2.y = dot(ObjWorldMatrix._m00_m01_m02, r1.xyz);
  r2.z = dot(ObjWorldMatrix._m10_m11_m12, r1.xyz);
  r2.x = dot(ObjWorldMatrix._m20_m21_m22, r1.xyz);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r2.xyz * r0.www;
  r2.xyz = float3(-1.000000e-006,0.000000e+000,0.000000e+000) + v4.xyz;
  r3.z = dot(ObjWorldMatrix._m00_m01_m02, r2.xyz);
  r3.x = dot(ObjWorldMatrix._m10_m11_m12, r2.xyz);
  r3.y = dot(ObjWorldMatrix._m20_m21_m22, r2.xyz);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r3.xyz * r0.www;
  r3.xyz = r2.xyz * r1.xyz;
  r1.xyz = r1.zxy * r2.yzx + -r3.xyz;
  r1.xyz = v3.www * r1.xyz;
  r0.x = dot(r0.xyz, r1.xyz);
  r0.x = 1.000000015e-001 + r0.x;
  r0.x = min(1.000000000e+000, r0.x);
  r0.x = r1.z * r0.x;
  o5.z = r0.x * 2.500000000e-001 + 7.500000000e-001;
  o5.w = AmbientObjectCol.x * v2.w;
  o5.xy = AmbientObjectCol.wy;
  r0.xyz = _TCMMatrixCustom._m10_m11_m12 * v0.yyy;
  r0.xyz = v0.xxx * _TCMMatrixCustom._m00_m01_m02 + r0.xyz;
  r0.xyz = v0.zzz * _TCMMatrixCustom._m20_m21_m22 + r0.xyz;
  o6.xyz = _TCMMatrixCustom._m30_m31_m32 + r0.xyz;
  r0.xyz = -cb4[10].xyz + v0.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  o6.w = sqrt(r0.x);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.1.26 on Tue Jul 07 23:55:28 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float4x4 _TCMMatrixCustom;// Offset:    0 Size:    64
//   float4 HMAGradients;               // Offset:   64 Size:    16
//
// }
//
// cbuffer STATIC_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16
//   float4 AmbientObjectCol;           // Offset:   64 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_SunLightDir;           // Offset:   64 Size:    16 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float3 __0CapOpacityFalloff__1BackViewDep__2BackDiffuseMultiplier__3;// Offset:   64 Size:    12
//   float4 BackDiffuse;                // Offset:   96 Size:    16
//   float4 VNE_Origin;                 // Offset:  160 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// STATIC_INSTANCE                   cbuffer      NA          NA    2        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// COLOR                    0   xyzw        5     NONE   float   xyzw
// TEXCOORD                 4   xyzw        6     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[5], immediateIndexed
dcl_constantbuffer cb2[5], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_constantbuffer cb4[11], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_temps 6
add r0.xyz, v3.zxyz, l(0.000000, 0.000001, 0.000000, 0.000000)
add r1.xyz, v4.yzxy, l(0.000000, 0.000000, -0.000001, 0.000000)
mul r0.xyz, r0.xyzx, r1.xyzx
add r1.xyz, v3.yzxy, l(0.000000, 0.000000, 0.000001, 0.000000)
add r2.xyz, v4.zxyz, l(0.000000, -0.000001, 0.000000, 0.000000)
mad r0.xyz, r1.xyzx, r2.xyzx, -r0.xyzx
dp3 r0.z, r0.xyzx, r0.xyzx
rsq r0.z, r0.z
mul r0.xy, r0.zzzz, r0.xyxx
mul r0.xy, r0.xyxx, v3.wwww
mul r0.z, v2.z, cb4[2].y
mul r0.xy, r0.xyxx, r0.zzzz
add r0.w, -v2.x, l(1.000000)
mul r0.z, r0.w, cb4[2].z
add r1.x, cb2[0].w, -cb3[6].x
add r1.y, cb2[1].w, -cb3[6].y
add r1.w, cb2[2].w, -cb3[6].z
add r2.xyz, r1.xywx, cb3[6].xyzx
dp3 r0.w, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
add r2.y, r0.w, v2.y
dp3 r2.x, v0.xyzx, r2.yyyy
add r2.xyzw, r2.xxyy, cb3[8].zzzz
mul r2.xyzw, r2.xyzw, l(1.975000, 0.793000, 0.375000, 0.193000)
frc r2.xyzw, r2.xyzw
mad r2.xyzw, r2.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r2.xyzw, r2.xyzw, cb4[2].xxxx
mad r2.xyzw, r2.xyzw, cb2[3].wwww, l(0.500000, 0.500000, 0.500000, 0.500000)
frc r2.xyzw, r2.xyzw
mad r2.xyzw, r2.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
add r2.xyz, |r2.yywy|, |r2.xxzx|
mad r0.xyz, r2.xyzx, r0.xyzx, v0.xyzx
mul r0.w, r0.z, r0.z
mad r2.xy, cb2[3].xyxx, r0.wwww, r0.xyxx
mov r2.z, r0.z
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
dp3 r0.y, r2.xyzx, r2.xyzx
rsq r0.y, r0.y
mul r0.yzw, r0.yyyy, r2.xxyz
mul r0.xyz, r0.xxxx, r0.yzwy
add r2.x, |cb2[0].y|, |cb2[0].x|
add r2.x, r2.x, |cb2[0].z|
mad r3.xyz, r0.xyzx, r2.xxxx, r1.xywx
mul r2.xy, r0.xyxx, r2.xxxx
mov r4.w, r1.x
mov r5.w, r1.y
mul r2.zw, r2.xxxy, r2.xxxy
dp4 r2.x, r2.xyzw, cb1[4].xyzw
add r3.z, r2.x, r3.z
mov r3.w, l(1.000000)
dp4 r2.x, cb3[10].xyzw, r3.xyzw
dp4 r2.y, cb3[11].xyzw, r3.xyzw
dp4 r2.z, cb3[12].xyzw, r3.xyzw
dp4 r2.w, cb3[13].xyzw, r3.xyzw
mov o0.xyzw, r2.xyzw
mad r2.xy, r2.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r2.wwww
mov o2.zw, r2.zzzw
mul o2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.xy, v1.xyxx
mov o1.zw, l(0,0,0,0)
mov r4.xyz, cb2[0].xyzx
mov r0.w, l(1.000000)
dp4 r2.x, r4.xyzw, r0.xyzw
mov r5.xyz, cb2[1].xyzx
dp4 r2.y, r5.xyzw, r0.xyzw
mov r1.xyz, cb2[2].xyzx
dp4 r2.z, r1.xyzw, r0.xyzw
mov o3.xyz, r2.xyzx
mov o3.w, l(0)
mul r0.xyz, cb4[4].zzzz, cb4[6].xyzx
mul o4.xyz, r0.xyzx, cb2[4].wwww
mov o4.w, l(0)
dp3 r0.x, -r2.xyzx, -r2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, -r2.xyzx
add r1.xyz, v3.xyzx, l(0.000001, 0.000000, 0.000000, 0.000000)
dp3 r2.y, cb2[0].xyzx, r1.xyzx
dp3 r2.z, cb2[1].xyzx, r1.xyzx
dp3 r2.x, cb2[2].xyzx, r1.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r2.xyzx
add r2.xyz, v4.xyzx, l(-0.000001, 0.000000, 0.000000, 0.000000)
dp3 r3.z, cb2[0].xyzx, r2.xyzx
dp3 r3.x, cb2[1].xyzx, r2.xyzx
dp3 r3.y, cb2[2].xyzx, r2.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r3.xyzx
mul r3.xyz, r1.xyzx, r2.xyzx
mad r1.xyz, r1.zxyz, r2.yzxy, -r3.xyzx
mul r1.xyz, r1.xyzx, v3.wwww
dp3 r0.x, r0.xyzx, r1.xyzx
add r0.x, r0.x, l(0.100000)
min r0.x, r0.x, l(1.000000)
mul r0.x, r0.x, r1.z
mad o5.z, r0.x, l(0.250000), l(0.750000)
mul o5.w, v2.w, cb2[4].x
mov o5.xy, cb2[4].wyww
mul r0.xyz, v0.yyyy, cb1[1].xyzx
mad r0.xyz, v0.xxxx, cb1[0].xyzx, r0.xyzx
mad r0.xyz, v0.zzzz, cb1[2].xyzx, r0.xyzx
add o6.xyz, r0.xyzx, cb1[3].xyzx
add r0.xyz, v0.xyzx, -cb4[10].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt o6.w, r0.x
ret 
// Approximately 107 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
