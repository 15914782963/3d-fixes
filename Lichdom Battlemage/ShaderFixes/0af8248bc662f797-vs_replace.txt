
cbuffer PER_BATCH : register(b0)
{
  float3 vfColGradDelta : packoffset(c0);
  float4 vfRampParams : packoffset(c1);
  float4 vfColGradRadial : packoffset(c2);
  float4 vfColGradParams : packoffset(c3);
  float3 vfColGradBase : packoffset(c4);
  float4 vfParams : packoffset(c5);
  float3 vfSunDir : packoffset(c6);
  float4 vfViewPos : packoffset(c7);
}

cbuffer PER_INSTANCE : register(b1)
{
  float4 TexTileSize : packoffset(c0);
  float4 ParticleParams[2] : packoffset(c1);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
}

cbuffer PER_MATERIAL : register(b4)
{
  float4 MatDifColor : packoffset(c0);
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float __0SoftParticlesScale__1__2__3 : packoffset(c5);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : COLOR1,
  float3 v3 : TEXCOORD0,
  float3 v4 : TEXCOORD1,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : COLOR0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v2.zy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.y = v2.w * r0.y;
  r0.yzw = v4.xyz * r0.yyy;
  r0.xyz = v3.xyz * r0.xxx + r0.yzw;
  r1.xyz = v0.xyz + r0.xyz;
  r1.w = v0.w;
  r2.x = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, r1.xyzw);
  r2.y = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, r1.xyzw);
  r2.z = dot(g_VS_ViewProjMatr._m20_m21_m22_m23, r1.xyzw);
  r2.w = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, r1.xyzw);
  o0.xyzw = r2.xyzw;
  r2.xy = r2.xy * float2(1.000000e+000,-1.000000e+000) + r2.ww;
  o5.zw = r2.zw;
  o5.xy = float2(5.000000e-001,5.000000e-001) * r2.xy;
  r0.w = TexTileSize.y * v2.y;
  r1.w = v2.x * TexTileSize.z + TexTileSize.w;
  r2.x = floor(r1.w);
  o1.z = r1.w;
  r1.w = TexTileSize.x * r2.x;
  r2.x = floor(r1.w);
  r1.w = frac(r1.w);
  o1.x = v2.z * TexTileSize.x + r1.w;
  o1.y = r2.x * TexTileSize.y + r0.w;
  o1.w = 0.000000000e+000;
  r2.xyz = vfViewPos.xyz + -r1.xyz;
  o4.xyz = r1.xyz;
  r0.w = dot(r2.xyz, r0.xyz);
  r1.xyz = r2.xyz * r0.www;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.xyz = r0.xyz * r0.www + -r1.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = v4.zxy * v3.yzx;
  r1.xyz = v4.yzx * v3.zxy + -r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r1.xyz * r0.www;
  r0.w = dot(r3.xyz, r2.xyz);
  r0.w = r0.w < 0.000000000e+000;
  r2.xyz = r0.www ? -r3.xyz : r3.xyz;
  r0.w = 0.000000e+000 != ParticleParams[0].w;
  o2.xyz = r0.www ? r0.xyz : r2.xyz;
  r2.xyz = r1.yzx * r0.xyz;
  r2.xyz = r1.xyz * r0.yzx + -r2.xyz;
  r0.x = dot(r1.xyz, r0.xyz);
  r1.xyz = v4.yzx * r2.xyz;
  r1.xyz = r2.zxy * v4.zxy + -r1.xyz;
  r1.xyz = v4.xyz * r0.xxx + r1.xyz;
  r1.xyz = r0.www ? r1.xyz : v4.xyz;
  o2.w = r1.x;
  r3.xyz = v3.yzx * r2.xyz;
  r2.xyz = r2.zxy * v3.zxy + -r3.xyz;
  r0.xyz = v3.xyz * r0.xxx + r2.xyz;
  o3.xyz = r0.www ? r0.xyz : v3.xyz;
  o3.w = r1.y;
  o4.w = r1.z;
  o6.w = ParticleParams[0].x * v1.w;
  o6.xyz = MatDifColor.xyz * v1.zyx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 vfColGradDelta;             // Offset:    0 Size:    12 [unused]
//   float4 vfRampParams;               // Offset:   16 Size:    16 [unused]
//   float4 vfColGradRadial;            // Offset:   32 Size:    16 [unused]
//   float4 vfColGradParams;            // Offset:   48 Size:    16 [unused]
//   float3 vfColGradBase;              // Offset:   64 Size:    12 [unused]
//   float4 vfParams;                   // Offset:   80 Size:    16 [unused]
//   float3 vfSunDir;                   // Offset:   96 Size:    12 [unused]
//   float4 vfViewPos;                  // Offset:  112 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 TexTileSize;                // Offset:    0 Size:    16
//   float4 ParticleParams[2];          // Offset:   16 Size:    32
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16 [unused]
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatDifColor;                // Offset:    0 Size:    16
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float __0SoftParticlesScale__1__2__3;// Offset:   80 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyz         3     NONE   float   xyz 
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// COLOR                    0   xyzw        6     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[2], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyz
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_temps 4
mad r0.xy, v2.zyzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.y, r0.y, v2.w
mul r0.yzw, r0.yyyy, v4.xxyz
mad r0.xyz, v3.xyzx, r0.xxxx, r0.yzwy
add r1.xyz, r0.xyzx, v0.xyzx
mov r1.w, v0.w
dp4 r2.x, cb3[0].xyzw, r1.xyzw
dp4 r2.y, cb3[1].xyzw, r1.xyzw
dp4 r2.z, cb3[2].xyzw, r1.xyzw
dp4 r2.w, cb3[3].xyzw, r1.xyzw
mov o0.xyzw, r2.xyzw
mad r2.xy, r2.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r2.wwww
mov o5.zw, r2.zzzw
mul o5.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r0.w, v2.y, cb1[0].y
mad r1.w, v2.x, cb1[0].z, cb1[0].w
round_ni r2.x, r1.w
mov o1.z, r1.w
mul r1.w, r2.x, cb1[0].x
round_ni r2.x, r1.w
frc r1.w, r1.w
mad o1.x, v2.z, cb1[0].x, r1.w
mad o1.y, r2.x, cb1[0].y, r0.w
mov o1.w, l(0)
add r2.xyz, -r1.xyzx, cb0[7].xyzx
mov o4.xyz, r1.xyzx
dp3 r0.w, r2.xyzx, r0.xyzx
mul r1.xyz, r0.wwww, r2.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
mad r0.xyz, r0.xyzx, r0.wwww, -r1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, v3.yzxy, v4.zxyz
mad r1.xyz, v4.yzxy, v3.zxyz, -r1.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r1.xyzx
dp3 r0.w, r3.xyzx, r2.xyzx
lt r0.w, r0.w, l(0.000000)
movc r2.xyz, r0.wwww, -r3.xyzx, r3.xyzx
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[1].w
movc o2.xyz, r0.wwww, r0.xyzx, r2.xyzx
mul r2.xyz, r0.xyzx, r1.yzxy
mad r2.xyz, r1.xyzx, r0.yzxy, -r2.xyzx
dp3 r0.x, r1.xyzx, r0.xyzx
mul r1.xyz, r2.xyzx, v4.yzxy
mad r1.xyz, r2.zxyz, v4.zxyz, -r1.xyzx
mad r1.xyz, v4.xyzx, r0.xxxx, r1.xyzx
movc r1.xyz, r0.wwww, r1.xyzx, v4.xyzx
mov o2.w, r1.x
mul r3.xyz, r2.xyzx, v3.yzxy
mad r2.xyz, r2.zxyz, v3.zxyz, -r3.xyzx
mad r0.xyz, v3.xyzx, r0.xxxx, r2.xyzx
movc o3.xyz, r0.wwww, r0.xyzx, v3.xyzx
mov o3.w, r1.y
mov o4.w, r1.z
mul o6.w, v1.w, cb1[1].x
mul o6.xyz, v1.zyxz, cb4[0].xyzx
ret 
// Approximately 60 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.26 on Sat Jul 04 14:02:27 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 vfColGradDelta;             // Offset:    0 Size:    12 [unused]
//   float4 vfRampParams;               // Offset:   16 Size:    16 [unused]
//   float4 vfColGradRadial;            // Offset:   32 Size:    16 [unused]
//   float4 vfColGradParams;            // Offset:   48 Size:    16 [unused]
//   float3 vfColGradBase;              // Offset:   64 Size:    12 [unused]
//   float4 vfParams;                   // Offset:   80 Size:    16 [unused]
//   float3 vfSunDir;                   // Offset:   96 Size:    12 [unused]
//   float4 vfViewPos;                  // Offset:  112 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 TexTileSize;                // Offset:    0 Size:    16
//   float4 ParticleParams[2];          // Offset:   16 Size:    32
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16 [unused]
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatDifColor;                // Offset:    0 Size:    16
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float __0SoftParticlesScale__1__2__3;// Offset:   80 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyz         3     NONE   float   xyz 
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// COLOR                    0   xyzw        6     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[2], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyz
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_temps 4
mad r0.xy, v2.zyzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.y, r0.y, v2.w
mul r0.yzw, r0.yyyy, v4.xxyz
mad r0.xyz, v3.xyzx, r0.xxxx, r0.yzwy
add r1.xyz, r0.xyzx, v0.xyzx
mov r1.w, v0.w
dp4 r2.x, cb3[0].xyzw, r1.xyzw
dp4 r2.y, cb3[1].xyzw, r1.xyzw
dp4 r2.z, cb3[2].xyzw, r1.xyzw
dp4 r2.w, cb3[3].xyzw, r1.xyzw
mov o0.xyzw, r2.xyzw
mad r2.xy, r2.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r2.wwww
mov o5.zw, r2.zzzw
mul o5.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r0.w, v2.y, cb1[0].y
mad r1.w, cb1[0].z, v2.x, cb1[0].w
round_ni r2.x, r1.w
mov o1.z, r1.w
mul r1.w, r2.x, cb1[0].x
round_ni r2.x, r1.w
frc r1.w, r1.w
mad o1.x, cb1[0].x, v2.z, r1.w
mad o1.y, r2.x, cb1[0].y, r0.w
mov o1.w, l(0)
add r2.xyz, -r1.xyzx, cb0[7].xyzx
mov o4.xyz, r1.xyzx
dp3 r0.w, r2.xyzx, r0.xyzx
mul r1.xyz, r0.wwww, r2.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
mad r0.xyz, r0.xyzx, r0.wwww, -r1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, v3.yzxy, v4.zxyz
mad r1.xyz, v4.yzxy, v3.zxyz, -r1.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r1.xyzx
dp3 r0.w, r3.xyzx, r2.xyzx
lt r0.w, r0.w, l(0.000000)
movc r2.xyz, r0.wwww, -r3.xyzx, r3.xyzx
ne r0.w, l(0.000000), cb1[1].w
movc o2.xyz, r0.wwww, r0.xyzx, r2.xyzx
mul r2.xyz, r0.zxyz, r1.xyzx
mad r2.xyz, r1.zxyz, r0.xyzx, -r2.xyzx
dp3 r0.x, r1.xyzx, r0.xyzx
mul r1.xyz, r2.yzxy, v4.yzxy
mad r1.xyz, r2.xyzx, v4.zxyz, -r1.xyzx
mad r1.xyz, v4.xyzx, r0.xxxx, r1.xyzx
movc r1.xyz, r0.wwww, r1.xyzx, v4.xyzx
mov o2.w, r1.x
mul r3.xyz, r2.yzxy, v3.yzxy
mad r2.xyz, r2.xyzx, v3.zxyz, -r3.xyzx
mad r0.xyz, v3.xyzx, r0.xxxx, r2.xyzx
movc o3.xyz, r0.wwww, r0.xyzx, v3.xyzx
mov o3.w, r1.y
mov o4.w, r1.z
mul o6.w, v1.w, cb1[1].x
mul o6.xyz, v1.zyxz, cb4[0].xyzx
ret 
// Approximately 60 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
