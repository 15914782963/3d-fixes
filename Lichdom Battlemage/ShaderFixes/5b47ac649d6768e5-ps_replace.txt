// Light (slightly out... only used when character in certain places - e.g. in
// ruins this is used at one point before walking through a bunch of pillars)

cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 g_ScreenScale : packoffset(c2);
  float4 vWBasisX : packoffset(c3);
  float4 vWBasisY : packoffset(c4);
  float4 vWBasisZ : packoffset(c5);
  float4 g_vProjectionParams : packoffset(c6);
  float4 PS_NearFarClipDist : packoffset(c7);
  float4 PS_ScreenSize : packoffset(c8);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
SamplerState _cubetex2_s : register(s2);
SamplerState _cubetex3_s : register(s3);
SamplerState _texA_s : register(s10);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);
TextureCube<float4> _cubetex2 : register(t2);
TextureCube<float4> _cubetex3 : register(t3);
Texture2D<float4> _texA : register(t10);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,

float4 g_VS_NearFarClipDist : TEXCOORD0,
float4 g_VS_ScreenSize : TEXCOORD1

  )
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  r1.xyz = _tex1.Sample(_tex1_s, r0.xy).xyz;
  r1.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = r1.xyz * r0.zzz;
  r2.xyzw = _cubetex2.Sample(_cubetex2_s, r1.xyz).xyzw;
  r0.z = 1.600000000e+001 * r2.w;
  r2.xyz = r2.xyz * r0.zzz;
  o0.xyz = g_LightDiffuse.xyz * r2.xyz;
  r0.z = _tex0.Sample(_tex0_s, r0.xy).x;

// Align lighting. Scale the z buffer to get the depth and subtract the stereo
// correction formula. We have to take the perspective divide into account and
// multiply by the horizontal resolution since v0 is in pixels.
float4 stereo = StereoParams.Load(0);
float depth = r0.z * g_VS_NearFarClipDist.y;
v0.x -= stereo.x * (depth - stereo.y) / depth * g_VS_ScreenSize.x / 2;

  r0.x = _texA.Sample(_texA_s, r0.xy).y;
  r0.x = -r0.x * 6.000000000e+000 + 6.000000000e+000;
  r2.xyz = vWBasisX.xyz * v0.xxx + vWBasisZ.xyz;
  r2.xyz = vWBasisY.xyz * v0.yyy + r2.xyz;
  r0.yzw = -r2.xyz * r0.zzz + g_LightPos.xyz;
  r0.yzw = g_LightPos.www * r0.yzw;
  r0.y = dot(r0.yzw, r0.yzw);
  r0.y = 1.000000000e+000 + -r0.y;
  r0.y = max(0.000000000e+000, r0.y);
  o0.w = r0.y;
  o1.w = r0.y;
  r0.y = dot(r2.xyz, r2.xyz);
  r0.y = rsqrt(r0.y);
  r0.yzw = r2.xyz * r0.yyy;
  r1.w = dot(r0.yzw, r1.xyz);
  r1.w = r1.w + r1.w;
  r0.yzw = r1.xyz * -r1.www + r0.yzw;
  r0.xyzw = _cubetex3.SampleLevel(_cubetex3_s, r0.yzw, r0.x).xyzw;
  r0.w = 1.600000000e+001 * r0.w;
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = g_LightDiffuse.xyz * g_LightDiffuse.www;
  o1.xyz = r1.xyz * r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.1.26 on Mon Jul 06 23:17:32 2015
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 g_ScreenScale;              // Offset:   32 Size:    16
//   float4 vWBasisX;                   // Offset:   48 Size:    16
//   float4 vWBasisY;                   // Offset:   64 Size:    16
//   float4 vWBasisZ;                   // Offset:   80 Size:    16
//   float4 g_vProjectionParams;        // Offset:   96 Size:    16 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  112 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:  128 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex1                             sampler      NA          NA    1        1
// _cubetex2                         sampler      NA          NA    2        1
// _cubetex3                         sampler      NA          NA    3        1
// _texA                             sampler      NA          NA   10        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _cubetex2                         texture  float4        cube    2        1
// _cubetex3                         texture  float4        cube    3        1
// _texA                             texture  float4          2d   10        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s10, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 3
mad r0.xy, v0.xyxx, cb0[2].xyxx, cb0[2].zwzz
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t1.xyzw, s1
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, r1.xyzx
sample_indexable(texturecube)(float,float,float,float) r2.xyzw, r1.xyzx, t2.xyzw, s2
mul r0.z, r2.w, l(16.000000)
mul r2.xyz, r0.zzzz, r2.xyzx
mul o0.xyz, r2.xyzx, cb0[1].xyzx
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t0.yzxw, s0
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.yxzw, s10
mad r0.x, -r0.x, l(6.000000), l(6.000000)
mad r2.xyz, cb0[3].xyzx, v0.xxxx, cb0[5].xyzx
mad r2.xyz, cb0[4].xyzx, v0.yyyy, r2.xyzx
mad r0.yzw, -r2.xxyz, r0.zzzz, cb0[0].xxyz
mul r0.yzw, r0.yyzw, cb0[0].wwww
dp3 r0.y, r0.yzwy, r0.yzwy
add r0.y, -r0.y, l(1.000000)
max r0.y, r0.y, l(0.000000)
mov o0.w, r0.y
mov o1.w, r0.y
dp3 r0.y, r2.xyzx, r2.xyzx
rsq r0.y, r0.y
mul r0.yzw, r0.yyyy, r2.xxyz
dp3 r1.w, r0.yzwy, r1.xyzx
add r1.w, r1.w, r1.w
mad r0.yzw, r1.xxyz, -r1.wwww, r0.yyzw
sample_l_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.yzwy, t3.xyzw, s3, r0.x
mul r0.w, r0.w, l(16.000000)
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, cb0[1].wwww, cb0[1].xyzx
mul o1.xyz, r0.xyzx, r1.xyzx
ret 
// Approximately 34 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
