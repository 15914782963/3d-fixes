cbuffer cb4 : register(b4)
{
  float4 cb4[6];
}


cbuffer PER_BATCH : register(b0)
{
  float4 CameraRightVector : packoffset(c0);
  float4 VS_SunColor : packoffset(c1);
  float4 CameraUpVector : packoffset(c2);
  float3 CameraFrontVector : packoffset(c3);
  float4 OceanParams1 : packoffset(c4);
  float4 OceanParams0 : packoffset(c5);
  row_major float4x4 mViewProjI : packoffset(c6);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float4x4 mReflProj : packoffset(c0);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  float4 g_VS_NearFarClipDist : packoffset(c9);
}

cbuffer PER_MATERIAL : register(b4)
{
  float4 MatSpecColor : packoffset(c1);
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float3 __0__1DetailTilling__2RipplesNormalsScale__3 : packoffset(c4);
  float2 __0__1Tilling__2__3 : packoffset(c5);
}
SamplerState FFTVertexTexSampler_s : register(s0);
SamplerState WaterDynRipplesVertexTexSampler_s : register(s1);
Texture2D<float4> FFTVertexTexSampler : register(t0);
Texture2D<float4> WaterDynRipplesVertexTexSampler : register(t1);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : TEXCOORD7,
  out float4 o9 : TEXCOORD8)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = min(2, OceanParams0.w);
  r0.x = 1 / r0.x;
  r0.x = 100 * r0.x;
  r1.xyzw = float4(0.707000017,0.707000017,-0.707000017,0.707000017) * v0.xyyx;
  r1.xy = r1.xy + r1.zw;
  r1.z = -0.300000012 + r1.y;
  r0.xy = r1.xz * -r0.xx;
  r0.z = 0.75 < abs(CameraFrontVector.z);
  r0.zw = r0.zz ? -CameraUpVector.xy : CameraFrontVector.xy;
  r0.yz = r0.zw * r0.yy;
  r0.xy = CameraRightVector.xy * r0.xx + r0.yz;
  r0.z = dot(r0.xy, r0.xy);
  r0.w = rsqrt(r0.z);
  r0.z = 0.0850000009 * r0.z;
  r0.xy = r0.xy * r0.ww;
  r0.w = dot(CameraFrontVector.xy, CameraFrontVector.xy);
  r0.w = rsqrt(r0.w);
  r1.xy = CameraFrontVector.xy * r0.ww;
  r0.w = dot(r1.xy, r0.xy);
  r1.x = 1 + r0.w;
  r1.x = r1.x * r1.x;
  r1.y = g_VS_WorldViewPos.z + -OceanParams1.w;
  r1.x = r1.x * abs(r1.y);
  r1.x = r1.x * 0.0625 + 1;
  r0.z = r1.x * r0.z;
  r1.x = 0 < -r0.w;
  r0.w = -r0.w < 0;
  r0.w = ((int)r0.w ? -1 : 0) + ((int)r1.x ? 1 : 0);
  r0.w = (int)r0.w;
  r0.w = v0.z * r0.w;
  r0.w = 0.980000019 < r0.w;
  r0.z = r0.w ? g_VS_NearFarClipDist.y : r0.z;
  r0.z = min(16384, r0.z);
  r0.w = v0.z < 0.980000019;
  r1.xyzw = g_VS_WorldViewPos.xyxy * float4(0.100000001,0.100000001,0.200000003,0.200000003);
  r1.xyzw = frac(r1.xyzw);
  r1.xy = float2(10,10) * r1.xy;
  r1.zw = -r1.zw * float2(5,5) + g_VS_WorldViewPos.xy;
  r1.xy = r0.ww ? r1.xy : 0;
  r1.xy = g_VS_WorldViewPos.xy + -r1.xy;
  r0.xy = r0.xy * r0.zz + r1.xy;
  r0.z = OceanParams1.w;
  r2.xyz = -g_VS_WorldViewPos.xyz + r0.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r0.w = 0.5 * r0.w;
  r0.w = min(1, r0.w);
  r0.w = r0.w * r0.w;
  r2.xyzw = OceanParams0.wwww * r0.xyxy;
  r1.xy = float2(0.015625,0.015625) * r2.zw;
  r2.xyzw = r2.xyzw * float4(0.015625,0.015625,0.015625,0.015625) + float4(0.015625,0,0,0.015625);
  r3.xyz = FFTVertexTexSampler.SampleLevel(FFTVertexTexSampler_s, r1.xy, 0).xyz;
  r3.xyw = r3.xyz * r0.www;
  r3.xyw = OceanParams1.xxx * r3.xyw;
  r0.xyz = r3.xyw * float3(0.0900000036,0.0900000036,0.0599999987) + r0.xyz;
  r1.xy = -r0.xy + r1.zw;
  r1.xy = r1.xy * float2(0.0250000004,0.0250000004) + float2(0.5,0.5);
  r1.z = WaterDynRipplesVertexTexSampler.SampleLevel(WaterDynRipplesVertexTexSampler_s, r1.xy, 0).z;
  o8.xy = r1.xy;
  r0.z = -r1.z + r0.z;
  r1.xyzw = cb4[5].yyyy * r0.xyxy;
  r3.xyw = g_VS_WorldViewPos.xyz + -r0.xyz;
  r4.x = dot(r3.xyw, r3.xyw);
  r4.x = r4.x < 4;
  r4.y = 0.200000003 < abs(r3.w);
  r4.y = r4.y ? 1.000000 : 0;
  r0.w = 1;
  r4.z = dot(g_VS_ViewProjMatr._m20_m21_m22_m23, r0.xyzw);
  r4.y = r4.z * r4.y;
  o0.z = r4.x ? r4.y : r4.z;
  r4.x = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, r0.xyzw);
  r4.y = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, r0.xyzw);
  r4.w = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, r0.xyzw);
  o0.xyw = r4.xyw;
  r4.xy = r4.xy * float2(1,-1) + r4.ww;
  o2.xy = float2(0.5,0.5) * r4.xy;
  r4.x = g_VS_AnimGenParams.z * OceanParams0.y;
  r4.x = 0.00249999994 * r4.x;
  r5.xyzw = OceanParams1.yzyz * r4.xxxx;
  r5.xyzw = float4(1,1,2,2) * r5.xyzw;
  r1.xyzw = r1.xyzw * float4(0.00499999989,0.00499999989,0.00999999978,0.00999999978) + r5.xyzw;
  o1.zw = cb4[4].yy * r1.wz;
  o1.xy = r1.xy;
  r1.x = saturate(r4.w);
  r1.x = sqrt(r1.x);
  o2.z = -r1.x * 0.150000006 + 1;
  o2.w = r4.w;
  r1.x = saturate(-r4.w * 0.00999999978 + 1);
  o3.x = dot(mReflProj._m00_m01_m02_m03, r0.xyzw);
  o3.y = dot(mReflProj._m10_m11_m12_m13, r0.xyzw);
  o3.z = dot(mReflProj._m20_m21_m22_m23, r0.xyzw);
  o3.w = dot(mReflProj._m30_m31_m32_m33, r0.xyzw);
  o7.xyz = r0.xyz;
  r0.x = 0 < r3.w;
  r0.y = r3.w < 0;
  o4.xyz = r3.xyw;
  r0.x = ((int)r0.y ? -1 : 0) + ((int)r0.x ? 1 : 0);
  o4.w = (int)r0.x;
  o5.xy = cb4[1].ww * float2(1020,127.5);
  o5.zw = cb4[1].ww * float2(162.338104,20.292263) + float2(0.318309993,0.318309993);
  o6.xyz = cb4[1].xyz * VS_SunColor.xyz;
  o6.w = 1;
  o7.w = v0.z;
  o8.zw = float2(1,1);
  r0.x = FFTVertexTexSampler.SampleLevel(FFTVertexTexSampler_s, r2.xy, 0).z;
  r0.y = FFTVertexTexSampler.SampleLevel(FFTVertexTexSampler_s, r2.zw, 0).z;
  r2.xy = r3.zz + -r0.xy;
  r2.z = 8;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r2.xyz * r0.xxx + float3(-0,-0,-1);
  o9.xyz = r1.xxx * r0.xyz + float3(0,0,1);
  o9.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 CameraRightVector;          // Offset:    0 Size:    16
//   float4 VS_SunColor;                // Offset:   16 Size:    16
//   float4 CameraUpVector;             // Offset:   32 Size:    16
//   float3 CameraFrontVector;          // Offset:   48 Size:    12
//   float4 OceanParams1;               // Offset:   64 Size:    16
//   float4 OceanParams0;               // Offset:   80 Size:    16
//   row_major float4x4 mViewProjI;     // Offset:   96 Size:    64 [unused]
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float4x4 mReflProj;      // Offset:    0 Size:    64
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16
//   float4 g_VS_NearFarClipDist;       // Offset:  144 Size:    16
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatSpecColor;               // Offset:   16 Size:    16
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float3 __0__1DetailTilling__2RipplesNormalsScale__3;// Offset:   64 Size:    12
//   float2 __0__1Tilling__2__3;        // Offset:   80 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// FFTVertexTexSampler               sampler      NA          NA    0        1
// WaterDynRipplesVertexTexSampler    sampler      NA          NA    1        1
// FFTVertexTexSampler               texture  float4          2d    0        1
// WaterDynRipplesVertexTexSampler    texture  float4          2d    1        1
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb3[10], immediateIndexed
dcl_constantbuffer cb4[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input v0.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_temps 6
min r0.x, cb0[5].w, l(2.000000)
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.x, r0.x, l(100.000000)
mul r1.xyzw, v0.xyyx, l(0.707000, 0.707000, -0.707000, 0.707000)
add r1.xy, r1.zwzz, r1.xyxx
add r1.z, r1.y, l(-0.300000)
mul r0.xy, -r0.xxxx, r1.xzxx
lt r0.z, l(0.750000), |cb0[3].z|
movc r0.zw, r0.zzzz, -cb0[2].xxxy, cb0[3].xxxy
mul r0.yz, r0.yyyy, r0.zzwz
mad r0.xy, cb0[0].xyxx, r0.xxxx, r0.yzyy
dp2 r0.z, r0.xyxx, r0.xyxx
rsq r0.w, r0.z
mul r0.z, r0.z, l(0.085000)
mul r0.xy, r0.wwww, r0.xyxx
dp2 r0.w, cb0[3].xyxx, cb0[3].xyxx
rsq r0.w, r0.w
mul r1.xy, r0.wwww, cb0[3].xyxx
dp2 r0.w, r1.xyxx, r0.xyxx
add r1.x, r0.w, l(1.000000)
mul r1.x, r1.x, r1.x
add r1.y, -cb0[4].w, cb3[6].z
mul r1.x, |r1.y|, r1.x
mad r1.x, r1.x, l(0.062500), l(1.000000)
mul r0.z, r0.z, r1.x
lt r1.x, l(0.000000), -r0.w
lt r0.w, -r0.w, l(0.000000)
iadd r0.w, r0.w, -r1.x
itof r0.w, r0.w
mul r0.w, r0.w, v0.z
lt r0.w, l(0.980000), r0.w
movc r0.z, r0.w, cb3[9].y, r0.z
min r0.z, r0.z, l(16384.000000)
lt r0.w, v0.z, l(0.980000)
mul r1.xyzw, l(0.100000, 0.100000, 0.200000, 0.200000), cb3[6].xyxy
frc r1.xyzw, r1.xyzw
mul r1.xy, r1.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000)
mad r1.zw, -r1.zzzw, l(0.000000, 0.000000, 5.000000, 5.000000), cb3[6].xxxy
and r1.xy, r0.wwww, r1.xyxx
add r1.xy, -r1.xyxx, cb3[6].xyxx
mad r0.xy, r0.xyxx, r0.zzzz, r1.xyxx
mov r0.z, cb0[4].w
add r2.xyz, r0.xyzx, -cb3[6].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
mul r0.w, r0.w, l(0.500000)
min r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, r0.w
mul r2.xyzw, r0.xyxy, cb0[5].wwww
mul r1.xy, r2.zwzz, l(0.015625, 0.015625, 0.000000, 0.000000)
mad r2.xyzw, r2.xyzw, l(0.015625, 0.015625, 0.015625, 0.015625), l(0.015625, 0.000000, 0.000000, 0.015625)
sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r1.xyxx, t0.xyzw, s0, l(0.000000)
mul r3.xyw, r0.wwww, r3.xyxz
mul r3.xyw, r3.xyxw, cb0[4].xxxx
mad r0.xyz, r3.xywx, l(0.090000, 0.090000, 0.060000, 0.000000), r0.xyzx
add r1.xy, r1.zwzz, -r0.xyxx
mad r1.xy, r1.xyxx, l(0.025000, 0.025000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.z, r1.xyxx, t1.xyzw, s1, l(0.000000)
mov o8.xy, r1.xyxx
add r0.z, r0.z, -r1.z
mul r1.xyzw, r0.xyxy, cb4[5].yyyy
add r3.xyw, -r0.xyxz, cb3[6].xyxz
dp3 r4.x, r3.xywx, r3.xywx
lt r4.x, r4.x, l(4.000000)
lt r4.y, l(0.200000), |r3.w|
and r4.y, r4.y, l(0x3f800000)
mov r0.w, l(1.000000)
dp4 r4.z, cb3[2].xyzw, r0.xyzw
mul r4.y, r4.y, r4.z
movc o0.z, r4.x, r4.y, r4.z
dp4 r4.x, cb3[0].xyzw, r0.xyzw
dp4 r4.y, cb3[1].xyzw, r0.xyzw
dp4 r4.w, cb3[3].xyzw, r0.xyzw
mov o0.xyw, r4.xyxw
mad r4.xy, r4.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r4.wwww
mul o2.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r4.x, cb0[5].y, cb3[8].z
mul r4.x, r4.x, l(0.002500)
mul r5.xyzw, r4.xxxx, cb0[4].yzyz
mul r5.xyzw, r5.xyzw, l(1.000000, 1.000000, 2.000000, 2.000000)
mad r1.xyzw, r1.xyzw, l(0.005000, 0.005000, 0.010000, 0.010000), r5.xyzw
mul o1.zw, r1.wwwz, cb4[4].yyyy
mov o1.xy, r1.xyxx
mov_sat r1.x, r4.w
sqrt r1.x, r1.x
mad o2.z, -r1.x, l(0.150000), l(1.000000)
mov o2.w, r4.w
mad_sat r1.x, -r4.w, l(0.010000), l(1.000000)
dp4 o3.x, cb1[0].xyzw, r0.xyzw
dp4 o3.y, cb1[1].xyzw, r0.xyzw
dp4 o3.z, cb1[2].xyzw, r0.xyzw
dp4 o3.w, cb1[3].xyzw, r0.xyzw
mov o7.xyz, r0.xyzx
lt r0.x, l(0.000000), r3.w
lt r0.y, r3.w, l(0.000000)
mov o4.xyz, r3.xywx
iadd r0.x, r0.y, -r0.x
itof o4.w, r0.x
mul o5.xy, l(1020.000000, 127.500000, 0.000000, 0.000000), cb4[1].wwww
mad o5.zw, cb4[1].wwww, l(0.000000, 0.000000, 162.338104, 20.292263), l(0.000000, 0.000000, 0.318310, 0.318310)
mul o6.xyz, cb0[1].xyzx, cb4[1].xyzx
mov o6.w, l(1.000000)
mov o7.w, v0.z
mov o8.zw, l(0,0,1.000000,1.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r2.xyxx, t0.zxyw, s0, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r2.zwzz, t0.xzyw, s0, l(0.000000)
add r2.xy, -r0.xyxx, r3.zzzz
mov r2.z, l(8.000000)
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mad r0.xyz, r2.xyzx, r0.xxxx, l(-0.000000, -0.000000, -1.000000, 0.000000)
mad o9.xyz, r1.xxxx, r0.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mov o9.w, l(1.000000)
ret 
// Approximately 114 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.31 on Sun Jul 12 21:01:36 2015
//
//
// Buffer Definitions: 
//
// cbuffer cb4
// {
//
//   float4 cb4[6];                     // Offset:    0 Size:    96
//
// }
//
// cbuffer PER_BATCH
// {
//
//   float4 CameraRightVector;          // Offset:    0 Size:    16
//   float4 VS_SunColor;                // Offset:   16 Size:    16
//   float4 CameraUpVector;             // Offset:   32 Size:    16
//   float3 CameraFrontVector;          // Offset:   48 Size:    12
//   float4 OceanParams1;               // Offset:   64 Size:    16
//   float4 OceanParams0;               // Offset:   80 Size:    16
//   row_major float4x4 mViewProjI;     // Offset:   96 Size:    64 [unused]
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float4x4 mReflProj;      // Offset:    0 Size:    64
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16
//   float4 g_VS_NearFarClipDist;       // Offset:  144 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// FFTVertexTexSampler_s             sampler      NA          NA    0        1
// WaterDynRipplesVertexTexSampler_s    sampler      NA          NA    1        1
// FFTVertexTexSampler               texture  float4          2d    0        1
// WaterDynRipplesVertexTexSampler    texture  float4          2d    1        1
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// cb4                               cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb4[6], immediateIndexed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb3[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input v0.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_temps 6
min r0.x, l(2.000000), cb0[5].w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.x, r0.x, l(100.000000)
mul r0.yzw, v0.xxyy, l(0.000000, 0.707000, 0.707000, -0.707000)
add r1.xy, r0.wyww, r0.yzyy
add r1.z, r1.y, l(-0.300000)
mul r0.xy, -r0.xxxx, r1.xzxx
lt r0.z, l(0.750000), |cb0[3].z|
movc r0.zw, r0.zzzz, -cb0[2].xxxy, cb0[3].xxxy
mul r0.yz, r0.yyyy, r0.zzwz
mad r0.xy, cb0[0].xyxx, r0.xxxx, r0.yzyy
dp2 r0.z, r0.xyxx, r0.xyxx
rsq r0.w, r0.z
mul r0.z, r0.z, l(0.085000)
mul r0.xy, r0.wwww, r0.xyxx
dp2 r0.w, cb0[3].xyxx, cb0[3].xyxx
rsq r0.w, r0.w
mul r1.xy, r0.wwww, cb0[3].xyxx
dp2 r0.w, r1.xyxx, r0.xyxx
add r1.x, r0.w, l(1.000000)
mul r1.x, r1.x, r1.x
add r1.y, -cb0[4].w, cb3[6].z
mul r1.x, |r1.y|, r1.x
mad r1.x, r1.x, l(0.062500), l(1.000000)
mul r0.z, r0.z, r1.x
lt r1.x, l(0.000000), -r0.w
lt r0.w, -r0.w, l(0.000000)
and r1.x, r1.x, l(1)
iadd r0.w, r0.w, r1.x
itof r0.w, r0.w
mul r0.w, r0.w, v0.z
lt r0.w, l(0.980000), r0.w
movc r0.z, r0.w, cb3[9].y, r0.z
min r0.z, r0.z, l(16384.000000)
lt r0.w, v0.z, l(0.980000)
mul r1.xyzw, l(0.100000, 0.100000, 0.200000, 0.200000), cb3[6].xyxy
frc r1.xyzw, r1.xyzw
mul r1.xy, r1.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000)
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, -5.000000, -5.000000), cb3[6].xxxy
and r1.xy, r0.wwww, r1.xyxx
add r1.xy, -r1.xyxx, cb3[6].xyxx
mad r0.xy, r0.xyxx, r0.zzzz, r1.xyxx
mov r0.z, cb0[4].w
add r2.xyz, r0.xyzx, -cb3[6].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
mul r0.w, r0.w, l(0.500000)
min r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, r0.w
mul r1.xy, r0.xyxx, cb0[5].wwww
mul r2.xy, r1.xyxx, l(0.015625, 0.015625, 0.000000, 0.000000)
mad r3.xyzw, r1.xyxy, l(0.015625, 0.015625, 0.015625, 0.015625), l(0.015625, 0.000000, 0.000000, 0.015625)
sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t0.xyzw, s0, l(0.000000)
mul r2.xyw, r0.wwww, r2.xyxz
mul r2.xyw, r2.xyxw, cb0[4].xxxx
mad r0.xyw, r2.xyxw, l(0.090000, 0.090000, 0.000000, 0.060000), r0.xyxz
add r1.xy, r1.zwzz, -r0.xyxx
mad r1.xy, r1.xyxx, l(0.025000, 0.025000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.z, r1.xyxx, t1.xyzw, s1, l(0.000000)
mov o8.xy, r1.xyxx
add r0.z, r0.w, -r1.z
add r1.xyz, -r0.xyzx, cb3[6].xyzx
mul r4.xyzw, r0.xyxy, cb4[5].yyyy
dp3 r1.w, r1.xyzx, r1.xyzx
lt r1.w, r1.w, l(4.000000)
mov r0.w, l(1.000000)
dp4 r2.x, cb3[2].xyzw, r0.xyzw
lt r2.y, l(0.200000), |r1.z|
and r2.y, r2.y, l(0x3f800000)
mul r2.y, r2.y, r2.x
movc o0.z, r1.w, r2.y, r2.x
dp4 r2.x, cb3[0].xyzw, r0.xyzw
dp4 r2.y, cb3[1].xyzw, r0.xyzw
dp4 r2.w, cb3[3].xyzw, r0.xyzw
mov o0.xyw, r2.xyxw
mad r2.xy, r2.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r2.wwww
mul o2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r1.w, cb0[5].y, cb3[8].z
mul r1.w, r1.w, l(0.002500)
mul r5.xyzw, r1.wwww, cb0[4].yzyz
mul r5.xyzw, r5.xyzw, l(1.000000, 1.000000, 2.000000, 2.000000)
mad r4.xyzw, r4.xyzw, l(0.005000, 0.005000, 0.010000, 0.010000), r5.xyzw
mul o1.zw, r4.wwwz, cb4[4].yyyy
mov o1.xy, r4.xyxx
mov_sat r1.w, r2.w
sqrt r1.w, r1.w
mad o2.z, r1.w, l(-0.150000), l(1.000000)
mov o2.w, r2.w
mad_sat r1.w, r2.w, l(-0.010000), l(1.000000)
dp4 o3.x, cb1[0].xyzw, r0.xyzw
dp4 o3.y, cb1[1].xyzw, r0.xyzw
dp4 o3.z, cb1[2].xyzw, r0.xyzw
dp4 o3.w, cb1[3].xyzw, r0.xyzw
mov o7.xyz, r0.xyzx
lt r0.x, l(0.000000), r1.z
and r0.x, r0.x, l(1)
lt r0.y, r1.z, l(0.000000)
mov o4.xyz, r1.xyzx
iadd r0.x, r0.x, r0.y
itof o4.w, r0.x
mul o5.xy, cb4[1].wwww, l(1020.000000, 127.500000, 0.000000, 0.000000)
mad o5.zw, cb4[1].wwww, l(0.000000, 0.000000, 162.338104, 20.292263), l(0.000000, 0.000000, 0.318310, 0.318310)
mul o6.xyz, cb4[1].xyzx, cb0[1].xyzx
mov o6.w, l(1.000000)
mov o7.w, v0.z
mov o8.zw, l(0,0,1.000000,1.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r3.xyxx, t0.zxyw, s0, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r3.zwzz, t0.xzyw, s0, l(0.000000)
add r0.xy, -r0.xyxx, r2.zzzz
mov r0.z, l(8.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mad r0.xyz, r0.xyzx, r0.wwww, l(0.000000, 0.000000, -1.000000, 0.000000)
mad o9.xyz, r1.wwww, r0.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mov o9.w, l(1.000000)
ret 
// Approximately 116 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
