// Very subtle lighting effect bridge under waterfall in level 1

cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 g_WorldViewPos : packoffset(c2);
  row_major float4x4 g_mLightProj : packoffset(c3);
  float4 g_ScreenScale : packoffset(c7);
  float4 vWBasisX : packoffset(c8);
  float4 vWBasisY : packoffset(c9);
  float4 vWBasisZ : packoffset(c10);
  float4 g_DecalSpecColor : packoffset(c11);
  float4 g_DecalParams : packoffset(c12);
  float4 PS_NearFarClipDist : packoffset(c13);
  float4 PS_ScreenSize : packoffset(c14);
  row_major float4x4 g_mDecalTCModMatrix : packoffset(c15);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex5_s : register(s5);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex5 : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_Target0,

row_major matrix vp : TEXCOORD0,
row_major matrix ivp : TEXCOORD4

  )
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  r0.z = _tex0.Sample(_tex0_s, r0.xy).x;
  r1.xyz = vWBasisX.xyz * v0.xxx + vWBasisZ.xyz;
  r1.xyz = vWBasisY.xyz * v0.yyy + r1.xyz;
  r1.xyz = r1.xyz * r0.zzz + g_WorldViewPos.xyz;
  r1.w = 1;

float4 stereo = StereoParams.Load(0);
float4 tmp = mul(vp, r1);
tmp.x -= stereo.x * (tmp.w - stereo.y);
r1 = mul(ivp, tmp);

  r2.x = dot(g_mLightProj._m00_m01_m02_m03, r1.xyzw);
  r2.y = dot(g_mLightProj._m10_m11_m12_m13, r1.xyzw);
  r2.z = dot(g_mLightProj._m20_m21_m22_m23, r1.xyzw);
  r0.z = dot(g_mLightProj._m30_m31_m32_m33, r1.xyzw);
  r1.xyz = r2.xyz / r0.zzz;
  r3.xyzw = r1.xyxy * float4(1.000000e+000,1.000000e+000,-1.000000e+000,-1.000000e+000) + float4(0.000000e+000,0.000000e+000,1.000000e+000,1.000000e+000);
  r3.xyzw = r3.xyzw < float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  r0.zw = (int2)r3.zw | (int2)r3.xy;
  r0.z = (int)r0.w | (int)r0.z;
  if (r0.z != 0) discard;
  r0.z = r1.z < 0;
  if (r0.z != 0) discard;
  r0.x = _tex5.Sample(_tex5_s, r0.xy).x;
  r0.x = 255 * r0.x;
  r0.x = (uint)r0.x;
  r0.x = (uint)r0.x >> 6;
  r0.y = (int)r0.x != 0;
  if (r0.y != 0) discard;
  r0.yz = g_mDecalTCModMatrix._m10_m11 * r1.yy;
  r0.yz = r1.xx * g_mDecalTCModMatrix._m00_m01 + r0.yz;
  r0.yz = g_mDecalTCModMatrix._m20_m21 + r0.yz;
  r0.yz = g_mDecalTCModMatrix._m30_m31 + r0.yz;
  r0.w = g_DecalParams.y * r2.z;
  r0.w = log2(r0.w);
  r0.w = g_DecalParams.x * r0.w;
  r0.w = exp2(r0.w);
  r0.w = 1 + -r0.w;
  r0.w = max(0, r0.w);
  o0.x = r0.x ? 0.498039216 : 0.247058824;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + r0.yz;
  r0.x = dot(r0.xy, r0.xy);
  r0.x = sqrt(r0.x);
  r0.x = -r0.x * 2 + 1;
  o0.w = r0.w * r0.x;
  o0.y = g_DecalSpecColor.w;
  o0.z = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.1.30 on Thu Jul 09 20:10:51 2015
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16 [unused]
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16 [unused]
//   float4 g_WorldViewPos;             // Offset:   32 Size:    16
//   row_major float4x4 g_mLightProj;   // Offset:   48 Size:    64
//   float4 g_ScreenScale;              // Offset:  112 Size:    16
//   float4 vWBasisX;                   // Offset:  128 Size:    16
//   float4 vWBasisY;                   // Offset:  144 Size:    16
//   float4 vWBasisZ;                   // Offset:  160 Size:    16
//   float4 g_DecalSpecColor;           // Offset:  176 Size:    16
//   float4 g_DecalParams;              // Offset:  192 Size:    16
//   float4 PS_NearFarClipDist;         // Offset:  208 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:  224 Size:    16 [unused]
//   row_major float4x4 g_mDecalTCModMatrix;// Offset:  240 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex5                             sampler      NA          NA    5        1
// _tex0                             texture  float4          2d    0        1
// _tex5                             texture  float4          2d    5        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[19], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 4
mad r0.xy, v0.xyxx, cb0[7].xyxx, cb0[7].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t0.yzxw, s0
mad r1.xyz, cb0[8].xyzx, v0.xxxx, cb0[10].xyzx
mad r1.xyz, cb0[9].xyzx, v0.yyyy, r1.xyzx
mad r1.xyz, r1.xyzx, r0.zzzz, cb0[2].xyzx
mov r1.w, l(1.000000)
dp4 r2.x, cb0[3].xyzw, r1.xyzw
dp4 r2.y, cb0[4].xyzw, r1.xyzw
dp4 r2.z, cb0[5].xyzw, r1.xyzw
dp4 r0.z, cb0[6].xyzw, r1.xyzw
div r1.xyz, r2.xyzx, r0.zzzz
mad r3.xyzw, r1.xyxy, l(1.000000, 1.000000, -1.000000, -1.000000), l(0.000000, 0.000000, 1.000000, 1.000000)
lt r3.xyzw, r3.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.zw, r3.zzzw, r3.xxxy
or r0.z, r0.w, r0.z
discard_nz r0.z
lt r0.z, r1.z, l(0.000000)
discard_nz r0.z
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t5.xyzw, s5
mul r0.x, r0.x, l(255.000000)
ftou r0.x, r0.x
ushr r0.x, r0.x, l(6)
ine r0.y, r0.x, l(0)
discard_nz r0.y
mul r0.yz, r1.yyyy, cb0[16].xxyx
mad r0.yz, r1.xxxx, cb0[15].xxyx, r0.yyzy
add r0.yz, r0.yyzy, cb0[17].xxyx
add r0.yz, r0.yyzy, cb0[18].xxyx
mul r0.w, r2.z, cb0[12].y
log r0.w, r0.w
mul r0.w, r0.w, cb0[12].x
exp r0.w, r0.w
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
movc o0.x, r0.x, l(0.498039), l(0.247059)
add r0.xy, r0.yzyy, l(-0.500000, -0.500000, 0.000000, 0.000000)
dp2 r0.x, r0.xyxx, r0.xyxx
sqrt r0.x, r0.x
mad r0.x, -r0.x, l(2.000000), l(1.000000)
mul o0.w, r0.x, r0.w
mov o0.y, cb0[11].w
mov o0.z, l(0)
ret 
// Approximately 43 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
