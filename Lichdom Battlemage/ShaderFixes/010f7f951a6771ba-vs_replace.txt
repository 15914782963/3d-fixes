
cbuffer PER_BATCH : register(b0)
{
  float3 vfColGradDelta : packoffset(c0);
  float4 vfRampParams : packoffset(c1);
  float4 vfColGradRadial : packoffset(c2);
  float4 vfColGradParams : packoffset(c3);
  float3 vfColGradBase : packoffset(c4);
  float4 vfParams : packoffset(c5);
  float3 vfSunDir : packoffset(c6);
  float4 vfViewPos : packoffset(c7);
}

cbuffer PER_INSTANCE : register(b1)
{
  float4 TexTileSize : packoffset(c0);
  float4 ParticleParams[2] : packoffset(c1);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : COLOR1,
  float4 v3 : TEXCOORD0,
  float3 v4 : TEXCOORD1,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : COLOR0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v2.zy * float2(2,2) + float2(-1,-1);
  r0.y = v2.w * r0.y;
  r0.yzw = v4.xyz * r0.yyy;
  r0.xyz = v3.xyz * r0.xxx + r0.yzw;
  r1.xyz = v0.xyz + r0.xyz;
  r1.w = v0.w;
  r2.x = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, r1.xyzw);
  r2.y = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, r1.xyzw);
  r2.w = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, r1.xyzw);
  o0.z = dot(g_VS_ViewProjMatr._m20_m21_m22_m23, r1.xyzw);
  o0.xyw = r2.xyw;
  r2.xy = r2.xy * float2(1,-1) + r2.ww;
  o5.w = r2.w;
  o5.xy = float2(0.5,0.5) * r2.xy;
  o1.w = 0;
  r0.w = v2.x * TexTileSize.z + TexTileSize.w;
  o1.z = frac(r0.w);
  r0.w = floor(r0.w);
  r1.w = TexTileSize.x * r0.w;
  r0.w = r0.w * TexTileSize.x + TexTileSize.x;
  r2.x = frac(r1.w);
  r1.w = floor(r1.w);
  o1.x = v2.z * TexTileSize.x + r2.x;
  r2.x = TexTileSize.y * v2.y;
  o1.y = r1.w * TexTileSize.y + r2.x;
  r1.w = floor(r0.w);
  r0.w = frac(r0.w);
  o2.x = v2.z * TexTileSize.x + r0.w;
  o2.y = r1.w * TexTileSize.y + r2.x;
  r2.xyz = vfViewPos.xyz + -r1.xyz;
  r0.w = dot(r2.xyz, r0.xyz);
  r3.xyz = r2.xyz * r0.www;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.xyz = r0.xyz * r0.www + -r3.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = 0 != ParticleParams[0].w;
  r3.xyz = v4.zxy * v3.yzx;
  r3.xyz = v4.yzx * v3.zxy + -r3.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r1.w = dot(r3.xyz, r2.xyz);
  r1.w = r1.w < 0;
  r2.xyz = r1.www ? -r3.xyz : r3.xyz;
  o3.xyz = r0.www ? r0.xyz : r2.xyz;
  o3.w = 0;
  o4.xyz = r1.xyz;
  o4.w = 0;
  r0.xyz = v4.xyz + v3.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  o5.z = 4 / r0.x;
  r0.x = saturate(r1.z * vfColGradParams.x + vfColGradParams.y);
  r0.yzw = -g_VS_WorldViewPos.xyz + r1.xyz;
  r1.x = 2 + -r0.x;
  r0.x = r1.x * r0.x;
  r1.xyz = r0.xxx * vfColGradDelta.xyz + vfColGradBase.xyz;
  r0.x = dot(r0.yzw, r0.yzw);
  r1.w = rsqrt(r0.x);
  r0.x = sqrt(r0.x);
  r2.xyz = r1.www * r0.yzw;
  r0.y = vfParams.x * r0.w;
  r0.z = dot(r2.xyz, vfSunDir.xyz);
  r0.z = r0.z * -vfColGradParams.z + vfColGradParams.z;
  r0.z = exp2(r0.z);
  r0.w = saturate(vfColGradRadial.w * r0.x);
  r0.w = log2(r0.w);
  r0.w = vfColGradParams.w * r0.w;
  r0.w = exp2(r0.w);
  r0.z = r0.w * r0.z;
  o6.xyz = r0.zzz * vfColGradRadial.xyz + r1.xyz;
  r0.z = 1.44269502 * r0.y;
  r0.z = exp2(r0.z);
  r0.z = -1 + r0.z;
  r0.z = r0.z / r0.y;
  r0.y = 0.00999999978 < abs(r0.y);
  r0.y = r0.y ? r0.z : 1;
  r0.z = vfParams.y * r0.x;
  r0.x = saturate(r0.x * vfRampParams.x + vfRampParams.y);
  r0.y = r0.y * r0.z;
  r0.y = exp2(-r0.y);
  r0.y = min(1, r0.y);
  r0.y = 1 + -r0.y;
  r0.z = 2 + -r0.x;
  r0.x = r0.x * r0.z;
  r0.x = r0.x * vfRampParams.z + vfRampParams.w;
  r0.x = -r0.y * r0.x + 1;
  o6.w = max(vfParams.w, r0.x);
  o7.w = ParticleParams[0].x * v1.w;
  o7.xyz = v1.zyx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 vfColGradDelta;             // Offset:    0 Size:    12
//   float4 vfRampParams;               // Offset:   16 Size:    16
//   float4 vfColGradRadial;            // Offset:   32 Size:    16
//   float4 vfColGradParams;            // Offset:   48 Size:    16
//   float3 vfColGradBase;              // Offset:   64 Size:    12
//   float4 vfParams;                   // Offset:   80 Size:    16
//   float3 vfSunDir;                   // Offset:   96 Size:    12
//   float4 vfViewPos;                  // Offset:  112 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 TexTileSize;                // Offset:    0 Size:    16
//   float4 ParticleParams[2];          // Offset:   16 Size:    32
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyz         3     NONE   float   xyz 
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// COLOR                    0   xyzw        7     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[2], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyz
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_temps 4
mad r0.xy, v2.zyzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.y, r0.y, v2.w
mul r0.yzw, r0.yyyy, v4.xxyz
mad r0.xyz, v3.xyzx, r0.xxxx, r0.yzwy
add r1.xyz, r0.xyzx, v0.xyzx
mov r1.w, v0.w
dp4 r2.x, cb3[0].xyzw, r1.xyzw
dp4 r2.y, cb3[1].xyzw, r1.xyzw
dp4 r2.w, cb3[3].xyzw, r1.xyzw
dp4 o0.z, cb3[2].xyzw, r1.xyzw
mov o0.xyw, r2.xyxw
mad r2.xy, r2.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r2.wwww
mov o5.w, r2.w
mul o5.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.w, l(0)
mad r0.w, v2.x, cb1[0].z, cb1[0].w
frc o1.z, r0.w
round_ni r0.w, r0.w
mul r1.w, r0.w, cb1[0].x
mad r0.w, r0.w, cb1[0].x, cb1[0].x
frc r2.x, r1.w
round_ni r1.w, r1.w
mad o1.x, v2.z, cb1[0].x, r2.x
mul r2.x, v2.y, cb1[0].y
mad o1.y, r1.w, cb1[0].y, r2.x
round_ni r1.w, r0.w
frc r0.w, r0.w
mad o2.x, v2.z, cb1[0].x, r0.w
mad o2.y, r1.w, cb1[0].y, r2.x
add r2.xyz, -r1.xyzx, cb0[7].xyzx
dp3 r0.w, r2.xyzx, r0.xyzx
mul r3.xyz, r0.wwww, r2.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
mad r0.xyz, r0.xyzx, r0.wwww, -r3.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[1].w
mul r3.xyz, v3.yzxy, v4.zxyz
mad r3.xyz, v4.yzxy, v3.zxyz, -r3.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx
dp3 r1.w, r3.xyzx, r2.xyzx
lt r1.w, r1.w, l(0.000000)
movc r2.xyz, r1.wwww, -r3.xyzx, r3.xyzx
movc o3.xyz, r0.wwww, r0.xyzx, r2.xyzx
mov o3.w, l(0)
mov o4.xyz, r1.xyzx
mov o4.w, l(0)
add r0.xyz, v3.xyzx, v4.xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
div o5.z, l(4.000000), r0.x
mad_sat r0.x, r1.z, cb0[3].x, cb0[3].y
add r0.yzw, r1.xxyz, -cb3[6].xxyz
add r1.x, -r0.x, l(2.000000)
mul r0.x, r0.x, r1.x
mad r1.xyz, r0.xxxx, cb0[0].xyzx, cb0[4].xyzx
dp3 r0.x, r0.yzwy, r0.yzwy
rsq r1.w, r0.x
sqrt r0.x, r0.x
mul r2.xyz, r0.yzwy, r1.wwww
mul r0.y, r0.w, cb0[5].x
dp3 r0.z, r2.xyzx, cb0[6].xyzx
mad r0.z, r0.z, -cb0[3].z, cb0[3].z
exp r0.z, r0.z
mul_sat r0.w, r0.x, cb0[2].w
log r0.w, r0.w
mul r0.w, r0.w, cb0[3].w
exp r0.w, r0.w
mul r0.z, r0.z, r0.w
mad o6.xyz, r0.zzzz, cb0[2].xyzx, r1.xyzx
mul r0.z, r0.y, l(1.442695)
exp r0.z, r0.z
add r0.z, r0.z, l(-1.000000)
div r0.z, r0.z, r0.y
lt r0.y, l(0.010000), |r0.y|
movc r0.y, r0.y, r0.z, l(1.000000)
mul r0.z, r0.x, cb0[5].y
mad_sat r0.x, r0.x, cb0[1].x, cb0[1].y
mul r0.y, r0.z, r0.y
exp r0.y, -r0.y
min r0.y, r0.y, l(1.000000)
add r0.y, -r0.y, l(1.000000)
add r0.z, -r0.x, l(2.000000)
mul r0.x, r0.z, r0.x
mad r0.x, r0.x, cb0[1].z, cb0[1].w
mad r0.x, -r0.y, r0.x, l(1.000000)
max o6.w, r0.x, cb0[5].w
mul o7.w, v1.w, cb1[1].x
mov o7.xyz, v1.zyxz
ret 
// Approximately 93 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Steam\steamapps\common\Lichdom Battlemage\wrapper1349(37,14-15): warning X3578: Output value 'o2' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.33 on Sat Jul 18 05:27:30 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 vfColGradDelta;             // Offset:    0 Size:    12
//   float4 vfRampParams;               // Offset:   16 Size:    16
//   float4 vfColGradRadial;            // Offset:   32 Size:    16
//   float4 vfColGradParams;            // Offset:   48 Size:    16
//   float3 vfColGradBase;              // Offset:   64 Size:    12
//   float4 vfParams;                   // Offset:   80 Size:    16
//   float3 vfSunDir;                   // Offset:   96 Size:    12
//   float4 vfViewPos;                  // Offset:  112 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 TexTileSize;                // Offset:    0 Size:    16
//   float4 ParticleParams[2];          // Offset:   16 Size:    32
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyz 
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xy  
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// COLOR                    0   xyzw        7     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[2], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyz
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_temps 4
mad r0.xy, v2.zyzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.y, r0.y, v2.w
mul r0.yzw, r0.yyyy, v4.xxyz
mad r0.xyz, v3.xyzx, r0.xxxx, r0.yzwy
add r1.xyz, r0.xyzx, v0.xyzx
mov r1.w, v0.w
dp4 r2.x, cb3[0].xyzw, r1.xyzw
dp4 r2.y, cb3[1].xyzw, r1.xyzw
dp4 r2.w, cb3[3].xyzw, r1.xyzw
dp4 o0.z, cb3[2].xyzw, r1.xyzw
mov o0.xyw, r2.xyxw
mad r2.xy, r2.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r2.wwww
mov o5.w, r2.w
mul o5.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.w, l(0)
mad r0.w, v2.x, cb1[0].z, cb1[0].w
frc o1.z, r0.w
round_ni r0.w, r0.w
mul r1.w, r0.w, cb1[0].x
mad r0.w, cb1[0].x, r0.w, cb1[0].x
frc r2.x, r1.w
round_ni r1.w, r1.w
mad o1.x, v2.z, cb1[0].x, r2.x
mul r2.x, v2.y, cb1[0].y
mad o1.y, r1.w, cb1[0].y, r2.x
round_ni r1.w, r0.w
frc r0.w, r0.w
mad o2.x, v2.z, cb1[0].x, r0.w
mad o2.y, r1.w, cb1[0].y, r2.x
add r2.xyz, -r1.xyzx, cb0[7].xyzx
dp3 r0.w, r2.xyzx, r0.xyzx
mul r3.xyz, r0.wwww, r2.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
mad r0.xyz, r0.xyzx, r0.wwww, -r3.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
ne r0.w, l(0.000000), cb1[1].w
mul r3.xyz, v3.yzxy, v4.zxyz
mad r3.xyz, v4.yzxy, v3.zxyz, -r3.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx
dp3 r1.w, r3.xyzx, r2.xyzx
lt r1.w, r1.w, l(0.000000)
movc r2.xyz, r1.wwww, -r3.xyzx, r3.xyzx
movc o3.xyz, r0.wwww, r0.xyzx, r2.xyzx
mov o3.w, l(0)
mov o4.xyz, r1.xyzx
mov o4.w, l(0)
add r0.xyz, v3.xyzx, v4.xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
div o5.z, l(4.000000), r0.x
mad_sat r0.x, r1.z, cb0[3].x, cb0[3].y
add r0.yzw, r1.xxyz, -cb3[6].xxyz
add r1.x, -r0.x, l(2.000000)
mul r0.x, r0.x, r1.x
mad r1.xyz, r0.xxxx, cb0[0].xyzx, cb0[4].xyzx
dp3 r0.x, r0.yzwy, r0.yzwy
rsq r1.w, r0.x
sqrt r0.x, r0.x
mul r2.xyz, r0.yzwy, r1.wwww
mul r0.y, r0.w, cb0[5].x
dp3 r0.z, r2.xyzx, cb0[6].xyzx
mad r0.z, r0.z, -cb0[3].z, cb0[3].z
exp r0.z, r0.z
mul_sat r0.w, r0.x, cb0[2].w
log r0.w, r0.w
mul r0.w, r0.w, cb0[3].w
exp r0.w, r0.w
mul r0.z, r0.z, r0.w
mad o6.xyz, r0.zzzz, cb0[2].xyzx, r1.xyzx
mul r0.z, r0.y, l(1.442695)
exp r0.z, r0.z
add r0.z, r0.z, l(-1.000000)
div r0.z, r0.z, r0.y
lt r0.y, l(0.010000), |r0.y|
movc r0.y, r0.y, r0.z, l(1.000000)
mul r0.z, r0.x, cb0[5].y
mad_sat r0.x, r0.x, cb0[1].x, cb0[1].y
mul r0.y, r0.z, r0.y
exp r0.y, -r0.y
min r0.y, r0.y, l(1.000000)
add r0.y, -r0.y, l(1.000000)
add r0.z, -r0.x, l(2.000000)
mul r0.x, r0.z, r0.x
mad r0.x, r0.x, cb0[1].z, cb0[1].w
mad r0.x, -r0.y, r0.x, l(1.000000)
max o6.w, r0.x, cb0[5].w
mul o7.w, v1.w, cb1[1].x
mov o7.xyz, v1.zyxz
ret 
// Approximately 93 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
