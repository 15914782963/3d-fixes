// Decals inside buildings in ice level village

cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 g_WorldViewPos : packoffset(c2);
  row_major float4x4 g_mLightProj : packoffset(c3);
  float4 g_ScreenScale : packoffset(c7);
  float4 vWBasisX : packoffset(c8);
  float4 vWBasisY : packoffset(c9);
  float4 vWBasisZ : packoffset(c10);
  row_major float4x4 g_mDecalTS : packoffset(c11);
  float4 g_SnowParams : packoffset(c15);
  float4 g_DecalSpecColor : packoffset(c16);
  float4 g_DecalParams : packoffset(c17);
  float4 PS_NearFarClipDist : packoffset(c18);
  float4 PS_ScreenSize : packoffset(c19);
  row_major float4x4 g_mDecalTCModMatrix : packoffset(c20);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
SamplerState _tex2_s : register(s2);
SamplerState _tex3_s : register(s3);
SamplerState _tex5_s : register(s5);
SamplerState _tex6_s : register(s6);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);
Texture2D<float4> _tex2 : register(t2);
Texture2D<float4> _tex3 : register(t3);
Texture2D<float4> _tex5 : register(t5);
Texture2D<float4> _tex6 : register(t6);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4,

// Despite not using these matrices in this shader, if we don't define them fxc
// will mess up the texcoord indexes for the next two:
row_major matrix vp : TEXCOORD0,
row_major matrix ivp : TEXCOORD4,

float4 g_VS_NearFarClipDist : TEXCOORD9,
float4 g_VS_ScreenSize : TEXCOORD10

  )
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  r0.z = _tex0.Sample(_tex0_s, r0.xy).x;

// Use same pattern as lighting shaders to fix this decal placement + lighting:
float4 stereo = StereoParams.Load(0);
float depth = r0.z * g_VS_NearFarClipDist.y;
v0.x -= stereo.x * (depth - stereo.y) / depth * g_VS_ScreenSize.x / 2;

  r1.xyz = vWBasisX.xyz * v0.xxx + vWBasisZ.xyz;
  r1.xyz = vWBasisY.xyz * v0.yyy + r1.xyz;
  r1.xyz = r1.xyz * r0.zzz + g_WorldViewPos.xyz;
  r1.w = 1;
  r2.x = dot(g_mLightProj._m00_m01_m02_m03, r1.xyzw);
  r2.y = dot(g_mLightProj._m10_m11_m12_m13, r1.xyzw);
  r2.z = dot(g_mLightProj._m20_m21_m22_m23, r1.xyzw);
  r0.z = dot(g_mLightProj._m30_m31_m32_m33, r1.xyzw);
  r1.xyz = r2.xyz / r0.zzz;
  r3.xyzw = r1.xyxy * float4(1,1,-1,-1) + float4(0,0,1,1);
  r3.xyzw = r3.xyzw < float4(0,0,0,0);
  r0.zw = (int2)r3.zw | (int2)r3.xy;
  r0.z = (int)r0.w | (int)r0.z;
  if (r0.z != 0) discard;
  r0.z = r1.z < 0;
  if (r0.z != 0) discard;
  r0.z = _tex5.Sample(_tex5_s, r0.xy).x;
  r0.z = 255 * r0.z;
  r0.z = (uint)r0.z;
  r0.z = (uint)r0.z >> 6;
  r0.w = (int)r0.z != 0;
  if (r0.w != 0) discard;
  r1.zw = g_mDecalTCModMatrix._m10_m11 * r1.yy;
  r1.zw = r1.xx * g_mDecalTCModMatrix._m00_m01 + r1.zw;
  r1.zw = g_mDecalTCModMatrix._m20_m21 + r1.zw;
  r1.zw = g_mDecalTCModMatrix._m30_m31 + r1.zw;
  r0.w = g_DecalParams.y * r2.z;
  r0.w = log2(r0.w);
  r0.w = g_DecalParams.x * r0.w;
  r0.w = exp2(r0.w);
  r0.w = 1 + -r0.w;
  r0.w = max(0, r0.w);
  r2.xyzw = _tex2.Sample(_tex2_s, r1.zw).xyzw;
  r1.x = _tex6.Sample(_tex6_s, r1.xy).x;
  r1.x = r2.w * r1.x;
  r3.xyz = _tex1.Sample(_tex1_s, r0.xy).xyz;
  r3.xyz = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r3.xyz = r3.xyz * r0.xxx;
  r0.x = saturate(dot(g_LightPos.xyz, r3.xyz));
  r0.x = r1.x * r0.x + -r1.x;
  r0.x = g_LightPos.w * r0.x + r1.x;
  r2.xyz = g_LightDiffuse.xyz * r2.xyz;
  r0.y = g_LightDiffuse.w * r0.w;
  r0.w = r0.x * r0.y;
  o0.xyz = sqrt(r2.xyz);
  r1.xy = _tex3.Sample(_tex3_s, r1.zw).xy;
  r1.xy = r1.yx * float2(2,2) + float2(-1,-1);
  r0.y = dot(r1.xy, -r1.xy);
  r0.y = saturate(1 + r0.y);
  r0.y = sqrt(r0.y);
  r1.yzw = g_mDecalTS._m10_m11_m12 * r1.yyy;
  r1.xyz = r1.xxx * g_mDecalTS._m00_m01_m02 + r1.yzw;
  r1.xyz = r0.yyy * g_mDecalTS._m20_m21_m22 + r1.xyz;
  o1.xyz = r1.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o3.x = r0.z ? 0.498039216 : 0.247058824;
  r0.y = saturate(r0.w + r0.w);
  r0.z = saturate(g_SnowParams.x);
  o4.w = r0.y * r0.z;
  o0.w = r0.w;
  o1.w = r0.w;
  r0.x = 0;
  o2.xyzw = r0.xxxw;
  o3.y = g_DecalSpecColor.w;
  o3.zw = r0.xw;
  o4.xyz = float3(0,0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.1.31 on Sun Jul 12 19:50:09 2015
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 g_WorldViewPos;             // Offset:   32 Size:    16
//   row_major float4x4 g_mLightProj;   // Offset:   48 Size:    64
//   float4 g_ScreenScale;              // Offset:  112 Size:    16
//   float4 vWBasisX;                   // Offset:  128 Size:    16
//   float4 vWBasisY;                   // Offset:  144 Size:    16
//   float4 vWBasisZ;                   // Offset:  160 Size:    16
//   row_major float4x4 g_mDecalTS;     // Offset:  176 Size:    64
//   float4 g_SnowParams;               // Offset:  240 Size:    16
//   float4 g_DecalSpecColor;           // Offset:  256 Size:    16
//   float4 g_DecalParams;              // Offset:  272 Size:    16
//   float4 PS_NearFarClipDist;         // Offset:  288 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:  304 Size:    16 [unused]
//   row_major float4x4 g_mDecalTCModMatrix;// Offset:  320 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex1                             sampler      NA          NA    1        1
// _tex2                             sampler      NA          NA    2        1
// _tex3                             sampler      NA          NA    3        1
// _tex5                             sampler      NA          NA    5        1
// _tex6                             sampler      NA          NA    6        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _tex2                             texture  float4          2d    2        1
// _tex3                             texture  float4          2d    3        1
// _tex5                             texture  float4          2d    5        1
// _tex6                             texture  float4          2d    6        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[24], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 4
mad r0.xy, v0.xyxx, cb0[7].xyxx, cb0[7].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t0.yzxw, s0
mad r1.xyz, cb0[8].xyzx, v0.xxxx, cb0[10].xyzx
mad r1.xyz, cb0[9].xyzx, v0.yyyy, r1.xyzx
mad r1.xyz, r1.xyzx, r0.zzzz, cb0[2].xyzx
mov r1.w, l(1.000000)
dp4 r2.x, cb0[3].xyzw, r1.xyzw
dp4 r2.y, cb0[4].xyzw, r1.xyzw
dp4 r2.z, cb0[5].xyzw, r1.xyzw
dp4 r0.z, cb0[6].xyzw, r1.xyzw
div r1.xyz, r2.xyzx, r0.zzzz
mad r3.xyzw, r1.xyxy, l(1.000000, 1.000000, -1.000000, -1.000000), l(0.000000, 0.000000, 1.000000, 1.000000)
lt r3.xyzw, r3.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.zw, r3.zzzw, r3.xxxy
or r0.z, r0.w, r0.z
discard_nz r0.z
lt r0.z, r1.z, l(0.000000)
discard_nz r0.z
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t5.yzxw, s5
mul r0.z, r0.z, l(255.000000)
ftou r0.z, r0.z
ushr r0.z, r0.z, l(6)
ine r0.w, r0.z, l(0)
discard_nz r0.w
mul r1.zw, r1.yyyy, cb0[21].xxxy
mad r1.zw, r1.xxxx, cb0[20].xxxy, r1.zzzw
add r1.zw, r1.zzzw, cb0[22].xxxy
add r1.zw, r1.zzzw, cb0[23].xxxy
mul r0.w, r2.z, cb0[17].y
log r0.w, r0.w
mul r0.w, r0.w, cb0[17].x
exp r0.w, r0.w
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.zwzz, t2.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t6.xyzw, s6
mul r1.x, r1.x, r2.w
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r0.xyxx, t1.xyzw, s1
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul r3.xyz, r0.xxxx, r3.xyzx
dp3_sat r0.x, cb0[0].xyzx, r3.xyzx
mad r0.x, r1.x, r0.x, -r1.x
mad r0.x, cb0[0].w, r0.x, r1.x
mul r2.xyz, r2.xyzx, cb0[1].xyzx
mul r0.y, r0.w, cb0[1].w
mul r0.w, r0.y, r0.x
sqrt o0.xyz, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xy, r1.zwzz, t3.xyzw, s3
mad r1.xy, r1.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.y, r1.xyxx, -r1.xyxx
add_sat r0.y, r0.y, l(1.000000)
sqrt r0.y, r0.y
mul r1.yzw, r1.yyyy, cb0[12].xxyz
mad r1.xyz, r1.xxxx, cb0[11].xyzx, r1.yzwy
mad r1.xyz, r0.yyyy, cb0[13].xyzx, r1.xyzx
mad o1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
movc o3.x, r0.z, l(0.498039), l(0.247059)
add_sat r0.y, r0.w, r0.w
mov_sat r0.z, cb0[15].x
mul o4.w, r0.z, r0.y
mov o0.w, r0.w
mov o1.w, r0.w
mov r0.x, l(0)
mov o2.xyzw, r0.xxxw
mov o3.y, cb0[16].w
mov o3.zw, r0.xxxw
mov o4.xyz, l(0,0,0,0)
ret 
// Approximately 70 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
