
cbuffer PER_BATCH : register(b0)
{
  float4 LightningColSize : packoffset(c0);
  float4 LightningPos : packoffset(c1);
  float4 vfViewPos : packoffset(c2);
}
SamplerState zMap_s : register(s0);
Texture2D<float4> zMap : register(t0);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,

row_major matrix vp : TEXCOORD2,
row_major matrix ivp : TEXCOORD6

  )
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = -vfViewPos.xyz + LightningPos.xyz;
  r0.xyz = LightningColSize.www * r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = 1 + r0.w;
  r1.x = zMap.Sample(zMap_s, v1.xy).x;

// Fixes glow around lightning:
float4 stereo = StereoParams.Load(0);
float4 tmp = mul(vp, v2 * r1.x);
tmp.x -= stereo.x * (tmp.w - stereo.y);
v2 = mul(ivp, tmp) / r1.x;

  r1.xyz = v2.xyz * r1.xxx;
  r1.xyz = LightningColSize.www * r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r0.x = dot(r0.xyz, r1.xyz);
  r0.y = -2 * r0.x;
  r0.z = r1.w * r0.w;
  r0.w = r0.y * r0.y;
  r0.z = r0.z * 4 + -r0.w;
  r0.z = rsqrt(r0.z);
  r0.x = r1.w * 2 + r0.y;
  r0.xy = r0.xy * r0.zz;
  r0.w = sqrt(r1.w);
  r0.w = r0.w + r0.w;
  r1.xy = max(float2(1,1), abs(r0.xy));
  r1.xy = float2(1,1) / r1.xy;
  r1.zw = min(float2(1,1), abs(r0.xy));
  r1.xy = r1.zw * r1.xy;
  r1.zw = r1.xy * r1.xy;
  r2.xy = r1.zw * float2(0.0208350997,0.0208350997) + float2(-0.0851330012,-0.0851330012);
  r2.xy = r1.zw * r2.xy + float2(0.180141002,0.180141002);
  r2.xy = r1.zw * r2.xy + float2(-0.330299497,-0.330299497);
  r1.zw = r1.zw * r2.xy + float2(0.999866009,0.999866009);
  r2.xy = r1.xy * r1.zw;
  r2.xy = r2.xy * float2(-2,-2) + float2(1.57079637,1.57079637);
  r2.zw = float2(1,1) < abs(r0.xy);
  r0.xy = min(float2(1,1), r0.xy);
  r0.xy = r0.xy < -r0.xy;
  r2.xy = r2.zw ? r2.xy : 0;
  r1.xy = r1.xy * r1.zw + r2.xy;
  r0.xy = r0.xy ? -r1.xy : r1.xy;
  r0.x = r0.x + -r0.y;
  r0.x = r0.w * r0.x;
  r0.x = r0.x * r0.z;
  o0.xyz = LightningColSize.xyz * r0.xxx;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.1.33 on Sat Jul 18 22:49:59 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 LightningColSize;           // Offset:    0 Size:    16
//   float4 LightningPos;               // Offset:   16 Size:    16
//   float4 vfViewPos;                  // Offset:   32 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// zMap                              sampler      NA          NA    0        1
// zMap                              texture  float4          2d    0        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 3
add r0.xyz, cb0[1].xyzx, -cb0[2].xyzx
mul r0.xyz, r0.xyzx, cb0[0].wwww
dp3 r0.w, r0.xyzx, r0.xyzx
add r0.w, r0.w, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t0.xyzw, s0
mul r1.xyz, r1.xxxx, v2.xyzx
mul r1.xyz, r1.xyzx, cb0[0].wwww
dp3 r1.w, r1.xyzx, r1.xyzx
dp3 r0.x, r0.xyzx, r1.xyzx
mul r0.y, r0.x, l(-2.000000)
mul r0.z, r0.w, r1.w
mul r0.w, r0.y, r0.y
mad r0.z, r0.z, l(4.000000), -r0.w
rsq r0.z, r0.z
mad r0.x, r1.w, l(2.000000), r0.y
mul r0.xy, r0.zzzz, r0.xyxx
sqrt r0.w, r1.w
add r0.w, r0.w, r0.w
max r1.xy, |r0.xyxx|, l(1.000000, 1.000000, 0.000000, 0.000000)
div r1.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r1.xyxx
min r1.zw, |r0.xxxy|, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r1.xy, r1.xyxx, r1.zwzz
mul r1.zw, r1.xxxy, r1.xxxy
mad r2.xy, r1.zwzz, l(0.020835, 0.020835, 0.000000, 0.000000), l(-0.085133, -0.085133, 0.000000, 0.000000)
mad r2.xy, r1.zwzz, r2.xyxx, l(0.180141, 0.180141, 0.000000, 0.000000)
mad r2.xy, r1.zwzz, r2.xyxx, l(-0.330299, -0.330299, 0.000000, 0.000000)
mad r1.zw, r1.zzzw, r2.xxxy, l(0.000000, 0.000000, 0.999866, 0.999866)
mul r2.xy, r1.zwzz, r1.xyxx
mad r2.xy, r2.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(1.570796, 1.570796, 0.000000, 0.000000)
lt r2.zw, l(0.000000, 0.000000, 1.000000, 1.000000), |r0.xxxy|
min r0.xy, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
lt r0.xy, r0.xyxx, -r0.xyxx
and r2.xy, r2.zwzz, r2.xyxx
mad r1.xy, r1.xyxx, r1.zwzz, r2.xyxx
movc r0.xy, r0.xyxx, -r1.xyxx, r1.xyxx
add r0.x, -r0.y, r0.x
mul r0.x, r0.x, r0.w
mul r0.x, r0.z, r0.x
mul o0.xyz, r0.xxxx, cb0[0].xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 41 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
