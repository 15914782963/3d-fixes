
cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 g_vProjectionParams : packoffset(c2);
  float4 PS_NearFarClipDist : packoffset(c3);
  float4 PS_ScreenSize : packoffset(c4);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
SamplerState _cubetex2_s : register(s2);
SamplerState _cubetex3_s : register(s3);
SamplerState _texA_s : register(s10);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);
TextureCube<float4> _cubetex2 : register(t2);
TextureCube<float4> _cubetex3 : register(t3);
Texture2D<float4> _texA : register(t10);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = _tex0.Sample(_tex0_s, v1.xy).x;
  r0.xyz = -r0.xxx * v2.xyz + g_LightPos.xyz;
  r0.xyz = g_LightPos.www * r0.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.x = max(r0.x, 0.000000000e+000);
  o0.w = r0.x;
  o1.w = r0.x;
  r0.xyz = _tex1.Sample(_tex1_s, v1.xy).xyz;
  r0.xyz = r0.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyzw = _cubetex2.Sample(_cubetex2_s, r0.xyz).xyzw;
  r0.w = 1.600000000e+001 * r1.w;
  r1.xyz = r1.xyz * r0.www;
  o0.xyz = g_LightDiffuse.xyz * r1.xyz;
  r0.w = dot(v2.xyz, v2.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v2.xyz * r0.www;
  r0.w = dot(r1.xyz, r0.xyz);
  r0.w = r0.w + r0.w;
  r0.xyz = r0.xyz * -r0.www + r1.xyz;
  r0.w = _texA.Sample(_texA_s, v1.xy).y;
  r0.w = -r0.w * 6.000000000e+000 + 6.000000000e+000;
  r0.xyzw = _cubetex3.SampleLevel(_cubetex3_s, r0.xyz, r0.w).xyzw;
  r0.w = 1.600000000e+001 * r0.w;
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = g_LightDiffuse.xyz * g_LightDiffuse.www;
  o1.xyz = r1.xyz * r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 g_vProjectionParams;        // Offset:   32 Size:    16 [unused]
//   float4 PS_NearFarClipDist;         // Offset:   48 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:   64 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex1                             sampler      NA          NA    1        1
// _cubetex2                         sampler      NA          NA    2        1
// _cubetex3                         sampler      NA          NA    3        1
// _texA                             sampler      NA          NA   10        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _cubetex2                         texture  float4        cube    2        1
// _cubetex3                         texture  float4        cube    3        1
// _texA                             texture  float4          2d   10        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s10, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
mad r0.xyz, -r0.xxxx, v2.xyzx, cb0[0].xyzx
mul r0.xyz, r0.xyzx, cb0[0].wwww
dp3 r0.x, r0.xyzx, r0.xyzx
add r0.x, -r0.x, l(1.000000)
max r0.x, r0.x, l(0.000000)
mov o0.w, r0.x
mov o1.w, r0.x
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t1.xyzw, s1
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
sample_indexable(texturecube)(float,float,float,float) r1.xyzw, r0.xyzx, t2.xyzw, s2
mul r0.w, r1.w, l(16.000000)
mul r1.xyz, r0.wwww, r1.xyzx
mul o0.xyz, r1.xyzx, cb0[1].xyzx
dp3 r0.w, v2.xyzx, v2.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v2.xyzx
dp3 r0.w, r1.xyzx, r0.xyzx
add r0.w, r0.w, r0.w
mad r0.xyz, r0.xyzx, -r0.wwww, r1.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t10.xzwy, s10
mad r0.w, -r0.w, l(6.000000), l(6.000000)
sample_l_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.xyzx, t3.xyzw, s3, r0.w
mul r0.w, r0.w, l(16.000000)
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, cb0[1].wwww, cb0[1].xyzx
mul o1.xyz, r0.xyzx, r1.xyzx
ret 
// Approximately 31 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 g_vProjectionParams;        // Offset:   32 Size:    16 [unused]
//   float4 PS_NearFarClipDist;         // Offset:   48 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:   64 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0_s                           sampler      NA          NA    0        1
// _tex1_s                           sampler      NA          NA    1        1
// _cubetex2_s                       sampler      NA          NA    2        1
// _cubetex3_s                       sampler      NA          NA    3        1
// _texA_s                           sampler      NA          NA   10        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _cubetex2                         texture  float4        cube    2        1
// _cubetex3                         texture  float4        cube    3        1
// _texA                             texture  float4          2d   10        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s10, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
mad r0.xyz, -r0.xxxx, v2.xyzx, cb0[0].xyzx
mul r0.xyz, r0.xyzx, cb0[0].wwww
dp3 r0.x, r0.xyzx, r0.xyzx
add r0.x, -r0.x, l(1.000000)
max r0.x, r0.x, l(0.000000)
mov o0.w, r0.x
mov o1.w, r0.x
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t1.xyzw, s1
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
sample_indexable(texturecube)(float,float,float,float) r1.xyzw, r0.xyzx, t2.xyzw, s2
mul r0.w, r1.w, l(16.000000)
mul r1.xyz, r0.wwww, r1.xyzx
mul o0.xyz, r1.xyzx, cb0[1].xyzx
dp3 r0.w, v2.xyzx, v2.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v2.xyzx
dp3 r0.w, r1.xyzx, r0.xyzx
add r0.w, r0.w, r0.w
mad r0.xyz, r0.xyzx, -r0.wwww, r1.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t10.xzwy, s10
mad r0.w, r0.w, l(-6.000000), l(6.000000)
sample_l_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.xyzx, t3.xyzw, s3, r0.w
mul r0.w, r0.w, l(16.000000)
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, cb0[1].wwww, cb0[1].xyzx
mul o1.xyz, r0.xyzx, r1.xyzx
ret 
// Approximately 31 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
