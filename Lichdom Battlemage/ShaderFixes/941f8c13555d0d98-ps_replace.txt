// Unverified light / shadow fix

cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  row_major float4x4 g_mLightProj : packoffset(c2);
  float4 g_ScreenScale : packoffset(c6);
  float4 vWBasisX : packoffset(c7);
  float4 vWBasisY : packoffset(c8);
  float4 vWBasisZ : packoffset(c9);
  float4 irreg_kernel_2d[8] : packoffset(c10);
  float4 PS_NearFarClipDist : packoffset(c18);
  float4 PS_ScreenSize : packoffset(c19);
  row_major float4x4 g_mDecalTCModMatrix : packoffset(c20);
  float4 SSDOParams : packoffset(c24);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
SamplerState _tex2_s : register(s2);
SamplerState _tex8_s : register(s8);
SamplerState _texA_s : register(s10);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);
Texture2D<float4> _tex2 : register(t2);
Texture2D<float4> _tex8 : register(t8);
Texture2D<float4> _texA : register(t10);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,

float4 g_VS_NearFarClipDist : TEXCOORD0,
float4 g_VS_ScreenSize : TEXCOORD1

  )
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy * g_ScreenScale.xy + g_ScreenScale.zw;
  r0.z = _tex0.Sample(_tex0_s, r0.xy).x;

// Align shadows with ground. Scale the z buffer to get the depth and subtract
// the stereo correction formula. We have to take the perspective divide into
// account and multiply by the horizontal resolution since v0 is in pixels.
float4 stereo = StereoParams.Load(0);
float depth = r0.z * g_VS_NearFarClipDist.y;
v0.x -= stereo.x * (depth - stereo.y) / depth * g_VS_ScreenSize.x / 2;

  r1.xyz = vWBasisX.xyz * v0.xxx + vWBasisZ.xyz;
  r1.xyz = vWBasisY.xyz * v0.yyy + r1.xyz;
  r2.xyz = r1.xyz * r0.zzz;
  r1.xyz = -r1.xyz * r0.zzz + g_LightPos.xyz;
  r3.xyz = g_LightPos.www * r1.xyz;
  r0.z = dot(r3.xyz, r3.xyz);
  r0.z = 1.000000000e+000 + -r0.z;
  r0.z = max(0.000000000e+000, r0.z);
  r3.xyz = _tex1.Sample(_tex1_s, r0.xy).xyz;
  r3.xyz = r3.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.w = _texA.Sample(_texA_s, r0.xy).y;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r2.w = 1.000000000e+000;
  r4.x = dot(g_mLightProj._m00_m01_m02_m03, r2.xyzw);
  r4.y = dot(g_mLightProj._m10_m11_m12_m13, r2.xyzw);
  r2.w = dot(g_mLightProj._m30_m31_m32_m33, r2.xyzw);
  r4.xy = r4.xy / r2.ww;
  r4.yz = g_mDecalTCModMatrix._m10_m11 * r4.yy;
  r4.xy = r4.xx * g_mDecalTCModMatrix._m00_m01 + r4.yz;
  r4.xy = g_mDecalTCModMatrix._m20_m21 + r4.xy;
  r4.xy = g_mDecalTCModMatrix._m30_m31 + r4.xy;
  r4.xyz = _tex2.SampleLevel(_tex2_s, r4.xy, 0.000000000e+000).xyz;
  r2.w = saturate(dot(r1.xyz, r3.xyz));
  r4.xyz = r2.www * r4.xyz;
  r4.xyz = g_LightDiffuse.xyz * r4.xyz;
  r4.xyz = r4.xyz * r0.zzz;
  r5.xyzw = _tex8.Sample(_tex8_s, r0.xy).xyzw;
  r1.w = 2.820900083e-001;
  r5.xyzw = r5.xyzw * float4(9.772000e-001,9.772000e-001,9.772000e-001,1.000000e+000) + float4(-4.886000e-001,-4.886000e-001,-4.886000e-001,0.000000e+000);
  r0.x = dot(r1.xyzw, r5.xyzw);
  r0.x = saturate(SSDOParams.x * r0.x);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.xyz = r4.xyz * r0.xxx;
  r1.w = dot(-r2.xyz, -r2.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = -r2.xyz * r1.www + r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r0.w = r0.w * 1.000000000e+001 + 1.000000000e+000;
  r0.w = exp2(r0.w);
  r1.w = r0.w * 1.250000000e-001 + 2.500000000e-001;
  r1.x = saturate(dot(r3.xyz, r1.xyz));
  r1.x = log2(r1.x);
  r0.w = r1.x * r0.w;
  r0.w = exp2(r0.w);
  r0.w = r1.w * r0.w;
  r1.xyz = g_LightDiffuse.www * r0.xyz;
  r1.xyz = r1.xyz * r0.www;
  r0.w = dot(r0.xyz, float3(1.000000e+000,1.000000e+000,1.000000e+000));
  r0.w = abs(r0.w) < 9.999999975e-007;
  r1.w = dot(r1.xyz, float3(1.000000e+000,1.000000e+000,1.000000e+000));
  r1.w = abs(r1.w) < 9.999999975e-007;
  r0.w = r0.w ? r1.w : 0;
  if (r0.w != 0) discard;
  o0.xyz = r0.xyz;
  o0.w = 0.000000000e+000;
  o1.xyz = r1.xyz;
  o1.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   row_major float4x4 g_mLightProj;   // Offset:   32 Size:    64
//   float4 g_ScreenScale;              // Offset:   96 Size:    16
//   float4 vWBasisX;                   // Offset:  112 Size:    16
//   float4 vWBasisY;                   // Offset:  128 Size:    16
//   float4 vWBasisZ;                   // Offset:  144 Size:    16
//   float4 irreg_kernel_2d[8];         // Offset:  160 Size:   128 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  288 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:  304 Size:    16 [unused]
//   row_major float4x4 g_mDecalTCModMatrix;// Offset:  320 Size:    64
//   float4 SSDOParams;                 // Offset:  384 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex1                             sampler      NA          NA    1        1
// _tex2                             sampler      NA          NA    2        1
// _tex8                             sampler      NA          NA    8        1
// _texA                             sampler      NA          NA   10        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _tex2                             texture  float4          2d    2        1
// _tex8                             texture  float4          2d    8        1
// _texA                             texture  float4          2d   10        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[25], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s8, mode_default
dcl_sampler s10, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 6
mad r0.xy, v0.xyxx, cb0[6].xyxx, cb0[6].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t0.yzxw, s0
mad r1.xyz, cb0[7].xyzx, v0.xxxx, cb0[9].xyzx
mad r1.xyz, cb0[8].xyzx, v0.yyyy, r1.xyzx
mul r2.xyz, r0.zzzz, r1.xyzx
mad r1.xyz, -r1.xyzx, r0.zzzz, cb0[0].xyzx
mul r3.xyz, r1.xyzx, cb0[0].wwww
dp3 r0.z, r3.xyzx, r3.xyzx
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000000)
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r0.xyxx, t1.xyzw, s1
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.w, r0.xyxx, t10.xzwy, s10
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mov r2.w, l(1.000000)
dp4 r4.x, cb0[2].xyzw, r2.xyzw
dp4 r4.y, cb0[3].xyzw, r2.xyzw
dp4 r2.w, cb0[5].xyzw, r2.xyzw
div r4.xy, r4.xyxx, r2.wwww
mul r4.yz, r4.yyyy, cb0[21].xxyx
mad r4.xy, r4.xxxx, cb0[20].xyxx, r4.yzyy
add r4.xy, r4.xyxx, cb0[22].xyxx
add r4.xy, r4.xyxx, cb0[23].xyxx
sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t2.xyzw, s2, l(0.000000)
dp3_sat r2.w, r1.xyzx, r3.xyzx
mul r4.xyz, r4.xyzx, r2.wwww
mul r4.xyz, r4.xyzx, cb0[1].xyzx
mul r4.xyz, r0.zzzz, r4.xyzx
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r0.xyxx, t8.xyzw, s8
mov r1.w, l(0.282090)
mad r5.xyzw, r5.xyzw, l(0.977200, 0.977200, 0.977200, 1.000000), l(-0.488600, -0.488600, -0.488600, 0.000000)
dp4 r0.x, r1.xyzw, r5.xyzw
mul_sat r0.x, r0.x, cb0[24].x
add r0.x, -r0.x, l(1.000000)
mul r0.xyz, r0.xxxx, r4.xyzx
dp3 r1.w, -r2.xyzx, -r2.xyzx
rsq r1.w, r1.w
mad r1.xyz, -r2.xyzx, r1.wwww, r1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.w, r0.w, l(10.000000), l(1.000000)
exp r0.w, r0.w
mad r1.w, r0.w, l(0.125000), l(0.250000)
dp3_sat r1.x, r3.xyzx, r1.xyzx
log r1.x, r1.x
mul r0.w, r0.w, r1.x
exp r0.w, r0.w
mul r0.w, r0.w, r1.w
mul r1.xyz, r0.xyzx, cb0[1].wwww
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r0.w, |r0.w|, l(0.000001)
dp3 r1.w, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r1.w, |r1.w|, l(0.000001)
and r0.w, r0.w, r1.w
discard_nz r0.w
mov o0.xyz, r0.xyzx
mov o0.w, l(0)
mov o1.xyz, r1.xyzx
mov o1.w, l(0)
ret 
// Approximately 67 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.26 on Sat Jul 04 14:02:21 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   row_major float4x4 g_mLightProj;   // Offset:   32 Size:    64
//   float4 g_ScreenScale;              // Offset:   96 Size:    16
//   float4 vWBasisX;                   // Offset:  112 Size:    16
//   float4 vWBasisY;                   // Offset:  128 Size:    16
//   float4 vWBasisZ;                   // Offset:  144 Size:    16
//   float4 irreg_kernel_2d[8];         // Offset:  160 Size:   128 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  288 Size:    16 [unused]
//   float4 PS_ScreenSize;              // Offset:  304 Size:    16 [unused]
//   row_major float4x4 g_mDecalTCModMatrix;// Offset:  320 Size:    64
//   float4 SSDOParams;                 // Offset:  384 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0_s                           sampler      NA          NA    0        1
// _tex1_s                           sampler      NA          NA    1        1
// _tex2_s                           sampler      NA          NA    2        1
// _tex8_s                           sampler      NA          NA    8        1
// _texA_s                           sampler      NA          NA   10        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _tex2                             texture  float4          2d    2        1
// _tex8                             texture  float4          2d    8        1
// _texA                             texture  float4          2d   10        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[25], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s8, mode_default
dcl_sampler s10, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 6
mad r0.xy, v0.xyxx, cb0[6].xyxx, cb0[6].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t0.yzxw, s0
mad r1.xyz, cb0[7].xyzx, v0.xxxx, cb0[9].xyzx
mad r1.xyz, cb0[8].xyzx, v0.yyyy, r1.xyzx
mul r2.xyz, r0.zzzz, r1.xyzx
mad r1.xyz, -r1.xyzx, r0.zzzz, cb0[0].xyzx
mul r3.xyz, r1.xyzx, cb0[0].wwww
dp3 r0.z, r3.xyzx, r3.xyzx
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000000)
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r0.xyxx, t1.xyzw, s1
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.w, r0.xyxx, t10.xzwy, s10
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mov r2.w, l(1.000000)
dp4 r4.x, cb0[2].xyzw, r2.xyzw
dp4 r4.y, cb0[3].xyzw, r2.xyzw
dp4 r2.w, cb0[5].xyzw, r2.xyzw
div r4.xy, r4.xyxx, r2.wwww
mul r4.yz, r4.yyyy, cb0[21].xxyx
mad r4.xy, r4.xxxx, cb0[20].xyxx, r4.yzyy
add r4.xy, r4.xyxx, cb0[22].xyxx
add r4.xy, r4.xyxx, cb0[23].xyxx
sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t2.xyzw, s2, l(0.000000)
dp3_sat r2.w, r1.xyzx, r3.xyzx
mul r4.xyz, r4.xyzx, r2.wwww
mul r4.xyz, r4.xyzx, cb0[1].xyzx
mul r4.xyz, r0.zzzz, r4.xyzx
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r0.xyxx, t8.xyzw, s8
mad r5.xyzw, r5.xyzw, l(0.977200, 0.977200, 0.977200, 1.000000), l(-0.488600, -0.488600, -0.488600, 0.000000)
mov r1.w, l(0.282090)
dp4 r0.x, r1.xyzw, r5.xyzw
mul_sat r0.x, r0.x, cb0[24].x
add r0.x, -r0.x, l(1.000000)
mul r0.xyz, r0.xxxx, r4.xyzx
dp3 r1.w, -r2.xyzx, -r2.xyzx
rsq r1.w, r1.w
mad r1.xyz, -r2.xyzx, r1.wwww, r1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.w, r0.w, l(10.000000), l(1.000000)
exp r0.w, r0.w
mad r1.w, r0.w, l(0.125000), l(0.250000)
dp3_sat r1.x, r3.xyzx, r1.xyzx
log r1.x, r1.x
mul r0.w, r0.w, r1.x
exp r0.w, r0.w
mul r0.w, r0.w, r1.w
mul r1.xyz, r0.xyzx, cb0[1].wwww
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r0.w, |r0.w|, l(0.000001)
dp3 r1.w, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r1.w, |r1.w|, l(0.000001)
and r0.w, r0.w, r1.w
discard_nz r0.w
mov o0.xyz, r0.xyzx
mov o0.w, l(0)
mov o1.xyz, r1.xyzx
mov o1.w, l(0)
ret 
// Approximately 67 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
