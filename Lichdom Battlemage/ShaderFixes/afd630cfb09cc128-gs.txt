// Geometry shader for flames, fog, etc.

//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.1.26 on Sat Jul 04 14:01:07 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 vfColGradDelta;             // Offset:    0 Size:    12
//   float4 vfRampParams;               // Offset:   16 Size:    16
//   float4 vfColGradRadial;            // Offset:   32 Size:    16
//   float4 vfColGradParams;            // Offset:   48 Size:    16
//   float3 vfColGradBase;              // Offset:   64 Size:    12
//   float4 vfParams;                   // Offset:   80 Size:    16
//   float3 vfSunDir;                   // Offset:   96 Size:    12
//   float4 vfViewPos;                  // Offset:  112 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 TexTileSize;                // Offset:    0 Size:    16
//   float4 ParticleParams[2];          // Offset:   16 Size:    32
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   80 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   x zw
// TEXCOORD                 0   xyz         3     NONE   float   xyz 
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// COLOR                    0   xyzw        6     NONE   float   xyzw
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.294000, 0, 0, 0},
                              { 0.706000, 0, 0, 0},
                              { 0, 0.294000, 0, 0},
                              { 1.000000, 0.294000, 0, 0},
                              { 0, 0.706000, 0, 0},
                              { 1.000000, 0.706000, 0, 0},
                              { 0.294000, 1.000000, 0, 0},
                              { 0.706000, 1.000000, 0, 0} }
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[2], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_input_siv v[1][0].xyzw, position
dcl_input v[1][1].xyzw
dcl_input v[1][2].xyzw
dcl_input v[1][3].xyz
dcl_input v[1][4].xyz
dcl_temps 10
dcl_inputprimitive point 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_maxout 8
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r9.xyzw, l(0, 0, 0, 0), t125.xyzw

ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), v[0][2].z
if_nz r0.x
  add r0.xyz, v[0][3].xyzx, v[0][4].xyzx
  dp3 r0.x, r0.xyzx, r0.xyzx
  sqrt r0.x, r0.x
  div r0.x, l(4.000000), r0.x
  mul r0.y, cb1[1].x, v[0][1].w
  mul r1.xyz, v[0][3].yzxy, v[0][4].zxyz
  mad r1.xyz, v[0][4].yzxy, v[0][3].zxyz, -r1.xyzx
  ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[1].w
  dp3 r0.w, r1.xyzx, r1.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, r1.xyzx
  mov r2.w, v[0][0].w
  mov r0.w, v[0][2].x
  mov r1.w, l(0)
  loop 
    ige r3.x, r1.w, l(8)
    breakc_nz r3.x
    mad r3.xy, icb[r1.w + 0].xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
    mul r3.y, r3.y, v[0][2].w
    mul r3.yzw, r3.yyyy, v[0][4].xxyz
    mad r3.xyz, v[0][3].xyzx, r3.xxxx, r3.yzwy
    add r2.xyz, r3.xyzx, v[0][0].xyzx
    dp4 r4.x, cb3[0].xyzw, r2.xyzw
    dp4 r4.y, cb3[1].xyzw, r2.xyzw
    dp4 r3.w, cb3[2].xyzw, r2.xyzw
    dp4 r4.z, cb3[3].xyzw, r2.xyzw

    mad r5.xy, r4.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r4.zzzz

// Halo fix
add r9.w, r4.z, -r9.y
mad r5.x, r9.w, r9.x, r5.x

    mul r5.xy, r5.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
    mov r5.zw, icb[r1.w + 0].xxxy
    mul r4.w, r5.w, cb1[0].y
    mad r5.w, r0.w, cb1[0].z, cb1[0].w
    round_ni r6.x, r5.w
    mul r6.x, r6.x, cb1[0].x
    frc r6.y, r6.x
    mad r5.z, r5.z, cb1[0].x, r6.y
    round_ni r6.x, r6.x
    mad r4.w, r6.x, cb1[0].y, r4.w
    add r6.xyz, -r2.xyzx, cb0[7].xyzx
    dp3 r6.w, r6.xyzx, r6.xyzx
    dp3 r7.x, r6.xyzx, r3.xyzx
    mul r7.xyz, r6.xyzx, r7.xxxx
    mad r3.xyz, r3.xyzx, r6.wwww, -r7.xyzx
    dp3 r6.w, r3.xyzx, r3.xyzx
    rsq r6.w, r6.w
    mul r3.xyz, r3.xyzx, r6.wwww
    dp3 r6.x, r1.xyzx, r6.xyzx
    lt r6.x, r6.x, l(0.000000)
    movc r6.xyz, r6.xxxx, -r1.xyzx, r1.xyzx
    movc r3.xyz, r0.zzzz, r3.xyzx, r6.xyzx
    add r6.xyz, r2.xyzx, -cb0[7].xyzx
    mul r6.w, r6.z, cb0[5].x
    lt r7.x, l(0.010000), |r6.w|
    mul r7.y, r6.w, l(1.442695)
    exp r7.y, r7.y
    add r7.y, r7.y, l(-1.000000)
    div r6.w, r7.y, r6.w
    movc r6.w, r7.x, r6.w, l(1.000000)
    dp3 r7.x, r6.xyzx, r6.xyzx
    sqrt r7.y, r7.x
    mul r7.z, r7.y, cb0[5].y
    mul r6.w, r6.w, r7.z
    exp r6.w, -r6.w
    min r6.w, r6.w, l(1.000000)
    mad_sat r7.z, r7.y, cb0[1].x, cb0[1].y
    add r7.w, -r7.z, l(2.000000)
    mul r7.z, r7.w, r7.z
    mad r7.z, r7.z, cb0[1].z, cb0[1].w
    add r6.w, -r6.w, l(1.000000)
    mad r6.w, -r6.w, r7.z, l(1.000000)
    max r6.w, r6.w, cb0[5].w
    mad_sat r7.z, r2.z, cb0[3].x, cb0[3].y
    add r7.w, -r7.z, l(2.000000)
    mul r7.z, r7.w, r7.z
    mad r8.xyz, r7.zzzz, cb0[0].xyzx, cb0[4].xyzx
    mul_sat r7.y, r7.y, cb0[2].w
    log r7.y, r7.y
    mul r7.y, r7.y, cb0[3].w
    exp r7.y, r7.y
    rsq r7.x, r7.x
    mul r6.xyz, r6.xyzx, r7.xxxx
    dp3 r6.x, r6.xyzx, cb0[6].xyzx
    mad r6.x, r6.x, -cb0[3].z, cb0[3].z
    exp r6.x, r6.x
    mul r6.x, r6.x, r7.y
    mad r6.xyz, r6.xxxx, cb0[2].xyzx, r8.xyzx

    mov o0.xy, r4.xyxx
    mov o0.z, r3.w
    mov o0.w, r4.z

    mov o1.x, r5.z
    mov o1.y, r4.w
    mov o1.z, r5.w
    mov o1.w, l(0)
    mov o2.xyz, r3.xyzx
    mov o2.w, l(0)
    mov o3.xyz, r2.xyzx
    mov o3.w, l(0)
    mov o4.xy, r5.xyxx
    mov o4.z, r0.x
    mov o4.w, r4.z
    mov o5.xyz, r6.xyzx
    mov o5.w, r6.w
    mov o6.xyz, v[0][1].zyxz
    mov o6.w, r0.y
    emit_stream m0
    iadd r1.w, r1.w, l(1)
  endloop 
else 
  add r0.xyz, v[0][3].xyzx, v[0][4].xyzx
  dp3 r0.x, r0.xyzx, r0.xyzx
  sqrt r0.x, r0.x
  div r0.x, l(4.000000), r0.x
  mul r0.y, cb1[1].x, v[0][1].w
  mul r1.xyz, v[0][3].yzxy, v[0][4].zxyz
  mad r1.xyz, v[0][4].yzxy, v[0][3].zxyz, -r1.xyzx
  ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[1].w
  dp3 r0.w, r1.xyzx, r1.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, r1.xyzx
  mov r2.w, v[0][0].w
  mov r0.w, v[0][2].x
  mov r1.w, l(0)
  loop 
    ige r3.x, r1.w, l(4)
    breakc_nz r3.x
    and r3.x, r1.w, l(1)
    ubfe r3.z, l(1), l(1), r1.w
    itof r3.xy, r3.xzxx
    mad r3.zw, r3.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
    mul r3.w, r3.w, v[0][2].w
    mul r4.xyz, r3.wwww, v[0][4].xyzx
    mad r4.xyz, v[0][3].xyzx, r3.zzzz, r4.xyzx
    add r2.xyz, r4.xyzx, v[0][0].xyzx
    dp4 r5.x, cb3[0].xyzw, r2.xyzw
    dp4 r5.y, cb3[1].xyzw, r2.xyzw
    dp4 r3.z, cb3[2].xyzw, r2.xyzw
    dp4 r3.w, cb3[3].xyzw, r2.xyzw

    mad r5.zw, r5.xxxy, l(0.000000, 0.000000, 1.000000, -1.000000), r3.wwww

// Halo fix
add r9.w, r3.w, -r9.y
mad r5.z, r9.w, r9.x, r5.z

    mul r5.zw, r5.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
    mul r3.y, r3.y, cb1[0].y
    mad r4.w, r0.w, cb1[0].z, cb1[0].w
    round_ni r6.x, r4.w
    mul r6.x, r6.x, cb1[0].x
    frc r6.y, r6.x
    mad r3.x, r3.x, cb1[0].x, r6.y
    round_ni r6.x, r6.x
    mad r3.y, r6.x, cb1[0].y, r3.y
    add r6.xyz, -r2.xyzx, cb0[7].xyzx
    dp3 r6.w, r6.xyzx, r6.xyzx
    dp3 r7.x, r6.xyzx, r4.xyzx
    mul r7.xyz, r6.xyzx, r7.xxxx
    mad r4.xyz, r4.xyzx, r6.wwww, -r7.xyzx
    dp3 r6.w, r4.xyzx, r4.xyzx
    rsq r6.w, r6.w
    mul r4.xyz, r4.xyzx, r6.wwww
    dp3 r6.x, r1.xyzx, r6.xyzx
    lt r6.x, r6.x, l(0.000000)
    movc r6.xyz, r6.xxxx, -r1.xyzx, r1.xyzx
    movc r4.xyz, r0.zzzz, r4.xyzx, r6.xyzx
    add r6.xyz, r2.xyzx, -cb0[7].xyzx
    mul r6.w, r6.z, cb0[5].x
    lt r7.x, l(0.010000), |r6.w|
    mul r7.y, r6.w, l(1.442695)
    exp r7.y, r7.y
    add r7.y, r7.y, l(-1.000000)
    div r6.w, r7.y, r6.w
    movc r6.w, r7.x, r6.w, l(1.000000)
    dp3 r7.x, r6.xyzx, r6.xyzx
    sqrt r7.y, r7.x
    mul r7.z, r7.y, cb0[5].y
    mul r6.w, r6.w, r7.z
    exp r6.w, -r6.w
    min r6.w, r6.w, l(1.000000)
    mad_sat r7.z, r7.y, cb0[1].x, cb0[1].y
    add r7.w, -r7.z, l(2.000000)
    mul r7.z, r7.w, r7.z
    mad r7.z, r7.z, cb0[1].z, cb0[1].w
    add r6.w, -r6.w, l(1.000000)
    mad r6.w, -r6.w, r7.z, l(1.000000)
    max r6.w, r6.w, cb0[5].w
    mad_sat r7.z, r2.z, cb0[3].x, cb0[3].y
    add r7.w, -r7.z, l(2.000000)
    mul r7.z, r7.w, r7.z
    mad r8.xyz, r7.zzzz, cb0[0].xyzx, cb0[4].xyzx
    mul_sat r7.y, r7.y, cb0[2].w
    log r7.y, r7.y
    mul r7.y, r7.y, cb0[3].w
    exp r7.y, r7.y
    rsq r7.x, r7.x
    mul r6.xyz, r6.xyzx, r7.xxxx
    dp3 r6.x, r6.xyzx, cb0[6].xyzx
    mad r6.x, r6.x, -cb0[3].z, cb0[3].z
    exp r6.x, r6.x
    mul r6.x, r6.x, r7.y
    mad r6.xyz, r6.xxxx, cb0[2].xyzx, r8.xyzx

    mov o0.xy, r5.xyxx
    mov o0.z, r3.z
    mov o0.w, r3.w

    mov o1.x, r3.x
    mov o1.y, r3.y
    mov o1.z, r4.w
    mov o1.w, l(0)
    mov o2.xyz, r4.xyzx
    mov o2.w, l(0)
    mov o3.xyz, r2.xyzx
    mov o3.w, l(0)
    mov o4.xy, r5.zwzz
    mov o4.z, r0.x
    mov o4.w, r3.w
    mov o5.xyz, r6.xyzx
    mov o5.w, r6.w
    mov o6.xyz, v[0][1].zyxz
    mov o6.w, r0.y
    emit_stream m0
    iadd r1.w, r1.w, l(1)
  endloop 
endif 
cut_stream m0
ret 
// Approximately 220 instruction slots used
