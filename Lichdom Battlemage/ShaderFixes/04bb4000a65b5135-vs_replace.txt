// Snow

cbuffer PER_BATCH : register(b0)
{
  float4 CameraRightVector : packoffset(c0);
  float4 vSnowFlakeParams : packoffset(c1);
  row_major float4x4 mViewProjPrev : packoffset(c2);
  float4 CameraUpVector : packoffset(c6);
  float4 vSnowClusterPos : packoffset(c7);
  float4 vSnowClusterPosPrev : packoffset(c8);
  row_major float3x4 mSnowOccMatr : packoffset(c9);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_SunLightDir : packoffset(c4);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  float4 g_VS_NearFarClipDist : packoffset(c9);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = g_VS_AnimGenParams.x * 2 + -1;
  r0.x = vSnowFlakeParams.w * r0.x + v2.z;
  sincos(r0.x, r0.x, r1.x);
  r0.xz = r0.xx;
  r0.yw = r1.xx;
  r1.xyz = vSnowClusterPos.xyz + v0.xyz;
  r2.xy = r1.xy;
  r3.xyz = vSnowClusterPosPrev.xyz + v0.xyz;
  r2.zw = r3.xy;
  r0.xyzw = r0.xyzw * vSnowFlakeParams.zzzz + r2.xyzw;
  r3.xy = r0.zw;
  r1.xy = r0.xy;
  r3.w = v0.w;
  r0.z = dot(mViewProjPrev._m20_m21_m22_m23, r3.xyzw);
  r2.z = dot(mViewProjPrev._m00_m01_m02_m03, r3.xyzw);
  r2.w = dot(mViewProjPrev._m10_m11_m12_m13, r3.xyzw);
  r0.w = dot(mViewProjPrev._m30_m31_m32_m33, r3.xyzw);
  r3.zw = sqrt(r0.ww);
  r1.w = v0.w;
  r4.w = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, r1.xyzw);
  r3.xy = sqrt(r4.ww);
  r3.xyzw = sqrt(r3.xyzw);
  r2.x = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, r1.xyzw);
  r2.y = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, r1.xyzw);
  r5.xy = vSnowFlakeParams.yy * v2.xy;
  r5.xy = v1.xy * r5.xy;
  r6.xyzw = r5.xyxy * r3.xyzw + r2.xyzw;
  r3.xy = r5.xy * r3.xy;
  r6.zw = r6.xy + -r6.zw;
  r3.z = dot(r6.zw, r6.zw);
  r3.z = sqrt(r3.z);
  r5.zw = r6.zw / r3.zz;
  r3.w = min(0.349999994, r3.z);
  r3.z = 9.99999975e-005 < r3.z;
  r3.w = r3.w * r3.w;
  r7.zw = r5.zw * r3.ww;
  r5.zw = r7.zw * float2(0.25,0.25) + r2.xy;
  r4.xy = r3.zz ? r5.zw : r2.xy;
  r2.xy = -r7.zw * float2(0.75,0.75) + r2.zw;
  r0.xy = r3.zz ? r2.xy : r2.zw;
  r4.z = dot(g_VS_ViewProjMatr._m20_m21_m22_m23, r1.xyzw);
  r2.xyzw = r4.xyzw + -r0.xyzw;
  r4.x = dot(r3.xy, r3.xy);
  r4.y = rsqrt(r4.x);
  r4.x = sqrt(r4.x);
  r3.w = r4.x / r3.w;
  r3.w = min(1, r3.w);
  r7.x = max(0.200000003, r3.w);
  r3.xy = r4.yy * r3.xy;
  r3.x = dot(r3.xy, r7.zw);
  r7.y = r3.x * 0.5 + 0.5;
  r6.xy = float2(1,1);
  r3.xyzw = r3.zzzz ? r7.xyzw : r6.xyzw;
  r0.xyzw = r3.yyyy * r2.xyzw + r0.xyzw;
  r2.x = sqrt(r0.w);
  r2.x = sqrt(r2.x);
  r0.xy = r5.xy * r2.xx + r0.xy;
  o0.xyzw = r0.xyzw;

float4 stereo = StereoParams.Load(0);
r0.x += stereo.x * (r0.w - stereo.y);

  r0.xy = r0.xy * float2(1,-1) + r0.ww;
  r0.z = saturate(-g_VS_NearFarClipDist.x + r0.w);
  o1.w = 1 + -r0.z;
  o2.xy = float2(0.5,0.5) * r0.xy;
  o2.w = r0.w;
  o1.z = r3.x;
  o3.xy = r3.zw;
  r0.x = v2.z * 2 + 2;
  r0.x = floor(r0.x);
  r0.x = 0.5 * r0.x;
  r0.y = floor(r0.x);
  r0.x = frac(r0.x);
  r0.zw = v1.xy * float2(0.5,0.5) + float2(0.5,0.5);
  r0.w = 0.5 * r0.w;
  o1.x = r0.z * 0.5 + r0.x;
  o1.y = r0.y * 0.5 + r0.w;
  r0.xyz = CameraRightVector.xyz * r5.xxx + r1.xyz;
  r0.xyz = CameraUpVector.xyz * r5.yyy + r0.xyz;
  r0.xyz = g_VS_WorldViewPos.xyz + -r0.xyz;
  o2.z = r1.z;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.x = dot(g_VS_SunLightDir.xyz, r0.xyz);
  o3.w = saturate(r0.x * 0.75 + 0.25);
  o3.z = 0;
  r1.w = 1;
  r0.x = dot(mSnowOccMatr._m10_m11_m12_m13, r1.xyzw);
  o4.y = 1 + -r0.x;
  o4.x = dot(mSnowOccMatr._m00_m01_m02_m03, r1.xyzw);
  o4.z = dot(mSnowOccMatr._m20_m21_m22_m23, r1.xyzw);
  o4.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.1.31 on Sun Jul 12 19:57:20 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 CameraRightVector;          // Offset:    0 Size:    16
//   float4 vSnowFlakeParams;           // Offset:   16 Size:    16
//   row_major float4x4 mViewProjPrev;  // Offset:   32 Size:    64
//   float4 CameraUpVector;             // Offset:   96 Size:    16
//   float4 vSnowClusterPos;            // Offset:  112 Size:    16
//   float4 vSnowClusterPosPrev;        // Offset:  128 Size:    16
//   row_major float3x4 mSnowOccMatr;   // Offset:  144 Size:    48
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_SunLightDir;           // Offset:   64 Size:    16
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16
//   float4 g_VS_NearFarClipDist;       // Offset:  144 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_FRAME                         cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[12], immediateIndexed
dcl_constantbuffer cb3[10], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_input v2.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 8
mad r0.x, cb3[8].x, l(2.000000), l(-1.000000)
mad r0.x, cb0[1].w, r0.x, v2.z
sincos r0.x, r1.x, r0.x
mov r0.xz, r0.xxxx
mov r0.yw, r1.xxxx
add r1.xyz, v0.xyzx, cb0[7].xyzx
mov r2.xy, r1.xyxx
add r3.xyz, v0.xyzx, cb0[8].xyzx
mov r2.zw, r3.xxxy
mad r0.xyzw, r0.xyzw, cb0[1].zzzz, r2.xyzw
mov r3.xy, r0.zwzz
mov r1.xy, r0.xyxx
mov r3.w, v0.w
dp4 r0.z, cb0[4].xyzw, r3.xyzw
dp4 r2.z, cb0[2].xyzw, r3.xyzw
dp4 r2.w, cb0[3].xyzw, r3.xyzw
dp4 r0.w, cb0[5].xyzw, r3.xyzw
sqrt r3.zw, r0.wwww
mov r1.w, v0.w
dp4 r4.w, cb3[3].xyzw, r1.xyzw
sqrt r3.xy, r4.wwww
sqrt r3.xyzw, r3.xyzw
dp4 r2.x, cb3[0].xyzw, r1.xyzw
dp4 r2.y, cb3[1].xyzw, r1.xyzw
mul r5.xy, v2.xyxx, cb0[1].yyyy
mul r5.xy, r5.xyxx, v1.xyxx
mad r6.xyzw, r5.xyxy, r3.xyzw, r2.xyzw
mul r3.xy, r3.xyxx, r5.xyxx
add r6.zw, -r6.zzzw, r6.xxxy
dp2 r3.z, r6.zwzz, r6.zwzz
sqrt r3.z, r3.z
div r5.zw, r6.zzzw, r3.zzzz
min r3.w, r3.z, l(0.350000)
lt r3.z, l(0.000100), r3.z
mul r3.w, r3.w, r3.w
mul r7.zw, r3.wwww, r5.zzzw
mad r5.zw, r7.zzzw, l(0.000000, 0.000000, 0.250000, 0.250000), r2.xxxy
movc r4.xy, r3.zzzz, r5.zwzz, r2.xyxx
mad r2.xy, -r7.zwzz, l(0.750000, 0.750000, 0.000000, 0.000000), r2.zwzz
movc r0.xy, r3.zzzz, r2.xyxx, r2.zwzz
dp4 r4.z, cb3[2].xyzw, r1.xyzw
add r2.xyzw, -r0.xyzw, r4.xyzw
dp2 r4.x, r3.xyxx, r3.xyxx
rsq r4.y, r4.x
sqrt r4.x, r4.x
div r3.w, r4.x, r3.w
min r3.w, r3.w, l(1.000000)
max r7.x, r3.w, l(0.200000)
mul r3.xy, r3.xyxx, r4.yyyy
dp2 r3.x, r3.xyxx, r7.zwzz
mad r7.y, r3.x, l(0.500000), l(0.500000)
mov r6.xy, l(1.000000,1.000000,0,0)
movc r3.xyzw, r3.zzzz, r7.xyzw, r6.xyzw
mad r0.xyzw, r3.yyyy, r2.xyzw, r0.xyzw
sqrt r2.x, r0.w
sqrt r2.x, r2.x
mad r0.xy, r5.xyxx, r2.xxxx, r0.xyxx
mov o0.xyzw, r0.xyzw
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r0.wwww
add_sat r0.z, r0.w, -cb3[9].x
add o1.w, -r0.z, l(1.000000)
mul o2.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o2.w, r0.w
mov o1.z, r3.x
mov o3.xy, r3.zwzz
mad r0.x, v2.z, l(2.000000), l(2.000000)
round_ni r0.x, r0.x
mul r0.x, r0.x, l(0.500000)
round_ni r0.y, r0.x
frc r0.x, r0.x
mad r0.zw, v1.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
mul r0.w, r0.w, l(0.500000)
mad o1.x, r0.z, l(0.500000), r0.x
mad o1.y, r0.y, l(0.500000), r0.w
mad r0.xyz, cb0[0].xyzx, r5.xxxx, r1.xyzx
mad r0.xyz, cb0[6].xyzx, r5.yyyy, r0.xyzx
add r0.xyz, -r0.xyzx, cb3[6].xyzx
mov o2.z, r1.z
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.x, cb3[4].xyzx, r0.xyzx
mad_sat o3.w, r0.x, l(0.750000), l(0.250000)
mov o3.z, l(0)
mov r1.w, l(1.000000)
dp4 r0.x, cb0[10].xyzw, r1.xyzw
add o4.y, -r0.x, l(1.000000)
dp4 o4.x, cb0[9].xyzw, r1.xyzw
dp4 o4.z, cb0[11].xyzw, r1.xyzw
mov o4.w, l(0)
ret 
// Approximately 91 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
