// Roth / dragon ghost distortion

cbuffer cb3 : register(b3)
{
  float4 cb3[4];
}


cbuffer PER_BATCH : register(b0)
{
  float gCurrentTime : packoffset(c0);
  float4 PS_ScreenSize : packoffset(c1);
  float4 _GlowParams : packoffset(c2);
  float4 PS_NearFarClipDist : packoffset(c3);
  float4 ResInfoBump : packoffset(c4);
  row_major float4x4 mCamera : packoffset(c5);
}

cbuffer PER_FRAME : register(b3)
{
  float4 g_PS_SunColor : packoffset(c1);
  float4 g_PS_SunLightDir : packoffset(c2);
  float4 g_PS_FogColor : packoffset(c3);
}

cbuffer PER_MATERIAL : register(b4)
{
  float4 MatDifColor : packoffset(c0);
  float4 MatSpecColor : packoffset(c1);
  float4 MatEmissiveColor : packoffset(c2);
  float4 __0NoiseVelocityX__1NoiseVelocityY__2NoiseVelocityZ__3NoiseTiling : packoffset(c3);
  float4 __0FresnelScale__1FresnelPower__2FresnelBias__3RefractionScale : packoffset(c4);
  float4 EdgeColor : packoffset(c5);
  float4 __0Opacity__1GlowFresnelPower__2GlowFresnelBias__3DiffuseContribution : packoffset(c6);
  float4 __0SpecMapChannelR__1SpecMapChannelG__2SpecMapChannelB__3GlossMapChannelB : packoffset(c7);
  float4 __0NoiseAlphaInfluence__1NoiseRefractInfluence__2NoiseBias__3NoiseScale : packoffset(c8);
  float2 __0NearFadeDistance__1NearFadeSharpness__2__3 : packoffset(c9);
  float3 __0EnvironmentDiffuseScale__1EnvironmentSpecularScale__2EnvironmentDiffuseGloss__3 : packoffset(c11);
}
SamplerState diffuseMapSampler_s : register(s0);
SamplerState bumpMapSampler_s : register(s1);
SamplerState glossMapSampler_s : register(s2);
SamplerState envMapSamplerCUBE_s : register(s4);
SamplerState envMapSamplerRefr_s : register(s5);
SamplerState volumeNoiseMapSampler_s : register(s6);
Texture2D<float4> diffuseMapSampler : register(t0);
Texture2D<float4> bumpMapSampler : register(t1);
Texture2D<float4> glossMapSampler : register(t2);
Texture3D<float4> volumeNoiseMapSampler : register(t3);
Texture2D<float4> envMapSamplerRefr : register(t4);
TextureCube<float4> envMapSamplerCUBE : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v3.yzx * v2.zxy;
  r0.xyz = v2.yzx * v3.zxy + -r0.xyz;
  r0.xyz = v2.www * r0.xyz;
  r1.xy = bumpMapSampler.Sample(bumpMapSampler_s, v1.xy).xy;
  r1.xy = r1.yx * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r2.xyz = v3.xyz * r1.yyy;
  r2.xyz = r1.xxx * v2.xyz + r2.xyz;
  r0.w = dot(r1.xy, -r1.xy);
  r1.xy = __0FresnelScale__1FresnelPower__2FresnelBias__3RefractionScale.ww * r1.xy;
  r0.w = saturate(1.000000000e+000 + r0.w);
  r0.w = sqrt(r0.w);
  r0.xyz = r0.www * r0.xyz + r2.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(-v4.xyz, -v4.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = -v4.xyz * r0.www;
  r0.w = dot(r2.xyz, r0.xyz);
  r1.z = saturate(r0.w);
  r1.z = 1.001000047e+000 + -r1.z;
  r1.z = log2(r1.z);
  r1.z = __0FresnelScale__1FresnelPower__2FresnelBias__3RefractionScale.y * r1.z;
  r1.z = exp2(r1.z);
  r1.z = __0FresnelScale__1FresnelPower__2FresnelBias__3RefractionScale.x * r1.z + __0FresnelScale__1FresnelPower__2FresnelBias__3RefractionScale.z;
  r1.w = saturate(dot(__0SpecMapChannelR__1SpecMapChannelG__2SpecMapChannelB__3GlossMapChannelB.xyz, float3(1.000000e+000,1.000000e+000,1.000000e+000)));
  r3.xyzw = glossMapSampler.Sample(glossMapSampler_s, v1.xy).xyzw;
  r2.w = saturate(dot(r3.xyz, __0SpecMapChannelR__1SpecMapChannelG__2SpecMapChannelB__3GlossMapChannelB.xyz));
  r4.xyz = r2.www + -r3.xyz;
  r4.xyz = r1.www * r4.xyz + r3.xyz;
  r4.xyz = MatSpecColor.xyz * r4.xyz;
  r4.xyz = r4.xyz * r1.zzz;
  r1.z = r0.w + r0.w;
  r0.w = 1.000000000e+000 + -r0.w;
  r0.w = log2(r0.w);
  r0.w = __0Opacity__1GlowFresnelPower__2GlowFresnelBias__3DiffuseContribution.y * r0.w;
  r0.w = exp2(r0.w);
  r2.xyz = r1.zzz * r0.xyz + -r2.xyz;
  r1.z = -1.000000000e+000 + r3.z;
  r1.w = MatSpecColor.w * r3.w;
  r1.z = __0SpecMapChannelR__1SpecMapChannelG__2SpecMapChannelB__3GlossMapChannelB.w * r1.z + 1.000000000e+000;
  r1.z = r1.w * r1.z;
  r1.w = -r1.z * 8.000000000e+000 + 8.000000000e+000;
  r1.z = max(__0EnvironmentDiffuseScale__1EnvironmentSpecularScale__2EnvironmentDiffuseGloss__3.z, r1.z);
  r1.z = -r1.z * 8.000000000e+000 + 8.000000000e+000;
  r3.xyzw = envMapSamplerCUBE.SampleLevel(envMapSamplerCUBE_s, r0.xyz, r1.z).xyzw;
  r2.xyzw = envMapSamplerCUBE.SampleLevel(envMapSamplerCUBE_s, r2.xyz, r1.w).xyzw;
  r0.x = 1.600000000e+001 * r2.w;
  r0.xyz = r2.xyz * r0.xxx;
  r0.xyz = __0EnvironmentDiffuseScale__1EnvironmentSpecularScale__2EnvironmentDiffuseGloss__3.yyy * r0.xyz;
  r0.xyz = __0Opacity__1GlowFresnelPower__2GlowFresnelBias__3DiffuseContribution.www * r0.xyz;
  r1.z = saturate(1.600000000e+001 + -v5.w);
  r0.xyz = r1.zzz * r0.xyz;
  r0.xyz = r4.xyz * r0.xyz;
  r1.w = 1.600000000e+001 * r3.w;
  r2.xyz = r3.xyz * r1.www;
  r2.xyz = __0EnvironmentDiffuseScale__1EnvironmentSpecularScale__2EnvironmentDiffuseGloss__3.xxx * r2.xyz;
  r2.xyz = __0Opacity__1GlowFresnelPower__2GlowFresnelBias__3DiffuseContribution.www * r2.xyz;
  r2.xyz = r2.xyz * r1.zzz;
  r3.xyz = diffuseMapSampler.Sample(diffuseMapSampler_s, v1.xy).xyz;
  r3.xyz = MatDifColor.xyz * r3.xyz;
  r0.xyz = r3.xyz * r2.xyz + r0.xyz;
  r2.xyz = __0NoiseVelocityX__1NoiseVelocityY__2NoiseVelocityZ__3NoiseTiling.xyz * gCurrentTime + v7.xyz;
  r2.xyz = __0NoiseVelocityX__1NoiseVelocityY__2NoiseVelocityZ__3NoiseTiling.www * r2.xyz;
  r3.xyz = r2.xyz + r2.xyz;
  r1.z = volumeNoiseMapSampler.Sample(volumeNoiseMapSampler_s, r3.xyz).x;
  r1.z = r1.z * 2.000000000e+000 + -1.000000000e+000;
  r1.w = volumeNoiseMapSampler.Sample(volumeNoiseMapSampler_s, r2.xyz).x;
  r2.xyz = float3(4.000000e+000,4.000000e+000,4.000000e+000) * r2.xyz;
  r2.x = volumeNoiseMapSampler.Sample(volumeNoiseMapSampler_s, r2.xyz).x;
  r2.x = r2.x * 2.000000000e+000 + -1.000000000e+000;
  r1.w = r1.w * 2.000000000e+000 + -1.000000000e+000;
  r1.z = r1.z * 5.000000000e-001 + r1.w;
  r1.z = r2.x * 2.500000000e-001 + r1.z;
  r1.z = r1.z * 2.857142985e-001 + __0NoiseAlphaInfluence__1NoiseRefractInfluence__2NoiseBias__3NoiseScale.z;
  r1.z = 5.000000000e-001 + r1.z;
  r1.z = saturate(__0NoiseAlphaInfluence__1NoiseRefractInfluence__2NoiseBias__3NoiseScale.w * r1.z);
  r1.w = -1.000000000e+000 + r1.z;
  r2.xyz = EdgeColor.xyz * r1.zzz;
  r1.zw = __0NoiseAlphaInfluence__1NoiseRefractInfluence__2NoiseBias__3NoiseScale.xy * r1.ww + float2(1.000000e+000,1.000000e+000);
  r1.xy = r1.xy * r1.ww;
  r1.z = __0Opacity__1GlowFresnelPower__2GlowFresnelBias__3DiffuseContribution.x * r1.z;
  r1.w = -__0NearFadeDistance__1NearFadeSharpness__2__3.x + v5.w;
  r1.w = saturate(__0NearFadeDistance__1NearFadeSharpness__2__3.y * r1.w);
  r1.z = r1.z * r1.w;
  r1.z = v8.w * r1.z;
  r1.z = 1.010100961e+000 * r1.z;
  r1.xy = r1.xy * r1.zz;
  r3.xy = v5.xy / v5.ww;
  r1.xy = r1.xy * float2(2.000000e-001,2.000000e-001) + r3.xy;
  r1.xyw = envMapSamplerRefr.Sample(envMapSamplerRefr_s, r1.xy).xyz;

// envMapSamplerRefr does not cover enough of the screen to be usable in
// stereo... Instead, we just have to kill the transparency in 3D :(

// If I can work out where the texture comes from I might be able to do
// something better... e.g. if it's a subresource region copy I could possibly
// get 3DMigoto to adjust the coordinates.

float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);
if (stereo.x && params.y == 0)
	r1.xyw=0;

  r1.xyw = r1.xyw / cb3[2].www;
  r0.xyz = -r1.xyw + r0.xyz;
  r0.xyz = __0Opacity__1GlowFresnelPower__2GlowFresnelBias__3DiffuseContribution.www * r0.xyz + r1.xyw;
  r2.w = -__0Opacity__1GlowFresnelPower__2GlowFresnelBias__3DiffuseContribution.z + 1.000000000e+000;
  r0.w = saturate(r2.w * r0.w + __0Opacity__1GlowFresnelPower__2GlowFresnelBias__3DiffuseContribution.z);
  r2.xyz = r2.xyz * r0.www;
  r0.xyz = r2.xyz * _GlowParams.xyz + r0.xyz;
  r0.xyz = r0.xyz + -r1.xyw;
  r0.xyz = r1.zzz * r0.xyz + r1.xyw;
  o0.w = v4.w * r1.z;
  r0.xyz = -cb3[3].xyz + r0.xyz;
  r0.xyz = v4.www * r0.xyz + cb3[3].xyz;
  r0.xyz = r0.xyz * v6.www + v6.xyz;
  o0.xyz = cb3[2].www * r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float gCurrentTime;                // Offset:    0 Size:     4
//   float4 PS_ScreenSize;              // Offset:   16 Size:    16 [unused]
//   float4 _GlowParams;                // Offset:   32 Size:    16
//   float4 PS_NearFarClipDist;         // Offset:   48 Size:    16 [unused]
//   float4 ResInfoBump;                // Offset:   64 Size:    16 [unused]
//   row_major float4x4 mCamera;        // Offset:   80 Size:    64 [unused]
//
// }
//
// cbuffer PER_FRAME
// {
//
//   float4 g_PS_SunColor;              // Offset:   16 Size:    16 [unused]
//   float4 g_PS_SunLightDir;           // Offset:   32 Size:    16
//   float4 g_PS_FogColor;              // Offset:   48 Size:    16
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatDifColor;                // Offset:    0 Size:    16
//   float4 MatSpecColor;               // Offset:   16 Size:    16
//   float4 MatEmissiveColor;           // Offset:   32 Size:    16 [unused]
//   float4 __0NoiseVelocityX__1NoiseVelocityY__2NoiseVelocityZ__3NoiseTiling;// Offset:   48 Size:    16
//   float4 __0FresnelScale__1FresnelPower__2FresnelBias__3RefractionScale;// Offset:   64 Size:    16
//   float4 EdgeColor;                  // Offset:   80 Size:    16
//   float4 __0Opacity__1GlowFresnelPower__2GlowFresnelBias__3DiffuseContribution;// Offset:   96 Size:    16
//   float4 __0SpecMapChannelR__1SpecMapChannelG__2SpecMapChannelB__3GlossMapChannelB;// Offset:  112 Size:    16
//   float4 __0NoiseAlphaInfluence__1NoiseRefractInfluence__2NoiseBias__3NoiseScale;// Offset:  128 Size:    16
//   float2 __0NearFadeDistance__1NearFadeSharpness__2__3;// Offset:  144 Size:     8
//   float3 __0EnvironmentDiffuseScale__1EnvironmentSpecularScale__2EnvironmentDiffuseGloss__3;// Offset:  176 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// diffuseMapSampler                 sampler      NA          NA    0        1
// bumpMapSampler                    sampler      NA          NA    1        1
// glossMapSampler                   sampler      NA          NA    2        1
// envMapSamplerCUBE                 sampler      NA          NA    4        1
// envMapSamplerRefr                 sampler      NA          NA    5        1
// volumeNoiseMapSampler             sampler      NA          NA    6        1
// diffuseMapSampler                 texture  float4          2d    0        1
// bumpMapSampler                    texture  float4          2d    1        1
// glossMapSampler                   texture  float4          2d    2        1
// volumeNoiseMapSampler             texture  float4          3d    3        1
// envMapSamplerRefr                 texture  float4          2d    4        1
// envMapSamplerCUBE                 texture  float4        cube    5        1
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xy w
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyz 
// TEXCOORD                 7   xyzw        8     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_constantbuffer cb4[12], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture3d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyzw
dcl_input_ps linear centroid v5.xyw
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.w
dcl_output o0.xyzw
dcl_temps 5
mul r0.xyz, v2.zxyz, v3.yzxy
mad r0.xyz, v2.yzxy, v3.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v2.wwww
sample_indexable(texture2d)(float,float,float,float) r1.xy, v1.xyxx, t1.xyzw, s1
mad r1.xy, r1.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyz, r1.yyyy, v3.xyzx
mad r2.xyz, r1.xxxx, v2.xyzx, r2.xyzx
dp2 r0.w, r1.xyxx, -r1.xyxx
mul r1.xy, r1.xyxx, cb4[4].wwww
add_sat r0.w, r0.w, l(1.000000)
sqrt r0.w, r0.w
mad r0.xyz, r0.wwww, r0.xyzx, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, -v4.xyzx, -v4.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, -v4.xyzx
dp3 r0.w, r2.xyzx, r0.xyzx
mov_sat r1.z, r0.w
add r1.z, -r1.z, l(1.001000)
log r1.z, r1.z
mul r1.z, r1.z, cb4[4].y
exp r1.z, r1.z
mad r1.z, cb4[4].x, r1.z, cb4[4].z
dp3_sat r1.w, cb4[7].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v1.xyxx, t2.xyzw, s2
dp3_sat r2.w, r3.xyzx, cb4[7].xyzx
add r4.xyz, -r3.xyzx, r2.wwww
mad r4.xyz, r1.wwww, r4.xyzx, r3.xyzx
mul r4.xyz, r4.xyzx, cb4[1].xyzx
mul r4.xyz, r1.zzzz, r4.xyzx
add r1.z, r0.w, r0.w
add r0.w, -r0.w, l(1.000000)
log r0.w, r0.w
mul r0.w, r0.w, cb4[6].y
exp r0.w, r0.w
mad r2.xyz, r1.zzzz, r0.xyzx, -r2.xyzx
add r1.z, r3.z, l(-1.000000)
mul r1.w, r3.w, cb4[1].w
mad r1.z, cb4[7].w, r1.z, l(1.000000)
mul r1.z, r1.z, r1.w
mad r1.w, -r1.z, l(8.000000), l(8.000000)
max r1.z, r1.z, cb4[11].z
mad r1.z, -r1.z, l(8.000000), l(8.000000)
sample_l_indexable(texturecube)(float,float,float,float) r3.xyzw, r0.xyzx, t5.xyzw, s4, r1.z
sample_l_indexable(texturecube)(float,float,float,float) r2.xyzw, r2.xyzx, t5.xyzw, s4, r1.w
mul r0.x, r2.w, l(16.000000)
mul r0.xyz, r0.xxxx, r2.xyzx
mul r0.xyz, r0.xyzx, cb4[11].yyyy
mul r0.xyz, r0.xyzx, cb4[6].wwww
add_sat r1.z, -v5.w, l(16.000000)
mul r0.xyz, r0.xyzx, r1.zzzz
mul r0.xyz, r0.xyzx, r4.xyzx
mul r1.w, r3.w, l(16.000000)
mul r2.xyz, r1.wwww, r3.xyzx
mul r2.xyz, r2.xyzx, cb4[11].xxxx
mul r2.xyz, r2.xyzx, cb4[6].wwww
mul r2.xyz, r1.zzzz, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v1.xyxx, t0.xyzw, s0
mul r3.xyz, r3.xyzx, cb4[0].xyzx
mad r0.xyz, r3.xyzx, r2.xyzx, r0.xyzx
mad r2.xyz, cb4[3].xyzx, cb0[0].xxxx, v7.xyzx
mul r2.xyz, r2.xyzx, cb4[3].wwww
add r3.xyz, r2.xyzx, r2.xyzx
sample_indexable(texture3d)(float,float,float,float) r1.z, r3.xyzx, t3.yzxw, s6
mad r1.z, r1.z, l(2.000000), l(-1.000000)
sample_indexable(texture3d)(float,float,float,float) r1.w, r2.xyzx, t3.yzwx, s6
mul r2.xyz, r2.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
sample_indexable(texture3d)(float,float,float,float) r2.x, r2.xyzx, t3.xyzw, s6
mad r2.x, r2.x, l(2.000000), l(-1.000000)
mad r1.w, r1.w, l(2.000000), l(-1.000000)
mad r1.z, r1.z, l(0.500000), r1.w
mad r1.z, r2.x, l(0.250000), r1.z
mad r1.z, r1.z, l(0.285714), cb4[8].z
add r1.z, r1.z, l(0.500000)
mul_sat r1.z, r1.z, cb4[8].w
add r1.w, r1.z, l(-1.000000)
mul r2.xyz, r1.zzzz, cb4[5].xyzx
mad r1.zw, cb4[8].xxxy, r1.wwww, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r1.xy, r1.wwww, r1.xyxx
mul r1.z, r1.z, cb4[6].x
add r1.w, v5.w, -cb4[9].x
mul_sat r1.w, r1.w, cb4[9].y
mul r1.z, r1.w, r1.z
mul r1.z, r1.z, v8.w
mul r1.z, r1.z, l(1.010101)
mul r1.xy, r1.zzzz, r1.xyxx
div r3.xy, v5.xyxx, v5.wwww
mad r1.xy, r1.xyxx, l(0.200000, 0.200000, 0.000000, 0.000000), r3.xyxx
sample_indexable(texture2d)(float,float,float,float) r1.xyw, r1.xyxx, t4.xywz, s5
div r1.xyw, r1.xyxw, cb3[2].wwww
add r0.xyz, r0.xyzx, -r1.xywx
mad r0.xyz, cb4[6].wwww, r0.xyzx, r1.xywx
add r2.w, l(1.000000), -cb4[6].z
mad_sat r0.w, r2.w, r0.w, cb4[6].z
mul r2.xyz, r0.wwww, r2.xyzx
mad r0.xyz, r2.xyzx, cb0[2].xyzx, r0.xyzx
add r0.xyz, -r1.xywx, r0.xyzx
mad r0.xyz, r1.zzzz, r0.xyzx, r1.xywx
mul o0.w, r1.z, v4.w
add r0.xyz, r0.xyzx, -cb3[3].xyzx
mad r0.xyz, v4.wwww, r0.xyzx, cb3[3].xyzx
mad r0.xyz, r0.xyzx, v6.wwww, v6.xyzx
mul o0.xyz, r0.xyzx, cb3[2].wwww
ret 
// Approximately 106 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.26 on Tue Jul 07 22:33:56 2015
//
//
// Buffer Definitions: 
//
// cbuffer cb3
// {
//
//   float4 cb3[4];                     // Offset:    0 Size:    64
//
// }
//
// cbuffer PER_BATCH
// {
//
//   float gCurrentTime;                // Offset:    0 Size:     4
//   float4 PS_ScreenSize;              // Offset:   16 Size:    16 [unused]
//   float4 _GlowParams;                // Offset:   32 Size:    16
//   float4 PS_NearFarClipDist;         // Offset:   48 Size:    16 [unused]
//   float4 ResInfoBump;                // Offset:   64 Size:    16 [unused]
//   row_major float4x4 mCamera;        // Offset:   80 Size:    64 [unused]
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatDifColor;                // Offset:    0 Size:    16
//   float4 MatSpecColor;               // Offset:   16 Size:    16
//   float4 MatEmissiveColor;           // Offset:   32 Size:    16 [unused]
//   float4 __0NoiseVelocityX__1NoiseVelocityY__2NoiseVelocityZ__3NoiseTiling;// Offset:   48 Size:    16
//   float4 __0FresnelScale__1FresnelPower__2FresnelBias__3RefractionScale;// Offset:   64 Size:    16
//   float4 EdgeColor;                  // Offset:   80 Size:    16
//   float4 __0Opacity__1GlowFresnelPower__2GlowFresnelBias__3DiffuseContribution;// Offset:   96 Size:    16
//   float4 __0SpecMapChannelR__1SpecMapChannelG__2SpecMapChannelB__3GlossMapChannelB;// Offset:  112 Size:    16
//   float4 __0NoiseAlphaInfluence__1NoiseRefractInfluence__2NoiseBias__3NoiseScale;// Offset:  128 Size:    16
//   float2 __0NearFadeDistance__1NearFadeSharpness__2__3;// Offset:  144 Size:     8
//   float3 __0EnvironmentDiffuseScale__1EnvironmentSpecularScale__2EnvironmentDiffuseGloss__3;// Offset:  176 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// diffuseMapSampler_s               sampler      NA          NA    0        1
// bumpMapSampler_s                  sampler      NA          NA    1        1
// glossMapSampler_s                 sampler      NA          NA    2        1
// envMapSamplerCUBE_s               sampler      NA          NA    4        1
// envMapSamplerRefr_s               sampler      NA          NA    5        1
// volumeNoiseMapSampler_s           sampler      NA          NA    6        1
// diffuseMapSampler                 texture  float4          2d    0        1
// bumpMapSampler                    texture  float4          2d    1        1
// glossMapSampler                   texture  float4          2d    2        1
// volumeNoiseMapSampler             texture  float4          3d    3        1
// envMapSamplerRefr                 texture  float4          2d    4        1
// envMapSamplerCUBE                 texture  float4        cube    5        1
// PER_BATCH                         cbuffer      NA          NA    0        1
// cb3                               cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xy w
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyz 
// TEXCOORD                 7   xyzw        8     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_constantbuffer cb4[12], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture3d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyw
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.w
dcl_output o0.xyzw
dcl_temps 5
mul r0.xyz, v2.zxyz, v3.yzxy
mad r0.xyz, v2.yzxy, v3.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v2.wwww
sample_indexable(texture2d)(float,float,float,float) r1.xy, v1.xyxx, t1.xyzw, s1
mad r1.xy, r1.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyz, r1.yyyy, v3.xyzx
mad r2.xyz, r1.xxxx, v2.xyzx, r2.xyzx
dp2 r0.w, r1.xyxx, -r1.xyxx
add_sat r0.w, r0.w, l(1.000000)
sqrt r0.w, r0.w
mad r0.xyz, r0.wwww, r0.xyzx, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, -v4.xyzx, -v4.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, -v4.xyzx
dp3 r0.w, r2.xyzx, r0.xyzx
mov_sat r1.z, r0.w
add r1.z, -r1.z, l(1.001000)
log r1.z, r1.z
mul r1.xyz, r1.xyzx, cb4[4].wwyw
exp r1.z, r1.z
mad r1.z, cb4[4].x, r1.z, cb4[4].z
dp3_sat r1.w, cb4[7].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v1.xyxx, t2.xyzw, s2
dp3_sat r2.w, r3.xyzx, cb4[7].xyzx
add r4.xyz, -r3.xyzx, r2.wwww
mad r4.xyz, r1.wwww, r4.xyzx, r3.xyzx
mul r4.xyz, r4.xyzx, cb4[1].xyzx
mul r4.xyz, r1.zzzz, r4.xyzx
add r1.z, r0.w, r0.w
add r0.w, -r0.w, l(1.000000)
log r0.w, r0.w
mul r0.w, r0.w, cb4[6].y
exp r0.w, r0.w
mad r2.xyz, r1.zzzz, r0.xyzx, -r2.xyzx
add r1.z, r3.z, l(-1.000000)
mul r1.w, r3.w, cb4[1].w
mad r1.z, cb4[7].w, r1.z, l(1.000000)
mul r1.z, r1.z, r1.w
mad r1.w, r1.z, l(-8.000000), l(8.000000)
max r1.z, r1.z, cb4[11].z
mad r1.z, r1.z, l(-8.000000), l(8.000000)
sample_l_indexable(texturecube)(float,float,float,float) r3.xyzw, r0.xyzx, t5.xyzw, s4, r1.z
sample_l_indexable(texturecube)(float,float,float,float) r2.xyzw, r2.xyzx, t5.xyzw, s4, r1.w
mul r0.x, r2.w, l(16.000000)
mul r0.xyz, r0.xxxx, r2.xyzx
mul r0.xyz, r0.xyzx, cb4[11].yyyy
mul r0.xyz, r0.xyzx, cb4[6].wwww
add_sat r1.z, -v5.w, l(16.000000)
mul r0.xyz, r0.xyzx, r1.zzzz
mul r0.xyz, r0.xyzx, r4.xyzx
mul r1.w, r3.w, l(16.000000)
mul r2.xyz, r1.wwww, r3.xyzx
mul r2.xyz, r2.xyzx, cb4[11].xxxx
mul r2.xyz, r2.xyzx, cb4[6].wwww
mul r2.xyz, r1.zzzz, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v1.xyxx, t0.xyzw, s0
mul r3.xyz, r3.xyzx, cb4[0].xyzx
mad r0.xyz, r3.xyzx, r2.xyzx, r0.xyzx
mad r2.xyz, cb4[3].xyzx, cb0[0].xxxx, v7.xyzx
mul r2.xyz, r2.xyzx, cb4[3].wwww
add r3.xyz, r2.xyzx, r2.xyzx
sample_indexable(texture3d)(float,float,float,float) r1.z, r3.xyzx, t3.yzxw, s6
mad r1.z, r1.z, l(2.000000), l(-1.000000)
sample_indexable(texture3d)(float,float,float,float) r1.w, r2.xyzx, t3.yzwx, s6
mul r2.xyz, r2.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
sample_indexable(texture3d)(float,float,float,float) r2.x, r2.xyzx, t3.xyzw, s6
mad r2.x, r2.x, l(2.000000), l(-1.000000)
mad r1.w, r1.w, l(2.000000), l(-1.000000)
mad r1.z, r1.z, l(0.500000), r1.w
mad r1.z, r2.x, l(0.250000), r1.z
mad r1.z, r1.z, l(0.285714), cb4[8].z
add r1.z, r1.z, l(0.500000)
mul_sat r1.z, r1.z, cb4[8].w
add r1.w, r1.z, l(-1.000000)
mul r2.xyz, r1.zzzz, cb4[5].xyzx
mad r1.zw, cb4[8].xxxy, r1.wwww, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r1.xy, r1.wwww, r1.xyxx
mul r1.z, r1.z, cb4[6].x
add r1.w, v5.w, -cb4[9].x
mul_sat r1.w, r1.w, cb4[9].y
mul r1.z, r1.w, r1.z
mul r1.z, r1.z, v8.w
mul r1.z, r1.z, l(1.010101)
mul r1.xy, r1.zzzz, r1.xyxx
div r3.xy, v5.xyxx, v5.wwww
mad r1.xy, r1.xyxx, l(0.200000, 0.200000, 0.000000, 0.000000), r3.xyxx
sample_indexable(texture2d)(float,float,float,float) r1.xyw, r1.xyxx, t4.xywz, s5
div r1.xyw, r1.xyxw, cb3[2].wwww
add r0.xyz, r0.xyzx, -r1.xywx
mad r0.xyz, cb4[6].wwww, r0.xyzx, r1.xywx
add r2.w, l(1.000000), -cb4[6].z
mad_sat r0.w, r2.w, r0.w, cb4[6].z
mul r2.xyz, r0.wwww, r2.xyzx
mad r0.xyz, r2.xyzx, cb0[2].xyzx, r0.xyzx
add r0.xyz, -r1.xywx, r0.xyzx
mad r0.xyz, r1.zzzz, r0.xyzx, r1.xywx
mul o0.w, r1.z, v4.w
add r0.xyz, r0.xyzx, -cb3[3].xyzx
mad r0.xyz, v4.wwww, r0.xyzx, cb3[3].xyzx
mad r0.xyz, r0.xyzx, v6.wwww, v6.xyzx
mul o0.xyz, r0.xyzx, cb3[2].wwww
ret 
// Approximately 105 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
