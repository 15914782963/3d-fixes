cbuffer cb4 : register(b4)
{
  float4 cb4[5];
}


cbuffer PER_INSTANCE : register(b1)
{
  float4 Ambient : packoffset(c0);
  float4 FrozenLayerParams : packoffset(c1);
}

cbuffer STATIC_INSTANCE : register(b2)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
  float4 AmbientObjectCol : packoffset(c4);
  float4 AmbientOp : packoffset(c5);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_SunLightDir : packoffset(c4);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

cbuffer PER_MATERIAL : register(b4)
{
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float2 __0__1VariationTilling__2__3 : packoffset(c4);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : COLOR0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = -g_VS_WorldViewPos.x + ObjWorldMatrix._m03;
  r0.xyz = ObjWorldMatrix._m00_m01_m02;
  r1.xyz = v0.xyz;
  r1.w = 1;
  r0.x = dot(r0.xyzw, r1.xyzw);
  r2.w = -g_VS_WorldViewPos.y + ObjWorldMatrix._m13;
  r2.xyz = ObjWorldMatrix._m10_m11_m12;
  r0.y = dot(r2.xyzw, r1.xyzw);
  r2.w = -g_VS_WorldViewPos.z + ObjWorldMatrix._m23;
  r2.xyz = ObjWorldMatrix._m20_m21_m22;
  r0.z = dot(r2.xyzw, r1.xyzw);
  r0.w = 1;
  r1.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r0.xyzw);
  r1.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r0.xyzw);
  o0.xyw = r1.xyw;
  r1.xy = r1.xy * float2(1,-1) + r1.ww;
  o2.w = r1.w;
  o2.xy = float2(0.5,0.5) * r1.xy;
  o0.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r0.xyzw);
  o3.xyzw = r0.xyzw;
  o1.xy = v1.xy;
  o1.z = v4.z;
  o1.w = v3.z;
  r0.xyz = float3(0,9.99999997e-007,0) + v3.zxy;
  r1.xyz = float3(0,0,-9.99999997e-007) + v4.yzx;
  r0.xyz = r1.xyz * r0.xyz;
  r1.xyz = float3(0,0,9.99999997e-007) + v3.yzx;
  r2.xyz = float3(0,-9.99999997e-007,0) + v4.zxy;
  r0.xyz = r1.xyz * r2.xyz + -r0.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = rsqrt(r0.x);
  r0.x = r0.z * r0.x;
  o2.z = v3.w * r0.x;
  r0.xyz = float3(9.99999997e-007,0,0) + v3.xyz;
  r1.x = dot(ObjWorldMatrix._m00_m01_m02, r0.xyz);
  r1.y = dot(ObjWorldMatrix._m10_m11_m12, r0.xyz);
  r1.z = dot(ObjWorldMatrix._m20_m21_m22, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  o4.xyz = r1.xyz * r0.xxx;
  o4.w = 0;
  r0.xyz = float3(-9.99999997e-007,0,0) + v4.xyz;
  r1.x = dot(ObjWorldMatrix._m00_m01_m02, r0.xyz);
  r1.y = dot(ObjWorldMatrix._m10_m11_m12, r0.xyz);
  r1.z = dot(ObjWorldMatrix._m20_m21_m22, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  o5.xyz = r1.xyz * r0.xxx;
  o5.w = 0;
  o6.xyz = cb4[4].yyy * v0.xyz;
  o6.w = 0;
  o7.xyzw = AmbientOp.xyzw;
  o8.x = dot(v2.zyx, float3(0.333000004,0.333000004,0.333000004));
  o8.y = 0;
  o8.z = 1 + -FrozenLayerParams.w;
  o8.w = v3.w * 0.5 + 0.5;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer PER_INSTANCE
// {
//
//   float4 Ambient;                    // Offset:    0 Size:    16 [unused]
//   float4 FrozenLayerParams;          // Offset:   16 Size:    16
//
// }
//
// cbuffer STATIC_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//   float4 AmbientObjectCol;           // Offset:   64 Size:    16 [unused]
//   float4 AmbientOp;                  // Offset:   80 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_SunLightDir;           // Offset:   64 Size:    16 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float2 __0__1VariationTilling__2__3;// Offset:   64 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// STATIC_INSTANCE                   cbuffer      NA          NA    2        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// COLOR                    0   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[2], immediateIndexed
dcl_constantbuffer cb2[6], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_constantbuffer cb4[5], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyz
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_temps 3
add r0.w, cb2[0].w, -cb3[6].x
mov r0.xyz, cb2[0].xyzx
mov r1.xyz, v0.xyzx
mov r1.w, l(1.000000)
dp4 r0.x, r0.xyzw, r1.xyzw
add r2.w, cb2[1].w, -cb3[6].y
mov r2.xyz, cb2[1].xyzx
dp4 r0.y, r2.xyzw, r1.xyzw
add r2.w, cb2[2].w, -cb3[6].z
mov r2.xyz, cb2[2].xyzx
dp4 r0.z, r2.xyzw, r1.xyzw
mov r0.w, l(1.000000)
dp4 r1.x, cb3[10].xyzw, r0.xyzw
dp4 r1.y, cb3[11].xyzw, r0.xyzw
dp4 r1.w, cb3[13].xyzw, r0.xyzw
mov o0.xyw, r1.xyxw
mad r1.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r1.wwww
mov o2.w, r1.w
mul o2.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
dp4 o0.z, cb3[12].xyzw, r0.xyzw
mov o3.xyzw, r0.xyzw
mov o1.xy, v1.xyxx
mov o1.z, v4.z
mov o1.w, v3.z
add r0.xyz, v3.zxyz, l(0.000000, 0.000001, 0.000000, 0.000000)
add r1.xyz, v4.yzxy, l(0.000000, 0.000000, -0.000001, 0.000000)
mul r0.xyz, r0.xyzx, r1.xyzx
add r1.xyz, v3.yzxy, l(0.000000, 0.000000, 0.000001, 0.000000)
add r2.xyz, v4.zxyz, l(0.000000, -0.000001, 0.000000, 0.000000)
mad r0.xyz, r1.xyzx, r2.xyzx, -r0.xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
rsq r0.x, r0.x
mul r0.x, r0.x, r0.z
mul o2.z, r0.x, v3.w
add r0.xyz, v3.xyzx, l(0.000001, 0.000000, 0.000000, 0.000000)
dp3 r1.x, cb2[0].xyzx, r0.xyzx
dp3 r1.y, cb2[1].xyzx, r0.xyzx
dp3 r1.z, cb2[2].xyzx, r0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul o4.xyz, r0.xxxx, r1.xyzx
mov o4.w, l(0)
add r0.xyz, v4.xyzx, l(-0.000001, 0.000000, 0.000000, 0.000000)
dp3 r1.x, cb2[0].xyzx, r0.xyzx
dp3 r1.y, cb2[1].xyzx, r0.xyzx
dp3 r1.z, cb2[2].xyzx, r0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul o5.xyz, r0.xxxx, r1.xyzx
mov o5.w, l(0)
mul o6.xyz, v0.xyzx, cb4[4].yyyy
mov o6.w, l(0)
mov o7.xyzw, cb2[5].xyzw
dp3 o8.x, v2.zyxz, l(0.333000, 0.333000, 0.333000, 0.000000)
mov o8.y, l(0)
add o8.z, -cb1[1].w, l(1.000000)
mad o8.w, v3.w, l(0.500000), l(0.500000)
ret 
// Approximately 58 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.31 on Mon Jul 13 02:55:27 2015
//
//
// Buffer Definitions: 
//
// cbuffer cb4
// {
//
//   float4 cb4[5];                     // Offset:    0 Size:    80
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 Ambient;                    // Offset:    0 Size:    16 [unused]
//   float4 FrozenLayerParams;          // Offset:   16 Size:    16
//
// }
//
// cbuffer STATIC_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//   float4 AmbientObjectCol;           // Offset:   64 Size:    16 [unused]
//   float4 AmbientOp;                  // Offset:   80 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_SunLightDir;           // Offset:   64 Size:    16 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// STATIC_INSTANCE                   cbuffer      NA          NA    2        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// cb4                               cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// COLOR                    0   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb4[5], immediateIndexed
dcl_constantbuffer cb1[2], immediateIndexed
dcl_constantbuffer cb2[6], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyz
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_temps 3
add r0.w, cb2[0].w, -cb3[6].x
mov r0.xyz, cb2[0].xyzx
mov r1.xyz, v0.xyzx
mov r1.w, l(1.000000)
dp4 r0.x, r0.xyzw, r1.xyzw
add r2.w, cb2[1].w, -cb3[6].y
mov r2.xyz, cb2[1].xyzx
dp4 r0.y, r2.xyzw, r1.xyzw
add r2.w, cb2[2].w, -cb3[6].z
mov r2.xyz, cb2[2].xyzx
dp4 r0.z, r2.xyzw, r1.xyzw
mov r0.w, l(1.000000)
dp4 r1.x, cb3[10].xyzw, r0.xyzw
dp4 r1.y, cb3[11].xyzw, r0.xyzw
dp4 r1.w, cb3[13].xyzw, r0.xyzw
mov o0.xyw, r1.xyxw
mad r1.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r1.wwww
mov o2.w, r1.w
mul o2.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
dp4 o0.z, cb3[12].xyzw, r0.xyzw
mov o3.xyzw, r0.xyzw
mov o1.xy, v1.xyxx
mov o1.z, v4.z
mov o1.w, v3.z
add r0.xyz, v3.xyzx, l(0.000001, 0.000000, 0.000000, 0.000000)
add r1.xyz, v4.xyzx, l(-0.000001, 0.000000, 0.000000, 0.000000)
mul r2.xyz, r0.zxyz, r1.yzxy
mad r2.xyz, r0.yzxy, r1.zxyz, -r2.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r0.w, r0.w, r2.z
mul o2.z, r0.w, v3.w
dp3 r2.x, cb2[0].xyzx, r0.xyzx
dp3 r2.y, cb2[1].xyzx, r0.xyzx
dp3 r2.z, cb2[2].xyzx, r0.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul o4.xyz, r0.xxxx, r2.xyzx
mov o4.w, l(0)
dp3 r0.x, cb2[0].xyzx, r1.xyzx
dp3 r0.y, cb2[1].xyzx, r1.xyzx
dp3 r0.z, cb2[2].xyzx, r1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul o5.xyz, r0.wwww, r0.xyzx
mov o5.w, l(0)
mul o6.xyz, v0.xyzx, cb4[4].yyyy
mov o6.w, l(0)
mov o7.xyzw, cb2[5].xyzw
dp3 o8.x, v2.zyxz, l(0.333000, 0.333000, 0.333000, 0.000000)
mov o8.y, l(0)
add o8.z, l(1.000000), -cb1[1].w
mad o8.w, v3.w, l(0.500000), l(0.500000)
ret 
// Approximately 54 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
