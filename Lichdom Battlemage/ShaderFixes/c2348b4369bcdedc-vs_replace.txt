
cbuffer PER_BATCH : register(b0)
{
  float4 _WaveLevels : packoffset(c0);
  float4 _WaveVtxPhases : packoffset(c1);
  float4 _WaveInfoX : packoffset(c2);
  float4 _InstancingParams : packoffset(c3);
  float4 _WaveAmp : packoffset(c4);
  float4 _WaveFreq : packoffset(c5);
}

cbuffer PER_INSTANCE : register(b1)
{
  float4 VisionParams : packoffset(c0);
}

cbuffer STATIC_INSTANCE : register(b2)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

cbuffer SKIN_DATA : register(b7)
{
  row_major float2x4 _g_SkinQuat[200] : packoffset(c0);
}

cbuffer SHAPE_DATA : register(b8)
{
  float4 _g_ShapeDeformationData[8] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BLENDWEIGHT0,
  float4 v5 : BLENDINDICES0,
  float4 v6 : COLOR1,
  float3 v7 : TEXCOORD4,
  float3 v8 : TEXCOORD5,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = float4(2.550020e+002,2.550020e+002,2.550020e+002,2.550020e+002) * v5.xyzw;
  r0.xyzw = (int4)r0.xyzw;
  r0.xyzw = (uint4)r0.xyzw << int4(1,1,1,1);
  r1.xyzw = _g_SkinQuat[r0.y/2]._m10_m11_m12_m13 * v4.yyyy;
  r1.xyzw = _g_SkinQuat[r0.x/2]._m10_m11_m12_m13 * v4.xxxx + r1.xyzw;
  r1.xyzw = _g_SkinQuat[r0.z/2]._m10_m11_m12_m13 * v4.zzzz + r1.xyzw;
  r1.xyzw = _g_SkinQuat[r0.w/2]._m10_m11_m12_m13 * v4.wwww + r1.xyzw;
  r2.xyzw = _g_SkinQuat[r0.y/2]._m00_m01_m02_m03 * v4.yyyy;
  r2.xyzw = _g_SkinQuat[r0.x/2]._m00_m01_m02_m03 * v4.xxxx + r2.xyzw;
  r2.xyzw = _g_SkinQuat[r0.z/2]._m00_m01_m02_m03 * v4.zzzz + r2.xyzw;
  r0.xyzw = _g_SkinQuat[r0.w/2]._m00_m01_m02_m03 * v4.wwww + r2.xyzw;
  r2.x = dot(r0.xyzw, r0.xyzw);
  r2.x = rsqrt(r2.x);
  r1.xyzw = r2.xxxx * r1.xyzw;
  r0.xyzw = r2.xxxx * r0.xyzw;
  r2.xyz = r1.www * r0.xyz;
  r2.xyz = r0.www * r1.xyz + -r2.xyz;
  r3.xyz = r0.zxy * r1.yzx;
  r1.xyz = r0.yzx * r1.zxy + -r3.xyz;
  r1.xyz = r2.xyz + r1.xyz;
  r1.w = 255.001953 * v6.w;
  r1.w = (int)r1.w;
  r1.w = min(8, (int)r1.w);
  r2.xyz = _g_ShapeDeformationData[r1.w].yyy * v0.xyz;
  r2.xyz = v7.xyz * _g_ShapeDeformationData[r1.w].xxx + r2.xyz;
  r2.xyz = v8.xyz * _g_ShapeDeformationData[r1.w].zzz + r2.xyz;
  r3.xyz = r2.zxy * r0.xyz;
  r3.xyz = r0.zxy * r2.xyz + -r3.xyz;
  r3.xyz = r0.www * r2.yzx + r3.xyz;
  r4.xyz = r3.xyz * r0.zxy;
  r3.xyz = r0.yzx * r3.yzx + -r4.xyz;
  r2.xyz = r3.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + r2.xyz;
  r1.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + r2.xyz;
  r1.w = r1.x + r1.y;
  r1.w = r1.w + r1.z;
  r2.xyzw = _WaveVtxPhases.xyzw * r1.wwww;
  r2.xyzw = r2.xyzw * v2.yyyy + _WaveFreq.xyzw;
  r2.xyzw = v2.zzzz + r2.xyzw;
  r2.xyzw = float4(3.141593e+000,3.141593e+000,3.141593e+000,3.141593e+000) * r2.xyzw;
  r2.xyzw = sin(r2.xyzw);
  r2.xyzw = r2.xyzw * _WaveAmp.xyzw + _WaveLevels.xyzw;
  r1.w = dot(r2.xyzw, float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000));
  r2.xyz = float3(0.000000e+000,0.000000e+000,1.000000e-006) + v3.yzx;
  r2.xyz = r2.xyz * r0.zxy;
  r3.xyz = float3(0.000000e+000,1.000000e-006,0.000000e+000) + v3.zxy;
  r2.xyz = r0.yzx * r3.xyz + -r2.xyz;
  r3.xyz = float3(1.000000e-006,0.000000e+000,0.000000e+000) + v3.xyz;
  r3.x = dot(r0.xyz, r3.xyz);
  r2.w = -r3.x;
  r3.xyzw = float4(1.000000e-006,0.000000e+000,0.000000e+000,0.000000e+000) + v3.xyzw;
  r2.xyzw = r3.xyzw * r0.wwww + r2.xyzw;
  r0.xyz = r0.yzx * v3.www + r2.yzx;
  r3.xyz = float3(-2.000000e+000,-2.000000e+000,-2.000000e+000) * r0.xyz;
  r2.xyz = -r0.zxy;
  r0.xyz = float3(2.000000e+000,-2.000000e+000,2.000000e+000) * r2.www;
  r4.xyz = r2.ywz * r0.zzy + float3(0.000000e+000,-1.000000e+000,0.000000e+000);
  r0.xyz = r2.wxz * r0.xyz + float3(-1.000000e+000,0.000000e+000,0.000000e+000);
  r0.xyz = r2.yyy * r3.xyz + r0.xyz;
  r2.xyz = r2.xxx * r3.yzx + r4.xyz;
  r3.xyz = r2.xyz * r0.xyz;
  r0.xyz = r2.zxy * r0.yzx + -r3.xyz;
  r0.w = v3.w < 0;
  r0.w = r0.w ? -1 : 1;
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = r0.xyz * r1.www;
  r0.xyz = r0.xyz * v2.xxx + r1.xyz;
  r1.yzw = ObjWorldMatrix._m00_m01_m02;
  r1.x = -g_VS_WorldViewPos.x + ObjWorldMatrix._m03;
  r0.w = 1;
  r2.x = dot(r1.yzwx, r0.xyzw);
  r3.xyz = ObjWorldMatrix._m10_m11_m12;
  r3.w = -g_VS_WorldViewPos.y + ObjWorldMatrix._m13;
  r2.y = dot(r3.xyzw, r0.xyzw);
  r1.y = r3.w;
  r3.xyz = ObjWorldMatrix._m20_m21_m22;
  r3.w = -g_VS_WorldViewPos.z + ObjWorldMatrix._m23;
  r2.z = dot(r3.xyzw, r0.xyzw);
  r1.z = r3.w;
  r0.xyz = g_VS_WorldViewPos.xyz + r1.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.x = frac(r0.x);
  o1.w = 0.00999999978 + r0.x;
  r2.w = 1;
  r0.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r2.xyzw);
  r0.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r2.xyzw);
  r0.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r2.xyzw);
  r0.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r2.xyzw);
  o4.xyz = r2.xyz;
  o0.xyzw = r0.xyzw;
  r0.xy = r0.xy * float2(1.000000e+000,-1.000000e+000) + r0.ww;
  o2.xy = float2(5.000000e-001,5.000000e-001) * r0.xy;
  o2.zw = r0.zw;
  o1.z = r0.w;
  o1.xy = v1.xy;
  o3.xyzw = VisionParams.xyzw;
  o4.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 _WaveLevels;                // Offset:    0 Size:    16
//   float4 _WaveVtxPhases;             // Offset:   16 Size:    16
//   float4 _WaveInfoX;                 // Offset:   32 Size:    16 [unused]
//   float4 _InstancingParams;          // Offset:   48 Size:    16 [unused]
//   float4 _WaveAmp;                   // Offset:   64 Size:    16
//   float4 _WaveFreq;                  // Offset:   80 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 VisionParams;               // Offset:    0 Size:    16
//
// }
//
// cbuffer STATIC_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
// cbuffer SKIN_DATA
// {
//
//   row_major float2x4 _g_SkinQuat[200];// Offset:    0 Size:  6400
//
// }
//
// cbuffer SHAPE_DATA
// {
//
//   float4 _g_ShapeDeformationData[8]; // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// STATIC_INSTANCE                   cbuffer      NA          NA    2        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// SKIN_DATA                         cbuffer      NA          NA    7        1
// SHAPE_DATA                        cbuffer      NA          NA    8        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
// BLENDINDICES             0   xyzw        5     NONE   float   xyzw
// COLOR                    1   xyzw        6     NONE   float      w
// TEXCOORD                 4   xyz         7     NONE   float   xyz 
// TEXCOORD                 5   xyz         8     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_constantbuffer cb7[400], dynamicIndexed
dcl_constantbuffer cb8[8], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyz
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.w
dcl_input v7.xyz
dcl_input v8.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 5
mul r0.xyzw, v5.xyzw, l(255.001953, 255.001953, 255.001953, 255.001953)
ftoi r0.xyzw, r0.xyzw
ishl r0.xyzw, r0.xyzw, l(1, 1, 1, 1)
mul r1.xyzw, v4.yyyy, cb7[r0.y + 1].xyzw
mad r1.xyzw, cb7[r0.x + 1].xyzw, v4.xxxx, r1.xyzw
mad r1.xyzw, cb7[r0.z + 1].xyzw, v4.zzzz, r1.xyzw
mad r1.xyzw, cb7[r0.w + 1].xyzw, v4.wwww, r1.xyzw
mul r2.xyzw, v4.yyyy, cb7[r0.y + 0].xyzw
mad r2.xyzw, cb7[r0.x + 0].xyzw, v4.xxxx, r2.xyzw
mad r2.xyzw, cb7[r0.z + 0].xyzw, v4.zzzz, r2.xyzw
mad r0.xyzw, cb7[r0.w + 0].xyzw, v4.wwww, r2.xyzw
dp4 r2.x, r0.xyzw, r0.xyzw
rsq r2.x, r2.x
mul r1.xyzw, r1.xyzw, r2.xxxx
mul r0.xyzw, r0.xyzw, r2.xxxx
mul r2.xyz, r0.xyzx, r1.wwww
mad r2.xyz, r0.wwww, r1.xyzx, -r2.xyzx
mul r3.xyz, r1.yzxy, r0.zxyz
mad r1.xyz, r0.yzxy, r1.zxyz, -r3.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
mul r1.w, v6.w, l(255.001953)
ftoi r1.w, r1.w
imin r1.w, r1.w, l(8)
mul r2.xyz, v0.xyzx, cb8[r1.w + 0].yyyy
mad r2.xyz, v7.xyzx, cb8[r1.w + 0].xxxx, r2.xyzx
mad r2.xyz, v8.xyzx, cb8[r1.w + 0].zzzz, r2.xyzx
mul r3.xyz, r0.xyzx, r2.zxyz
mad r3.xyz, r0.zxyz, r2.xyzx, -r3.xyzx
mad r3.xyz, r0.wwww, r2.yzxy, r3.xyzx
mul r4.xyz, r0.zxyz, r3.xyzx
mad r3.xyz, r0.yzxy, r3.yzxy, -r4.xyzx
mad r2.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r2.xyzx
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r2.xyzx
add r1.w, r1.y, r1.x
add r1.w, r1.z, r1.w
mul r2.xyzw, r1.wwww, cb0[1].xyzw
mad r2.xyzw, r2.xyzw, v2.yyyy, cb0[5].xyzw
add r2.xyzw, r2.xyzw, v2.zzzz
mul r2.xyzw, r2.xyzw, l(3.141593, 3.141593, 3.141593, 3.141593)
sincos r2.xyzw, null, r2.xyzw
mad r2.xyzw, r2.xyzw, cb0[4].xyzw, cb0[0].xyzw
dp4 r1.w, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r2.xyz, v3.yzxy, l(0.000000, 0.000000, 0.000001, 0.000000)
mul r2.xyz, r0.zxyz, r2.xyzx
add r3.xyz, v3.zxyz, l(0.000000, 0.000001, 0.000000, 0.000000)
mad r2.xyz, r0.yzxy, r3.xyzx, -r2.xyzx
add r3.xyz, v3.xyzx, l(0.000001, 0.000000, 0.000000, 0.000000)
dp3 r3.x, r0.xyzx, r3.xyzx
mov r2.w, -r3.x
add r3.xyzw, v3.xyzw, l(0.000001, 0.000000, 0.000000, 0.000000)
mad r2.xyzw, r3.xyzw, r0.wwww, r2.xyzw
mad r0.xyz, r0.yzxy, v3.wwww, r2.yzxy
mul r3.xyz, r0.xyzx, l(-2.000000, -2.000000, -2.000000, 0.000000)
mov r2.xyz, -r0.zxyz
mul r0.xyz, r2.wwww, l(2.000000, -2.000000, 2.000000, 0.000000)
mad r4.xyz, r2.ywzy, r0.zzyz, l(0.000000, -1.000000, 0.000000, 0.000000)
mad r0.xyz, r2.wxzw, r0.xyzx, l(-1.000000, 0.000000, 0.000000, 0.000000)
mad r0.xyz, r2.yyyy, r3.xyzx, r0.xyzx
mad r2.xyz, r2.xxxx, r3.yzxy, r4.xyzx
mul r3.xyz, r0.xyzx, r2.xyzx
mad r0.xyz, r2.zxyz, r0.yzxy, -r3.xyzx
lt r0.w, v3.w, l(0.000000)
movc r0.w, r0.w, l(-1.000000), l(1.000000)
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.xyz, r1.wwww, r0.xyzx
mad r0.xyz, r0.xyzx, v2.xxxx, r1.xyzx
mov r1.yzw, cb2[0].xxyz
add r1.x, cb2[0].w, -cb3[6].x
mov r0.w, l(1.000000)
dp4 r2.x, r1.yzwx, r0.xyzw
mov r3.xyz, cb2[1].xyzx
add r3.w, cb2[1].w, -cb3[6].y
dp4 r2.y, r3.xyzw, r0.xyzw
mov r1.y, r3.w
mov r3.xyz, cb2[2].xyzx
add r3.w, cb2[2].w, -cb3[6].z
dp4 r2.z, r3.xyzw, r0.xyzw
mov r1.z, r3.w
add r0.xyz, r1.xyzx, cb3[6].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
frc r0.x, r0.x
add o1.w, r0.x, l(0.010000)
mov r2.w, l(1.000000)
dp4 r0.x, cb3[10].xyzw, r2.xyzw
dp4 r0.y, cb3[11].xyzw, r2.xyzw
dp4 r0.z, cb3[12].xyzw, r2.xyzw
dp4 r0.w, cb3[13].xyzw, r2.xyzw
mov o4.xyz, r2.xyzx
mov o0.xyzw, r0.xyzw
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r0.wwww
mul o2.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o2.zw, r0.zzzw
mov o1.z, r0.w
mov o1.xy, v1.xyxx
mov o3.xyzw, cb1[0].xyzw
mov o4.w, l(0)
ret 
// Approximately 98 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.30 on Wed Jul 08 20:50:38 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 _WaveLevels;                // Offset:    0 Size:    16
//   float4 _WaveVtxPhases;             // Offset:   16 Size:    16
//   float4 _WaveInfoX;                 // Offset:   32 Size:    16 [unused]
//   float4 _InstancingParams;          // Offset:   48 Size:    16 [unused]
//   float4 _WaveAmp;                   // Offset:   64 Size:    16
//   float4 _WaveFreq;                  // Offset:   80 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 VisionParams;               // Offset:    0 Size:    16
//
// }
//
// cbuffer STATIC_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
// cbuffer SKIN_DATA
// {
//
//   row_major float2x4 _g_SkinQuat[200];// Offset:    0 Size:  6400
//
// }
//
// cbuffer SHAPE_DATA
// {
//
//   float4 _g_ShapeDeformationData[8]; // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// STATIC_INSTANCE                   cbuffer      NA          NA    2        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// SKIN_DATA                         cbuffer      NA          NA    7        1
// SHAPE_DATA                        cbuffer      NA          NA    8        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
// BLENDINDICES             0   xyzw        5     NONE   float   xyzw
// COLOR                    1   xyzw        6     NONE   float      w
// TEXCOORD                 4   xyz         7     NONE   float   xyz 
// TEXCOORD                 5   xyz         8     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_constantbuffer cb7[400], dynamicIndexed
dcl_constantbuffer cb8[8], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyz
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.w
dcl_input v7.xyz
dcl_input v8.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 5
mul r0.xyzw, v5.yxzw, l(255.001999, 255.001999, 255.001999, 255.001999)
round_z r0.xyzw, r0.xyzw
ftou r0.xyzw, r0.xyzw
ishl r0.xyzw, r0.xyzw, l(1, 1, 1, 1)
utof r0.xyzw, r0.xyzw
mul r0.xyzw, r0.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
ftou r0.xyzw, r0.xyzw
ishl r0.xyzw, r0.xyzw, l(1, 1, 1, 1)
mul r1.xyzw, v4.yyyy, cb7[r0.x + 1].xyzw
mad r1.xyzw, cb7[r0.y + 1].xyzw, v4.xxxx, r1.xyzw
mad r1.xyzw, cb7[r0.z + 1].xyzw, v4.zzzz, r1.xyzw
mad r1.xyzw, cb7[r0.w + 1].xyzw, v4.wwww, r1.xyzw
mul r2.xyzw, v4.yyyy, cb7[r0.x + 0].xyzw
mad r2.xyzw, cb7[r0.y + 0].xyzw, v4.xxxx, r2.xyzw
mad r2.xyzw, cb7[r0.z + 0].xyzw, v4.zzzz, r2.xyzw
mad r0.xyzw, cb7[r0.w + 0].xyzw, v4.wwww, r2.xyzw
dp4 r2.x, r0.xyzw, r0.xyzw
rsq r2.x, r2.x
mul r1.xyzw, r1.xyzw, r2.xxxx
mul r0.xyzw, r0.xyzw, r2.xxxx
mul r2.xyz, r0.xyzx, r1.wwww
mad r2.xyz, r0.wwww, r1.xyzx, -r2.xyzx
mul r3.xyz, r1.yzxy, r0.zxyz
mad r1.xyz, r0.yzxy, r1.zxyz, -r3.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
mul r1.w, v6.w, l(255.001953)
round_z r1.w, r1.w
ftoi r1.w, r1.w
imin r1.w, r1.w, l(8)
itof r1.w, r1.w
ftou r1.w, r1.w
mul r2.xyz, v0.xyzx, cb8[r1.w + 0].yyyy
mad r2.xyz, v7.xyzx, cb8[r1.w + 0].xxxx, r2.xyzx
mad r2.xyz, v8.xyzx, cb8[r1.w + 0].zzzz, r2.xyzx
mul r3.xyz, r0.yzxy, r2.xyzx
mad r3.xyz, r0.xyzx, r2.yzxy, -r3.xyzx
mad r3.xyz, r0.wwww, r2.zxyz, r3.xyzx
mul r4.xyz, r0.zxyz, r3.zxyz
mad r3.xyz, r0.yzxy, r3.xyzx, -r4.xyzx
mad r2.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r2.xyzx
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r2.xyzx
add r1.w, r1.y, r1.x
add r1.w, r1.z, r1.w
mul r2.xyzw, r1.wwww, cb0[1].xyzw
mad r2.xyzw, r2.xyzw, v2.yyyy, cb0[5].xyzw
add r2.xyzw, r2.xyzw, v2.zzzz
mul r2.xyzw, r2.xyzw, l(3.141593, 3.141593, 3.141593, 3.141593)
sincos r2.xyzw, null, r2.xyzw
mad r2.xyzw, r2.xyzw, cb0[4].xyzw, cb0[0].xyzw
dp4 r1.w, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r2.xyz, v3.xyzx, l(0.000001, 0.000000, 0.000000, 0.000000)
mul r3.xyz, r0.zxyz, r2.yzxy
mad r3.xyz, r0.yzxy, r2.zxyz, -r3.xyzx
dp3 r2.x, r0.xyzx, r2.xyzx
mov r3.w, -r2.x
add r2.xyzw, v3.xyzw, l(0.000001, 0.000000, 0.000000, 0.000000)
mad r2.xyzw, r2.xyzw, r0.wwww, r3.xyzw
mad r0.xyz, r0.xyzx, v3.wwww, r2.xyzx
mul r3.xyz, r0.yzxy, l(-2.000000, -2.000000, -2.000000, 0.000000)
mov r2.xyz, -r0.xyzx
mul r0.xyz, r2.wwww, l(-2.000000, 2.000000, 2.000000, 0.000000)
mad r4.xyz, r2.xzwx, r0.xyzx, l(0.000000, 0.000000, -1.000000, 0.000000)
mad r0.xyz, r2.zywz, r0.xzzx, l(0.000000, 0.000000, -1.000000, 0.000000)
mad r0.xyz, r2.xxxx, r3.xyzx, r0.xyzx
mad r2.xyz, r2.yyyy, r3.yzxy, r4.xyzx
mul r3.xyz, r0.yzxy, r2.zxyz
mad r0.xyz, r0.xyzx, r2.xyzx, -r3.xyzx
lt r0.w, v3.w, l(0.000000)
movc r0.w, r0.w, l(-1.000000), l(1.000000)
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.xyz, r1.wwww, r0.xyzx
mad r0.xyz, r0.xyzx, v2.xxxx, r1.xyzx
mov r1.yzw, cb2[0].xxyz
add r1.x, cb2[0].w, -cb3[6].x
mov r0.w, l(1.000000)
dp4 r2.x, r1.yzwx, r0.xyzw
mov r3.xyz, cb2[1].xyzx
add r3.w, cb2[1].w, -cb3[6].y
dp4 r2.y, r3.xyzw, r0.xyzw
mov r1.y, r3.w
mov r3.xyz, cb2[2].xyzx
add r3.w, cb2[2].w, -cb3[6].z
dp4 r2.z, r3.xyzw, r0.xyzw
mov r1.z, r3.w
add r0.xyz, r1.xyzx, cb3[6].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
frc r0.x, r0.x
add o1.w, r0.x, l(0.010000)
mov r2.w, l(1.000000)
dp4 r0.x, cb3[10].xyzw, r2.xyzw
dp4 r0.y, cb3[11].xyzw, r2.xyzw
dp4 r0.z, cb3[12].xyzw, r2.xyzw
dp4 r0.w, cb3[13].xyzw, r2.xyzw
mov o4.xyz, r2.xyzx
mov o0.xyzw, r0.xyzw
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r0.wwww
mul o2.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o2.zw, r0.zzzw
mov o1.z, r0.w
mov o1.xy, v1.xyxx
mov o3.xyzw, cb1[0].xyzw
mov o4.w, l(0)
ret 
// Approximately 104 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
