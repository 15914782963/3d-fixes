cbuffer cb3 : register(b3)
{
  float4 cb3[14];
}


cbuffer PER_BATCH : register(b0)
{
  float4 _InstancingParams : packoffset(c0);
  float3 vfColGradDelta : packoffset(c1);
  float4 vfRampParams : packoffset(c2);
  float4 vfColGradRadial : packoffset(c3);
  float4 vfColGradParams : packoffset(c4);
  float3 vfColGradBase : packoffset(c5);
  float4 BaseTCMatrix : packoffset(c6);
  float4 vfParams : packoffset(c7);
  float3 vfSunDir : packoffset(c8);
  float4 vfViewPos : packoffset(c9);
}

cbuffer STATIC_INSTANCE : register(b2)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
}

cbuffer PER_FRAME : register(b3)
{
  float4 g_VS_WorldViewPos : packoffset(c6);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : NORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : COLOR0,
  out float4 o5 : COLOR1)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = -cb3[6].x + ObjWorldMatrix._m03;
  r0.xyz = ObjWorldMatrix._m00_m01_m02;
  r1.xy = v0.xy;
  r1.z = v1.x;
  r1.w = 1;
  r0.x = dot(r0.xyzw, r1.xyzw);
  r2.w = -cb3[6].y + ObjWorldMatrix._m13;
  r2.xyz = ObjWorldMatrix._m10_m11_m12;
  r0.y = dot(r2.xyzw, r1.xyzw);
  r2.w = -cb3[6].z + ObjWorldMatrix._m23;
  r2.xyz = ObjWorldMatrix._m20_m21_m22;
  r0.z = dot(r2.xyzw, r1.xyzw);
  r0.w = 1;
  r1.x = dot(cb3[10].xyzw, r0.xyzw);
  r1.y = dot(cb3[11].xyzw, r0.xyzw);
  r1.z = dot(cb3[12].xyzw, r0.xyzw);
  r1.w = dot(cb3[13].xyzw, r0.xyzw);
  o0.xyzw = r1.xyzw;
  r1.xy = r1.xy * float2(1,-1) + r1.ww;
  o2.zw = r1.zw;
  o2.xy = float2(0.5,0.5) * r1.xy;
  r1.xyz = cb3[6].xyz + r0.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.y = vfParams.x * r0.z;
  r0.x = sqrt(r0.x);
  o1.w = r1.z;
  r1.w = 1;
  o1.x = dot(BaseTCMatrix.xy, r1.yw);
  o1.y = dot(BaseTCMatrix.xz, r1.xw);
  o1.z = BaseTCMatrix.x;
  r0.z = 1.44269502 * r0.y;
  r0.z = exp2(r0.z);
  r0.z = -1 + r0.z;
  r0.z = r0.z / r0.y;
  r0.y = 0.00999999978 < abs(r0.y);
  r0.y = r0.y ? r0.z : 1;
  r0.z = vfParams.y * r0.x;
  r0.x = saturate(r0.x * vfRampParams.x + vfRampParams.y);
  r0.y = r0.y * r0.z;
  r0.y = saturate(exp2(-r0.y));
  r0.yz = float2(1,2) + -r0.yx;
  r0.x = r0.x * r0.z;
  r0.x = r0.x * vfRampParams.z + vfRampParams.w;
  r0.x = -r0.y * r0.x + 1;
  o3.w = max(vfParams.w, r0.x);
  o3.xyz = v3.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.x = 0.498039216 < v2.y;
  r0.y = -0.501960814 + v2.y;
  r0.x = r0.x ? r0.y : v2.y;
  o4.y = r0.x;
  r0.x = r0.x >= 0.25;
  o5.w = r0.x ? 1.000000 : 0;
  o4.xzw = v2.zxw;
  o5.xy = v2.zx;
  o5.z = v3.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 _InstancingParams;          // Offset:    0 Size:    16 [unused]
//   float3 vfColGradDelta;             // Offset:   16 Size:    12 [unused]
//   float4 vfRampParams;               // Offset:   32 Size:    16
//   float4 vfColGradRadial;            // Offset:   48 Size:    16 [unused]
//   float4 vfColGradParams;            // Offset:   64 Size:    16 [unused]
//   float3 vfColGradBase;              // Offset:   80 Size:    12 [unused]
//   float4 BaseTCMatrix;               // Offset:   96 Size:    16
//   float4 vfParams;                   // Offset:  112 Size:    16
//   float3 vfSunDir;                   // Offset:  128 Size:    12 [unused]
//   float4 vfViewPos;                  // Offset:  144 Size:    16 [unused]
//
// }
//
// cbuffer STATIC_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//
// }
//
// cbuffer PER_FRAME
// {
//
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// STATIC_INSTANCE                   cbuffer      NA          NA    2        1
// PER_FRAME                         cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   x   
// COLOR                    0   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// COLOR                    0   xyzw        4     NONE   float   xyzw
// COLOR                    1   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_input v0.xy
dcl_input v1.x
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 3
add r0.w, cb2[0].w, -cb3[6].x
mov r0.xyz, cb2[0].xyzx
mov r1.xy, v0.xyxx
mov r1.z, v1.x
mov r1.w, l(1.000000)
dp4 r0.x, r0.xyzw, r1.xyzw
add r2.w, cb2[1].w, -cb3[6].y
mov r2.xyz, cb2[1].xyzx
dp4 r0.y, r2.xyzw, r1.xyzw
add r2.w, cb2[2].w, -cb3[6].z
mov r2.xyz, cb2[2].xyzx
dp4 r0.z, r2.xyzw, r1.xyzw
mov r0.w, l(1.000000)
dp4 r1.x, cb3[10].xyzw, r0.xyzw
dp4 r1.y, cb3[11].xyzw, r0.xyzw
dp4 r1.z, cb3[12].xyzw, r0.xyzw
dp4 r1.w, cb3[13].xyzw, r0.xyzw
mov o0.xyzw, r1.xyzw
mad r1.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r1.wwww
mov o2.zw, r1.zzzw
mul o2.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
add r1.xyz, r0.xyzx, cb3[6].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
mul r0.y, r0.z, cb0[7].x
sqrt r0.x, r0.x
mov o1.w, r1.z
mov r1.w, l(1.000000)
dp2 o1.x, cb0[6].xyxx, r1.ywyy
dp2 o1.y, cb0[6].xzxx, r1.xwxx
mov o1.z, cb0[6].x
mul r0.z, r0.y, l(1.442695)
exp r0.z, r0.z
add r0.z, r0.z, l(-1.000000)
div r0.z, r0.z, r0.y
lt r0.y, l(0.010000), |r0.y|
movc r0.y, r0.y, r0.z, l(1.000000)
mul r0.z, r0.x, cb0[7].y
mad_sat r0.x, r0.x, cb0[2].x, cb0[2].y
mul r0.y, r0.z, r0.y
exp_sat r0.y, -r0.y
add r0.yz, -r0.yyxy, l(0.000000, 1.000000, 2.000000, 0.000000)
mul r0.x, r0.z, r0.x
mad r0.x, r0.x, cb0[2].z, cb0[2].w
mad r0.x, -r0.y, r0.x, l(1.000000)
max o3.w, r0.x, cb0[7].w
mad o3.xyz, v3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
lt r0.x, l(0.498039), v2.y
add r0.y, v2.y, l(-0.501961)
movc r0.x, r0.x, r0.y, v2.y
mov o4.y, r0.x
ge r0.x, r0.x, l(0.250000)
and o5.w, r0.x, l(0x3f800000)
mov o4.xzw, v2.zzxw
mov o5.xy, v2.zxzz
mov o5.z, v3.w
ret 
// Approximately 56 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.30 on Fri Jul 10 19:23:05 2015
//
//
// Buffer Definitions: 
//
// cbuffer cb3
// {
//
//   float4 cb3[14];                    // Offset:    0 Size:   224
//
// }
//
// cbuffer PER_BATCH
// {
//
//   float4 _InstancingParams;          // Offset:    0 Size:    16 [unused]
//   float3 vfColGradDelta;             // Offset:   16 Size:    12 [unused]
//   float4 vfRampParams;               // Offset:   32 Size:    16
//   float4 vfColGradRadial;            // Offset:   48 Size:    16 [unused]
//   float4 vfColGradParams;            // Offset:   64 Size:    16 [unused]
//   float3 vfColGradBase;              // Offset:   80 Size:    12 [unused]
//   float4 BaseTCMatrix;               // Offset:   96 Size:    16
//   float4 vfParams;                   // Offset:  112 Size:    16
//   float3 vfSunDir;                   // Offset:  128 Size:    12 [unused]
//   float4 vfViewPos;                  // Offset:  144 Size:    16 [unused]
//
// }
//
// cbuffer STATIC_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// STATIC_INSTANCE                   cbuffer      NA          NA    2        1
// cb3                               cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   x   
// COLOR                    0   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// COLOR                    0   xyzw        4     NONE   float   xyzw
// COLOR                    1   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_input v0.xy
dcl_input v1.x
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 3
add r0.w, -cb3[6].x, cb2[0].w
mov r0.xyz, cb2[0].xyzx
mov r1.xy, v0.xyxx
mov r1.z, v1.x
mov r1.w, l(1.000000)
dp4 r0.x, r0.xyzw, r1.xyzw
add r2.w, -cb3[6].y, cb2[1].w
mov r2.xyz, cb2[1].xyzx
dp4 r0.y, r2.xyzw, r1.xyzw
add r2.w, -cb3[6].z, cb2[2].w
mov r2.xyz, cb2[2].xyzx
dp4 r0.z, r2.xyzw, r1.xyzw
mov r0.w, l(1.000000)
dp4 r1.x, cb3[10].xyzw, r0.xyzw
dp4 r1.y, cb3[11].xyzw, r0.xyzw
dp4 r1.z, cb3[12].xyzw, r0.xyzw
dp4 r1.w, cb3[13].xyzw, r0.xyzw
mov o0.xyzw, r1.xyzw
mad r1.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r1.wwww
mov o2.zw, r1.zzzw
mul o2.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
add r1.xyz, r0.xyzx, cb3[6].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
mul r0.y, r0.z, cb0[7].x
sqrt r0.x, r0.x
mov o1.w, r1.z
mov r1.w, l(1.000000)
dp2 o1.x, cb0[6].xyxx, r1.ywyy
dp2 o1.y, cb0[6].xzxx, r1.xwxx
mov o1.z, cb0[6].x
mul r0.z, r0.y, l(1.442695)
exp r0.z, r0.z
add r0.z, r0.z, l(-1.000000)
div r0.z, r0.z, r0.y
lt r0.y, l(0.010000), |r0.y|
movc r0.y, r0.y, r0.z, l(1.000000)
mul r0.z, r0.x, cb0[7].y
mad_sat r1.y, r0.x, cb0[2].x, cb0[2].y
mul r0.x, r0.z, r0.y
exp r0.x, -r0.x
min r1.x, r0.x, l(1.000000)
add r0.xy, -r1.xyxx, l(1.000000, 2.000000, 0.000000, 0.000000)
mul r0.y, r0.y, r1.y
mad r0.y, r0.y, cb0[2].z, cb0[2].w
mad r0.x, -r0.x, r0.y, l(1.000000)
max o3.w, r0.x, cb0[7].w
mad o3.xyz, v3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
lt r0.x, l(0.498039), v2.y
add r0.y, v2.y, l(-0.501961)
movc r0.x, r0.x, r0.y, v2.y
mov o4.y, r0.x
ge r0.x, r0.x, l(0.250000)
and o5.w, r0.x, l(0x3f800000)
mov o4.xzw, v2.zzxw
mov o5.xy, v2.zxzz
mov o5.z, v3.w
ret 
// Approximately 57 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
