// Water near temple with ripple (low-high)
//
// Other shaders:
// Vertex shader 3164e191c66c0f09 (low-high quality)
// Vertex shader e9dc7e9941cce17e (low-high quality, with ripple)
// Vertex shader e798b143bb30687f (low-high quality, with ripple. Water near temple)
// Domain shader 456aa4cee3d94c42 (very high quality)
// Domain shader 3981845112a28c3d (very high quality, with ripple)
// Pixel shader a36d6a7ba41041b0

cbuffer cb4 : register(b4)
{
  float4 cb4[6];
}


cbuffer PER_BATCH : register(b0)
{
  float4 VS_SunColor : packoffset(c0);
  float4 cViewerColorToWaterPlane : packoffset(c1);
  float4 OceanParams1 : packoffset(c2);
  float4 OceanParams0 : packoffset(c3);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float4x4 mReflProj : packoffset(c0);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
}

cbuffer PER_MATERIAL : register(b4)
{
  float4 MatSpecColor : packoffset(c1);
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float3 __0__1DetailTilling__2RipplesNormalsScale__3 : packoffset(c4);
  float2 __0WaterVolumeFlowSpeed__1Tilling__2__3 : packoffset(c5);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : TEXCOORD7)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = g_VS_WorldViewPos.xyz + -v0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = r0.w < cViewerColorToWaterPlane.y;
  r1.x = 0.200000003 < abs(r0.z);
  r1.x = r1.x ? 1.000000 : 0;
  r2.xyz = v0.xyz;
  r2.w = 1;
  r1.y = dot(g_VS_ViewProjMatr._m20_m21_m22_m23, r2.xyzw);
  r1.x = r1.y * r1.x;
  o0.z = r0.w ? r1.x : r1.y;
  r1.x = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, r2.xyzw);
  r1.y = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, r2.xyzw);
  r1.w = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, r2.xyzw);
  o0.xyw = r1.xyw;

// Fix halo:
float4 stereo = StereoParams.Load(0);
r1.x += stereo.x * (r1.w - stereo.y);

  r1.xy = r1.xy * float2(1,-1) + r1.ww;
  o2.xy = float2(0.5,0.5) * r1.xy;
  r1.x = 1;
  r1.z = cb4[5].y;
  r3.xyzw = v1.xyxy * r1.xxzz;
  r0.w = cb4[5].x * g_VS_AnimGenParams.z;
  r4.xyzw = float4(0.25,0,1,0) * r0.wwww;
  r1.x = cb4[5].y;
  r1.z = 2;
  r3.xyzw = r3.xyzw * r1.xxzz + r4.xyzw;
  o1.zw = cb4[4].yy * r3.wz;
  o1.xy = r3.xy;
  r0.w = saturate(r1.w);
  o2.w = r1.w;
  r0.w = sqrt(r0.w);
  o2.z = -r0.w * 0.150000006 + 1;
  o3.x = dot(mReflProj._m00_m01_m02_m03, r2.xyzw);
  o3.y = dot(mReflProj._m10_m11_m12_m13, r2.xyzw);
  o3.z = dot(mReflProj._m20_m21_m22_m23, r2.xyzw);
  o3.w = dot(mReflProj._m30_m31_m32_m33, r2.xyzw);

// Fix reflections:
o3.x += stereo.x * (o3.w - stereo.y) / 2;

  r0.w = 0 < r0.z;
  r1.x = r0.z < 0;
  o4.xyz = r0.xyz;
  r0.x = ((int)r1.x ? -1 : 0) + ((int)r0.w ? 1 : 0);
  o4.w = (int)r0.x;
  o5.xy = cb4[1].ww * float2(1020,127.5);
  o5.zw = cb4[1].ww * float2(162.338104,20.292263) + float2(0.318309993,0.318309993);
  o6.xyz = cb4[1].xyz * VS_SunColor.xyz;
  o6.w = 1;
  o7.xyzw = v0.xyzz;
  r0.xy = g_VS_WorldViewPos.xy * float2(0.200000003,0.200000003);
  r0.xy = frac(r0.xy);
  r0.xy = -r0.xy * float2(5,5) + g_VS_WorldViewPos.xy;
  r0.xy = -v0.xy + r0.xy;
  o8.xy = r0.xy * float2(0.0250000004,0.0250000004) + float2(0.5,0.5);
  o8.zw = float2(1,1);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.1.33 on Sat Jul 18 04:35:08 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 VS_SunColor;                // Offset:    0 Size:    16
//   float4 cViewerColorToWaterPlane;   // Offset:   16 Size:    16
//   float4 OceanParams1;               // Offset:   32 Size:    16 [unused]
//   float4 OceanParams0;               // Offset:   48 Size:    16 [unused]
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float4x4 mReflProj;      // Offset:    0 Size:    64
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatSpecColor;               // Offset:   16 Size:    16
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float3 __0__1DetailTilling__2RipplesNormalsScale__3;// Offset:   64 Size:    12
//   float2 __0WaterVolumeFlowSpeed__1Tilling__2__3;// Offset:   80 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[2], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb3[9], immediateIndexed
dcl_constantbuffer cb4[6], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_temps 5
add r0.xyz, -v0.xyzx, cb3[6].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
lt r0.w, r0.w, cb0[1].y
lt r1.x, l(0.200000), |r0.z|
and r1.x, r1.x, l(0x3f800000)
mov r2.xyz, v0.xyzx
mov r2.w, l(1.000000)
dp4 r1.y, cb3[2].xyzw, r2.xyzw
mul r1.x, r1.x, r1.y
movc o0.z, r0.w, r1.x, r1.y
dp4 r1.x, cb3[0].xyzw, r2.xyzw
dp4 r1.y, cb3[1].xyzw, r2.xyzw
dp4 r1.w, cb3[3].xyzw, r2.xyzw
mov o0.xyw, r1.xyxw
mad r1.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r1.wwww
mul o2.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov r1.x, l(1.000000)
mov r1.z, cb4[5].y
mul r3.xyzw, r1.xxzz, v1.xyxy
mul r0.w, cb3[8].z, cb4[5].x
mul r4.xyzw, r0.wwww, l(0.250000, 0.000000, 1.000000, 0.000000)
mov r1.x, cb4[5].y
mov r1.z, l(2.000000)
mad r3.xyzw, r3.xyzw, r1.xxzz, r4.xyzw
mul o1.zw, r3.wwwz, cb4[4].yyyy
mov o1.xy, r3.xyxx
mov_sat r0.w, r1.w
mov o2.w, r1.w
sqrt r0.w, r0.w
mad o2.z, -r0.w, l(0.150000), l(1.000000)
dp4 o3.x, cb1[0].xyzw, r2.xyzw
dp4 o3.y, cb1[1].xyzw, r2.xyzw
dp4 o3.z, cb1[2].xyzw, r2.xyzw
dp4 o3.w, cb1[3].xyzw, r2.xyzw
lt r0.w, l(0.000000), r0.z
lt r1.x, r0.z, l(0.000000)
mov o4.xyz, r0.xyzx
iadd r0.x, r1.x, -r0.w
itof o4.w, r0.x
mul o5.xy, l(1020.000000, 127.500000, 0.000000, 0.000000), cb4[1].wwww
mad o5.zw, cb4[1].wwww, l(0.000000, 0.000000, 162.338104, 20.292263), l(0.000000, 0.000000, 0.318310, 0.318310)
mul o6.xyz, cb0[0].xyzx, cb4[1].xyzx
mov o6.w, l(1.000000)
mov o7.xyzw, v0.xyzz
mul r0.xy, l(0.200000, 0.200000, 0.000000, 0.000000), cb3[6].xyxx
frc r0.xy, r0.xyxx
mad r0.xy, -r0.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000), cb3[6].xyxx
add r0.xy, r0.xyxx, -v0.xyxx
mad o8.xy, r0.xyxx, l(0.025000, 0.025000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
mov o8.zw, l(0,0,1.000000,1.000000)
ret 
// Approximately 51 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
