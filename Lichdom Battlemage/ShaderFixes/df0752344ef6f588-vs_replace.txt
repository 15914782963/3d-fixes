// Fireball while targeting AOE targetting

cbuffer PER_BATCH : register(b0)
{
  float4 _WaveFreq : packoffset(c0);
  float4 _WaveAmp : packoffset(c1);
  float4 _WaveLevels : packoffset(c2);
  float4 _WaveVtxPhases : packoffset(c3);
  float4 _WaveInfoX : packoffset(c4);
  row_major float4x4 _ModelView : packoffset(c5);
  float4 _InstancingParams : packoffset(c9);
  float4 vfRampParams : packoffset(c10);
  float4 vfParams : packoffset(c11);
  row_major float4x4 _ModelView_IT : packoffset(c12);
  float4 vfViewPos : packoffset(c16);
}

cbuffer PER_INSTANCE : register(b1)
{
  float4 Ambient : packoffset(c0);
  row_major float4x4 _TCGMatrixEnv : packoffset(c1);
  row_major float4x4 _TCMMatrixEnv : packoffset(c5);
  row_major float4x4 _TCMMatrixDif : packoffset(c9);
  row_major float4x4 _TCGMatrixBump : packoffset(c13);
  float4 AvgFogVolumeContrib : packoffset(c17);
  row_major float4x4 _TCMMatrixGloss : packoffset(c18);
  row_major float4x4 _TCGMatrixDif : packoffset(c22);
  row_major float4x4 _TCGMatrixCustom : packoffset(c26);
  row_major float4x4 _TCMMatrixCustom : packoffset(c30);
  row_major float4x4 _TCGMatrixGloss : packoffset(c34);
  row_major float4x4 _TCMMatrixBump : packoffset(c38);
}

cbuffer STATIC_INSTANCE : register(b2)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
  float4 AmbientOp : packoffset(c5);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = float3(0.000000e+000,1.000000e-006,0.000000e+000) + v3.zxy;
  r1.xyz = float3(0.000000e+000,0.000000e+000,-1.000000e-006) + v4.yzx;
  r0.xyz = r1.xyz * r0.xyz;
  r1.xyz = float3(0.000000e+000,0.000000e+000,1.000000e-006) + v3.yzx;
  r2.xyz = float3(0.000000e+000,-1.000000e-006,0.000000e+000) + v4.zxy;
  r0.xyz = r1.xyz * r2.xyz + -r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = v3.www * r0.xyz;
  r0.w = v0.x + v0.y;
  r0.w = v0.z + r0.w;
  r0.w = r0.w * _WaveInfoX.w + _WaveInfoX.x;
  r0.w = 3.141592503e+000 * r0.w;
  r0.w = sin(r0.w);
  r0.w = r0.w * _WaveInfoX.y + _WaveInfoX.z;
  r0.xyz = r0.xyz * r0.www + v0.xyz;
  r1.w = -g_VS_WorldViewPos.x + ObjWorldMatrix._m03;
  r1.xyz = ObjWorldMatrix._m00_m01_m02;
  r0.w = 1.000000000e+000;
  r1.x = dot(r1.xyzw, r0.xyzw);
  r2.w = -g_VS_WorldViewPos.y + ObjWorldMatrix._m13;
  r2.xyz = ObjWorldMatrix._m10_m11_m12;
  r1.y = dot(r2.xyzw, r0.xyzw);
  r2.w = -g_VS_WorldViewPos.z + ObjWorldMatrix._m23;
  r2.xyz = ObjWorldMatrix._m20_m21_m22;
  r1.z = dot(r2.xyzw, r0.xyzw);
  r1.w = 1.000000000e+000;
  r0.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r1.xyzw);
  r0.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r1.xyzw);
  r0.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r1.xyzw);
  r0.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r1.xyzw);
  o0.xyzw = r0.xyzw;

float4 stereo = StereoParams.Load(0);
r0.x += stereo.x * (r0.w - stereo.y);

  r0.xy = r0.xy * float2(1.000000e+000,-1.000000e+000) + r0.ww;
  o5.zw = r0.zw;
  o5.xy = float2(5.000000e-001,5.000000e-001) * r0.xy;
  r0.xy = _TCMMatrixDif._m10_m11 * v1.yy;
  r0.xy = v1.xx * _TCMMatrixDif._m00_m01 + r0.xy;
  r0.xy = v1.zz * _TCMMatrixDif._m20_m21 + r0.xy;
  o1.xy = v1.ww * _TCMMatrixDif._m30_m31 + r0.xy;
  o1.zw = v1.xy;
  r0.xyz = float3(1.000000e-006,0.000000e+000,0.000000e+000) + v3.xyz;
  r2.x = dot(ObjWorldMatrix._m00_m01_m02, r0.xyz);
  r2.y = dot(ObjWorldMatrix._m10_m11_m12, r0.xyz);
  r2.z = dot(ObjWorldMatrix._m20_m21_m22, r0.xyz);
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  o2.xyz = r2.xyz * r0.xxx;
  o2.w = v3.w;
  r0.xyz = float3(-1.000000e-006,0.000000e+000,0.000000e+000) + v4.xyz;
  r2.x = dot(ObjWorldMatrix._m00_m01_m02, r0.xyz);
  r2.y = dot(ObjWorldMatrix._m10_m11_m12, r0.xyz);
  r2.z = dot(ObjWorldMatrix._m20_m21_m22, r0.xyz);
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  o3.xyz = r2.xyz * r0.xxx;
  o3.w = 0.000000000e+000;
  r0.x = vfParams.x * r1.z;
  r0.y = 1.442695022e+000 * r0.x;
  r0.y = exp2(r0.y);
  r0.y = -1.000000000e+000 + r0.y;
  r0.y = r0.y / r0.x;
  r0.x = 9.999999776e-003 < abs(r0.x);
  r0.x = r0.x ? r0.y : 1.000000000e+000;
  r0.y = dot(r1.xyz, r1.xyz);
  o4.xyz = r1.xyz;
  r0.y = sqrt(r0.y);
  r0.z = vfParams.y * r0.y;
  r0.y = saturate(r0.y * vfRampParams.x + vfRampParams.y);
  r0.x = r0.x * r0.z;
  r0.x = exp2(-r0.x);
  r0.x = min(1.000000000e+000, r0.x);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.z = 2.000000000e+000 + -r0.y;
  r0.y = r0.y * r0.z;
  r0.y = r0.y * vfRampParams.z + vfRampParams.w;
  r0.x = -r0.x * r0.y + 1.000000000e+000;
  o4.w = max(vfParams.w, r0.x);
  o6.xyzw = AvgFogVolumeContrib.xyzw;
  o7.xyzw = AmbientOp.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.1.26 on Sat Jul 04 21:28:25 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 _WaveFreq;                  // Offset:    0 Size:    16 [unused]
//   float4 _WaveAmp;                   // Offset:   16 Size:    16 [unused]
//   float4 _WaveLevels;                // Offset:   32 Size:    16 [unused]
//   float4 _WaveVtxPhases;             // Offset:   48 Size:    16 [unused]
//   float4 _WaveInfoX;                 // Offset:   64 Size:    16
//   row_major float4x4 _ModelView;     // Offset:   80 Size:    64 [unused]
//   float4 _InstancingParams;          // Offset:  144 Size:    16 [unused]
//   float4 vfRampParams;               // Offset:  160 Size:    16
//   float4 vfParams;                   // Offset:  176 Size:    16
//   row_major float4x4 _ModelView_IT;  // Offset:  192 Size:    64 [unused]
//   float4 vfViewPos;                  // Offset:  256 Size:    16 [unused]
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 Ambient;                    // Offset:    0 Size:    16 [unused]
//   row_major float4x4 _TCGMatrixEnv;  // Offset:   16 Size:    64 [unused]
//   row_major float4x4 _TCMMatrixEnv;  // Offset:   80 Size:    64 [unused]
//   row_major float4x4 _TCMMatrixDif;  // Offset:  144 Size:    64
//   row_major float4x4 _TCGMatrixBump; // Offset:  208 Size:    64 [unused]
//   float4 AvgFogVolumeContrib;        // Offset:  272 Size:    16
//   row_major float4x4 _TCMMatrixGloss;// Offset:  288 Size:    64 [unused]
//   row_major float4x4 _TCGMatrixDif;  // Offset:  352 Size:    64 [unused]
//   row_major float4x4 _TCGMatrixCustom;// Offset:  416 Size:    64 [unused]
//   row_major float4x4 _TCMMatrixCustom;// Offset:  480 Size:    64 [unused]
//   row_major float4x4 _TCGMatrixGloss;// Offset:  544 Size:    64 [unused]
//   row_major float4x4 _TCMMatrixBump; // Offset:  608 Size:    64 [unused]
//
// }
//
// cbuffer STATIC_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//   float4 AmbientOp;                  // Offset:   80 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// STATIC_INSTANCE                   cbuffer      NA          NA    2        1
// PER_FRAME                         cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[12], immediateIndexed
dcl_constantbuffer cb1[18], immediateIndexed
dcl_constantbuffer cb2[6], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_temps 3
add r0.xyz, v3.zxyz, l(0.000000, 0.000001, 0.000000, 0.000000)
add r1.xyz, v4.yzxy, l(0.000000, 0.000000, -0.000001, 0.000000)
mul r0.xyz, r0.xyzx, r1.xyzx
add r1.xyz, v3.yzxy, l(0.000000, 0.000000, 0.000001, 0.000000)
add r2.xyz, v4.zxyz, l(0.000000, -0.000001, 0.000000, 0.000000)
mad r0.xyz, r1.xyzx, r2.xyzx, -r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.xyz, r0.xyzx, v3.wwww
add r0.w, v0.y, v0.x
add r0.w, r0.w, v0.z
mad r0.w, r0.w, cb0[4].w, cb0[4].x
mul r0.w, r0.w, l(3.141593)
sincos r0.w, null, r0.w
mad r0.w, r0.w, cb0[4].y, cb0[4].z
mad r0.xyz, r0.xyzx, r0.wwww, v0.xyzx
add r1.w, cb2[0].w, -cb3[6].x
mov r1.xyz, cb2[0].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r1.xyzw, r0.xyzw
add r2.w, cb2[1].w, -cb3[6].y
mov r2.xyz, cb2[1].xyzx
dp4 r1.y, r2.xyzw, r0.xyzw
add r2.w, cb2[2].w, -cb3[6].z
mov r2.xyz, cb2[2].xyzx
dp4 r1.z, r2.xyzw, r0.xyzw
mov r1.w, l(1.000000)
dp4 r0.x, cb3[10].xyzw, r1.xyzw
dp4 r0.y, cb3[11].xyzw, r1.xyzw
dp4 r0.z, cb3[12].xyzw, r1.xyzw
dp4 r0.w, cb3[13].xyzw, r1.xyzw
mov o0.xyzw, r0.xyzw
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r0.wwww
mov o5.zw, r0.zzzw
mul o5.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r0.xy, v1.yyyy, cb1[10].xyxx
mad r0.xy, v1.xxxx, cb1[9].xyxx, r0.xyxx
mad r0.xy, v1.zzzz, cb1[11].xyxx, r0.xyxx
mad o1.xy, v1.wwww, cb1[12].xyxx, r0.xyxx
mov o1.zw, v1.xxxy
add r0.xyz, v3.xyzx, l(0.000001, 0.000000, 0.000000, 0.000000)
dp3 r2.x, cb2[0].xyzx, r0.xyzx
dp3 r2.y, cb2[1].xyzx, r0.xyzx
dp3 r2.z, cb2[2].xyzx, r0.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul o2.xyz, r0.xxxx, r2.xyzx
mov o2.w, v3.w
add r0.xyz, v4.xyzx, l(-0.000001, 0.000000, 0.000000, 0.000000)
dp3 r2.x, cb2[0].xyzx, r0.xyzx
dp3 r2.y, cb2[1].xyzx, r0.xyzx
dp3 r2.z, cb2[2].xyzx, r0.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul o3.xyz, r0.xxxx, r2.xyzx
mov o3.w, l(0)
mul r0.x, r1.z, cb0[11].x
mul r0.y, r0.x, l(1.442695)
exp r0.y, r0.y
add r0.y, r0.y, l(-1.000000)
div r0.y, r0.y, r0.x
lt r0.x, l(0.010000), |r0.x|
movc r0.x, r0.x, r0.y, l(1.000000)
dp3 r0.y, r1.xyzx, r1.xyzx
mov o4.xyz, r1.xyzx
sqrt r0.y, r0.y
mul r0.z, r0.y, cb0[11].y
mad_sat r0.y, r0.y, cb0[10].x, cb0[10].y
mul r0.x, r0.z, r0.x
exp r0.x, -r0.x
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
add r0.z, -r0.y, l(2.000000)
mul r0.y, r0.z, r0.y
mad r0.y, r0.y, cb0[10].z, cb0[10].w
mad r0.x, -r0.x, r0.y, l(1.000000)
max o4.w, r0.x, cb0[11].w
mov o6.xyzw, cb1[17].xyzw
mov o7.xyzw, cb2[5].xyzw
ret 
// Approximately 81 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
