//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 CameraWorldPos;
//   float4 DNEEnvMapParameter;
//   samplerCUBE DNEEnvironmentTexture;
//   float4 DNEResolution;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4 UniformPixelScalars_1;
//   float4 UniformPixelScalars_2;
//   float4 UniformPixelScalars_3;
//   float4 UniformPixelScalars_4;
//   float4 UniformPixelScalars_5;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float4 UniformPixelVector_2;
//   float4 UniformPixelVector_3;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   DNEEnvMapParameter      c0       1
//   ScreenPositionScaleBias c1       1
//   MinZ_MaxZRatio          c2       1
//   NvStereoEnabled         c3       1
//   CameraWorldPos          c7       1
//   DNEResolution           c8       1
//   UniformPixelVector_0    c9       1
//   UniformPixelVector_1    c10      1
//   UniformPixelVector_2    c11      1
//   UniformPixelVector_3    c12      1
//   UniformPixelScalars_1   c13      1
//   UniformPixelScalars_2   c14      1
//   UniformPixelScalars_3   c15      1
//   UniformPixelScalars_4   c16      1
//   UniformPixelScalars_5   c17      1
//   SceneColorTexture       s0       1
//   NvStereoFixTexture      s1       1
//   DNEEnvironmentTexture   s2       1
//   PixelTexture2D_0        s3       1
//   PixelTexture2D_1        s4       1
//

    ps_3_0
    def c4, 1, 0, 1.41789806, -0.99000001
    def c5, 2, -9.99999997e-007, 0.0625, 0
    def c6, 9.99999975e-006, 100000, 0, 0
    dcl_texcoord4 v0
    dcl_texcoord6 v1.xyz
    dcl_texcoord5 v2.xyw
    dcl_color v3.xyz
    dcl_color1 v4
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_cube s2
    dcl_2d s3
    dcl_2d s4

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_FDB19D17_641.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    nrm_pp r0.xyz, v4
    nrm_pp r1.xyz, v3
    mul_pp r2.xyz, r0.zxyw, r1.yzxw
    mad_pp r2.xyz, r0.yzxw, r1.zxyw, -r2
    mul_pp r2.xyz, r2, v4.w
    add r3.xy, c7, v2
    mad r3.zw, vPos.xyxy, c8.xyxy, c8
    mul r4.xy, r3.zwzw, v2.w
    nrm_pp r5.xyz, v1
    rcp r0.w, c13.x
    mul r3.zw, r0.w, r3.xyxy
    mad r3.xy, r3, r0.w, c10
    texld_pp r6, r3, s3
    dp2add_pp r0.w, r6, -r6, c4.x
    max_pp r1.w, r0.w, c4.y
    rsq_pp r0.w, r1.w
    rcp_pp r6.z, r0.w
    mov r7.z, c4.z
    mad r3.xy, r3.zwzw, r7.z, c11
    texld_pp r7, r3, s3
    dp2add_pp r0.w, r7, -r7, c4.x
    max_pp r1.w, r0.w, c4.y
    rsq_pp r0.w, r1.w
    rcp_pp r7.z, r0.w
    add r6.xyz, r6, r7
    nrm r7.xyz, r6
    mul r6.xyz, r7, c14.x
    frc r7.xyz, r6
    add r6.xyz, r6, -r7
    rcp r0.w, c14.x
    mov r1.w, c14.w
    mad r3.xy, r1.w, r3.zwzw, c12
    texld r3, r3, s4
    lrp_sat r1.w, r3.x, c15.z, c15.w
    mad r3.yzw, r6.xxyz, r0.w, c4.xyyw
    mad r3.yzw, r1.w, r3, c4.xyyx
    nrm r6.xyz, r3.yzww
    dp3_pp r7.x, r1, r6
    dp3_pp r7.y, r2, r6
    dp3_pp r7.z, r0, r6
    nrm_pp r8.xyz, r7
    dp3_pp r0.w, r8, r5
    mul_pp r3.yzw, r0.w, r8.xxyz
    mad_pp r3.yzw, r3, c5.x, -r5.xxyz
    dp3_pp r1.x, r1, r3.yzww
    dp3_pp r1.y, r2, r3.yzww
    dp3_pp r1.z, r0, r3.yzww
    mov_pp r1.w, c4.y
    texldl_pp r0, r1, s2
    mul_pp r0.xyz, r0, c0
    dp3 r0.w, r6, r5
    add r1.x, -r0.w, c4.x
    cmp r0.w, r0.w, r1.x, c4.x
    add r1.x, -c16.w, c16.z
    lrp r1.y, r0.w, c16.x, c16.y
    mad_pp r0.xyz, r1.y, r0, c9
    add r1.y, r0_abs.w, c5.y
    mul r1.z, r0_abs.w, r0_abs.w
    mul r0.w, r0_abs.w, r1.z
    mul r0.w, r1.x, r0.w
    cmp r0.w, r1.y, r0.w, c4.y
    add r0.w, r0.w, c16.w
    abs r1.x, c3.x
    if_ne c3.x, -c3.x
      texld r2, c5.zwzw, s1
      add r1.y, -r2.y, v2.w
      mad r4.z, r2.x, r1.y, r4.x
      mov r4.w, v2.w
      mov r1.yzw, r4.xzyw
    else
      mov_pp r1.yzw, c4.y
    endif
    mov r4.z, v2.w
    cmp r1.xyz, -r1.x, r4, r1.yzww
    rcp r1.z, r1.z
    mul r1.xy, r1.z, r1
    mad r1.xy, r1, c1, c1.wzzw
    mov_pp r1.zw, c4.y
    texldl r1, r1, s0
    add r1.x, r1.w, -c2.y
    add r1.y, -r1.x, c6.x
    rcp r1.x, r1.x
    cmp r1.x, r1.y, c6.y, r1.x
    mad r1.x, c2.x, r1.x, -v2.w
    lrp r1.y, r3.x, c17.x, c17.y
    rcp r1.y, r1.y
    mul_sat r1.x, r1.y, r1.x
    mul_sat_pp oC0.w, r0.w, r1.x
    mad_pp oC0.xyz, r0, v0.w, v0

// approximately 107 instruction slots used (8 texture, 99 arithmetic)
