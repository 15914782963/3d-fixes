//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float2 SpotAngles;
//   float3 SpotDirection;
//   float4 UniformPixelVector_0;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   DNESpecularAttenuation       c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNEMiscParameter             c7       1
//   DNEResolution                c8       1
//   UniformPixelVector_0         c9       1
//   LightColorAndFalloffExponent c10      1
//   SpotDirection                c11      1
//   SpotAngles                   c12      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//   PixelTexture2D_1             s4       1
//   PixelTexture2D_2             s5       1
//

    ps_3_0
    def c2, 1, 1.5, 0, 0.5
    def c6, 0.949999988, 0.125, 0.015625, 0.150000006
    def c13, -0.333299994, 0.0625, 0, 0.0399999991
    def c14, 16.3222275, 11.3137026, 2, 0
    def c15, -5.55472994, -6.98316002, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord4_pp v1.xyz
    dcl_texcoord5 v2.xyz
    dcl_texcoord6 v3.xyz
    dcl_texcoord7 v4.w
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-lights --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_744A8DA9_359.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    mad r0.xy, vPos, c8, c8.zwzw
    mul r0.xy, r0, v4.w
    dp3_pp r0.w, v3, v3
    rsq_pp r0.w, r0.w
    mul_pp r1.xyz, r0.w, v3
    mad_sat_pp r1.w, c7.x, v4.w, c7.y
    mul_pp r1.w, r1.w, c0.x
    dp3_pp r2.x, v1, v1
    rsq_pp r2.x, r2.x
    mul_pp r2.yzw, r2.x, v1.xxyz
    mad_pp r3.xyz, v1, r2.x, r1
    nrm_pp r4.xyz, r3
    mad r0.w, v3.z, -r0.w, c2.x
    add r0.w, -r0.w, c2.x
    mul_pp r0.w, r0.w, c2.y
    cmp_pp r0.w, r1.z, r0.w, c2.z
    max_pp r1.x, r0.w, c2.w
    min_pp r0.w, r1.x, c6.x
    rcp r1.x, v4.w
    mul r3, r0.xyxy, r1.x
    mad_pp r3, r3, c1.xyxy, c1.wzwz
    dsx_pp r1.x, r3.z
    dsy_pp r1.y, r3.w
    rcp r5.xz, r1.x
    rcp r5.yw, r1.y
    mul_pp r3, r3, r5
    mul_pp r3, r3, c6.yyzz
    texld_pp r5, r3, s4
    texld_pp r3, r3.zwzw, s5
    lrp_pp r1.x, c6.w, r3.y, r5.y
    add_pp r0.w, r0.w, -r1.x
    frc_pp r1.x, -r0.w
    add_sat_pp r0.w, r0.w, r1.x
    add_pp r3, r0.w, c13.x
    texkill r3
    dp3 r0.w, v2, v2
    rsq r1.x, r0.w
    mul r1.xyz, r1.x, v2
    dp3 r1.x, r1, -c11
    add r1.x, r1.x, -c12.x
    mul_sat r1.x, r1.x, c12.y
    mul_pp r3.x, r1.x, r1.x
    texld_pp r5, c2.xwzw, s0
    mov r3.yw, c2.w
    texld_pp r6, r3, s0
    add r1.x, -r0.w, c2.x
    mul r1.x, r5.x, r1.x
    mul r7, r6.x, r1.x
    mov r8, r7
    texkill r8
    if b0
      if_ne c3.x, -c3.x
        texld r8, c13.yzzw, s1
        add r1.x, -r8.y, v4.w
        mad r0.z, r8.x, r1.x, r0.x
        mov r0.xy, r0.zyzw
        mov r0.z, v4.w
      else
        mov r0.z, v4.w
      endif
      rcp r0.z, r0.z
      mul r0.xy, r0.z, r0
      mad r0.xy, r0, c1, c1.wzzw
      texld r8, r0, s2
      mul_pp r0.xyz, r8, r8
      mul_pp r0.xyz, r0, r5.x
    else
      mov_pp r0.xyz, r5.x
    endif
    mov r4.w, c13.w
    mad_pp r1.xyz, c5.w, r4.w, c5
    mov_sat r0.w, r0.w
    add r0.w, -r0.w, c2.x
    pow_sat_pp r3.z, r0.w, c10.w
    texld_pp r3, r3.zwzw, s0
    texld_pp r5, v0, s3
    mov r2.x, c2.x
    add_pp r3.yzw, r2.x, -c9.xxyz
    mul_pp r3.yzw, r3, r5.xxyz
    mad_pp r3.yzw, r3, c4.w, c4.xxyz
    mul_pp r0.w, r6.x, r3.x
    mov_sat_pp r2.x, r2.w
    mul_pp r4.w, r2.x, c0.w
    mul_sat_pp r0.w, r0.w, c0.y
    mul_pp r0.w, r0.w, r0.w
    mov_sat_pp r5.x, r4.z
    mul_pp r5.y, r0.w, c14.x
    mad_pp r0.w, r0.w, c14.y, c14.z
    mul_pp r0.w, r0.w, c6.y
    mad r5.x, r5.y, r5.x, -r5.y
    exp_pp r5.x, r5.x
    mul_pp r0.w, r0.w, r5.x
    mul_pp r0.w, r2.x, r0.w
    mul_pp r0.w, r1.w, r0.w
    dp3_sat_pp r1.w, r2.yzww, r4
    mad_pp r2.x, r1.w, c15.x, c15.y
    mul_pp r1.w, r1.w, r2.x
    exp_pp r1.w, r1.w
    lrp_pp r2.xyz, r1.w, c2.x, r1
    mul_pp r1.xyz, r0.w, r2
    mad_pp r1.xyz, r3.yzww, r4.w, r1
    mul_pp r0.xyz, r0, r1
    mul r0.xyz, r0, c10
    mul r0.xyz, r3.x, r0
    mul r0.xyz, r6.x, r0
    cmp oC0.xyz, -r7.w, c2.z, r0
    mov oC0.w, c2.z

// approximately 117 instruction slots used (8 texture, 109 arithmetic)
