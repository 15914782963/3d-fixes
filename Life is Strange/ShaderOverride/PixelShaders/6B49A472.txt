//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowTexture;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float2 SpotAngles;
//   float3 SpotDirection;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float4 UniformPixelVector_2;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   DNESpecularAttenuation       c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNEResolution                c7       1
//   UniformPixelVector_0         c8       1
//   UniformPixelVector_1         c9       1
//   UniformPixelVector_2         c10      1
//   UniformPixelScalars_0        c11      1
//   LightColorAndFalloffExponent c12      1
//   SpotDirection                c13      1
//   SpotAngles                   c14      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//   PixelTexture2D_1             s4       1
//   ShadowTexture                s5       1
//

    ps_3_0
    def c2, 0, 2, 0.5, 1
    def c6, 0.0625, 0, 2, -1
    def c15, -9.99999997e-007, 15, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_texcoord4_pp v2.xyz
    dcl_texcoord5 v3.xyz
    dcl_texcoord6 v4.xyz
    dcl_texcoord7 v5.w
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --git --disable-redundant-unreal-correction --auto-fix-unreal-dne-reflection --only-autofixed --ignore-parse-errors CRC32_6B49A472_166.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    nrm_pp r0.xyz, v4
    nrm_pp r1.xyz, v2
    mad_pp r2.xyz, r0.z, c2.xxyw, -r0
    texld_pp r3, v0, s5
    dp3 r0.w, v3, v3
    rsq r1.w, r0.w
    mul r4.xyz, r1.w, v3
    dp3 r1.w, r4, -c13
    add r1.w, r1.w, -c14.x
    mul_sat r1.w, r1.w, c14.y
    mul_pp r3.z, r1.w, r1.w
    mov_sat_pp r3.x, r3.x
    mov r3.yw, c2.z
    texld_pp r4, r3, s0
    texld_pp r3, r3.zwzw, s0
    add r1.w, -r0.w, c2.w
    mul r1.w, r4.x, r1.w
    mul r5, r3.x, r1.w
    mov r6, r5
    texkill r6
    if b0
      mad r3.yz, vPos.xxyw, c7.xxyw, c7.xzww
      mul r5.xy, r3.yzzw, v5.w
      if_ne c3.x, -c3.x
        texld r6, c6, s1
        add r1.w, -r6.y, v5.w
        mad r5.z, r6.x, r1.w, r5.x
        mov r5.xy, r5.zyzw
        mov r1.w, v5.w
      else
        mov r1.w, v5.w
      endif
      rcp r1.w, r1.w
      mul r3.yz, r1.w, r5.xxyw
      mad r3.yz, r3, c1.xxyw, c1.xwzw
      texld r6, r3.yzzw, s2
      mul_pp r3.yzw, r6.xxyz, r6.xxyz
      mul_pp r3.yzw, r3, r4.x
    else
      mov_pp r3.yzw, r4.x
    endif
    mov_sat r0.w, r0.w
    add r0.w, -r0.w, c2.w
    pow_sat_pp r4.x, r0.w, c12.w
    mov r4.y, c2.z
    texld_pp r4, r4, s0
    texld r6, v1, s3
    texld_pp r7, v1, s4
    mad_pp r4.yzw, r7.xxyz, c6.z, c6.w
    dp3_pp r0.x, r0, r4.yzww
    add r0.x, -r0_abs.x, c2.w
    add r0.y, r0_abs.x, c15.x
    pow r1.w, r0_abs.x, c11.x
    mul r0.xzw, r1.w, c10.xyyz
    cmp r0.xyz, r0.y, r0.xzww, c2.x
    mad r0.xyz, c9, r6, r0
    mov r0.w, c2.w
    add r4.yzw, r0.w, -c8.xxyz
    mul_pp r0.xyz, r0, r4.yzww
    mad_pp r0.xyz, r0, c4.w, c4
    mov_sat_pp r0.w, r1.z
    add r1.w, r0.w, c15.x
    mul_pp r0.w, r0.w, c0.w
    cmp_pp r0.w, r1.w, r0.w, c2.x
    dp3_sat_pp r1.x, r2, r1
    add r1.y, r1.x, c15.x
    pow_pp r2.x, r1.x, c15.y
    mul r1.x, r2.x, c0.x
    mul_pp r1.xzw, r1.x, c5.xyyz
    cmp_pp r1.xyz, r1.y, r1.xzww, c2.x
    mad_pp r0.xyz, r0, r0.w, r1
    mul_pp r0.xyz, r3.yzww, r0
    mul r0.xyz, r0, c12
    mul r0.xyz, r4.x, r0
    mul r0.xyz, r3.x, r0
    cmp oC0.xyz, -r5.w, c2.x, r0
    mov oC0.w, c2.x

// approximately 91 instruction slots used (8 texture, 83 arithmetic)
