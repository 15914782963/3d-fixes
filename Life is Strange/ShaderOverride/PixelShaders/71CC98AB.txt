//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 AmbientColorAndSkyFactor;
//   float4 DNEResolution;
//   float4 DiffuseOverrideParameter;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   sampler2D PixelTexture2D_3;
//   sampler2D PixelTexture2D_4;
//   sampler2D PixelTexture2D_5;
//   float4 ScreenPositionScaleBias;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelScalars_1;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float4 UniformPixelVector_2;
//   float4 UniformPixelVector_3;
//   float4 UniformPixelVector_4;
//   float4 UniformPixelVector_5;
//   float3 UpperSkyColor;
//   sampler2D VAOBuffer;
//
//
// Registers:
//
//   Name                     Reg   Size
//   ------------------------ ----- ----
//   DNEResolution            c0       1
//   ScreenPositionScaleBias  c1       1
//   MinZ_MaxZRatio           c2       1
//   NvStereoEnabled          c3       1
//   DiffuseOverrideParameter c4       1
//   UniformPixelVector_0     c7       1
//   UniformPixelVector_1     c8       1
//   UniformPixelVector_2     c9       1
//   UniformPixelVector_3     c10      1
//   UniformPixelVector_4     c11      1
//   UniformPixelVector_5     c12      1
//   UniformPixelScalars_0    c13      1
//   UniformPixelScalars_1    c14      1
//   UpperSkyColor            c15      1
//   AmbientColorAndSkyFactor c16      1
//   NvStereoFixTexture       s0       1
//   PixelTexture2D_1         s1       1
//   PixelTexture2D_2         s2       1
//   PixelTexture2D_3         s3       1
//   PixelTexture2D_4         s4       1
//   PixelTexture2D_5         s5       1
//   VAOBuffer                s6       1
//

    ps_3_0
    def c5, 1, 20, -1, 0
    def c6, 0.5, -9.99999997e-007, 0.0625, 0
    dcl_texcoord6 v0.xyz
    dcl_texcoord5 v1.w
    dcl_texcoord v2.xy
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-lights --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_71CC98AB_669.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    mad r0.xy, vPos, c0, c0.zwzw
    mul r0.xy, r0, v1.w
    dp3_pp r1.x, v0, v0
    rsq_pp r1.x, r1.x
    mul_pp r1.y, r1.x, v0.z
    texld_pp r2, v2, s5
    mov_pp r3.x, c5.x
    add_pp r3.xyz, r3.x, -c7
    mul_pp r2.xyz, r2, r3
    mad_pp r2.xyz, r2, c4.w, c4
    mov r3.xy, c8
    mad_pp r1.zw, v2.xyyx, r3.xyxy, c9.xyxy
    rcp r3.x, c10.x
    rcp r3.y, c10.y
    mul_pp r2.w, c13.w, c13.z
    mul r2.w, r3.x, r2.w
    frc r3.z, r2_abs.w
    cmp r3.z, r2.w, r3.z, -r3.z
    mul_pp r3.z, r3.z, c10.x
    frc_pp r3.w, r3.z
    add_pp r4.x, -r3.w, r3.z
    mul r2.w, r3.y, r2.w
    frc r3.z, r2_abs.w
    cmp r2.w, r2.w, r3.z, -r3.z
    mul_pp r2.w, r2.w, c10.y
    frc_pp r3.z, r2.w
    add_pp r4.y, r2.w, -r3.z
    mul_pp r3.zw, r3.xyxy, r4.xyxy
    mad_pp r3.xy, r1.zwzw, r3, r3.zwzw
    texld_pp r3, r3, s1
    mad_pp r4.xy, v2.yxzw, c5.y, c5.z
    texld_pp r4, r4, s2
    mul_pp r2.w, r4.y, c14.x
    lrp_pp r4.xyz, r2.w, c5.wxww, r3
    add_pp r2.w, r1.w, c11.y
    texld_pp r3, r2.w, s3
    add_pp r2.w, r3.y, c6.x
    mul_pp r3.xyz, r4, r2.w
    texld_pp r4, r1.zwzw, s4
    mul_pp r3.xyz, r3, r4.y
    mad r1.x, v0.z, -r1.x, c5.x
    cmp_pp r1.x, r1.y, r1_abs.x, c5.x
    add r1.y, r1.x, c6.y
    mul r1.z, r1.x, r1.x
    mad_pp r1.x, r1.x, -r1.z, c5.x
    cmp_pp r1.x, r1.y, r1.x, c5.x
    mul_pp r1.xyz, r1.x, c12
    mul_sat_pp r1.xyz, r1, r3
    add_pp r1.xyz, r1, c7
    mul r3.xyz, r2, c15
    mad_pp r1.xyz, r3, c16.w, r1
    abs r1.w, c3.x
    if_ne c3.x, -c3.x
      texld r3, c6.zwzw, s0
      add r2.w, -r3.y, v1.w
      mad r0.z, r3.x, r2.w, r0.x
      mov r0.w, v1.w
      mov r3.xyz, r0.zyww
    else
      mov_pp r3.xyz, c5.w
    endif
    mov r0.z, v1.w
    cmp r0.xyz, -r1.w, r0, r3
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    texld_pp r0, r0, s6
    mul r0.yzw, r2.xxyz, c16.xxyz
    mad_pp oC0.xyz, r1, r0.x, r0.yzww
    rcp r0.x, v1.w
    mad oC0.w, c2.x, r0.x, c2.y

// approximately 73 instruction slots used (7 texture, 66 arithmetic)
