//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 AmbientColorAndSkyFactor;
//   float4 DNEResolution;
//   float4 DiffuseOverrideParameter;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   float4 ScreenPositionScaleBias;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   float3 UpperSkyColor;
//   sampler2D VAOBuffer;
//
//
// Registers:
//
//   Name                     Reg   Size
//   ------------------------ ----- ----
//   DNEResolution            c0       1
//   ScreenPositionScaleBias  c1       1
//   MinZ_MaxZRatio           c2       1
//   NvStereoEnabled          c3       1
//   DiffuseOverrideParameter c4       1
//   UniformPixelVector_0     c7       1
//   UniformPixelScalars_0    c8       1
//   UpperSkyColor            c9       1
//   AmbientColorAndSkyFactor c10      1
//   NvStereoFixTexture       s0       1
//   VAOBuffer                s1       1
//

    ps_3_0
    def c5, 1, -9.99999997e-007, 0, 0.0625
    dcl_texcoord2_pp v0.xyz
    dcl_texcoord6 v1.xyz
    dcl_texcoord5 v2.w
    dcl_texcoord v3.xy
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed CRC32_35DD0C0C_166.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    mad r0.xy, vPos, c0, c0.zwzw
    mul r0.xy, r0, v2.w
    dp3_pp r1.x, v1, v1
    rsq_pp r1.x, r1.x
    mul_pp r1.y, r1.x, v1.z
    mad r1.x, v1.z, -r1.x, c5.x
    cmp r1.x, r1.y, r1_abs.x, c5.x
    add r1.y, r1.x, c5.y
    mul r1.z, r1.x, r1.x
    mul r1.z, r1.z, r1.z
    mul r1.x, r1.z, r1.x
    cmp r1.x, r1.y, r1.x, c5.z
    mul r1.yzw, c5.xxxz, v3.xxyx
    mul r2.xyz, c5.zxxw, v3.xxyw
    mul r2.xyz, r2, c8.z
    mad r1.yzw, c8.w, r1, r2.xxyz
    add r1.xyz, r1.yzww, r1.x
    mov r2.x, c5.x
    add r2.xyz, r2.x, -c7
    mul_pp r1.xyz, r1, r2
    mad_pp r1.xyz, r1, c4.w, c4
    mov r2.y, c8.y
    add_pp r2.xyz, r2.y, c7
    mad_pp r2.xyz, v0, r1, r2
    mul r1.xyz, r1, c9
    mad_pp r1.xyz, r1, c10.w, r2
    abs r1.w, c3.x
    if_ne c3.x, -c3.x
      texld r2, c5.wzzw, s0
      add r2.y, -r2.y, v2.w
      mad r0.z, r2.x, r2.y, r0.x
      mov r0.w, v2.w
      mov r2.xyz, r0.zyww
    else
      mov r2.xyz, c5.z
    endif
    mov r0.z, v2.w
    cmp r0.xyz, -r1.w, r0, r2
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    texld_pp r0, r0, s1
    mul_pp oC0.xyz, r0.x, r1
    rcp r0.x, v2.w
    mad oC0.w, c2.x, r0.x, c2.y

// approximately 47 instruction slots used (2 texture, 45 arithmetic)
