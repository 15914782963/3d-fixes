//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4 UniformPixelVector_0;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   DNEResolution           c0       1
//   ScreenPositionScaleBias c1       1
//   MinZ_MaxZRatio          c2       1
//   NvStereoEnabled         c3       1
//   UniformPixelVector_0    c7       1
//   SceneColorTexture       s0       1
//   NvStereoFixTexture      s1       1
//

    ps_3_0
    def c4, 0.00999999978, -0.5, 0, 4.19999981
    def c5, 1, -12, 0.015625, 9.99999975e-006
    def c6, 0.0625, 0, 100000, 0.03125
    def c8, 0.0078125, 0, 0, 0
    dcl_texcoord4 v0
    dcl_texcoord6 v1.xyz
    dcl_texcoord7_pp v2
    dcl_texcoord5 v3.w
    dcl_texcoord v4.xy
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_D73F66C5_641.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    mad r0.xy, vPos, c0, c0.zwzw
    mul r0.yz, r0.xxyw, v3.w
    dp3_pp r1.x, v1, v1
    rsq_pp r1.x, r1.x
    mul_pp r1.x, r1.x, v1.z
    rcp r1.y, v3.w
    mul r1.yz, r0, r1.y
    mad r1.yz, r1, c1.xxyw, c1.xwzw
    texld r2, r1.yzzw, s0
    add r1.yzw, r2.xxyz, c4.x
    mad_pp r1.yzw, r1, v2.xxyz, c7.xxyz
    add r2.xy, c4.y, v4
    dp2add r2.x, r2, r2, c4.z
    mul_sat r2.x, r2.x, c4.w
    add r2.x, -r2.x, c5.x
    mul r2.x, r2.x, r2.x
    mul r2.x, r2.x, v2.w
    add r2.y, c5.y, v3.w
    mul_sat r2.y, r2.y, c5.z
    mul r1.x, r1_abs.x, r2.y
    mul r1.x, r1.x, r2.x
    abs r2.x, c3.x
    if_ne c3.x, -c3.x
      texld r3, c6, s1
      add r2.y, -r3.y, v3.w
      mad r0.x, r3.x, r2.y, r0.y
      mov r0.w, v3.w
      mov r2.yzw, r0.xxzw
    else
      mov r2.yzw, c4.z
    endif
    mov r0.w, v3.w
    cmp r2.yzw, -r2.x, r0, r2
    rcp r2.w, r2.w
    mul r2.yz, r2.w, r2
    mad r3.xy, r2.yzzw, c1, c1.wzzw
    mov r3.zw, c4.z
    texldl r3, r3, s0
    add r2.y, r3.w, -c2.y
    add r2.z, -r2.y, c5.w
    rcp r2.y, r2.y
    cmp r2.y, r2.z, c6.z, r2.y
    mad r2.y, c2.x, r2.y, -v3.w
    mul_sat r2.y, r2.y, c6.w
    if_ne c3.x, -c3.x
      texld r3, c6, s1
      add r2.z, -r3.y, v3.w
      mad r0.x, r3.x, r2.z, r0.y
      mov r3.xyz, r0.xzww
    else
      mov r3.xyz, c4.z
    endif
    cmp r0.xyz, -r2.x, r0.yzww, r3
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    mov r0.zw, c4.z
    texldl r0, r0, s0
    add r0.x, r0.w, -c2.y
    add r0.y, -r0.x, c5.w
    rcp r0.x, r0.x
    cmp r0.x, r0.y, c6.z, r0.x
    mad r0.x, c2.x, r0.x, -v3.w
    mul_sat r0.x, r0.x, c8.x
    add r0.x, -r0.x, c5.x
    mul r0.x, r0.x, r2.y
    mul_pp oC0.w, r0.x, r1.x
    mad_pp oC0.xyz, r1.yzww, v0.w, v0

// approximately 75 instruction slots used (7 texture, 68 arithmetic)
