//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 UniformPixelScalars_0;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   DNEResolution                c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   UniformPixelScalars_0        c7       1
//   LightColorAndFalloffExponent c8       1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//   PixelTexture2D_1             s4       1
//   PixelTexture2D_2             s5       1
//

    ps_3_0
    def c2, 1, 0.5, 0.0625, 0
    def c5, -100, 2, -1, 0
    dcl_texcoord v0.xy
    dcl_texcoord4_pp v1.xyz
    dcl_texcoord5 v2.xyz
    dcl_texcoord6 v3.xyz
    dcl_texcoord7 v4.w
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed --ignore-parse-errors CRC32_BD1598C1_0.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    dp3_pp r0.x, v3, v3
    rsq_pp r0.x, r0.x
    nrm_pp r1.xyz, v1
    texld_pp r2, c2, s0
    dp3 r0.y, v2, v2
    add r0.z, -r0.y, c2.x
    mul r3, r2.x, r0.z
    mov r4, r3
    texkill r4
    if b0
      mad r0.zw, vPos.xyxy, c0.xyxy, c0
      mul r3.xy, r0.zwzw, v4.w
      if_ne c3.x, -c3.x
        texld r4, c2.zwzw, s1
        add r0.z, -r4.y, v4.w
        mad r3.z, r4.x, r0.z, r3.x
        mov r3.xy, r3.zyzw
        mov r0.z, v4.w
      else
        mov r0.z, v4.w
      endif
      rcp r0.z, r0.z
      mul r0.zw, r0.z, r3.xyxy
      mad r0.zw, r0, c1.xyxy, c1.xywz
      texld r4, r0.zwzw, s2
      mul_pp r2.yzw, r4.xxyz, r4.xxyz
      mul_pp r2.yzw, r2, r2.x
    else
      mov_pp r2.yzw, r2.x
    endif
    mov_sat r0.y, r0.y
    add r0.y, -r0.y, c2.x
    pow_sat_pp r3.x, r0.y, c8.w
    mov r3.y, c2.y
    texld_pp r4, r3, s0
    mov r2.x, c5.x
    max r0.y, -c7.y, r2.x
    min r1.w, r0.y, c2.w
    mov r3.xy, c2
    mad r0.y, c7.y, r3.y, r3.x
    mad_pp r0.xz, v3.xyyw, r0.x, r1.xyyw
    texld_pp r5, v0, s4
    mad r3.xyz, r5, c5.y, c5.z
    add r0.xz, r0, -r3.xyyw
    mad_sat r0.xz, r0, c2.y, c2.y
    texld r5, r0.xzzw, s5
    lrp_sat r2.x, r5.x, r0.y, r1.w
    texld r0, v0, s3
    dp3_sat r0.w, r1, r3
    mad r0.xyz, r0.w, r0, r2.x
    mul r1.xyw, r1.z, c4.xyzz
    cmp r1.xyz, r1.z, r1.xyww, c2.w
    mad r0.xyz, r0, c4.w, r1
    mul r0.xyz, r2.yzww, r0
    mul r0.xyz, r4.x, r0
    mul r0.xyz, r0, c8
    cmp oC0.xyz, -r3.w, c2.w, r0
    mov oC0.w, c2.w

// approximately 66 instruction slots used (7 texture, 59 arithmetic)
