//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 CameraWorldPos;
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   sampler2D PixelTexture2D_3;
//   sampler2D PixelTexture2D_4;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float4 UniformPixelVector_2;
//   float4 UniformPixelVector_3;
//   float4 UniformPixelVector_4;
//   float4 UniformPixelVector_5;
//   float4 UniformPixelVector_6;
//   float4 UniformPixelVector_7;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   DNESpecularAttenuation       c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNEMiscParameter             c7       1
//   CameraWorldPos               c8       1
//   DNEResolution                c9       1
//   UniformPixelVector_0         c10      1
//   UniformPixelVector_1         c11      1
//   UniformPixelVector_2         c12      1
//   UniformPixelVector_3         c13      1
//   UniformPixelVector_4         c14      1
//   UniformPixelVector_5         c15      1
//   UniformPixelVector_6         c16      1
//   UniformPixelVector_7         c17      1
//   UniformPixelScalars_0        c18      1
//   LightColorAndFalloffExponent c19      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//   PixelTexture2D_1             s4       1
//   PixelTexture2D_2             s5       1
//   PixelTexture2D_3             s6       1
//   PixelTexture2D_4             s7       1
//

    ps_3_0
    def c2, -0.5, 0.87758255, 0.47942555, 0
    def c6, -0.47942555, 0.87758255, 0, 2.79415617e-005
    def c20, 0.0299999993, 0, 1.00999999, 3.12500015e-005
    def c21, 1, 7.60526891e-005, 0.899999976, 0
    def c22, 7.81250037e-006, 20, 0.0500000007, 0.5
    def c23, 10, 1.52876604, 1, 0.5
    def c24, 0.0625, 0, 0.0700000003, 1.40624998e-005
    def c25, 4, 0.0432900488, 0.5, 1.79999995
    def c26, 0.0999999866, 0.400000006, -9.99999997e-007, 0.125
    def c27, 0.199999988, 0.800000012, 0.693147004, 2
    def c28, 6.28318548, -3.14159274, -0.199999988, 1
    def c29, -5.55472994, -6.98316002, 0, 0
    dcl_texcoord4_pp v0.xyz
    dcl_texcoord5 v1.xyz
    dcl_texcoord6 v2.xyz
    dcl_texcoord7 v3.xyw
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6
    dcl_2d s7

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed --ignore-parse-errors CRC32_9D425431_100.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    add r0.xy, c8, v3
    dp3_pp r0.z, v2, v2
    rsq_pp r0.z, r0.z
    mad_sat_pp r0.w, c7.x, v3.w, c7.y
    mul_pp r0.w, r0.w, c0.x
    add_pp r1.xy, r0, c2.x
    dp2add_pp r2.x, c2.yzzw, r1, c2.w
    dp2add_pp r2.y, c6, r1, c6.z
    add_pp r1, r2.xyxy, -c2.x
    mov r2.w, c6.w
    mad_pp r1.xy, r1, r2.w, c11
    texld_pp r2, r1, s3
    dp2add_pp r1.x, r2, -r2, c21.x
    max_pp r2.w, r1.x, c2.w
    rsq_pp r1.x, r2.w
    rcp_pp r2.z, r1.x
    mov r1.xy, c21
    mad_pp r1.yz, r1.xzww, r1.y, c12.xxyw
    texld_pp r3, r1.yzzw, s3
    dp2add_pp r1.y, r3, -r3, c21.x
    max_pp r2.w, r1.y, c2.w
    rsq_pp r1.y, r2.w
    rcp_pp r3.z, r1.y
    mad_pp r1.yzw, r3.xxyz, -c21.z, r2.xxyz
    dp3_pp r2.x, r1.yzww, r1.yzww
    rsq_pp r2.x, r2.x
    mad_pp r1.yzw, r1, r2.x, -c21.xwwx
    mad_pp r1.yzw, r1, c20.x, c20.xyyz
    nrm_pp r2.xyz, r1.yzww
    nrm_pp r3.xyz, v0
    mad_pp r1.yzw, v2.xxyz, r0.z, r3.xxyz
    nrm_pp r4.xyz, r1.yzww
    mul_pp r1.yz, r0.xxyw, c20.w
    mov r1.w, c20.w
    mad_pp r5.xy, r0, r1.w, c15
    texld_pp r5, r5, s5
    mad_pp r5.xz, r0.xyyw, r1.w, c16.xyyw
    texld_pp r6, r5.xzzw, s5
    add_pp r0.z, r5.y, r6.y
    mov r5.xy, c22
    mad_pp r5.xz, r0.xyyw, r5.x, c17.xyyw
    texld_pp r6, r5.xzzw, s6
    add_pp r0.z, r0.z, r6.x
    mad_pp r1.w, r0.z, r5.y, c18.x
    mad_pp r1.w, r1.w, c22.z, c22.w
    frc_pp r1.w, r1.w
    mad_pp r1.w, r1.w, c28.x, c28.y
    sincos_pp r5.y, r1.w
    add_pp r1.w, r5.y, c21.x
    mad_pp r1.w, r1.w, c28.z, c28.w
    mad_pp r1.w, r1.w, c23.x, c23.y
    exp_pp r1.w, r1.w
    texld_pp r5, c23.zwzw, s0
    dp3 r2.w, v1, v1
    add r3.w, -r2.w, c21.x
    mul r6, r5.x, r3.w
    mov r7, r6
    texkill r7
    if b0
      mad r5.yz, vPos.xxyw, c9.xxyw, c9.xzww
      mul r6.xy, r5.yzzw, v3.w
      if_ne c3.x, -c3.x
        texld r7, c24, s1
        add r3.w, -r7.y, v3.w
        mad r6.z, r7.x, r3.w, r6.x
        mov r6.xy, r6.zyzw
        mov r3.w, v3.w
      else
        mov r3.w, v3.w
      endif
      rcp r3.w, r3.w
      mul r5.yz, r3.w, r6.xxyw
      mad r5.yz, r5, c1.xxyw, c1.xwzw
      texld r7, r5.yzzw, s2
      mul_pp r5.yzw, r7.xxyz, r7.xxyz
      mul_pp r5.yzw, r5, r5.x
    else
      mov_pp r5.yzw, r5.x
    endif
    mov r7.zw, c24
    mad_pp r6.xyz, c5.w, r7.z, c5
    mov_sat r2.w, r2.w
    add r2.w, -r2.w, c21.x
    pow_sat_pp r7.x, r2.w, c19.w
    mov r7.y, -c2.x
    texld_pp r8, r7, s0
    mad_pp r7.xy, r0, r7.w, c13
    texld_pp r9, r7, s4
    mad_pp r0.xy, r0, r7.w, c14
    texld_pp r7, r0, s4
    texld_pp r10, r1.yzzw, s4
    mov r0.x, c25.x
    mad_pp r0.x, r10.w, r0.x, c18.x
    mad_pp r0.x, r0.x, c25.y, c25.z
    frc_pp r0.x, r0.x
    mad_pp r0.x, r0.x, c28.x, c28.y
    sincos_pp r10.y, r0.x
    add_pp r0.x, r10.y, c21.x
    mul_pp r0.x, r0.x, -c2.x
    lrp_pp r1.y, r0.x, r7.w, r9.w
    mad_pp r0.y, r1.y, c26.x, c26.y
    mul_pp r0.y, r0.z, r0.y
    mul_sat_pp r0.y, r0.y, c25.w
    add r0.z, r0.y, c26.z
    mul_pp r0.y, r0.y, r0.y
    cmp_pp r0.y, r0.z, r0.y, c2.w
    texld_pp r10, r0.y, s7
    lrp_pp r1.y, r0.x, r9.w, r7.w
    add_pp r0.x, -r1.y, c21.x
    mad_pp r0.x, r0.x, c27.x, c27.y
    mul_pp r0.xyz, r10, r0.x
    add_pp r1.xyz, r1.x, -c10
    mul_pp r0.xyz, r0, r1
    mad_pp r0.xyz, r0, c4.w, c4
    dp3_sat_pp r1.x, r2, r3
    mul_pp r1.y, r1.x, c0.w
    mul_sat_pp r1.z, r8.x, c0.y
    mul_pp r1.z, r1.z, r1.z
    mul_pp r1.z, r1.w, r1.z
    dp3_sat_pp r1.w, r2, r4
    mad_pp r2.x, r1.z, c27.z, c27.w
    mul_pp r2.x, r2.x, c26.w
    mad r1.z, r1.z, r1.w, -r1.z
    exp_pp r1.z, r1.z
    mul_pp r1.z, r1.z, r2.x
    mul_pp r1.x, r1.x, r1.z
    mul_pp r0.w, r0.w, r1.x
    dp3_sat_pp r1.x, r3, r4
    mad_pp r1.z, r1.x, c29.x, c29.y
    mul_pp r1.x, r1.x, r1.z
    exp_pp r1.x, r1.x
    lrp_pp r2.xyz, r1.x, c21.x, r6
    mul_pp r1.xzw, r0.w, r2.xyyz
    mad_pp r0.xyz, r0, r1.y, r1.xzww
    mul_pp r0.xyz, r5.yzww, r0
    mul r0.xyz, r8.x, r0
    mul r0.xyz, r0, c19
    cmp oC0.xyz, -r6.w, c2.w, r0
    mov oC0.w, c2.w

// approximately 169 instruction slots used (13 texture, 156 arithmetic)
