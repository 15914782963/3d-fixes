//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 DebugMode[5];
//   float4 DiffuseOverrideParameter;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   float4 ObjectWorldPositionAndRadius;
//   sampler2D PixelTexture2D_0;
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4 SpecularOverrideParameter;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   DNEResolution                c0       1
//   ScreenPositionScaleBias      c1       1
//   MinZ_MaxZRatio               c2       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DebugMode                    c7       5
//   ObjectWorldPositionAndRadius c12      1
//   UniformPixelVector_0         c13      1
//   UniformPixelVector_1         c14      1
//   UniformPixelScalars_0        c15      1
//   SceneColorTexture            s0       1
//   NvStereoFixTexture           s1       1
//   PixelTexture2D_0             s2       1
//

    ps_3_0
    def c6, 0, 1, 0.5, 0.0625
    def c16, 9.99999975e-006, 100000, 2, 0
    def c17, -0, 0, 1, 0
    dcl_color v0.xyz
    dcl_color1 v1
    dcl_texcoord6 v2.xyz
    dcl_texcoord7 v3.w
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-lights --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_DA01811C_1043.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    dp3_pp r0.x, v1, v1
    rsq_pp r0.x, r0.x
    mul r0, r0.x, v1.yzxy
    dp3_pp r1.x, v0, v0
    rsq_pp r1.x, r1.x
    mul r1, r1.x, v0.zyyx
    mul_pp r2.xy, r0.ywzw, r1.zwzw
    mad_pp r1.yz, r0.xxzw, r1.xxyw, -r2.xxyw
    mul r2.xy, r1.yzzw, v1.w
    mad r1.yz, vPos.xxyw, c0.xxyw, c0.xzww
    mul r3.yz, r1, v3.w
    dp3_pp r0.w, v2, v2
    rsq_pp r0.w, r0.w
    mul_sat r0.w, r0.w, v2.z
    mov r4.xyz, c6
    mul r5, r4.xyxy, c7.xxyy
    add r5, r5.zzzw, r5.xxxy
    mov r1.z, c7.z
    mul r6.xyz, r1.z, c4
    mov r6.w, c7.z
    add r5, r5, r6
    mad r5, c7.w, r4.zzyy, r5
    mad r5, c8.x, r4.xyxy, r5
    mov r1.y, c8.y
    mul r6.xyz, r1.y, c5
    mov r6.w, c8.y
    add r5, r5, r6
    abs r1.y, c3.x
    if_ne c3.x, -c3.x
      texld r6, c6.wxzw, s1
      add r1.z, -r6.y, v3.w
      mad r3.x, r6.x, r1.z, r3.y
      mov r3.w, v3.w
      mov r6.xyz, r3.xzww
    else
      mov r6.xyz, c6.x
    endif
    mov r3.w, v3.w
    cmp r6.xyz, -r1.y, r3.yzww, r6
    rcp r1.z, r6.z
    mul r4.zw, r1.z, r6.xyxy
    mad r6.xy, r4.zwzw, c1, c1.wzzw
    mov r6.zw, c6.x
    texldl r6, r6, s0
    add r1.z, r6.w, -c2.y
    add r4.z, -r1.z, c16.x
    rcp r1.z, r1.z
    cmp r1.z, r4.z, c16.y, r1.z
    mov r4.z, c16.z
    mov r6.x, c15.x
    mad r4.z, c12.w, r4.z, r6.x
    mad r1.z, c2.x, r1.z, -r4.z
    add r1.z, -r1.z, v3.w
    rcp r4.z, c15.y
    mul_sat r1.z, r1.z, r4.z
    mul r1.z, r1.z, c15.z
    if_ne c3.x, -c3.x
      texld r6, c6.wxzw, s1
      add r4.w, -r6.y, v3.w
      mad r3.x, r6.x, r4.w, r3.y
      mov r6.xyz, r3.xzww
    else
      mov r6.xyz, c6.x
    endif
    cmp r3.xyz, -r1.y, r3.yzww, r6
    rcp r1.y, r3.z
    mul r3.xy, r1.y, r3
    mad r3.xy, r3, c1, c1.wzzw
    mov r3.zw, c6.x
    texldl r3, r3, s0
    add r1.y, r3.w, -c2.y
    add r3.x, -r1.y, c16.x
    rcp r1.y, r1.y
    cmp r1.y, r3.x, c16.y, r1.y
    mad r1.y, c2.x, r1.y, -v3.w
    mul_sat r1.y, r4.z, r1.y
    mul r1.y, r1.y, r1.z
    texld r3, r0.w, s2
    mul r0.w, r1.y, r3.x
    add r3.xyz, -r4.y, c14
    mad r3.xyz, r0.w, r3, c13
    add_pp r3.xyz, r3, c6.y
    mov r3.w, c6.y
    mad r3, c8.z, r3, r5
    mov_pp r2.z, r1.x
    mov_pp r2.w, r0.y
    mad r5.xyz, r2.zyww, c6.z, c6.z
    mov r5.w, c6.y
    mad r3, c8.w, r5, r3
    mov r0.x, r1.w
    mov r0.y, r2.x
    mad r0.xyz, r0, c6.z, c6.z
    mov r0.w, c6.y
    mad r0, c9.x, r0, r3
    add r0, r0, c9.y
    add r0, r0, c9.z
    mov r1.w, c9.w
    mad r0, r1.w, c17.xxyz, r0
    mad r0, c10.x, r4.xxxy, r0
    mad r0, c10.y, r4.xxxy, r0
    mad r0, c10.z, r4.xxxy, r0
    mad r0, c10.w, r4.xxxy, r0
    mad r0, c11.x, r4.xxxy, r0
    mad r0, c11.y, r4.xxxy, r0
    mad r0, c11.z, r4.xxxy, r0
    mad oC0, c11.w, r4.xxxy, r0

// approximately 112 instruction slots used (7 texture, 105 arithmetic)
