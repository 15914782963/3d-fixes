//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   float4 ScreenDoorFadeSettings;
//   float4 ScreenDoorFadeSettings2;
//   sampler2D ScreenDoorNoiseTexture;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float2 SpotAngles;
//   float3 SpotDirection;
//   float TwoSidedSign;
//   float4 UniformPixelVector_0;
//   bool bEnableScreenDoorFade;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bEnableScreenDoorFade        b0       1
//   bReceiveDynamicShadows       b1       1
//   TwoSidedSign                 c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNESpecularAttenuation       c7       1
//   DNEMiscParameter             c8       1
//   DNEResolution                c9       1
//   ScreenDoorFadeSettings       c10      1
//   ScreenDoorFadeSettings2      c11      1
//   UniformPixelVector_0         c12      1
//   LightColorAndFalloffExponent c13      1
//   SpotDirection                c14      1
//   SpotAngles                   c15      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   ScreenDoorNoiseTexture       s3       1
//   PixelTexture2D_0             s4       1
//   PixelTexture2D_1             s5       1
//   PixelTexture2D_2             s6       1
//

    ps_3_0
    def c2, -1, 1, 10, 1.52876604
    def c6, 0.5, 0.0625, 0, 0.125
    def c16, 0.693147004, 2, -5.55472994, -6.98316002
    dcl_texcoord v0.xy
    dcl_texcoord4_pp v1.xyz
    dcl_texcoord5_pp v2
    dcl_texcoord6 v3.xyz
    dcl_texcoord7 v4.w
    dcl vPos.xy
    dcl vFace
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --auto-fix-unreal-dne-reflection --only-autofixed --ignore-parse-errors CRC32_F28CCCFA_3060.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    dp3_pp r0.x, v3, v3
    rsq_pp r0.x, r0.x
    mad_sat_pp r0.y, c8.x, v4.w, c8.y
    mul_pp r0.y, r0.y, c7.x
    nrm_pp r1.xyz, v1
    cmp r0.z, vFace, c2.x, c2.y
    mul_pp r0.z, r0.z, c0.x
    mad_pp r2.xyz, v3, r0.x, r1
    nrm_pp r3.xyz, r2
    texld_pp r2, v0, s6
    mad_pp r0.x, r2.w, c2.z, c2.w
    exp_pp r0.x, r0.x
    if b0
      mad r2.xy, vPos, c11.zwzw, c11
      texld_pp r2, r2, s3
      mad r0.w, c10.y, r2.x, c10.z
      mov r2.y, c2.y
      add r1.w, r2.y, -c10.x
      add r2, r0.w, -r1.w
      texkill r2
    endif
    dp3 r0.w, v2, v2
    rsq r1.w, r0.w
    mul r2.xyz, r1.w, v2
    dp3 r1.w, r2, -c14
    add r1.w, r1.w, -c15.x
    mul_sat r1.w, r1.w, c15.y
    mul_pp r2.z, r1.w, r1.w
    mov_sat_pp r2.x, v2.w
    mov r2.yw, c6.x
    texld_pp r4, r2, s0
    texld_pp r2, r2.zwzw, s0
    add r1.w, -r0.w, c2.y
    mul r1.w, r4.x, r1.w
    mul r5, r2.x, r1.w
    mov r6, r5
    texkill r6
    if b1
      mad r2.yz, vPos.xxyw, c9.xxyw, c9.xzww
      mul r5.xy, r2.yzzw, v4.w
      if_ne c3.x, -c3.x
        texld r6, c6.yzzw, s1
        add r1.w, -r6.y, v4.w
        mad r5.z, r6.x, r1.w, r5.x
        mov r5.xy, r5.zyzw
        mov r1.w, v4.w
      else
        mov r1.w, v4.w
      endif
      rcp r1.w, r1.w
      mul r2.yz, r1.w, r5.xxyw
      mad r2.yz, r2, c1.xxyw, c1.xwzw
      texld r6, r2.yzzw, s2
      mul_pp r2.yzw, r6.xxyz, r6.xxyz
      mul_pp r2.yzw, r2, r4.x
    else
      mov_pp r2.yzw, r4.x
    endif
    texld_pp r4, v0, s5
    mad_pp r4.xyz, r4, c5.w, c5
    mov_sat r0.w, r0.w
    add r0.w, -r0.w, c2.y
    pow_sat_pp r5.x, r0.w, c13.w
    mov r5.y, c6.x
    texld_pp r6, r5, s0
    texld_pp r7, v0, s4
    mov r5.y, c2.y
    add_pp r5.xyz, r5.y, -c12
    mul_pp r5.xyz, r5, r7
    mad_pp r5.xyz, r5, c4.w, c4
    mul_pp r0.w, r2.x, r6.x
    mul_sat_pp r1.w, r1.z, r0.z
    mul_pp r3.w, r1.w, c7.w
    mul_sat_pp r0.w, r0.w, c7.y
    mul_pp r0.w, r0.w, r0.w
    mul_pp r0.x, r0.x, r0.w
    mul_sat_pp r0.z, r0.z, r3.z
    mad_pp r0.w, r0.x, c16.x, c16.y
    mul_pp r0.w, r0.w, c6.w
    mad r0.x, r0.x, r0.z, -r0.x
    exp_pp r0.x, r0.x
    mul_pp r0.x, r0.x, r0.w
    mul_pp r0.x, r1.w, r0.x
    mul_pp r0.x, r0.y, r0.x
    dp3_sat_pp r0.y, r1, r3
    mad_pp r0.z, r0.y, c16.z, c16.w
    mul_pp r0.y, r0.y, r0.z
    exp_pp r0.y, r0.y
    lrp_pp r1.xyz, r0.y, c2.y, r4
    mul_pp r0.xyz, r0.x, r1
    mad_pp r0.xyz, r5, r3.w, r0
    mul_pp r0.xyz, r2.yzww, r0
    mul r0.xyz, r0, c13
    mul r0.xyz, r6.x, r0
    mul r0.xyz, r2.x, r0
    cmp oC0.xyz, -r5.w, c6.z, r0
    mov oC0.w, c6.z

// approximately 109 instruction slots used (9 texture, 100 arithmetic)
