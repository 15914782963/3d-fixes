//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 AmbientColorAndSkyFactor;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   float4 LightColorAndFalloffExponent;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float TwoSidedSign;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float3 UpperSkyColor;
//   sampler2D VAOBuffer;
//   float4 WorldIncidentLighting[7];
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   TwoSidedSign                 c0       1
//   ScreenPositionScaleBias      c1       1
//   MinZ_MaxZRatio               c2       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   WorldIncidentLighting        c7       7
//   DNESpecularAttenuation       c14      1
//   DNEResolution                c15      1
//   UniformPixelVector_0         c16      1
//   UniformPixelVector_1         c17      1
//   UniformPixelScalars_0        c18      1
//   LightColorAndFalloffExponent c19      1
//   UpperSkyColor                c20      1
//   AmbientColorAndSkyFactor     c21      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   PixelTexture2D_0             s2       1
//   VAOBuffer                    s3       1
//

    ps_3_0
    def c6, 0.200000003, 0.5, 6.28318548, -3.14159274
    def c22, -0.75, 0.100000001, 0.0769230798, 1
    def c23, -0.333299994, 3, -1, 0.858085215
    def c24, -1.02332771, 1.02332771, 0.886227608, -9.99999997e-007
    def c25, 0.0625, 0, 1, 0.5
    def c26, -1, 1, 0, 2
    def c27, -0.858085215, 0.247708291, 0.429042608, 15
    dcl_color v0.xyz
    dcl_color1 v1
    dcl_texcoord v2.xy
    dcl_texcoord4 v3.xyz
    dcl_texcoord6 v4.xyz
    dcl_texcoord5 v5.w
    dcl vPos.xy
    dcl vFace
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_5622D768_723.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    nrm_pp r0.xyz, v1
    dp3_pp r0.w, v0, v0
    rsq_pp r0.w, r0.w
    mul_pp r1.xyz, r0.w, v0.yxzw
    mul r2.yz, r0, r1
    mad_pp r0.x, r0.x, r1.x, -r2.y
    mul_pp r1.x, r0.x, v1.w
    mad r0.xy, vPos, c15, c15.zwzw
    mul r3.xy, r0, v5.w
    nrm_pp r4.xyz, v4
    nrm_pp r5.xyz, v3
    cmp r0.x, vFace, c26.x, c26.y
    mul_pp r0.x, r0.x, c0.x
    mad_pp r4.xyz, r4.z, c26.zzww, -r4
    mov r0.y, c26.y
    add r0.y, r0.y, c18.x
    mad r0.y, v2.y, v2.y, r0.y
    mad r0.y, r0.y, c6.x, c6.y
    frc r0.y, r0.y
    mad r0.y, r0.y, c6.z, c6.w
    sincos r6.y, r0.y
    add r0.y, c22.x, v2.y
    frc r0.w, r0.y
    add r0.w, -r0.w, r0.y
    mul r0.y, r0.w, r0.y
    mul r0.y, r0_abs.y, r6.y
    mul r6.x, r0.y, c22.y
    mov r6.y, c26.z
    add r0.yw, r6.xxzy, v2.xxzy
    mul r0.yw, r0, c22.xzzw
    texld r6, r0.ywzw, s2
    mov r7, c17
    mad r8, r7.w, r6.w, c23.x
    texkill r8
    mad_pp r6.xyz, r7, r6, c16
    mov r7.xyz, c4
    mul r8.xyz, r7, c20
    mad_pp r6.xyz, r8, c21.w, r6
    mov_pp r1.y, r0.z
    mul r8.xyz, r1, r1.xyxw
    mul r2.x, r0.z, r1.x
    mad r2.y, r8.y, c23.y, c23.z
    mad_pp r2.w, r1.z, r1.z, -r8.x
    mul r1.xyz, r1, c24.xyxw
    mul r1.w, r8.z, c23.w
    mul r2, r2, c27.xyxz
    dp4 r0.y, c8, r1
    mov r0.z, c24.z
    mad_pp r0.y, c7.x, r0.z, r0.y
    dp4 r0.w, c9, r2
    add_pp r8.x, r0.w, r0.y
    dp4 r0.y, c10, r1
    mad_pp r0.y, c7.y, r0.z, r0.y
    dp4 r0.w, c11, r2
    add_pp r8.y, r0.w, r0.y
    dp4 r0.y, c12, r1
    mad_pp r0.y, c7.z, r0.z, r0.y
    dp4 r0.z, c13, r2
    add_pp r8.z, r0.z, r0.y
    mul_pp r0.yzw, r8.xxyz, c4.xxyz
    cmp_pp r0.yzw, r8.xxyz, r0, c26.z
    add_pp r0.yzw, r0, r6.xxyz
    abs r1.x, c3.x
    if_ne c3.x, -c3.x
      texld r2, c25, s1
      add r1.y, -r2.y, v5.w
      mad r3.z, r2.x, r1.y, r3.x
      mov r3.w, v5.w
      mov r1.yzw, r3.xzyw
    else
      mov r1.yzw, c26.z
    endif
    mov r3.z, v5.w
    cmp r1.xyz, -r1.x, r3, r1.yzww
    rcp r1.z, r1.z
    mul r1.xy, r1.z, r1
    mad r1.xy, r1, c1, c1.wzzw
    texld_pp r1, r1, s3
    texld_pp r2, c25.zwzw, s0
    mul_sat_pp r0.x, r5.z, r0.x
    add r1.y, r0.x, c24.w
    mul r0.x, r0.x, c14.w
    dp3_sat_pp r1.z, r4, r5
    add r1.w, r1.z, c24.w
    pow_pp r2.y, r1.z, c27.w
    mul r1.z, r2.y, c14.x
    mul r2.yzw, r0.x, c4.xxyz
    cmp r2.yzw, r1.y, r2, c26.z
    mul_pp r3.xyz, r1.z, c5
    cmp_pp r1.yzw, r1.w, r3.xxyz, c26.z
    add_pp r1.yzw, r1, r2
    mul_pp r1.yzw, r2.x, r1
    mul_pp r1.yzw, r1, c19.xxyz
    mad_pp r0.xyz, r0.yzww, r1.x, r1.yzww
    mad_pp oC0.xyz, r7, c21, r0
    rcp r0.x, v5.w
    mad oC0.w, c2.x, r0.x, c2.y

// approximately 114 instruction slots used (4 texture, 110 arithmetic)
