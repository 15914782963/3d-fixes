//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   float4 ScreenDoorFadeSettings;
//   float4 ScreenDoorFadeSettings2;
//   sampler2D ScreenDoorNoiseTexture;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float2 SpotAngles;
//   float3 SpotDirection;
//   float TwoSidedSign;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   bool bEnableScreenDoorFade;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bEnableScreenDoorFade        b0       1
//   bReceiveDynamicShadows       b1       1
//   TwoSidedSign                 c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNESpecularAttenuation       c7       1
//   DNEResolution                c8       1
//   ScreenDoorFadeSettings       c9       1
//   ScreenDoorFadeSettings2      c10      1
//   UniformPixelVector_0         c11      1
//   UniformPixelScalars_0        c12      1
//   LightColorAndFalloffExponent c13      1
//   SpotDirection                c14      1
//   SpotAngles                   c15      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   ScreenDoorNoiseTexture       s3       1
//   PixelTexture2D_0             s4       1
//

    ps_3_0
    def c2, -1, 1, 0, 2
    def c6, 1, 0.5, 0.0625, 0
    def c16, -9.99999997e-007, 15, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord4_pp v1.xyz
    dcl_texcoord5 v2.xyz
    dcl_texcoord6 v3.xyz
    dcl_texcoord7 v4.w
    dcl vPos.xy
    dcl vFace
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed CRC32_3ADCE94D_166.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    nrm_pp r0.xyz, v3
    nrm_pp r1.xyz, v1
    cmp r0.w, vFace, c2.x, c2.y
    mul_pp r0.w, r0.w, c0.x
    mul_pp r2.xy, r0.z, r0.w
    mul_pp r2.z, r0.w, r2.y
    mad_pp r0.xyz, r2, c2.zzww, -r0
    if b0
      mad r2.xy, vPos, c10.zwzw, c10
      texld_pp r2, r2, s3
      mad r1.w, c9.y, r2.x, c9.z
      mov r2.y, c2.y
      add r2.x, r2.y, -c9.x
      add r2, r1.w, -r2.x
      texkill r2
    endif
    dp3 r1.w, v2, v2
    rsq r2.x, r1.w
    mul r2.xyz, r2.x, v2
    dp3 r2.x, r2, -c14
    add r2.x, r2.x, -c15.x
    mul_sat r2.x, r2.x, c15.y
    mul_pp r2.x, r2.x, r2.x
    texld_pp r3, c6, s0
    mov r2.yw, c6.y
    texld_pp r4, r2, s0
    add r2.x, -r1.w, c2.y
    mul r2.x, r3.x, r2.x
    mul r5, r4.x, r2.x
    mov r6, r5
    texkill r6
    if b1
      mad r2.xy, vPos, c8, c8.zwzw
      mul r5.xy, r2, v4.w
      if_ne c3.x, -c3.x
        texld r6, c6.zwzw, s1
        add r2.x, -r6.y, v4.w
        mad r5.z, r6.x, r2.x, r5.x
        mov r5.xy, r5.zyzw
        mov r2.x, v4.w
      else
        mov r2.x, v4.w
      endif
      rcp r2.x, r2.x
      mul r2.xy, r2.x, r5
      mad r2.xy, r2, c1, c1.wzzw
      texld r6, r2, s2
      mul_pp r3.yzw, r6.xxyz, r6.xxyz
      mul_pp r3.yzw, r3, r3.x
    else
      mov_pp r3.yzw, r3.x
    endif
    mov_sat r1.w, r1.w
    add r1.w, -r1.w, c2.y
    pow_sat_pp r2.z, r1.w, c13.w
    texld_pp r2, r2.zwzw, s0
    texld r6, v0, s4
    mov r2.y, c2.y
    add r2.yzw, r2.y, -c11.xxyz
    mul_pp r2.yzw, r2, r6.xxyz
    mad_pp r2.yzw, r2, c4.w, c4.xxyz
    mul_sat_pp r0.w, r1.z, r0.w
    add r1.w, r0.w, c16.x
    mul_pp r0.w, r0.w, c7.w
    cmp_pp r0.w, r1.w, r0.w, c2.z
    dp3_sat_pp r0.x, r0, r1
    add r0.y, r0.x, c16.x
    pow_pp r1.x, r0.x, c16.y
    mul r0.x, r1.x, c7.x
    lrp_pp r1.x, c12.x, c12.x, r0.w
    mul_pp r0.xzw, r0.x, c5.xyyz
    cmp_pp r0.xyz, r0.y, r0.xzww, c2.z
    mad_pp r0.xyz, r2.yzww, r1.x, r0
    mul_pp r0.xyz, r3.yzww, r0
    mul r0.xyz, r0, c13
    mul r0.xyz, r2.x, r0
    mul r0.xyz, r4.x, r0
    cmp oC0.xyz, -r5.w, c2.z, r0
    mov oC0.w, c2.z

// approximately 93 instruction slots used (7 texture, 86 arithmetic)
