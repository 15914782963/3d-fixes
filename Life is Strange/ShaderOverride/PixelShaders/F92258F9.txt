//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   DNEResolution           c0       1
//   ScreenPositionScaleBias c1       1
//   MinZ_MaxZRatio          c2       1
//   NvStereoEnabled         c3       1
//   UniformPixelVector_0    c7       1
//   UniformPixelScalars_0   c8       1
//   SceneColorTexture       s0       1
//   NvStereoFixTexture      s1       1
//   PixelTexture2D_0        s2       1
//

    ps_3_0
    def c4, -0.5, 0.0208350997, -0.0851330012, 0.180141002
    def c5, -0.330299497, 0.999866009, 0, 1
    def c6, -2, 1.57079637, -0, -3.14159274
    def c9, 0.159154937, 0.5, 1, 0.100000001
    def c10, -0.25, 0.25, 0.5, 0.0833333358
    def c11, 20, 28, 0.0500000007, 0.0357142873
    def c12, 0.600000024, 0.021428572, 12, 0.333332986
    def c13, 0.0500000007, 0.0357142873, -0.0250000004, 4
    def c14, 0.00390599994, 0.0625, 0, 9.99999975e-006
    def c15, 100000, 0.00571428565, 0, 0
    def c16, 0.333332986, 1, -9.99999997e-007, 2.20000005
    dcl_texcoord4 v0.w
    dcl_texcoord6 v1.xyz
    dcl_texcoord5 v2.w
    dcl_texcoord v3.xy
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-lights --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_F92258F9_34907078.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    mad r0.xy, vPos, c0, c0.zwzw
    mul r0.xy, r0, v2.w
    dp3_pp r1.x, v1, v1
    rsq_pp r1.x, r1.x
    mul_pp r1.x, r1.x, v1.z
    rcp r1.y, v2.w
    mul r1.yz, r0.xxyw, r1.y
    mad r1.yz, r1, c1.xxyw, c1.xwzw
    texld r2, r1.yzzw, s0
    add r1.yz, c4.x, v3.xxyw
    add r3.xy, -r1_abs.yzzw, r1_abs.zyzw
    cmp r3.xz, r3.x, r1_abs.yyzw, r1_abs.zyyw
    rcp r1.w, r3.z
    mul r1.w, r1.w, r3.x
    mul r2.w, r1.w, r1.w
    mad r3.x, r2.w, c4.y, c4.z
    mad r3.x, r2.w, r3.x, c4.w
    mad r3.x, r2.w, r3.x, c5.x
    mad r2.w, r2.w, r3.x, c5.y
    mul r1.w, r1.w, r2.w
    cmp r2.w, r3.y, c5.z, c5.w
    mad r3.x, r1.w, c6.x, c6.y
    mad r1.w, r3.x, r2.w, r1.w
    cmp r2.w, r1.y, c6.z, c6.w
    add r1.w, r1.w, r2.w
    add r2.w, -r1.y, r1.z
    cmp r3.xy, r2.w, r1.yzzw, r1.zyzw
    cmp r2.w, r3.y, c5.w, c5.z
    cmp r2.w, r3.x, c5.z, r2.w
    add r3.x, r1.w, r1.w
    mad r1.w, r2.w, -r3.x, r1.w
    mad r3.xz, r1.w, c9.x, c9.y
    dp2add r1.y, r1.yzzw, r1.yzzw, c5.z
    rsq r1.z, r1.y
    rcp r3.yw, r1.z
    mov r1.zw, c9
    mad r3, r3, r1.zwzw, c10.xyxz
    mov r4.xyz, c12
    mul r4.xyz, r4, c8.x
    frc r4.xyz, r4_abs
    cmp r4.xyz, c8.x, r4, -r4
    mul r1.zw, r4.xyxy, c11.xyxy
    frc r4.xy, r1.zwzw
    add r1.zw, r1, -r4.xyxy
    mul r4.xy, r1.zwzw, c11.zwzw
    mad r5, r3, c11.zwzw, r4.xyxy
    texld r6, r5, s2
    mov r4.x, c8.x
    add r2.w, r4.x, c10.w
    mul r4.xy, r2.w, c12
    frc r4.xy, r4_abs
    cmp r4.xy, r2.w, r4, -r4
    mul r4.xy, r4, c11
    frc r5.xy, r4
    add r4.xy, r4, -r5
    mul r5.xy, r4, c11.zwzw
    mad r3, r3, c11.zwzw, r5.xyxy
    texld r7, r3, s2
    lrp r8.xyz, r4.z, r7, r6
    texld r5, r5.zwzw, s2
    texld r3, r3.zwzw, s2
    lrp r6.xyz, r4.z, r3, r5
    add r3.xyz, r6, r8
    mad r1.zw, r1, c13.xyxy, c13.xyzy
    texld r5, r1.zwzw, s2
    mad r1.zw, r4.xyxy, c13.xyxy, c13.xyzy
    texld r6, r1.zwzw, s2
    lrp r7.xyz, r4.z, r6, r5
    add r3.xyz, r3, r7
    mul r4.xyz, r3, c12.w
    mad r3.xyz, r3, -c16.x, c16.y
    mad r3.xyz, r3, c9.w, r4
    mad r2.xyz, r3, c12.x, r2
    add_pp r2.xyz, r2, c7
    mul_sat r1.y, r1.y, c13.w
    add r1.y, -r1.y, c5.w
    mul r1.z, r1.y, r1.y
    mul r1.y, r1.y, r1.z
    add r1.z, r1_abs.x, c16.z
    pow r2.w, r1_abs.x, c16.w
    add r1.x, -c12.z, v2.w
    mul_sat r1.x, r1.x, c14.x
    mul r1.x, r1.x, r2.w
    mul r1.x, r1.x, r1.y
    abs r1.y, c3.x
    if_ne c3.x, -c3.x
      texld r3, c14.yzzw, s1
      add r1.w, -r3.y, v2.w
      mad r0.z, r3.x, r1.w, r0.x
      mov r0.w, v2.w
      mov r3.xyz, r0.zyww
    else
      mov r3.xyz, c5.z
    endif
    mov r0.z, v2.w
    cmp r0.xyz, -r1.y, r0, r3
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    mov r0.zw, c5.z
    texldl r0, r0, s0
    add r0.x, r0.w, -c2.y
    add r0.y, -r0.x, c14.w
    rcp r0.x, r0.x
    cmp r0.x, r0.y, c15.x, r0.x
    mad r0.x, c2.x, r0.x, -v2.w
    mul_sat r0.x, r0.x, c15.y
    mul r0.x, r0.x, r1.x
    mul r0.yzw, r2.xxyz, v0.w
    mul_pp r0.xyz, r0.x, r0.yzww
    cmp_pp oC0.xyz, r1.z, r0, c5.z
    mov oC0.w, c5.z

// approximately 118 instruction slots used (10 texture, 108 arithmetic)
