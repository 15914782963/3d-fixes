//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   DNEResolution                c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   UniformPixelVector_0         c7       1
//   UniformPixelVector_1         c8       1
//   LightColorAndFalloffExponent c9       1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//

    ps_3_0
    def c2, 0.0625, 0, -0.0199999996, 0.0199999996
    def c5, 1, 0.5, -0.333299994, 0
    dcl_color1 v0.xyz
    dcl_texcoord v1.xy
    dcl_texcoord5 v2.xyz
    dcl_texcoord7 v3.w
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed --ignore-parse-errors CRC32_F5C0D3E5_125.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    dp3_pp r0.x, v0, v0
    rsq_pp r0.x, r0.x
    texld_pp r1, c5, s0
    dp3 r0.y, v2, v2
    add r0.z, -r0.y, c5.x
    mul r2, r1.x, r0.z
    mov r3, r2
    texkill r3
    texld r3, v1, s3
    add r0.z, r3.w, c5.z
    cmp r4, -r2.w, c5.w, r0.z
    texkill r4
    if b0
      mad r0.zw, vPos.xyxy, c0.xyxy, c0
      mul r2.xy, r0.zwzw, v3.w
      if_ne c3.x, -c3.x
        texld r4, c2, s1
        add r0.z, -r4.y, v3.w
        mad r2.z, r4.x, r0.z, r2.x
        mov r2.xy, r2.zyzw
        mov r0.z, v3.w
      else
        mov r0.z, v3.w
      endif
      rcp r0.z, r0.z
      mul r0.zw, r0.z, r2.xyxy
      mad r0.zw, r0, c1.xyxy, c1.xywz
      texld r4, r0.zwzw, s2
      mul_pp r1.yzw, r4.xxyz, r4.xxyz
      mul_pp r1.yzw, r1, r1.x
    else
      mov_pp r1.yzw, r1.x
    endif
    mov_sat r0.y, r0.y
    add r0.y, -r0.y, c5.x
    pow_sat_pp r2.x, r0.y, c9.w
    mov r2.y, c5.y
    texld_pp r4, r2, s0
    mad r0.x, v0.z, r0.x, c5.x
    mul r0.x, r0.x, c5.y
    mul r0.yzw, r3.xxyz, r0.x
    mad r2.xyz, r0.x, r3, c2.z
    mov_sat r0.yzw, r0
    cmp r0.xyz, r2, r0.yzww, c2.w
    mul r0.xyz, r0, c8
    mov r1.x, c5.x
    add r2.xyz, r1.x, -c7
    mul_pp r0.xyz, r0, r2
    mad_pp r0.xyz, r0, c4.w, c4
    mul r0.xyz, r1.yzww, r0
    mul r0.xyz, r4.x, r0
    mul r0.xyz, r0, c9
    cmp oC0.xyz, -r2.w, c5.w, r0
    mov oC0.w, c5.w

// approximately 60 instruction slots used (5 texture, 55 arithmetic)
