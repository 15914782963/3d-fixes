//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   DNESpecularAttenuation       c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNEResolution                c7       1
//   LightColorAndFalloffExponent c8       1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//

    ps_3_0
    def c2, 0, 2, 1, 0.5
    def c6, 0.0625, 0, 15, 0
    def c9, 0.0397887342, 0.5, 6.28318548, -3.14159274
    def c10, 1, -1, -0.333299994, -9.99999997e-007
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.w
    dcl_texcoord2 v2.x
    dcl_texcoord4_pp v3.xyz
    dcl_texcoord5 v4.xyz
    dcl_texcoord6 v5.xyz
    dcl_texcoord7 v6.w
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --auto-fix-unreal-dne-reflection --only-autofixed --ignore-parse-errors CRC32_BCE171B1_363.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    nrm_pp r0.xyz, v5
    nrm_pp r1.xyz, v3
    mad_pp r0.xyz, r0.z, c2.xxyw, -r0
    texld_pp r2, c2.zwzw, s0
    dp3 r0.w, v4, v4
    add r1.w, -r0.w, c2.z
    mul r3, r2.x, r1.w
    mov r4, r3
    texkill r4
    mad r1.w, v2.x, c9.x, c9.y
    frc r1.w, r1.w
    mad r1.w, r1.w, c9.z, c9.w
    sincos r4.xy, r1.w
    add r2.yz, -c2.w, v0.xxyw
    mul r3.xy, r4, c10
    dp2add r3.x, r3, r2.yzzw, c2.x
    dp2add r3.y, r4.yxzw, r2.yzzw, c2.x
    add r2.yz, r3.xxyw, c2.w
    texld r4, r2.yzzw, s3
    mad r1.w, v1.w, r4.w, c10.z
    cmp r4, -r3.w, c2.x, r1.w
    texkill r4
    if b0
      mad r2.yz, vPos.xxyw, c7.xxyw, c7.xzww
      mul r3.xy, r2.yzzw, v6.w
      if_ne c3.x, -c3.x
        texld r4, c6, s1
        add r1.w, -r4.y, v6.w
        mad r3.z, r4.x, r1.w, r3.x
        mov r3.xy, r3.zyzw
        mov r1.w, v6.w
      else
        mov r1.w, v6.w
      endif
      rcp r1.w, r1.w
      mul r2.yz, r1.w, r3.xxyw
      mad r2.yz, r2, c1.xxyw, c1.xwzw
      texld r4, r2.yzzw, s2
      mul_pp r2.yzw, r4.xxyz, r4.xxyz
      mul_pp r2.yzw, r2, r2.x
    else
      mov_pp r2.yzw, r2.x
    endif
    mov_sat r0.w, r0.w
    add r0.w, -r0.w, c2.z
    pow_sat_pp r3.x, r0.w, c8.w
    mov r3.y, c2.w
    texld_pp r4, r3, s0
    mov_sat_pp r0.w, r1.z
    add r1.w, r0.w, c10.w
    mul r0.w, r0.w, c0.w
    dp3_sat_pp r0.x, r0, r1
    add r0.y, r0.x, c10.w
    pow_pp r1.x, r0.x, c6.z
    mul r0.x, r1.x, c0.x
    mul r1.xyz, r0.w, c4
    cmp r1.xyz, r1.w, r1, c2.x
    mul_pp r0.xzw, r0.x, c5.xyyz
    cmp_pp r0.xyz, r0.y, r0.xzww, c2.x
    add_pp r0.xyz, r0, r1
    mul_pp r0.xyz, r2.yzww, r0
    mul r0.xyz, r4.x, r0
    mul r0.xyz, r0, c8
    cmp oC0.xyz, -r3.w, c2.x, r0
    mov oC0.w, c2.x

// approximately 86 instruction slots used (5 texture, 81 arithmetic)
