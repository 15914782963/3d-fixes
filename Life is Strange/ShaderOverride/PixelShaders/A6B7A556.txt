//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 CameraWorldPos;
//   float4 DNECubemapPosition;
//   float4 DNEEnvMapParameter;
//   samplerCUBE DNEEnvironmentTexture;
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DebugMode[5];
//   float4 DiffuseOverrideParameter;
//   float4 MinZ_MaxZRatio;
//   sampler2D MipTextureParameter;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4 SpecularOverrideParameter;
//   float4 UniformPixelScalars_1;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float4 UniformPixelVector_2;
//
//
// Registers:
//
//   Name                      Reg   Size
//   ------------------------- ----- ----
//   DNEEnvMapParameter        c0       1
//   ScreenPositionScaleBias   c1       1
//   MinZ_MaxZRatio            c2       1
//   NvStereoEnabled           c3       1
//   DiffuseOverrideParameter  c4       1
//   SpecularOverrideParameter c5       1
//   DebugMode                 c7       5
//   DNEMiscParameter          c12      1
//   DNECubemapPosition        c13      1
//   CameraWorldPos            c14      1
//   DNEResolution             c15      1
//   UniformPixelVector_0      c16      1
//   UniformPixelVector_1      c17      1
//   UniformPixelVector_2      c18      1
//   UniformPixelScalars_1     c19      1
//   SceneColorTexture         s0       1
//   NvStereoFixTexture        s1       1
//   DNEEnvironmentTexture     s2       1
//   PixelTexture2D_0          s3       1
//   PixelTexture2D_1          s4       1
//   PixelTexture2D_2          s5       1
//   MipTextureParameter       s6       1
//

    ps_3_0
    def c6, 9.99999997e-007, 16, -16, 2
    def c20, 1, 0, 0.333332986, 0.666665971
    def c21, 0.360000014, 0.100000016, 0.0399999991, 0.899999976
    def c22, 0.0625, 0.046875, 4, 3
    def c23, 0.5, 2.20000005, -5.55472994, -6.98316002
    def c24, 0.00100000005, -6.9000001, 7, 9.99999975e-006
    def c25, -0.0170000009, -0.330000013, 0.0670000017, 0.330000013
    def c26, -0.0245999992, 0.879999995, 0.100000001, -0.00885600038
    def c27, 0.222450897, 0.716925859, 0.06062451, 0.333333343
    def c28, 7.7870369, 0.137931034, 95, 0
    def c29, 116, -16, -31, 0
    def c30, 0.0625, 0, 100000, -0.330000013
    dcl_color v0.xyz
    dcl_color1 v1
    dcl_texcoord v2.xy
    dcl_texcoord6 v3.xyz
    dcl_texcoord7 v4
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_cube s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_A6B7A556_682.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    nrm r0.xyz, v1
    nrm r1.xyz, v0
    mul_pp r2.xyz, r0.zxyw, r1.yzxw
    mad_pp r2.xyz, r0.yzxw, r1.zxyw, -r2
    mul r2.xyz, r2.yxzw, v1.w
    add r3.xyz, c14, v4
    mad r4.xy, vPos, c15, c15.zwzw
    mul r4.yz, r4.xxyw, v4.w
    nrm_pp r5.xyz, v3
    mad_sat_pp r0.w, c12.x, v4.w, c12.y
    mul_pp r6.xy, c22, v2
    mov_pp r6.zw, c22
    mad_pp r6.zw, v2.xyxy, r6, c17.xyxy
    texld_pp r7, r6.zwzw, s3
    dp2add_pp r1.w, r7, -r7, c20.x
    max_pp r2.w, r1.w, c20.y
    rsq_pp r1.w, r2.w
    rcp_pp r7.z, r1.w
    texld_pp r8, r6, s4
    add_pp r1.w, r8.x, c19.y
    add_pp r8.xyz, r1.w, c20.yzww
    texld_pp r6, r6.zwzw, s5
    add_pp r8.xyz, r6, r8
    frc_pp r8.xyz, r8
    add r8.xyz, -r8, c20.x
    max r9.xyz, c6.x, r8
    mul r8.xyz, r9, r9
    mul_pp r8.xyz, r8, r8
    frc_pp r9.xyz, -r6
    add_sat_pp r6.xyz, r6, r9
    mul_pp r6.xy, r6, r8
    add_pp r1.w, r6.y, r6.x
    mad_sat_pp r1.w, r8.z, r6.z, r1.w
    mad_pp r1.w, r1.w, c6.y, c6.z
    exp_pp r1.w, r1.w
    lrp_pp r6.xyz, r1.w, r7, c20.yyxw
    nrm_pp r7.xyz, r6
    dp3_pp r2.w, r7, r5
    mul_pp r6.xyz, r2.w, r7
    mad_pp r5.xyz, r6, c6.w, -r5
    mad_pp r6.xy, r1.w, c21, c21.zwzw
    mad_pp r8.xyz, r6.x, c5.w, c5
    texld r9, v2, s6
    mad r9, r9.xyzx, c20.xxxy, c20.yyyx
    mul r10, r9, c7.y
    mad r9, c7.x, r9, r10
    mov r10.xy, c20
    add_pp r6.xzw, r10.x, -c16.xyyz
    mul_pp r6.xzw, r6, c18.xyyz
    mad_pp r11.xyz, r6.xzww, c4.w, c4
    mov r11.w, c20.x
    mad r9, c7.z, r11, r9
    mad r12.xyz, r7, c23.x, c23.x
    mov r12.w, c20.x
    mad r9, c7.w, r12, r9
    log r3.w, r6.y
    mul r3.w, r3.w, c23.y
    exp r12.xyz, r3.w
    mov r12.w, c20.x
    mad r9, c8.x, r12, r9
    mov r8.w, c20.x
    mad r9, c8.y, r8, r9
    dp3_pp r12.x, r1, r5
    dp3_pp r12.y, r2.yxzw, r5
    dp3_pp r12.z, r0, r5
    add r3.xyz, r3, -c13
    mad_pp r3.xyz, c0.w, r3, r12
    mad_pp r3.w, c12.z, r6.y, c12.w
    texldl_pp r3, r3, s2
    mov_sat_pp r2.w, r2.w
    max_pp r5.xyz, r6.y, r8
    mad_pp r3.w, r2.w, c23.z, c23.w
    mul_pp r2.w, r2.w, r3.w
    exp_pp r2.w, r2.w
    lrp_pp r6.xyz, r2.w, r5, r8
    mul_pp r3.xyz, r3, r6
    mul_pp r3.xyz, r3, c0
    mul_pp r3.xyz, r0.w, r3
    mad_pp r3.xyz, r1.w, r3, c16
    mov r3.w, c20.x
    mad r3, c8.z, r3, r9
    dp3 r5.x, r1, r7
    dp3 r5.y, r2.yxzw, r7
    dp3 r5.z, r0, r7
    mad r5.xyz, r5, c23.x, c23.x
    mov r5.w, c20.x
    mad r3, c8.w, r5, r3
    mov r2.x, r1.x
    mov r2.z, r0.x
    mad r0.xyz, r2, c23.x, c23.x
    mov r0.w, c20.x
    mad r0, c9.x, r0, r3
    add r0, r0, c9.y
    add r0, r0, c9.z
    mul_sat_pp r1.x, c24.x, v4.w
    mad_pp r1.x, r1.x, c24.y, c24.z
    abs r1.y, c3.x
    if_ne c3.x, -c3.x
      texld r2, c30, s1
      add r1.z, -r2.y, v4.w
      mad r4.x, r2.x, r1.z, r4.y
      mov r4.w, v4.w
      mov r2.xyz, r4.xzww
    else
      mov r2.xyz, c20.y
    endif
    mov r4.w, v4.w
    cmp r2.xyz, -r1.y, r4.yzww, r2
    rcp r1.z, r2.z
    mul r1.zw, r1.z, r2.xyxy
    mad r2.xy, r1.zwzw, c1, c1.wzzw
    mov r2.zw, c20.y
    texldl r2, r2, s0
    add r1.z, r2.w, -c2.y
    add r1.w, -r1.z, c24.w
    rcp r1.z, r1.z
    cmp r1.z, r1.w, c30.z, r1.z
    mad r1.z, c2.x, r1.z, -v4.w
    mul_sat r1.z, r1.z, c21.z
    mul_pp r1.z, r1.z, r1.x
    mul_pp r1.z, r7.x, r1.z
    abs_pp r2.x, r1.z
    if_ne c3.x, -c3.x
      texld r3, c30, s1
      add r1.z, -r3.y, v4.w
      mad r4.x, r3.x, r1.z, r4.y
      mov r3.xyz, r4.xzww
    else
      mov r3.xyz, c20.y
    endif
    cmp r1.yzw, -r1.y, r4, r3.xxyz
    rcp r1.w, r1.w
    mul r1.yz, r1.w, r1
    mad r3.xy, r1.yzzw, c1, c1.wzzw
    mov r3.zw, c20.y
    texldl r3, r3, s0
    add r1.y, r3.w, -c2.y
    add r1.z, -r1.y, c24.w
    rcp r1.y, r1.y
    cmp r1.y, r1.z, c30.z, r1.y
    mad r1.y, c2.x, r1.y, -v4.w
    mul_sat r1.y, r1.y, c21.z
    mul_pp r1.x, r1.y, r1.x
    mul_pp r1.x, r7.y, r1.x
    abs_pp r2.y, r1.x
    mov r2.zw, c20.xyyx
    mad r0, c9.w, r2, r0
    mad r0, c10.x, r10.yyyx, r0
    add r1, r8.xyzx, c25.xxxy
    cmp r1.xw, r1, c20.y, c20.x
    cmp r1.x, r1.y, r1.x, c20.x
    cmp r2.x, r1.z, r1.x, c20.x
    add r3, -r8.xyzx, c25.zzzw
    cmp r1.x, r3.x, c20.y, r1.w
    add r1.yz, r8, c30.w
    cmp r1.yz, r1, -c20.y, -c20.x
    cmp r1.yz, r3, -c20.y, r1
    cmp r1.x, r1.y, r1.x, c20.x
    cmp r2.z, r1.z, r1.x, c20.x
    mov r2.yw, c20.xyzx
    mad r0, c10.y, r2, r0
    add r1.xyz, r11, c26.x
    cmp r1.z, r1.z, c20.y, c20.x
    cmp r1.y, r1.y, c20.y, r1.z
    cmp r1.x, r1.x, c20.y, r1.y
    add r2, -r11.xyzx, c26.yyyz
    cmp r1.yz, r2.xxww, c20.y, c20.x
    cmp r1.y, r2.y, r1.y, c20.x
    cmp r2.z, r2.z, r1.y, c20.x
    add r1.yw, -r8.xyzz, -c30.w
    cmp r1.w, r1.w, c20.y, c20.x
    cmp r1.y, r1.y, c20.y, r1.w
    cmp r1.y, r3.w, c20.y, r1.y
    cmp r2.x, -r1.y, r1.x, c20.y
    mul r1.x, r1.y, r2.x
    add r1.yw, -r11.xyzz, c26.z
    cmp r1.yw, r1, c20.y, c20.x
    add r1.y, r1.y, r1.z
    cmp r1.y, -r1.y, c20.y, c20.x
    add r1.y, r1.w, r1.y
    cmp r1.y, -r1.y, c20.y, c20.x
    cmp r2.y, -r1.x, c20.y, r1.y
    mov r2.w, c20.x
    mad r0, c10.z, r2, r0
    dp3 r1.x, r11, c27
    mad r1.y, r1.x, c28.x, c28.y
    add r1.z, r1.x, c26.w
    pow r2.x, r1.x, c27.w
    cmp r1.x, r1.z, r2.x, r1.y
    mad r1.xy, r1.x, c29.x, c29.yzzw
    add r1.x, -r1.x, c28.z
    cmp r2.xz, r1.yyxw, c20.y, c20.x
    mov r2.yw, c20.xyzx
    mad r0, c10.w, r2, r0
    mad r0, c11.x, r10.yyyx, r0
    mad r0, c11.y, r10.yyyx, r0
    mad r0, c11.z, r10.yyyx, r0
    mad oC0, c11.w, r10.yyyx, r0

// approximately 216 instruction slots used (12 texture, 204 arithmetic)
