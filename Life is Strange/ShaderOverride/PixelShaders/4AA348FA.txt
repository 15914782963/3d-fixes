//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 AmbientColorAndSkyFactor;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   float4 LightColorAndFalloffExponent;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   float4 ScreenDoorFadeSettings;
//   float4 ScreenDoorFadeSettings2;
//   sampler2D ScreenDoorNoiseTexture;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   float3 UpperSkyColor;
//   sampler2D VAOBuffer;
//   float4 WorldIncidentLighting[7];
//   bool bEnableScreenDoorFade;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bEnableScreenDoorFade        b0       1
//   DNESpecularAttenuation       c0       1
//   ScreenPositionScaleBias      c1       1
//   MinZ_MaxZRatio               c2       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   WorldIncidentLighting        c7       7
//   DNEResolution                c14      1
//   ScreenDoorFadeSettings       c15      1
//   ScreenDoorFadeSettings2      c16      1
//   UniformPixelVector_0         c17      1
//   UniformPixelScalars_0        c18      1
//   LightColorAndFalloffExponent c19      1
//   UpperSkyColor                c20      1
//   AmbientColorAndSkyFactor     c21      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   ScreenDoorNoiseTexture       s2       1
//   PixelTexture2D_0             s3       1
//   VAOBuffer                    s4       1
//

    ps_3_0
    def c6, -1.02332771, 1.02332771, 0.858085215, 0.886227608
    def c22, 0.0625, 0, 1, 0.5
    def c23, 0, 2, 1, -3
    def c24, -9.99999997e-007, 15, 0, 0
    def c25, -0.858085215, 0.247708291, 0.429042608, 0.886226952
    dcl_texcoord4 v0.xyz
    dcl_texcoord6 v1.xyz
    dcl_texcoord5 v2.w
    dcl_color v3.xyz
    dcl_color1 v4
    dcl_texcoord v5.xy
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed CRC32_4AA348FA_166.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    nrm_pp r0.xyz, v4
    dp3_pp r0.w, v3, v3
    rsq_pp r0.w, r0.w
    mul_pp r1.xyz, r0.w, v3.yxzw
    mul r2.yz, r0, r1
    mad_pp r0.x, r0.x, r1.x, -r2.y
    mul_pp r1.x, r0.x, v4.w
    mad r0.xy, vPos, c14, c14.zwzw
    mul r3.xy, r0, v2.w
    nrm_pp r4.xyz, v1
    nrm_pp r5.xyz, v0
    mad_pp r0.xyw, r4.z, c23.xxzy, -r4.xyzz
    if b0
      mad r4.xy, vPos, c16.zwzw, c16
      texld_pp r4, r4, s2
      mad r1.w, c15.y, r4.x, c15.z
      mov r4.z, c23.z
      add r4.x, r4.z, -c15.x
      add r4, r1.w, -r4.x
      texkill r4
    endif
    texld r4, v5, s3
    mov r6.xz, c23
    add r7.xyz, r6.z, -c17
    mul_pp r4.xyz, r4, r7
    mad_pp r4.xyz, r4, c4.w, c4
    mul r7.xyz, r4, c20
    mov_pp r1.w, c21.w
    mad_pp r7.xyz, r7, r1.w, c17
    mov_pp r1.y, r0.z
    mul r8.xyz, r1, r1.xyxw
    mul r2.x, r0.z, r1.x
    mad r2.y, r8.y, -c23.w, -c23.z
    mad_pp r2.w, r1.z, r1.z, -r8.x
    mul r1.xyz, r1, c6.xyxw
    mul r1.w, r8.z, c6.z
    mul r2, r2, c25.xyxz
    add_pp r0.z, r6.z, -c18.x
    mul_pp r6.yzw, r0.z, r4.xxyz
    mul_pp r8.xyz, r4, c18.x
    dp4 r0.z, c8, r1
    mov r9.xyz, c7
    mad_pp r0.z, r9.x, c6.w, r0.z
    dp4 r4.w, c9, r2
    add_pp r10.x, r0.z, r4.w
    dp4 r0.z, c10, r1
    mad_pp r0.z, r9.y, c6.w, r0.z
    dp4 r4.w, c11, r2
    add_pp r10.y, r0.z, r4.w
    dp4 r0.z, c12, r1
    mad_pp r0.z, r9.z, c6.w, r0.z
    dp4 r1.x, c13, r2
    add_pp r10.z, r0.z, r1.x
    mul_pp r1.xyz, r6.yzww, r10
    cmp_pp r1.xyz, r10, r1, c23.x
    mul_pp r2.xyz, r9, c25.w
    mul_pp r2.xyz, r2, r8
    cmp_pp r2.xyz, c7, r2, r6.x
    add_pp r1.xyz, r1, r2
    add_pp r1.xyz, r1, r7
    abs r0.z, c3.x
    if_ne c3.x, -c3.x
      texld r2, c22, s1
      add r1.w, -r2.y, v2.w
      mad r3.z, r2.x, r1.w, r3.x
      mov r3.w, v2.w
      mov r2.xyz, r3.zyww
    else
      mov r2.xyz, c23.x
    endif
    mov r3.z, v2.w
    cmp r2.xyz, -r0.z, r3, r2
    rcp r0.z, r2.z
    mul r2.xy, r0.z, r2
    mad r2.xy, r2, c1, c1.wzzw
    texld_pp r2, r2, s4
    texld_pp r3, c22.zwzw, s0
    mov_sat_pp r0.z, r5.z
    add r1.w, r0.z, c24.x
    mul_pp r0.z, r0.z, c0.w
    cmp_pp r0.z, r1.w, r0.z, c23.x
    dp3_sat_pp r0.x, r0.xyww, r5
    add r0.y, r0.x, c24.x
    pow_pp r1.w, r0.x, c24.y
    mul r0.x, r1.w, c0.x
    lrp_pp r1.w, c18.x, c18.x, r0.z
    mul_pp r0.xzw, r0.x, c5.xyyz
    cmp_pp r0.xyz, r0.y, r0.xzww, c23.x
    mad_pp r0.xyz, r4, r1.w, r0
    mul_pp r0.xyz, r3.x, r0
    mul_pp r0.xyz, r0, c19
    mad_pp r0.xyz, r1, r2.x, r0
    mad_pp oC0.xyz, r4, c21, r0
    rcp r0.x, v2.w
    mad oC0.w, c2.x, r0.x, c2.y

// approximately 107 instruction slots used (5 texture, 102 arithmetic)
