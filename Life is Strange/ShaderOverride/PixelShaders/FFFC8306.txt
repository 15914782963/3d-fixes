//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   float2 DistanceFadeParameters;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   sampler2D PixelTexture2D_3;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float TwoSidedSign;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   sampler2D WarpFunctionTexture;
//   bool bEnableDistanceShadowFading;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   bEnableDistanceShadowFading  b1       1
//   TwoSidedSign                 c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNESpecularAttenuation       c7       1
//   DNEMiscParameter             c8       1
//   DNEResolution                c9       1
//   UniformPixelVector_0         c10      1
//   UniformPixelVector_1         c11      1
//   LightColorAndFalloffExponent c12      1
//   DistanceFadeParameters       c13      1
//   ShadowWarpFunctionTexture    s0       1
//   WarpFunctionTexture          s1       1
//   NvStereoFixTexture           s2       1
//   LightAttenuationTexture      s3       1
//   PixelTexture2D_0             s4       1
//   PixelTexture2D_1             s5       1
//   PixelTexture2D_2             s6       1
//   PixelTexture2D_3             s7       1
//

    ps_3_0
    def c2, 2, -1, 1, 0.5
    def c6, 10, 1.52876604, 0.0625, 0
    def c14, 0.600000024, 0.400000006, 0.0299999993, 0.125
    def c15, 0.693147004, 2, 0.0280000009, 0
    def c16, -5.55472994, -6.98316002, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord4_pp v1.xyz
    dcl_texcoord5_pp v2.w
    dcl_texcoord6 v3.xyz
    dcl_texcoord7 v4
    dcl vPos.xy
    dcl vFace
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6
    dcl_2d s7

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed --ignore-parse-errors CRC32_FFFC8306_366.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    dp3_pp r0.x, v3, v3
    rsq_pp r0.x, r0.x
    mad_sat_pp r0.y, c8.x, v4.w, c8.y
    mul_pp r0.y, r0.y, c7.x
    texld_pp r1, v0, s4
    mad_pp r1.xyz, r1, c2.x, c2.y
    nrm_pp r2.xyz, r1
    nrm_pp r1.xyz, v1
    cmp r0.z, vFace, c2.y, c2.z
    mul r0.z, r0.z, c0.x
    mul_pp r2.xyz, r0.z, r2
    mad_pp r0.xzw, v3.xyyz, r0.x, r1.xyyz
    nrm_pp r3.xyz, r0.xzww
    mad_pp r0.x, r1.w, c6.x, c6.y
    exp_pp r0.x, r0.x
    mov_sat_pp r4.x, v2.w
    mov_pp r4.yw, c2.w
    texld_pp r5, r4, s0
    if b0
      mad r0.zw, vPos.xyxy, c9.xyxy, c9
      mul r6.xy, r0.zwzw, v4.w
      if_ne c3.x, -c3.x
        texld r7, c6.zwzw, s2
        add r0.z, -r7.y, v4.w
        mad r6.z, r7.x, r0.z, r6.x
        mov r6.xy, r6.zyzw
        mov r0.z, v4.w
      else
        mov r0.z, v4.w
      endif
      rcp r0.z, r0.z
      mul r0.zw, r0.z, r6.xyxy
      mad r0.zw, r0, c1.xyxy, c1.xywz
      texld r6, r0.zwzw, s3
      mul_pp r5.yzw, r6.xxyz, r6.xxyz
      if b1
        dp3 r0.z, v4, v4
        rsq r0.z, r0.z
        rcp r0.z, r0.z
        add r0.z, -r0.z, c13.x
        mul_sat_pp r0.z, r0.z, c13.y
        mul_pp r0.z, r0.z, r0.z
        mad_pp r0.w, r6.w, r6.w, -r5.x
        mad_pp r6.xyz, r0.z, r0.w, r5.x
      else
        mov_pp r6.xyz, r5.x
      endif
      mul_pp r5.yzw, r5, r6.xxyz
    else
      mov_pp r5.yzw, r5.x
    endif
    texld_pp r6, v0, s6
    mad_pp r6.xyz, r6, c5.w, c5
    texld_pp r7, v0, s5
    mov r8.yz, c2
    add_pp r8.xzw, r8.z, -c10.xyyz
    mul_pp r7.xyz, r7, r8.xzww
    mad_pp r7.xyz, r7, c4.w, c4
    texld_pp r9, v0, s7
    dp3_sat_pp r4.z, r2, r1
    texld_pp r10, r4.zwzw, s1
    mov_sat_pp r0.z, r1.z
    lrp_pp r11.xy, c14, r0.z, r10.x
    add_pp r0.z, r11.x, c14.z
    add r0.w, -r11.y, r0.z
    cmp_pp r11.z, r0.w, r11.y, r0.z
    lrp_pp r4.xyw, r9.z, r11.xzzz, r10.x
    mul_pp r4.xyw, r4, c7.w
    mov_sat_pp r0.z, c7.y
    mul_pp r0.z, r0.z, r0.z
    mul_pp r0.x, r0.x, r0.z
    dp3_sat_pp r0.z, r2, r3
    mad_pp r0.w, r0.x, c15.x, c15.y
    mul_pp r0.w, r0.w, c14.w
    mad r0.x, r0.x, r0.z, -r0.x
    exp_pp r0.x, r0.x
    mul_pp r0.x, r0.x, r0.w
    mul_pp r0.x, r4.z, r0.x
    mul_pp r0.x, r0.y, r0.x
    lrp_pp r0.yzw, r9.z, c15.z, r6.xxyz
    add r1.w, r8.y, c11.x
    mad_pp r1.w, r9.z, r1.w, c2.z
    mul_pp r0.x, r0.x, r1.w
    dp3_sat_pp r1.x, r1, r3
    mad_pp r1.y, r1.x, c16.x, c16.y
    mul_pp r1.x, r1.x, r1.y
    exp_pp r1.x, r1.x
    lrp_pp r2.xyz, r1.x, c2.z, r0.yzww
    mul_pp r0.xyz, r0.x, r2
    mad_pp r0.xyz, r7, r4.xyww, r0
    mul_pp r0.xyz, r5.yzww, r0
    mul oC0.xyz, r0, c12
    mov oC0.w, c6.w

// approximately 105 instruction slots used (8 texture, 97 arithmetic)
