//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 CameraWorldPos;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float2 SpotAngles;
//   float3 SpotDirection;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelScalars_1;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float4 UniformPixelVector_2;
//   float4 UniformPixelVector_3;
//   float4 UniformPixelVector_4;
//   float4 UniformPixelVector_5;
//   float4 WindDirectionAndSpeed;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   DNESpecularAttenuation       c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   CameraWorldPos               c7       1
//   DNEResolution                c8       1
//   WindDirectionAndSpeed        c9       1
//   UniformPixelVector_0         c10      1
//   UniformPixelVector_1         c11      1
//   UniformPixelVector_2         c12      1
//   UniformPixelVector_3         c13      1
//   UniformPixelVector_4         c14      1
//   UniformPixelVector_5         c15      1
//   UniformPixelScalars_0        c16      1
//   UniformPixelScalars_1        c17      1
//   LightColorAndFalloffExponent c18      1
//   SpotDirection                c19      1
//   SpotAngles                   c20      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//   PixelTexture2D_1             s4       1
//

    ps_3_0
    def c2, -0.649999976, 0.5, 0.0625, 0
    def c6, 1.75, 0.875, 1, 0.100000001
    def c21, -9.99999997e-007, 15, 0, 0
    def c22, 0, 2, 0.100000001, 1.89999998
    dcl_texcoord v0.xy
    dcl_texcoord4_pp v1.xyz
    dcl_texcoord5_pp v2
    dcl_texcoord6 v3.xyz
    dcl_texcoord7 v4
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed --ignore-parse-errors CRC32_8721EBC7_166.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    add r0.xyz, c7, v4
    nrm_pp r1.xyz, v3
    nrm_pp r2.xyz, v1
    mad_pp r1.xyz, r1.z, c22.xxyw, -r1
    mad r0.xy, r0.z, c12, r0
    rcp r0.z, c16.x
    mul r3.xy, r0.z, r0
    mov r4.xyw, c9
    mul r3.zw, r4.xyxy, c16.w
    mul r3.zw, r3, c22.z
    frc r3.zw, r3
    mad r0.xy, r0, r0.z, r3.zwzw
    texld_pp r0, r0, s3
    mad r0.zw, r3.xyxy, c22.w, r3
    texld_pp r3, r0.zwzw, s3
    add_sat r0.xy, r0, r3
    mul r0.xy, r0, c17.x
    mad_sat r0.xy, r4.w, r0, c17.y
    mul r0.zw, c13.xyxy, v0.xyxy
    mov r3.xy, c13
    mad r3.xy, v0, r3, c14
    texld_pp r3, r3, s3
    mov r4.xyz, c6
    mad r0.zw, r0, r4.xyxy, c15.xyxy
    texld_pp r5, r0.zwzw, s3
    add r0.zw, r3.xyxy, r5.xyxy
    mul r0.xy, r0.zwzw, r0
    mad r0.xy, r0, c6.zwzw, v0
    texld r0, r0, s4
    add r3, r0.w, c2.x
    texkill r3
    dp3 r0.w, v2, v2
    rsq r1.w, r0.w
    mul r3.xyz, r1.w, v2
    dp3 r1.w, r3, -c19
    add r1.w, r1.w, -c20.x
    mul_sat r1.w, r1.w, c20.y
    mul_pp r3.z, r1.w, r1.w
    mov_sat_pp r3.x, v2.w
    mov r3.yw, c2.y
    texld_pp r5, r3, s0
    texld_pp r3, r3.zwzw, s0
    add r1.w, -r0.w, c6.z
    mul r1.w, r5.x, r1.w
    mul r6, r3.x, r1.w
    mov r7, r6
    texkill r7
    if b0
      mad r3.yz, vPos.xxyw, c8.xxyw, c8.xzww
      mul r6.xy, r3.yzzw, v4.w
      if_ne c3.x, -c3.x
        texld r7, c2.zwzw, s1
        add r1.w, -r7.y, v4.w
        mad r6.z, r7.x, r1.w, r6.x
        mov r6.xy, r6.zyzw
        mov r1.w, v4.w
      else
        mov r1.w, v4.w
      endif
      rcp r1.w, r1.w
      mul r3.yz, r1.w, r6.xxyw
      mad r3.yz, r3, c1.xxyw, c1.xwzw
      texld r7, r3.yzzw, s2
      mul_pp r3.yzw, r7.xxyz, r7.xxyz
      mul_pp r3.yzw, r3, r5.x
    else
      mov_pp r3.yzw, r5.x
    endif
    mov_sat r0.w, r0.w
    add r0.w, -r0.w, c6.z
    pow_sat_pp r4.x, r0.w, c18.w
    mov r4.y, c2.y
    texld_pp r5, r4, s0
    mul r0.xyz, r0, c11
    add r4.xyz, r4.z, -c10
    mul_pp r0.xyz, r0, r4
    mad_pp r0.xyz, r0, c4.w, c4
    mov_sat_pp r0.w, r2.z
    add r1.w, r0.w, c21.x
    mul r0.w, r0.w, c0.w
    dp3_sat_pp r1.x, r1, r2
    add r1.y, r1.x, c21.x
    pow_pp r2.x, r1.x, c21.y
    mul r1.x, r2.x, c0.x
    mul r0.xyz, r0.w, r0
    cmp r0.xyz, r1.w, r0, c22.x
    mul_pp r1.xzw, r1.x, c5.xyyz
    cmp_pp r1.xyz, r1.y, r1.xzww, c22.x
    add_pp r0.xyz, r0, r1
    mul_pp r0.xyz, r3.yzww, r0
    mul r0.xyz, r0, c18
    mul r0.xyz, r5.x, r0
    mul r0.xyz, r3.x, r0
    cmp oC0.xyz, -r6.w, c22.x, r0
    mov oC0.w, c22.x

// approximately 107 instruction slots used (10 texture, 97 arithmetic)
