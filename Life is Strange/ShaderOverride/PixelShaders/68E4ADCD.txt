//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   sampler2D PixelTexture2D_3;
//   sampler2D PixelTexture2D_4;
//   sampler2D PixelTexture2D_5;
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4 UniformPixelScalars_2;
//   float4 UniformPixelScalars_3;
//   float4 UniformPixelScalars_4;
//   float4 UniformPixelScalars_5;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float4 UniformPixelVector_2;
//   float4 UniformPixelVector_3;
//   float4 UniformPixelVector_5;
//   float4 UniformPixelVector_6;
//   float4 UniformPixelVector_7;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   DNEResolution           c0       1
//   ScreenPositionScaleBias c1       1
//   MinZ_MaxZRatio          c2       1
//   NvStereoEnabled         c3       1
//   UniformPixelVector_0    c7       1
//   UniformPixelVector_1    c8       1
//   UniformPixelVector_2    c9       1
//   UniformPixelVector_3    c10      1
//   UniformPixelVector_5    c11      1
//   UniformPixelVector_6    c12      1
//   UniformPixelVector_7    c13      1
//   UniformPixelScalars_2   c14      1
//   UniformPixelScalars_3   c15      1
//   UniformPixelScalars_4   c16      1
//   UniformPixelScalars_5   c17      1
//   SceneColorTexture       s0       1
//   NvStereoFixTexture      s1       1
//   PixelTexture2D_0        s2       1
//   PixelTexture2D_1        s3       1
//   PixelTexture2D_2        s4       1
//   PixelTexture2D_3        s5       1
//   PixelTexture2D_4        s6       1
//   PixelTexture2D_5        s7       1
//

    ps_3_0
    def c4, 0.600000024, -0.5, 10, 4
    def c5, 6, 3, 2, 1
    def c6, -0.774999976, 7, 3, 0.0500000007
    def c18, 0.0625, 0, 9.99999975e-006, 100000
    def c19, 0.0133333337, 9.99999997e-007, 0.0208350997, -0.0851330012
    def c20, 0.300000012, 0.589999974, 0.109999999, 0.180141002
    def c21, -0.330299497, 0.999866009, 0, 1
    def c22, -2, 1.57079637, -0, -3.14159274
    def c23, 0.159154937, 0.5, 1, 0
    def c24, 0.599999964, 0.400000006, 0, 0
    dcl_texcoord4 v0
    dcl_texcoord6 v1.xyz
    dcl_texcoord5 v2
    dcl_texcoord v3.xy
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6
    dcl_2d s7

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-lights --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_68E4ADCD_476.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    mad r0.xy, vPos, c0, c0.zwzw
    mul r0.yz, r0.xxyw, v2.w
    dp3_pp r1.x, v1, v1
    rsq_pp r1.x, r1.x
    mul_pp r1.xy, r1.x, v1
    rcp r1.z, v2.w
    mul r1.zw, r0.xyyz, r1.z
    mad r1.zw, r1, c1.xyxy, c1.xywz
    texld r2, r1.zwzw, s0
    mul r1.zw, c5.xyxy, v3.xyxy
    mov r3.zw, c5
    mad r3.xy, v3, r3.zwzw, c8
    texld r3, r3, s2
    mad r2.w, r3.y, c4.x, c4.y
    mov r3.zw, c4
    mad r3.xy, v3, r3.zwzw, c9
    mad r3.xy, r1, c6.x, r3
    texld_pp r3, r3, s3
    mov r4.yz, c6
    mad r3.zw, v3.xyxy, r4.xyyz, c10.xyxy
    mad r1.xy, r1, c6.x, r3.zwzw
    texld_pp r4, r1, s3
    add r1.xy, r3, r4
    mad r1.xy, r1, c6.w, r1.zwzw
    texld r1, r1, s4
    add r1.x, r1.y, r2.w
    abs r1.y, c3.x
    if_ne c3.x, -c3.x
      texld r3, c18, s1
      add r1.z, -r3.y, v2.w
      mad r0.x, r3.x, r1.z, r0.y
      mov r0.w, v2.w
      mov r3.xyz, r0.xzww
    else
      mov r3.xyz, c18.y
    endif
    mov r0.w, v2.w
    cmp r3.xyz, -r1.y, r0.yzww, r3
    rcp r1.z, r3.z
    mul r1.zw, r1.z, r3.xyxy
    mad r3.xy, r1.zwzw, c1, c1.wzzw
    mov r3.zw, c18.y
    texldl r3, r3, s0
    add r1.z, r3.w, -c2.y
    add r1.w, -r1.z, c18.z
    rcp r1.z, r1.z
    cmp r1.z, r1.w, c18.w, r1.z
    mad r1.z, c2.x, r1.z, -v2.w
    mul_sat r1.z, r1.z, c19.x
    mad r1.x, r1.x, -r1.z, c5.w
    texld r3, r1.x, s5
    mul_sat r1.x, r3.z, r3.y
    mul r1.xzw, r2.xyyz, r1.x
    max r2.xyz, r1_abs.xzww, c19.y
    log r3.x, r2.x
    log r3.y, r2.y
    log r3.z, r2.z
    mul r1.xzw, r3.xyyz, c14.y
    exp r2.x, r1.x
    exp r2.y, r1.z
    exp r2.z, r1.w
    add r1.xzw, r2.xyyz, c14.z
    texld r3, c11, s6
    mul r3.xy, r3.yzzw, c15.w
    lrp r2.w, r3.y, c16.x, c16.y
    rcp r2.w, r2.w
    mul r3.yzw, r1.xxzw, r2.w
    dp3 r4.x, r3.yzww, c20
    mad r1.xzw, r1, -r2.w, r4.x
    mad r1.xzw, c16.z, r1, r3.yyzw
    if_ne c3.x, -c3.x
      texld r4, c18, s1
      add r2.w, -r4.y, v2.w
      mad r0.x, r4.x, r2.w, r0.y
      mov r3.yzw, r0.xxzw
    else
      mov r3.yzw, c18.y
    endif
    cmp r3.yzw, -r1.y, r0, r3
    rcp r0.x, r3.w
    mul r3.yz, r0.x, r3
    mad r4.xy, r3.yzzw, c1, c1.wzzw
    mov r4.zw, c18.y
    texldl r4, r4, s0
    add r0.x, r4.w, -c2.y
    add r2.w, -r0.x, c18.z
    rcp r0.x, r0.x
    cmp r0.x, r2.w, c18.w, r0.x
    add r2.w, -c16.w, v2.w
    mad r0.x, c2.x, r0.x, -r2.w
    lrp r4.x, r3.x, c17.x, c17.y
    rcp r3.x, r4.x
    mul_sat r0.x, r0.x, r3.x
    dp3 r3.y, v2, v2
    rsq r3.y, r3.y
    mul r3.zw, r3.y, v2.xyxy
    add r4.xy, -r3_abs.zwzw, r3_abs.wzzw
    cmp r4.xz, r4.x, r3_abs.zyww, r3_abs.wyzw
    rcp r4.z, r4.z
    mul r4.x, r4.z, r4.x
    mul r4.z, r4.x, r4.x
    mad r4.w, r4.z, c19.z, c19.w
    mad r4.w, r4.z, r4.w, c20.w
    mad r4.w, r4.z, r4.w, c21.x
    mad r4.z, r4.z, r4.w, c21.y
    mul r4.x, r4.z, r4.x
    cmp r4.y, r4.y, c21.z, c21.w
    mad r4.z, r4.x, c22.x, c22.y
    mad r4.x, r4.z, r4.y, r4.x
    cmp r4.y, r3.z, c22.z, c22.w
    add r4.x, r4.y, r4.x
    mad r4.y, v2.y, r3.y, -r3.z
    cmp r3.zw, r4.y, r3, r3.xywz
    cmp r3.w, r3.w, c21.w, c21.z
    cmp r3.z, r3.z, c18.y, r3.w
    add r3.w, r4.x, r4.x
    mad r3.z, r3.z, -r3.w, r4.x
    mad r4.x, r3.z, c23.x, c23.y
    mad r3.y, v2.z, r3.y, c5.w
    mad r4.y, r3.y, -c23.y, c23.z
    mul r3.yz, r4.xxyw, c5
    texld r4, r3.yzzw, s7
    mad r3.y, r4.x, c24.x, c24.y
    mul r0.x, r0.x, r3.y
    mad r1.xzw, r1, c12.xyyz, -r2.xyyz
    mad_sat r1.xzw, r0.x, r1, r2.xyyz
    max r2.xyz, r1.xzww, c19.y
    log r4.x, r2.x
    log r4.y, r2.y
    log r4.z, r2.z
    mul r1.xzw, r4.xyyz, c13.xyyz
    exp r2.x, r1.x
    exp r2.y, r1.z
    exp r2.z, r1.w
    add_pp r1.xzw, r2.xyyz, c7.xyyz
    if_ne c3.x, -c3.x
      texld r4, c18, s1
      add r0.x, -r4.y, v2.w
      mad r2.x, r4.x, r0.x, r0.y
      mov r2.yz, r0.xzww
    else
      mov r2.xyz, c18.y
    endif
    cmp r0.xyz, -r1.y, r0.yzww, r2
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    mov r0.zw, c18.y
    texldl r0, r0, s0
    add r0.x, r0.w, -c2.y
    add r0.y, -r0.x, c18.z
    rcp r0.x, r0.x
    cmp r0.x, r0.y, c18.w, r0.x
    mad r0.x, c2.x, r0.x, -r2.w
    mul_sat r0.x, r3.x, r0.x
    mul r0.x, r3.y, r0.x
    frc r0.y, -r0.x
    add r0, r0.y, r0.x
    texkill r0
    mov_sat_pp oC0.w, r0.w
    mad_pp oC0.xyz, r1.xzww, v0.w, v0

// approximately 170 instruction slots used (17 texture, 153 arithmetic)
