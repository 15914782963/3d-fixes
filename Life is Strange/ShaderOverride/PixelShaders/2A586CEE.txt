//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 CameraWorldPos;
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_2;
//   sampler2D PixelTexture2D_3;
//   sampler2D PixelTexture2D_4;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float TwoSidedSign;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelScalars_1;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float4 UniformPixelVector_2;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   TwoSidedSign                 c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNESpecularAttenuation       c7       1
//   DNEMiscParameter             c8       1
//   CameraWorldPos               c9       1
//   DNEResolution                c10      1
//   UniformPixelVector_0         c11      1
//   UniformPixelVector_1         c12      1
//   UniformPixelVector_2         c13      1
//   UniformPixelScalars_0        c14      1
//   UniformPixelScalars_1        c15      1
//   LightColorAndFalloffExponent c16      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//   PixelTexture2D_2             s4       1
//   PixelTexture2D_3             s5       1
//   PixelTexture2D_4             s6       1
//

    ps_3_0
    def c2, 0.00390599994, 0.0625, 1, 0
    def c6, 19, 0.25, -1, 1
    def c17, 6, 12, 9.99999997e-007, -0.330000013
    def c18, 0, 0.333332986, 0.666665971, 0.0399999991
    def c19, 10, 1.52876604, 1, 0.5
    def c20, -0.375, 0.625, 0.693147004, 2
    def c21, 0.125, -5.55472994, -6.98316002, 0
    dcl_color v0.xyz
    dcl_color1 v1
    dcl_texcoord v2.xy
    dcl_texcoord4_pp v3.xyz
    dcl_texcoord5 v4.xyz
    dcl_texcoord6 v5.xyz
    dcl_texcoord7 v6
    dcl vPos.xy
    dcl vFace
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_2A586CEE_641.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    nrm_pp r0.xyz, v1
    nrm_pp r1.xyz, v0
    mul_pp r0.y, r0.y, r1.x
    mad_pp r0.x, r0.x, r1.y, -r0.y
    mul_pp r0.x, r0.x, v1.w
    add r1.xyw, c9.xyzz, v6.xyzz
    dp3_pp r0.y, v5, v5
    rsq_pp r0.y, r0.y
    mad_sat_pp r0.w, c8.x, v6.w, c8.y
    mul_pp r0.w, r0.w, c7.x
    mov_pp r2.xyz, c2
    mad_pp r2.xyw, r1, r2.xxzy, c12.xyzz
    texld_pp r3, r2.ywzw, s3
    dp2add_pp r1.x, r3, -r3, c2.z
    max_pp r3.w, r1.x, c2.w
    rsq_pp r1.x, r3.w
    rcp_pp r3.z, r1.x
    mov_pp r1.x, r1.z
    texld_pp r4, r2.xwzw, s3
    dp2add_pp r1.y, r4, -r4, c2.z
    max_pp r2.w, r1.y, c2.w
    rsq_pp r1.y, r2.w
    rcp_pp r4.z, r1.y
    mul_pp r4.xyz, r0_abs.x, r4
    mad_pp r1.xyz, r1_abs.x, r3, r4
    texld_pp r3, r2, s3
    dp2add_pp r0.x, r3, -r3, c2.z
    max_pp r2.x, r0.x, c2.w
    rsq_pp r0.x, r2.x
    rcp_pp r3.z, r0.x
    mad_pp r1.xyz, r0_abs.z, r3, r1
    add_pp r0.x, r1.w, c6.x
    abs_sat_pp r0.z, r0.x
    add_pp r0.z, -r0.z, c2.z
    mul_pp r0.z, r0.z, c6.y
    lrp_pp r2.xyw, r0.z, r1.xyzz, c2.wwzz
    nrm_pp r1.xyz, r2.xyww
    nrm_pp r3.xyz, v3
    cmp r0.z, vFace, c6.z, c6.w
    mul r0.z, r0.z, c0.x
    mul_pp r1.xyz, r0.z, r1
    mad_pp r2.xyw, v5.xyzz, r0.y, r3.xyzz
    nrm_pp r4.xyz, r2.xyww
    mul_pp r0.yz, c17.xxyw, v2.xxyw
    texld_pp r5, r0.yzzw, s4
    add_pp r2.xyw, r5.xyzz, c18.xyzz
    frc_pp r2.xyw, r2
    add r2.xyw, -r2, c2.z
    max r6.xyz, c17.z, r2.xyww
    mul_pp r2.xyw, r6.xyzz, r6.xyzz
    frc_pp r6.xyz, -r5
    add_sat_pp r5.xyz, r5, r6
    mul_pp r0.yz, r2.xxyw, r5.xxyw
    add_pp r0.y, r0.z, r0.y
    mad_pp r0.y, r2.w, r5.z, r0.y
    mul_sat_pp r0.y, r0.y, c14.y
    lrp_pp r1.w, r0.y, c13.y, c13.x
    mov_sat_pp r0.x, r0.x
    lrp_pp r2.x, r0.x, r1.w, c15.x
    mad_pp r0.y, r2.x, c19.x, c19.y
    exp_pp r0.y, r0.y
    texld_pp r5, c19.zwzw, s0
    dp3 r0.z, v4, v4
    add r1.w, -r0.z, c2.z
    mul r6, r5.x, r1.w
    mov r7, r6
    texkill r7
    texld_pp r7, v2, s5
    add_pp r1.w, r7.w, c17.w
    cmp_pp r8, -r6.w, c2.w, r1.w
    texkill r8
    if b0
      mad r2.xy, vPos, c10, c10.zwzw
      mul r6.xy, r2, v6.w
      if_ne c3.x, -c3.x
        texld r8, c2.ywzw, s1
        add r1.w, -r8.y, v6.w
        mad r6.z, r8.x, r1.w, r6.x
        mov r6.xy, r6.zyzw
        mov r1.w, v6.w
      else
        mov r1.w, v6.w
      endif
      rcp r1.w, r1.w
      mul r2.xy, r1.w, r6
      mad r2.xy, r2, c1, c1.wzzw
      texld r8, r2, s2
      mul_pp r2.xyw, r8.xyzz, r8.xyzz
      mul_pp r2.xyw, r2, r5.x
    else
      mov_pp r2.xyw, r5.x
    endif
    texld_pp r5, v2, s6
    mul_pp r6.xyz, r5, c14.w
    mov r1.w, c14.w
    mad r5.xyz, r1.w, -r5, c18.w
    mad_pp r5.xyz, r0.x, r5, r6
    mad_pp r5.xyz, r5, c5.w, c5
    mov_sat r0.z, r0.z
    add r0.z, -r0.z, c2.z
    pow_sat_pp r6.x, r0.z, c16.w
    mov r6.y, c19.w
    texld_pp r8, r6, s0
    mul r6.xyz, r0.x, r7
    mul r6.xyz, r6, c20.x
    mad_pp r6.xyz, r7, c20.y, r6
    add_pp r7.xyz, r2.z, -c11
    mul_pp r6.xyz, r6, r7
    mad_pp r6.xyz, r6, c4.w, c4
    dp3_sat_pp r0.x, r1, r3
    mul_pp r0.z, r0.x, c7.w
    mul_sat_pp r1.w, r8.x, c7.y
    mul_pp r1.w, r1.w, r1.w
    mul_pp r0.y, r0.y, r1.w
    dp3_sat_pp r1.x, r1, r4
    mad_pp r1.y, r0.y, c20.z, c20.w
    mul_pp r1.y, r1.y, c21.x
    mad r0.y, r0.y, r1.x, -r0.y
    exp_pp r0.y, r0.y
    mul_pp r0.y, r0.y, r1.y
    mul_pp r0.x, r0.x, r0.y
    mul_pp r0.x, r0.w, r0.x
    dp3_sat_pp r0.y, r3, r4
    mad_pp r0.w, r0.y, c21.y, c21.z
    mul_pp r0.y, r0.y, r0.w
    exp_pp r0.y, r0.y
    lrp_pp r1.xyz, r0.y, c2.z, r5
    mul_pp r0.xyw, r0.x, r1.xyzz
    mad_pp r0.xyz, r6, r0.z, r0.xyww
    mul_pp r0.xyz, r2.xyww, r0
    mul r0.xyz, r8.x, r0
    mul r0.xyz, r0, c16
    cmp oC0.xyz, -r6.w, c2.w, r0
    mov oC0.w, c2.w

// approximately 153 instruction slots used (10 texture, 143 arithmetic)
