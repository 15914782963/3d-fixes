//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   float2 DistanceFadeParameters;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   sampler2D PixelTexture2D_3;
//   sampler2D PixelTexture2D_4;
//   sampler2D PixelTexture2D_5;
//   sampler2D PixelTexture2D_6;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float TwoSidedSign;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float4 UniformPixelVector_2;
//   sampler2D WarpFunctionTexture;
//   bool bEnableDistanceShadowFading;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   bEnableDistanceShadowFading  b1       1
//   TwoSidedSign                 c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNESpecularAttenuation       c7       1
//   DNEMiscParameter             c8       1
//   DNEResolution                c9       1
//   UniformPixelVector_0         c10      1
//   UniformPixelVector_1         c11      1
//   UniformPixelVector_2         c12      1
//   UniformPixelScalars_0        c13      1
//   LightColorAndFalloffExponent c14      1
//   DistanceFadeParameters       c15      1
//   ShadowWarpFunctionTexture    s0       1
//   WarpFunctionTexture          s1       1
//   NvStereoFixTexture           s2       1
//   LightAttenuationTexture      s3       1
//   PixelTexture2D_0             s4       1
//   PixelTexture2D_1             s5       1
//   PixelTexture2D_2             s6       1
//   PixelTexture2D_3             s7       1
//   PixelTexture2D_4             s8       1
//   PixelTexture2D_5             s9       1
//   PixelTexture2D_6             s10      1
//

    ps_3_0
    def c2, 2, -1, 5, 15
    def c6, 0, 0.333332986, 0.666665971, 9.99999997e-007
    def c16, 0, -0, -1, -0.100000001
    def c17, -2, 4, 0.5, 0.0500000007
    def c18, 10, 1.52876604, 1, 0.5
    def c19, 0.0625, 0, 0.0700000003, 0.0299999993
    def c20, -0.099999994, 0.800000012, 0.600000024, 0.400000006
    def c21, 0.693147004, 2, 0.125, 0.0280000009
    def c22, -5.55472994, -6.98316002, 0, 0
    def c23, -1, 1, -0.949999988, 2089.24487
    dcl_color1 v0.xyz
    dcl_texcoord v1.xy
    dcl_texcoord4_pp v2.xyz
    dcl_texcoord6 v3.xyz
    dcl_texcoord7 v4
    dcl vPos.xy
    dcl vFace
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6
    dcl_2d s7
    dcl_2d s8
    dcl_2d s9
    dcl_2d s10

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed CRC32_4B2EEC76_0.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    dp3_pp r0.x, v0, v0
    rsq_pp r0.x, r0.x
    dp3_pp r0.y, v3, v3
    rsq_pp r0.y, r0.y
    mad_sat_pp r0.z, c8.x, v4.w, c8.y
    mul_pp r0.z, r0.z, c7.x
    texld_pp r1, v1, s4
    mad_pp r1.xyz, r1, c2.x, c2.y
    mul_pp r2.xy, c2.zwzw, v1
    texld_pp r3, r2, s5
    dp2add_pp r0.w, r3, -r3, -c2.y
    max_pp r1.w, r0.w, c16.x
    rsq_pp r0.w, r1.w
    rcp_pp r3.z, r0.w
    lrp_pp r4.xyz, -c16.w, r3, -c16.yyzw
    mov r3.xy, c13
    mad_pp r3.xyz, r3.y, r3.x, c6
    texld_pp r2, r2, s6
    add_pp r3.xyz, r2, r3
    frc_pp r3.xyz, r3
    add r3.xyz, -r3, -c2.y
    texld_pp r5, v1, s7
    mad_pp r0.w, r5.z, c17.x, c17.y
    max r5.xyw, c6.w, r3.xyzz
    log r3.x, r5.x
    log r3.y, r5.y
    log r3.z, r5.w
    mul r3.xyz, r0.w, r3
    exp_pp r5.x, r3.x
    exp_pp r5.y, r3.y
    exp_pp r0.w, r3.z
    frc_pp r3.xyz, -r2
    add_sat_pp r2.xyz, r2, r3
    mul_pp r2.xy, r2, r5
    add_pp r1.w, r2.y, r2.x
    mad_pp r0.w, r0.w, r2.z, r1.w
    mad_pp r0.x, v0.z, r0.x, -c2.y
    mul_pp r0.x, r0.w, r0.x
    mul_pp r0.w, r0.x, c17.z
    add_pp r2.xyz, -r1, r4
    mul_pp r2.xyz, r0.w, r2
    texld_pp r3, v1, s8
    mul_pp r1.w, r3.y, c13.z
    mad_pp r2.xyz, r1.w, r2, r1
    nrm_pp r3.xyz, r2
    nrm_pp r2.xyz, v2
    cmp r1.y, vFace, c23.x, c23.y
    mul r1.y, r1.y, c0.x
    mul_pp r3.xyz, r1.y, r3
    mad_pp r4.xyz, v3, r0.y, r2
    nrm_pp r6.xyz, r4
    lrp_pp r4.xy, r1.x, c11.ywzw, c11.xzzw
    lrp_pp r0.y, r5.z, r4.y, r4.x
    lrp_pp r1.y, r0.w, -c2.y, r0.y
    lrp_pp r0.y, r1.w, r1.y, r1.x
    max_pp r1.x, r0.y, c17.w
    add r0.y, r1.x, c23.z
    mad r1.x, r1.x, c18.x, c18.y
    exp_pp r1.x, r1.x
    cmp_pp r0.y, r0.y, c23.w, r1.x
    texld_pp r4, c18.zwzw, s0
    if b0
      mad r1.xy, vPos, c9, c9.zwzw
      mul r1.xy, r1, v4.w
      if_ne c3.x, -c3.x
        texld r7, c19, s2
        add r2.w, -r7.y, v4.w
        mad r1.z, r7.x, r2.w, r1.x
        mov r1.xy, r1.zyzw
        mov r1.z, v4.w
      else
        mov r1.z, v4.w
      endif
      rcp r1.z, r1.z
      mul r1.xy, r1.z, r1
      mad r1.xy, r1, c1, c1.wzzw
      texld r7, r1, s3
      mul_pp r1.xyz, r7, r7
      if b1
        dp3 r2.w, v4, v4
        rsq r2.w, r2.w
        rcp r2.w, r2.w
        add r2.w, -r2.w, c15.x
        mul_sat_pp r2.w, r2.w, c15.y
        mul_pp r2.w, r2.w, r2.w
        mad_pp r3.w, r7.w, r7.w, -r4.x
        mad_pp r4.yzw, r2.w, r3.w, r4.x
      else
        mov_pp r4.yzw, r4.x
      endif
      mul_pp r1.xyz, r1, r4.yzww
    else
      mov_pp r1.xyz, r4.x
    endif
    texld_pp r4, v1, s10
    mul_pp r0.w, r0.w, r1.w
    lrp_pp r5.xyw, r0.w, c19.z, r4.xyzz
    mad_pp r4.xyz, r5.xyww, c5.w, c5
    texld_pp r7, v1, s9
    mul_pp r5.xyw, r7.xyzz, r7.xyzz
    mad_pp r0.x, r0.x, c20.x, c20.y
    mul_pp r8.xyz, r5.xyww, r0.x
    mad r5.xyw, r0.x, -r5, r7.xyzz
    mad_pp r5.xyw, r5.z, r5, r8.xyzz
    lrp_pp r8.xyz, r1.w, r5.xyww, r7
    mov_pp r5.y, c2.y
    add_pp r7.xyz, -r5.y, -c10
    mul_pp r7.xyz, r7, r8
    mad_pp r7.xyz, r7, c4.w, c4
    dp3_sat_pp r8.x, r3, r2
    mov_pp r8.y, c17.z
    texld_pp r9, r8, s1
    mov_sat_pp r0.x, r2.z
    lrp_pp r10.xy, c20.zwzw, r0.x, r9.x
    add_pp r0.x, r10.x, c19.w
    add r0.w, -r10.y, r0.x
    cmp_pp r10.z, r0.w, r10.y, r0.x
    lrp_pp r8.yzw, r5.z, r10.xxzz, r9.x
    mul_pp r8.yzw, r8, c7.w
    mov_sat_pp r0.x, c7.y
    mul_pp r0.x, r0.x, r0.x
    mul_pp r0.x, r0.y, r0.x
    dp3_sat_pp r0.y, r3, r6
    mad_pp r0.w, r0.x, c21.x, c21.y
    mul_pp r0.w, r0.w, c21.z
    mad r0.x, r0.x, r0.y, -r0.x
    exp_pp r0.x, r0.x
    mul_pp r0.x, r0.x, r0.w
    mul_pp r0.x, r8.x, r0.x
    mul_pp r0.x, r0.z, r0.x
    lrp_pp r0.yzw, r5.z, c21.w, r4.xxyz
    add r1.w, r5.y, c12.x
    mad_pp r1.w, r5.z, r1.w, -c2.y
    mul_pp r0.x, r0.x, r1.w
    dp3_sat_pp r1.w, r2, r6
    mad_pp r2.x, r1.w, c22.x, c22.y
    mul_pp r1.w, r1.w, r2.x
    exp_pp r1.w, r1.w
    lrp_pp r2.xyz, r1.w, -c2.y, r0.yzww
    mul_pp r0.xyz, r0.x, r2
    mad_pp r0.xyz, r7, r8.yzww, r0
    mul_pp r0.xyz, r1, r0
    mul oC0.xyz, r0, c14
    mov_pp oC0.w, c16.x

// approximately 157 instruction slots used (11 texture, 146 arithmetic)
