//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 CameraWorldPos;
//   float4 DNEResolution;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelScalars_1;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float4 UniformPixelVector_2;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   CameraWorldPos          c0       1
//   ScreenPositionScaleBias c1       1
//   MinZ_MaxZRatio          c2       1
//   NvStereoEnabled         c3       1
//   DNEResolution           c7       1
//   UniformPixelVector_0    c8       1
//   UniformPixelVector_1    c9       1
//   UniformPixelVector_2    c10      1
//   UniformPixelScalars_0   c11      1
//   UniformPixelScalars_1   c12      1
//   SceneColorTexture       s0       1
//   NvStereoFixTexture      s1       1
//   PixelTexture2D_0        s2       1
//

    ps_3_0
    def c4, 9.99999997e-007, 0.300000012, 0.589999974, 0.109999999
    def c5, 0.0625, 0, 9.99999975e-006, 100000
    def c6, 0.000976999989, 2, 1, 0
    dcl_texcoord4 v0
    dcl_texcoord7_pp v1.x
    dcl_texcoord5 v2
    dcl_color v3.xyz
    dcl_color1 v4
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-lights --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_616DC1A2_433.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    nrm_pp r0.xyz, v4
    nrm_pp r1.xyz, v3
    mul_pp r0.y, r0.y, r1.x
    mad_pp r0.x, r0.x, r1.y, -r0.y
    mul_pp r0.x, r0.x, v4.w
    add r1.xyw, c0.xyzz, v2.xyzz
    mad r0.yw, vPos.xxzy, c7.xxzy, c7.xzzw
    mul r2.yz, r0.xyww, v2.w
    rcp r0.y, v2.w
    mul r0.yw, r0.y, r2.xyzz
    mad r0.yw, r0, c1.xxzy, c1.xwzz
    texld r3, r0.ywzw, s0
    max r4.xyz, r3_abs, c4.x
    log r3.x, r4.x
    log r3.y, r4.y
    log r3.z, r4.z
    mul r3.xyz, r3, c11.x
    exp r4.x, r3.x
    exp r4.y, r3.y
    exp r4.z, r3.z
    add r3.xyz, r4, c11.y
    rcp r0.y, c11.z
    mul r5.xyz, r0.y, r3
    dp3 r0.w, r5, c4.yzww
    mad r3.xyz, r3, -r0.y, r0.w
    mad r3.xyz, c11.w, r3, r5
    mul r1.xyw, r1, c6.x
    texld r5, r1.ywzw, s2
    mov_pp r0.y, r1.z
    texld r6, r1.xwzw, s2
    mul r0.x, r0_abs.x, r6.y
    mad r0.x, r0_abs.y, r5.y, r0.x
    texld r1, r1, s2
    mad r0.x, r0_abs.z, r1.y, r0.x
    mad r0.x, r0.x, c6.y, c6.z
    add r0.y, -c4.x, v1_abs.x
    pow r1.x, v1_abs.x, r0.x
    cmp r0.x, r0.y, r1.x, c6.w
    abs r0.y, c3.x
    if_ne c3.x, -c3.x
      texld r1, c5, s1
      add r0.z, -r1.y, v2.w
      mad r2.x, r1.x, r0.z, r2.y
      mov r2.w, v2.w
      mov r1.xyz, r2.xzww
    else
      mov r1.xyz, c6.w
    endif
    mov r2.w, v2.w
    cmp r1.xyz, -r0.y, r2.yzww, r1
    rcp r0.z, r1.z
    mul r0.zw, r0.z, r1.xyxy
    mad r1.xy, r0.zwzw, c1, c1.wzzw
    mov r1.zw, c6.w
    texldl r1, r1, s0
    add r0.z, r1.w, -c2.y
    add r0.w, -r0.z, c5.z
    rcp r0.z, r0.z
    cmp r0.z, r0.w, c5.w, r0.z
    add r0.w, -c12.x, v2.w
    mad r0.z, c2.x, r0.z, -r0.w
    rcp r1.x, c12.y
    mul_sat r0.z, r0.z, r1.x
    mul r1.y, r0.z, r0.x
    mad r0.z, r0.x, r0.z, -c4.x
    pow r3.w, r1.y, c12.z
    cmp r0.z, r0.z, r3.w, c6.w
    mad r1.yzw, r3.xxyz, c9.xxyz, -r4.xxyz
    mad_sat r1.yzw, r0.z, r1, r4.xxyz
    max r3.xyz, r1.yzww, c4.x
    log r4.x, r3.x
    log r4.y, r3.y
    log r4.z, r3.z
    mul r1.yzw, r4.xxyz, c10.xxyz
    exp r3.x, r1.y
    exp r3.y, r1.z
    exp r3.z, r1.w
    add_pp r1.yzw, r3.xxyz, c8.xxyz
    if_ne c3.x, -c3.x
      texld r3, c5, s1
      add r0.z, -r3.y, v2.w
      mad r2.x, r3.x, r0.z, r2.y
      mov r3.xyz, r2.xzww
    else
      mov r3.xyz, c6.w
    endif
    cmp r2.xyz, -r0.y, r2.yzww, r3
    rcp r0.y, r2.z
    mul r0.yz, r0.y, r2.xxyw
    mad r2.xy, r0.yzzw, c1, c1.wzzw
    mov r2.zw, c6.w
    texldl r2, r2, s0
    add r0.y, r2.w, -c2.y
    add r0.z, -r0.y, c5.z
    rcp r0.y, r0.y
    cmp r0.y, r0.z, c5.w, r0.y
    mad r0.y, c2.x, r0.y, -r0.w
    mul_sat r0.y, r1.x, r0.y
    mul r0.z, r0.y, r0.x
    mad r0.x, r0.x, r0.y, -c4.x
    pow r1.x, r0.z, c12.z
    cmp r0.x, r0.x, r1.x, c6.w
    frc r0.y, -r0.x
    add_pp oC0.w, r0.y, r0.x
    mad_pp oC0.xyz, r1.yzww, v0.w, v0

// approximately 121 instruction slots used (10 texture, 111 arithmetic)
