//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4 UniformPixelScalars_1;
//   float4 UniformPixelScalars_2;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_2;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   DNEResolution           c0       1
//   ScreenPositionScaleBias c1       1
//   MinZ_MaxZRatio          c2       1
//   NvStereoEnabled         c3       1
//   UniformPixelVector_0    c7       1
//   UniformPixelVector_2    c8       1
//   UniformPixelScalars_1   c9       1
//   UniformPixelScalars_2   c10      1
//   SceneColorTexture       s0       1
//   NvStereoFixTexture      s1       1
//   PixelTexture2D_0        s2       1
//   PixelTexture2D_1        s3       1
//

    ps_3_0
    def c4, 0.0065919999, -64, 1, 2
    def c5, 0.200000003, -1, 10, 0.333332986
    def c6, 9.99999997e-007, 0.454544991, 0.0625, 0
    def c11, 0.0625, 1, 16, 0
    def c12, 2.20000005, 0.300000012, 0.589999974, 0.109999999
    def c13, 9.99999975e-006, 100000, 0.020833334, 0
    dcl_texcoord4 v0
    dcl_texcoord5 v1
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-lights --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_4BE332DE_359.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    mad r0.xy, vPos, c0, c0.zwzw
    mul r0.xy, r0, v1.w
    rcp r1.x, v1.w
    mul r1.xy, r0, r1.x
    mad r1.xy, r1, c1, c1.wzzw
    texld r2, c8, s2
    mov r3.x, c4.x
    mul r1.z, r3.x, c9.y
    dp3 r1.w, v1, v1
    rsq r1.w, r1.w
    rcp r1.w, r1.w
    add r1.w, r1.w, c4.y
    rcp r2.z, c9.z
    mul_sat r1.w, r1.w, r2.z
    add r1.w, -r1.w, c4.z
    mul r1.z, r1.z, r1.w
    mul r2.zw, r2.xyxy, r1.z
    mad r3.xy, r2.zwzw, c4.w, r1
    texld_pp r3, r3, s0
    mad r4.xy, r1.z, r2, r1
    texld_pp r4, r4, s0
    add r3.yzw, r3.xxyz, r4.xxyz
    texld_pp r5, r1, s0
    add r3.yzw, r3, r5.xxyz
    mad r2.xy, r1.z, -r2, r1
    texld_pp r6, r2, s0
    add r3.yzw, r3, r6.xxyz
    mad r1.xy, r2.zwzw, -c4.w, r1
    texld_pp r2, r1, s0
    add r1.xyz, r2, r3.yzww
    mad_sat r1.xyz, r1, c5.x, c5.y
    mul_sat r1.xyz, r1, c5.z
    mov_pp r3.z, r3.x
    mov_pp r3.w, r4.x
    mov_pp r3.x, r5.x
    mov_pp r3.y, r6.x
    add r2.yzw, r3.xwxy, r3.xzwx
    mov_pp r3.z, r2.x
    add r2.xyz, r2.yzww, r3
    mul_sat r2.xyz, r2, c5.w
    max r3.xyz, r2, c6.x
    log r2.x, r3.x
    log r2.y, r3.y
    log r2.z, r3.z
    mul r2.xyz, r2, c6.y
    exp r3.x, r2.x
    exp r3.y, r2.y
    exp r3.z, r2.z
    mul r2.xyz, r3, c11
    frc r2.w, r2.z
    add r2.z, -r2.w, r2.z
    mul r3.zw, r2.z, c6
    mad r3.xy, r3, c11, r3.zwzw
    mov r3.zw, c6.w
    texldl r3, r3, s3
    mad r2.z, r2.z, c6.z, c6.z
    mad r4.xy, r2.z, c11.ywzw, r2
    mov r4.zw, c6.w
    texldl r4, r4, s3
    lrp r5.xyz, r2.w, r4, r3
    max r2.xyz, r5_abs, c6.x
    log r3.x, r2.x
    log r3.y, r2.y
    log r3.z, r2.z
    mul r2.xyz, r3, c12.x
    exp r3.x, r2.x
    exp r3.y, r2.y
    exp r3.z, r2.z
    dp3 r2.x, r3, c12.yzww
    lrp r2.y, r1.w, c10.x, c10.y
    lrp r4.xyz, r2.y, r2.x, r3
    mad r1.xyz, c9.w, r1, r4
    add_pp r1.xyz, r1, c7
    abs r1.w, c3.x
    if_ne c3.x, -c3.x
      texld r2, c6.zwzw, s1
      add r2.y, -r2.y, v1.w
      mad r0.z, r2.x, r2.y, r0.x
      mov r0.w, v1.w
      mov r2.xyz, r0.zyww
    else
      mov r2.xyz, c6.w
    endif
    mov r0.z, v1.w
    cmp r0.xyz, -r1.w, r0, r2
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    mov r0.zw, c6.w
    texldl r0, r0, s0
    add r0.x, r0.w, -c2.y
    add r0.y, -r0.x, c13.x
    rcp r0.x, r0.x
    cmp r0.x, r0.y, c13.y, r0.x
    mad r0.x, c2.x, r0.x, -v1.w
    mul_sat_pp oC0.w, r0.x, c13.z
    mad_pp oC0.xyz, r1, v0.w, v0

// approximately 102 instruction slots used (13 texture, 89 arithmetic)
