//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float2 SpotAngles;
//   float3 SpotDirection;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   DNESpecularAttenuation       c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNEMiscParameter             c7       1
//   DNEResolution                c8       1
//   UniformPixelVector_0         c9       1
//   UniformPixelVector_1         c10      1
//   UniformPixelScalars_0        c11      1
//   LightColorAndFalloffExponent c12      1
//   SpotDirection                c13      1
//   SpotAngles                   c14      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//   PixelTexture2D_1             s4       1
//   PixelTexture2D_2             s5       1
//

    ps_3_0
    def c2, 2, -1, 10, 1.52876604
    def c6, 0.125, -0.5, 1, 0.5
    def c15, 0.0625, 0, 0.693147004, 2
    def c16, 0.300000012, 0.589999974, 0.109999999, 0
    def c17, -5.55472994, -6.98316002, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord4_pp v1.xyz
    dcl_texcoord5 v2.xyz
    dcl_texcoord6 v3.xyz
    dcl_texcoord7 v4.w
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed --ignore-parse-errors CRC32_D6D98727_0.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    mad r0.xy, vPos, c8, c8.zwzw
    mul r0.xy, r0, v4.w
    dp3_pp r0.w, v3, v3
    rsq_pp r0.w, r0.w
    mad_sat_pp r1.x, c7.x, v4.w, c7.y
    mul_pp r1.x, r1.x, c0.x
    texld_pp r2, v0, s3
    mad_pp r1.yzw, r2.xxyz, c2.x, c2.y
    nrm_pp r2.xyz, r1.yzww
    nrm_pp r3.xyz, v1
    mad_pp r1.yzw, v3.xxyz, r0.w, r3.xxyz
    nrm_pp r4.xyz, r1.yzww
    mad_pp r0.w, r2.w, c2.z, c2.w
    exp_pp r0.w, r0.w
    rcp r1.y, v4.w
    mul r1.yz, r0.xxyw, r1.y
    mad_pp r1.yz, r1, c1.xxyw, c1.xwzw
    dsx_pp r1.w, r1.y
    dsy_pp r2.w, r1.z
    rcp r5.x, r1.w
    rcp r5.y, r2.w
    mul_pp r1.yz, r1, r5.xxyw
    mul_pp r1.yz, r1, c6.x
    texld_pp r5, r1.yzzw, s5
    add_pp r1.y, -r5.y, c11.w
    frc_pp r1.z, -r1.y
    add_sat_pp r1.y, r1.z, r1.y
    add_pp r5, r1.y, c6.y
    texkill r5
    dp3 r1.y, v2, v2
    rsq r1.z, r1.y
    mul r5.xyz, r1.z, v2
    dp3 r1.z, r5, -c13
    add r1.z, r1.z, -c14.x
    mul_sat r1.z, r1.z, c14.y
    mul_pp r5.x, r1.z, r1.z
    texld_pp r6, c6.zwzw, s0
    mov r5.yw, c6.w
    texld_pp r7, r5, s0
    add r1.z, -r1.y, -c2.y
    mul r1.z, r6.x, r1.z
    mul r8, r7.x, r1.z
    mov r9, r8
    texkill r9
    if b0
      if_ne c3.x, -c3.x
        texld r9, c15, s1
        add r1.z, -r9.y, v4.w
        mad r0.z, r9.x, r1.z, r0.x
        mov r0.xy, r0.zyzw
        mov r0.z, v4.w
      else
        mov r0.z, v4.w
      endif
      rcp r0.z, r0.z
      mul r0.xy, r0.z, r0
      mad r0.xy, r0, c1, c1.wzzw
      texld r9, r0, s2
      mul_pp r0.xyz, r9, r9
      mul_pp r0.xyz, r0, r6.x
    else
      mov_pp r0.xyz, r6.x
    endif
    mov_sat r1.y, r1.y
    add r1.y, -r1.y, -c2.y
    pow_sat_pp r5.z, r1.y, c12.w
    texld_pp r5, r5.zwzw, s0
    texld_pp r6, v0, s4
    dp3_pp r1.y, r6, c16
    lrp_pp r5.yzw, c11.z, r1.y, r6.xxyz
    mul_pp r1.yzw, r5, c10.xxyz
    mov r5.y, c2.y
    add_pp r6.xyz, -r5.y, -c9
    mul_pp r1.yzw, r1, r6.xxyz
    mad_pp r1.yzw, r1, c4.w, c4.xxyz
    mul_pp r2.w, r7.x, r5.x
    dp3_sat_pp r3.w, r2, r3
    mul_pp r4.w, r3.w, c0.w
    mul_sat_pp r2.w, r2.w, c0.y
    mul_pp r2.w, r2.w, r2.w
    mul_pp r0.w, r0.w, r2.w
    dp3_sat_pp r2.x, r2, r4
    mad_pp r2.y, r0.w, c15.z, c15.w
    mul_pp r2.y, r2.y, c6.x
    mad r0.w, r0.w, r2.x, -r0.w
    exp_pp r0.w, r0.w
    mul_pp r0.w, r0.w, r2.y
    mul_pp r0.w, r3.w, r0.w
    mul_pp r0.w, r1.x, r0.w
    dp3_sat_pp r1.x, r3, r4
    mad_pp r2.x, r1.x, c17.x, c17.y
    mul_pp r1.x, r1.x, r2.x
    exp_pp r1.x, r1.x
    lrp_pp r2.xyz, r1.x, -r5.y, c5
    mul_pp r2.xyz, r0.w, r2
    mad_pp r1.xyz, r1.yzww, r4.w, r2
    mul_pp r0.xyz, r0, r1
    mul r0.xyz, r0, c12
    mul r0.xyz, r5.x, r0
    mul r0.xyz, r7.x, r0
    cmp oC0.xyz, -r8.w, c15.y, r0
    mov oC0.w, c15.y

// approximately 116 instruction slots used (8 texture, 108 arithmetic)
