//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   float3 DistanceFieldParameters;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   float4 ScreenDoorFadeSettings;
//   float4 ScreenDoorFadeSettings2;
//   sampler2D ScreenDoorNoiseTexture;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowTexture;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   bool bEnableScreenDoorFade;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bEnableScreenDoorFade        b0       1
//   bReceiveDynamicShadows       b1       1
//   DNESpecularAttenuation       c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNEMiscParameter             c7       1
//   DNEResolution                c8       1
//   ScreenDoorFadeSettings       c9       1
//   ScreenDoorFadeSettings2      c10      1
//   UniformPixelVector_0         c11      1
//   UniformPixelVector_1         c12      1
//   LightColorAndFalloffExponent c13      1
//   DistanceFieldParameters      c14      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   ScreenDoorNoiseTexture       s3       1
//   PixelTexture2D_0             s4       1
//   PixelTexture2D_1             s5       1
//   PixelTexture2D_2             s6       1
//   ShadowTexture                s7       1
//

    ps_3_0
    def c2, -1, 1, 10, 1.52876604
    def c6, 0.5, 0, 0.0625, -0.0199999996
    def c15, 0.693147004, 2, 0.125, 0
    def c16, -5.55472994, -6.98316002, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_texcoord3_pp v2.w
    dcl_texcoord4_pp v3.xyz
    dcl_texcoord5 v4.xyz
    dcl_texcoord6 v5.xyz
    dcl_texcoord7 v6.w
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6
    dcl_2d s7

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-lights --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_D18446B6_533.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    dp3_pp r0.x, v5, v5
    rsq_pp r0.x, r0.x
    mad_sat_pp r0.y, c7.x, v6.w, c7.y
    mul_pp r0.y, r0.y, c0.x
    nrm_pp r1.xyz, v3
    mad_pp r0.xzw, v5.xyyz, r0.x, r1.xyyz
    nrm_pp r2.xyz, r0.xzww
    texld_pp r3, v1, s6
    add r0.x, r3.w, c2.x
    mad_pp r0.x, v2.w, r0.x, c2.y
    mad_pp r0.x, r0.x, c2.z, c2.w
    exp_pp r0.x, r0.x
    texld_pp r3, v0, s7
    add r0.z, r3.x, c14.x
    mul_sat_pp r0.z, r0.z, c14.y
    pow_sat_pp r3.x, r0.z, c14.z
    mov r3.yw, c6.x
    texld_pp r4, r3, s0
    dp3 r0.z, v4, v4
    add r0.w, -r0.z, c2.y
    mul r5, r4.x, r0.w
    mov r6, r5
    texkill r6
    if b0
      mad r3.xy, vPos, c10.zwzw, c10
      texld_pp r6, r3, s3
      mad r0.w, c9.y, r6.x, c9.z
      mov r3.y, c2.y
      add r1.w, r3.y, -c9.x
      add r0.w, r0.w, -r1.w
      cmp r6, -r5.w, c6.y, r0.w
      texkill r6
    endif
    if b1
      mad r3.xy, vPos, c8, c8.zwzw
      mul r5.xy, r3, v6.w
      if_ne c3.x, -c3.x
        texld r6, c6.zyzw, s1
        add r0.w, -r6.y, v6.w
        mad r5.z, r6.x, r0.w, r5.x
        mov r5.xy, r5.zyzw
        mov r0.w, v6.w
      else
        mov r0.w, v6.w
      endif
      rcp r0.w, r0.w
      mul r3.xy, r0.w, r5
      mad r3.xy, r3, c1, c1.wzzw
      texld r6, r3, s2
      mul_pp r4.yzw, r6.xxyz, r6.xxyz
      mul_pp r4.yzw, r4, r4.x
    else
      mov_pp r4.yzw, r4.x
    endif
    texld_pp r6, v1, s5
    lrp_pp r5.xyz, v2.w, r6, -c6.w
    mad_pp r5.xyz, r5, c5.w, c5
    mov_sat r0.z, r0.z
    add r0.z, -r0.z, c2.y
    pow_sat_pp r3.z, r0.z, c13.w
    texld_pp r3, r3.zwzw, s0
    max_pp r0.z, v2.w, c12.y
    max_pp r1.w, r0.z, c6.x
    texld_pp r6, v1, s4
    mul_pp r3.yzw, r1.w, r6.xxyz
    mov r6.y, c2.y
    add_pp r6.xyz, r6.y, -c11
    mul_pp r3.yzw, r3, r6.xxyz
    mad_pp r3.yzw, r3, c4.w, c4.xxyz
    mov_sat_pp r0.z, r1.z
    mul_pp r0.w, r0.z, c0.w
    mul_sat_pp r1.w, r3.x, c0.y
    mul_pp r1.w, r1.w, r1.w
    mul_pp r0.x, r0.x, r1.w
    mov_sat_pp r1.w, r2.z
    mad_pp r2.w, r0.x, c15.x, c15.y
    mul_pp r2.w, r2.w, c15.z
    mad r0.x, r0.x, r1.w, -r0.x
    exp_pp r0.x, r0.x
    mul_pp r0.x, r0.x, r2.w
    mul_pp r0.x, r0.z, r0.x
    mul_pp r0.x, r0.y, r0.x
    dp3_sat_pp r0.y, r1, r2
    mad_pp r0.z, r0.y, c16.x, c16.y
    mul_pp r0.y, r0.y, r0.z
    exp_pp r0.y, r0.y
    lrp_pp r1.xyz, r0.y, c2.y, r5
    mul_pp r0.xyz, r0.x, r1
    mad_pp r0.xyz, r3.yzww, r0.w, r0
    mul_pp r0.xyz, r4.yzww, r0
    mul r0.xyz, r3.x, r0
    mul r0.xyz, r0, c13
    cmp oC0.xyz, -r5.w, c6.y, r0
    mov oC0.w, c6.y

// approximately 108 instruction slots used (9 texture, 99 arithmetic)
