//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   DNEResolution           c0       1
//   ScreenPositionScaleBias c1       1
//   MinZ_MaxZRatio          c2       1
//   NvStereoEnabled         c3       1
//   UniformPixelVector_0    c7       1
//   UniformPixelVector_1    c8       1
//   SceneColorTexture       s0       1
//   NvStereoFixTexture      s1       1
//

    ps_3_0
    def c4, 0.0625, 0, 9.99999975e-006, 100000
    def c5, 0.00195299997, 1, -1, 4
    def c6, -9.99999997e-007, 2.20000005, -12, 0.00390599994
    def c9, 0.00571428565, 0, 0, 0
    dcl_texcoord4 v0
    dcl_texcoord6 v1.xyz
    dcl_texcoord5 v2.w
    dcl_texcoord v3.y
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_218C6C1A_223.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    mad r0.xy, vPos, c0, c0.zwzw
    mul r0.yz, r0.xxyw, v2.w
    dp3_pp r1.x, v1, v1
    rsq_pp r1.x, r1.x
    mul_pp r1.x, r1.x, v1.z
    abs r1.y, c3.x
    if_ne c3.x, -c3.x
      texld r2, c4, s1
      add r1.z, -r2.y, v2.w
      mad r0.x, r2.x, r1.z, r0.y
      mov r0.w, v2.w
      mov r2.xyz, r0.xzww
    else
      mov r2.xyz, c4.y
    endif
    mov r0.w, v2.w
    cmp r2.xyz, -r1.y, r0.yzww, r2
    rcp r1.z, r2.z
    mul r1.zw, r1.z, r2.xyxy
    mad r2.xy, r1.zwzw, c1, c1.wzzw
    mov r2.zw, c4.y
    texldl r2, r2, s0
    add r1.z, r2.w, -c2.y
    add r1.w, -r1.z, c4.z
    rcp r1.z, r1.z
    cmp r1.z, r1.w, c4.w, r1.z
    mad r1.z, c2.x, r1.z, -v2.w
    mul_sat r1.z, r1.z, c5.x
    add r1.z, -r1.z, c5.y
    mov r2.z, c5.z
    add r2.xyz, r2.z, c8
    mad r2.xyz, r1.z, r2, c5.y
    rcp r1.z, v2.w
    mul r1.zw, r0.xyyz, r1.z
    mad r1.zw, r1, c1.xyxy, c1.xywz
    texld r3, r1.zwzw, s0
    add r3.xyz, r3, c8.w
    mad_pp r2.xyz, r2, r3, c7
    add_sat r1.z, c5.y, -v3.y
    mul r1.z, r1.z, v3.y
    mul r1.z, r1.z, c5.w
    add r1.w, r1_abs.z, c6.x
    pow r2.w, r1_abs.z, c6.y
    cmp r1.z, r1.w, r2.w, c4.y
    add r1.w, r1_abs.x, c6.x
    pow r2.w, r1_abs.x, c6.y
    add r1.x, c6.z, v2.w
    mul_sat r1.x, r1.x, c6.w
    mul r1.x, r1.x, r2.w
    cmp r1.x, r1.w, r1.x, c4.y
    mul r1.x, r1.x, r1.z
    if_ne c3.x, -c3.x
      texld r3, c4, s1
      add r1.z, -r3.y, v2.w
      mad r0.x, r3.x, r1.z, r0.y
      mov r3.xyz, r0.xzww
    else
      mov r3.xyz, c4.y
    endif
    cmp r0.xyz, -r1.y, r0.yzww, r3
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    mov r0.zw, c4.y
    texldl r0, r0, s0
    add r0.x, r0.w, -c2.y
    add r0.y, -r0.x, c4.z
    rcp r0.x, r0.x
    cmp r0.x, r0.y, c4.w, r0.x
    mad r0.x, c2.x, r0.x, -v2.w
    mul_sat r0.x, r0.x, c9.x
    mul_pp oC0.w, r0.x, r1.x
    mad_pp oC0.xyz, r2, v0.w, v0

// approximately 83 instruction slots used (7 texture, 76 arithmetic)
