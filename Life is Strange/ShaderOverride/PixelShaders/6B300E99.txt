//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 CameraWorldPos;
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   sampler2D PixelTexture2D_3;
//   sampler2D PixelTexture2D_4;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   DNESpecularAttenuation       c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNEMiscParameter             c7       1
//   CameraWorldPos               c8       1
//   DNEResolution                c9       1
//   UniformPixelVector_0         c10      1
//   UniformPixelVector_1         c11      1
//   UniformPixelScalars_0        c12      1
//   LightColorAndFalloffExponent c13      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//   PixelTexture2D_1             s4       1
//   PixelTexture2D_2             s5       1
//   PixelTexture2D_3             s6       1
//   PixelTexture2D_4             s7       1
//

    ps_3_0
    def c2, 2, -1, 0.0108695654, 0.0217391308
    def c6, 0, 0.333332986, 0.666665971, 9.99999997e-007
    def c14, 10, 1.52876604, 0.5, 0.200000003
    def c15, 0.0625, 0, 0.693147004, 2
    def c16, 0.125, -5.55472994, -6.98316002, 0
    dcl_color1 v0.xyz
    dcl_texcoord v1.xy
    dcl_texcoord3_pp v2.w
    dcl_texcoord4_pp v3.xyz
    dcl_texcoord5_pp v4
    dcl_texcoord6 v5.xyz
    dcl_texcoord7 v6.xyw
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6
    dcl_2d s7

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-lights --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_6B300E99_242.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    dp3_pp r0.x, v0, v0
    rsq_pp r0.x, r0.x
    mul_sat_pp r0.x, r0.x, v0.z
    add r0.yz, c8.xxyw, v6.xxyw
    dp3_pp r0.w, v5, v5
    rsq_pp r0.w, r0.w
    mad_sat_pp r1.x, c7.x, v6.w, c7.y
    mul_pp r1.x, r1.x, c0.x
    texld_pp r2, v1, s3
    mad_pp r1.yzw, r2.xxyz, c2.x, c2.y
    nrm_pp r2.xyz, r1.yzww
    nrm_pp r3.xyz, v3
    mad_pp r1.yzw, v5.xxyz, r0.w, r3.xxyz
    nrm_pp r4.xyz, r1.yzww
    mov r5.xyz, c6
    add_pp r1.yzw, r5.xxyz, c12.y
    mul_pp r0.yz, r0, c2.xzww
    texld_pp r5, r0.yzzw, s7
    add_pp r0.yzw, r1, r5.xxyz
    frc_pp r0.yzw, r0
    add r0.yzw, -r0, -c2.y
    max r1.yzw, c6.w, r0
    mul r0.yzw, r1, r1
    mul_pp r0.yzw, r0, r1
    frc_pp r1.yzw, -r5.xxyz
    add_sat_pp r1.yzw, r1, r5.xxyz
    mul_pp r0.yz, r0, r1
    add_pp r0.y, r0.z, r0.y
    mad_sat_pp r0.y, r0.w, r1.w, r0.y
    lrp_pp r1.y, r0.y, c12.z, c12.w
    mul_pp r0.x, r0.x, r1.y
    mul_pp r0.x, r0.x, v2.w
    lrp_pp r1.y, r0.x, -c2.y, r2.w
    mad_pp r0.y, r1.y, c14.x, c14.y
    exp_pp r0.y, r0.y
    mov_sat_pp r5.x, v4.w
    mov r5.yw, c14.z
    texld_pp r6, r5, s0
    dp3 r0.z, v4, v4
    add r0.w, -r0.z, -c2.y
    mul r7, r6.x, r0.w
    mov r8, r7
    texkill r8
    if b0
      mad r1.yz, vPos.xxyw, c9.xxyw, c9.xzww
      mul r7.xy, r1.yzzw, v6.w
      if_ne c3.x, -c3.x
        texld r8, c15, s1
        add r0.w, -r8.y, v6.w
        mad r7.z, r8.x, r0.w, r7.x
        mov r7.xy, r7.zyzw
        mov r0.w, v6.w
      else
        mov r0.w, v6.w
      endif
      rcp r0.w, r0.w
      mul r1.yz, r0.w, r7.xxyw
      mad r1.yz, r1, c1.xxyw, c1.xwzw
      texld r8, r1.yzzw, s2
      mul_pp r1.yzw, r8.xxyz, r8.xxyz
      mul_pp r1.yzw, r1, r6.x
    else
      mov_pp r1.yzw, r6.x
    endif
    texld_pp r6, v1, s6
    lrp_pp r7.xyz, r0.x, c14.w, r6
    mad_pp r6.xyz, r7, c5.w, c5
    mov_sat r0.z, r0.z
    add r0.x, -r0.z, -c2.y
    pow_sat_pp r5.z, r0.x, c13.w
    texld_pp r5, r5.zwzw, s0
    texld_pp r8, v1, s4
    texld_pp r9, v1, s5
    mad r0.xzw, r8.xyyz, c11.xyyz, -r8.xyyz
    mad_pp r0.xzw, r9.z, r0, r8.xyyz
    mov r5.y, c2.y
    add_pp r5.yzw, -r5.y, -c10.xxyz
    mul_pp r0.xzw, r0, r5.yyzw
    mad_pp r0.xzw, r0, c4.w, c4.xyyz
    dp3_sat_pp r2.w, r2, r3
    mul_pp r3.w, r2.w, c0.w
    mul_sat_pp r4.w, r5.x, c0.y
    mul_pp r4.w, r4.w, r4.w
    mul_pp r0.y, r0.y, r4.w
    dp3_sat_pp r2.x, r2, r4
    mad_pp r2.y, r0.y, c15.z, c15.w
    mul_pp r2.y, r2.y, c16.x
    mad r0.y, r0.y, r2.x, -r0.y
    exp_pp r0.y, r0.y
    mul_pp r0.y, r0.y, r2.y
    mul_pp r0.y, r2.w, r0.y
    mul_pp r0.y, r1.x, r0.y
    dp3_sat_pp r1.x, r3, r4
    mad_pp r2.x, r1.x, c16.y, c16.z
    mul_pp r1.x, r1.x, r2.x
    exp_pp r1.x, r1.x
    lrp_pp r2.xyz, r1.x, -c2.y, r6
    mul_pp r2.xyz, r0.y, r2
    mad_pp r0.xyz, r0.xzww, r3.w, r2
    mul_pp r0.xyz, r1.yzww, r0
    mul r0.xyz, r5.x, r0
    mul r0.xyz, r0, c13
    cmp oC0.xyz, -r7.w, c6.x, r0
    mov oC0.w, c6.x

// approximately 116 instruction slots used (9 texture, 107 arithmetic)
