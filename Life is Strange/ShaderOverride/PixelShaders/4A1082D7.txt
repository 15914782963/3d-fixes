//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D SceneColorTexture;
//   float4 ScreenPositionScaleBias;
//   float4 UniformPixelVector_0;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   DNEResolution           c0       1
//   ScreenPositionScaleBias c1       1
//   MinZ_MaxZRatio          c2       1
//   NvStereoEnabled         c3       1
//   UniformPixelVector_0    c7       1
//   SceneColorTexture       s0       1
//   NvStereoFixTexture      s1       1
//

    ps_3_0
    def c4, -0.5, 0, 4, 1
    def c5, 0.0625, 0, 9.99999975e-006, 100000
    def c6, 0.0199999996, 0.00499999989, 5, 0
    dcl_texcoord4 v0.w
    dcl_texcoord5 v1.w
    dcl_texcoord v2.xy
    dcl_texcoord1 v3
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed CRC32_4A1082D7_366.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    mad r0.xy, vPos, c0, c0.zwzw
    mul r0.yz, r0.xxyw, v1.w
    rcp r1.x, v1.w
    mul r1.xy, r0.yzzw, r1.x
    mad r1.xy, r1, c1, c1.wzzw
    texld r1, r1, s0
    mad r1.xyz, r1, v3, v3.w
    add r2.xy, c4.x, v2
    dp2add r1.w, r2, r2, c4.y
    mul_sat r1.w, r1.w, c4.z
    add r1.w, -r1.w, c4.w
    mul r2.x, r1.w, r1.w
    mul r1.w, r1.w, r2.x
    abs r2.x, c3.x
    if_ne c3.x, -c3.x
      texld r3, c5, s1
      add r2.y, -r3.y, v1.w
      mad r0.x, r3.x, r2.y, r0.y
      mov r0.w, v1.w
      mov r2.yzw, r0.xxzw
    else
      mov r2.yzw, c4.y
    endif
    mov r0.w, v1.w
    cmp r2.yzw, -r2.x, r0, r2
    rcp r2.w, r2.w
    mul r2.yz, r2.w, r2
    mad r3.xy, r2.yzzw, c1, c1.wzzw
    mov r3.zw, c4.y
    texldl r3, r3, s0
    add r2.y, r3.w, -c2.y
    add r2.z, -r2.y, c5.z
    rcp r2.y, r2.y
    cmp r2.y, r2.z, c5.w, r2.y
    mad r2.y, c2.x, r2.y, -v1.w
    mul_sat r2.y, r2.y, c6.x
    if_ne c3.x, -c3.x
      texld r3, c5, s1
      add r2.z, -r3.y, v1.w
      mad r0.x, r3.x, r2.z, r0.y
      mov r3.xyz, r0.xzww
    else
      mov r3.xyz, c4.y
    endif
    cmp r0.xyz, -r2.x, r0.yzww, r3
    rcp r0.z, r0.z
    mul r0.xy, r0.z, r0
    mad r0.xy, r0, c1, c1.wzzw
    mov r0.zw, c4.y
    texldl r0, r0, s0
    add r0.x, r0.w, -c2.y
    add r0.y, -r0.x, c5.z
    rcp r0.x, r0.x
    cmp r0.x, r0.y, c5.w, r0.x
    mad r0.x, c2.x, r0.x, -v1.w
    mul_sat r0.x, r0.x, c6.y
    add r0.x, -r0.x, c4.w
    mul r0.x, r0.x, r2.y
    mul r0.x, r0.x, r1.w
    mul r0.xyz, r1, r0.x
    max r1.xyz, r0, c4.y
    min r0.xyz, r1, c6.z
    add_pp r0.xyz, r0, c7
    mul_pp oC0.xyz, r0, v0.w
    mov oC0.w, c4.y

// approximately 72 instruction slots used (7 texture, 65 arithmetic)
