//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 AmbientColorAndSkyFactor;
//   float4 DNEResolution;
//   float4 DiffuseOverrideParameter;
//   float4 MinZ_MaxZRatio;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   float4 ScreenPositionScaleBias;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float3 UpperSkyColor;
//   sampler2D VAOBuffer;
//
//
// Registers:
//
//   Name                     Reg   Size
//   ------------------------ ----- ----
//   DNEResolution            c0       1
//   ScreenPositionScaleBias  c1       1
//   MinZ_MaxZRatio           c2       1
//   NvStereoEnabled          c3       1
//   DiffuseOverrideParameter c4       1
//   UniformPixelVector_0     c7       1
//   UniformPixelVector_1     c8       1
//   UpperSkyColor            c9       1
//   AmbientColorAndSkyFactor c10      1
//   NvStereoFixTexture       s0       1
//   PixelTexture2D_0         s1       1
//   VAOBuffer                s2       1
//

    ps_3_0
    def c5, -0.333299994, 1, 0.5, -0.0199999996
    def c6, 0.0625, 0, 0, 0
    dcl_color1 v0.xyz
    dcl_texcoord v1.xy
    dcl_texcoord5 v2.w
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed --ignore-parse-errors CRC32_D9CFEDC7_125.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    dp3_pp r0.x, v0, v0
    rsq_pp r0.x, r0.x
    mad r0.yz, vPos.xxyw, c0.xxyw, c0.xzww
    mul r1.xy, r0.yzzw, v2.w
    texld r2, v1, s1
    add r3, r2.w, c5.x
    texkill r3
    mad r0.x, v0.z, r0.x, c5.y
    mul r0.x, r0.x, c5.z
    mul r0.yzw, r2.xxyz, r0.x
    mad r2.xyz, r0.x, r2, c5.w
    mov_sat r0.yzw, r0
    cmp r0.xyz, r2, r0.yzww, -c5.w
    mul r0.xyz, r0, c8
    mov r2.y, c5.y
    add r2.xyz, r2.y, -c7
    mul_pp r0.xyz, r0, r2
    mad_pp r0.xyz, r0, c4.w, c4
    mul r2.xyz, r0, c9
    mov_pp r0.w, c10.w
    mad_pp r2.xyz, r2, r0.w, c7
    abs r0.w, c3.x
    if_ne c3.x, -c3.x
      texld r3, c6, s0
      add r2.w, -r3.y, v2.w
      mad r1.z, r3.x, r2.w, r1.x
      mov r1.w, v2.w
      mov r3.xyz, r1.zyww
    else
      mov r3.xyz, c6.y
    endif
    mov r1.z, v2.w
    cmp r1.xyz, -r0.w, r1, r3
    rcp r0.w, r1.z
    mul r1.xy, r0.w, r1
    mad r1.xy, r1, c1, c1.wzzw
    texld_pp r1, r1, s2
    mul r0.xyz, r0, c10
    mad_pp oC0.xyz, r2, r1.x, r0
    rcp r0.x, v2.w
    mad oC0.w, c2.x, r0.x, c2.y

// approximately 43 instruction slots used (3 texture, 40 arithmetic)
