//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   float2 DistanceFadeParameters;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   sampler2D PixelTexture2D_3;
//   sampler2D PixelTexture2D_4;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float TwoSidedSign;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   sampler2D WarpFunctionTexture;
//   bool bEnableDistanceShadowFading;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   bEnableDistanceShadowFading  b1       1
//   TwoSidedSign                 c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNESpecularAttenuation       c7       1
//   DNEMiscParameter             c8       1
//   DNEResolution                c9       1
//   UniformPixelVector_0         c10      1
//   UniformPixelVector_1         c11      1
//   UniformPixelScalars_0        c12      1
//   LightColorAndFalloffExponent c13      1
//   DistanceFadeParameters       c14      1
//   ShadowWarpFunctionTexture    s0       1
//   WarpFunctionTexture          s1       1
//   NvStereoFixTexture           s2       1
//   LightAttenuationTexture      s3       1
//   PixelTexture2D_0             s4       1
//   PixelTexture2D_1             s5       1
//   PixelTexture2D_2             s6       1
//   PixelTexture2D_3             s7       1
//   PixelTexture2D_4             s8       1
//

    ps_3_0
    def c2, 9.99999997e-007, -4.99999999e-007, 2, -1
    def c6, -1, 1, 10, 1.52876604
    def c15, 0.5, 0.0625, 0, 0.0299999993
    def c16, 0.125, 0.0280000009, -5.55472994, -6.98316002
    def c17, 0.600000024, 0.400000006, 0.693147004, 2
    dcl_texcoord v0.xy
    dcl_texcoord4_pp v1.xyz
    dcl_texcoord5_pp v2.w
    dcl_texcoord6 v3.xyz
    dcl_texcoord7 v4
    dcl vPos.xy
    dcl vFace
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6
    dcl_2d s7
    dcl_2d s8

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed CRC32_28B563_8540.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    nrm_pp r0.xyz, v3
    mad_sat_pp r0.w, c8.x, v4.w, c8.y
    mul_pp r0.w, r0.w, c7.x
    texld_pp r1, v0, s4
    mul_pp r1.x, r1.x, c12.x
    mad_pp r1.x, r1.x, c2.x, c2.y
    mad_pp r1.xy, r1.x, r0, v0
    texld_pp r2, r1, s5
    mad_pp r2.xyz, r2, c2.z, c2.w
    nrm_pp r3.xyz, r2
    dp3_pp r1.z, v1, v1
    rsq_pp r1.z, r1.z
    mul_pp r2.xyz, r1.z, v1
    cmp r1.w, vFace, c6.x, c6.y
    mul r1.w, r1.w, c0.x
    mul_pp r3.xyz, r1.w, r3
    mad_pp r0.xyz, v1, r1.z, r0
    nrm_pp r4.xyz, r0
    mad_pp r0.x, r2.w, c6.z, c6.w
    exp_pp r0.x, r0.x
    mov_sat_pp r5.x, v2.w
    mov_pp r5.yw, c15.x
    texld_pp r6, r5, s0
    if b0
      mad r0.yz, vPos.xxyw, c9.xxyw, c9.xzww
      mul r7.xy, r0.yzzw, v4.w
      if_ne c3.x, -c3.x
        texld r8, c15.yzzw, s2
        add r0.y, -r8.y, v4.w
        mad r7.z, r8.x, r0.y, r7.x
        mov r7.xy, r7.zyzw
        mov r0.y, v4.w
      else
        mov r0.y, v4.w
      endif
      rcp r0.y, r0.y
      mul r0.yz, r0.y, r7.xxyw
      mad r0.yz, r0, c1.xxyw, c1.xwzw
      texld r7, r0.yzzw, s3
      mul_pp r6.yzw, r7.xxyz, r7.xxyz
      if b1
        dp3 r0.y, v4, v4
        rsq r0.y, r0.y
        rcp r0.y, r0.y
        add r0.y, -r0.y, c14.x
        mul_sat_pp r0.y, r0.y, c14.y
        mul_pp r0.y, r0.y, r0.y
        mad_pp r0.z, r7.w, r7.w, -r6.x
        mad_pp r7.xyz, r0.y, r0.z, r6.x
      else
        mov_pp r7.xyz, r6.x
      endif
      mul_pp r6.yzw, r6, r7.xxyz
    else
      mov_pp r6.yzw, r6.x
    endif
    texld_pp r7, v0, s7
    mad_pp r7.xyz, r7, c5.w, c5
    texld_pp r1, r1, s6
    mov r1.w, c2.w
    add_pp r8.xyz, -r1.w, -c10
    mul_pp r1.xyz, r1, r8
    mad_pp r1.xyz, r1, c4.w, c4
    texld_pp r8, v0, s8
    dp3_sat_pp r5.z, r3, r2
    texld_pp r9, r5.zwzw, s1
    mov_sat_pp r0.y, r2.z
    lrp_pp r10.xy, c17, r0.y, r9.x
    add_pp r0.y, r10.x, c15.w
    add r0.z, -r10.y, r0.y
    cmp_pp r10.z, r0.z, r10.y, r0.y
    lrp_pp r5.xyw, r8.z, r10.xzzz, r9.x
    mul_pp r5.xyw, r5, c7.w
    mov_sat_pp r0.y, c7.y
    mul_pp r0.y, r0.y, r0.y
    mul_pp r0.x, r0.x, r0.y
    dp3_sat_pp r0.y, r3, r4
    mad_pp r0.z, r0.x, c17.z, c17.w
    mul_pp r0.z, r0.z, c16.x
    mad r0.x, r0.x, r0.y, -r0.x
    exp_pp r0.x, r0.x
    mul_pp r0.x, r0.x, r0.z
    mul_pp r0.x, r5.z, r0.x
    mul_pp r0.x, r0.w, r0.x
    lrp_pp r0.yzw, r8.z, c16.y, r7.xxyz
    add r1.w, r1.w, c11.x
    mad_pp r1.w, r8.z, r1.w, -c2.w
    mul_pp r0.x, r0.x, r1.w
    dp3_sat_pp r1.w, r2, r4
    mad_pp r2.x, r1.w, c16.z, c16.w
    mul_pp r1.w, r1.w, r2.x
    exp_pp r1.w, r1.w
    lrp_pp r2.xyz, r1.w, -c2.w, r0.yzww
    mul_pp r0.xyz, r0.x, r2
    mad_pp r0.xyz, r1, r5.xyww, r0
    mul_pp r0.xyz, r6.yzww, r0
    mul oC0.xyz, r0, c13
    mov oC0.w, c15.z

// approximately 110 instruction slots used (9 texture, 101 arithmetic)
