//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   sampler2D PixelTexture2D_3;
//   sampler2D PixelTexture2D_4;
//   sampler2D PixelTexture2D_5;
//   sampler2D PixelTexture2D_6;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float TwoSidedSign;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_0;
//   float4 UniformPixelVector_1;
//   float4 UniformPixelVector_2;
//   sampler2D WarpFunctionTexture;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   TwoSidedSign                 c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNESpecularAttenuation       c7       1
//   DNEMiscParameter             c8       1
//   DNEResolution                c9       1
//   UniformPixelVector_0         c10      1
//   UniformPixelVector_1         c11      1
//   UniformPixelVector_2         c12      1
//   UniformPixelScalars_0        c13      1
//   LightColorAndFalloffExponent c14      1
//   ShadowWarpFunctionTexture    s0       1
//   WarpFunctionTexture          s1       1
//   NvStereoFixTexture           s2       1
//   LightAttenuationTexture      s3       1
//   PixelTexture2D_0             s4       1
//   PixelTexture2D_1             s5       1
//   PixelTexture2D_2             s6       1
//   PixelTexture2D_3             s7       1
//   PixelTexture2D_4             s8       1
//   PixelTexture2D_5             s9       1
//   PixelTexture2D_6             s10      1
//

    ps_3_0
    def c2, 2, -1, 5, 15
    def c6, -1, 1, -0.949999988, 2089.24487
    def c15, 0, 0.333332986, 0.666665971, 9.99999997e-007
    def c16, -2, 4, 0.5, 0.0500000007
    def c17, 10, 1.52876604, 1, 0.5
    def c18, 0.0625, 0, 0.0700000003, 0.0299999993
    def c19, -0.099999994, 0.800000012, 0.600000024, 0.400000006
    def c20, 0.693147004, 2, 0.125, 0.0280000009
    def c21, 0, -0, -1, -0.100000001
    def c22, -5.55472994, -6.98316002, 0, 0
    dcl_color1 v0.xyz
    dcl_texcoord v1.xy
    dcl_texcoord4_pp v2.xyz
    dcl_texcoord5 v3.xyz
    dcl_texcoord6 v4.xyz
    dcl_texcoord7 v5.w
    dcl vPos.xy
    dcl vFace
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6
    dcl_2d s7
    dcl_2d s8
    dcl_2d s9
    dcl_2d s10

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --stereo-sampler-ps=s15 --disable-redundant-unreal-correction --auto-fix-unreal-shadows --auto-fix-unreal-lights --auto-fix-unreal-dne-reflection --only-autofixed --quiet CRC32_FEFCFAA7_242.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    dp3_pp r0.x, v0, v0
    rsq_pp r0.x, r0.x
    dp3_pp r0.y, v4, v4
    rsq_pp r0.y, r0.y
    mad_sat_pp r0.z, c8.x, v5.w, c8.y
    mul_pp r0.z, r0.z, c7.x
    texld_pp r1, v1, s4
    mad_pp r1.xyz, r1, c2.x, c2.y
    mul_pp r2.xy, c2.zwzw, v1
    texld_pp r3, r2, s5
    dp2add_pp r0.w, r3, -r3, -c2.y
    max_pp r1.w, r0.w, c21.x
    rsq_pp r0.w, r1.w
    rcp_pp r3.z, r0.w
    lrp_pp r4.xyz, -c21.w, r3, -c21.yyzw
    mov r3.xy, c13
    mad_pp r3.xyz, r3.y, r3.x, c15
    texld_pp r2, r2, s6
    add_pp r3.xyz, r2, r3
    frc_pp r3.xyz, r3
    add r3.xyz, -r3, -c2.y
    texld_pp r5, v1, s7
    mad_pp r0.w, r5.z, c16.x, c16.y
    max r5.xyw, c15.w, r3.xyzz
    log r3.x, r5.x
    log r3.y, r5.y
    log r3.z, r5.w
    mul r3.xyz, r0.w, r3
    exp_pp r5.x, r3.x
    exp_pp r5.y, r3.y
    exp_pp r0.w, r3.z
    frc_pp r3.xyz, -r2
    add_sat_pp r2.xyz, r2, r3
    mul_pp r2.xy, r2, r5
    add_pp r1.w, r2.y, r2.x
    mad_pp r0.w, r0.w, r2.z, r1.w
    mul_pp r0.w, r0.w, c13.z
    mad_pp r0.x, v0.z, r0.x, -c2.y
    mul_pp r0.x, r0.w, r0.x
    mul_pp r0.w, r0.x, c16.z
    add_pp r2.xyz, -r1, r4
    mul_pp r2.xyz, r0.w, r2
    texld_pp r3, v1, s8
    mul_pp r1.w, r3.y, c13.w
    mad_pp r2.xyz, r1.w, r2, r1
    nrm_pp r3.xyz, r2
    nrm_pp r2.xyz, v2
    cmp r1.y, vFace, c6.x, c6.y
    mul r1.y, r1.y, c0.x
    mul_pp r3.xyz, r1.y, r3
    mad_pp r4.xyz, v4, r0.y, r2
    nrm_pp r6.xyz, r4
    lrp_pp r4.xy, r1.x, c11.ywzw, c11.xzzw
    lrp_pp r0.y, r5.z, r4.y, r4.x
    lrp_pp r1.y, r0.w, -c2.y, r0.y
    lrp_pp r0.y, r1.w, r1.y, r1.x
    max_pp r1.x, r0.y, c16.w
    add r0.y, r1.x, c6.z
    mad r1.x, r1.x, c17.x, c17.y
    exp_pp r1.x, r1.x
    cmp_pp r0.y, r0.y, c6.w, r1.x
    texld_pp r4, c17.zwzw, s0
    dp3 r1.x, v3, v3
    add r1.y, -r1.x, -c2.y
    mul r7, r4.x, r1.y
    mov r8, r7
    texkill r8
    if b0
      mad r1.yz, vPos.xxyw, c9.xxyw, c9.xzww
      mul r7.xy, r1.yzzw, v5.w
      if_ne c3.x, -c3.x
        texld r8, c18, s2
        add r1.y, -r8.y, v5.w
        mad r7.z, r8.x, r1.y, r7.x
        mov r7.xy, r7.zyzw
        mov r1.y, v5.w
      else
        mov r1.y, v5.w
      endif
      rcp r1.y, r1.y
      mul r1.yz, r1.y, r7.xxyw
      mad r1.yz, r1, c1.xxyw, c1.xwzw
      texld r8, r1.yzzw, s3
      mul_pp r4.yzw, r8.xxyz, r8.xxyz
      mul_pp r4.yzw, r4, r4.x
    else
      mov_pp r4.yzw, r4.x
    endif
    texld_pp r8, v1, s10
    mul_pp r0.w, r0.w, r1.w
    lrp_pp r5.xyw, r0.w, c18.z, r8.xyzz
    mad_pp r5.xyw, r5, c5.w, c5.xyzz
    mov_sat r1.x, r1.x
    add r0.w, -r1.x, -c2.y
    pow_sat_pp r8.x, r0.w, c14.w
    mov r8.yw, c16.z
    texld_pp r9, r8, s0
    texld_pp r10, v1, s9
    mul_pp r1.xyz, r10, r10
    mad_pp r0.x, r0.x, c19.x, c19.y
    mul_pp r7.xyz, r1, r0.x
    mad r1.xyz, r0.x, -r1, r10
    mad_pp r1.xyz, r5.z, r1, r7
    lrp_pp r7.xyz, r1.w, r1, r10
    mov r1.y, c2.y
    add_pp r1.xzw, -r1.y, -c10.xyyz
    mul_pp r1.xzw, r1, r7.xyyz
    mad_pp r1.xzw, r1, c4.w, c4.xyyz
    dp3_sat_pp r8.z, r3, r2
    texld_pp r10, r8.zwzw, s1
    mov_sat_pp r0.x, r2.z
    lrp_pp r7.xy, c19.zwzw, r0.x, r10.x
    add_pp r0.x, r7.x, c18.w
    add r0.w, -r7.y, r0.x
    cmp_pp r7.z, r0.w, r7.y, r0.x
    lrp_pp r8.xyw, r5.z, r7.xzzz, r10.x
    mul_pp r7.xyz, r8.xyww, c7.w
    mul_sat_pp r0.x, r9.x, c7.y
    mul_pp r0.x, r0.x, r0.x
    mul_pp r0.x, r0.y, r0.x
    dp3_sat_pp r0.y, r3, r6
    mad_pp r0.w, r0.x, c20.x, c20.y
    mul_pp r0.w, r0.w, c20.z
    mad r0.x, r0.x, r0.y, -r0.x
    exp_pp r0.x, r0.x
    mul_pp r0.x, r0.x, r0.w
    mul_pp r0.x, r8.z, r0.x
    mul_pp r0.x, r0.z, r0.x
    lrp_pp r0.yzw, r5.z, c20.w, r5.xxyw
    add r1.y, r1.y, c12.x
    mad_pp r1.y, r5.z, r1.y, -c2.y
    mul_pp r0.x, r0.x, r1.y
    dp3_sat_pp r1.y, r2, r6
    mad_pp r2.x, r1.y, c22.x, c22.y
    mul_pp r1.y, r1.y, r2.x
    exp_pp r1.y, r1.y
    lrp_pp r2.xyz, r1.y, -c2.y, r0.yzww
    mul_pp r0.xyz, r0.x, r2
    mad_pp r0.xyz, r1.xzww, r7, r0
    mul_pp r0.xyz, r4.yzww, r0
    mul r0.xyz, r9.x, r0
    mul r0.xyz, r0, c14
    cmp oC0.xyz, -r7.w, c21.x, r0
    mov oC0.w, c21.x

// approximately 157 instruction slots used (12 texture, 145 arithmetic)
