//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEMiscParameter;
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   float2 DistanceFadeParameters;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   float4 ScreenDoorFadeSettings;
//   float4 ScreenDoorFadeSettings2;
//   sampler2D ScreenDoorNoiseTexture;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowTexture;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float4 UniformPixelVector_0;
//   bool bEnableDistanceShadowFading;
//   bool bEnableScreenDoorFade;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bEnableScreenDoorFade        b0       1
//   bReceiveDynamicShadows       b1       1
//   bEnableDistanceShadowFading  b2       1
//   DNESpecularAttenuation       c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNEMiscParameter             c7       1
//   DNEResolution                c8       1
//   ScreenDoorFadeSettings       c9       1
//   ScreenDoorFadeSettings2      c10      1
//   UniformPixelVector_0         c11      1
//   LightColorAndFalloffExponent c12      1
//   DistanceFadeParameters       c13      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   ScreenDoorNoiseTexture       s3       1
//   PixelTexture2D_0             s4       1
//   PixelTexture2D_1             s5       1
//   PixelTexture2D_2             s6       1
//   ShadowTexture                s7       1
//

    ps_3_0
    def c2, 10, 1.52876604, 0.5, -0.5
    def c6, 1, 0.0625, 0, 0.125
    def c14, 0.693147004, 2, -5.55472994, -6.98316002
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_texcoord4_pp v2.xyz
    dcl_texcoord6 v3.xyz
    dcl_texcoord7 v4
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6
    dcl_2d s7

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed CRC32_635E723A_8540.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    dp3_pp r0.x, v3, v3
    rsq_pp r0.x, r0.x
    mad_sat_pp r0.y, c7.x, v4.w, c7.y
    mul_pp r0.y, r0.y, c0.x
    nrm_pp r1.xyz, v2
    mad_pp r0.xzw, v3.xyyz, r0.x, r1.xyyz
    nrm_pp r2.xyz, r0.xzww
    texld_pp r3, v1, s6
    mad_pp r0.x, r3.w, c2.x, c2.y
    exp_pp r0.x, r0.x
    texld_pp r3, v0, s7
    mov_sat_pp r3.x, r3.x
    mov_pp r3.y, c2.z
    texld_pp r3, r3, s0
    texld_pp r4, v1, s4
    mov_sat_pp r0.z, r4.w
    add_pp r5, r0.z, c2.w
    texkill r5
    if b0
      mad r0.zw, vPos.xyxy, c10, c10.xyxy
      texld_pp r5, r0.zwzw, s3
      mad r0.z, c9.y, r5.x, c9.z
      mov r5.x, c6.x
      add r0.w, r5.x, -c9.x
      add r5, -r0.w, r0.z
      texkill r5
    endif
    if b1
      mad r0.zw, vPos.xyxy, c8.xyxy, c8
      mul r5.xy, r0.zwzw, v4.w
      if_ne c3.x, -c3.x
        texld r6, c6.yzzw, s1
        add r0.z, -r6.y, v4.w
        mad r5.z, r6.x, r0.z, r5.x
        mov r5.xy, r5.zyzw
        mov r0.z, v4.w
      else
        mov r0.z, v4.w
      endif
      rcp r0.z, r0.z
      mul r0.zw, r0.z, r5.xyxy
      mad r0.zw, r0, c1.xyxy, c1.xywz
      texld r5, r0.zwzw, s2
      mul_pp r3.yzw, r5.xxyz, r5.xxyz
      if b2
        dp3 r0.z, v4, v4
        rsq r0.z, r0.z
        rcp r0.z, r0.z
        add r0.z, -r0.z, c13.x
        mul_sat_pp r0.z, r0.z, c13.y
        mul_pp r0.z, r0.z, r0.z
        mad_pp r0.w, r5.w, r5.w, -r3.x
        mad_pp r5.xyz, r0.z, r0.w, r3.x
      else
        mov_pp r5.xyz, r3.x
      endif
      mul_pp r3.yzw, r3, r5.xxyz
    else
      mov_pp r3.yzw, r3.x
    endif
    texld_pp r5, v1, s5
    mad_pp r5.xyz, r5, c5.w, c5
    mov r3.x, c6.x
    add_pp r6.xyz, r3.x, -c11
    mul_pp r4.xyz, r4, r6
    mad_pp r4.xyz, r4, c4.w, c4
    mov_sat_pp r0.z, r1.z
    mul_pp r0.w, r0.z, c0.w
    mov_sat_pp r1.w, c0.y
    mul_pp r1.w, r1.w, r1.w
    mul_pp r0.x, r0.x, r1.w
    mov_sat_pp r1.w, r2.z
    mad_pp r2.w, r0.x, c14.x, c14.y
    mul_pp r2.w, r2.w, c6.w
    mad r0.x, r0.x, r1.w, -r0.x
    exp_pp r0.x, r0.x
    mul_pp r0.x, r0.x, r2.w
    mul_pp r0.x, r0.z, r0.x
    mul_pp r0.x, r0.y, r0.x
    dp3_sat_pp r0.y, r1, r2
    mad_pp r0.z, r0.y, c14.z, c14.w
    mul_pp r0.y, r0.y, r0.z
    exp_pp r0.y, r0.y
    lrp_pp r1.xyz, r0.y, c6.x, r5
    mul_pp r0.xyz, r0.x, r1
    mad_pp r0.xyz, r4, r0.w, r0
    mul_pp r0.xyz, r3.yzww, r0
    mul oC0.xyz, r0, c12
    mov oC0.w, c6.z

// approximately 101 instruction slots used (8 texture, 93 arithmetic)
