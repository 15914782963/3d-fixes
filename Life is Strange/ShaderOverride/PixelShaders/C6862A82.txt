//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 DiffuseOverrideParameter;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 UniformPixelScalars_0;
//   float4 UniformPixelVector_1;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   DNEResolution                c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   UniformPixelVector_1         c7       1
//   UniformPixelScalars_0        c8       1
//   LightColorAndFalloffExponent c9       1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//

    ps_3_0
    def c2, 1, 0.5, 0, -0.333299994
    def c5, 0.0625, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord5 v1.xyz
    dcl_texcoord7 v2.w
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --only-autofixed --ignore-parse-errors CRC32_C6862A82_359.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    texld_pp r0, c2, s0
    dp3 r0.y, v1, v1
    add r0.z, -r0.y, c2.x
    mul r1, r0.x, r0.z
    mov r2, r1
    texkill r2
    cmp r0.z, -r1.w, c2.z, c2.x
    rcp r1.x, c7.x
    rcp r1.y, c7.y
    mul r2.xy, r1, v0
    mov r3.x, c2.x
    add r0.w, r3.x, c8.x
    mul r1.z, r0.w, c8.y
    mul r2.z, r1.x, r1.z
    frc r2.w, r2_abs.z
    cmp r2.w, r2.z, r2.w, -r2.w
    mul r2.w, r2.w, c7.x
    frc r3.x, r2.w
    add r3.x, r2.w, -r3.x
    mul r2.z, r1.y, r2.z
    frc r2.w, r2_abs.z
    cmp r2.z, r2.z, r2.w, -r2.w
    mul r2.z, r2.z, c7.y
    frc r2.w, r2.z
    add r3.y, -r2.w, r2.z
    mad r2.zw, r3.xyxy, r1.xyxy, r2.xyxy
    texld r3, r2.zwzw, s3
    rcp r2.z, c8.y
    add r0.w, r0.w, r2.z
    mul r0.w, r0.w, c8.y
    mul r0.w, r1.x, r0.w
    frc r2.w, r0_abs.w
    cmp r2.w, r0.w, r2.w, -r2.w
    mul r2.w, r2.w, c7.x
    frc r3.x, r2.w
    add r3.x, r2.w, -r3.x
    mul r0.w, r1.y, r0.w
    frc r2.w, r0_abs.w
    cmp r0.w, r0.w, r2.w, -r2.w
    mul r0.w, r0.w, c7.y
    frc r2.w, r0.w
    add r3.y, r0.w, -r2.w
    mad r1.xy, r3, r1, r2
    texld r4, r1, s3
    frc r0.w, r1_abs.z
    cmp r0.w, r1.z, r0.w, -r0.w
    mul r0.w, r2.z, r0.w
    mul r0.w, r0.w, c8.y
    lrp r1.x, r0.w, r4.w, r3.w
    add r0.w, r1.x, c2.w
    mul r2, r0.z, r0.w
    texkill r2
    if b0
      mad r0.zw, vPos.xyxy, c0.xyxy, c0
      mul r1.xy, r0.zwzw, v2.w
      if_ne c3.x, -c3.x
        texld r2, c5, s1
        add r0.z, -r2.y, v2.w
        mad r1.z, r2.x, r0.z, r1.x
        mov r1.xy, r1.zyzw
        mov r0.z, v2.w
      else
        mov r0.z, v2.w
      endif
      rcp r0.z, r0.z
      mul r0.zw, r0.z, r1.xyxy
      mad r0.zw, r0, c1.xyxy, c1.xywz
      texld r2, r0.zwzw, s2
      mul_pp r1.xyz, r2, r2
      mul_pp r1.xyz, r0.x, r1
    else
      mov_pp r1.xyz, r0.x
    endif
    mov_sat r0.y, r0.y
    add r0.x, -r0.y, c2.x
    pow_sat_pp r2.x, r0.x, c9.w
    mov r2.y, c2.y
    texld_pp r0, r2, s0
    mul r0.yzw, r1.xxyz, c4.xxyz
    mul r0.xyz, r0.x, r0.yzww
    mul r0.xyz, r0, c9
    cmp oC0.xyz, -r1.w, c2.z, r0
    mov oC0.w, c2.z

// approximately 89 instruction slots used (6 texture, 83 arithmetic)
