//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DNEResolution;
//   float4 DNESpecularAttenuation;
//   float4 DiffuseOverrideParameter;
//   float2 DistanceFadeParameters;
//   float3 DistanceFieldParameters;
//   sampler2D LightAttenuationTexture;
//   float4 LightColorAndFalloffExponent;
//   float NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   sampler2D PixelTexture2D_0;
//   sampler2D PixelTexture2D_1;
//   sampler2D PixelTexture2D_2;
//   sampler2D PixelTexture2D_3;
//   float4 ScreenPositionScaleBias;
//   sampler2D ShadowTexture;
//   sampler2D ShadowWarpFunctionTexture;
//   float4 SpecularOverrideParameter;
//   float4 UniformPixelVector_0;
//   bool bEnableDistanceShadowFading;
//   bool bReceiveDynamicShadows;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   bReceiveDynamicShadows       b0       1
//   bEnableDistanceShadowFading  b1       1
//   DNESpecularAttenuation       c0       1
//   ScreenPositionScaleBias      c1       1
//   NvStereoEnabled              c3       1
//   DiffuseOverrideParameter     c4       1
//   SpecularOverrideParameter    c5       1
//   DNEResolution                c7       1
//   UniformPixelVector_0         c8       1
//   LightColorAndFalloffExponent c9       1
//   DistanceFieldParameters      c10      1
//   DistanceFadeParameters       c11      1
//   ShadowWarpFunctionTexture    s0       1
//   NvStereoFixTexture           s1       1
//   LightAttenuationTexture      s2       1
//   PixelTexture2D_0             s3       1
//   PixelTexture2D_1             s4       1
//   PixelTexture2D_2             s5       1
//   PixelTexture2D_3             s6       1
//   ShadowTexture                s7       1
//

    ps_3_0
    def c2, 4, 1, 2, -1
    def c6, 0.5, 0.125, 0.015625, 0.150000006
    def c12, -0.333299994, 0.0625, 0, -9.99999997e-007
    def c13, 15, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_texcoord3_pp v2.w
    dcl_texcoord4_pp v3.xyz
    dcl_texcoord6 v4.xyz
    dcl_texcoord7 v5
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    dcl_2d s5
    dcl_2d s6
    dcl_2d s7

// Redundant Unreal Engine stereo correction disabled by DarkStarSword's shadertool.py:
// shadertool.py -i --disable-redundant-unreal-correction --auto-fix-unreal-dne-reflection --only-autofixed --ignore-parse-errors CRC32_A819567C_6562775.txt
def c3, 0, 0, 0, 0 // Overrides NvStereoEnabled passed from Unreal Engine

    mad r0.xy, vPos, c7, c7.zwzw
    mul r0.xy, r0, v5.w
    nrm_pp r1.xyz, v4
    mul r2.xy, c2, v1
    texld_pp r3, r2, s3
    mad_pp r3.xyz, r3, c2.z, c2.w
    nrm_pp r4.xyz, r3
    nrm_pp r3.xyz, v3
    dp3_pp r0.w, r4, r1
    mul_pp r5.xyz, r0.w, r4
    mad_pp r1.xyz, r5, c2.z, -r1
    texld_pp r5, v0, s7
    add r0.w, r5.x, c10.x
    mul_sat_pp r0.w, r0.w, c10.y
    pow_sat_pp r5.x, r0.w, c10.z
    mov_pp r5.y, c6.x
    texld_pp r5, r5, s0
    rcp r0.w, v5.w
    mul r6, r0.w, r0.xyxy
    mad r6, r6, c1.xyxy, c1.wzwz
    dsx r0.w, r6.z
    dsy r1.w, r6.w
    rcp r7.xz, r0.w
    rcp r7.yw, r1.w
    mul r6, r6, r7
    mul r6, r6, c6.yyzz
    texld r7, r6, s5
    texld r6, r6.zwzw, s6
    lrp r0.w, c6.w, r6.y, r7.y
    add r0.w, -r0.w, v2.w
    frc r1.w, -r0.w
    add_sat r0.w, r0.w, r1.w
    add r6, r0.w, c12.x
    texkill r6
    if b0
      if_ne c3.x, -c3.x
        texld r6, c12.yzzw, s1
        add r0.w, -r6.y, v5.w
        mad r0.z, r6.x, r0.w, r0.x
        mov r0.xy, r0.zyzw
        mov r0.z, v5.w
      else
        mov r0.z, v5.w
      endif
      rcp r0.z, r0.z
      mul r0.xy, r0.z, r0
      mad r0.xy, r0, c1, c1.wzzw
      texld r0, r0, s2
      mul_pp r0.xyz, r0, r0
      if b1
        dp3 r1.w, v5, v5
        rsq r1.w, r1.w
        rcp r1.w, r1.w
        add r1.w, -r1.w, c11.x
        mul_sat_pp r1.w, r1.w, c11.y
        mul_pp r1.w, r1.w, r1.w
        mad_pp r0.w, r0.w, r0.w, -r5.x
        mad_pp r5.yzw, r1.w, r0.w, r5.x
      else
        mov_pp r5.yzw, r5.x
      endif
      mul_pp r0.xyz, r0, r5.yzww
    else
      mov_pp r0.xyz, r5.x
    endif
    texld r2, r2, s4
    mov r5.y, c2.y
    add r5.xyz, r5.y, -c8
    mul_pp r2.xyz, r2, r5
    mad_pp r2.xyz, r2, c4.w, c4
    dp3_sat_pp r0.w, r4, r3
    add r1.w, r0.w, c12.w
    mul r0.w, r0.w, c0.w
    dp3_sat_pp r1.x, r1, r3
    add r1.y, r1.x, c12.w
    pow_pp r2.w, r1.x, c13.x
    mul r1.x, r2.w, c0.x
    mul r2.xyz, r0.w, r2
    cmp r2.xyz, r1.w, r2, c12.z
    mul_pp r1.xzw, r1.x, c5.xyyz
    cmp_pp r1.xyz, r1.y, r1.xzww, c12.z
    add_pp r1.xyz, r1, r2
    mul_pp r0.xyz, r0, r1
    mul oC0.xyz, r0, c9
    mov oC0.w, c12.z

// approximately 103 instruction slots used (8 texture, 95 arithmetic)
