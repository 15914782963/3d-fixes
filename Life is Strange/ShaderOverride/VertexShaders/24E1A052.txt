// NOTE: RELOADING THIS SHADER LIVE DOES NOT WORK - bloom around lights in school hallway.

//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 CameraPositionVS;
//   float4 CameraRight;
//   float4 CameraUp;
//   float3 CameraWorldPos;
//   float4 FogInScattering[4];
//   float4 FogMaxHeight;
//   float4x4 LocalToWorld;
//   float4 ObjectWorldPositionAndRadius;
//   float4 SharedFogParameter0;
//   float4 SharedFogParameter1;
//   float4 SharedFogParameter2;
//   float4 SharedFogParameter3;
//   float4x4 ViewProjectionMatrix;
//   float bUseExponentialHeightFog;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   ViewProjectionMatrix         c0       4
//   CameraPositionVS             c4       1
//   LocalToWorld                 c6       4
//   FogInScattering              c10      4
//   CameraWorldPos               c14      1
//   ObjectWorldPositionAndRadius c15      1
//   CameraRight                  c16      1
//   CameraUp                     c17      1
//   SharedFogParameter0          c18      1
//   SharedFogParameter1          c19      1
//   SharedFogParameter2          c20      1
//   SharedFogParameter3          c21      1
//   bUseExponentialHeightFog     c22      1
//   FogMaxHeight                 c23      1
//

    vs_3_0
    def c5, 0.159154937, 0.5, 6.28318548, -3.14159274
    def c24, 0.00999999978, -0.00999999978, 0.499000013, 0.5
    def c25, 0.00100000005, 0, 0, 0
    def c26, 1, 0, -1, 7
    dcl_position v0
    dcl_tangent v1
    dcl_blendweight v2
    dcl_texcoord v3
    dcl_texcoord1 v4
    dcl_texcoord2 v5
    dcl_color o0.xyz
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_texcoord1 o3
    dcl_texcoord2 o4
    dcl_texcoord4 o5
    dcl_texcoord6 o6
    dcl_texcoord5 o7
    dcl_position o8

def c220, 0, 1, 0.0625, 0.5
def c221, 50, 0, 0, 0
dcl_2d s3

dcl_2d s2 // Copy of SceneColorTexture, depth is in w
defi i0, 255, 0, 0, 0
def c227, 0.00390625, 64, 0, 0.5 // 1/i0.x, 0.5
def c40, 0.0625, 0, 9.99999975e-006, 100000

// LocalToWorld
    mul r0, c7, v0.y
    mad r0, c6, v0.x, r0
    mad r0, c8, v0.z, r0
    mad r0, c9, v0.w, r0

    mad r1.x, v2.x, c5.x, c5.y
    frc r1.x, r1.x
    mad r1.x, r1.x, c5.z, c5.w
    sincos r2.xy, r1.x
    mul r1, r2.y, c16 // CameraRight
    mad r1, -r2.x, c17, r1 // CameraUp
    mul r3, r2.x, c16
    mad r2, r2.y, c17, r3 // CameraUp
    mul r3.xy, v1.zwzw, v1
    add r4, -c5.y, v3.xyxy
    mul r3.xy, r3, r4

    mad r0, r3.x, r1, r0 // tangent * camera orientation? + world
    mad r0, r3.y, r2, r0 // more....

    mul r3.xyz, r1.zxyw, r2.yzxw
    mad r3.xyz, r1.yzxw, r2.zxyw, -r3
    nrm r5.xyz, r3

// LocalToWorld
    mul r3.xyz, r1.y, c7
    mad r3.xyz, c6, r1.x, r3
    mad r3.xyz, c8, r1.z, r3

// LocalToWorld
    mul r6.xyz, r2.y, c7
    mad r6.xyz, c6, r2.x, r6
    mad r6.xyz, c8, r2.z, r6

    mov r7.xyz, c15
    add r7.xyz, r7, -c14
    mul r7.xyz, r7, c26.xxyw
    dp3 r1.w, r7, r7
    rsq r1.w, r1.w
    mul r1.w, r1.w, r7.x

    mul r4.xy, r4.zwzw, r1_abs.w
    mul r4.xy, r4, c26.zwzw
    mul r4.yzw, r4.y, r6.xxyz
    mad r4.xyz, r3, r4.x, r4.yzww

    add r0.xyz, r0, r4

// ViewProjectionMatrix
    mul r4, r0.y, c1
    mad r4, c0, r0.x, r4
    mad r4, c2, r0.z, r4
    mad r4, c3, r0.w, r4

// LocalToWorld
    mul r3.yw, r5.y, c7.xxzz
    mad r3.yw, c6.xxzz, r5.x, r3
    mad r7.xy, c8.xzzw, r5.z, r3.ywzw

    mul r8.xyz, r2.zxyw, r5.yzxw
    mad r8.xyz, r2.yzxw, r5.zxyw, -r8
    dp3 r0.w, r8, r1
    slt r1.w, -r0.w, r0.w
    slt r0.w, r0.w, -r0.w
    add o1.w, -r0.w, r1.w
    mad r8.xyz, r0, -c4.w, c4
    dp3 o6.x, r1, r8
    dp3 o6.y, r2, r8
    dp3 o6.z, r5, r8
    abs r0.w, c22.x
    if_lt -r0.w, r0.w
      add r1.xyz, r0, -c4
      dp3 r0.w, r1, r1
      rsq r0.w, r0.w
      rcp r1.w, r0.w
      add r1.w, r1.w, -c18.w
      max r1.w, r1.w, c26.y
      mul r1.w, r1.w, c18.x
      slt r2.x, c24.x, r1_abs.z
      add r2.y, r1.z, c24.y
      mad r2.x, r2.x, r2.y, c24.x
      mul r2.y, r2.x, -c18.y
      exp r2.y, r2.y
      add r2.y, -r2.y, c26.x
      mul r2.x, r2.x, c18.y
      rcp r2.x, r2.x
      mul r2.x, r2.x, r2.y
      mul r1.w, r1.w, r2.x
      mul r1.xyz, r0.w, r1
      dp3 r0.w, c21, r1
      mad r0.w, r0.w, -c24.z, c24.w
      pow r1.x, r0.w, c18.z
      mov r2.xyz, c20
      add r2.xyz, -r2, c19
      mad r1.xyz, r1.x, r2, c20
      exp r0.w, -r1.w
      min r0.w, r0.w, c26.x
      max r0.w, r0.w, c19.w
      add r1.w, -r0.w, c26.x
      mul o5.xyz, r1.w, r1
      mov o5.w, r0.w
    else
      add r1.xyz, r0, -c4
      dp3 r0.w, r1, r1
      rsq r0.w, r0.w
      rcp r0.w, r0.w
      mov r2.z, c4.z
      add r5, -r2.z, c21
      sge r1.x, c25.x, r1_abs.z
      lrp r2.x, r1.x, c25.x, r1.z
      rcp r1.x, r2.x
      mul_sat r5, r1.x, r5
      add r2, -r2.z, c23
      mul_sat r1, r1.x, r2
      add r2, r0.w, -c20
      max r2, r2, c26.y
      add r1, -r5, r1
      mul r1, r1_abs, r2
      slt r2, r1, c19
      mul r1, r1, c18
      exp r5.x, r1.x
      exp r5.y, r1.y
      exp r5.z, r1.z
      exp r5.w, r1.w
      mul r1, r2, r5
      mad r2, r2, r5, c26.z
      mul r5.xyz, r2.x, c10
      mov r5.w, r1.x
      mul r5, r1.y, r5
      mad r5.xyz, r2.y, c11, r5
      mul r5, r1.z, r5
      mad r5.xyz, r2.z, c12, r5
      mul r1, r1.w, r5
      mad o5.xyz, r2.w, c13, r1
      mov o5.w, r1.w
    endif
    mov r7.z, r3.x
    mov r7.w, r6.x
    mov o0.xyz, r7.zwxw
    mov o1.x, r3.z
    mov o1.y, r6.z
    mov o1.z, r7.y
    mov o2.xy, v3
    mov o3, v4
    mov o4, v5
    mov o6.w, r4.z
    mov o7.w, r4.w
    mov o7.xyz, r0

mov r20, c200
if_eq r20.y, c220.x
	// move based on depth buffer:
	mov r30.x, c220.y
else
	// move to infintiy:
	mov r30.x, c220.w
endif

texldl r31, c220.z, s3

if_eq r30.x, c220.w
	// Move bloom depth to infinity, which seems to work. This may not be accurate
	// for close lights - I'll see how it looks, but this shader is being a PITA
	// to experiment with since it isn't reloading live.
	mad r4.x, r31.x, r31.y, r4.x
endif
if_eq r30.x, c220.y
	// Auto depth: sample a number of points on the depth buffer to
	// determine an appropriate depth for this object, starting at the near
	// clipping plane and working towards original x + separation.
	//
	// You can think of this as a line in three dimensional space that
	// starts at each eye and stretches out towards infinity. We sample 255
	// points along this line (evenly spaced in the X axis) and compare
	// with the depth buffer to find where the line is first intersected.
	//
	// Based on DarkStarSword's stereo crosshair code originally developed
	// for Miasmata, adapted to HLSL and made to use coordinates other than
	// (0,0), then adapted back to assembly for UE3.

	// Screen depth coordinates to sample around - Just using current
	// vertex for now. Would be better to use the center, but we can't look
	// up other vertices and the matrices don't seem to help find it:
	rcp r22.w, r4.w
	mul r22.xy, r4.xy, r22.w

	// near clipping plane
	//mov r20.w, c221.x // start at 50.0
	mov r31.w, c40.z
	add r31.w, r31.w, -c220.y
	add r31.w, r31.w, c150.y
	rcp r31.w, r31.w
	mul r20.w, r31.w, -c150.x

	// offset = separation * (near - convergence) / near
	add r31.w, r20.w, -r31.y
	mul r20.x, r31.w, r31.x
	rcp r31.w, r20.w
	mul r20.x, r20.x, r31.w

	// Total distance to cover
	// distance = separation - starting X offset:
	add r20.y, r31.x, -r20.x

	// old_offset = offset
	mov r21.x, r20.x

	// Precompute some constants:
	// separation * convergence:
	mul r31.w, r31.x, r31.y
	// distance / 255:
	mul r20.z, r20.y, c227.x

	rep i0
		// offset += distance / 255:
		add r20.x, r20.x, r20.z

		// Calculate W for this adjustment amount:
		// w = (separation * convergence) / (separation - offset):
		add r20.w, r31.x, -r20.x
		rcp r20.w, r20.w
		mul r20.w, r31.w, r20.w

		// sample_x = x + offset, sample_y = -y
		mov r23.y, -r22.y
		add r23.x, r22.x, r20.x
		// Convert to texture coordinates (coords / 2 + 0.5):
		mad r23.xy, r23.xy, c220.w, c220.w
		// Sample depth buffer:
		texldl r5, r23.xy, s2

		// Ignore reads of 1.0:
		if_ne r5.w, c220.y
			// scale depth buffer to world Z (game dependent - look for scaling applied to
			// the depth buffer wherever else it is used. In the case of UE3 we use
			// MinZ_MaxZRatio, but seems to vary per game):
			add r5.x, r5.w, -c150.y
			add r5.y, -r5.x, c40.z
			rcp r5.x, r5.x
			//cmp r5.x, r5.y, c40.w, r5.x
			mul r5.x, r5.x, c150.x

			// If the sampled depth is closer than the calculated depth, exit the loop:
			break_ge r20.w, r5.x
		endif

		// old_offset = offset
		mov r21.x, r20.x
	endrep

	// Finally adjust the X coordinate:
	add r31.w, r4.w, -r31.y
	mad r4.x, -r31.w, r31.x, r4.x
	mad r4.x, r21.x, r4.w, r4.x
endif

    mov o8, r4
