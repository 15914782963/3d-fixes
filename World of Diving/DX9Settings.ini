[General]

; UseRenderedShaders=true is nearly always useful, because it trims the
; list of shaders seen while hunting down to just those active in the
; current scene.  Disable this only if you get crashes during hunting.
UseRenderedShaders=true

; DumpAll will generate ASM text files for every shader seen by the game.
; This is usually worth doing once, but not useful for every run.
DumpAll=true

; Constant registers that will arrive in Vertex and Pixel Shaders, as
; c200.  The constants below will be assigned, based on the key preset.
DefVSConst1 = 200
DefPSConst1 = 200

; The PresetKeysList specifies which KEYs will be used.
; Multiple keys lists are supported.
; Note that the KEY sections are in hexadecimal
PresetsKeysList = 0;1;2;3;4;5;6;7;8;9;A;B;

; Allows textures to be cycled with Up/Down - use to hunt menu text CRC32
bCalcTexCRCatStart = true

; Makes it crash less when reloading shaders:
OverrideMethod = 2

; Update v0.13.4 seems to have added an exclusive fullscreen mode, which makes
; this profile switch unecessary:
; GameProfile = fxdplayer

; Mouse stopped working in game with Helix mod (works in menus)
InitMouse = false

; Force square surfaces (shadow maps) to be mono:
DefSquareSurfaceMode = 2

; Fix clipping on flashlight:
SkipSetScissorRect = true

; Steam screenshot feature on F12 crashes Unity games when Helix mod is loaded,
; bind SaveTextureLog to a F11 instead:
SaveTextureLogKey = 122

[KEY0]
; [ Selects a conservative convergence value of 0.03 so everything is behind
; the mask
Key = 219
Presets = 100;
Type = 1
[PRES100]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3cf5c28f
[KEY1]
; ] selects a slightly higher convergence value of 0.1 for greater 3D effect
; with body only just outside of mask, but sometimes bubbles may come inside
; the mask.
Key = 221
Presets = 101;
Type = 1
[PRES101]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3dcccccd
UseByDef = true

; Number row on keyboard sets UI depth to various values between screen depth
; and separation. 1-5 are used by the game, so are not used here.
; 5: Screen depth
; 6: 25% separation
; 7: 50% separation
; 8: 75% separation
; 9: 90% separation
; 0: 95% separation
[KEY2]
Key = 53
Presets = 6;
Type = 1
[PRES6]
Const3 = 0x00000000
[KEY3]
Key = 54
Presets = 7;
Type = 1
[PRES7]
Const3 = 0x3e800000
[KEY4]
Key = 55
Presets = 8;
Type = 1
[PRES8]
Const3 = 0x3f000000
[KEY5]
Key = 56
Presets = 9;
Type = 1
[PRES9]
Const3 = 0x3f400000
[KEY6]
Key = 57
Presets = A;
Type = 1
[PRESA]
Const3 = 0x3f666666
UseByDef = true
[KEY7]
Key = 48
Presets = B;
Type = 1
[PRESB]
Const3 = 0x3f733333

; U toggles Const1
[KEY8]
Key = 85
Presets = C;D;
Type = 1
[PRESC]
Const1 = 0x00000000
[PRESD]
Const1 = 0x3f800000

; I toggles Const2
[KEY9]
Key = 73
Presets = E;F;
Type = 1
[PRESE]
Const2 = 0x3f800000
[PRESF]
Const2 = 0x00000000




; Copy the MVP and inverted MV matrices to all lighting shaders to allow us to
; calculate the projection matrix and find the horizontal FOV. This technique
; was first used to fix Dreamfall Chapters - take a look at the forum thread
; for that game and it's fix for more details on how this works.


; Sometimes getting the matrices from the prepasslighting shader doesn't work,
; such as on the main menu, inconsistently in the Brony level and probably
; other places - I think this happens when only directional lighting is
; active. As such, we fetch it from a bunch of other shaders that render other
; things in the scene as well (avoiding things like GUI shaders, depth map
; shaders, etc that might be using a different projection matrix):


; Potential shaders to use on main menu
[VS61CAF50F]
; CRC32: 61CAF50F | Matched 3 variants of 3 shaders: Particles/Additive, Particles/Additive (Soft), Particles/Alpha Blended
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS59D14DE2]
; CRC32: 4AA396AE | Unity headers extracted from TreeSoftOcclusionLeaves.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS4AA396AE]
; CRC32: 59D14DE2 | Unity headers extracted from TreeSoftOcclusionBark.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4

; Everything currently in shaderoverride
[VS05FA3050]
; CRC32: 05FA3050 | Matched 4 variants of 2 shaders: Hidden/Nature/Terrain/Bumped Specular AddPass, Nature/Terrain/Bumped Specular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS06360260]
; CRC32: 06360260 | Matched 2 variants of 1 shaders: Hidden/TerrainEngine/Details/WavingDoublePass
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS0CBC369B]
; CRC32: 0CBC369B | Unity headers extracted from Plankton.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 8
[VS0D2263A1]
; CRC32: 0D2263A1 | Matched 8 variants of 4 shaders: Diffuse, Specular, Transparent/Cutout/Diffuse, Transparent/Cutout/Specular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS120854A4]
; CRC32: 120854A4 | Matched 24 variants of 3 shaders: Custom/FX/Airbubble, Custom/FX/Dust_Blend, Custom/FX/WaterSplash
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS14E1AD4F]
; CRC32: 14E1AD4F | Matched 2 variants of 1 shaders: Reflective/Bumped Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS1A016E3C]
; CRC32: 1A016E3C | Unity headers extracted from Lightbeam.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS218DF30F]
; CRC32: 218DF30F | Matched 2 variants of 1 shaders: Hidden/TerrainEngine/Details/WavingDoublePass
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS27400EAD]
; CRC32: 27400EAD | Matched 8 variants of 1 shaders: Custom/FX/HDR_Dark
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS3C9D9662]
; CRC32: 3C9D9662 | Matched 8 variants of 1 shaders: Custom/WaterUnder
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS3ED6B323]
; CRC32: 3ED6B323 | Matched 4 variants of 2 shaders: Hidden/TerrainEngine/Splatmap/Lightmap-AddPass, Nature/Terrain/Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS3F060847]
; CRC32: 3F060847 | Unity headers extracted from Dust.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS476A7CCF]
; CRC32: 476A7CCF | Matched 2 variants of 1 shaders: Reflective/Parallax Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS4B54A61E]
; CRC32: 4B54A61E | Unity headers extracted from Lightbeam_Detail.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS54CCAF9D]
; CRC32: 54CCAF9D | Matched 2 variants of 1 shaders: Parallax Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS5BC8C4D9]
; CRC32: 5BC8C4D9 | Matched 32 variants of 1 shaders: Hidden/FogVolume
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS62199933]
; CRC32: 62199933 | Matched 64 variants of 1 shaders: Terrain/Terrain Colormap Ultra U4
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS7A062DE4]
; CRC32: 7A062DE4 | Matched 2 variants of 1 shaders: Custom/Caustics/CausticsBumpedSpecular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VS85776EDF]
; CRC32: 85776EDF | Matched 8 variants of 1 shaders: Custom/Water
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSA1680770]
; CRC32: A1680770 | Matched 2 variants of 1 shaders: Parallax Specular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSB7284DE5]
; CRC32: B7284DE5 | Unity headers extracted from Dust.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSB8AB3C86]
; CRC32: B8AB3C86 | Matched 2 variants of 1 shaders: Enviro/BumpedDiffuseOverlaySM2
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSC27AB061]
; CRC32: C27AB061 | Matched 2 variants of 1 shaders: Custom/FX/Plankton
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 8
[VSC5E0F5ED]
; CRC32: C5E0F5ED | Matched 10 variants of 5 shaders: Bumped Diffuse, Bumped Specular, Diffuse Detail, Self-Illumin/Diffuse, Transparent/Cutout/Bumped Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSC69EA263]
; CRC32: C69EA263 | Unity headers extracted from Plankton.shader
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 8
[VSCB8336EE]
; CRC32: CB8336EE | Matched 2 variants of 1 shaders: Self-Illumin/Bumped Diffuse
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSCC47A416]
; CRC32: CC47A416 | Matched 2 variants of 1 shaders: Reflective/Bumped Specular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSD750C0B2]
; CRC32: D750C0B2 | Matched 17 variants of 2 shaders: Custom/FX/Dust, Custom/FX/Dust_View
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSDB0CA882]
; CRC32: DB0CA882 | Matched 2 variants of 1 shaders: Hidden/TerrainEngine/Details/BillboardWavingDoublePass
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSE0F22DED]
; CRC32: E0F22DED | Matched 4 variants of 2 shaders: Reflective/Diffuse, Reflective/Specular
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSEDE49E78]
; CRC32: EDE49E78 | Matched 8 variants of 1 shaders: Custom/FX/HDR
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4
[VSFB13363B]
; CRC32: FB13363B | Matched 2 variants of 1 shaders: Custom/FX/Dust
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
GetConst1FromReg = 4


; Unity Hidden/Internal-PrePassLighting.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; MV is in c0-c3. Invert this and place it back in c180
; MVP is in c4-c7. We only need the first column so only bother with c4
; This shader proved to be unreliable to get the matrices from when only
; directional lighting was in use, hence all the above shaders to get the
; matrices from elsewhere.
; When used in conjunction with above shaders, certain shadows broke
; inconsistently such as the shadow under the red tarpaulin in the Diving Base,
; and one shadow in the distance on the main menu.
[VSDF7A050C]
UseMatrix = true
;GetMatrixFromReg = 0
;InverseMatrix = true
MatrixReg = 180
;GetConst1FromReg = 4
SetConst1ToReg = 190



; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL SHADOWS_OFF
[PS0020AFE0]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_OFF SPOT
[PS04ED7E6B]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL SHADOWS_SCREEN
[PS0D1EC394]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL SHADOWS_SCREEN
[PS21FE5699]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT_COOKIE SHADOWS_CUBE
[PS284DA432]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL_COOKIE SHADOWS_OFF
[PS30543CCC]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL SHADOWS_SCREEN
[PS356BC878]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT_COOKIE SHADOWS_CUBE
[PS3CD83AD3]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT SHADOWS_OFF
[PS40045626]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SHADOWS_NATIVE SHADOWS_SOFT SPOT
[PS4369D874]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL_COOKIE SHADOWS_SCREEN
[PS49C3F4B4]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SHADOWS_SOFT SPOT
[PS4FD8532C]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT
[PS547CD7A9]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SHADOWS_NATIVE SHADOWS_SOFT SPOT
[PS57FC4695]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SHADOWS_NATIVE SPOT
[PS5B0A6D77]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL_COOKIE SHADOWS_SCREEN
[PS62F2B6BF]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SHADOWS_NATIVE SHADOWS_SOFT SPOT
[PS736137F7]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL_COOKIE SHADOWS_SCREEN
[PS7667285E]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SPOT
[PS7A9BF7A7]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT SHADOWS_CUBE
[PS81ED1203]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT
[PS893B94C1]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT SHADOWS_CUBE SHADOWS_SOFT
[PS921CDD6F]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT SHADOWS_CUBE
[PS95788CE2]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT
[PS9DAE0A20]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SHADOWS_NATIVE SPOT
[PSA1F71696]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT SHADOWS_CUBE
[PSA43F3389]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT_COOKIE SHADOWS_OFF
[PSB29F30D0]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SHADOWS_NATIVE SPOT
[PSB5628877]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT SHADOWS_OFF
[PSC5B3DACA]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL SHADOWS_OFF
[PSC8C82836]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT_COOKIE SHADOWS_CUBE
[PSCA11D98D]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SPOT
[PSCD7F5093]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT SHADOWS_CUBE SHADOWS_SOFT
[PSCDD3D9C8]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT SHADOWS_OFF
[PSD126442B]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT SHADOWS_CUBE SHADOWS_SOFT
[PSD9464729]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SPOT
[PSD9EACE72]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL SHADOWS_OFF
[PSDC5DB6D7]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_OFF SPOT
[PSE051955A]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL_COOKIE SHADOWS_OFF
[PSE0BDEC4E]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT_COOKIE SHADOWS_OFF
[PSEA0E4115]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SHADOWS_SOFT SPOT
[PSEE9B36D7]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - DIRECTIONAL_COOKIE SHADOWS_OFF
[PSF42872AF]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_OFF SPOT
[PSF4C40BBB]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - SHADOWS_DEPTH SHADOWS_SOFT SPOT
[PSFA0EA836]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassLighting.shader - POINT_COOKIE SHADOWS_OFF
[PSFE9BDFF4]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190


; Unity Hidden/Internal-PrePassCollectShadows.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; Note: This shader has an MVP matrix, but not the matching MV matrix.
[VSBAEDDED5]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassCollectShadows.shader - SHADOWS_NONATIVE SHADOWS_SPLIT_SPHERES
[PS871F16C5]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassCollectShadows.shader - SHADOWS_NONATIVE
[PSAFC69A8C]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassCollectShadows.shader - SHADOWS_NATIVE SHADOWS_SPLIT_SPHERES
[PSC24D6005]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

; Unity Hidden/Internal-PrePassCollectShadows.shader - SHADOWS_NATIVE
[PSDF3A8F27]
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190



; Blacklist UI depth adjustment for textures on diving computer
; 3CC5D9BA - compass + rectangle around depth
; 89659645 - rectangle around target
; 678158B5 - waypoint triangle
; 6337461D - black mask behind text
; Text CRC changes every time the game is launched, so there is no way to
; match it - my guess is that the font is rendered to a texture at run-time, and
; the CRC is calculated before that while the render target is full of garbage.
; D9269636 - Scuba-scooter background
; 0F6187BA - Scuba-scooter foreground
; 06CD13A5 - Scuba-scooter mask
[VS364BA958]
CheckTexCRC = true
ValNotDefined = 0
ValForDefined = 1
TexCounterReg = 251
UseDefinedOnly = false
DefinedTexturesVS = 3CC5D9BA;89659645;678158B5;D9269636;0F6187BA;06CD13A5;6337461D;
VBOffsetList = 0;
[VB364BA958.0]
[VSA8D32517]
CheckTexCRC = true
ValNotDefined = 0
ValForDefined = 1
TexCounterReg = 251
UseDefinedOnly = false
DefinedTexturesVS = 3CC5D9BA;89659645;678158B5;D9269636;0F6187BA;06CD13A5;6337461D;
VBOffsetList = 0;
[VBA8D32517.0]

; Since we can't match the text CRC, let's just disable the UI adjustment
; whenever the tab key is held down. This makes the above texture blacklist
; redundant, but I'm leaving it in anyway:
[KEYA]
Key = 9
Presets = 10;11;
Type = 2
[PRES10]
Const4 = 0x3f800000
[PRES11]
Const4 = 0x00000000



; The following shaders already use s0, so use s3 instead
; We need to add 257 to the sampler number for vertex shaders
[VSDF54687F]
; Large bubble shader
DefVSSampler = 260
[VS146CB997]
DefVSSampler = 260
[VS58FC6C58]
DefVSSampler = 260
[VS593172D6]
DefVSSampler = 260
[VS609B50DC]
DefVSSampler = 260
[VS7AE68602]
DefVSSampler = 260
[VSA4433CC6]
DefVSSampler = 260
[VSA501E3FF]
DefVSSampler = 260
