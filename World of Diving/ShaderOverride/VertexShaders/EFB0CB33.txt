// CRC32: EFB0CB33 | Unity headers extracted from Hair.shader
// Shader "Custom/Character/Hair" {
//   Properties {
//    _Color ("Color", Color) = (0.433823,0,0,0.101961)
//    _MainTex ("MainTex", 2D) = "white" {}
//    _Normal ("Normal", 2D) = "bump" {}
//    _Specular ("Specular", Float) = 0
//    _Gloss ("Gloss", Float) = 0
//    _Fresnel ("Fresnel ", Float) = 5
//    _UseVertexColor ("Use Vertex Color", Float) = 0
//    _Cube ("Cube", CUBE) = "_Skybox" {}
//    _CubeStrength ("Cube Strength", Float) = 0
//    _FresnelStrength ("Fresnel Strength", Float) = 0
//   [HideInInspector]  _Cutoff ("Alpha cutoff", Range(0,1)) = 0.5
//   }
//   Fallback "Transparent/Cutout/Specular"
//   SubShader 1/1 {
//     Tags { "QUEUE"="AlphaTest" "RenderType"="TransparentCutout" }
//     Pass 4/4 {
//       Name "SHADOWCASTER"
//       Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "QUEUE"="AlphaTest" "RenderType"="TransparentCutout" }
//       Cull Off
//       Fog { Mode Off }
//       Offset 1, 1
//       Program "vp" {
//         SubProgram "d3d9 " {
//           Keywords { "SHADOWS_DEPTH" }
//           Bind "vertex" Vertex
//           Bind "texcoord" TexCoord0
//           Matrix 0 [glstate_matrix_mvp]
//           Vector 4 [unity_LightShadowBias]
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    vs_3_0
    dcl_position o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    def c5, 0, 0, 0, 0
    dcl_position v0
    dcl_texcoord v1

def c220, 0, 1, 0.0625, 0.5
dcl_2d s0

    dp4 r0.x, v0, c2
    add r0.x, r0, c4
    max r0.y, r0.x, c5.x
    add r0.y, r0, -r0.x
    mad r0.z, r0.y, c4.y, r0.x
    dp4 r0.w, v0, c3
    dp4 r0.x, v0, c0
    dp4 r0.y, v0, c1
    mov o0, r0

// Automatic vertex shader halo fix inserted with DarkStarSword's shadertool.py:
// shadertool.py -i --auto-fix-vertex-halo --only-autofixed EFB0CB33.txt
texldl r1, c220.z, s0
add r1.w, r0.w, -r1.y
mad r0.x, r1.w, r1.x, r0.x

    mov o1, r0
    mov o2.xy, v1

// approximately 11 instruction slots used
