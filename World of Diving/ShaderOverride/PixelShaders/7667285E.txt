// CRC32: 7667285E | Unity headers extracted from Internal-PrePassLighting.shader
// Shader "Hidden/Internal-PrePassLighting" {
//   Properties {
//    _LightTexture0 ("", any) = "" {}
//    _LightTextureB0 ("", 2D) = "" {}
//    _ShadowMapTexture ("", any) = "" {}
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 2/3 {
//       Tags { "ShadowSupport"="True" }
//       ZWrite Off
//       Fog { Mode Off }
//       Blend One One
//       Program "fp" {
//         SubProgram "d3d9 " {
//           Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
//           Matrix 0 [_CameraToWorld]
//           Matrix 4 [_LightMatrix0]
//           Vector 8 [_WorldSpaceCameraPos]
//           Vector 9 [_ProjectionParams]
//           Vector 10 [_ZBufferParams]
//           Vector 11 [_LightShadowData]
//           Vector 12 [unity_ShadowFadeCenterAndType]
//           Vector 13 [_LightDir]
//           Vector 14 [_LightColor]
//           Vector 15 [unity_LightmapFade]
//           SetTexture 0 [_CameraNormalsTexture] 2D 0
//           SetTexture 1 [_CameraDepthTexture] 2D 1
//           SetTexture 2 [_ShadowMapTexture] 2D 2
//           SetTexture 3 [_LightTexture0] 2D 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

    ps_3_0
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    def c16, 1.00000000, 2.00000000, -1.00000000, 0.00000000
    def c17, 128.00000000, 0.21997070, 0.70703125, 0.07098389
    dcl_texcoord0 v0.xyzw
    dcl_texcoord1 v1.xyz

def c220, 0, 1, 0.0625, 0.5
dcl_2d s13

// This variant is SHADOWS_SCREEN, meaning it's copying a shadow generated in
// Hidden/Internal-PrePassCollectShadows to the screen, so we discard the
// stereo adjustment from the VS and get the screen coordinates directly:
mov r20, v0
texldl r31, c220.z, s13
add r31.w, r20.w, -r31.y
mul r31.w, r31.w, c220.w
mad r20.x, -r31.w, r31.x, r20.x

    rcp r0.x, r20.w
    mul r3.xy, r20, r0.x
    texld r0.x, r3, s1
    mad r0.w, r0.x, c10.x, c10.y
    rcp r0.y, v1.z
    mul r0.y, r0, c9.z
    mov r2.z, c16.x
    mul r0.xyz, v1, r0.y
    rcp r0.w, r0.w
    mul r2.xyw, r0.xyzz, r0.w // r2.w has depth


mov r30.y, c200.y // Load Const2
if_eq r30.y, c220.y // if Const2 == 1 (Plankton shader is active)
	// Use the projection matrix from the Plankton shader:
	mov r30.x, c195.x
else
	// This is a simplified version of the maths to find P.I[0,0] from MV.I and MVP
	// For a detailed explanation of what we are doing here, see this thread:
	// https://forums.geforce.com/default/topic/781954/3d-vision/dreamfall-chapters/post/4352670/#4352670

	// Transpose first component of the MV.I matrix regs into r30:
	mov r30.x, c180.x
	mov r30.y, c181.x
	mov r30.z, c182.x
	mov r30.w, c183.x
	dp4 r30.x, r30, c190 // Calculate P[0,0]
endif
rcp r30.x, r30.x // Calculate P.I[0,0]

texldl r31, c220.z, s13 // r31.x = separation, r31.y = convergence
add r31.w, r2.w, -r31.y // r31.w = depth - convergence
mul r31.w, r31.w, r31.x // r31.w = separation * (depth - convergence)
mad r2.x, -r31.w, r30.x, r2.x // X -= separation * (depth - convergence) * P.I[0,0]

    dp4 r4.x, r2.xywz, c0
    dp4 r3.z, r2.xywz, c2
    dp4 r3.w, r2.xywz, c1
    mov r1.z, r3
    mov r1.x, r4
    mov r1.y, r3.w
    add r2.xyz, r1, -c8
    dp3 r0.x, r2, r2
    rsq r1.w, r0.x
    texld r0, r3, s0
    mad r2.xyz, -r1.w, r2, -c13
    dp3 r1.w, r2, r2
    rsq r4.y, r1.w
    mul r2.xyz, r4.y, r2
    add r1.xyz, -r1, c12
    dp3 r1.x, r1, r1
    mad_pp r0.xyz, r0, c16.y, c16.z
    dp3_pp r4.z, r0, r0
    rsq_pp r1.w, r4.z
    mul_pp r0.xyz, r1.w, r0
    dp3_pp r1.w, r2, r0
    dp3_pp r0.x, r0, -c13
    rsq r1.x, r1.x
    max_pp r2.x, r1.w, c16.w
    rcp r2.y, r1.x
    mul_pp r0.w, r0, c17.x
    pow_pp r1, r2.x, r0.w
    add r0.w, -r2, r2.y
    mad r1.y, r0.w, c12.w, r2.w
    mov_pp r4.y, r3.w
    mov_pp r4.w, c16.x
    mov_pp r4.z, r3
    dp4 r2.x, r4, c4
    dp4 r2.y, r4, c5
    texld r0.w, r2, s3
    texld r2.x, r3, s2
    mad_sat r1.z, r1.y, c11, c11.w
    add_sat r1.z, r2.x, r1
    mul r1.z, r1, r0.w
    mov_sat r0.w, r1.z
    max_pp r0.x, r0, c16.w
    mul r0.w, r1.x, r0
    mov_pp r2.xyz, c14
    dp3_pp r1.x, c17.yzww, r2
    mul r0.w, r0, r1.x
    mad r0.y, r1, c15.z, c15.w
    add_sat r1.x, -r0.y, c16
    mul r0.x, r1.z, r0
    mul r0.xyz, r0.x, c14
    mul_pp oC0, r0, r1.x
