// 3DMigoto: 60bce5d3438df4ec | Matched 16 variants of 1 shaders: Custom/Water/Water_Under_Test
// 
//       Unity headers extracted from Water_Under.shader
//       Shader "Custom/Water/Water_Under_Test" {
//         Properties {
//          _Color1 ("Color1", Color) = (0.186202,0.36947,0.904412,1)
//          _Specular ("Specular", Color) = (0.5,0.5,0.5,1)
//          _Glossiness ("Glossiness", Range(0,1)) = 1
//          _Distance ("Distance", Float) = 25
//          _Distance_Power ("Distance_Power", Float) = 0.2
//          _DistanceVertex ("Distance Vertex", Float) = 25
//          _Tessellation ("Tessellation", Float) = 5
//          _Alpha1 ("Alpha1", Float) = 1
//          _Alpha2 ("Alpha2", Float) = 0.3
//          _BumpMap ("Normal", 2D) = "bump" { }
//          _NormalStrength ("NormalStrength", Range(-1,1)) = 0.2
//          _MainTex ("MainTex", 2D) = "white" { }
//          _VertexStrength ("Vertex Strength", Range(0,0.2)) = 0
//          _Speed ("Speed", Float) = 0
//          _BumpMap_Detail ("Normal Detail", 2D) = "bump" { }
//          _DetailStrength ("Detail Strength", Range(-1,1)) = 0
//          _TexDetail ("Tex Detail", 2D) = "white" { }
//          _DetailVertexStrength ("Detail Vertex Strength", Range(0,0.2)) = 0
//          _DetailSpeed ("Detail Speed", Float) = 0
//          _Refraction ("Refraction", Float) = 0.02
//         [HideInInspector]  _Cutoff ("Alpha cutoff", Range(0,1)) = 0.5
//         }
//         Fallback "Diffuse"
//         SubShader 1/1 {
//           Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//           GrabPass {
//            }
//           Pass 1/3 {
//             Name "FORWARD"
//             Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Transparent" }
//             ZWrite Off
//             Cull Front
//             Blend SrcAlpha OneMinusSrcAlpha
//             GpuProgramID 45165
//             Program "vp" {
//               SubProgram "d3d11 " {
// 1000:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP" "LIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
// 0100:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP" "LIGHTMAP_OFF" "SHADOWS_OFF" }
// 4000:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
// 0400:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
// 0010:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
// 0001:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_OFF" }
// 0040:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
// 0004:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
// 2000:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP" "LIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
// 0200:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP" "LIGHTMAP_OFF" "SHADOWS_OFF" }
// 8000:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
// 0800:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
// 0020:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
// 0002:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_OFF" }
// 0080:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
// 0008:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
//                 Bind "vertex" Vertex
//                 Bind "color" Color
//                 Bind "normal" Normal
//                 Bind "tangent" TexCoord4
//                 SetTexture 0 [_MainTex] 2D 0
//                 SetTexture 1 [_TexDetail] 2D 1
//                 ConstBuffer "$Globals" 336
//                 Vector 144 [_TimeEditor]
//                 Float 240 [_Speed]
//                 Float 252 [_DetailSpeed]
//                 Float 256 [_VertexStrength]
//                 Float 260 [_DetailVertexStrength]
//                 Vector 272 [_MainTex_ST]
//                 Vector 288 [_TexDetail_ST]
//                 ConstBuffer "UnityPerCamera" 144
//                 Vector 0 [_Time]
//                 Vector 80 [_ProjectionParams]
//                 ConstBuffer "UnityPerDraw" 336
//                 Matrix 0 [glstate_matrix_mvp]
//                 Matrix 64 [glstate_matrix_modelview0]
//                 Matrix 192 [_Object2World]
//                 Matrix 256 [_World2Object]
//                 BindCB "$Globals" 0
//                 BindCB "UnityPerCamera" 1
//                 BindCB "UnityPerDraw" 2
//               }
//             }
//           }
//         }
//       }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model vs_4_0

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[19];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[19];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float4 v2 : TANGENT0,
  float4 v3 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float p2 : TEXCOORD6,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : COLOR0,
  out float4 o7 : TEXCOORD5)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cb2[13].xz * v0.yy;
  r0.xy = cb2[12].xz * v0.xx + r0.xy;
  r0.xy = cb2[14].xz * v0.zz + r0.xy;
  r0.xy = cb2[15].xz * v0.ww + r0.xy;
  r0.z = cb1[0].x + cb0[9].x;
  r0.zw = cb0[15].xw * r0.zz;
  r1.xy = r0.ww * float2(0.200000003,0.100000001) + r0.xy;
  r1.xy = r1.xy * cb0[18].xy + cb0[18].zw;
  r1.xyzw = t1.SampleLevel(s1_s, r1.xy, 0).xyzw;
  r2.xyzw = float4(0.5,0.5,0.100000001,0.100000001) + r0.xyxy;
  r1.yw = r0.ww * float2(0.150000006,-0.100000001) + r2.zw;
  r2.xy = r0.zz * float2(-0.100000001,0) + r2.xy;
  r2.xy = r2.xy * cb0[17].xy + cb0[17].zw;
  r2.xyzw = t0.SampleLevel(s0_s, r2.xy, 0).xyzw;
  r1.yw = r1.yw * cb0[18].xy + cb0[18].zw;
  r3.xyzw = t1.SampleLevel(s1_s, r1.yw, 0).xyzw;
  r1.xy = r3.xz + r1.xz;
  r1.zw = float2(0.300000012,0.300000012) + r0.xy;
  r1.zw = r0.ww * float2(-0.100000001,0.100000001) + r1.zw;
  r1.zw = r1.zw * cb0[18].xy + cb0[18].zw;
  r3.xyzw = t1.SampleLevel(s1_s, r1.zw, 0).xyzw;
  r1.xy = r3.xz + r1.xy;
  r1.zw = r0.ww * float2(-0.100000001,-0.100000001) + r0.xy;
  r0.xy = r0.zz * float2(0.200000003,-0.00999999978) + r0.xy;
  r0.xy = r0.xy * cb0[17].xy + cb0[17].zw;
  r0.xyzw = t0.SampleLevel(s0_s, r0.xy, 0).xyzw;
  r0.xy = r2.xz + r0.xz;
  r0.zw = float2(0.600000024,0.600000024) + r1.zw;
  r0.zw = r0.zw * cb0[18].xy + cb0[18].zw;
  r2.xyzw = t1.SampleLevel(s1_s, r0.zw, 0).xyzw;
  r0.zw = r2.xz + r1.xy;
  r0.zw = cb0[16].yy * r0.zw;
  r0.xy = r0.xy * cb0[16].xx + r0.zw;
  r0.xy = r0.xy * r0.xy;
  r0.z = 0;
  r0.xyz = v0.xyz + r0.xyz;
  r1.xyzw = cb2[1].xyzw * r0.yyyy;
  r1.xyzw = cb2[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb2[2].xyzw * r0.zzzz + r1.xyzw;
  r1.xyzw = cb2[3].xyzw * v0.wwww + r1.xyzw;
  o0.xyzw = r1.xyzw;

float4 stereo = StereoParams.Load(0);
r1.x += stereo.x * (r1.w - stereo.y);

  r2.xyzw = cb2[13].xyzw * r0.yyyy;
  r2.xyzw = cb2[12].xyzw * r0.xxxx + r2.xyzw;
  r2.xyzw = cb2[14].xyzw * r0.zzzz + r2.xyzw;
  o1.xyzw = cb2[15].xyzw * v0.wwww + r2.xyzw;
  p2.x = r1.z;
  r2.x = cb2[16].x * -v1.x;
  r2.y = cb2[17].x * -v1.x;
  r2.z = cb2[18].x * -v1.x;
  r3.x = cb2[16].y * -v1.y;
  r3.y = cb2[17].y * -v1.y;
  r3.z = cb2[18].y * -v1.y;
  r2.xyz = r3.xyz + r2.xyz;
  r3.x = cb2[16].z * -v1.z;
  r3.y = cb2[17].z * -v1.z;
  r3.z = cb2[18].z * -v1.z;
  r2.xyz = r3.xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  o2.xyz = r2.xyz;
  r3.xyz = cb2[13].xyz * v2.yyy;
  r3.xyz = cb2[12].xyz * v2.xxx + r3.xyz;
  r3.xyz = cb2[14].xyz * v2.zzz + r3.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  o3.xyz = r3.xyz;
  r4.xyz = r3.yzx * r2.zxy;
  r2.xyz = r2.yzx * r3.zxy + -r4.xyz;
  r2.xyz = v2.www * r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  o4.xyz = r2.xyz * r0.www;
  o5.xyzw = r1.xyzw;
  o6.xyzw = v3.xyzw;
  r0.y = cb2[5].z * r0.y;
  r0.x = cb2[4].z * r0.x + r0.y;
  r0.x = cb2[6].z * r0.z + r0.x;
  r0.x = cb2[7].z * v0.w + r0.x;
  o7.z = -r0.x;
  r0.x = cb1[5].x * r1.y;
  r0.w = 0.5 * r0.x;
  r0.xz = float2(0.5,0.5) * r1.xw;
  o7.w = r1.w;
  o7.xy = r0.xw + r0.zz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.1 on Sun Aug 23 23:15:08 2015
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 6      w        2     NONE   float      w
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// COLOR                    0   xyzw        6     NONE   float   xyzw
// TEXCOORD                 5   xyzw        7     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[19], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[19], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o2.w
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_temps 5
mul r0.xy, v0.yyyy, cb2[13].xzxx
mad r0.xy, cb2[12].xzxx, v0.xxxx, r0.xyxx
mad r0.xy, cb2[14].xzxx, v0.zzzz, r0.xyxx
mad r0.xy, cb2[15].xzxx, v0.wwww, r0.xyxx
add r0.z, cb0[9].x, cb1[0].x
mul r0.zw, r0.zzzz, cb0[15].xxxw
mad r1.xy, r0.wwww, l(0.200000, 0.100000, 0.000000, 0.000000), r0.xyxx
mad r1.xy, r1.xyxx, cb0[18].xyxx, cb0[18].zwzz
sample_l r1.xyzw, r1.xyxx, t1.xyzw, s1, l(0.000000)
add r2.xyzw, r0.xyxy, l(0.500000, 0.500000, 0.100000, 0.100000)
mad r1.yw, r0.wwww, l(0.000000, 0.150000, 0.000000, -0.100000), r2.zzzw
mad r2.xy, r0.zzzz, l(-0.100000, 0.000000, 0.000000, 0.000000), r2.xyxx
mad r2.xy, r2.xyxx, cb0[17].xyxx, cb0[17].zwzz
sample_l r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
mad r1.yw, r1.yyyw, cb0[18].xxxy, cb0[18].zzzw
sample_l r3.xyzw, r1.ywyy, t1.xyzw, s1, l(0.000000)
add r1.xy, r1.xzxx, r3.xzxx
add r1.zw, r0.xxxy, l(0.000000, 0.000000, 0.300000, 0.300000)
mad r1.zw, r0.wwww, l(0.000000, 0.000000, -0.100000, 0.100000), r1.zzzw
mad r1.zw, r1.zzzw, cb0[18].xxxy, cb0[18].zzzw
sample_l r3.xyzw, r1.zwzz, t1.xyzw, s1, l(0.000000)
add r1.xy, r1.xyxx, r3.xzxx
mad r1.zw, r0.wwww, l(0.000000, 0.000000, -0.100000, -0.100000), r0.xxxy
mad r0.xy, r0.zzzz, l(0.200000, -0.010000, 0.000000, 0.000000), r0.xyxx
mad r0.xy, r0.xyxx, cb0[17].xyxx, cb0[17].zwzz
sample_l r0.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
add r0.xy, r0.xzxx, r2.xzxx
add r0.zw, r1.zzzw, l(0.000000, 0.000000, 0.600000, 0.600000)
mad r0.zw, r0.zzzw, cb0[18].xxxy, cb0[18].zzzw
sample_l r2.xyzw, r0.zwzz, t1.xyzw, s1, l(0.000000)
add r0.zw, r1.xxxy, r2.xxxz
mul r0.zw, r0.zzzw, cb0[16].yyyy
mad r0.xy, r0.xyxx, cb0[16].xxxx, r0.zwzz
mul r0.xy, r0.xyxx, r0.xyxx
mov r0.z, l(0)
add r0.xyz, r0.xyzx, v0.xyzx
mul r1.xyzw, r0.yyyy, cb2[1].xyzw
mad r1.xyzw, cb2[0].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb2[2].xyzw, r0.zzzz, r1.xyzw
mad r1.xyzw, cb2[3].xyzw, v0.wwww, r1.xyzw
mov o0.xyzw, r1.xyzw
mul r2.xyzw, r0.yyyy, cb2[13].xyzw
mad r2.xyzw, cb2[12].xyzw, r0.xxxx, r2.xyzw
mad r2.xyzw, cb2[14].xyzw, r0.zzzz, r2.xyzw
mad o1.xyzw, cb2[15].xyzw, v0.wwww, r2.xyzw
mov o2.w, r1.z
mul r2.x, -v1.x, cb2[16].x
mul r2.y, -v1.x, cb2[17].x
mul r2.z, -v1.x, cb2[18].x
mul r3.x, -v1.y, cb2[16].y
mul r3.y, -v1.y, cb2[17].y
mul r3.z, -v1.y, cb2[18].y
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.x, -v1.z, cb2[16].z
mul r3.y, -v1.z, cb2[17].z
mul r3.z, -v1.z, cb2[18].z
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mov o2.xyz, r2.xyzx
mul r3.xyz, v2.yyyy, cb2[13].xyzx
mad r3.xyz, cb2[12].xyzx, v2.xxxx, r3.xyzx
mad r3.xyz, cb2[14].xyzx, v2.zzzz, r3.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mov o3.xyz, r3.xyzx
mul r4.xyz, r2.zxyz, r3.yzxy
mad r2.xyz, r2.yzxy, r3.zxyz, -r4.xyzx
mul r2.xyz, r2.xyzx, v2.wwww
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul o4.xyz, r0.wwww, r2.xyzx
mov o5.xyzw, r1.xyzw
mov o6.xyzw, v3.xyzw
mul r0.y, r0.y, cb2[5].z
mad r0.x, cb2[4].z, r0.x, r0.y
mad r0.x, cb2[6].z, r0.z, r0.x
mad r0.x, cb2[7].z, v0.w, r0.x
mov o7.z, -r0.x
mul r0.x, r1.y, cb1[5].x
mul r0.w, r0.x, l(0.500000)
mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
mov o7.w, r1.w
add o7.xy, r0.zzzz, r0.xwxx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
