cbuffer cb1 : register(b1)
{
  float4 cb1[19];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[6];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float4 v3 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2,
  out float4 o4 : COLOR0,
  out float4 o5 : TEXCOORD3)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb1[1].xyzw * v0.yyyy;
  r0.xyzw = cb1[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb1[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = cb1[3].xyzw * v0.wwww + r0.xyzw;
  o0.xyzw = r0.xyzw;
  o1.xy = v2.xy;
  r1.xyzw = cb1[13].xyzw * v0.yyyy;
  r1.xyzw = cb1[12].xyzw * v0.xxxx + r1.xyzw;
  r1.xyzw = cb1[14].xyzw * v0.zzzz + r1.xyzw;
  o2.xyzw = cb1[15].xyzw * v0.wwww + r1.xyzw;
  o3.x = dot(v1.xyz, cb1[16].xyz);
  o3.y = dot(v1.xyz, cb1[17].xyz);
  o3.z = dot(v1.xyz, cb1[18].xyz);
  o4.xyzw = v3.xyzw;
  r0.y = cb0[5].x * r0.y;
  r1.xzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) * r0.xwy;
  o5.w = r0.w;
  o5.xy = r1.xw + r1.zz;
  r0.x = cb1[5].z * v0.y;
  r0.x = cb1[4].z * v0.x + r0.x;
  r0.x = cb1[6].z * v0.z + r0.x;
  r0.x = cb1[7].z * v0.w + r0.x;
  o5.z = -r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// COLOR                    0   xyzw        4     NONE   float   xyzw
// TEXCOORD                 3   xyzw        5     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb1[19], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 2
mul r0.xyzw, v0.yyyy, cb1[1].xyzw
mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
mad r0.xyzw, cb1[3].xyzw, v0.wwww, r0.xyzw
mov o0.xyzw, r0.xyzw
mov o1.xy, v2.xyxx
mul r1.xyzw, v0.yyyy, cb1[13].xyzw
mad r1.xyzw, cb1[12].xyzw, v0.xxxx, r1.xyzw
mad r1.xyzw, cb1[14].xyzw, v0.zzzz, r1.xyzw
mad o2.xyzw, cb1[15].xyzw, v0.wwww, r1.xyzw
dp3 o3.x, v1.xyzx, cb1[16].xyzx
dp3 o3.y, v1.xyzx, cb1[17].xyzx
dp3 o3.z, v1.xyzx, cb1[18].xyzx
mov o4.xyzw, v3.xyzw
mul r0.y, r0.y, cb0[5].x
mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
mov o5.w, r0.w
add o5.xy, r1.zzzz, r1.xwxx
mul r0.x, v0.y, cb1[5].z
mad r0.x, cb1[4].z, v0.x, r0.x
mad r0.x, cb1[6].z, v0.z, r0.x
mad r0.x, cb1[7].z, v0.w, r0.x
mov o5.z, -r0.x
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
