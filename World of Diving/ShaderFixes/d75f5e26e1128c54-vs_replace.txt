Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[19];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[19];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float4 v2 : TANGENT0,
  float2 v3 : TEXCOORD1,
  float2 v4 : TEXCOORD2,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float2 p1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float3 o3 : TEXCOORD3,
  out float3 o4 : TEXCOORD4,
  out float3 o5 : TEXCOORD5,
  out float4 o6 : TEXCOORD6,
  out float4 o7 : COLOR0,
  out float4 o8 : TEXCOORD7,
  out float4 o9 : TEXCOORD9)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cb2[13].xz * v0.yy;
  r0.xy = cb2[12].xz * v0.xx + r0.xy;
  r0.xy = cb2[14].xz * v0.zz + r0.xy;
  r0.xy = cb2[15].xz * v0.ww + r0.xy;
  r0.zw = float2(2.000000e-001,2.000000e-001) + r0.xy;
  r1.x = cb1[0].x + cb0[9].x;
  r1.x = cb0[14].y * r1.x;
  r0.zw = r1.xx * float2(-1.000000e-001,0.000000e+000) + r0.zw;
  r0.xy = r1.xx * float2(2.000000e-001,-1.000000e-002) + r0.xy;
  r0.xy = r0.xy * cb0[12].xy + cb0[12].zw;
  r1.xyzw = t0.SampleLevel(s0_s, r0.xy, 0.000000000e+000).xyzw;
  r0.xy = r0.zw * cb0[12].xy + cb0[12].zw;
  r0.xyzw = t0.SampleLevel(s0_s, r0.xy, 0.000000000e+000).xyzw;
  r0.xy = r0.wy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.xy = r1.wy * float2(2.000000e+000,2.000000e+000) + r0.xy;
  r0.xy = float2(-1.000000e+000,-1.000000e+000) + r0.xy;
  r0.xy = cb0[17].ww * r0.xy;
  r1.xyz = cb2[13].xyz * v0.yyy;
  r1.xyz = cb2[12].xyz * v0.xxx + r1.xyz;
  r1.xyz = cb2[14].xyz * v0.zzz + r1.xyz;
  r1.xyz = cb2[15].xyz * v0.www + r1.xyz;
  r1.xyz = -cb1[4].xyz + r1.xyz;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = sqrt(r0.z);
  r0.z = saturate(r0.z / cb0[18].y);
  r0.xy = r0.zz * -r0.xy + r0.xy;
  r0.z = 0.000000000e+000;
  r0.xyz = v0.xyz + r0.xyz;
  r1.xyzw = cb2[1].xyzw * r0.yyyy;
  r1.xyzw = cb2[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb2[2].xyzw * r0.zzzz + r1.xyzw;
  r1.xyzw = cb2[3].xyzw * v0.wwww + r1.xyzw;
  o0.xyzw = r1.xyzw;
  o1.xy = v3.xy;
  p1.xy = v4.xy;
  r2.xyzw = cb2[13].xyzw * r0.yyyy;
  r2.xyzw = cb2[12].xyzw * r0.xxxx + r2.xyzw;
  r2.xyzw = cb2[14].xyzw * r0.zzzz + r2.xyzw;
  o2.xyzw = cb2[15].xyzw * v0.wwww + r2.xyzw;
  r2.x = cb2[16].x * v1.x;
  r2.y = cb2[17].x * v1.x;
  r2.z = cb2[18].x * v1.x;
  r3.x = cb2[16].y * v1.y;
  r3.y = cb2[17].y * v1.y;
  r3.z = cb2[18].y * v1.y;
  r2.xyz = r3.xyz + r2.xyz;
  r3.x = cb2[16].z * v1.z;
  r3.y = cb2[17].z * v1.z;
  r3.z = cb2[18].z * v1.z;
  r2.xyz = r3.xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  o3.xyz = r2.xyz;
  r3.xyz = cb2[13].xyz * v2.yyy;
  r3.xyz = cb2[12].xyz * v2.xxx + r3.xyz;
  r3.xyz = cb2[14].xyz * v2.zzz + r3.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  o4.xyz = r3.xyz;
  r4.xyz = r3.yzx * r2.zxy;
  r2.xyz = r2.yzx * r3.zxy + -r4.xyz;
  r2.xyz = v2.www * r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  o5.xyz = r2.xyz * r0.www;
  o6.xyzw = r1.xyzw;
  o7.xyzw = v5.xyzw;
  r0.y = cb2[5].z * r0.y;
  r0.x = cb2[4].z * r0.x + r0.y;
  r0.x = cb2[6].z * r0.z + r0.x;
  r0.x = cb2[7].z * v0.w + r0.x;
  o8.z = -r0.x;
  r0.x = cb1[5].x * r1.y;
  r0.w = 5.000000000e-001 * r0.x;
  r0.xz = float2(5.000000e-001,5.000000e-001) * r1.xw;
  o8.w = r1.w;
  o8.xy = r0.xw + r0.zz;
  o9.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xy          3     NONE   float   xy  
// TEXCOORD                 2   xy          4     NONE   float   xy  
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// TEXCOORD                 5   xyz         5     NONE   float   xyz 
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// COLOR                    0   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 9   xyzw        9     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[19], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[19], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xy
dcl_input v4.xy
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.zw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_temps 5
mul r0.xy, v0.yyyy, cb2[13].xzxx
mad r0.xy, cb2[12].xzxx, v0.xxxx, r0.xyxx
mad r0.xy, cb2[14].xzxx, v0.zzzz, r0.xyxx
mad r0.xy, cb2[15].xzxx, v0.wwww, r0.xyxx
add r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.200000, 0.200000)
add r1.x, cb0[9].x, cb1[0].x
mul r1.x, r1.x, cb0[14].y
mad r0.zw, r1.xxxx, l(0.000000, 0.000000, -0.100000, 0.000000), r0.zzzw
mad r0.xy, r1.xxxx, l(0.200000, -0.010000, 0.000000, 0.000000), r0.xyxx
mad r0.xy, r0.xyxx, cb0[12].xyxx, cb0[12].zwzz
sample_l r1.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
mad r0.xy, r0.zwzz, cb0[12].xyxx, cb0[12].zwzz
sample_l r0.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
mad r0.xy, r0.wyww, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.xy, r1.wyww, l(2.000000, 2.000000, 0.000000, 0.000000), r0.xyxx
add r0.xy, r0.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, cb0[17].wwww
mul r1.xyz, v0.yyyy, cb2[13].xyzx
mad r1.xyz, cb2[12].xyzx, v0.xxxx, r1.xyzx
mad r1.xyz, cb2[14].xyzx, v0.zzzz, r1.xyzx
mad r1.xyz, cb2[15].xyzx, v0.wwww, r1.xyzx
add r1.xyz, r1.xyzx, -cb1[4].xyzx
dp3 r0.z, r1.xyzx, r1.xyzx
sqrt r0.z, r0.z
div_sat r0.z, r0.z, cb0[18].y
mad r0.xy, r0.zzzz, -r0.xyxx, r0.xyxx
mov r0.z, l(0)
add r0.xyz, r0.xyzx, v0.xyzx
mul r1.xyzw, r0.yyyy, cb2[1].xyzw
mad r1.xyzw, cb2[0].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb2[2].xyzw, r0.zzzz, r1.xyzw
mad r1.xyzw, cb2[3].xyzw, v0.wwww, r1.xyzw
mov o0.xyzw, r1.xyzw
mov o1.xy, v3.xyxx
mov o1.zw, v4.xxxy
mul r2.xyzw, r0.yyyy, cb2[13].xyzw
mad r2.xyzw, cb2[12].xyzw, r0.xxxx, r2.xyzw
mad r2.xyzw, cb2[14].xyzw, r0.zzzz, r2.xyzw
mad o2.xyzw, cb2[15].xyzw, v0.wwww, r2.xyzw
mul r2.x, v1.x, cb2[16].x
mul r2.y, v1.x, cb2[17].x
mul r2.z, v1.x, cb2[18].x
mul r3.x, v1.y, cb2[16].y
mul r3.y, v1.y, cb2[17].y
mul r3.z, v1.y, cb2[18].y
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.x, v1.z, cb2[16].z
mul r3.y, v1.z, cb2[17].z
mul r3.z, v1.z, cb2[18].z
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mov o3.xyz, r2.xyzx
mul r3.xyz, v2.yyyy, cb2[13].xyzx
mad r3.xyz, cb2[12].xyzx, v2.xxxx, r3.xyzx
mad r3.xyz, cb2[14].xyzx, v2.zzzz, r3.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mov o4.xyz, r3.xyzx
mul r4.xyz, r2.zxyz, r3.yzxy
mad r2.xyz, r2.yzxy, r3.zxyz, -r4.xyzx
mul r2.xyz, r2.xyzx, v2.wwww
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul o5.xyz, r0.wwww, r2.xyzx
mov o6.xyzw, r1.xyzw
mov o7.xyzw, v5.xyzw
mul r0.y, r0.y, cb2[5].z
mad r0.x, cb2[4].z, r0.x, r0.y
mad r0.x, cb2[6].z, r0.z, r0.x
mad r0.x, cb2[7].z, v0.w, r0.x
mov o8.z, -r0.x
mul r0.x, r1.y, cb1[5].x
mul r0.w, r0.x, l(0.500000)
mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
mov o8.w, r1.w
add o8.xy, r0.zzzz, r0.xwxx
mov o9.xyzw, l(0,0,0,0)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
