TextureCube<float4> t5 : register(t5);

TextureCube<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[8];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[5];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[19];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(v2.xyz, v2.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v5.xy / v5.ww;
  r0.w = -cb1[5].x * cb1[5].x;
  r2.xy = v6.xy / v6.ww;
  r1.w = t0.Sample(s3_s, r2.xy).x;
  r1.w = cb1[7].z * r1.w + cb1[7].w;
  r1.w = 1.000000e+000 / r1.w;
  r1.w = -cb1[5].y + r1.w;
  r1.w = max(0.000000000e+000, r1.w);
  r2.x = -cb1[5].y + v6.z;
  r2.x = max(0.000000000e+000, r2.x);
  r2.y = cb1[0].x + cb0[9].x;
  r2.yz = cb0[16].xy * r2.yy;
  r3.xyzw = r2.yyyy * float4(1.000000e-001,1.000000e-001,-1.000000e-001,1.000000e-001) + v1.xzxz;
  r3.xy = r3.xy * cb0[15].xy + cb0[15].zw;
  r3.xy = t1.Sample(s4_s, r3.xy).yw;
  r3.xy = r3.yx * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xyzw = float4(1.000000e-001,1.000000e-001,2.000000e-001,2.000000e-001) + v1.xzxz;
  r4.xy = r2.yy * float2(1.000000e-001,-1.000000e-001) + r4.xy;
  r4.xy = r4.xy * cb0[15].xy + cb0[15].zw;
  r4.xy = t1.Sample(s4_s, r4.xy).yw;
  r3.xy = r4.yx * float2(2.000000e+000,2.000000e+000) + r3.xy;
  r3.zw = float2(3.000000e-001,3.000000e-001) + r3.zw;
  r3.zw = r3.zw * cb0[15].xy + cb0[15].zw;
  r3.zw = t1.Sample(s4_s, r3.zw).yw;
  r3.zw = r3.wz * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r2.yw = r2.yy * float2(-1.000000e-001,-1.000000e-001) + v1.xz;
  r2.yw = float2(6.000000e-001,6.000000e-001) + r2.yw;
  r2.yw = r2.yw * cb0[15].xy + cb0[15].zw;
  r2.yw = t1.Sample(s4_s, r2.yw).yw;
  r2.yw = r2.wy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r3.xy = float2(-1.000000e+000,-1.000000e+000) + r3.xy;
  r3.xy = r3.xy + r3.zw;
  r2.yw = r3.xy + r2.yw;
  r2.yw = cb0[12].xx * r2.yw;
  r3.xy = cb0[10].xx * r2.yw;
  r1.z = r1.y * r0.w;
  r1.xy = r1.xz * float2(5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r0.w = -r2.x + r1.w;
  r1.zw = saturate(float2(5.000000e-001,3.333333e+000) * r0.ww);
  r1.xy = r1.zz * r3.xy + r1.xy;
  r1.xyz = t2.Sample(s2_s, r1.xy).xyz;
  r3.xyz = cb1[4].xyz + -v1.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r4.xy = r2.zz * float2(-1.000000e-001,0.000000e+000) + r4.zw;
  r4.xy = r4.xy * cb0[17].xy + cb0[17].zw;
  r4.xy = t3.Sample(s5_s, r4.xy).yw;
  r4.xy = r4.yx * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.zw = r2.zz * float2(2.000000e-001,-1.000000e-002) + v1.xz;
  r4.zw = r4.zw * cb0[17].xy + cb0[17].zw;
  r4.zw = t3.Sample(s5_s, r4.zw).yw;
  r4.xy = r4.wz * float2(2.000000e+000,2.000000e+000) + r4.xy;
  r4.xy = float2(-1.000000e+000,-1.000000e+000) + r4.xy;
  r4.xy = cb0[18].yy * r4.xy;
  r4.z = 2.000000000e+000;
  r5.xy = -r2.yw;
  r5.z = 1.000000000e+000;
  r6.z = dot(r4.xyz, r5.xyz);
  r6.xy = r6.zz * r4.xy;
  r2.yzw = r6.xyz * float3(5.000000e-001,5.000000e-001,1.000000e+000) + -r5.xyz;
  r0.w = dot(r2.yzw, r2.yzw);
  r0.w = rsqrt(r0.w);
  r2.yzw = r2.yzw * r0.www;
  r4.xyz = v4.xyz * r2.zzz;
  r4.xyz = r2.yyy * v3.xyz + r4.xyz;
  r0.xyz = r2.www * r0.xyz + r4.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(cb2[0].xyz, cb2[0].xyz);
  r0.w = rsqrt(r0.w);
  r2.yzw = cb2[0].xyz * r0.www;
  r0.w = cb0[10].w * 1.000000000e+001 + 1.000000000e+000;
  r0.w = exp2(r0.w);
  r3.w = dot(-r3.xyz, r0.xyz);
  r3.w = r3.w + r3.w;
  r4.xyz = r0.xyz * -r3.www + -r3.xyz;
  r3.w = 0.000000000e+000 < cb4[2].w;
  if (r3.w != 0) {
    r3.w = dot(r4.xyz, r4.xyz);
    r3.w = rsqrt(r3.w);
    r5.xyz = r4.xyz * r3.www;
    r6.xyz = cb4[0].xyz + -v1.xyz;
    r6.xyz = r6.xyz / r5.xyz;
    r7.xyz = cb4[1].xyz + -v1.xyz;
    r7.xyz = r7.xyz / r5.xyz;
    r8.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000) < r5.xyz;
    r6.xyz = r8.xyz ? r6.xyz : r7.xyz;
    r3.w = min(r6.x, r6.y);
    r3.w = min(r3.w, r6.z);
    r6.xyz = cb4[1].xyz + cb4[0].xyz;
    r7.xyz = r6.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + -cb4[2].xyz;
    r7.xyz = v1.xyz + r7.xyz;
    r5.xyz = r5.xyz * r3.www + r7.xyz;
    r5.xyz = -r6.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + r5.xyz;
  } else {
    r5.xyz = r4.xyz;
  }
  r3.w = 1.000000000e+000 + -cb0[10].w;
  r3.w = log2(r3.w);
  r3.w = 7.500000000e-001 * r3.w;
  r3.w = exp2(r3.w);
  r3.w = 7.000000000e+000 * r3.w;
  r5.xyzw = t4.SampleLevel(s0_s, r5.xyz, r3.w).xyzw;
  r4.w = log2(r5.w);
  r4.w = cb4[3].y * r4.w;
  r4.w = exp2(r4.w);
  r4.w = cb4[3].x * r4.w;
  r6.xyz = r4.www * r5.xyz;
  r5.w = cb4[1].w < 9.999899864e-001;
  if (r5.w != 0) {
    r5.w = 0.000000000e+000 < cb4[6].w;
    if (r5.w != 0) {
      r5.w = dot(r4.xyz, r4.xyz);
      r5.w = rsqrt(r5.w);
      r7.xyz = r5.www * r4.xyz;
      r8.xyz = cb4[4].xyz + -v1.xyz;
      r8.xyz = r8.xyz / r7.xyz;
      r9.xyz = cb4[5].xyz + -v1.xyz;
      r9.xyz = r9.xyz / r7.xyz;
      r10.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000) < r7.xyz;
      r8.xyz = r10.xyz ? r8.xyz : r9.xyz;
      r5.w = min(r8.x, r8.y);
      r5.w = min(r5.w, r8.z);
      r8.xyz = cb4[5].xyz + cb4[4].xyz;
      r9.xyz = r8.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + -cb4[6].xyz;
      r9.xyz = v1.xyz + r9.xyz;
      r7.xyz = r7.xyz * r5.www + r9.xyz;
      r4.xyz = -r8.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + r7.xyz;
    }
    r7.xyzw = t5.SampleLevel(s1_s, r4.xyz, r3.w).xyzw;
    r3.w = log2(r7.w);
    r3.w = cb4[7].y * r3.w;
    r3.w = exp2(r3.w);
    r3.w = cb4[7].x * r3.w;
    r4.xyz = r3.www * r7.xyz;
    r5.xyz = r4.www * r5.xyz + -r4.xyz;
    r6.xyz = cb4[1].www * r5.xyz + r4.xyz;
  }
  r4.xyz = -cb1[4].xyz + v1.xyz;
  r3.w = dot(r4.xyz, r4.xyz);
  r3.w = sqrt(r3.w);
  r3.w = -r3.w * 3.999999911e-002 + 1.000000000e+000;
  r4.x = 1.200000048e+000 * r3.w;
  r4.y = r4.x * r4.x;
  r4.x = saturate(r4.x * r4.y);
  r4.xyz = cb0[11].xyz * r4.xxx;
  r4.w = max(r4.x, r4.y);
  r4.w = max(r4.w, r4.z);
  r5.x = 2.000000000e+000 + r0.w;
  r5.x = 1.591549367e-001 * r5.x;
  r5.y = dot(-r2.yzw, r0.xyz);
  r5.y = r5.y + r5.y;
  r5.yzw = r0.xyz * -r5.yyy + -r2.yzw;
  r5.y = dot(r5.yzw, r3.xyz);
  r5.y = max(0.000000000e+000, r5.y);
  r5.y = log2(r5.y);
  r0.w = r5.y * r0.w;
  r0.w = exp2(r0.w);
  r5.yzw = cb0[6].xyz * r0.www;
  r5.xyz = r5.yzw * r5.xxx;
  r6.xyz = r6.xyz * r4.xyz;
  r4.xyz = r5.xyz * r4.xyz + r6.xyz;
  r0.w = dot(r0.xyz, r2.yzw);
  r0.w = max(0.000000000e+000, r0.w);
  r2.yzw = cb3[4].xyz + cb3[4].xyz;
  r4.w = 1.000000000e+000 + -r4.w;
  r5.xyz = cb0[13].xyz * r4.www;
  r2.yzw = r0.www * cb0[6].xyz + r2.yzw;
  r2.yzw = r2.yzw * r5.xyz + r4.xyz;
  r0.x = dot(r0.xyz, r3.xyz);
  r0.x = max(0.000000000e+000, r0.x);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.y = max(0.000000000e+000, r3.w);
  r0.x = log2(r0.x);
  r0.x = r0.y * r0.x;
  r0.x = exp2(r0.x);
  r0.y = round(r0.x);
  r0.x = r0.x + r0.y;
  r0.x = min(1.000000000e+000, r0.x);
  r0.y = cb0[14].y + -cb0[14].x;
  r0.x = r0.x * r0.y + cb0[14].x;
  r0.y = r2.x / cb0[10].y;
  r0.y = log2(r0.y);
  r0.y = cb0[10].z * r0.y;
  r0.y = exp2(r0.y);
  r0.y = min(1.000000000e+000, r0.y);
  r0.x = r0.x * r0.y;
  r0.x = r1.w * r0.x;
  r0.yzw = r2.yzw + -r1.xyz;
  o0.xyz = r0.xxx * r0.yzw + r1.xyz;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xy w
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[19], immediateIndexed
dcl_constantbuffer cb1[8], immediateIndexed
dcl_constantbuffer cb2[1], immediateIndexed
dcl_constantbuffer cb3[5], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyw
dcl_input_ps linear v6.xyzw
dcl_output o0.xyzw
dcl_temps 11
dp3 r0.x, v2.xyzx, v2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v2.xyzx
div r1.xy, v5.xyxx, v5.wwww
mul r0.w, cb1[5].x, -cb1[5].x
div r2.xy, v6.xyxx, v6.wwww
sample_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t0.yzwx, s3
mad r1.w, cb1[7].z, r1.w, cb1[7].w
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
add r1.w, r1.w, -cb1[5].y
max r1.w, r1.w, l(0.000000)
add r2.x, v6.z, -cb1[5].y
max r2.x, r2.x, l(0.000000)
add r2.y, cb0[9].x, cb1[0].x
mul r2.yz, r2.yyyy, cb0[16].xxyx
mad r3.xyzw, r2.yyyy, l(0.100000, 0.100000, -0.100000, 0.100000), v1.xzxz
mad r3.xy, r3.xyxx, cb0[15].xyxx, cb0[15].zwzz
sample_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t1.ywxz, s4
mad r3.xy, r3.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
add r4.xyzw, v1.xzxz, l(0.100000, 0.100000, 0.200000, 0.200000)
mad r4.xy, r2.yyyy, l(0.100000, -0.100000, 0.000000, 0.000000), r4.xyxx
mad r4.xy, r4.xyxx, cb0[15].xyxx, cb0[15].zwzz
sample_indexable(texture2d)(float,float,float,float) r4.xy, r4.xyxx, t1.ywxz, s4
mad r3.xy, r4.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), r3.xyxx
add r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.300000, 0.300000)
mad r3.zw, r3.zzzw, cb0[15].xxxy, cb0[15].zzzw
sample_indexable(texture2d)(float,float,float,float) r3.zw, r3.zwzz, t1.xzyw, s4
mad r3.zw, r3.wwwz, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mad r2.yw, r2.yyyy, l(0.000000, -0.100000, 0.000000, -0.100000), v1.xxxz
add r2.yw, r2.yyyw, l(0.000000, 0.600000, 0.000000, 0.600000)
mad r2.yw, r2.yyyw, cb0[15].xxxy, cb0[15].zzzw
sample_indexable(texture2d)(float,float,float,float) r2.yw, r2.ywyy, t1.xyzw, s4
mad r2.yw, r2.wwwy, l(0.000000, 2.000000, 0.000000, 2.000000), l(0.000000, -1.000000, 0.000000, -1.000000)
add r3.xy, r3.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
add r3.xy, r3.zwzz, r3.xyxx
add r2.yw, r2.yyyw, r3.xxxy
mul r2.yw, r2.yyyw, cb0[12].xxxx
mul r3.xy, r2.ywyy, cb0[10].xxxx
mul r1.z, r0.w, r1.y
mad r1.xy, r1.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
add r0.w, r1.w, -r2.x
mul_sat r1.zw, r0.wwww, l(0.000000, 0.000000, 0.500000, 3.333333)
mad r1.xy, r1.zzzz, r3.xyxx, r1.xyxx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t2.xyzw, s2
add r3.xyz, -v1.xyzx, cb1[4].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mad r4.xy, r2.zzzz, l(-0.100000, 0.000000, 0.000000, 0.000000), r4.zwzz
mad r4.xy, r4.xyxx, cb0[17].xyxx, cb0[17].zwzz
sample_indexable(texture2d)(float,float,float,float) r4.xy, r4.xyxx, t3.ywxz, s5
mad r4.xy, r4.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r4.zw, r2.zzzz, l(0.000000, 0.000000, 0.200000, -0.010000), v1.xxxz
mad r4.zw, r4.zzzw, cb0[17].xxxy, cb0[17].zzzw
sample_indexable(texture2d)(float,float,float,float) r4.zw, r4.zwzz, t3.xzyw, s5
mad r4.xy, r4.wzww, l(2.000000, 2.000000, 0.000000, 0.000000), r4.xyxx
add r4.xy, r4.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r4.xy, r4.xyxx, cb0[18].yyyy
mov r4.z, l(2.000000)
mov r5.xy, -r2.ywyy
mov r5.z, l(1.000000)
dp3 r6.z, r4.xyzx, r5.xyzx
mul r6.xy, r4.xyxx, r6.zzzz
mad r2.yzw, r6.xxyz, l(0.000000, 0.500000, 0.500000, 1.000000), -r5.xxyz
dp3 r0.w, r2.yzwy, r2.yzwy
rsq r0.w, r0.w
mul r2.yzw, r0.wwww, r2.yyzw
mul r4.xyz, r2.zzzz, v4.xyzx
mad r4.xyz, r2.yyyy, v3.xyzx, r4.xyzx
mad r0.xyz, r2.wwww, r0.xyzx, r4.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, cb2[0].xyzx, cb2[0].xyzx
rsq r0.w, r0.w
mul r2.yzw, r0.wwww, cb2[0].xxyz
mad r0.w, cb0[10].w, l(10.000000), l(1.000000)
exp r0.w, r0.w
dp3 r3.w, -r3.xyzx, r0.xyzx
add r3.w, r3.w, r3.w
mad r4.xyz, r0.xyzx, -r3.wwww, -r3.xyzx
lt r3.w, l(0.000000), cb4[2].w
if_nz r3.w
  dp3 r3.w, r4.xyzx, r4.xyzx
  rsq r3.w, r3.w
  mul r5.xyz, r3.wwww, r4.xyzx
  add r6.xyz, -v1.xyzx, cb4[0].xyzx
  div r6.xyz, r6.xyzx, r5.xyzx
  add r7.xyz, -v1.xyzx, cb4[1].xyzx
  div r7.xyz, r7.xyzx, r5.xyzx
  lt r8.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r5.xyzx
  movc r6.xyz, r8.xyzx, r6.xyzx, r7.xyzx
  min r3.w, r6.y, r6.x
  min r3.w, r6.z, r3.w
  add r6.xyz, cb4[0].xyzx, cb4[1].xyzx
  mad r7.xyz, r6.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb4[2].xyzx
  add r7.xyz, r7.xyzx, v1.xyzx
  mad r5.xyz, r5.xyzx, r3.wwww, r7.xyzx
  mad r5.xyz, -r6.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r5.xyzx
else 
  mov r5.xyz, r4.xyzx
endif 
add r3.w, -cb0[10].w, l(1.000000)
log r3.w, r3.w
mul r3.w, r3.w, l(0.750000)
exp r3.w, r3.w
mul r3.w, r3.w, l(7.000000)
sample_l_indexable(texturecube)(float,float,float,float) r5.xyzw, r5.xyzx, t4.xyzw, s0, r3.w
log r4.w, r5.w
mul r4.w, r4.w, cb4[3].y
exp r4.w, r4.w
mul r4.w, r4.w, cb4[3].x
mul r6.xyz, r5.xyzx, r4.wwww
lt r5.w, cb4[1].w, l(0.999990)
if_nz r5.w
  lt r5.w, l(0.000000), cb4[6].w
  if_nz r5.w
    dp3 r5.w, r4.xyzx, r4.xyzx
    rsq r5.w, r5.w
    mul r7.xyz, r4.xyzx, r5.wwww
    add r8.xyz, -v1.xyzx, cb4[4].xyzx
    div r8.xyz, r8.xyzx, r7.xyzx
    add r9.xyz, -v1.xyzx, cb4[5].xyzx
    div r9.xyz, r9.xyzx, r7.xyzx
    lt r10.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r7.xyzx
    movc r8.xyz, r10.xyzx, r8.xyzx, r9.xyzx
    min r5.w, r8.y, r8.x
    min r5.w, r8.z, r5.w
    add r8.xyz, cb4[4].xyzx, cb4[5].xyzx
    mad r9.xyz, r8.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb4[6].xyzx
    add r9.xyz, r9.xyzx, v1.xyzx
    mad r7.xyz, r7.xyzx, r5.wwww, r9.xyzx
    mad r4.xyz, -r8.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r7.xyzx
  endif 
  sample_l_indexable(texturecube)(float,float,float,float) r7.xyzw, r4.xyzx, t5.xyzw, s1, r3.w
  log r3.w, r7.w
  mul r3.w, r3.w, cb4[7].y
  exp r3.w, r3.w
  mul r3.w, r3.w, cb4[7].x
  mul r4.xyz, r7.xyzx, r3.wwww
  mad r5.xyz, r4.wwww, r5.xyzx, -r4.xyzx
  mad r6.xyz, cb4[1].wwww, r5.xyzx, r4.xyzx
endif 
add r4.xyz, v1.xyzx, -cb1[4].xyzx
dp3 r3.w, r4.xyzx, r4.xyzx
sqrt r3.w, r3.w
mad r3.w, -r3.w, l(0.040000), l(1.000000)
mul r4.x, r3.w, l(1.200000)
mul r4.y, r4.x, r4.x
mul_sat r4.x, r4.y, r4.x
mul r4.xyz, r4.xxxx, cb0[11].xyzx
max r4.w, r4.y, r4.x
max r4.w, r4.z, r4.w
add r5.x, r0.w, l(2.000000)
mul r5.x, r5.x, l(0.159155)
dp3 r5.y, -r2.yzwy, r0.xyzx
add r5.y, r5.y, r5.y
mad r5.yzw, r0.xxyz, -r5.yyyy, -r2.yyzw
dp3 r5.y, r5.yzwy, r3.xyzx
max r5.y, r5.y, l(0.000000)
log r5.y, r5.y
mul r0.w, r0.w, r5.y
exp r0.w, r0.w
mul r5.yzw, r0.wwww, cb0[6].xxyz
mul r5.xyz, r5.xxxx, r5.yzwy
mul r6.xyz, r4.xyzx, r6.xyzx
mad r4.xyz, r5.xyzx, r4.xyzx, r6.xyzx
dp3 r0.w, r0.xyzx, r2.yzwy
max r0.w, r0.w, l(0.000000)
add r2.yzw, cb3[4].xxyz, cb3[4].xxyz
add r4.w, -r4.w, l(1.000000)
mul r5.xyz, r4.wwww, cb0[13].xyzx
mad r2.yzw, r0.wwww, cb0[6].xxyz, r2.yyzw
mad r2.yzw, r2.yyzw, r5.xxyz, r4.xxyz
dp3 r0.x, r0.xyzx, r3.xyzx
max r0.x, r0.x, l(0.000000)
add r0.x, -r0.x, l(1.000000)
max r0.y, r3.w, l(0.000000)
log r0.x, r0.x
mul r0.x, r0.x, r0.y
exp r0.x, r0.x
round_ne r0.y, r0.x
add r0.x, r0.y, r0.x
min r0.x, r0.x, l(1.000000)
add r0.y, -cb0[14].x, cb0[14].y
mad r0.x, r0.x, r0.y, cb0[14].x
div r0.y, r2.x, cb0[10].y
log r0.y, r0.y
mul r0.y, r0.y, cb0[10].z
exp r0.y, r0.y
min r0.y, r0.y, l(1.000000)
mul r0.x, r0.y, r0.x
mul r0.x, r0.x, r1.w
add r0.yzw, -r1.xxyz, r2.yyzw
mad o0.xyz, r0.xxxx, r0.yzwy, r1.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
