cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[19];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[14];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float3 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD7,
  out float4 o8 : TEXCOORD8)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb2[1].xyzw * v0.yyyy;
  r0.xyzw = cb2[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb2[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = cb2[3].xyzw * v0.wwww + r0.xyzw;
  o0.xyzw = r0.xyzw;
  o1.xy = v3.xy * cb0[10].xy + cb0[10].zw;
  o1.zw = v3.xy * cb0[11].xy + cb0[11].zw;
  o2.xy = v3.xy * cb0[12].xy + cb0[12].zw;
  o2.zw = v3.xy * cb0[13].xy + cb0[13].zw;
  r1.y = cb2[16].x * v2.x;
  r1.z = cb2[17].x * v2.x;
  r1.x = cb2[18].x * v2.x;
  r2.y = cb2[16].y * v2.y;
  r2.z = cb2[17].y * v2.y;
  r2.x = cb2[18].y * v2.y;
  r1.xyz = r2.xyz + r1.xyz;
  r2.y = cb2[16].z * v2.z;
  r2.z = cb2[17].z * v2.z;
  r2.x = cb2[18].z * v2.z;
  r1.xyz = r2.xyz + r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  o3.z = r1.y;
  r2.xy = float2(0.000000e+000,1.000000e+000) * v2.zx;
  r2.xy = v2.yz * float2(1.000000e+000,0.000000e+000) + -r2.xy;
  r2.yzw = cb2[13].yzx * r2.yyy;
  r2.xyz = cb2[12].yzx * r2.xxx + r2.yzw;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r3.xyz = r2.xyz * r1.xyz;
  r3.xyz = r1.zxy * r2.yzx + -r3.xyz;
  o3.y = -r3.x;
  r4.xyz = cb2[13].xyz * v0.yyy;
  r4.xyz = cb2[12].xyz * v0.xxx + r4.xyz;
  r4.xyz = cb2[14].xyz * v0.zzz + r4.xyz;
  r4.xyz = cb2[15].xyz * v0.www + r4.xyz;
  o3.w = r4.x;
  o3.x = r2.z;
  o4.z = r1.z;
  o5.z = r1.x;
  o4.x = r2.x;
  o5.x = r2.y;
  o4.w = r4.y;
  o5.w = r4.z;
  o4.y = -r3.y;
  o5.y = -r3.z;
  r1.x = cb2[1].z * v0.y;
  r1.x = cb2[0].z * v0.x + r1.x;
  r1.x = cb2[2].z * v0.z + r1.x;
  o6.z = cb2[3].z * v0.w + r1.x;
  o6.xy = v3.xy * cb0[9].xy + cb0[9].zw;
  r0.y = cb1[5].x * r0.y;
  r1.xzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) * r0.xwy;
  o7.zw = r0.zw;
  o7.xy = r1.xw + r1.zz;
  o8.zw = v5.xy * cb3[1].xy + cb3[1].zw;
  o8.xy = float2(0.000000e+000,0.000000e+000);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float   xy  
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
// TEXCOORD                 8   xyzw        8     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[14], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[19], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_input v0.xyzw
dcl_input v2.xyz
dcl_input v3.xy
dcl_input v5.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyz
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_temps 5
mul r0.xyzw, v0.yyyy, cb2[1].xyzw
mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
mad r0.xyzw, cb2[3].xyzw, v0.wwww, r0.xyzw
mov o0.xyzw, r0.xyzw
mad o1.xy, v3.xyxx, cb0[10].xyxx, cb0[10].zwzz
mad o1.zw, v3.xxxy, cb0[11].xxxy, cb0[11].zzzw
mad o2.xy, v3.xyxx, cb0[12].xyxx, cb0[12].zwzz
mad o2.zw, v3.xxxy, cb0[13].xxxy, cb0[13].zzzw
mul r1.y, v2.x, cb2[16].x
mul r1.z, v2.x, cb2[17].x
mul r1.x, v2.x, cb2[18].x
mul r2.y, v2.y, cb2[16].y
mul r2.z, v2.y, cb2[17].y
mul r2.x, v2.y, cb2[18].y
add r1.xyz, r1.xyzx, r2.xyzx
mul r2.y, v2.z, cb2[16].z
mul r2.z, v2.z, cb2[17].z
mul r2.x, v2.z, cb2[18].z
add r1.xyz, r1.xyzx, r2.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mov o3.z, r1.y
mul r2.xy, v2.zxzz, l(0.000000, 1.000000, 0.000000, 0.000000)
mad r2.xy, v2.yzyy, l(1.000000, 0.000000, 0.000000, 0.000000), -r2.xyxx
mul r2.yzw, r2.yyyy, cb2[13].yyzx
mad r2.xyz, cb2[12].yzxy, r2.xxxx, r2.yzwy
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
mul r3.xyz, r1.xyzx, r2.xyzx
mad r3.xyz, r1.zxyz, r2.yzxy, -r3.xyzx
mov o3.y, -r3.x
mul r4.xyz, v0.yyyy, cb2[13].xyzx
mad r4.xyz, cb2[12].xyzx, v0.xxxx, r4.xyzx
mad r4.xyz, cb2[14].xyzx, v0.zzzz, r4.xyzx
mad r4.xyz, cb2[15].xyzx, v0.wwww, r4.xyzx
mov o3.w, r4.x
mov o3.x, r2.z
mov o4.z, r1.z
mov o5.z, r1.x
mov o4.x, r2.x
mov o5.x, r2.y
mov o4.w, r4.y
mov o5.w, r4.z
mov o4.y, -r3.y
mov o5.y, -r3.z
mul r1.x, v0.y, cb2[1].z
mad r1.x, cb2[0].z, v0.x, r1.x
mad r1.x, cb2[2].z, v0.z, r1.x
mad o6.z, cb2[3].z, v0.w, r1.x
mad o6.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
mul r0.y, r0.y, cb1[5].x
mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
mov o7.zw, r0.zzzw
add o7.xy, r1.zzzz, r1.xwxx
mad o8.zw, v5.xxxy, cb3[1].xxxy, cb3[1].zzzw
mov o8.xy, l(0,0,0,0)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
