// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 776773e326f1b243-vs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 14:20:41 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz 
// ATTRIBUTE                1   xyzw        1     NONE   float   xyzw
// ATTRIBUTE                2   xyzw        2     NONE   float   xyzw
// ATTRIBUTE                3   xyzw        3     NONE   float   xyzw
// ATTRIBUTE                4   xy          4     NONE   float   xy  
// SV_VertexID              0   x           5   VERTID    uint   x   
// SV_InstanceID            0   x           6   INSTID    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// PARTICLE_SUBUVS          0   xyzw        4     NONE   float   xyzw
// PARTICLE_LIGHTING_OFFSET     0   xyz         5     NONE   float   xyz 
// PACKED_EYE_INDEX         0   x           6     NONE    uint   x   
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
// SV_POSITION              0   xyzw        8      POS   float   xyzw
// SV_ClipDistance          1   x           9  CLIPDST   float   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[165], immediateIndexed
dcl_constantbuffer cb2[165], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_constantbuffer cb4[13], immediateIndexed
dcl_constantbuffer cb5[29], immediateIndexed
dcl_constantbuffer cb6[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xy
dcl_input_sgv v5.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o6.x
dcl_output o7.xyzw
dcl_output_siv o8.xyzw, position
dcl_output_siv o9.x, clip_distance
dcl_temps 38
dcl_resource_structured t101, 2048
dcl_resource_structured t102, 2048
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 776773e326f1b243-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r15.xyzw, l(0), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r16.xyzw, l(0), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r17.xyzw, l(0), l(32), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r18.xyzw, l(0), l(48), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r19.xyzw, l(0), l(784), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r20.xyzw, l(0), l(800), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r21.xyzw, l(0), l(816), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r22.xyzw, l(0), l(832), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r23.xyzw, l(0), l(896), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r24.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r25.xyzw, l(1), l(176), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r26.xyzw, l(1), l(576), t101.xyzw


// cb2 remapped to t102 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 776773e326f1b243-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r27.xyzw, l(0), l(0), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r28.xyzw, l(0), l(16), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r29.xyzw, l(0), l(32), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r30.xyzw, l(0), l(48), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r31.xyzw, l(0), l(784), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r32.xyzw, l(0), l(800), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r33.xyzw, l(0), l(816), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r34.xyzw, l(0), l(832), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r35.xyzw, l(0), l(896), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r36.xyzw, l(0), l(944), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r37.xyzw, l(1), l(576), t102.xyzw

movc r0.x, cb0[0].x, l(1), l(0)
and r0.y, r0.x, cb0[3].y
if_z r0.y
  mov r1.x, r15.x
  mov r1.y, r16.x
  mov r1.z, r17.x
  mov r1.w, r18.x
  mov r2.x, r15.y
  mov r2.y, r16.y
  mov r2.z, r17.y
  mov r2.w, r18.y
  mov r3.x, r15.z
  mov r3.y, r16.z
  mov r3.z, r17.z
  mov r3.w, r18.z
  mov r4.x, r15.w
  mov r4.y, r16.w
  mov r4.z, r17.w
  mov r4.w, r18.w
  mov r5.xyz, r24.xyzx
  mov r0.z, r26.y
  mov r6.xyz, r19.xyzx
  mov r7.xyz, r20.xyzx
  mov r8.xyz, r21.xyzx
  mov r9.xyz, r22.xyzx
  mov r10.xyz, r23.xyzx
else 
  mov r1.x, r27.x
  mov r1.y, r28.x
  mov r1.z, r29.x
  mov r1.w, r30.x
  mov r2.x, r27.y
  mov r2.y, r28.y
  mov r2.z, r29.y
  mov r2.w, r30.y
  mov r3.x, r27.z
  mov r3.y, r28.z
  mov r3.z, r29.z
  mov r3.w, r30.z
  mov r4.x, r27.w
  mov r4.y, r28.w
  mov r4.z, r29.w
  mov r4.w, r30.w
  mov r5.xyz, r36.xyzx
  mov r0.z, r37.y
  mov r6.xyz, r31.xyzx
  mov r7.xyz, r32.xyzx
  mov r8.xyz, r33.xyzx
  mov r9.xyz, r34.xyzx
  mov r10.xyz, r35.xyzx
endif 
mul r11.xyz, v0.yyyy, cb3[1].xyzx
mad r11.xyz, v0.xxxx, cb3[0].xyzx, r11.xyzx
mad r11.xyz, v0.zzzz, cb3[2].xyzx, r11.xyzx
add r11.xyz, r11.xyzx, cb3[3].xyzx
mul r12.xyz, v1.yyyy, cb3[1].zxyz
mad r12.xyz, v1.xxxx, cb3[0].zxyz, r12.xyzx
mad r12.xyz, v1.zzzz, cb3[2].zxyz, r12.xyzx
add r12.xyz, r12.xyzx, cb3[3].zxyz
add r9.xyz, -r7.zxyz, r9.zxyz
mad r7.xyz, cb6[6].wwww, r9.xyzx, r7.zxyz
add r8.xyz, -r6.zxyz, r8.zxyz
mad r6.xyz, cb6[6].wwww, r8.xyzx, r6.zxyz
add r8.xyz, -r7.xyzx, cb6[0].zxyz
mad r7.xyz, cb6[0].wwww, r8.xyzx, r7.xyzx
add r8.xyz, r6.xyzx, cb6[1].zxyz
mad r6.xyz, cb6[1].wwww, r8.xyzx, -r6.xyzx
add r8.xyz, r10.yzxy, -r11.yzxy
dp3 r0.w, r8.xyzx, r8.xyzx
max r5.w, r0.w, l(0.010000)
rsq r5.w, r5.w
mul r8.xyz, r5.wwww, r8.xyzx
add r9.xyz, r11.zxyz, -r12.xyzx
dp3 r5.w, r9.xyzx, r9.xyzx
max r5.w, r5.w, l(0.010000)
rsq r5.w, r5.w
mul r9.xyz, r5.wwww, r9.xyzx
mul r10.xyz, r8.xyzx, r9.yzxy
mad r10.xyz, r8.zxyz, r9.zxyz, -r10.xyzx
dp3 r5.w, r10.xyzx, r10.xyzx
max r5.w, r5.w, l(0.010000)
rsq r5.w, r5.w
mul r10.xyz, r5.wwww, r10.xyzx
mul r12.xyz, r8.zxyz, cb6[0].yzxy
mad r12.xyz, cb6[0].xyzx, r8.xyzx, -r12.xyzx
dp3 r5.w, r12.xyzx, r12.xyzx
max r5.w, r5.w, l(0.010000)
rsq r5.w, r5.w
mul r12.xyz, r5.wwww, r12.xyzx
mul r13.xyz, r8.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mad r13.xyz, r8.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000), -r13.xyzx
dp2 r5.w, r13.yzyy, r13.yzyy
max r5.w, r5.w, l(0.010000)
rsq r5.w, r5.w
mul r13.xyz, r5.wwww, r13.xyzx
mul r14.xyz, r8.xyzx, r13.yzxy
mad r8.xyz, r8.zxyz, r13.zxyz, -r14.xyzx
lt r5.w, l(0.000000), cb6[6].x
if_nz r5.w
  mad_sat r0.w, r0.w, cb6[6].y, -cb6[6].z
  add r5.w, -r0.w, l(1.000000)
else 
  mov r5.w, cb6[2].x
  mov r0.w, cb6[2].w
endif 
mul r10.xyz, r10.xyzx, cb6[2].yyyy
mad r7.xyz, r7.xyzx, r5.wwww, r10.xyzx
mad r7.xyz, cb6[0].zxyz, cb6[2].zzzz, r7.xyzx
mad r7.xyz, r13.xyzx, r0.wwww, r7.xyzx
mul r9.xyz, -r9.xyzx, cb6[2].yyyy
mad r6.xyz, r6.xyzx, r5.wwww, r9.xyzx
mad r6.xyz, -r12.xyzx, cb6[2].zzzz, r6.xyzx
mad r6.xyz, r8.xyzx, r0.wwww, r6.xyzx
dp3 r0.w, r7.xyzx, r7.xyzx
rsq r0.w, r0.w
mul r7.xyz, r0.wwww, r7.xyzx
dp3 r0.w, r6.xyzx, r6.xyzx
rsq r0.w, r0.w
mul r6.xyz, r0.wwww, r6.xyzx
mad r0.w, v2.z, cb6[8].x, cb6[8].y
sincos r8.x, r9.x, r0.w
mul r8.yzw, r7.yyzx, r9.xxxx
mad r10.xyz, r8.xxxx, r6.yzxy, r8.yzwy
mul r7.xyz, r7.xyzx, r8.xxxx
mad r6.xyz, r9.xxxx, r6.xyzx, -r7.xyzx
lt r7.xy, l(0.000000, 0.000000, 0.000000, 0.000000), v2.xyxx
lt r7.zw, v2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
iadd r7.xy, -r7.xyxx, r7.zwzz
itof r7.xy, r7.xyxx
if_nz cb0[3].x
  utof r0.w, v5.x
  utof r5.w, cb0[3].x
  div r0.w, r0.w, r5.w
  ge r6.w, r0.w, -r0.w
  frc r0.w, r0.w
  movc r0.w, r6.w, r0.w, -r0.w
  mul r0.w, r5.w, r0.w
  ftou r0.w, r0.w
  mul r5.w, cb6[5].y, cb6[5].x
  div r6.w, v2.w, r5.w
  ge r7.z, r6.w, -r6.w
  frc r6.w, |r6.w|
  movc r6.w, r7.z, r6.w, -r6.w
  mul r5.w, r5.w, r6.w
  ftou r5.w, r5.w
  mul r6.w, r7.y, r7.x
  lt r6.w, r6.w, l(0.000000)
  iadd r7.z, cb0[3].x, l(-1)
  iadd r7.z, -r0.w, r7.z
  movc r0.w, r6.w, r7.z, r0.w
  imad r0.w, r5.w, cb0[3].x, r0.w
  ld_indexable(buffer)(float,float,float,float) r7.zw, r0.wwww, t0.zwxy
  lt r8.xy, r7.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r8.zw, -r7.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
  movc r8.xy, r8.xyxx, r8.zwzz, r7.zwzz
else 
  lt r7.xy, r7.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r8.zw, -v4.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
  movc r7.zw, r7.xxxy, r8.zzzw, v4.xxxy
  mov r8.xy, v4.xyxx
endif 
add r5.xyz, r5.xyzx, r11.xyzx
add r7.xy, r8.xyxx, cb6[9].xyxx
mul r7.xy, r7.xyxx, |v2.xyxx|
mad r5.xyz, r7.xxxx, r10.xyzx, r5.xyzx
mad r5.xyz, r7.yyyy, r6.yzxy, r5.xyzx
frc r10.w, v2.w
add r0.w, -r10.w, v2.w
add r6.w, r0.w, l(1.000000)
div r7.x, r0.w, cb6[5].x
ge r7.y, r7.x, -r7.x
frc r7.x, |r7.x|
movc r7.x, r7.y, r7.x, -r7.x
mul r7.x, r7.x, cb6[5].x
div r8.x, r6.w, cb6[5].x
ge r8.y, r8.x, -r8.x
frc r8.x, |r8.x|
movc r8.x, r8.y, r8.x, -r8.x
mul r8.z, r8.x, cb6[5].x
mul r0.w, r0.w, cb6[5].z
round_ni r7.y, r0.w
mul r0.w, r6.w, cb6[5].z
round_ni r8.w, r0.w
add r7.xy, r7.zwzz, r7.xyxx
mul r7.xy, r7.xyxx, cb6[5].zwzz
add r7.zw, r7.zzzw, r8.zzzw
mul o4.zw, r7.zzzw, cb6[5].zzzw
mul r8.xyz, r6.zxyz, r10.zxyz
mad r8.xyz, r10.yzxy, r6.xyzx, -r8.xyzx
dp3 r0.w, r8.xyzx, r8.xyzx
rsq r0.w, r0.w
mul r8.xyz, r0.wwww, r8.xyzx
lt r7.zw, cb6[8].zzzz, l(0.000000, 0.000000, 0.500000, 1.500000)
add r9.xyz, r11.xyzx, -cb6[3].xyzx
dp3 r0.w, r9.xyzx, r9.xyzx
rsq r0.w, r0.w
mul r12.xyz, r0.wwww, r9.xyzx
dp3 r0.w, cb6[4].xyzx, r9.xyzx
mad r9.xyz, r0.wwww, cb6[4].xyzx, cb6[3].xyzx
add r9.xyz, -r9.xyzx, r11.xyzx
dp3 r0.w, r9.xyzx, r9.xyzx
rsq r0.w, r0.w
mul r9.xyz, r0.wwww, r9.xyzx
movc r9.xyz, r7.wwww, r12.xyzx, r9.xyzx
movc r8.xyz, r7.zzzz, r8.xyzx, r9.xyzx
add r0.w, v1.w, l(10.000000)
mul r0.w, r0.w, r0.w
mul r9.xyz, r0.wwww, l(1361.456299, 2333.577881, 3623.982910, 0.000000)
frc r9.xyz, r9.xyzx
mad r9.xyz, r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r0.w, r25.w, l(0.500000)
mul o5.xyz, r9.xyzx, r0.wwww
mov r5.w, l(1.000000)
dp4 r1.x, r5.xyzw, r1.xyzw
dp4 r1.y, r5.xyzw, r2.xyzw
dp4 r1.z, r5.xyzw, r3.xyzw
dp4 r1.w, r5.xyzw, r4.xyzw
if_nz cb0[0].x
  mov r2.x, icb[r0.y + 0].x
  mov r2.y, l(1.000000)
  dp2 o9.x, r1.xwxx, r2.xyxx
  mul r0.w, r0.z, l(0.500000)
  mul r2.x, r1.w, icb[r0.y + 0].x
  mad r0.z, -r0.z, l(0.500000), l(1.000000)
  mul r0.z, r0.z, r2.x
  mad r1.x, r1.x, r0.w, r0.z
else 
  mov o9.x, l(0)
endif 
mul r2.xyz, r6.xyzx, r8.yzxy
mad r2.xyz, r6.zxyz, r8.zxyz, -r2.xyzx
dp3 r0.z, r2.xyzx, r10.xyzx
lt r0.w, l(0.000000), r0.z
lt r0.z, r0.z, l(0.000000)
iadd r0.z, -r0.w, r0.z
itof o1.w, r0.z
imad o6.x, r0.x, l(0x80000000), r0.y
add r0.xyz, r5.xyzx, -r24.xyzx
mul r2.xyz, r0.yyyy, cb4[1].xywx
mad r2.xyz, r0.xxxx, cb4[0].xywx, r2.xyzx
mad r2.xyz, r0.zzzz, cb4[2].xywx, r2.xyzx
add r2.xyz, r2.xyzx, cb4[3].xywx
div r2.xy, r2.xyxx, r2.zzzz
add r0.xyz, r0.xyzx, -cb4[12].xyzx
mul r0.y, r0.y, cb4[9].z
mad r0.x, r0.x, cb4[8].z, r0.y
mad r0.x, r0.z, cb4[10].z, r0.x
add r0.x, r0.x, cb4[11].z
mad r2.xy, r2.xyxx, cb5[26].xyxx, cb5[26].xyxx
add r0.x, r0.x, -cb4[12].w
div r0.x, r0.x, cb5[28].w
rsq r0.x, r0.x
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
itof r0.y, cb5[27].z
mul r2.z, r0.y, r0.x
mul r0.xyz, r2.xyzx, cb5[28].xyzx
sample_l_indexable(texture3d)(float,float,float,float) o7.xyzw, r0.xyzx, t1.xyzw, s0, l(0.000000)
mov o0.xyzw, r10.xyzw
mov o1.xyz, r8.xyzx
mov o2.xyzw, v3.xyzw
mov o3.xy, r7.xyxx
mov o3.zw, l(0,0,0,0)
mov o4.xy, r7.xyxx
mov o8.xyzw, r1.xyzw
ret 
// Approximately 0 instruction slots used