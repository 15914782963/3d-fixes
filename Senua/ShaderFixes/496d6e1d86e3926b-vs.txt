// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 496d6e1d86e3926b-vs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:42:33 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyzw
// ATTRIBUTE                1   xyz         1     NONE   float   xyz 
// ATTRIBUTE                2   xyzw        2     NONE   float   xyzw
// ATTRIBUTE                3   xyzw        3     NONE   float   xyzw
// ATTRIBUTE                4   xy          4     NONE   float   xy  
// ATTRIBUTE                8   xyzw        5     NONE   float   xyzw
// ATTRIBUTE                9   xyzw        6     NONE   float   xyzw
// ATTRIBUTE               10   xyzw        7     NONE   float   xyz 
// ATTRIBUTE               11   xyzw        8     NONE   float   xyz 
// ATTRIBUTE               12   xyzw        9     NONE   float       
// ATTRIBUTE               16   xy         10     NONE   float   xy  
// ATTRIBUTE               17   xyzw       11     NONE   float   xyzw
// SV_InstanceID            0   x          12   INSTID    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// COLOR                    1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xy          5     NONE   float   xy  
// PACKED_EYE_INDEX         0   x           6     NONE    uint   x   
// VELOCITY_PREV_POS        0   xyzw        7     NONE   float   xyzw
// SV_POSITION              0   xyzw        8      POS   float   xyzw
// SV_ClipDistance          1   x           9  CLIPDST   float   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[16], immediateIndexed
dcl_constantbuffer cb1[165], immediateIndexed
dcl_constantbuffer cb2[165], immediateIndexed
dcl_constantbuffer cb3[10], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xy
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_input v7.xyz
dcl_input v8.xyz
dcl_input v10.xy
dcl_input v11.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xy
dcl_output o6.x
dcl_output o7.xyzw
dcl_output_siv o8.xyzw, position
dcl_output_siv o9.x, clip_distance
dcl_temps 37
dcl_resource_structured t101, 2048
dcl_resource_structured t102, 2048
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 496d6e1d86e3926b-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r15.xyzw, l(0), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r16.xyzw, l(0), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r17.xyzw, l(0), l(32), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r18.xyzw, l(0), l(48), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r19.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r20.xyzw, l(0), l(1280), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r21.xyzw, l(0), l(1296), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r22.xyzw, l(0), l(1312), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r23.xyzw, l(0), l(1328), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r24.xyzw, l(0), l(1632), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r25.xyzw, l(1), l(576), t101.xyzw


// cb2 remapped to t102 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 496d6e1d86e3926b-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r26.xyzw, l(0), l(0), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r27.xyzw, l(0), l(16), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r28.xyzw, l(0), l(32), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r29.xyzw, l(0), l(48), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r30.xyzw, l(0), l(944), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r31.xyzw, l(0), l(1280), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r32.xyzw, l(0), l(1296), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r33.xyzw, l(0), l(1312), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r34.xyzw, l(0), l(1328), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r35.xyzw, l(0), l(1632), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r36.xyzw, l(1), l(576), t102.xyzw

if_z cb0[7].x
  mov r0.x, r15.x
  mov r0.y, r16.x
  mov r0.z, r17.x
  mov r0.w, r18.x
  mov r1.x, r15.y
  mov r1.y, r16.y
  mov r1.z, r17.y
  mov r1.w, r18.y
  mov r2.x, r15.z
  mov r2.y, r16.z
  mov r2.z, r17.z
  mov r2.w, r18.z
  mov r3.x, r15.w
  mov r3.y, r16.w
  mov r3.z, r17.w
  mov r3.w, r18.w
  mov r4.x, r20.x
  mov r4.y, r21.x
  mov r4.z, r22.x
  mov r4.w, r23.x
  mov r5.x, r20.y
  mov r5.y, r21.y
  mov r5.z, r22.y
  mov r5.w, r23.y
  mov r6.x, r20.w
  mov r6.y, r21.w
  mov r6.z, r22.w
  mov r6.w, r23.w
  mov r7.xyz, r24.xyzx
  mov r7.w, r25.y
  mov r8.xyz, r19.xyzx
else 
  mov r0.x, r26.x
  mov r0.y, r27.x
  mov r0.z, r28.x
  mov r0.w, r29.x
  mov r1.x, r26.y
  mov r1.y, r27.y
  mov r1.z, r28.y
  mov r1.w, r29.y
  mov r2.x, r26.z
  mov r2.y, r27.z
  mov r2.z, r28.z
  mov r2.w, r29.z
  mov r3.x, r26.w
  mov r3.y, r27.w
  mov r3.z, r28.w
  mov r3.w, r29.w
  mov r4.x, r31.x
  mov r4.y, r32.x
  mov r4.z, r33.x
  mov r4.w, r34.x
  mov r5.x, r31.y
  mov r5.y, r32.y
  mov r5.z, r33.y
  mov r5.w, r34.y
  mov r6.x, r31.w
  mov r6.y, r32.w
  mov r6.z, r33.w
  mov r6.w, r34.w
  mov r7.xyz, r35.xyzx
  mov r7.w, r36.y
  mov r8.xyz, r30.xyzx
endif 
mad r9.xyz, v1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r10.xyzw, v2.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r11.xyz, r9.xyzx, r10.yzxy
mad r9.xyz, r10.xyzx, r9.yzxy, -r11.xyzx
mul r9.xyz, r10.wwww, r9.xyzx
mul r11.xyz, r10.yzxy, r9.xyzx
mad r9.xyz, r9.zxyz, r10.zxyz, -r11.xyzx
mul r9.xyz, r10.wwww, r9.xyzx
mul r11.xyz, v6.yyyy, cb3[1].xyzx
mad r11.xyz, v6.xxxx, cb3[0].xyzx, r11.xyzx
mad r11.xyz, v6.zzzz, cb3[2].xyzx, r11.xyzx
mul r12.xyz, v7.yyyy, cb3[1].xyzx
mad r12.xyz, v7.xxxx, cb3[0].xyzx, r12.xyzx
mad r12.xyz, v7.zzzz, cb3[2].xyzx, r12.xyzx
mul r13.xyz, v8.yyyy, cb3[1].xyzx
mad r13.xyz, v8.xxxx, cb3[0].xyzx, r13.xyzx
mad r13.xyz, v8.zzzz, cb3[2].xyzx, r13.xyzx
dp3 r8.w, r11.xyzx, r11.xyzx
rsq r8.w, r8.w
mul r11.xyz, r8.wwww, r11.xyzx
dp3 r8.w, r12.xyzx, r12.xyzx
rsq r8.w, r8.w
mul r12.xyz, r8.wwww, r12.xyzx
dp3 r8.w, r13.xyzx, r13.xyzx
rsq r8.w, r8.w
mul r13.xyz, r8.wwww, r13.xyzx
mul r14.xyz, r9.yyyy, r12.xyzx
mad r9.xyw, r9.xxxx, r11.xyxz, r14.xyxz
mad o0.xyz, r9.zzzz, r13.xyzx, r9.xywx
mul r9.xyz, r10.yyyy, r12.xyzx
mad r9.xyz, r10.xxxx, r11.xyzx, r9.xyzx
mad o1.xyz, r10.zzzz, r13.xyzx, r9.xyzx
mul o1.w, r10.w, cb3[9].w
mul r8.w, v6.w, l(0.00390625000)
round_z r8.w, r8.w
mul r9.xyz, v5.yyyy, cb3[1].xyzx
mad r9.xyz, cb3[0].xyzx, v5.xxxx, r9.xyzx
mad r9.xyz, cb3[2].xyzx, v5.zzzz, r9.xyzx
add r9.xyz, r9.xyzx, cb3[3].xyzx
add r10.xyz, r8.xyzx, r9.xyzx
dp3 r9.w, r10.xyzx, r10.xyzx
sqrt r9.w, r9.w
add r9.w, r9.w, -cb0[13].x
mul_sat r9.w, r9.w, cb0[13].y
add o3.y, -r9.w, l(1.000000)
add r9.w, -r8.w, l(1.000000)
mul r9.w, r9.w, cb0[13].w
mad r8.w, cb0[13].z, r8.w, r9.w
add r10.xyz, r9.xyzx, -cb0[11].xyzx
dp3 r9.w, r10.xyzx, r10.xyzx
sqrt r9.w, r9.w
mad r9.w, cb0[8].w, v5.w, r9.w
add r9.xyz, r9.xyzx, -cb0[12].xyzx
dp3 r9.x, r9.xyzx, r9.xyzx
sqrt r9.x, r9.x
mad r9.x, cb0[8].w, v5.w, r9.x
lt r9.yzw, cb0[8].xxyz, r9.wwww
and r9.yzw, r9.yyzw, l(0, 0x3f800000, 0x3f800000, 0x3f800000)
dp3 r9.y, r9.yzwy, cb0[10].xyzx
lt r9.xzw, cb0[9].xxyz, r9.xxxx
and r9.xzw, r9.xxzw, l(0x3f800000, 0, 0x3f800000, 0x3f800000)
dp3 r9.x, r9.xzwx, cb0[10].xyzx
mul r9.x, r9.x, cb0[12].w
mad r9.w, r9.y, cb0[11].w, r9.x
lt r9.x, |r9.w|, l(0.999000)
and r9.x, r9.x, l(0x3f800000)
mul r9.z, r8.w, r9.x
mov r10.x, v6.x
mov r10.y, v7.x
mov r10.z, v8.x
mov r10.w, v5.x
dp4 r10.x, v0.xyzw, r10.xyzw
mov r11.x, v6.y
mov r11.y, v7.y
mov r11.z, v8.y
mov r11.w, v5.y
dp4 r10.y, v0.xyzw, r11.xyzw
mov r11.x, v6.z
mov r11.y, v7.z
mov r11.z, v8.z
mov r11.w, v5.z
dp4 r10.z, v0.xyzw, r11.xyzw
mul r11.xyz, r10.yyyy, cb3[1].xyzx
mad r11.xyz, cb3[0].xyzx, r10.xxxx, r11.xyzx
mad r11.xyz, cb3[2].xyzx, r10.zzzz, r11.xyzx
add r8.xyz, r8.xyzx, cb3[3].xyzx
add r8.xyz, r8.xyzx, r11.xyzx
mov r8.w, l(1.000000)
mul r8.xyzw, r9.zzzz, r8.xyzw
dp4 r0.x, r8.xyzw, r0.xyzw
dp4 r0.y, r8.xyzw, r1.xyzw
dp4 r0.z, r8.xyzw, r2.xyzw
dp4 r0.w, r8.xyzw, r3.xyzw
if_nz cb0[0].x
  mov r1.x, cb0[7].x
  mov r2.x, icb[r1.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o9.x, r0.xwxx, r2.xyxx
  mul r1.y, r7.w, l(0.500000)
  mul r1.x, r0.w, icb[r1.x + 0].x
  mad r1.z, -r7.w, l(0.500000), l(1.000000)
  mul r1.x, r1.z, r1.x
  mad r0.x, r0.x, r1.y, r1.x
else 
  mov o9.x, l(0)
endif 
mad o5.xy, v10.xyxx, v11.xyxx, v11.zwzz
movc r1.x, cb0[0].x, l(-0.000000), l(0)
or o6.x, r1.x, cb0[7].x
add r1.xyw, r7.xyxz, cb0[6].xyxz
mov r10.w, v0.w
mov r2.x, cb0[3].x
mov r2.y, cb0[4].x
mov r2.z, cb0[5].x
mov r2.w, r1.x
dp4 r2.x, r10.xyzw, r2.xyzw
mov r3.x, cb0[3].y
mov r3.y, cb0[4].y
mov r3.z, cb0[5].y
mov r3.w, r1.y
dp4 r2.y, r10.xyzw, r3.xyzw
mov r1.x, cb0[3].z
mov r1.y, cb0[4].z
mov r1.z, cb0[5].z
dp4 r2.z, r10.xyzw, r1.xyzw
mov r2.w, l(1.000000)
dp4 o7.x, r2.xyzw, r4.xyzw
dp4 o7.y, r2.xyzw, r5.xyzw
dp4 o7.w, r2.xyzw, r6.xyzw
add o7.z, -cb0[15].x, l(1.000000)
mov o0.w, l(0)
mov o2.xyzw, v3.xyzw
mov o3.x, v5.w
mov o3.zw, r9.zzzw
mov o4.xy, v4.xyxx
mov o4.zw, l(0,0,0,0)
mov o8.xyzw, r0.xyzw
ret 
// Approximately 0 instruction slots used