// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 29f239f15edcfd7a-vs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:42:34 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz 
// ATTRIBUTE                1   xyz         1     NONE   float       
// ATTRIBUTE                2   xyzw        2     NONE   float   xyz 
// ATTRIBUTE                3   xyzw        3     NONE   float       
// ATTRIBUTE                4   xyzw        4     NONE   float     z 
// SV_InstanceID            0   x           5   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// SV_ClipDistance          1   x           1  CLIPDST   float   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[167], immediateIndexed
dcl_constantbuffer cb2[165], immediateIndexed
dcl_constantbuffer cb3[15], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_constantbuffer cb5[11], immediateIndexed
dcl_input v0.xyz
dcl_input v2.xyz
dcl_input v4.z
dcl_input_sgv v5.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output_siv o1.x, clip_distance
dcl_temps 24
dcl_resource_structured t101, 2048
dcl_resource_structured t102, 2048
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 29f239f15edcfd7a-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r10.xyzw, l(0), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r11.xyzw, l(0), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r12.xyzw, l(0), l(32), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r13.xyzw, l(0), l(48), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r14.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r15.xyzw, l(1), l(64), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r16.xyzw, l(1), l(576), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r17.xyzw, l(1), l(608), t101.xyzw


// cb2 remapped to t102 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 29f239f15edcfd7a-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r18.xyzw, l(0), l(0), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r19.xyzw, l(0), l(16), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r20.xyzw, l(0), l(32), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r21.xyzw, l(0), l(48), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r22.xyzw, l(0), l(944), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r23.xyzw, l(1), l(576), t102.xyzw

if_nz cb0[8].x
  mov r0.x, r17.w
else 
  and r0.x, v5.x, l(1)
endif 
if_z r0.x
  mov r1.x, r10.x
  mov r1.y, r11.x
  mov r1.z, r12.x
  mov r1.w, r13.x
  mov r2.x, r10.y
  mov r2.y, r11.y
  mov r2.z, r12.y
  mov r2.w, r13.y
  mov r3.x, r10.z
  mov r3.y, r11.z
  mov r3.z, r12.z
  mov r3.w, r13.z
  mov r4.x, r10.w
  mov r4.y, r11.w
  mov r4.z, r12.w
  mov r4.w, r13.w
  mov r0.yzw, r14.xxyz
  mov r5.x, r16.y
else 
  mov r1.x, r18.x
  mov r1.y, r19.x
  mov r1.z, r20.x
  mov r1.w, r21.x
  mov r2.x, r18.y
  mov r2.y, r19.y
  mov r2.z, r20.y
  mov r2.w, r21.y
  mov r3.x, r18.z
  mov r3.y, r19.z
  mov r3.z, r20.z
  mov r3.w, r21.z
  mov r4.x, r18.w
  mov r4.y, r19.w
  mov r4.z, r20.w
  mov r4.w, r21.w
  mov r0.yzw, r22.xxyz
  mov r5.x, r23.y
endif 
mad r5.yzw, v2.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
mul r6.xyz, cb3[0].xyzx, cb3[14].xxxx
mul r7.xyz, cb3[1].xyzx, cb3[14].yyyy
mul r8.xyz, cb3[2].xyzx, cb3[14].zzzz
mul r7.xyz, r5.zzzz, r7.xyzx
mad r6.xyz, r5.yyyy, r6.xyzx, r7.xyzx
mad r5.yzw, r5.wwww, r8.xxyz, r6.xxyz
mul r6.xyz, v0.yyyy, cb3[1].xyzx
mad r6.xyz, cb3[0].xyzx, v0.xxxx, r6.xyzx
mad r6.xyz, cb3[2].xyzx, v0.zzzz, r6.xyzx
add r7.xyz, r0.yzwy, cb3[3].xyzx
add r6.xyz, r6.xyzx, r7.xyzx
add r0.yzw, -r0.yyzw, r6.xxyz
add r0.yzw, r0.yyzw, -cb3[3].xxyz
mul r6.w, r15.z, cb5[8].y
mul r6.w, r6.w, cb5[8].z
mul r6.w, r6.w, l(1.25663710)
sincos r6.w, null, r6.w
mul r6.w, r6.w, cb5[8].w
add r7.x, cb4[0].y, cb5[9].x
mul r6.w, r6.w, r7.x
mul r6.w, r6.w, l(6.28318548)
sincos r7.x, r8.x, r6.w
mul r7.xy, r0.wzww, r7.xxxx
mad r9.y, r8.x, r0.z, -r7.x
mad r9.z, r8.x, r0.w, r7.y
mov r9.x, r0.y
add r0.yzw, -r0.yyzw, r9.xxyz
add r6.w, -v4.z, l(1.000000)
dp2 r7.x, v4.zzzz, r6.wwww
mov r7.yz, l(0,1.000000,0,0)
mul r8.xyz, r7.xxyx, cb5[9].yyyy
mul r7.yzw, r7.zzzx, r8.xxyz
mad r0.yzw, r0.yyzw, r7.xxxx, r7.yyzw
mad r0.yzw, cb5[10].yyyy, r5.yyzw, r0.yyzw
add r6.xyz, r0.yzwy, r6.xyzx
mov r6.w, l(1.000000)
dp4 r1.x, r6.xyzw, r1.xyzw
dp4 r1.y, r6.xyzw, r2.xyzw
dp4 r1.z, r6.xyzw, r3.xyzw
dp4 r1.w, r6.xyzw, r4.xyzw
or r0.y, cb0[0].x, cb0[8].x
if_nz r0.y
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o1.x, r1.xwxx, r2.xyxx
  mul r0.y, r5.x, l(0.500000)
  mul r0.x, r1.w, icb[r0.x + 0].x
  mad r0.z, -r5.x, l(0.500000), l(1.000000)
  mul r0.x, r0.z, r0.x
  mad r1.x, r1.x, r0.y, r0.x
else 
  mov o1.x, l(0)
endif 
mov o0.xyzw, r1.xyzw
ret 
// Approximately 0 instruction slots used