// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 5ddd528aedb55346-vs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:43:01 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VertexID              0   x           0   VERTID    uint   x   
// SV_InstanceID            0   x           1   INSTID    uint   x   
// ATTRIBUTE                0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// PARTICLE_SUBUVS          0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 4   xyz         1     NONE   float   xyz 
// TEXCOORD                 5   xyzw        2     NONE   float   xyzw
// PARTICLE_POSITION        0   xyzw        3     NONE   float   xyzw
// PARTICLE_LIGHTING_OFFSET     0   xyz         4     NONE   float   xyz 
// PACKED_EYE_INDEX         0   x           5     NONE    uint   x   
// TEXCOORD                 7   xyzw        6     NONE   float   xyzw
// SV_POSITION              0   xyzw        7      POS   float   xyzw
// SV_ClipDistance          1   x           8  CLIPDST   float   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[165], immediateIndexed
dcl_constantbuffer cb2[165], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_constantbuffer cb4[13], immediateIndexed
dcl_constantbuffer cb5[29], immediateIndexed
dcl_constantbuffer cb6[4], immediateIndexed
dcl_constantbuffer cb7[12], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture3d (float,float,float,float) t5
dcl_input_sgv v0.x, vertex_id
dcl_input_sgv v1.x, instance_id
dcl_input v2.xy
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.x
dcl_output o6.xyzw
dcl_output_siv o7.xyzw, position
dcl_output_siv o8.x, clip_distance
dcl_temps 42
dcl_resource_structured t101, 2048
dcl_resource_structured t102, 2048
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 5ddd528aedb55346-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r19.xyzw, l(0), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r20.xyzw, l(0), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r21.xyzw, l(0), l(32), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r22.xyzw, l(0), l(48), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r23.xyzw, l(0), l(784), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r24.xyzw, l(0), l(800), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r25.xyzw, l(0), l(816), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r26.xyzw, l(0), l(832), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r27.xyzw, l(0), l(912), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r28.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r29.xyzw, l(1), l(176), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r30.xyzw, l(1), l(576), t101.xyzw


// cb2 remapped to t102 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 5ddd528aedb55346-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r31.xyzw, l(0), l(0), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r32.xyzw, l(0), l(16), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r33.xyzw, l(0), l(32), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r34.xyzw, l(0), l(48), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r35.xyzw, l(0), l(784), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r36.xyzw, l(0), l(800), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r37.xyzw, l(0), l(816), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r38.xyzw, l(0), l(832), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r39.xyzw, l(0), l(912), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r40.xyzw, l(0), l(944), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r41.xyzw, l(1), l(576), t102.xyzw

movc r0.x, cb0[0].x, l(1), l(0)
and r0.y, r0.x, cb0[3].y
if_z r0.y
  mov r1.x, r19.x
  mov r1.y, r20.x
  mov r1.z, r21.x
  mov r1.w, r22.x
  mov r2.x, r19.y
  mov r2.y, r20.y
  mov r2.z, r21.y
  mov r2.w, r22.y
  mov r3.x, r19.z
  mov r3.y, r20.z
  mov r3.z, r21.z
  mov r3.w, r22.z
  mov r4.x, r19.w
  mov r4.y, r20.w
  mov r4.z, r21.w
  mov r4.w, r22.w
  mov r5.xyz, r28.xyzx
  mov r0.z, r30.y
  mov r6.xyz, r23.xyzx
  mov r7.xyz, r24.xyzx
  mov r8.xyz, r25.xyzx
  mov r9.xyz, r26.xyzx
  mov r10.xyz, r27.xyzx
else 
  mov r1.x, r31.x
  mov r1.y, r32.x
  mov r1.z, r33.x
  mov r1.w, r34.x
  mov r2.x, r31.y
  mov r2.y, r32.y
  mov r2.z, r33.y
  mov r2.w, r34.y
  mov r3.x, r31.z
  mov r3.y, r32.z
  mov r3.z, r33.z
  mov r3.w, r34.z
  mov r4.x, r31.w
  mov r4.y, r32.w
  mov r4.z, r33.w
  mov r4.w, r34.w
  mov r5.xyz, r40.xyzx
  mov r0.z, r41.y
  mov r6.xyz, r35.xyzx
  mov r7.xyz, r36.xyzx
  mov r8.xyz, r37.xyzx
  mov r9.xyz, r38.xyzx
  mov r10.xyz, r39.xyzx
endif 
ishl r0.w, v1.x, l(4)
ushr r5.w, v0.x, l(2)
iadd r0.w, r0.w, r5.w
iadd r0.w, r0.w, cb0[3].x
ld_indexable(buffer)(float,float,float,float) r11.xy, r0.wwww, t0.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r12.xyzw, r11.xyxx, t1.xyzw, s0, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r13.xyz, r11.xyxx, t2.xyzw, s1, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r14.xyzw, r11.xyxx, t3.xyzw, s2, l(0.000000)
ge r0.w, l(1.000000), r12.w
and r0.w, r0.w, l(0x3f800000)
mul r15.xyz, r13.yyyy, cb3[1].xyzx
mad r13.xyw, r13.xxxx, cb3[0].xyxz, r15.xyxz
mad r13.xyz, r13.zzzz, cb3[2].xyzx, r13.xywx
dp3 r5.w, r13.xyzx, r13.xyzx
sqrt r5.w, r5.w
mad r11.zw, cb7[0].zzzw, r12.wwww, cb7[0].xxxy
sample_l_indexable(texture2d)(float,float,float,float) r15.xyzw, r11.zwzz, t4.xyzw, s3, l(0.000000)
mad r15.xyzw, r15.xyzw, cb7[1].xyzw, cb7[2].xyzw
mul o2.xyzw, r15.xyzw, cb6[3].xyzw
mad r11.zw, cb7[3].zzzw, r12.wwww, cb7[3].xxxy
sample_l_indexable(texture2d)(float,float,float,float) r15.xyz, r11.zwzz, t4.xyzw, s3, l(0.000000)
mad r15.xyz, r15.xyzx, cb7[4].xyzx, cb7[5].xyzx
lt r11.zw, r14.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
movc r16.xy, r11.zwzz, l(0,0,0,0), l(-0.500000,-0.500000,0,0)
add r14.xy, r14.xyxx, r16.xyxx
add r14.xy, r14.xyxx, r14.xyxx
mul r15.xy, r15.xyxx, cb6[0].xyxx
mul r16.xy, r5.wwww, cb7[6].xyxx
max r16.xy, r16.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
min r16.xy, r16.xyxx, cb7[6].zwzz
mul r14.xy, r14.xyxx, r15.xyxx
mul r14.xy, r16.xyxx, r14.xyxx
mul r14.xy, r0.wwww, r14.xyxx
add r15.xy, -v2.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
movc r11.zw, r11.zzzw, r15.xxxy, v2.xxxy
frc r0.w, r15.z
add r5.w, -r0.w, r15.z
add r6.w, r5.w, l(1.000000)
div r7.w, r5.w, cb7[7].x
ge r8.w, r7.w, -r7.w
frc r7.w, |r7.w|
movc r7.w, r8.w, r7.w, -r7.w
mul r15.x, r7.w, cb7[7].x
div r7.w, r6.w, cb7[7].x
ge r8.w, r7.w, -r7.w
frc r7.w, |r7.w|
movc r7.w, r8.w, r7.w, -r7.w
mul r15.z, r7.w, cb7[7].x
mul r5.w, r5.w, cb7[7].z
round_ni r15.y, r5.w
mul r5.w, r6.w, cb7[7].z
round_ni r15.w, r5.w
add r15.xy, r11.zwzz, r15.xyxx
mul o0.xy, r15.xyxx, cb7[7].zwzz
add r11.zw, r11.zzzw, r15.zzzw
mul o0.zw, r11.zzzw, cb7[7].zzzw
mul r5.w, r14.w, cb7[10].x
mad r5.w, r5.w, r12.w, r14.z
mul r15.xyz, r12.yyyy, cb3[1].xyzx
mad r15.xyz, cb3[0].xyzx, r12.xxxx, r15.xyzx
mad r12.xyz, cb3[2].xyzx, r12.zzzz, r15.xyzx
add r5.xyz, r5.xyzx, cb3[3].xyzx
add r5.xyz, r5.xyzx, r12.xyzx
add r9.xyz, -r7.xyzx, r9.xyzx
mad r7.xyz, cb7[9].wwww, r9.xyzx, r7.xyzx
add r8.xyz, -r6.xyzx, r8.xyzx
mad r6.xyz, cb7[9].wwww, r8.xyzx, r6.xyzx
add r8.xyz, -r7.xyzx, cb6[1].xyzx
mad r7.xyz, cb6[1].wwww, r8.xyzx, r7.xyzx
add r8.xyz, r6.xyzx, cb6[2].xyzx
mad r6.xyz, cb6[2].wwww, r8.xyzx, -r6.xyzx
add r8.xyz, -r5.zxyz, r10.zxyz
dp3 r6.w, r8.xyzx, r8.xyzx
max r7.w, r6.w, l(0.010000)
sqrt r7.w, r7.w
div r8.xyz, r8.xyzx, r7.wwww
lt r7.w, l(0.000000), cb7[9].x
if_nz r7.w
  mad_sat r6.w, r6.w, cb7[9].y, -cb7[9].z
  mul r9.xyz, r8.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r9.xyz, r8.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000), -r9.xyzx
  dp2 r7.w, r9.xyxx, r9.xyxx
  max r7.w, r7.w, l(0.010000)
  sqrt r7.w, r7.w
  div r9.xyz, r9.xyzx, r7.wwww
  mul r10.xyz, r8.xyzx, r9.yzxy
  mad r10.xyz, r8.zxyz, r9.zxyz, -r10.xyzx
  add r9.xyz, -r7.xyzx, r9.xyzx
  mad r9.xyz, r6.wwww, r9.xyzx, r7.xyzx
  dp3 r7.w, r9.xyzx, r9.xyzx
  rsq r7.w, r7.w
  mul r9.xyz, r7.wwww, r9.xyzx
  add r10.xyz, -r6.xyzx, r10.xyzx
  mad r10.xyz, r6.wwww, r10.xyzx, r6.xyzx
  dp3 r6.w, r10.xyzx, r10.xyzx
  rsq r6.w, r6.w
  mul r10.xyz, r6.wwww, r10.xyzx
else 
  add r12.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000100, 0.000000)
  dp3 r6.w, r12.xyzx, r12.xyzx
  rsq r6.w, r6.w
  mul r12.xyz, r6.wwww, r12.xyzx
  mul r13.xyz, r8.xyzx, r12.yzxy
  mad r13.xyz, r8.zxyz, r12.zxyz, -r13.xyzx
  dp3 r6.w, r13.xyzx, r13.xyzx
  max r6.w, r6.w, l(0.010000)
  sqrt r6.w, r6.w
  div r13.xyz, r13.xyzx, r6.wwww
  mul r15.xyz, r8.zxyz, cb6[1].zxyz
  mad r15.xyz, cb6[1].yzxy, r8.xyzx, -r15.xyzx
  dp3 r6.w, r15.xyzx, r15.xyzx
  max r6.w, r6.w, l(0.010000)
  sqrt r6.w, r6.w
  div r15.xyz, r15.xyzx, r6.wwww
  lt r16.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), cb7[8].yzwy
  mul r17.xyz, r8.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r17.xyz, r8.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000), -r17.xyzx
  dp2 r6.w, r17.xyxx, r17.xyxx
  max r6.w, r6.w, l(0.010000)
  sqrt r6.w, r6.w
  div r17.xyz, r17.xyzx, r6.wwww
  mul r18.xyz, r8.xyzx, r17.yzxy
  mad r8.xyz, r8.zxyz, r17.zxyz, -r18.xyzx
  movc r7.xyz, r16.zzzz, r17.xyzx, r7.xyzx
  movc r6.xyz, r16.zzzz, r8.xyzx, r6.xyzx
  movc r7.xyz, r16.yyyy, cb6[1].xyzx, r7.xyzx
  movc r6.xyz, r16.yyyy, -r15.xyzx, r6.xyzx
  movc r9.xyz, r16.xxxx, r13.xyzx, r7.xyzx
  movc r10.xyz, r16.xxxx, -r12.xyzx, r6.xyzx
endif 
mad r5.w, r5.w, l(6.28318548), cb7[10].y
sincos r6.x, r7.x, r5.w
mul r6.yzw, r9.xxyz, r7.xxxx
mad r6.yzw, r6.xxxx, r10.xxyz, r6.yyzw
mul r7.yzw, r9.xxyz, r6.xxxx
mad r7.xyz, r7.xxxx, r10.xyzx, -r7.yzwy
add r8.xy, v2.xyxx, cb7[11].xyxx
mul r8.xy, r8.xyxx, r14.xyxx
mul r8.yzw, r7.xxyz, r8.yyyy
mad r8.xyz, r8.xxxx, r6.yzwy, r8.yzwy
add r8.xyz, r5.xyzx, r8.xyzx
add r9.xy, cb7[11].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r9.xy, r9.xyxx, r14.xyxx
mul r7.xyz, r7.xyzx, r9.yyyy
mad r6.xyz, r9.xxxx, r6.yzwy, r7.xyzx
add o3.xyz, r5.xyzx, r6.xyzx
add r5.xy, r11.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000)
mul r5.x, r5.y, r5.x
mul r5.xyz, r5.xxxx, l(1341.456299, 2633.577881, 5623.982910, 0.000000)
frc r5.xyz, r5.xyzx
mad r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r5.w, r29.w, l(0.500000)
mul o4.xyz, r5.xyzx, r5.wwww
min r5.x, r14.y, r14.x
mul o3.w, r5.x, l(0.500000)
mov r8.w, l(1.000000)
dp4 r1.x, r8.xyzw, r1.xyzw
dp4 r1.y, r8.xyzw, r2.xyzw
dp4 r1.z, r8.xyzw, r3.xyzw
dp4 r1.w, r8.xyzw, r4.xyzw
if_nz cb0[0].x
  mov r2.x, icb[r0.y + 0].x
  mov r2.y, l(1.000000)
  dp2 o8.x, r1.xwxx, r2.xyxx
  mul r2.x, r0.z, l(0.500000)
  mul r2.y, r1.w, icb[r0.y + 0].x
  mad r0.z, -r0.z, l(0.500000), l(1.000000)
  mul r0.z, r0.z, r2.y
  mad r1.x, r1.x, r2.x, r0.z
else 
  mov o8.x, l(0)
endif 
imad o5.x, r0.x, l(0x80000000), r0.y
add r0.xyz, r8.xyzx, -r28.xyzx
mul r2.xyz, r0.yyyy, cb4[1].xywx
mad r2.xyz, r0.xxxx, cb4[0].xywx, r2.xyzx
mad r2.xyz, r0.zzzz, cb4[2].xywx, r2.xyzx
add r2.xyz, r2.xyzx, cb4[3].xywx
div r2.xy, r2.xyxx, r2.zzzz
add r0.xyz, r0.xyzx, -cb4[12].xyzx
mul r0.y, r0.y, cb4[9].z
mad r0.x, r0.x, cb4[8].z, r0.y
mad r0.x, r0.z, cb4[10].z, r0.x
add r0.x, r0.x, cb4[11].z
mad r2.xy, r2.xyxx, cb5[26].xyxx, cb5[26].xyxx
add r0.x, r0.x, -cb4[12].w
div r0.x, r0.x, cb5[28].w
rsq r0.x, r0.x
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
itof r0.y, cb5[27].z
mul r2.z, r0.y, r0.x
mul r0.xyz, r2.xyzx, cb5[28].xyzx
sample_l_indexable(texture3d)(float,float,float,float) o6.xyzw, r0.xyzx, t5.xyzw, s4, l(0.000000)
mov o7.xyzw, r1.xyzw
mov o1.y, r12.w
mov o1.z, l(0)
mov o1.x, r0.w
ret 
// Approximately 0 instruction slots used