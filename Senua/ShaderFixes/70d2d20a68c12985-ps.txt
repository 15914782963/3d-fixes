// asmtool.py --remap-cb 0 100 --remap-cb 1 101 -i -f --only-autofixed --disable-driver-stereo-cb 12 70d2d20a68c12985-ps.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:42:52 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float       
// TEXCOORD                11   xyzw        1     NONE   float       
// TEXCOORD                 0   xyzw        2     NONE   float    y  
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x   
// TEXCOORD                 7   xyzw        4     NONE   float   xyzw
// SV_Position              0   xyzw        5      POS   float   xyz 
// SV_IsFrontFace           0   x           6    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[131], immediateIndexed
dcl_constantbuffer cb1[60], immediateIndexed
dcl_constantbuffer cb2[10], immediateIndexed
dcl_constantbuffer cb3[6], immediateIndexed
dcl_input_ps linear v2.y
dcl_input_ps constant v3.x
dcl_input_ps linear v4.xyzw
dcl_input_ps_siv linear noperspective v5.xyz, position
dcl_output o0.xyzw
dcl_temps 18
dcl_resource_structured t100, 2048
dcl_resource_structured t101, 960

// cb0 remapped to t100 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 0 100 --remap-cb 1 101 -i -f --only-autofixed --disable-driver-stereo-cb 12 70d2d20a68c12985-ps.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r7.xyzw, l(0), l(576), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r8.xyzw, l(0), l(592), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r9.xyzw, l(0), l(608), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r10.xyzw, l(0), l(624), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r11.xyzw, l(0), l(944), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r12.xyzw, l(1), l(32), t100.xyzw


// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 0 100 --remap-cb 1 101 -i -f --only-autofixed --disable-driver-stereo-cb 12 70d2d20a68c12985-ps.txt
ld_structured_indexable(structured_buffer, stride=960)(mixed,mixed,mixed,mixed) r13.xyzw, l(0), l(576), t101.xyzw
ld_structured_indexable(structured_buffer, stride=960)(mixed,mixed,mixed,mixed) r14.xyzw, l(0), l(592), t101.xyzw
ld_structured_indexable(structured_buffer, stride=960)(mixed,mixed,mixed,mixed) r15.xyzw, l(0), l(608), t101.xyzw
ld_structured_indexable(structured_buffer, stride=960)(mixed,mixed,mixed,mixed) r16.xyzw, l(0), l(624), t101.xyzw
ld_structured_indexable(structured_buffer, stride=960)(mixed,mixed,mixed,mixed) r17.xyzw, l(0), l(944), t101.xyzw

and r0.x, v3.x, l(1)
if_z r0.x
  mov r0.x, r7.x
  mov r0.y, r8.x
  mov r0.z, r9.x
  mov r0.w, r10.x
  mov r1.x, r7.y
  mov r1.y, r8.y
  mov r1.z, r9.y
  mov r1.w, r10.y
  mov r2.x, r7.z
  mov r2.y, r8.z
  mov r2.z, r9.z
  mov r2.w, r10.z
  mov r3.x, r7.w
  mov r3.y, r8.w
  mov r3.z, r9.w
  mov r3.w, r10.w
  mov r4.xyz, r11.xyzx
else 
  mov r0.x, r13.x
  mov r0.y, r14.x
  mov r0.z, r15.x
  mov r0.w, r16.x
  mov r1.x, r13.y
  mov r1.y, r14.y
  mov r1.z, r15.y
  mov r1.w, r16.y
  mov r2.x, r13.z
  mov r2.y, r14.z
  mov r2.z, r15.z
  mov r2.w, r16.z
  mov r3.x, r13.w
  mov r3.y, r14.w
  mov r3.z, r15.w
  mov r3.w, r16.w
  mov r4.xyz, r17.xyzx
endif 
add r4.w, -v2.y, l(1.000000)
mul r4.w, r4.w, cb3[5].x
max r4.w, |r4.w|, l(0.000001)
log r4.w, r4.w
mul r4.w, r4.w, cb3[5].y
exp r4.w, r4.w
min r5.w, r4.w, l(1.000000)
max r5.xyz, cb3[2].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r4.w, l(0.000000), r12.x
if_nz r4.w
  mov r6.xyz, v5.xyzx
  mov r6.w, l(1.000000)
  dp4 r0.x, r6.xyzw, r0.xyzw
  dp4 r0.y, r6.xyzw, r1.xyzw
  dp4 r0.z, r6.xyzw, r2.xyzw
  dp4 r0.w, r6.xyzw, r3.xyzw
  div r0.xyz, r0.xyzx, r0.wwww
  add r0.xyz, -r4.xyzx, r0.xyzx
  add r1.xyz, r0.xyzx, -cb2[8].xyzx
  add r2.xyz, cb2[9].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r1.xyz, r2.xyzx, |r1.xyzx|
  or r0.w, r1.y, r1.x
  or r0.w, r1.z, r0.w
  dp3 r0.x, r0.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r0.x, r0.x, l(0.002000)
  frc r0.x, r0.x
  lt r0.x, l(0.500000), r0.x
  movc r1.yzw, r0.xxxx, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r1.x, l(1.000000)
  movc r5.xyzw, r0.wwww, r1.yzwx, r5.xyzw
  mov o0.w, r5.w
else 
  mov o0.w, r5.w
endif 
mad o0.xyz, r5.xyzx, v4.wwww, v4.xyzx
ret 
// Approximately 0 instruction slots used