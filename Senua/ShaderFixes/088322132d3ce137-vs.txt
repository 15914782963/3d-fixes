// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 088322132d3ce137-vs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:42:43 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz 
// ATTRIBUTE                1   xyz         1     NONE   float       
// ATTRIBUTE                2   xyzw        2     NONE   float       
// ATTRIBUTE                3   xyzw        3     NONE   float       
// ATTRIBUTE                4   xy          4     NONE   float       
// SV_VertexID              0   x           5   VERTID    uint       
// SV_InstanceID            0   x           6   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// SV_ClipDistance          1   x           1  CLIPDST   float   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[167], immediateIndexed
dcl_constantbuffer cb2[165], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_input v0.xyz
dcl_input_sgv v6.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output_siv o1.x, clip_distance
dcl_temps 20
dcl_resource_structured t101, 2048
dcl_resource_structured t102, 2048
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 088322132d3ce137-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r7.xyzw, l(0), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r8.xyzw, l(0), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r9.xyzw, l(0), l(32), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r10.xyzw, l(0), l(48), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r11.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r12.xyzw, l(1), l(576), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r13.xyzw, l(1), l(608), t101.xyzw


// cb2 remapped to t102 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 088322132d3ce137-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r14.xyzw, l(0), l(0), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r15.xyzw, l(0), l(16), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r16.xyzw, l(0), l(32), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r17.xyzw, l(0), l(48), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r18.xyzw, l(0), l(944), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r19.xyzw, l(1), l(576), t102.xyzw

if_nz cb0[8].y
  mov r0.x, r13.w
else 
  and r0.x, v6.x, l(1)
endif 
if_z r0.x
  mov r1.x, r7.x
  mov r1.y, r8.x
  mov r1.z, r9.x
  mov r1.w, r10.x
  mov r2.x, r7.y
  mov r2.y, r8.y
  mov r2.z, r9.y
  mov r2.w, r10.y
  mov r3.x, r7.z
  mov r3.y, r8.z
  mov r3.z, r9.z
  mov r3.w, r10.z
  mov r4.x, r7.w
  mov r4.y, r8.w
  mov r4.z, r9.w
  mov r4.w, r10.w
  mov r0.yzw, r11.xxyz
  mov r5.x, r12.y
else 
  mov r1.x, r14.x
  mov r1.y, r15.x
  mov r1.z, r16.x
  mov r1.w, r17.x
  mov r2.x, r14.y
  mov r2.y, r15.y
  mov r2.z, r16.y
  mov r2.w, r17.y
  mov r3.x, r14.z
  mov r3.y, r15.z
  mov r3.z, r16.z
  mov r3.w, r17.z
  mov r4.x, r14.w
  mov r4.y, r15.w
  mov r4.z, r16.w
  mov r4.w, r17.w
  mov r0.yzw, r18.xxyz
  mov r5.x, r19.y
endif 
mul r5.yzw, v0.yyyy, cb3[1].xxyz
mad r5.yzw, cb3[0].xxyz, v0.xxxx, r5.yyzw
mad r5.yzw, cb3[2].xxyz, v0.zzzz, r5.yyzw
add r0.yzw, r0.yyzw, cb3[3].xxyz
add r6.xyz, r0.yzwy, r5.yzwy
mov r6.w, l(1.000000)
dp4 r1.x, r6.xyzw, r1.xyzw
dp4 r1.y, r6.xyzw, r2.xyzw
dp4 r1.z, r6.xyzw, r3.xyzw
dp4 r1.w, r6.xyzw, r4.xyzw
or r0.y, cb0[0].x, cb0[8].y
if_nz r0.y
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o1.x, r1.xwxx, r2.xyxx
  mul r0.y, r5.x, l(0.500000)
  mul r0.x, r1.w, icb[r0.x + 0].x
  mad r0.z, -r5.x, l(0.500000), l(1.000000)
  mul r0.x, r0.z, r0.x
  mad r1.x, r1.x, r0.y, r0.x
else 
  mov o1.x, l(0)
endif 
mov o0.xyzw, r1.xyzw
ret 
// Approximately 0 instruction slots used