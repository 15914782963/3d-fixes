// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 eea6eee6c8d5d088-vs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:42:43 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz 
// ATTRIBUTE                1   xyz         1     NONE   float       
// ATTRIBUTE                2   xyzw        2     NONE   float   xyzw
// ATTRIBUTE                3   xyzw        3     NONE   float   xyzw
// ATTRIBUTE                4   xy          4     NONE   float   xy  
// ATTRIBUTE                5   xy          5     NONE   float   xy  
// SV_VertexID              0   x           6   VERTID    uint       
// SV_InstanceID            0   x           7   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                11   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x   
// SV_POSITION              0   xyzw        4      POS   float   xyzw
// SV_ClipDistance          1   x           5  CLIPDST   float   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[167], immediateIndexed
dcl_constantbuffer cb2[165], immediateIndexed
dcl_constantbuffer cb3[15], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_constantbuffer cb5[14], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input v0.xyz
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xy
dcl_input v5.xy
dcl_input_sgv v7.x, instance_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output_siv o4.xyzw, position
dcl_output_siv o5.x, clip_distance
dcl_temps 23
dcl_resource_structured t101, 2048
dcl_resource_structured t102, 2048
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 eea6eee6c8d5d088-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r9.xyzw, l(0), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r10.xyzw, l(0), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r11.xyzw, l(0), l(32), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r12.xyzw, l(0), l(48), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r13.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r14.xyzw, l(1), l(64), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r15.xyzw, l(1), l(576), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r16.xyzw, l(1), l(608), t101.xyzw


// cb2 remapped to t102 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 eea6eee6c8d5d088-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r17.xyzw, l(0), l(0), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r18.xyzw, l(0), l(16), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r19.xyzw, l(0), l(32), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r20.xyzw, l(0), l(48), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r21.xyzw, l(0), l(944), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r22.xyzw, l(1), l(576), t102.xyzw

if_nz cb0[8].y
  mov r0.x, r16.w
else 
  and r0.x, v7.x, l(1)
endif 
if_z r0.x
  mov r1.x, r9.x
  mov r1.y, r10.x
  mov r1.z, r11.x
  mov r1.w, r12.x
  mov r2.x, r9.y
  mov r2.y, r10.y
  mov r2.z, r11.y
  mov r2.w, r12.y
  mov r3.x, r9.z
  mov r3.y, r10.z
  mov r3.z, r11.z
  mov r3.w, r12.z
  mov r4.x, r9.w
  mov r4.y, r10.w
  mov r4.z, r11.w
  mov r4.w, r12.w
  mov r0.yzw, r13.xxyz
  mov r5.x, r15.y
else 
  mov r1.x, r17.x
  mov r1.y, r18.x
  mov r1.z, r19.x
  mov r1.w, r20.x
  mov r2.x, r17.y
  mov r2.y, r18.y
  mov r2.z, r19.y
  mov r2.w, r20.y
  mov r3.x, r17.z
  mov r3.y, r18.z
  mov r3.z, r19.z
  mov r3.w, r20.z
  mov r4.x, r17.w
  mov r4.y, r18.w
  mov r4.z, r19.w
  mov r4.w, r20.w
  mov r0.yzw, r21.xxyz
  mov r5.x, r22.y
endif 
mad r6.xyzw, v2.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r5.yzw, cb3[0].xxyz, cb3[14].xxxx
mul r7.xyz, cb3[1].xyzx, cb3[14].yyyy
mul r8.xyz, cb3[2].xyzx, cb3[14].zzzz
mul r7.xyz, r6.yyyy, r7.xyzx
mad r5.yzw, r6.xxxx, r5.yyzw, r7.xxyz
mad r5.yzw, r6.zzzz, r8.xxyz, r5.yyzw
mul o0.w, r6.w, cb3[9].w
mul r6.xyz, v0.yyyy, cb3[1].xyzx
mad r6.xyz, cb3[0].xyzx, v0.xxxx, r6.xyzx
mad r6.xyz, cb3[2].xyzx, v0.zzzz, r6.xyzx
add r7.xyz, r0.yzwy, cb3[3].xyzx
add r6.xyz, r6.xyzx, r7.xyzx
sample_l_indexable(texture2d)(float,float,float,float) r7.xy, v5.xyxx, t0.xzyw, s0, l(0.000000)
dp2 r0.w, r7.yxyy, v3.zwzz
mul r7.xyz, r0.wwww, r5.yzwy
mul r0.w, cb4[0].y, cb5[12].w
mul r0.w, r0.w, r14.z
mul r8.y, r0.w, l(0.100000)
add r0.yz, -r0.yyzy, r6.xxyx
div r0.yz, r0.yyzy, cb5[13].xxxx
add r0.yz, r0.yyzy, v5.xxyx
mov r8.x, l(0)
mad r0.yz, r0.yyzy, cb5[13].yyyy, r8.xxyx
sample_l_indexable(texture2d)(float,float,float,float) r0.yzw, r0.yzyy, t1.wxyz, s1, l(0.000000)
mul r0.yzw, r0.yyzw, cb5[13].zzzz
mad r6.xyz, r7.xyzx, r0.yzwy, r6.xyzx
mov r6.w, l(1.000000)
dp4 r1.x, r6.xyzw, r1.xyzw
dp4 r1.y, r6.xyzw, r2.xyzw
dp4 r1.z, r6.xyzw, r3.xyzw
dp4 r1.w, r6.xyzw, r4.xyzw
or r0.y, cb0[0].x, cb0[8].y
if_nz r0.y
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o5.x, r1.xwxx, r2.xyxx
  mul r0.y, r5.x, l(0.500000)
  mul r0.z, r1.w, icb[r0.x + 0].x
  mad r0.w, -r5.x, l(0.500000), l(1.000000)
  mul r0.z, r0.w, r0.z
  mad r1.x, r1.x, r0.y, r0.z
else 
  mov o5.x, l(0)
endif 
movc r0.y, cb0[0].x, l(-0.000000), l(0)
or o3.x, r0.x, r0.y
mov o0.xyz, r5.yzwy
mov o1.xyzw, v3.xyzw
mov o2.xy, v4.xyxx
mov o2.zw, l(0,0,0,0)
mov o4.xyzw, r1.xyzw
ret 
// Approximately 0 instruction slots used