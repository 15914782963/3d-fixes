// asmtool.py --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 52fac639c90d46fa-ps.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.63 on Tue Sep 12 13:32:51 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// SV_POSITION              0   xyzw        1      POS   float       
// SV_RenderTargetArrayIndex     0   x           2  RTINDEX    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[53], immediateIndexed
dcl_constantbuffer cb1[141], dynamicIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear noperspective v0.xy
dcl_input_ps_siv constant v2.x, rendertarget_array_index
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 6
dcl_resource_structured t101, 2048

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 52fac639c90d46fa-ps.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r5.xyzw, l(1), l(160), t101.xyzw

utof r0.x, v2.x
add r0.x, r0.x, l(0.500000)
mov r0.y, cb0[3].x
mad r1.z, r0.x, cb1[r0.y + 139].w, cb1[r0.y + 137].z
div r0.zw, v0.yyyx, cb1[r0.y + 139].yyyx
add r0.zw, r0.zzzw, cb1[r0.y + 137].yyyx
mul r1.w, l(0.500000), cb1[r0.y + 139].w
mad r1.xy, -cb1[r0.y + 139].wwww, l(0.500000, 0.500000, 0.000000, 0.000000), r0.zwzz
mul r0.z, r0.x, cb1[r0.y + 137].w
add r2.xyz, -r1.xzyx, cb2[0].yzxy
mul r0.w, cb2[0].w, cb2[0].w
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
dp3 r3.x, r2.xyzx, r2.xyzx
add r2.w, r2.w, -r3.x
lt r2.w, r2.w, l(0.000000)
discard_nz r2.w
rsq r2.w, r3.x
mul r2.xyz, r2.wwww, r2.xyzx
mul r3.xyz, r1.wwww, r2.zxyz
dp3 r1.w, |r3.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
add r1.xyz, r1.wwww, r1.xyzx
add r3.xyz, -r1.yxzy, cb2[0].xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
add r2.w, r1.w, l(1.000000)
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
mul r0.w, r0.w, r1.w
mad r0.w, -r0.w, r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r2.w
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx
dp3 r1.w, r3.xyzx, cb2[2].xyzx
add r1.w, r1.w, -cb2[3].x
mul_sat r1.w, r1.w, cb2[3].y
mul r1.w, r1.w, r1.w
mul r3.x, r0.w, r1.w
if_nz cb0[48].w
  lt r0.w, cb0[48].x, l(1.000000)
  if_nz r0.w
    add r4.xyz, r1.xyzx, -cb2[0].yxzy
    dp3 r0.w, r4.xyzx, r4.xyzx
    sqrt r0.w, r0.w
    div r4.xyz, r4.xyzx, r0.wwww
    min r1.w, |r4.y|, |r4.x|
    max r2.w, |r4.y|, |r4.x|
    div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
    mul r1.w, r1.w, r2.w
    mul r2.w, r1.w, r1.w
    mad r3.z, r2.w, l(0.0208350997), l(-0.085133)
    mad r3.z, r2.w, r3.z, l(0.180141)
    mad r3.z, r2.w, r3.z, l(-0.330299497)
    mad r2.w, r2.w, r3.z, l(0.999866)
    mul r3.z, r1.w, r2.w
    lt r3.w, |r4.y|, |r4.x|
    mad r3.z, r3.z, l(-2.000000), l(1.57079637)
    and r3.z, r3.w, r3.z
    mad r1.w, r1.w, r2.w, r3.z
    lt r3.zw, r4.yyyz, -r4.yyyz
    and r2.w, r3.z, l(0xc0490fdb)
    add r1.w, r1.w, r2.w
    min r2.w, r4.y, r4.x
    max r3.z, r4.y, r4.x
    lt r2.w, r2.w, -r2.w
    ge r3.z, r3.z, -r3.z
    and r2.w, r2.w, r3.z
    movc r1.w, r2.w, -r1.w, r1.w
    mul r2.w, r1.w, l(0.159154937)
    lt r3.z, l(0.000000), r1.w
    mad r1.w, r1.w, l(0.159154937), l(1.000000)
    movc r4.x, r3.z, r2.w, r1.w
    add r1.w, -|r4.z|, l(1.000000)
    sqrt r1.w, r1.w
    mad r2.w, |r4.z|, l(-0.0187292993), l(0.074261)
    mad r2.w, r2.w, |r4.z|, l(-0.212114394)
    mad r2.w, r2.w, |r4.z|, l(1.57072878)
    mul r3.z, r1.w, r2.w
    mad r3.z, r3.z, l(-2.000000), l(3.14159274)
    and r3.z, r3.w, r3.z
    mad r1.w, r2.w, r1.w, r3.z
    mul r4.y, r1.w, l(0.318309873)
    sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t0.yzwx, s0, l(0.000000)
    mul r0.w, r0.w, cb2[0].w
    lt r0.w, r0.w, r1.w
    and r3.y, r0.w, l(0x3f800000)
  else 
    mul r4.xyzw, r1.xxxx, cb0[50].xyzw
    mad r4.xyzw, r1.yyyy, cb0[49].xyzw, r4.xyzw
    mad r1.xyzw, r1.zzzz, cb0[51].xyzw, r4.xyzw
    add r1.xyzw, r1.xyzw, cb0[52].xyzw
    div r1.xy, r1.xyxx, r1.wwww
    ge r3.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
    ge r4.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
    and r3.zw, r3.zzzw, r4.xxxy
    and r0.w, r3.w, r3.z
    if_nz r0.w
      sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t0.yzwx, s0, l(0.000000)
      lt r0.w, r1.z, r0.w
      and r3.y, r0.w, l(0x3f800000)
    else 
      mov r3.y, l(1.000000)
    endif 
  endif 
else 
  mov r3.y, l(1.000000)
endif 
ieq r0.w, cb0[3].x, l(1)
mad r1.x, r5.w, l(4.000000), l(1.000000)
mov r0.xy, v0.xyxx
add r1.y, r5.w, r5.w
mad r0.xyz, r0.xyzx, r1.xxxx, -r1.yyyy
add r0.xyz, r0.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r0.xyz, -|r0.xyzx|, l(0.500000, 0.500000, 0.500000, 0.000000)
mul_sat r0.xyz, r0.xyzx, l(10.000000, 10.000000, 10.000000, 0.000000)
mul r0.x, r0.y, r0.x
mul r0.x, r0.z, r0.x
mul r0.xy, r3.xyxx, r0.xxxx
movc r0.xy, r0.wwww, r0.xyxx, r3.xyxx
mul r0.xzw, r0.xxxx, cb2[1].xxyz
mul r0.xyz, r0.yyyy, r0.xzwx
mul r1.yzw, r2.xxyz, l(0.000000, -0.488603, 0.488603, -0.488603)
mov r1.x, l(0.0897936225)
mul r0.w, r0.x, l(0.318309873)
mul r2.xyzw, r0.xwww, r1.xyzw
mul r3.xyzw, r0.yyyy, l(1.000000, 0.318309873, 0.318309873, 0.318309873)
mul r3.xyzw, r1.xyzw, r3.xyzw
mul r0.xyzw, r0.zzzz, l(1.000000, 0.318309873, 0.318309873, 0.318309873)
mul r0.xyzw, r0.xyzw, r1.xyzw
mov r1.x, r2.y
mov r1.y, r3.y
mov r1.z, r0.y
dp3 o1.x, r1.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
mov r1.x, r2.z
mov r1.y, r3.z
mov r1.z, r0.z
dp3 o1.y, r1.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
mov r1.x, r2.w
mov r1.y, r3.w
mov r1.z, r0.w
dp3 o1.z, r1.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
mov o0.x, r2.x
mov o0.y, r3.x
mov o0.z, r0.x
mov o0.w, l(0)
mov o1.w, l(0)
ret 
// Approximately 0 instruction slots used