// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 9f7f2c747ac2de54-vs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:42:45 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz 
// ATTRIBUTE                1   xyz         1     NONE   float   xyz 
// ATTRIBUTE                2   xyzw        2     NONE   float   xyzw
// ATTRIBUTE                3   xyzw        3     NONE   float   xyzw
// ATTRIBUTE                4   xy          4     NONE   float   xy  
// ATTRIBUTE                5   xy          5     NONE   float   xy  
// SV_VertexID              0   x           6   VERTID    uint   x   
// SV_InstanceID            0   x           7   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           4     NONE    uint   x   
// VELOCITY_PREV_POS        0   xyzw        5     NONE   float   xyzw
// SV_POSITION              0   xyzw        6      POS   float   xyzw
// SV_ClipDistance          1   x           7  CLIPDST   float   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[165], immediateIndexed
dcl_constantbuffer cb2[165], immediateIndexed
dcl_constantbuffer cb3[15], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_constantbuffer cb5[18], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xy
dcl_input v5.xy
dcl_input_sgv v6.x, vertex_id
dcl_input_sgv v7.x, instance_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.x
dcl_output o5.xyzw
dcl_output_siv o6.xyzw, position
dcl_output_siv o7.x, clip_distance
dcl_temps 39
dcl_resource_structured t101, 2048
dcl_resource_structured t102, 2048
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 9f7f2c747ac2de54-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r15.xyzw, l(0), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r16.xyzw, l(0), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r17.xyzw, l(0), l(32), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r18.xyzw, l(0), l(48), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r19.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r20.xyzw, l(0), l(1280), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r21.xyzw, l(0), l(1296), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r22.xyzw, l(0), l(1312), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r23.xyzw, l(0), l(1328), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r24.xyzw, l(0), l(1632), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r25.xyzw, l(1), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r26.xyzw, l(1), l(64), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r27.xyzw, l(1), l(576), t101.xyzw


// cb2 remapped to t102 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 9f7f2c747ac2de54-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r28.xyzw, l(0), l(0), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r29.xyzw, l(0), l(16), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r30.xyzw, l(0), l(32), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r31.xyzw, l(0), l(48), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r32.xyzw, l(0), l(944), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r33.xyzw, l(0), l(1280), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r34.xyzw, l(0), l(1296), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r35.xyzw, l(0), l(1312), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r36.xyzw, l(0), l(1328), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r37.xyzw, l(0), l(1632), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r38.xyzw, l(1), l(576), t102.xyzw

and r0.x, v7.x, l(1)
if_z r0.x
  mov r1.x, r15.x
  mov r1.y, r16.x
  mov r1.z, r17.x
  mov r1.w, r18.x
  mov r2.x, r15.y
  mov r2.y, r16.y
  mov r2.z, r17.y
  mov r2.w, r18.y
  mov r3.x, r15.z
  mov r3.y, r16.z
  mov r3.z, r17.z
  mov r3.w, r18.z
  mov r4.x, r15.w
  mov r4.y, r16.w
  mov r4.z, r17.w
  mov r4.w, r18.w
  mov r5.x, r20.x
  mov r5.y, r21.x
  mov r5.z, r22.x
  mov r5.w, r23.x
  mov r6.x, r20.y
  mov r6.y, r21.y
  mov r6.z, r22.y
  mov r6.w, r23.y
  mov r7.x, r20.w
  mov r7.y, r21.w
  mov r7.z, r22.w
  mov r7.w, r23.w
  mov r0.yzw, r24.xxyz
  mov r8.x, r27.y
  mov r8.yzw, r19.xxyz
else 
  mov r1.x, r28.x
  mov r1.y, r29.x
  mov r1.z, r30.x
  mov r1.w, r31.x
  mov r2.x, r28.y
  mov r2.y, r29.y
  mov r2.z, r30.y
  mov r2.w, r31.y
  mov r3.x, r28.z
  mov r3.y, r29.z
  mov r3.z, r30.z
  mov r3.w, r31.z
  mov r4.x, r28.w
  mov r4.y, r29.w
  mov r4.z, r30.w
  mov r4.w, r31.w
  mov r5.x, r33.x
  mov r5.y, r34.x
  mov r5.z, r35.x
  mov r5.w, r36.x
  mov r6.x, r33.y
  mov r6.y, r34.y
  mov r6.z, r35.y
  mov r6.w, r36.y
  mov r7.x, r33.w
  mov r7.y, r34.w
  mov r7.z, r35.w
  mov r7.w, r36.w
  mov r0.yzw, r37.xxyz
  mov r8.x, r38.y
  mov r8.yzw, r32.xxyz
endif 
mad r9.xyz, v1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r10.xyzw, v2.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r11.xyz, r9.xyzx, r10.yzxy
mad r9.xyz, r10.xyzx, r9.yzxy, -r11.xyzx
mul r9.xyz, r10.wwww, r9.xyzx
mul r11.xyz, r10.yzxy, r9.xyzx
mad r9.xyz, r9.zxyz, r10.zxyz, -r11.xyzx
mul r9.xyz, r10.wwww, r9.xyzx
mul r11.xyz, cb3[0].xyzx, cb3[14].xxxx
mul r12.xyz, cb3[1].xyzx, cb3[14].yyyy
mul r13.xyz, cb3[2].xyzx, cb3[14].zzzz
mul r14.xyz, r9.yyyy, r12.xyzx
mad r9.xyw, r9.xxxx, r11.xyxz, r14.xyxz
mad o0.xyz, r9.zzzz, r13.xyzx, r9.xywx
mul r9.xyz, r10.yyyy, r12.xyzx
mad r9.xyz, r10.xxxx, r11.xyzx, r9.xyzx
mad r9.xyz, r10.zzzz, r13.xyzx, r9.xyzx
mul o1.w, r10.w, cb3[9].w
mul r10.xyz, v0.yyyy, cb3[1].xyzx
mad r10.xyz, cb3[0].xyzx, v0.xxxx, r10.xyzx
mad r10.xyz, cb3[2].xyzx, v0.zzzz, r10.xyzx
add r11.xyz, r8.yzwy, cb3[3].xyzx
add r10.xyz, r10.xyzx, r11.xyzx
max r8.w, |v3.x|, l(0.000001)
log r8.w, r8.w
mul r8.w, r8.w, cb5[15].w
exp r8.w, r8.w
mul r11.xyz, r8.wwww, r9.xyzx
add r8.w, cb4[0].y, cb5[16].x
add r8.yz, -r8.yyzy, r10.xxyx
div r8.yz, r8.yyzy, cb5[16].yyyy
add r8.yz, r8.yyzy, v5.xxyx
mul r8.yz, r8.yyzy, cb5[16].zzzz
mad r8.yz, r26.zzzz, r8.wwww, r8.yyzy
sample_l_indexable(texture2d)(float,float,float,float) r12.xyz, r8.yzyy, t0.xyzw, s0, l(0.000000)
add r8.y, cb5[16].w, -cb5[17].x
mad r8.y, cb4[0].y, r8.y, cb5[17].x
mul r12.xyz, r8.yyyy, r12.xyzx
mad r10.xyz, r11.xyzx, r12.xyzx, r10.xyzx
mov r10.w, l(1.000000)
dp4 r1.x, r10.xyzw, r1.xyzw
dp4 r1.y, r10.xyzw, r2.xyzw
dp4 r1.z, r10.xyzw, r3.xyzw
dp4 r1.w, r10.xyzw, r4.xyzw
if_nz cb0[0].x
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o7.x, r1.xwxx, r2.xyxx
  mul r2.x, r8.x, l(0.500000)
  mul r2.y, r1.w, icb[r0.x + 0].x
  mad r2.z, -r8.x, l(0.500000), l(1.000000)
  mul r2.y, r2.z, r2.y
  mad r1.x, r1.x, r2.x, r2.y
else 
  mov o7.x, l(0)
endif 
movc r2.x, cb0[0].x, l(1), l(0)
imad o4.x, r2.x, l(0x80000000), r0.x
add r2.xyw, r0.yzyw, cb0[6].xyxz
imad r0.x, v6.x, l(5), cb0[8].x
ld_indexable(buffer)(float,float,float,float) r3.x, r0.xxxx, t1.xyzw
iadd r0.xw, r0.xxxx, l(1, 0, 0, 2)
ld_indexable(buffer)(float,float,float,float) r3.y, r0.xxxx, t1.yxzw
ld_indexable(buffer)(float,float,float,float) r3.z, r0.wwww, t1.yzxw
mov r3.w, l(1.000000)
mov r4.x, cb0[3].x
mov r4.y, cb0[4].x
mov r4.z, cb0[5].x
mov r4.w, r2.x
dp4 r4.x, r3.xyzw, r4.xyzw
mov r10.x, cb0[3].y
mov r10.y, cb0[4].y
mov r10.z, cb0[5].y
mov r10.w, r2.y
dp4 r4.y, r3.xyzw, r10.xyzw
mov r2.x, cb0[3].z
mov r2.y, cb0[4].z
mov r2.z, cb0[5].z
dp4 r4.z, r3.xyzw, r2.xyzw
add r0.xy, -r0.yzyy, r4.xyxx
div r0.xy, r0.xyxx, cb5[16].yyyy
add r0.xy, r0.xyxx, v5.xyxx
mul r0.xy, r0.xyxx, cb5[16].zzzz
mad r0.xy, r25.zzzz, r8.wwww, r0.xyxx
sample_l_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, l(0.000000)
mul r0.xyz, r8.yyyy, r0.xyzx
mad r0.xyz, r11.xyzx, r0.xyzx, r4.xyzx
mov r0.w, l(1.000000)
dp4 o5.x, r0.xyzw, r5.xyzw
dp4 o5.y, r0.xyzw, r6.xyzw
dp4 o5.w, r0.xyzw, r7.xyzw
add o5.z, -cb0[8].y, l(1.000000)
mov o0.w, l(0)
mov o1.xyz, r9.xyzx
mov o2.xyzw, v3.xyzw
mov o3.xy, v4.xyxx
mov o3.zw, l(0,0,0,0)
mov o6.xyzw, r1.xyzw
ret 
// Approximately 0 instruction slots used