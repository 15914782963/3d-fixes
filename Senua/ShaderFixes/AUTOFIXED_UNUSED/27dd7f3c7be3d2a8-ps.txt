// asmtool.py --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 27dd7f3c7be3d2a8-ps.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 14:20:40 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// PACKED_EYE_INDEX         0   x           3     NONE    uint       
// TEXCOORD                 6   xyzw        4     NONE   float       
// SV_Position              0   xyzw        5      POS   float   xy w
// SV_IsFrontFace           0   x           6    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[133], immediateIndexed
dcl_constantbuffer cb2[9], immediateIndexed
dcl_constantbuffer cb3[16], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps_siv linear noperspective v5.xyw, position
dcl_output o0.xyzw
dcl_temps 14
dcl_resource_structured t101, 2048

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 27dd7f3c7be3d2a8-ps.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r5.xyzw, l(0), l(128), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r6.xyzw, l(0), l(144), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r7.xyzw, l(0), l(160), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r8.xyzw, l(0), l(848), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r9.xyzw, l(0), l(864), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r10.xyzw, l(0), l(1936), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r11.xyzw, l(0), l(1952), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r12.xyzw, l(1), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r13.xyzw, l(1), l(64), t101.xyzw

mul r0.x, v2.x, l(3.14159274)
sincos r0.x, null, r0.x
max r0.x, |r0.x|, l(0.000001)
log r0.x, r0.x
mul r0.x, r0.x, cb3[13].z
exp r0.x, r0.x
add r0.x, -r0.x, l(1.000000)
mul r0.y, r0.x, cb3[13].w
add r0.z, -cb3[14].y, cb3[14].z
mad r0.z, cb3[9].z, r0.z, cb3[14].y
mad r0.x, r0.x, r0.z, -r0.y
mad r0.x, v2.y, r0.x, r0.y
mov r1.xw, l(0,0,0,0)
mul r1.y, r13.z, l(-0.500000)
add r0.yz, r1.xxyx, v2.xxyx
sample_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r0.z, v2.xyxx, t1.xyzw, s1
add r0.w, -r0.z, l(1.000000)
mul r0.w, r0.w, cb3[11].w
mad r0.y, r0.y, r0.w, -r0.z
add r0.z, -cb3[9].x, cb3[10].x
mad r0.z, cb3[9].w, r0.z, cb3[9].x
mul r0.z, r0.z, r13.z
mul r1.xyz, r0.zzzz, l(-0.500000, -0.623898, -0.250000, 0.000000)
mul r0.zw, v2.xxxy, l(0.000000, 0.000000, 2.000000, 0.500000)
add r2.x, -cb3[10].y, cb3[11].x
mad r2.x, cb3[10].w, r2.x, cb3[10].y
add r3.x, -cb3[11].y, cb3[11].z
mad r2.y, cb3[9].z, r3.x, cb3[11].y
mad r0.zw, r0.zzzw, r2.xxxy, cb2[8].xxxx
add r0.zw, r0.zzzw, r1.wwwx
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.zwzz, t0.xyzw, s0
mad r0.zw, v2.xxxy, l(0.000000, 0.000000, 2.000000, 0.823007), l(0.000000, 0.000000, 0.500000, 0.500000)
mad r0.zw, r2.xxxy, r0.zzzw, cb2[8].yyyy
add r0.zw, r0.zzzw, r1.wwwy
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.zwzz, t0.xyzw, s0
add r0.z, r3.w, r4.w
add r3.xyz, r3.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r4.xyz, r4.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r4.xyz, r4.xyzx, r4.xyzx
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r4.xyzx
mul r0.z, r0.z, l(0.500000)
max r0.z, |r0.z|, l(0.000001)
log r0.z, r0.z
mul r0.z, r0.z, cb3[12].w
exp r0.z, r0.z
mad r0.z, r0.z, cb3[13].y, r0.y
mov_sat r0.y, r0.y
mul r0.y, r0.y, cb3[12].x
mov r2.zw, l(0,0,1.000000,0.250000)
mul r1.xy, r2.zyzz, v2.xyxx
mad r1.xy, r2.xwxx, r1.xyxx, r1.wzww
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t1.yzwx, s1
mov_sat r1.x, r0.w
add r0.w, -r0.w, l(1.000000)
max r0.w, |r0.w|, l(0.000001)
mad r0.z, r1.x, l(10.000000), r0.z
mul r1.x, r0.w, r0.w
mul r1.x, r1.x, r1.x
mul r0.w, r0.w, r1.x
mad_sat r0.x, -r0.w, r0.x, r0.z
add r0.z, -r0.x, l(1.000000)
mul r0.x, r0.z, r0.x
mul r0.x, r0.x, cb3[15].x
mul r0.x, r0.x, l(0.075000)
mul r1.xyz, r3.xyzx, l(1.000000, 1.000000, 0.500000, 0.000000)
mad r2.xyz, -r3.xyzx, l(1.000000, 1.000000, 0.500000, 0.000000), l(0.000000, 0.000000, 1.000000, 0.000000)
mad r0.yzw, r0.yyyy, r2.xxyz, r1.xxyz
mad r0.yzw, r0.yyzw, r12.wwww, r12.xxyz
mul r1.xyz, v0.yzxy, v1.zxyz
mad r1.xyz, v1.yzxy, v0.zxyz, -r1.xyzx
mul r1.xyz, r1.xyzx, v1.wwww
mul r1.xyz, r0.zzzz, r1.xyzx
mad r1.xyz, r0.yyyy, v0.xyzx, r1.xyzx
mad r0.yzw, r0.wwww, v1.xxyz, r1.xxyz
mul r1.xyz, r0.zzzz, r6.xyzx
mad r1.xyz, r0.yyyy, r5.xyzx, r1.xyzx
mad r0.yzw, r0.wwww, r7.xxyz, r1.xxyz
dp3 r0.w, r0.yzwy, r0.yzwy
rsq r0.w, r0.w
mul r0.yz, r0.wwww, r0.yyzy
mul r0.xy, r0.xxxx, r0.yzyy
dp2 r0.z, r0.xyxx, r0.xyxx
add r0.z, r0.z, l(-0.000010)
lt r0.z, r0.z, l(0.000000)
discard_nz r0.z
mul r0.w, cb0[8].x, cb0[8].y
mov r0.z, cb0[8].x
mul r0.zw, r0.zzzw, cb0[8].zzzw
mul r0.xy, r0.xyxx, r0.zwzz
add r0.zw, v5.xxxy, -r10.xxxy
mad r0.zw, r0.zzzw, r11.zzzw, l(0.000000, 0.000000, -0.500000, -0.500000)
mul r1.xy, r0.zwzz, v5.wwww
mov r1.z, v5.w
mul r1.xyw, r1.xyxz, l(2.000000, -2.000000, 0.000000, 1.000000)
div r0.zw, r1.xxxy, r1.wwww
mad r0.zw, r0.zzzw, r9.xxxy, r9.wwwz
mad r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.000230, -0.000230), r0.zzzw
mul r0.xy, r0.xyxx, l(0.000230, -0.000230, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t2.yzxw, s2, l(0.000000)
mad r0.w, r0.z, r8.z, -r8.w
mad r0.z, r0.z, r8.x, r8.y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add r0.z, r0.w, r0.z
mad r0.z, -r1.z, l(1.000000), r0.z
mul r0.w, cb3[15].y, l(-0.500000)
min r0.w, |r0.w|, l(50.000000)
max r0.w, r0.w, l(1.000000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mad_sat r0.z, r0.z, r0.w, -cb3[15].y
mul r0.xy, r0.zzzz, r0.xyxx
mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
min r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
max o0.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
mov o0.zw, -r0.zzzw
ret 
// Approximately 0 instruction slots used