// asmtool.py --remap-cb 0 100 --remap-cb 1 101 -i -f --only-autofixed --disable-driver-stereo-cb 12 f409d552131d8741-ps.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:42:43 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                11   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x   
// SV_Position              0   xyzw        4      POS   float   xyz 
// SV_IsFrontFace           0   x           5    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[142], immediateIndexed
dcl_constantbuffer cb1[40], immediateIndexed
dcl_constantbuffer cb2[13], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps constant v3.x
dcl_input_ps_siv linear noperspective v4.xyz, position
dcl_output o0.xyzw
dcl_temps 14
dcl_resource_structured t100, 2048
dcl_resource_structured t101, 640

// cb0 remapped to t100 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 0 100 --remap-cb 1 101 -i -f --only-autofixed --disable-driver-stereo-cb 12 f409d552131d8741-ps.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r5.xyzw, l(0), l(576), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r6.xyzw, l(0), l(592), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r7.xyzw, l(0), l(608), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r8.xyzw, l(0), l(624), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r9.xyzw, l(1), l(208), t100.xyzw


// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 0 100 --remap-cb 1 101 -i -f --only-autofixed --disable-driver-stereo-cb 12 f409d552131d8741-ps.txt
ld_structured_indexable(structured_buffer, stride=640)(mixed,mixed,mixed,mixed) r10.xyzw, l(0), l(576), t101.xyzw
ld_structured_indexable(structured_buffer, stride=640)(mixed,mixed,mixed,mixed) r11.xyzw, l(0), l(592), t101.xyzw
ld_structured_indexable(structured_buffer, stride=640)(mixed,mixed,mixed,mixed) r12.xyzw, l(0), l(608), t101.xyzw
ld_structured_indexable(structured_buffer, stride=640)(mixed,mixed,mixed,mixed) r13.xyzw, l(0), l(624), t101.xyzw

and r0.x, v3.x, l(1)
if_z r0.x
  mov r0.x, r5.x
  mov r0.y, r6.x
  mov r0.z, r7.x
  mov r0.w, r8.x
  mov r1.x, r5.y
  mov r1.y, r6.y
  mov r1.z, r7.y
  mov r1.w, r8.y
  mov r2.x, r5.z
  mov r2.y, r6.z
  mov r2.z, r7.z
  mov r2.w, r8.z
  mov r3.x, r5.w
  mov r3.y, r6.w
  mov r3.z, r7.w
  mov r3.w, r8.w
else 
  mov r0.x, r10.x
  mov r0.y, r11.x
  mov r0.z, r12.x
  mov r0.w, r13.x
  mov r1.x, r10.y
  mov r1.y, r11.y
  mov r1.z, r12.y
  mov r1.w, r13.y
  mov r2.x, r10.z
  mov r2.y, r11.z
  mov r2.z, r12.z
  mov r2.w, r13.z
  mov r3.x, r10.w
  mov r3.y, r11.w
  mov r3.z, r12.w
  mov r3.w, r13.w
endif 
mov r4.xyz, v4.xyzx
mov r4.w, l(1.000000)
dp4 r0.x, r4.xyzw, r0.xyzw
dp4 r0.y, r4.xyzw, r1.xyzw
dp4 r0.z, r4.xyzw, r2.xyzw
dp4 r0.w, r4.xyzw, r3.xyzw
div r0.xyz, r0.xyzx, r0.wwww
dp3 r0.w, -r0.xyzx, -r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, -r0.xyzx
mul r1.xyzw, v2.xyxy, cb2[9].xxyy
mul r2.xyzw, v2.xyxy, cb2[9].zzww
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t0.yzwx, s0
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.zwzz, t0.yxzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t0.xzyw, s0
sample_indexable(texture2d)(float,float,float,float) r1.z, r2.zwzz, t0.xywz, s0
max r1.z, |r1.z|, l(0.000001)
log r1.z, r1.z
mul r1.z, r1.z, cb2[10].y
exp r1.z, r1.z
dp3 r0.x, v0.xyzx, r0.xyzx
add r0.x, -|r0.x|, l(1.000000)
max r0.xz, |r0.xxwx|, l(0.000001, 0.000000, 0.000001, 0.000000)
log r0.x, r0.x
mul r0.y, r0.x, cb2[11].y
exp r0.y, r0.y
log r0.z, r0.z
mul r0.z, r0.z, cb2[11].z
exp r0.z, r0.z
mad r0.y, r0.y, r0.z, l(-1.000000)
mad r0.y, v1.x, r0.y, l(1.000000)
max r0.z, |r1.x|, l(0.000001)
log r0.z, r0.z
mul r0.z, r0.z, cb2[11].w
exp r0.z, r0.z
add r0.z, r0.z, l(-1.000000)
mad r0.z, v1.y, r0.z, l(1.000000)
mul r0.y, r0.z, r0.y
max r0.z, |r1.y|, l(0.000001)
log r0.z, r0.z
mul r0.xz, r0.xxzx, cb2[12].zzxz
exp r0.z, r0.z
add r0.z, r0.z, l(-1.000000)
mad r0.z, v1.z, r0.z, l(1.000000)
add r0.w, r1.z, l(-1.000000)
mad r0.w, v1.w, r0.w, l(1.000000)
mul r0.z, r0.w, r0.z
mul r0.y, r0.z, r0.y
mul r0.y, r0.y, cb2[12].y
exp r0.x, r0.x
mul r0.x, r0.x, r0.y
mad r0.y, v4.y, l(2.000000), v4.x
add r0.y, r0.y, r9.x
add r0.y, r0.y, l(-1.500000)
mul r0.y, r0.y, l(0.200000)
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), v4.xyxx
frc r0.yz, r0.yyzy
mad r0.y, r0.y, l(5.000000), r0.z
mad r0.x, r0.y, l(0.166666672), r0.x
add r0.x, r0.x, l(-0.833300)
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x
mov o0.xyzw, l(0,0,0,0)
ret 
// Approximately 0 instruction slots used