// asmtool.py --remap-cb 1 101 -i -f --only-autofixed --disable-driver-stereo-cb 12 ff1443bbc652b15a-ps.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:42:44 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// SV_POSITION              0   xyzw        1      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, 0.200000, 0, 0},
                              { 0.325000, 0.101000, 0, 0},
                              { 0.272000, -0.396000, 0, 0},
                              { -0.385000, -0.488000, 0, 0},
                              { -0.711000, 0.274000, 0, 0},
                              { 0.060000, 0.900000, 0, 0} }
dcl_constantbuffer cb0[31], immediateIndexed
dcl_constantbuffer cb1[54], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear noperspective v0.xyzw
dcl_input_ps_siv linear noperspective v1.xy, position
dcl_output o0.xyzw
dcl_temps 15
dcl_resource_structured t101, 864

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 -i -f --only-autofixed --disable-driver-stereo-cb 12 ff1443bbc652b15a-ps.txt
ld_structured_indexable(structured_buffer, stride=864)(mixed,mixed,mixed,mixed) r11.xyzw, l(0), l(128), t101.xyzw
ld_structured_indexable(structured_buffer, stride=864)(mixed,mixed,mixed,mixed) r12.xyzw, l(0), l(144), t101.xyzw
ld_structured_indexable(structured_buffer, stride=864)(mixed,mixed,mixed,mixed) r13.xyzw, l(0), l(160), t101.xyzw
ld_structured_indexable(structured_buffer, stride=864)(mixed,mixed,mixed,mixed) r14.xyzw, l(0), l(848), t101.xyzw

mul r0.y, cb0[23].w, cb0[25].w
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[25].w
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mov r1.z, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r0.w, v0.xyxx, t0.xyzw, s0
mul r2.z, r0.w, l(131072.000000)
frc r3.xy, v0.xyxx
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t0.xyzw, s0
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r4.xyz, r3.yyyy, r12.xyzx
mad r3.xyw, r3.xxxx, r11.xyxz, r4.xyxz
mad r3.xyz, r3.zzzz, r13.xyzx, r3.xywx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.yzw, r1.wwww, r3.xxyz
mul r2.xy, r2.zzzz, v0.zwzz
mad r4.xy, -r0.wwww, l(131072.000000, 131072.000000, 0.000000, 0.000000), l(1.000000, 1000.000000, 0.000000, 0.000000)
mad r4.xy, cb0[24].zzzz, r4.xyxx, r2.zzzz
mul r0.w, r4.x, cb0[23].z
mul r1.w, r2.z, cb0[22].y
mul r1.w, r1.w, cb0[24].x
mov r0.x, cb0[25].w
mov r0.z, l(1.000000)
mul r4.xzw, r0.xxyz, r3.yyzw
mad r2.xyz, r1.wwww, r4.xzwx, r2.xyzx
mad r4.xz, v0.xxyx, cb0[23].xxyx, cb0[25].xxyx
sample_indexable(texture2d)(float,float,float,float) r4.xz, r4.xzxx, t2.xzyw, s2
mad r4.xzw, r4.xxzx, l(2.000000, 0.000000, 2.000000, 2.000000), l(-1.000000, 0.000000, -1.000000, -1.000000)
mul r5.xyw, r0.wwww, r4.xzxw
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
mul r0.xyzw, r0.zzzz, r0.xyxy
mov r5.z, -r5.y
mul r0.xyzw, r0.xyzw, r5.xyzw
div r4.xz, r2.xxyx, r2.zzzz
mul r1.w, r4.y, l(0.080000)
mul r5.xyz, r1.wwww, r3.yzwy
mov r6.y, l(2.000000)
mov r7.xw, l(0.000100,0,0,0.000100)
mov r1.w, l(0)
loop 
  ige r2.w, r1.w, l(6)
  breakc_nz r2.w
  mul r8.xyzw, r0.xyzw, icb[r1.w + 0].xxyy
  add r4.yw, r8.zzzw, r8.xxxy
  itof r2.w, r1.w
  add r2.w, r2.w, l(0.500000)
  mul r2.w, r2.w, l(0.166666672)
  mov r6.zw, l(0,0,0,0)
  mov r3.w, l(0)
  loop 
    uge r5.w, r3.w, l(2)
    breakc_nz r5.w
    iadd r3.w, r3.w, l(1)
    utof r5.w, r3.w
    mul r5.w, r5.w, l(0.500000)
    itof r7.y, r3.w
    mul r7.y, r7.y, cb0[26].z
    mul r7.y, r2.w, r7.y
    mul r7.y, r7.y, l(0.500000)
    log r7.y, r7.y
    mad r8.xy, r5.wwww, r4.ywyy, r4.xzxx
    mad r8.zw, -r5.wwww, r4.yyyw, r4.xxxz
    mad r9.xy, cb0[30].xyxx, r8.xyxx, cb0[30].zwzz
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r9.xyxx, t1.yzwx, s1, r7.y
    mad r9.xy, cb0[30].xyxx, r8.zwzz, cb0[30].zwzz
    sample_l_indexable(texture2d)(float,float,float,float) r7.y, r9.xyxx, t1.yxzw, s1, r7.y
    mad r9.x, r5.w, r14.x, r14.y
    mad r5.w, r5.w, r14.z, -r14.w
    div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
    add r9.z, r5.w, r9.x
    mad r5.w, r7.y, r14.x, r14.y
    mad r7.y, r7.y, r14.z, -r14.w
    div r7.y, l(1.000000, 1.000000, 1.000000, 1.000000), r7.y
    add r10.z, r5.w, r7.y
    mul r9.xy, r8.xyxx, r9.zzzz
    mul r10.xy, r8.zwzz, r10.zzzz
    add r8.xyz, -r2.xyzx, r9.xyzx
    mul r8.xyz, r1.xyzx, r8.xyzx
    add r9.xyz, -r2.xyzx, r10.xyzx
    mul r9.xyz, r1.xyzx, r9.xyzx
    dp3 r5.w, r8.xyzx, r5.xyzx
    dp3 r7.y, r8.xyzx, r8.xyzx
    div_sat r8.x, r5.w, r7.y
    dp3 r5.w, r9.xyzx, r5.xyzx
    dp3 r7.y, r9.xyzx, r9.xyzx
    div_sat r8.y, r5.w, r7.y
    max r6.zw, r6.zzzw, r8.xxxy
  endloop 
  add r4.yw, -r6.zzzw, l(0.000000, 1.000000, 0.000000, 1.000000)
  mul r7.z, r4.w, r4.w
  mad r6.x, r4.y, r4.y, r7.x
  add r7.xw, r6.xxxy, r7.zzzw
  iadd r1.w, r1.w, l(1)
endloop 
div r3.x, r7.x, r7.w
deriv_rtx_fine r0.xyz, r3.xyzx
deriv_rty_fine r1.xyz, r3.xyzx
ftou r2.xy, v1.xyxx
bfi r2.xy, l(1, 1, 0, 0), l(1, 1, 0, 0), r2.xyxx, l(0, 0, 0, 0)
iadd r2.xy, r2.xyxx, l(-1, -1, 0, 0)
itof r2.xy, r2.xyxx
mad r0.xyz, -r0.xyzx, r2.xxxx, r3.xyzx
mad r1.xyz, -r1.xyzx, r2.yyyy, r3.xyzx
dp2 r2.x, r3.yzyy, r3.yzyy
add r2.x, -r2.x, l(1.000000)
sqrt r2.z, r2.x
dp2 r2.w, r0.yzyy, r0.yzyy
add r2.w, -r2.w, l(1.000000)
sqrt r0.w, r2.w
dp2 r2.w, r1.yzyy, r1.yzyy
add r2.w, -r2.w, l(1.000000)
sqrt r1.w, r2.w
mov r2.xy, r3.yzyy
dp3_sat r0.y, r2.xyzx, r0.yzwy
mul r0.y, r0.y, r0.y
dp3_sat r0.z, r2.xyzx, r1.yzwy
mul r0.z, r0.z, r0.z
mul r0.yw, r0.yyyz, r0.yyyz
mad r0.z, r0.z, r0.z, r0.y
add r0.z, r0.z, l(1.000000)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mul r0.yw, r0.zzzz, r0.yyyw
mul r0.x, r0.x, r0.y
mad r0.x, r0.z, r3.x, r0.x
mad o0.xyzw, r0.wwww, r1.xxxx, r0.xxxx
ret 
// Approximately 0 instruction slots used