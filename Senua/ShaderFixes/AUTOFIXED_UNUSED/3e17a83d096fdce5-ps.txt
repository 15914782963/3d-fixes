// asmtool.py --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 3e17a83d096fdce5-ps.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 14:21:00 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   x   
// PACKED_EYE_INDEX         0   x           3     NONE    uint       
// TEXCOORD                 6   xyzw        4     NONE   float       
// SV_Position              0   xyzw        5      POS   float   xyzw
// SV_IsFrontFace           0   x           6    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[133], immediateIndexed
dcl_constantbuffer cb2[11], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.x
dcl_input_ps_siv linear noperspective v5.xyzw, position
dcl_output o0.xyzw
dcl_temps 17
dcl_resource_structured t101, 2048

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 3e17a83d096fdce5-ps.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r3.xyzw, l(0), l(128), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r4.xyzw, l(0), l(144), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r5.xyzw, l(0), l(160), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r6.xyzw, l(0), l(576), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r7.xyzw, l(0), l(592), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r8.xyzw, l(0), l(608), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r9.xyzw, l(0), l(624), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r10.xyzw, l(0), l(848), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r11.xyzw, l(0), l(864), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r12.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r13.xyzw, l(0), l(1936), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r14.xyzw, l(0), l(1952), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r15.xyzw, l(1), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r16.xyzw, l(1), l(64), t101.xyzw

mul r0.xyzw, v5.yyyy, r7.xyzw
mad r0.xyzw, v5.xxxx, r6.xyzw, r0.xyzw
mad r0.xyzw, v5.zzzz, r8.xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, r9.xyzw
div r0.xyzw, r0.xzyz, r0.wwww
add r0.xyzw, r0.xyzw, -r12.xzyz
div r1.xyzw, r0.xyzw, cb2[8].zzzz
div r0.xyzw, r0.xwzw, cb2[8].yyyy
mul r2.x, r16.z, cb2[8].x
mad r1.xyzw, r2.xxxx, l(-0.030000, 0.600000, -0.030000, 0.600000), r1.xyzw
mad r0.xyzw, r2.xxxx, l(0.010000, 0.700000, 0.010000, 0.700000), r0.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.z, r1.zwzz, t0.yzxw, s0
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t0.yzxw, s0
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xyzw, s0
add r0.y, -r0.z, r1.z
mad r0.y, r0.y, l(0.500000), r0.z
mul r0.y, r0.y, |v1.x|
add r0.z, -r0.x, r1.x
mad r0.x, r0.z, l(0.500000), r0.x
mad r0.x, r0.x, |v1.y|, r0.y
add r0.y, -v2.x, l(1.000000)
mul r0.y, r0.y, v2.x
mul r0.y, r0.y, cb2[9].x
max r0.y, |r0.y|, l(0.000001)
log r0.y, r0.y
mul r0.y, r0.y, cb2[9].y
exp r0.y, r0.y
min r0.y, r0.y, l(1.000000)
mul r0.x, r0.y, r0.x
add r0.y, cb2[10].z, l(-1.000000)
mul r0.x, r0.y, r0.x
mul r0.yzw, v0.yyzx, v1.zzxy
mad r0.yzw, v1.yyzx, v0.zzxy, -r0.yyzw
mul r0.yzw, r0.yyzw, v1.wwww
mad r1.xyz, r15.wwww, l(0.000000, 0.000000, 1.000000, 0.000000), r15.xyzx
mul r0.yzw, r0.yyzw, r1.yyyy
mad r0.yzw, r1.xxxx, v0.xxyz, r0.yyzw
mad r0.yzw, r1.zzzz, v1.xxyz, r0.yyzw
mul r1.xyz, r0.zzzz, r4.xyzx
mad r1.xyz, r0.yyyy, r3.xyzx, r1.xyzx
mad r0.yzw, r0.wwww, r5.xxyz, r1.xxyz
dp3 r0.w, r0.yzwy, r0.yzwy
rsq r0.w, r0.w
mul r0.yz, r0.wwww, r0.yyzy
mul r0.xy, r0.xxxx, r0.yzyy
dp2 r0.z, r0.xyxx, r0.xyxx
add r0.z, r0.z, l(-0.000010)
lt r0.z, r0.z, l(0.000000)
discard_nz r0.z
mul r0.w, cb0[8].x, cb0[8].y
mov r0.z, cb0[8].x
mul r0.zw, r0.zzzw, cb0[8].zzzw
mul r0.xy, r0.xyxx, r0.zwzz
add r0.zw, v5.xxxy, -r13.xxxy
mad r0.zw, r0.zzzw, r14.zzzw, l(0.000000, 0.000000, -0.500000, -0.500000)
mul r1.xy, r0.zwzz, v5.wwww
mov r1.z, v5.w
mul r1.xyw, r1.xyxz, l(2.000000, -2.000000, 0.000000, 1.000000)
div r0.zw, r1.xxxy, r1.wwww
mad r0.zw, r0.zzzw, r11.xxxy, r11.wwwz
mad r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.000230, -0.000230), r0.zzzw
mul r0.xy, r0.xyxx, l(0.000230, -0.000230, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t1.yzxw, s1, l(0.000000)
mad r0.w, r0.z, r10.z, -r10.w
mad r0.z, r0.z, r10.x, r10.y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add r0.z, r0.w, r0.z
mad r0.z, -r1.z, l(1.000000), r0.z
mul r0.w, cb2[10].w, l(-0.500000)
min r0.w, |r0.w|, l(50.000000)
max r0.w, r0.w, l(1.000000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mad_sat r0.z, r0.z, r0.w, -cb2[10].w
mul r0.xy, r0.zzzz, r0.xyxx
mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
min r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
max o0.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
mov o0.zw, -r0.zzzw
ret 
// Approximately 0 instruction slots used