// asmtool.py --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 0472d61947bd47c2-vs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 14:20:41 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz 
// ATTRIBUTE                1   xyzw        1     NONE   float   xyzw
// ATTRIBUTE                2   xyzw        2     NONE   float   xyzw
// ATTRIBUTE                3   xyzw        3     NONE   float   xyzw
// ATTRIBUTE                4   xy          4     NONE   float   xy  
// SV_VertexID              0   x           5   VERTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// PARTICLE_SUBUVS          0   xyzw        4     NONE   float   xyzw
// PARTICLE_LIGHTING_OFFSET     0   xyz         5     NONE   float   xyz 
// PACKED_EYE_INDEX         0   x           6     NONE    uint   x   
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// SV_POSITION              0   xyzw        8      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[140], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[10], immediateIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xy
dcl_input_sgv v5.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o6.x
dcl_output o7.xyzw
dcl_output_siv o8.xyzw, position
dcl_temps 20
dcl_resource_structured t101, 2048
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 0472d61947bd47c2-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r9.xyzw, l(0), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r10.xyzw, l(0), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r11.xyzw, l(0), l(32), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r12.xyzw, l(0), l(48), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r13.xyzw, l(0), l(784), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r14.xyzw, l(0), l(800), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r15.xyzw, l(0), l(816), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r16.xyzw, l(0), l(832), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r17.xyzw, l(0), l(896), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r18.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r19.xyzw, l(1), l(176), t101.xyzw

mul r0.xyz, v0.yyyy, cb2[1].xyzx
mad r0.xyz, v0.xxxx, cb2[0].xyzx, r0.xyzx
mad r0.xyz, v0.zzzz, cb2[2].xyzx, r0.xyzx
add r0.xyz, r0.xyzx, cb2[3].xyzx
mul r1.xyz, v1.yyyy, cb2[1].zxyz
mad r1.xyz, v1.xxxx, cb2[0].zxyz, r1.xyzx
mad r1.xyz, v1.zzzz, cb2[2].zxyz, r1.xyzx
add r1.xyz, r1.xyzx, cb2[3].zxyz
add r2.xyz, -r14.zxyz, r16.zxyz
mad r2.xyz, cb3[6].wwww, r2.xyzx, r14.zxyz
add r3.xyz, -r13.zxyz, r15.zxyz
mad r3.xyz, cb3[6].wwww, r3.xyzx, r13.zxyz
add r4.xyz, -r2.xyzx, cb3[0].zxyz
mad r2.xyz, cb3[0].wwww, r4.xyzx, r2.xyzx
add r4.xyz, r3.xyzx, cb3[1].zxyz
mad r3.xyz, cb3[1].wwww, r4.xyzx, -r3.xyzx
add r4.xyz, -r0.yzxy, r17.yzxy
dp3 r0.w, r4.xyzx, r4.xyzx
max r1.w, r0.w, l(0.010000)
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx
add r1.xyz, r0.zxyz, -r1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
max r1.w, r1.w, l(0.010000)
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mul r5.xyz, r1.yzxy, r4.xyzx
mad r5.xyz, r4.zxyz, r1.zxyz, -r5.xyzx
dp3 r1.w, r5.xyzx, r5.xyzx
max r1.w, r1.w, l(0.010000)
rsq r1.w, r1.w
mul r5.xyz, r1.wwww, r5.xyzx
mul r6.xyz, r4.zxyz, cb3[0].yzxy
mad r6.xyz, cb3[0].xyzx, r4.xyzx, -r6.xyzx
dp3 r1.w, r6.xyzx, r6.xyzx
max r1.w, r1.w, l(0.010000)
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, r6.xyzx
mul r7.xyz, r4.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mad r7.xyz, r4.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000), -r7.xyzx
dp2 r1.w, r7.yzyy, r7.yzyy
max r1.w, r1.w, l(0.010000)
rsq r1.w, r1.w
mul r7.xyz, r1.wwww, r7.xyzx
mul r8.xyz, r4.xyzx, r7.yzxy
mad r4.xyz, r4.zxyz, r7.zxyz, -r8.xyzx
lt r1.w, l(0.000000), cb3[6].x
if_nz r1.w
  mad_sat r0.w, r0.w, cb3[6].y, -cb3[6].z
  add r1.w, -r0.w, l(1.000000)
else 
  mov r1.w, cb3[2].x
  mov r0.w, cb3[2].w
endif 
mul r5.xyz, r5.xyzx, cb3[2].yyyy
mad r2.xyz, r2.xyzx, r1.wwww, r5.xyzx
mad r2.xyz, cb3[0].zxyz, cb3[2].zzzz, r2.xyzx
mad r2.xyz, r7.xyzx, r0.wwww, r2.xyzx
mul r1.xyz, -r1.xyzx, cb3[2].yyyy
mad r1.xyz, r3.xyzx, r1.wwww, r1.xyzx
mad r1.xyz, -r6.xyzx, cb3[2].zzzz, r1.xyzx
mad r1.xyz, r4.xyzx, r0.wwww, r1.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mad r0.w, v2.z, cb3[8].x, cb3[8].y
sincos r3.x, r4.x, r0.w
mul r3.yzw, r2.yyzx, r4.xxxx
mad r5.xyz, r3.xxxx, r1.yzxy, r3.yzwy
mul r2.xyz, r2.xyzx, r3.xxxx
mad r1.xyz, r4.xxxx, r1.xyzx, -r2.xyzx
lt r2.xy, l(0.000000, 0.000000, 0.000000, 0.000000), v2.xyxx
lt r2.zw, v2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
iadd r2.xy, -r2.xyxx, r2.zwzz
itof r2.xy, r2.xyxx
if_nz cb0[3].x
  utof r0.w, v5.x
  utof r1.w, cb0[3].x
  div r0.w, r0.w, r1.w
  ge r2.z, r0.w, -r0.w
  frc r0.w, r0.w
  movc r0.w, r2.z, r0.w, -r0.w
  mul r0.w, r1.w, r0.w
  ftou r0.w, r0.w
  mul r1.w, cb3[5].y, cb3[5].x
  div r2.z, v2.w, r1.w
  ge r2.w, r2.z, -r2.z
  frc r2.z, |r2.z|
  movc r2.z, r2.w, r2.z, -r2.z
  mul r1.w, r1.w, r2.z
  ftou r1.w, r1.w
  mul r2.z, r2.y, r2.x
  lt r2.z, r2.z, l(0.000000)
  iadd r2.w, cb0[3].x, l(-1)
  iadd r2.w, -r0.w, r2.w
  movc r0.w, r2.z, r2.w, r0.w
  imad r0.w, r1.w, cb0[3].x, r0.w
  ld_indexable(buffer)(float,float,float,float) r2.zw, r0.wwww, t0.zwxy
  lt r3.xy, r2.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r3.zw, -r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
  movc r3.xy, r3.xyxx, r3.zwzz, r2.zwzz
else 
  lt r2.xy, r2.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r3.zw, -v4.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
  movc r2.zw, r2.xxxy, r3.zzzw, v4.xxxy
  mov r3.xy, v4.xyxx
endif 
add r4.xyz, r0.xyzx, r18.xyzx
add r2.xy, r3.xyxx, cb3[9].xyxx
mul r2.xy, r2.xyxx, |v2.xyxx|
mad r3.xyz, r2.xxxx, r5.xyzx, r4.xyzx
mad r3.xyz, r2.yyyy, r1.yzxy, r3.xyzx
frc r5.w, v2.w
add r0.w, -r5.w, v2.w
add r1.w, r0.w, l(1.000000)
div r2.x, r0.w, cb3[5].x
ge r2.y, r2.x, -r2.x
frc r2.x, |r2.x|
movc r2.x, r2.y, r2.x, -r2.x
mul r2.x, r2.x, cb3[5].x
div r3.w, r1.w, cb3[5].x
ge r4.x, r3.w, -r3.w
frc r3.w, |r3.w|
movc r3.w, r4.x, r3.w, -r3.w
mul r4.z, r3.w, cb3[5].x
mul r0.w, r0.w, cb3[5].z
round_ni r2.y, r0.w
mul r0.w, r1.w, cb3[5].z
round_ni r4.w, r0.w
add r2.xy, r2.zwzz, r2.xyxx
mul r2.xy, r2.xyxx, cb3[5].zwzz
add r2.zw, r2.zzzw, r4.zzzw
mul o4.zw, r2.zzzw, cb3[5].zzzw
mul r4.xyz, r1.zxyz, r5.zxyz
mad r4.xyz, r5.yzxy, r1.xyzx, -r4.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
lt r2.zw, cb3[8].zzzz, l(0.000000, 0.000000, 0.500000, 1.500000)
add r6.xyz, r0.xyzx, -cb3[3].xyzx
dp3 r0.w, r6.xyzx, r6.xyzx
rsq r0.w, r0.w
mul r7.xyz, r0.wwww, r6.xyzx
dp3 r0.w, cb3[4].xyzx, r6.xyzx
mad r6.xyz, r0.wwww, cb3[4].xyzx, cb3[3].xyzx
add r0.xyz, r0.xyzx, -r6.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
movc r0.xyz, r2.wwww, r7.xyzx, r0.xyzx
movc r0.xyz, r2.zzzz, r4.xyzx, r0.xyzx
add r0.w, v1.w, l(10.000000)
mul r0.w, r0.w, r0.w
mul r4.xyz, r0.wwww, l(1361.456299, 2333.577881, 3623.982910, 0.000000)
frc r4.xyz, r4.xyzx
mad r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r0.w, r19.w, l(0.500000)
mul o5.xyz, r4.xyzx, r0.wwww
mul r4.xyzw, r3.yyyy, r10.xyzw
mad r4.xyzw, r3.xxxx, r9.xyzw, r4.xyzw
mad r4.xyzw, r3.zzzz, r11.xyzw, r4.xyzw
add o8.xyzw, r4.xyzw, r12.xyzw
mul r4.xyz, r0.yzxy, r1.xyzx
mad r1.xyz, r1.zxyz, r0.zxyz, -r4.xyzx
dp3 r0.w, r1.xyzx, r5.xyzx
lt r1.x, l(0.000000), r0.w
lt r0.w, r0.w, l(0.000000)
iadd r0.w, -r1.x, r0.w
itof o1.w, r0.w
mov o0.xyzw, r5.xyzw
mov o1.xyz, r0.xyzx
mov o2.xyzw, v3.xyzw
mov o3.xy, r2.xyxx
mov o3.zw, l(0,0,0,0)
mov o4.xy, r2.xyxx
mov o7.xyz, r3.xyzx
mov o7.w, l(1.000000)
mov o6.x, l(0)
ret 
// Approximately 0 instruction slots used