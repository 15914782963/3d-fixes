// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 1c54ba70c9b1e034-vs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 14:24:59 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VertexID              0   x           0   VERTID    uint   x   
// SV_InstanceID            0   x           1   INSTID    uint   x   
// ATTRIBUTE                0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 4   xyz         1     NONE   float   xyz 
// TEXCOORD                 5   xyzw        2     NONE   float   xyzw
// PARTICLE_POSITION        0   xyzw        3     NONE   float   xyzw
// PARTICLE_VELOCITY        0   xyzw        4     NONE   float   xyzw
// PARTICLE_LIGHTING_OFFSET     0   xyz         5     NONE   float   xyz 
// TANGENTX                 0   xyzw        6     NONE   float   xyzw
// TANGENTZ                 0   xyzw        7     NONE   float   xyzw
// PARTICLE_SIZE            0   xy          8     NONE   float   xy  
// PACKED_EYE_INDEX         0   x           9     NONE    uint   x   
// SV_POSITION              0   xyzw       10      POS   float   xyzw
// SV_ClipDistance          1   x          11  CLIPDST   float   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[165], immediateIndexed
dcl_constantbuffer cb2[165], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_constantbuffer cb4[4], immediateIndexed
dcl_constantbuffer cb5[12], immediateIndexed
dcl_constantbuffer cb6[5], immediateIndexed
dcl_constantbuffer cb7[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_sgv v0.x, vertex_id
dcl_input_sgv v1.x, instance_id
dcl_input v2.xy
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xy
dcl_output o9.x
dcl_output_siv o10.xyzw, position
dcl_output_siv o11.x, clip_distance
dcl_temps 42
dcl_resource_structured t101, 2048
dcl_resource_structured t102, 2048
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 1c54ba70c9b1e034-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r19.xyzw, l(0), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r20.xyzw, l(0), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r21.xyzw, l(0), l(32), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r22.xyzw, l(0), l(48), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r23.xyzw, l(0), l(784), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r24.xyzw, l(0), l(800), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r25.xyzw, l(0), l(816), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r26.xyzw, l(0), l(832), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r27.xyzw, l(0), l(912), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r28.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r29.xyzw, l(1), l(176), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r30.xyzw, l(1), l(576), t101.xyzw


// cb2 remapped to t102 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 1c54ba70c9b1e034-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r31.xyzw, l(0), l(0), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r32.xyzw, l(0), l(16), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r33.xyzw, l(0), l(32), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r34.xyzw, l(0), l(48), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r35.xyzw, l(0), l(784), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r36.xyzw, l(0), l(800), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r37.xyzw, l(0), l(816), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r38.xyzw, l(0), l(832), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r39.xyzw, l(0), l(912), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r40.xyzw, l(0), l(944), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r41.xyzw, l(1), l(576), t102.xyzw

movc r0.x, cb0[0].x, l(1), l(0)
and r0.y, r0.x, cb0[3].y
if_z r0.y
  mov r1.x, r19.x
  mov r1.y, r20.x
  mov r1.z, r21.x
  mov r1.w, r22.x
  mov r2.x, r19.y
  mov r2.y, r20.y
  mov r2.z, r21.y
  mov r2.w, r22.y
  mov r3.x, r19.z
  mov r3.y, r20.z
  mov r3.z, r21.z
  mov r3.w, r22.z
  mov r4.x, r19.w
  mov r4.y, r20.w
  mov r4.z, r21.w
  mov r4.w, r22.w
  mov r5.xyz, r28.xyzx
  mov r0.z, r30.y
  mov r6.xyz, r23.xyzx
  mov r7.xyz, r24.xyzx
  mov r8.xyz, r25.xyzx
  mov r9.xyz, r26.xyzx
  mov r10.xyz, r27.xyzx
else 
  mov r1.x, r31.x
  mov r1.y, r32.x
  mov r1.z, r33.x
  mov r1.w, r34.x
  mov r2.x, r31.y
  mov r2.y, r32.y
  mov r2.z, r33.y
  mov r2.w, r34.y
  mov r3.x, r31.z
  mov r3.y, r32.z
  mov r3.z, r33.z
  mov r3.w, r34.z
  mov r4.x, r31.w
  mov r4.y, r32.w
  mov r4.z, r33.w
  mov r4.w, r34.w
  mov r5.xyz, r40.xyzx
  mov r0.z, r41.y
  mov r6.xyz, r35.xyzx
  mov r7.xyz, r36.xyzx
  mov r8.xyz, r37.xyzx
  mov r9.xyz, r38.xyzx
  mov r10.xyz, r39.xyzx
endif 
ishl r0.w, v1.x, l(4)
ushr r5.w, v0.x, l(2)
iadd r0.w, r0.w, r5.w
iadd r0.w, r0.w, cb0[3].x
ld_indexable(buffer)(float,float,float,float) r11.xy, r0.wwww, t0.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r12.xyzw, r11.xyxx, t1.xyzw, s0, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r13.xyz, r11.xyxx, t2.xyzw, s1, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r14.xyzw, r11.xyxx, t3.xyzw, s2, l(0.000000)
ge r0.w, l(1.000000), r12.w
and r0.w, r0.w, l(0x3f800000)
mul r15.xyz, r13.yyyy, cb3[1].xyzx
mad r13.xyw, r13.xxxx, cb3[0].xyxz, r15.xyxz
mad r13.xyz, r13.zzzz, cb3[2].xyzx, r13.xywx
add r15.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000100, 0.000000)
dp3 r5.w, r15.xyzx, r15.xyzx
rsq r5.w, r5.w
mul r15.xyz, r5.wwww, r15.xyzx
dp3 r5.w, r13.xyzx, r13.xyzx
sqrt r15.w, r5.w
mad r11.zw, cb5[0].zzzw, r12.wwww, cb5[0].xxxy
sample_l_indexable(texture2d)(float,float,float,float) r13.xyzw, r11.zwzz, t4.xyzw, s3, l(0.000000)
mad r13.xyzw, r13.xyzw, cb5[1].xyzw, cb5[2].xyzw
mul o2.xyzw, r13.xyzw, cb4[3].xyzw
mad r11.zw, cb5[3].zzzw, r12.wwww, cb5[3].xxxy
sample_l_indexable(texture2d)(float,float,float,float) r13.xyz, r11.zwzz, t4.xyzw, s3, l(0.000000)
mad r13.xyz, r13.xyzx, cb5[4].xyzx, cb5[5].xyzx
lt r11.zw, r14.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
movc r16.xy, r11.zwzz, l(0,0,0,0), l(-0.500000,-0.500000,0,0)
add r14.xy, r14.xyxx, r16.xyxx
add r14.xy, r14.xyxx, r14.xyxx
mul r13.xy, r13.xyxx, cb4[0].xyxx
mul r16.xy, r15.wwww, cb5[6].xyxx
max r16.xy, r16.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
min r16.xy, r16.xyxx, cb5[6].zwzz
mul r13.xy, r13.xyxx, r14.xyxx
mul r13.xy, r16.xyxx, r13.xyxx
mul r13.xy, r0.wwww, r13.xyxx
add r14.xy, -v2.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
movc r11.zw, r11.zzzw, r14.xxxy, v2.xxxy
frc r0.w, r13.z
add r5.w, -r0.w, r13.z
div r6.w, r5.w, cb5[7].x
ge r7.w, r6.w, -r6.w
frc r6.w, |r6.w|
movc r6.w, r7.w, r6.w, -r6.w
mul r14.x, r6.w, cb5[7].x
mul r5.w, r5.w, cb5[7].z
round_ni r14.y, r5.w
add r11.zw, r11.zzzw, r14.xxxy
mul r11.zw, r11.zzzw, cb5[7].zzzw
mul r5.w, r14.w, cb5[10].x
mad r5.w, r5.w, r12.w, r14.z
mul r14.xyz, r12.yyyy, cb3[1].xyzx
mad r14.xyz, cb3[0].xyzx, r12.xxxx, r14.xyzx
mad r12.xyz, cb3[2].xyzx, r12.zzzz, r14.xyzx
add r5.xyz, r5.xyzx, cb3[3].xyzx
add r5.xyz, r5.xyzx, r12.xyzx
add r9.xyz, -r7.xyzx, r9.xyzx
mad r7.xyz, cb5[9].wwww, r9.xyzx, r7.xyzx
add r8.xyz, -r6.xyzx, r8.xyzx
mad r6.xyz, cb5[9].wwww, r8.xyzx, r6.xyzx
add r8.xyz, -r7.xyzx, cb4[1].xyzx
mad r7.xyz, cb4[1].wwww, r8.xyzx, r7.xyzx
add r8.xyz, r6.xyzx, cb4[2].xyzx
mad r6.xyz, cb4[2].wwww, r8.xyzx, -r6.xyzx
add r8.xyz, -r5.zxyz, r10.zxyz
dp3 r6.w, r8.xyzx, r8.xyzx
max r7.w, r6.w, l(0.010000)
sqrt r7.w, r7.w
div r8.xyz, r8.xyzx, r7.wwww
lt r7.w, l(0.000000), cb5[9].x
if_nz r7.w
  mad_sat r6.w, r6.w, cb5[9].y, -cb5[9].z
  mul r9.xyz, r8.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r9.xyz, r8.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000), -r9.xyzx
  dp2 r7.w, r9.xyxx, r9.xyxx
  max r7.w, r7.w, l(0.010000)
  sqrt r7.w, r7.w
  div r9.xyz, r9.xyzx, r7.wwww
  mul r10.xyz, r8.xyzx, r9.yzxy
  mad r10.xyz, r8.zxyz, r9.zxyz, -r10.xyzx
  add r9.xyz, -r7.xyzx, r9.xyzx
  mad r9.xyz, r6.wwww, r9.xyzx, r7.xyzx
  dp3 r7.w, r9.xyzx, r9.xyzx
  rsq r7.w, r7.w
  mul r9.xyz, r7.wwww, r9.xyzx
  add r10.xyz, -r6.xyzx, r10.xyzx
  mad r10.xyz, r6.wwww, r10.xyzx, r6.xyzx
  dp3 r6.w, r10.xyzx, r10.xyzx
  rsq r6.w, r6.w
  mul r10.xyz, r6.wwww, r10.xyzx
else 
  mul r12.xyz, r15.yzxy, r8.xyzx
  mad r12.xyz, r8.zxyz, r15.zxyz, -r12.xyzx
  dp3 r6.w, r12.xyzx, r12.xyzx
  max r6.w, r6.w, l(0.010000)
  sqrt r6.w, r6.w
  div r12.xyz, r12.xyzx, r6.wwww
  mul r14.xyz, r8.zxyz, cb4[1].zxyz
  mad r14.xyz, cb4[1].yzxy, r8.xyzx, -r14.xyzx
  dp3 r6.w, r14.xyzx, r14.xyzx
  max r6.w, r6.w, l(0.010000)
  sqrt r6.w, r6.w
  div r14.xyz, r14.xyzx, r6.wwww
  lt r16.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), cb5[8].yzwy
  mul r17.xyz, r8.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r17.xyz, r8.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000), -r17.xyzx
  dp2 r6.w, r17.xyxx, r17.xyxx
  max r6.w, r6.w, l(0.010000)
  sqrt r6.w, r6.w
  div r17.xyz, r17.xyzx, r6.wwww
  mul r18.xyz, r8.xyzx, r17.yzxy
  mad r8.xyz, r8.zxyz, r17.zxyz, -r18.xyzx
  movc r7.xyz, r16.zzzz, r17.xyzx, r7.xyzx
  movc r6.xyz, r16.zzzz, r8.xyzx, r6.xyzx
  movc r7.xyz, r16.yyyy, cb4[1].xyzx, r7.xyzx
  movc r6.xyz, r16.yyyy, -r14.xyzx, r6.xyzx
  movc r9.xyz, r16.xxxx, r12.xyzx, r7.xyzx
  movc r10.xyz, r16.xxxx, -r15.xyzx, r6.xyzx
endif 
mad r5.w, r5.w, l(6.28318548), cb5[10].y
sincos r6.x, r7.x, r5.w
mul r6.yzw, r9.xxyz, r7.xxxx
mad r6.yzw, r6.xxxx, r10.xxyz, r6.yyzw
mul r7.yzw, r9.zzxy, r6.xxxx
mad r7.xyz, r7.xxxx, r10.zxyz, -r7.yzwy
add r8.xy, v2.xyxx, cb5[11].xyxx
mul r8.xy, r8.xyxx, r13.xyxx
mul r8.yzw, r7.yyzx, r8.yyyy
mad r8.xyz, r8.xxxx, r6.yzwy, r8.yzwy
add r8.xyz, r5.xyzx, r8.xyzx
add r9.xy, r11.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000)
mul r5.w, r9.y, r9.x
mul r9.xyz, r5.wwww, l(1341.456299, 2633.577881, 5623.982910, 0.000000)
frc r9.xyz, r9.xyzx
mad r9.xyz, r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r5.w, r29.w, l(0.500000)
mul o5.xyz, r9.xyzx, r5.wwww
min r5.w, r13.y, r13.x
mul o3.w, r5.w, l(0.500000)
mul r9.xyz, r11.wwww, r15.xyzx
add_sat r5.w, cb6[4].x, l(-0.100000)
mul r5.w, r5.w, cb7[6].y
mul r5.w, r5.w, r13.y
mad r8.xyz, r9.xyzx, r5.wwww, r8.xyzx
mov r8.w, l(1.000000)
dp4 r1.x, r8.xyzw, r1.xyzw
dp4 r1.y, r8.xyzw, r2.xyzw
dp4 r1.z, r8.xyzw, r3.xyzw
dp4 r1.w, r8.xyzw, r4.xyzw
if_nz cb0[0].x
  mov r2.x, icb[r0.y + 0].x
  mov r2.y, l(1.000000)
  dp2 o11.x, r1.xwxx, r2.xyxx
  mul r2.x, r0.z, l(0.500000)
  mul r2.y, r1.w, icb[r0.y + 0].x
  mad r0.z, -r0.z, l(0.500000), l(1.000000)
  mul r0.z, r0.z, r2.y
  mad r1.x, r1.x, r2.x, r0.z
else 
  mov o11.x, l(0)
endif 
mul r2.xyz, r6.wyzw, r7.zxyz
mad r2.xyz, r6.zwyz, r7.xyzx, -r2.xyzx
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r2.xyzx
mul r3.xyz, r2.yzxy, r7.xyzx
mad r3.xyz, r7.zxyz, r2.zxyz, -r3.xyzx
dp3 r0.z, r3.xyzx, r6.yzwy
lt r2.w, l(0.000000), r0.z
lt r0.z, r0.z, l(0.000000)
iadd r0.z, -r2.w, r0.z
itof o7.w, r0.z
imad o9.x, r0.x, l(0x80000000), r0.y
mov o0.xy, r11.zwzz
mov o0.zw, l(0,0,0,0)
mov o3.xyz, r5.xyzx
mov o4.xyzw, r15.xyzw
mov o6.xyz, r6.yzwy
mov o6.w, l(0)
mov o7.xyz, r2.xyzx
mov o10.xyzw, r1.xyzw
mov o1.y, r12.w
mov o1.z, l(0)
mov o1.x, r0.w
mov o8.xy, r13.xyxx
ret 
// Approximately 0 instruction slots used