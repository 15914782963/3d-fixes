// asmtool.py --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 72595934f29618e7-ps.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Thu Sep 14 11:56:04 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// SV_POSITION              0   xyzw        1      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, -0.430000, 0, 0},
                              { 0.406000, 0.569800, 0, 0},
                              { -0.580000, 0.814000, 0, 0} }
dcl_constantbuffer cb0[31], immediateIndexed
dcl_constantbuffer cb1[54], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear noperspective v0.xyzw
dcl_output o0.xyzw
dcl_temps 15
dcl_resource_structured t101, 864

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 72595934f29618e7-ps.txt
ld_structured_indexable(structured_buffer, stride=864)(mixed,mixed,mixed,mixed) r11.xyzw, l(0), l(128), t101.xyzw
ld_structured_indexable(structured_buffer, stride=864)(mixed,mixed,mixed,mixed) r12.xyzw, l(0), l(144), t101.xyzw
ld_structured_indexable(structured_buffer, stride=864)(mixed,mixed,mixed,mixed) r13.xyzw, l(0), l(160), t101.xyzw
ld_structured_indexable(structured_buffer, stride=864)(mixed,mixed,mixed,mixed) r14.xyzw, l(0), l(848), t101.xyzw

sample_l_indexable(texture2d)(float,float,float,float) r0.x, v0.xyxx, t2.xyzw, s2, l(0.000000)
mad r0.y, r0.x, r14.x, r14.y
mad r0.x, r0.x, r14.z, -r14.w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r0.z, r0.x, r0.y
mad r0.w, r0.z, cb0[26].x, cb0[26].y
lt r1.x, r0.w, l(1.000000)
mad r1.yz, v0.xxyx, cb0[23].xxyx, cb0[25].xxyx
sample_indexable(texture2d)(float,float,float,float) r1.yz, r1.yzyy, t4.zxyw, s4
if_nz r1.x
  mul r2.y, cb0[23].w, cb0[25].w
  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[25].w
  div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
  mov r3.z, l(1.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v0.xyxx, t0.xyzw, s0, l(0.000000)
  mad r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r1.x, v0.xyxx, t1.wxyz, s1, l(0.000000)
  mul r1.x, r1.x, l(255.000000)
  round_ne r1.x, r1.x
  ftou r1.x, r1.x
  and r1.x, r1.x, l(15)
  ieq r1.x, r1.x, l(7)
  movc r4.xyz, r1.xxxx, l(0,0,0,0), r4.xyzx
  mul r5.xyz, r4.yyyy, r12.xyzx
  mad r4.xyw, r4.xxxx, r11.xyxz, r5.xyxz
  mad r4.xyz, r4.zzzz, r13.xyzx, r4.xywx
  dp3 r1.x, r4.xyzx, r4.xyzx
  rsq r1.x, r1.x
  mul r4.xyz, r1.xxxx, r4.xyzx
  mul r0.xy, r0.zzzz, v0.zwzz
  add r1.xw, -r0.zzzz, l(1.000000, 0.000000, 0.000000, 1000.000000)
  mad r1.xw, cb0[24].zzzz, r1.xxxw, r0.zzzz
  mul r1.x, r1.x, cb0[23].z
  mul r2.w, r0.z, cb0[22].y
  mul r2.w, r2.w, cb0[24].x
  mov r2.x, cb0[25].w
  mov r2.z, l(1.000000)
  mul r5.xyz, r2.xyzx, r4.xyzx
  mad r0.xyz, r2.wwww, r5.xyzx, r0.xyzx
  mad r5.xyz, r1.yzyy, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mul r5.xyw, r1.xxxx, r5.xyxz
  div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
  mul r2.xyzw, r1.xxxx, r2.xyxy
  mov r5.z, -r5.y
  mul r2.xyzw, r2.xyzw, r5.xyzw
  div r1.xy, r0.xyxx, r0.zzzz
  mul r1.z, r1.w, l(0.080000)
  mul r4.xyz, r1.zzzz, r4.xyzx
  mov r5.y, l(2.000000)
  mov r6.xw, l(0.000100,0,0,0.000100)
  mov r1.z, l(0)
  loop 
    ige r1.w, r1.z, l(3)
    breakc_nz r1.w
    mul r7.xyzw, r2.xyzw, icb[r1.z + 0].xxyy
    add r5.zw, r7.zzzw, r7.xxxy
    itof r1.w, r1.z
    add r1.w, r1.w, l(0.500000)
    mul r1.w, r1.w, l(0.333333343)
    mov r7.xy, l(0,0,0,0)
    mov r3.w, l(0)
    loop 
      uge r4.w, r3.w, l(1)
      breakc_nz r4.w
      iadd r3.w, r3.w, l(1)
      utof r4.w, r3.w
      itof r6.y, r3.w
      mul r6.y, r6.y, cb0[26].z
      mul r6.y, r1.w, r6.y
      log r6.y, r6.y
      mad r7.zw, r4.wwww, r5.zzzw, r1.xxxy
      mad r8.xy, -r4.wwww, r5.zwzz, r1.xyxx
      mad r8.zw, cb0[30].xxxy, r7.zzzw, cb0[30].zzzw
      sample_l_indexable(texture2d)(float,float,float,float) r4.w, r8.zwzz, t3.yzwx, s3, r6.y
      mad r8.zw, cb0[30].xxxy, r8.xxxy, cb0[30].zzzw
      sample_l_indexable(texture2d)(float,float,float,float) r6.y, r8.zwzz, t3.yxzw, s3, r6.y
      mad r8.z, r4.w, r14.x, r14.y
      mad r4.w, r4.w, r14.z, -r14.w
      div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
      add r9.z, r4.w, r8.z
      mad r4.w, r6.y, r14.x, r14.y
      mad r6.y, r6.y, r14.z, -r14.w
      div r6.y, l(1.000000, 1.000000, 1.000000, 1.000000), r6.y
      add r10.z, r4.w, r6.y
      mul r9.xy, r7.zwzz, r9.zzzz
      mul r10.xy, r8.xyxx, r10.zzzz
      add r8.xyz, -r0.xyzx, r9.xyzx
      mul r8.xyz, r3.xyzx, r8.xyzx
      add r9.xyz, -r0.xyzx, r10.xyzx
      mul r9.xyz, r3.xyzx, r9.xyzx
      dp3 r4.w, r8.xyzx, r4.xyzx
      dp3 r6.y, r8.xyzx, r8.xyzx
      div_sat r8.x, r4.w, r6.y
      dp3 r4.w, r9.xyzx, r4.xyzx
      dp3 r6.y, r9.xyzx, r9.xyzx
      div_sat r8.y, r4.w, r6.y
      max r7.xy, r7.xyxx, r8.xyxx
    endloop 
    add r5.zw, -r7.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
    mul r6.z, r5.w, r5.w
    mad r5.x, r5.z, r5.z, r6.x
    add r6.xw, r5.xxxy, r6.zzzw
    iadd r1.z, r1.z, l(1)
  endloop 
  div r0.x, r6.x, r6.w
  mov_sat r0.w, r0.w
  add r0.y, -r0.x, l(1.000000)
  mad r0.x, r0.w, r0.y, r0.x
  log r0.x, |r0.x|
  mul r0.x, r0.x, cb0[22].x
  exp r0.x, r0.x
  add r0.x, -r0.x, l(1.000000)
  mad o0.xyzw, -r0.xxxx, cb0[22].wwww, l(1.000000, 1.000000, 1.000000, 1.000000)
else 
  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif 
ret 
// Approximately 0 instruction slots used