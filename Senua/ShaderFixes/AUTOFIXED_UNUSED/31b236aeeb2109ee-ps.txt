// asmtool.py --remap-cb 0 100 --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 31b236aeeb2109ee-ps.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:43:21 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float     z 
// TEXCOORD                 0   xy          3     NONE   float   xy  
// PACKED_EYE_INDEX         0   x           4     NONE    uint   x   
// SV_Position              0   xyzw        5      POS   float   xyz 
// SV_IsFrontFace           0   x           6    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[142], immediateIndexed
dcl_constantbuffer cb1[40], immediateIndexed
dcl_constantbuffer cb2[10], immediateIndexed
dcl_constantbuffer cb3[16], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.z
dcl_input_ps linear v3.xy
dcl_input_ps constant v4.x
dcl_input_ps_siv linear noperspective v5.xyz, position
dcl_input_ps_sgv v6.x, is_front_face
dcl_output o0.xyzw
dcl_temps 17
dcl_resource_structured t100, 2048
dcl_resource_structured t101, 640

// cb0 remapped to t100 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 0 100 --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 31b236aeeb2109ee-ps.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r6.xyzw, l(0), l(576), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r7.xyzw, l(0), l(592), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r8.xyzw, l(0), l(608), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r9.xyzw, l(0), l(624), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r10.xyzw, l(1), l(0), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r11.xyzw, l(1), l(48), t100.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r12.xyzw, l(1), l(208), t100.xyzw


// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 0 100 --remap-cb 1 101 -i --only-autofixed --disable-driver-stereo-cb 12 31b236aeeb2109ee-ps.txt
ld_structured_indexable(structured_buffer, stride=640)(mixed,mixed,mixed,mixed) r13.xyzw, l(0), l(576), t101.xyzw
ld_structured_indexable(structured_buffer, stride=640)(mixed,mixed,mixed,mixed) r14.xyzw, l(0), l(592), t101.xyzw
ld_structured_indexable(structured_buffer, stride=640)(mixed,mixed,mixed,mixed) r15.xyzw, l(0), l(608), t101.xyzw
ld_structured_indexable(structured_buffer, stride=640)(mixed,mixed,mixed,mixed) r16.xyzw, l(0), l(624), t101.xyzw

and r0.x, v4.x, l(1)
if_z r0.x
  mov r0.x, r6.x
  mov r0.y, r7.x
  mov r0.z, r8.x
  mov r0.w, r9.x
  mov r1.x, r6.y
  mov r1.y, r7.y
  mov r1.z, r8.y
  mov r1.w, r9.y
  mov r2.x, r6.z
  mov r2.y, r7.z
  mov r2.z, r8.z
  mov r2.w, r9.z
  mov r3.x, r6.w
  mov r3.y, r7.w
  mov r3.z, r8.w
  mov r3.w, r9.w
else 
  mov r0.x, r13.x
  mov r0.y, r14.x
  mov r0.z, r15.x
  mov r0.w, r16.x
  mov r1.x, r13.y
  mov r1.y, r14.y
  mov r1.z, r15.y
  mov r1.w, r16.y
  mov r2.x, r13.z
  mov r2.y, r14.z
  mov r2.z, r15.z
  mov r2.w, r16.z
  mov r3.x, r13.w
  mov r3.y, r14.w
  mov r3.z, r15.w
  mov r3.w, r16.w
endif 
mul r4.xyz, v0.yzxy, v1.zxyz
mad r4.xyz, v1.yzxy, v0.zxyz, -r4.xyzx
mul r4.xyz, r4.xyzx, v1.wwww
mov r5.xyz, v5.xyzx
mov r5.w, l(1.000000)
dp4 r0.x, r5.xyzw, r0.xyzw
dp4 r0.y, r5.xyzw, r1.xyzw
dp4 r0.z, r5.xyzw, r2.xyzw
dp4 r0.w, r5.xyzw, r3.xyzw
div r0.xyz, r0.xyzx, r0.wwww
dp3 r0.w, -r0.xyzx, -r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, -r0.xyzx
mul r0.w, r11.w, cb2[9].w
movc r1.x, v6.x, l(1.000000), l(-1.000000)
mul r0.w, r0.w, r1.x
sample_indexable(texture2d)(float,float,float,float) r1.xy, v3.xyxx, t0.xyzw, s0
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r1.xyxx, r1.xyxx
add r1.w, -r1.w, l(1.000000)
max r1.w, r1.w, l(0.000000)
sqrt r1.z, r1.w
mul r1.xyz, r0.wwww, r1.xyzx
mad r1.xyz, r1.xyzx, r10.wwww, r10.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mul r2.xyz, r4.xyzx, r1.yyyy
mad r1.xyw, r1.xxxx, v0.xyxz, r2.xyxz
mad r1.xyz, r1.zzzz, v1.xyzx, r1.xywx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mul r1.xyz, r0.wwww, r1.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.w, v3.xyxx, t1.xyzw, s1
mul r1.w, r0.w, cb3[14].w
mad r0.w, r0.w, cb3[15].x, -r1.w
mad r0.w, v2.z, r0.w, r1.w
dp3 r0.x, r1.xyzx, r0.xyzx
max r0.x, |r0.x|, l(0.000001)
log r0.x, r0.x
mul r0.xy, r0.xxxx, cb3[15].zyzz
exp r0.xy, r0.xyxx
add r0.x, -r0.x, l(1.000000)
add r0.x, -r0.y, r0.x
mad r0.x, v2.z, r0.x, r0.y
mul r0.x, r0.x, r0.w
mad r0.y, v5.y, l(2.000000), v5.x
add r0.y, r0.y, r12.x
add r0.y, r0.y, l(-1.500000)
mul r0.y, r0.y, l(0.200000)
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), v5.xyxx
frc r0.yz, r0.yyzy
mad r0.y, r0.y, l(5.000000), r0.z
mad r0.x, r0.y, l(0.166666672), r0.x
add r0.x, r0.x, l(-0.833300)
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x
mov o0.xyzw, l(0,0,0,0)
ret 
// Approximately 0 instruction slots used