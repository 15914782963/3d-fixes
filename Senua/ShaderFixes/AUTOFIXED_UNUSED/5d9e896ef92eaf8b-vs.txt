// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 5d9e896ef92eaf8b-vs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 14:20:58 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyzw
// ATTRIBUTE                1   xyz         1     NONE   float   xyz 
// ATTRIBUTE                2   xyzw        2     NONE   float   xyzw
// ATTRIBUTE                3   xyzw        3     NONE   float   xyzw
// ATTRIBUTE                4   xyzw        4     NONE   float   xy  
// ATTRIBUTE                5   xyzw        5     NONE   float   xy  
// ATTRIBUTE                6   xyzw        6     NONE   float    yzw
// ATTRIBUTE                7   xyzw        7     NONE   float   xy w
// ATTRIBUTE               15   xy          8     NONE   float   xy  
// SV_InstanceID            0   x           9   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           5     NONE    uint   x   
// VELOCITY_PREV_POS        0   xyzw        6     NONE   float   xyzw
// SV_POSITION              0   xyzw        7      POS   float   xyzw
// SV_ClipDistance          1   x           8  CLIPDST   float   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb1[165], immediateIndexed
dcl_constantbuffer cb2[165], immediateIndexed
dcl_constantbuffer cb3[15], immediateIndexed
dcl_constantbuffer cb4[13], immediateIndexed
dcl_constantbuffer cb5[18], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xy
dcl_input v5.xy
dcl_input v6.yzw
dcl_input v7.xyw
dcl_input v8.xy
dcl_input_sgv v9.x, instance_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.x
dcl_output o6.xyzw
dcl_output_siv o7.xyzw, position
dcl_output_siv o8.x, clip_distance
dcl_temps 43
dcl_resource_structured t101, 2048
dcl_resource_structured t102, 2048
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 5d9e896ef92eaf8b-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r21.xyzw, l(0), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r22.xyzw, l(0), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r23.xyzw, l(0), l(32), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r24.xyzw, l(0), l(48), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r25.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r26.xyzw, l(0), l(1280), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r27.xyzw, l(0), l(1296), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r28.xyzw, l(0), l(1312), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r29.xyzw, l(0), l(1328), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r30.xyzw, l(0), l(1632), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r31.xyzw, l(1), l(576), t101.xyzw


// cb2 remapped to t102 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i --only-autofixed --disable-driver-stereo-cb 12 5d9e896ef92eaf8b-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r32.xyzw, l(0), l(0), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r33.xyzw, l(0), l(16), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r34.xyzw, l(0), l(32), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r35.xyzw, l(0), l(48), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r36.xyzw, l(0), l(944), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r37.xyzw, l(0), l(1280), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r38.xyzw, l(0), l(1296), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r39.xyzw, l(0), l(1312), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r40.xyzw, l(0), l(1328), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r41.xyzw, l(0), l(1632), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r42.xyzw, l(1), l(576), t102.xyzw

and r0.x, v9.x, l(1)
if_z r0.x
  mov r1.x, r21.x
  mov r1.y, r22.x
  mov r1.z, r23.x
  mov r1.w, r24.x
  mov r2.x, r21.y
  mov r2.y, r22.y
  mov r2.z, r23.y
  mov r2.w, r24.y
  mov r3.x, r21.z
  mov r3.y, r22.z
  mov r3.z, r23.z
  mov r3.w, r24.z
  mov r4.x, r21.w
  mov r4.y, r22.w
  mov r4.z, r23.w
  mov r4.w, r24.w
  mov r5.x, r26.x
  mov r5.y, r27.x
  mov r5.z, r28.x
  mov r5.w, r29.x
  mov r6.x, r26.y
  mov r6.y, r27.y
  mov r6.z, r28.y
  mov r6.w, r29.y
  mov r7.x, r26.w
  mov r7.y, r27.w
  mov r7.z, r28.w
  mov r7.w, r29.w
  mov r0.yzw, r30.xxyz
  mov r8.x, r31.y
  mov r8.yzw, r25.xxyz
else 
  mov r1.x, r32.x
  mov r1.y, r33.x
  mov r1.z, r34.x
  mov r1.w, r35.x
  mov r2.x, r32.y
  mov r2.y, r33.y
  mov r2.z, r34.y
  mov r2.w, r35.y
  mov r3.x, r32.z
  mov r3.y, r33.z
  mov r3.z, r34.z
  mov r3.w, r35.z
  mov r4.x, r32.w
  mov r4.y, r33.w
  mov r4.z, r34.w
  mov r4.w, r35.w
  mov r5.x, r37.x
  mov r5.y, r38.x
  mov r5.z, r39.x
  mov r5.w, r40.x
  mov r6.x, r37.y
  mov r6.y, r38.y
  mov r6.z, r39.y
  mov r6.w, r40.y
  mov r7.x, r37.w
  mov r7.y, r38.w
  mov r7.z, r39.w
  mov r7.w, r40.w
  mov r0.yzw, r41.xxyz
  mov r8.x, r42.y
  mov r8.yzw, r36.xxyz
endif 
mad r9.xyz, v1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r10.xyzw, v2.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r11.xyz, r9.xyzx, r10.yzxy
mad r9.xyz, r10.xyzx, r9.yzxy, -r11.xyzx
mul r9.xyz, r10.wwww, r9.xyzx
mul r11.xyz, r10.yzxy, r9.xyzx
mad r9.xyz, r9.zxyz, r10.zxyz, -r11.xyzx
mul r9.xyz, r10.wwww, r9.xyzx
mul r11.xyz, cb3[0].xyzx, cb3[14].xxxx
mul r12.xyz, cb3[1].xyzx, cb3[14].yyyy
mul r13.xyz, cb3[2].xyzx, cb3[14].zzzz
mul r14.xyz, r9.yyyy, r12.xyzx
mad r9.xyw, r9.xxxx, r11.xyxz, r14.xyxz
mad o0.xyz, r9.zzzz, r13.xyzx, r9.xywx
mul r9.xyz, r10.yyyy, r12.xyzx
mad r9.xyz, r10.xxxx, r11.xyzx, r9.xyzx
mad o1.xyz, r10.zzzz, r13.xyzx, r9.xyzx
mul o1.w, r10.w, cb3[9].w
mul r9.xyz, v0.yyyy, cb3[1].xyzx
mad r9.xyz, cb3[0].xyzx, v0.xxxx, r9.xyzx
mad r9.xyz, cb3[2].xyzx, v0.zzzz, r9.xyzx
add r10.xyz, r8.yzwy, cb3[3].xyzx
add r9.xyz, r9.xyzx, r10.xyzx
add r10.xyz, -r8.yzwy, r9.xyzx
mul r11.xyz, r10.yyyy, cb3[5].xyzx
mad r10.xyw, r10.xxxx, cb3[4].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb3[6].xyzx, r10.xywx
add r10.xyz, r10.xyzx, cb3[7].xyzx
mul r11.xy, cb3[8].xyxx, l(0.001000, 0.001000, 0.000000, 0.000000)
dp3 r9.w, cb3[2].xyzx, cb3[2].xyzx
sqrt r9.w, r9.w
mul r12.xyz, r10.yyyy, cb3[1].xyzx
mad r10.xyw, r10.xxxx, cb3[0].xyxz, r12.xyxz
mad r10.xyz, r10.zzzz, cb3[2].xyzx, r10.xywx
div r10.xyz, r10.xyzx, r9.wwww
mul r12.xyz, v6.zzzz, cb3[1].xyzx
mad r12.xyz, v6.yyyy, cb3[0].xyzx, r12.xyzx
mad r12.xyz, v6.wwww, cb3[2].xyzx, r12.xyzx
div r12.xyz, r12.xyzx, r9.wwww
add r13.xyz, r10.xyzx, -r12.xyzx
lt r10.w, l(0.000000), v7.w
mul r14.xyzw, v7.yyyy, l(0.062500, 1.000000, 16.000000, 30.299999)
frc r14.xyzw, r14.xyzw
mad r14.xyz, r14.zxyz, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
movc r11.zw, r10.wwww, cb4[12].xxxz, cb4[9].xxxz
mul r10.w, r14.w, l(3.000000)
mad r15.x, r14.w, l(3.000000), r11.z
mad r15.y, r11.z, l(0.750000), -r10.w
add r15.xy, r15.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
frc r15.xy, r15.xyxx
mad r15.xy, r15.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r15.zw, |r15.xxxy|, |r15.xxxy|
mad r15.xy, -|r15.xyxx|, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
mad r15.xy, r15.zwzz, r15.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
add r15.xy, r15.xyxx, r15.xyxx
dp3 r10.w, r13.xyzx, r13.xyzx
sqrt r10.w, r10.w
mad r11.z, r15.y, r15.y, r15.x
mul r11.w, r11.w, v7.x
mul r11.z, r11.z, r11.w
sincos r15.x, r16.x, r11.z
add r11.z, -r16.x, l(1.000000)
mul r17.xyzw, r14.yyyz, r11.zzzz
mul r15.xyz, r14.xyzx, r15.xxxx
mad r18.xy, r17.zyzz, r14.xzxx, r15.zxzz
mad r19.xy, r17.xwxx, r14.yzyy, r16.xxxx
mad r18.z, r17.w, r14.x, -r15.y
mad r20.xy, r17.yzyy, r14.zxzz, -r15.xzxx
mad r20.z, r17.w, r14.x, r15.y
mul r11.w, r14.x, r14.x
mad r20.w, r11.w, r11.z, r16.x
mov r19.z, r20.x
mov r19.w, r18.x
dp3 r14.x, r19.xzwx, r13.xyzx
mov r18.w, r19.y
dp3 r14.y, r18.ywzy, r13.xyzx
dp3 r14.z, r20.yzwy, r13.xyzx
dp3 r11.z, r14.xyzx, r14.xyzx
rsq r11.z, r11.z
mul r13.xyz, r11.zzzz, r14.xyzx
mad r13.xyz, r13.xyzx, r10.wwww, r12.xyzx
mul r14.xyz, v5.yyyy, l(0.062500, 1.000000, 16.000000, 0.000000)
frc r14.xyz, r14.xyzx
mad r14.xyz, r14.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r14.xyz, r14.xyzx, v5.xxxx
add r10.w, r11.y, r11.x
add r10.w, r10.w, cb4[2].x
add r15.x, r10.w, v5.y
mad r15.y, r10.w, cb4[3].y, v5.y
mul r10.w, r15.x, cb4[3].y
mul r15.z, r10.w, l(0.500000)
add r11.xzw, r15.xxyz, l(0.500000, 0.000000, 0.500000, 0.500000)
frc r11.xzw, r11.xxzw
mad r11.xzw, r11.xxzw, l(2.000000, 0.000000, 2.000000, 2.000000), l(-1.000000, 0.000000, -1.000000, -1.000000)
mul r15.xyz, |r11.xzwx|, |r11.xzwx|
mad r11.xzw, -|r11.xxzw|, l(2.000000, 0.000000, 2.000000, 2.000000), l(3.000000, 0.000000, 3.000000, 3.000000)
mad r11.xzw, r15.xxyz, r11.xxzw, l(-0.500000, 0.000000, -0.500000, -0.500000)
add r11.xzw, r11.xxzw, r11.xxzw
mul r15.w, r11.w, r11.z
lt r10.w, r15.w, l(0.000000)
mov r15.y, -r15.w
mov r15.xz, l(-1.000000,0,1.000000,0)
movc r15.xy, r10.wwww, r15.xyxx, r15.zwzz
mad r10.w, -r11.z, r11.w, r15.x
mad r10.w, r15.y, r10.w, r15.w
add r11.z, -r10.w, r15.x
mad r10.w, r15.y, r11.z, r10.w
mul r10.w, r10.w, cb4[3].x
add r11.z, -cb4[0].w, l(1.000000)
add r11.w, -cb4[3].x, l(1.000000)
mul r11.x, r11.w, r11.x
mad r10.w, r10.w, r11.z, r11.x
mul r11.xzw, r10.wwww, r14.xxyz
mad r13.xyz, r11.xzwx, cb4[2].yyyy, r13.xyzx
dp3 r10.w, r13.xyzx, r13.xyzx
sqrt r10.w, r10.w
div r12.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb4[1].z
mad r13.w, -r12.w, l(0.250000), r13.z
max r13.w, r13.w, l(0.000000)
mul r13.w, r13.w, cb4[1].z
ne r14.x, r13.w, l(0.000000)
log r14.y, r13.w
mul r14.y, r14.y, cb4[1].w
exp r14.y, r14.y
movc r13.w, r14.x, r14.y, r13.w
mad r14.x, cb3[8].x, l(0.001000), cb4[1].x
mad r14.y, cb4[1].x, l(0.800000), r11.y
add r14.xy, r14.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
frc r14.xy, r14.xyxx
mad r14.xy, r14.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r14.zw, |r14.xxxy|, |r14.xxxy|
mad r14.xy, -|r14.xyxx|, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
mad r14.xy, r14.zwzz, r14.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
add r14.xy, r14.xyxx, r14.xyxx
mad r11.y, r14.y, r14.y, r14.x
ne r14.x, cb4[1].z, l(0.000000)
div r14.y, cb4[6].x, cb4[1].z
movc r14.x, r14.x, r14.y, cb4[6].x
mad r11.y, cb4[1].y, r11.y, r14.x
mul r13.w, r13.w, r11.y
mad r13.xy, cb4[0].xyxx, r13.wwww, r13.xyxx
dp3 r13.w, r13.xyzx, r13.xyzx
rsq r13.w, r13.w
mul r13.xyz, r13.wwww, r13.xyzx
mad r10.xyz, r13.xyzx, r10.wwww, -r10.xyzx
mad r10.xyz, r10.xyzx, r9.wwww, r9.xyzx
mov r10.w, l(1.000000)
dp4 r1.x, r10.xyzw, r1.xyzw
dp4 r1.y, r10.xyzw, r2.xyzw
dp4 r1.z, r10.xyzw, r3.xyzw
dp4 r1.w, r10.xyzw, r4.xyzw
if_nz cb0[0].x
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o8.x, r1.xwxx, r2.xyxx
  mul r2.x, r8.x, l(0.500000)
  mul r2.y, r1.w, icb[r0.x + 0].x
  mad r2.z, -r8.x, l(0.500000), l(1.000000)
  mul r2.y, r2.z, r2.y
  mad r1.x, r1.x, r2.x, r2.y
else 
  mov o8.x, l(0)
endif 
mad o4.zw, v8.xxxy, cb5[17].xxxy, cb5[17].zzzw
movc r2.x, cb0[0].x, l(1), l(0)
imad o5.x, r2.x, l(0x80000000), r0.x
add r0.xyw, r0.yzyw, cb0[7].xyxz
mov r2.x, cb0[4].x
mov r2.y, cb0[5].x
mov r2.z, cb0[6].x
mov r2.w, r0.x
dp4 r2.x, v0.xyzw, r2.xyzw
mov r3.x, cb0[4].y
mov r3.y, cb0[5].y
mov r3.z, cb0[6].y
mov r3.w, r0.y
dp4 r2.y, v0.xyzw, r3.xyzw
mov r0.x, cb0[4].z
mov r0.y, cb0[5].z
mov r0.z, cb0[6].z
dp4 r2.z, v0.xyzw, r0.xyzw
add r0.xyz, -r8.yzwy, r2.xyzx
mul r3.xyz, r0.yyyy, cb3[5].xyzx
mad r0.xyw, r0.xxxx, cb3[4].xyxz, r3.xyxz
mad r0.xyz, r0.zzzz, cb3[6].xyzx, r0.xywx
add r0.xyz, r0.xyzx, cb3[7].xyzx
mul r3.xyz, r0.yyyy, cb3[1].xyzx
mad r0.xyw, r0.xxxx, cb3[0].xyxz, r3.xyxz
mad r0.xyz, r0.zzzz, cb3[2].xyzx, r0.xywx
div r0.xyz, r0.xyzx, r9.wwww
add r3.xyz, -r12.xyzx, r0.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
sqrt r0.w, r0.w
dp3 r4.x, r19.xzwx, r3.xyzx
dp3 r4.y, r18.ywzy, r3.xyzx
dp3 r4.z, r20.yzwy, r3.xyzx
dp3 r2.w, r4.xyzx, r4.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r4.xyzx
mad r3.xyz, r3.xyzx, r0.wwww, r12.xyzx
mad r3.xyz, r11.xzwx, cb4[2].yyyy, r3.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
sqrt r0.w, r0.w
mad r2.w, -r12.w, l(0.250000), r3.z
max r2.w, r2.w, l(0.000000)
mul r2.w, r2.w, cb4[1].z
ne r3.w, r2.w, l(0.000000)
log r4.x, r2.w
mul r4.x, r4.x, cb4[1].w
exp r4.x, r4.x
movc r2.w, r3.w, r4.x, r2.w
mul r2.w, r2.w, r11.y
mad r3.xy, cb4[0].xyxx, r2.wwww, r3.xyxx
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx
mad r0.xyz, r3.xyzx, r0.wwww, -r0.xyzx
mad r0.xyz, r0.xyzx, r9.wwww, r2.xyzx
mov r0.w, l(1.000000)
dp4 o6.x, r0.xyzw, r5.xyzw
dp4 o6.y, r0.xyzw, r6.xyzw
dp4 o6.w, r0.xyzw, r7.xyzw
add o6.z, -cb0[9].x, l(1.000000)
mov o0.w, l(0)
mov o2.xyzw, v3.xyzw
mov o3.xy, v4.xyxx
mov o3.zw, l(0,0,0,0)
mov o4.xy, l(0,0,0,0)
mov o7.xyzw, r1.xyzw
ret 
// Approximately 0 instruction slots used