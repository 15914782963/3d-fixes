// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 fbd55d8f6b64072a-vs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:42:47 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyzw
// ATTRIBUTE                1   xyz         1     NONE   float   xyz 
// ATTRIBUTE                2   xyzw        2     NONE   float   xyzw
// ATTRIBUTE                3   xyzw        3     NONE   float   xyzw
// ATTRIBUTE                4   xyzw        4     NONE   float   xy  
// ATTRIBUTE                5   xyzw        5     NONE   float   xy  
// ATTRIBUTE                6   xyzw        6     NONE   float       
// ATTRIBUTE                7   xyzw        7     NONE   float       
// ATTRIBUTE                8   xyzw        8     NONE   float   xyzw
// ATTRIBUTE                9   xyzw        9     NONE   float   xyzw
// ATTRIBUTE               10   xyzw       10     NONE   float   xyz 
// ATTRIBUTE               11   xyzw       11     NONE   float   xyz 
// ATTRIBUTE               12   xyzw       12     NONE   float     zw
// ATTRIBUTE               15   xy         13     NONE   float   xy  
// SV_InstanceID            0   x          14   INSTID    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// COLOR                    1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// PACKED_EYE_INDEX         0   x           7     NONE    uint   x   
// VELOCITY_PREV_POS        0   xyzw        8     NONE   float   xyzw
// SV_POSITION              0   xyzw        9      POS   float   xyzw
// SV_ClipDistance          1   x          10  CLIPDST   float   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[17], immediateIndexed
dcl_constantbuffer cb1[165], immediateIndexed
dcl_constantbuffer cb2[165], immediateIndexed
dcl_constantbuffer cb3[10], immediateIndexed
dcl_constantbuffer cb4[7], immediateIndexed
dcl_constantbuffer cb5[18], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xy
dcl_input v5.xy
dcl_input v8.xyzw
dcl_input v9.xyzw
dcl_input v10.xyz
dcl_input v11.xyz
dcl_input v12.zw
dcl_input v13.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyz
dcl_output o7.x
dcl_output o8.xyzw
dcl_output_siv o9.xyzw, position
dcl_output_siv o10.x, clip_distance
dcl_temps 42
dcl_resource_structured t101, 2048
dcl_resource_structured t102, 2048
// Disables driver stereo correction:
dcl_constantbuffer cb12[4], immediateIndexed

// cb1 remapped to t101 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 fbd55d8f6b64072a-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r20.xyzw, l(0), l(0), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r21.xyzw, l(0), l(16), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r22.xyzw, l(0), l(32), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r23.xyzw, l(0), l(48), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r24.xyzw, l(0), l(944), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r25.xyzw, l(0), l(1280), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r26.xyzw, l(0), l(1296), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r27.xyzw, l(0), l(1312), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r28.xyzw, l(0), l(1328), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r29.xyzw, l(0), l(1632), t101.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r30.xyzw, l(1), l(576), t101.xyzw


// cb2 remapped to t102 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 1 101 --remap-cb 2 102 -i -f --only-autofixed --disable-driver-stereo-cb 12 fbd55d8f6b64072a-vs.txt
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r31.xyzw, l(0), l(0), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r32.xyzw, l(0), l(16), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r33.xyzw, l(0), l(32), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r34.xyzw, l(0), l(48), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r35.xyzw, l(0), l(944), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r36.xyzw, l(0), l(1280), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r37.xyzw, l(0), l(1296), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r38.xyzw, l(0), l(1312), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r39.xyzw, l(0), l(1328), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r40.xyzw, l(0), l(1632), t102.xyzw
ld_structured_indexable(structured_buffer, stride=2048)(mixed,mixed,mixed,mixed) r41.xyzw, l(1), l(576), t102.xyzw

if_z cb0[8].x
  mov r0.x, r20.x
  mov r0.y, r21.x
  mov r0.z, r22.x
  mov r0.w, r23.x
  mov r1.x, r20.y
  mov r1.y, r21.y
  mov r1.z, r22.y
  mov r1.w, r23.y
  mov r2.x, r20.z
  mov r2.y, r21.z
  mov r2.z, r22.z
  mov r2.w, r23.z
  mov r3.x, r20.w
  mov r3.y, r21.w
  mov r3.z, r22.w
  mov r3.w, r23.w
  mov r4.x, r25.x
  mov r4.y, r26.x
  mov r4.z, r27.x
  mov r4.w, r28.x
  mov r5.x, r25.y
  mov r5.y, r26.y
  mov r5.z, r27.y
  mov r5.w, r28.y
  mov r6.x, r25.w
  mov r6.y, r26.w
  mov r6.z, r27.w
  mov r6.w, r28.w
  mov r7.xyz, r29.xyzx
  mov r7.w, r30.y
  mov r8.xyz, r24.xyzx
else 
  mov r0.x, r31.x
  mov r0.y, r32.x
  mov r0.z, r33.x
  mov r0.w, r34.x
  mov r1.x, r31.y
  mov r1.y, r32.y
  mov r1.z, r33.y
  mov r1.w, r34.y
  mov r2.x, r31.z
  mov r2.y, r32.z
  mov r2.z, r33.z
  mov r2.w, r34.z
  mov r3.x, r31.w
  mov r3.y, r32.w
  mov r3.z, r33.w
  mov r3.w, r34.w
  mov r4.x, r36.x
  mov r4.y, r37.x
  mov r4.z, r38.x
  mov r4.w, r39.x
  mov r5.x, r36.y
  mov r5.y, r37.y
  mov r5.z, r38.y
  mov r5.w, r39.y
  mov r6.x, r36.w
  mov r6.y, r37.w
  mov r6.z, r38.w
  mov r6.w, r39.w
  mov r7.xyz, r40.xyzx
  mov r7.w, r41.y
  mov r8.xyz, r35.xyzx
endif 
mad r9.xyz, v1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r10.xyzw, v2.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r11.xyz, r9.xyzx, r10.yzxy
mad r9.xyz, r10.xyzx, r9.yzxy, -r11.xyzx
mul r9.xyz, r10.wwww, r9.xyzx
mul r11.xyz, r10.yzxy, r9.xyzx
mad r9.xyz, r9.zxyz, r10.zxyz, -r11.xyzx
mul r9.xyz, r10.wwww, r9.xyzx
mul r11.xyz, v9.yyyy, cb3[1].xyzx
mad r11.xyz, v9.xxxx, cb3[0].xyzx, r11.xyzx
mad r11.xyz, v9.zzzz, cb3[2].xyzx, r11.xyzx
mul r12.xyz, v10.yyyy, cb3[1].xyzx
mad r12.xyz, v10.xxxx, cb3[0].xyzx, r12.xyzx
mad r12.xyz, v10.zzzz, cb3[2].xyzx, r12.xyzx
mul r13.xyz, v11.yyyy, cb3[1].xyzx
mad r13.xyz, v11.xxxx, cb3[0].xyzx, r13.xyzx
mad r13.xyz, v11.zzzz, cb3[2].xyzx, r13.xyzx
dp3 r8.w, r11.xyzx, r11.xyzx
rsq r8.w, r8.w
mul r14.xyz, r8.wwww, r11.xyzx
dp3 r8.w, r12.xyzx, r12.xyzx
rsq r8.w, r8.w
mul r15.xyz, r8.wwww, r12.xyzx
dp3 r8.w, r13.xyzx, r13.xyzx
rsq r9.w, r8.w
mul r16.xyz, r9.wwww, r13.xyzx
mul r17.xyz, r9.yyyy, r15.xyzx
mad r9.xyw, r9.xxxx, r14.xyxz, r17.xyxz
mad o0.xyz, r9.zzzz, r16.xyzx, r9.xywx
mul r9.xyz, r10.yyyy, r15.xyzx
mad r9.xyz, r10.xxxx, r14.xyzx, r9.xyzx
mad o1.xyz, r10.zzzz, r16.xyzx, r9.xyzx
mul o1.w, r10.w, cb3[9].w
mul r9.x, v9.w, l(0.00390625000)
round_z r9.x, r9.x
mul r9.yzw, v8.yyyy, cb3[1].xxyz
mad r9.yzw, cb3[0].xxyz, v8.xxxx, r9.yyzw
mad r9.yzw, cb3[2].xxyz, v8.zzzz, r9.yyzw
add r9.yzw, r9.yyzw, cb3[3].xxyz
add r10.xyz, r8.xyzx, r9.yzwy
dp3 r10.x, r10.xyzx, r10.xyzx
sqrt r10.x, r10.x
add r10.x, r10.x, -cb0[14].x
mul_sat r10.x, r10.x, cb0[14].y
add o3.y, -r10.x, l(1.000000)
add r10.x, -r9.x, l(1.000000)
mul r10.x, r10.x, cb0[14].w
mad r9.x, cb0[14].z, r9.x, r10.x
add r10.xyz, r9.yzwy, -cb0[12].xyzx
dp3 r10.x, r10.xyzx, r10.xyzx
sqrt r10.x, r10.x
mad r10.x, cb0[9].w, v8.w, r10.x
add r10.yzw, r9.yyzw, -cb0[13].xxyz
dp3 r9.w, r10.yzwy, r10.yzwy
sqrt r9.w, r9.w
mad r9.w, cb0[9].w, v8.w, r9.w
lt r10.xyz, cb0[9].xyzx, r10.xxxx
and r10.xyz, r10.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
dp3 r10.x, r10.xyzx, cb0[11].xyzx
lt r10.yzw, cb0[10].xxyz, r9.wwww
and r10.yzw, r10.yyzw, l(0, 0x3f800000, 0x3f800000, 0x3f800000)
dp3 r9.w, r10.yzwy, cb0[11].xyzx
mul r9.w, r9.w, cb0[13].w
mad r10.w, r10.x, cb0[12].w, r9.w
lt r9.w, |r10.w|, l(0.999000)
and r9.w, r9.w, l(0x3f800000)
mul r10.z, r9.w, r9.x
mov r14.x, v9.x
mov r14.y, v10.x
mov r14.z, v11.x
mov r14.w, v8.x
dp4 r14.x, v0.xyzw, r14.xyzw
mov r15.x, v9.y
mov r15.y, v10.y
mov r15.z, v11.y
mov r15.w, v8.y
dp4 r14.y, v0.xyzw, r15.xyzw
mov r15.x, v9.z
mov r15.y, v10.z
mov r15.z, v11.z
mov r15.w, v8.z
dp4 r14.z, v0.xyzw, r15.xyzw
mul r15.xyz, r14.yyyy, cb3[1].xyzx
mad r15.xyz, cb3[0].xyzx, r14.xxxx, r15.xyzx
mad r15.xyz, cb3[2].xyzx, r14.zzzz, r15.xyzx
add r8.xyz, r8.xyzx, cb3[3].xyzx
add r8.xyz, r8.xyzx, r15.xyzx
mov r9.x, l(1.000000)
mul r15.w, r10.z, r9.x
ge r9.x, r10.z, l(1.000000)
if_nz r9.x
  mul r10.xy, r9.yzyy, l(0.001000, 0.001000, 0.000000, 0.000000)
  sqrt r9.w, r8.w
  mul r16.xyz, r12.xyzx, v0.yyyy
  mad r16.xyz, v0.xxxx, r11.xyzx, r16.xyzx
  mad r16.xyz, v0.zzzz, r13.xyzx, r16.xyzx
  div r16.xyz, r16.xyzx, r9.wwww
  mul r17.xyz, v5.yyyy, l(0.062500, 1.000000, 16.000000, 0.000000)
  frc r17.xyz, r17.xyzx
  mad r17.xyz, r17.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mul r17.xyz, r17.xyzx, v5.xxxx
  add r10.x, r10.y, r10.x
  add r10.x, r10.x, cb4[2].x
  add r18.x, r10.x, v5.y
  mad r18.y, r10.x, cb4[3].y, v5.y
  mul r10.x, r18.x, cb4[3].y
  mul r18.z, r10.x, l(0.500000)
  add r18.xyz, r18.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  frc r18.xyz, r18.xyzx
  mad r18.xyz, r18.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mul r19.xyz, |r18.xyzx|, |r18.xyzx|
  mad r18.xyz, -|r18.xyzx|, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
  mad r18.xyz, r19.xyzx, r18.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  add r18.xyz, r18.xyzx, r18.xyzx
  mul r19.w, r18.z, r18.y
  lt r10.x, r19.w, l(0.000000)
  mov r19.y, -r19.w
  mov r19.xz, l(-1.000000,0,1.000000,0)
  movc r19.xy, r10.xxxx, r19.xyxx, r19.zwzz
  mad r10.x, -r18.y, r18.z, r19.x
  mad r10.x, r19.y, r10.x, r19.w
  add r11.w, -r10.x, r19.x
  mad r10.x, r19.y, r11.w, r10.x
  mul r10.x, r10.x, cb4[3].x
  add r11.w, -cb4[0].w, l(1.000000)
  add r12.w, -cb4[3].x, l(1.000000)
  mul r12.w, r12.w, r18.x
  mad r10.x, r10.x, r11.w, r12.w
  mul r17.xyz, r10.xxxx, r17.xyzx
  mad r17.xyz, r17.xyzx, cb4[2].yyyy, r16.xyzx
  dp3 r10.x, r17.xyzx, r17.xyzx
  sqrt r10.x, r10.x
  div r11.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb4[1].z
  mad r11.w, -r11.w, l(0.250000), r17.z
  max r11.w, r11.w, l(0.000000)
  mul r11.w, r11.w, cb4[1].z
  ne r12.w, r11.w, l(0.000000)
  log r13.w, r11.w
  mul r13.w, r13.w, cb4[1].w
  exp r13.w, r13.w
  movc r11.w, r12.w, r13.w, r11.w
  mad r18.x, r9.y, l(0.001000), cb4[1].x
  mad r18.y, cb4[1].x, l(0.800000), r10.y
  add r18.xy, r18.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  frc r18.xy, r18.xyxx
  mad r18.xy, r18.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r18.zw, |r18.xxxy|, |r18.xxxy|
  mad r18.xy, -|r18.xyxx|, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
  mad r18.xy, r18.zwzz, r18.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
  add r18.xy, r18.xyxx, r18.xyxx
  mad r10.y, r18.y, r18.y, r18.x
  ne r12.w, cb4[1].z, l(0.000000)
  div r13.w, cb4[6].x, cb4[1].z
  movc r12.w, r12.w, r13.w, cb4[6].x
  mad r10.y, cb4[1].y, r10.y, r12.w
  mul r10.y, r11.w, r10.y
  mad r17.xy, cb4[0].xyxx, r10.yyyy, r17.xyxx
  dp3 r10.y, r17.xyzx, r17.xyzx
  rsq r10.y, r10.y
  mul r17.xyz, r10.yyyy, r17.xyzx
  mad r16.xyz, r17.xyzx, r10.xxxx, -r16.xyzx
  mul r16.xyz, r9.wwww, r16.xyzx
else 
  mov r16.xyz, l(0,0,0,0)
endif 
mad r15.xyz, r8.xyzx, r10.zzzz, r16.xyzx
dp4 r0.x, r15.xyzw, r0.xyzw
dp4 r0.y, r15.xyzw, r1.xyzw
dp4 r0.z, r15.xyzw, r2.xyzw
dp4 r0.w, r15.xyzw, r3.xyzw
if_nz cb0[0].x
  mov r1.x, cb0[8].x
  mov r2.x, icb[r1.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o10.x, r0.xwxx, r2.xyxx
  mul r1.y, r7.w, l(0.500000)
  mul r1.x, r0.w, icb[r1.x + 0].x
  mad r1.z, -r7.w, l(0.500000), l(1.000000)
  mul r1.x, r1.z, r1.x
  mad r0.x, r0.x, r1.y, r1.x
else 
  mov o10.x, l(0)
endif 
mad o5.zw, v13.xxxy, cb5[17].xxxy, v12.zzzw
movc r1.x, cb0[0].x, l(-0.000000), l(0)
or o7.x, r1.x, cb0[8].x
add r1.xyw, r7.xyxz, cb0[7].xyxz
mov r14.w, v0.w
mov r2.x, cb0[4].x
mov r2.y, cb0[5].x
mov r2.z, cb0[6].x
mov r2.w, r1.x
dp4 r2.x, r14.xyzw, r2.xyzw
mov r3.x, cb0[4].y
mov r3.y, cb0[5].y
mov r3.z, cb0[6].y
mov r3.w, r1.y
dp4 r2.y, r14.xyzw, r3.xyzw
mov r1.x, cb0[4].z
mov r1.y, cb0[5].z
mov r1.z, cb0[6].z
dp4 r2.z, r14.xyzw, r1.xyzw
if_nz r9.x
  mul r1.xy, r9.yzyy, l(0.001000, 0.001000, 0.000000, 0.000000)
  sqrt r1.z, r8.w
  mul r3.xyz, r12.xyzx, v0.yyyy
  mad r3.xyz, v0.xxxx, r11.xyzx, r3.xyzx
  mad r3.xyz, v0.zzzz, r13.xyzx, r3.xyzx
  div r3.xyz, r3.xyzx, r1.zzzz
  mul r7.xyz, v5.yyyy, l(0.062500, 1.000000, 16.000000, 0.000000)
  frc r7.xyz, r7.xyzx
  mad r7.xyz, r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mul r7.xyz, r7.xyzx, v5.xxxx
  add r1.x, r1.y, r1.x
  add r1.x, r1.x, cb4[2].x
  add r8.x, r1.x, v5.y
  mad r8.y, r1.x, cb4[3].y, v5.y
  mul r1.x, r8.x, cb4[3].y
  mul r8.z, r1.x, l(0.500000)
  add r8.xyz, r8.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  frc r8.xyz, r8.xyzx
  mad r8.xyz, r8.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mul r9.xzw, |r8.xxyz|, |r8.xxyz|
  mad r8.xyz, -|r8.xyzx|, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
  mad r8.xyz, r9.xzwx, r8.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  add r8.xyz, r8.xyzx, r8.xyzx
  mul r11.w, r8.z, r8.y
  lt r1.x, r11.w, l(0.000000)
  mov r11.y, -r11.w
  mov r11.xz, l(-1.000000,0,1.000000,0)
  movc r1.xw, r1.xxxx, r11.xxxy, r11.zzzw
  mad r2.w, -r8.y, r8.z, r1.x
  mad r2.w, r1.w, r2.w, r11.w
  add r1.x, r1.x, -r2.w
  mad r1.x, r1.w, r1.x, r2.w
  mul r1.x, r1.x, cb4[3].x
  add r1.w, -cb4[0].w, l(1.000000)
  add r2.w, -cb4[3].x, l(1.000000)
  mul r2.w, r2.w, r8.x
  mad r1.x, r1.x, r1.w, r2.w
  mul r7.xyz, r1.xxxx, r7.xyzx
  mad r7.xyz, r7.xyzx, cb4[2].yyyy, r3.xyzx
  dp3 r1.x, r7.xyzx, r7.xyzx
  sqrt r1.x, r1.x
  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb4[1].z
  mad r1.w, -r1.w, l(0.250000), r7.z
  max r1.w, r1.w, l(0.000000)
  mul r1.w, r1.w, cb4[1].z
  ne r2.w, r1.w, l(0.000000)
  log r3.w, r1.w
  mul r3.w, r3.w, cb4[1].w
  exp r3.w, r3.w
  movc r1.w, r2.w, r3.w, r1.w
  mad r8.x, r9.y, l(0.001000), cb4[1].x
  mad r8.y, cb4[1].x, l(0.800000), r1.y
  add r8.xy, r8.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  frc r8.xy, r8.xyxx
  mad r8.xy, r8.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r8.zw, |r8.xxxy|, |r8.xxxy|
  mad r8.xy, -|r8.xyxx|, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
  mad r8.xy, r8.zwzz, r8.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
  add r8.xy, r8.xyxx, r8.xyxx
  mad r1.y, r8.y, r8.y, r8.x
  ne r2.w, cb4[1].z, l(0.000000)
  div r3.w, cb4[6].x, cb4[1].z
  movc r2.w, r2.w, r3.w, cb4[6].x
  mad r1.y, cb4[1].y, r1.y, r2.w
  mul r1.y, r1.w, r1.y
  mad r7.xy, cb4[0].xyxx, r1.yyyy, r7.xyxx
  dp3 r1.y, r7.xyzx, r7.xyzx
  rsq r1.y, r1.y
  mul r7.xyz, r1.yyyy, r7.xyzx
  mad r1.xyw, r7.xyxz, r1.xxxx, -r3.xyxz
  mul r1.xyz, r1.zzzz, r1.xywx
else 
  mov r1.xyz, l(0,0,0,0)
endif 
add r1.xyz, r1.xyzx, r2.xyzx
mov r1.w, l(1.000000)
dp4 o8.x, r1.xyzw, r4.xyzw
dp4 o8.y, r1.xyzw, r5.xyzw
dp4 o8.w, r1.xyzw, r6.xyzw
add o8.z, -cb0[16].x, l(1.000000)
mov o0.w, l(0)
mov o2.xyzw, v3.xyzw
mov o3.x, v8.w
mov o3.zw, r10.zzzw
mov o4.xy, v4.xyxx
mov o4.zw, l(0,0,0,0)
mov o5.xy, l(0,0,0,0)
mov o9.xyzw, r0.xyzw
mov o6.xyz, l(0,0,0,0)
ret 
// Approximately 0 instruction slots used