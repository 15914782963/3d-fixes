[General]

; UseRenderedShaders=true is nearly always useful, because it trims the
; list of shaders seen while hunting down to just those active in the
; current scene.  Disable this only if you get crashes during hunting.
UseRenderedShaders=true

; DumpAll will generate ASM text files for every shader seen by the game.
; This is usually worth doing once, but not useful for every run.
DumpAll=true

; Less crashes when reloading shaders:
OverrideMethod = 2

; Unity games recently started using borderless window mode, so use a profile
; that supports 3D in a window. "3D-Hub Player" is pretty minimal:
GameProfile = fxdplayer

; Mouse tends to stop working in Unity games (related to borderless window?):
InitMouse = false

; Force square surfaces (shadow maps) to be mono:
DefSquareSurfaceMode = 2

; Allow access to the view size in pixel shaders to calculate the pixel
; position on screen. This isn't usually necessary in the generic lighting fix,
; but sometimes a situation arises where it is necessary.
DefPSViewSizeConst = 210

; Fixes clipping at the edge of spot & point lights - common in Unity games.
SkipSetScissorRect = true

; Constant registers that will arrive in Vertex and Pixel Shaders, as
; c200.  The constants below will be assigned, based on the key preset.
DefVSConst1 = 200
DefPSConst1 = 200

PresetsKeysList = 0;1;2;3;

; Backslash sets default convergence 0.72
[KEY0]
Key = 220
Presets = 0;
[PRES0]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3f3851ec
UseByDef = true

; X cycles UI depths
[KEY1]
Key = 88
Presets = 1;2;3;4;5;
Type = 1
[PRES1]
; 0.75
Const3 = 0x3f400000
[PRES2]
; 0.85
Const3 = 0x3f59999a
[PRES3]
; 0.995
Const3 = 0x3f7eb852
[PRES4]
; 0
Const3 = 0x00000000
[PRES5]
; 0.5
Const3 = 0x3f000000
UseByDef = true

; V key cycles crosshair modes
[KEY2]
Key = 86
Presets = 6;7;
Type = 1
[PRES6]
Const1 = 0x3f800000
[PRES7]
Const1 = 0x00000000
UseByDef = true

[KEY3]
; L toggles lens grit
Key = 76
Presets = 8;9;
Type = 1
[PRES8]
Const2 = 0x3f800000
[PRES9]
Const2 = 0x00000000
UseByDef = true



; Copy MV+MVP matrices from various sources in case of drawing a full-screen
; lighting effect (e.g. physical lighting effect such as specular highlights
; and environment reflections) while directional lighting is not active. Note
; that unlike the Unity 4 fix we do not ask Helix mod to inverse the MV matrix.
; This is because Unity 5 only passes in three columns of the matrix which
; won't work with the generic inverse matrix function. Instead we invert the
; matrix in assembly in the destination shader.
;
; The below shaders are pretty common one in Unity games that we can use, but
; you may need to find others (avoid UI and camera depth/normal shaders that
; often do not have a valid projection matrix). My extract_unity_headers.py
; script is useful to find other shaders that can be used here.

[VSC72ED75E]
; Particles/Additive_Layer
UseMatrix = true
GetMatrixFromReg = 4
GetConst2FromReg = 0
[VSAD105294]
; Matched 3 variants of 3 shaders: Particles/Additive, Particles/Alpha Blended, Particles/Multiply
UseMatrix = true
GetMatrixFromReg = 4
GetConst2FromReg = 0
[VS6D5E1461]
; Matched 4 variants of 4 shaders: Particles/Additive, Particles/Additive (Soft), Particles/Alpha Blended, Particles/Multiply (Double)
UseMatrix = true
GetMatrixFromReg = 4
GetConst2FromReg = 0


; In Unity 5, the directional lighting shader has the inverse projection
; matrix, which we need to fix the lights/shadows, so copy it to other lighting
; shaders whenever it is active. Use a preset to set Const4 to signify when
; this matrix is valid and fall back to other techniques if it is not.

[VS00933666]
; Hidden/Internal-PrePassCollectShadows PCF_5x5
GetConst3FromReg = 4
PresIndex = 16
[VS678DC18B]
; Hidden/Internal-PrePassCollectShadows
GetConst3FromReg = 4
PresIndex = 16

[PRES10]
; PRES10 (hexadecimal) is PresIndex 16 (decimal)
; Signifies that the inverse projection matrix is currently valid
Const4 = 0x3f800000

; The lighting shaders will use the inverse projection matrix copied from the
; directional lighting shader if it is valid. At times when it is not valid the
; shader will fall back to other techniques. Point and spot lights will
; calculate it from the MV+MVP matrices passed into the shader from the game,
; and full-screen lighting effects (e.g. physical lighting) will use the
; matrices copied from other unrelated shaders (see above - additional shaders
; may be necessary). If all else fails, a hard coded constant can be set in
; the vertex shader in c220.w

[VS05F7E52C]
; Matched 65 variants of 2 shaders: Hidden/Internal-DeferredShading, Hidden/Internal-PrePassLighting
SetConst3ToReg = 170
UseMatrix = true
MatrixReg = 180
SetConst2ToReg = 190



; TODO: Identify equivelent Unity 5 shader
; [VS9F7BB09C]
; ; UI shader, including crosshair
; ; BF26B6BB - crosshair & other UI elements
; CheckTexCRC = true
; VBOffsetList = 0;
; UseDefinedOnly = false
; ValForDefined = 1
; ValNotDefined = 0
; TexCounterReg = 251
; ; DefinedTexturesVS = BF26B6BB;
;
; [VB9F7BB09C.0]
