[General]

; UseRenderedShaders=true is nearly always useful, because it trims the
; list of shaders seen while hunting down to just those active in the
; current scene.  Disable this only if you get crashes during hunting.
UseRenderedShaders=true

; DumpAll will generate ASM text files for every shader seen by the game.
; This is usually worth doing once, but not useful for every run.
DumpAll=true

; Less crashes when reloading shaders:
OverrideMethod = 2

; Unity games recently started using borderless window mode, so use a profile
; that supports 3D in a window. "3D-Hub Player" is pretty minimal:
GameProfile = fxdplayer

; Mouse tends to stop working in Unity games (related to borderless window?):
InitMouse = false

; Force square surfaces (shadow maps) to be mono:
DefSquareSurfaceMode = 2

; Allow access to the view size in pixel shaders to calculate the pixel
; position on screen. This isn't usually necessary in the generic lighting fix,
; but sometimes a situation arises where it is necessary.
DefPSViewSizeConst = 210

; Fixes clipping at the edge of spot & point lights - common in Unity games.
SkipSetScissorRect = true

; Constant registers that will arrive in Vertex and Pixel Shaders, as
; c200.  The constants below will be assigned, based on the key preset.
DefVSConst1 = 200
DefPSConst1 = 200

PresetsKeysList = 0;1;2;

; Backslash sets default convergence 0.72
[KEY0]
Key = 220
Presets = 0;
[PRES0]
UseSepSettings = true
SaveSepSettings = true
Convergence = 0x3f3851ec
UseByDef = true

; X cycles UI depths
[KEY1]
Key = 88
Presets = 1;2;3;4;5;
Type = 1
[PRES1]
; 0.75
Const3 = 0x3f400000
[PRES2]
; 0.85
Const3 = 0x3f59999a
[PRES3]
; 0.995
Const3 = 0x3f7eb852
[PRES4]
; 0
Const3 = 0x00000000
[PRES5]
; 0.5
Const3 = 0x3f000000
UseByDef = true

; V key cycles crosshair modes
[KEY2]
Key = 86
Presets = 5;6;
Type = 1
[PRES5]
Const1 = 0x3f800000
[PRES6]
Const1 = 0x00000000
UseByDef = true


; Copy the MVP and inverted MV matrices to all lighting shaders to allow us to
; calculate the projection matrix and find the horizontal FOV. This technique
; was first used to fix Dreamfall Chapters - take a look at the forum thread
; for that game and it's fix for more details on how this works.


; The projection matrix will be calculated from the matrices passed into the
; lighting shader whenever possible. This is not possible for directional
; lighting or other times it is drawing a full-screen quad, so we must also
; find other shaders to get the MV+MVP matrices from in that case. The below
; shader is a pretty common one in Unity games that we can use, but you may
; need to find others (avoid UI and depth shaders that often do not have a
; valid projection matrix). My extract_unity_headers.py script is useful to
; find other shaders that can be used here.
[VS61CAF50F]
; Particle Alpha Blend.shader - example of shader with MV+MVP matrices
; MV is in c0-c3. Copy this and invert it:
UseMatrix = true
GetMatrixFromReg = 0
InverseMatrix = true
; MVP is in c4-c7. We only need the first column so only bother with c4
GetConst1FromReg = 4

; Lighting vertex shaders to copy the matrices to. We used to also copy them to
; the pixel shaders, but now we pass them from the vertex shaders to the pixel
; shaders instead, which makes it easier to tweak the FOV source on a game by
; game basis.

[VSDF7A050C]
; Unity Hidden/Internal-PrePassLighting.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; This shader will use it's own MV+MVP matrices when they are valid (even
; inverting the MV matrix inside the shader to avoid needing Helix mod to do
; it), and the passed in ones when they are not:
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[VS36A3FBCB]
; Unity Hidden/Internal-PrePassLighting.shader (older version of VSDF7A050C)
; This shader will use it's own MV+MVP matrices when they are valid (even
; inverting the MV matrix inside the shader to avoid needing Helix mod to do
; it), and the passed in ones when they are not:
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190
[VSBAEDDED5]
; Unity Hidden/Internal-PrePassCollectShadows.shader - ***VERTEX SHADER FOR ALL VARIANTS***
; This shader is used for directional lighting, and must always have an
; alternate source of the MV+MVP matrices passed to it.
; Note: This shader has an MVP matrix, but not the matching MV matrix.
UseMatrix = true
MatrixReg = 180
SetConst1ToReg = 190

[VS9F7BB09C]
; UI shader, including crosshair
; BF26B6BB - crosshair & other UI elements
CheckTexCRC = true
VBOffsetList = 0;
UseDefinedOnly = false
ValForDefined = 1
ValNotDefined = 0
TexCounterReg = 251
; DefinedTexturesVS = BF26B6BB;

[VB9F7BB09C.0]
