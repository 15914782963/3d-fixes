// CRC32: 2FC2E74B | Matched 3 variants of 3 shaders: Unlit/Premultiplied Colored, Unlit/Transparent Colored, Unlit/Transparent Colored (Multiply)
// 
//    Unity headers extracted from Unlit - Premultiplied Colored.shader
//    Shader "Unlit/Premultiplied Colored" {
//      Properties {
//       _MainTex ("Base (RGB), Alpha (A)", 2D) = "black" { }
//      }
//      SubShader 1/2 {
//        LOD 200
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog { Mode Off }
//          Blend One OneMinusSrcAlpha
//          ColorMask RGB
//          Offset -1, -1
//          GpuProgramID 6745
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Unlit - Transparent Colored.shader
//    Shader "Unlit/Transparent Colored" {
//      Properties {
//       _MainTex ("Base (RGB), Alpha (A)", 2D) = "black" { }
//      }
//      SubShader 1/2 {
//        LOD 200
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog { Mode Off }
//          Blend SrcAlpha OneMinusSrcAlpha
//          Offset -1, -1
//          GpuProgramID 43944
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Unlit - Transparent Colored (Multiply).shader
//    Shader "Unlit/Transparent Colored (Multiply)" {
//      Properties {
//       _MainTex ("Base (RGB), Alpha (A)", 2D) = "black" { }
//      }
//      SubShader 1/2 {
//        LOD 200
//        Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//        Pass 1/1 {
//          Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Cull Off
//          Fog { Mode Off }
//          Blend DstColor Zero
//          Offset -1, -1
//          GpuProgramID 30434
//          Program "vp" {
//            SubProgram "d3d9 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              Matrix 0 [glstate_matrix_mvp]
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py

// UI - crosshair & other

    vs_3_0 // Converted from vs_2_0 with DarkStarSword's shadertool.py
    dcl_position v0
    dcl_texcoord v1
    dcl_color v2

dcl_texcoord o0
dcl_position o1
dcl_color o2


def c220, 0, 1, 0.0625, 0.5
def c221, -1, 0.999, 0, 0 // Full screen fade to black coordinates
def c222, 0, 0.01, 0.99, 1 // Crosshair texture coordinates
def c223, -0.01, 0.01, -0.01, 0.01 // Crosshair X+Y bounds
dcl_2d s0

    dp4 r0.x, c0, v0
    dp4 r0.y, c1, v0
    dp4 r0.z, c2, v0
    dp4 r0.w, c3, v0
    mov o0.xy, v1
    mov o2, v2

// Texture blacklist unusable - crosshair, fade to black, inventory, menus, etc. use the same texture
//mov r25.x, c251.x
//if_eq r25.x, c220.x

// Blacklist full screen fade to black based on coordinate near corner of screen:
mov r30.x, c220.y
if_le r0.x, c221.x
	if_le r0.y, c221.x
		mov r30.x, c220.x
	endif
	if_ge r0.y, c221.y
		mov r30.x, c220.x
	endif
endif
if_ge r0.x, c221.y
	if_le r0.y, c221.x
		mov r30.x, c220.x
	endif
	if_ge r0.y, c221.y
		mov r30.x, c220.x
	endif
endif

// Detect crosshair based on texture coordinates:
if_ge v1.x, c222.x
if_le v1.x, c222.y
if_ge v1.y, c222.z
if_le v1.y, c222.w
	// Confirm vertex is in center of screen:
	if_ge r0.x, c223.x
	if_le r0.x, c223.y
	if_ge r0.y, c223.z
	if_le r0.y, c223.w
		// Check crosshair mode
		mov r20, c200
		if_eq r20.x, c220.x // Crosshair disabled
			mov r30.x, -c220.y
		endif
	endif
	endif
	endif
	endif
endif
endif
endif
endif


if_eq r30.x, c220.y
	texldl r1, c220.z, s0
	mad r0.x, r1.x, c200.z, r0.x
endif
mov o1, r0

if_eq r30.x, -c220.y
	mov o1, c220.xxxx
endif
