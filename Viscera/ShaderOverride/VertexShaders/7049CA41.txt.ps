// Main UI - disappears in stereo
// Vertex shader 328993F7 using pixel shader filtering (to avoid screwing up
// entire game) and texture filtering to adjust just the in-world text for the
// personal identification tags. Need to include the original vertex shader,
// otherwise texture filtering messes up and c251.x gets set to 1, but never
// cleared back to 0

//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4x4 Transform;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   Transform    c7       4
//

    vs_3_0
    dcl_position v0
    dcl_texcoord v1
    dcl_color v2
    dcl_color1 v3
    dcl_texcoord o0.xy
    dcl_texcoord1 o1
    dcl_texcoord2 o2
    dcl_texcoord3 o3
    dcl_position o4

def c220, 0, 1, 0.0625, 60
dcl_2d s3

    mov o0.xy, v1
    mov o1, v2
    mov o2, v3
    mul r0, c8, v0.y
    mad r0, c7, v0.x, r0
    mad r0, c9, v0.z, r0
    mad r0, c10, v0.w, r0
    mov o3, r0
    mov r2, r0

// approximately 9 instruction slots used


// Subtracting the usual stereo correction formula fixes part of the UI, but
// breaks other parts. Instead, normalise the output position so the driver has
// nothing to stereoise, then apply our own UI stereo adjustment instead.
rcp r10.w, r2.w
mul r2, r2, r10.wwww

mov r31, c251
if_eq r31.x, c220.y
	// Matched whitelisted font used for personal identification tags -
	// only part of the UI we want to adjust, but we want to adjust this to
	// a fixed depth in the scene to roughly match the tag instead of the
	// usual UI depth adjustment we do, so multiply the whole coordinate by
	// the desired depth:
	mul r2, r2, c220.w
else
	texldl r31, c220.z, s3
	mad r2.x, r31.x, c200.z, r2.x
endif

mov o4, r2
