// Bloom/halo around lights (some broken, some not) in Zero-G level

//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 ApproxFogColor;
//   float4 CameraPositionVS;
//   float4 CameraRight;
//   float4 CameraUp;
//   float4 FirstDensityFunctionParameters;
//   float4 FogInScattering[4];
//   float4 FogMaxHeight;
//   float4x4 LocalToWorld;
//   float4 SecondDensityFunctionParameters;
//   float4 SharedFogParameter0;
//   float4 SharedFogParameter1;
//   float4 SharedFogParameter2;
//   float4 SharedFogParameter3;
//   float StartDistance;
//   float3 TemporalAAParameters;
//   float4 VSRRealDCoefficients1;
//   float4x4 ViewProjectionMatrix;
//   float bUseExponentialHeightFog;
//
//
// Registers:
//
//   Name                            Reg   Size
//   ------------------------------- ----- ----
//   ViewProjectionMatrix            c0       4
//   CameraPositionVS                c4       1
//   VSRRealDCoefficients1           c6       1
//   LocalToWorld                    c7       4
//   FogInScattering                 c11      4
//   TemporalAAParameters            c15      1
//   CameraRight                     c16      1
//   CameraUp                        c17      1
//   SharedFogParameter0             c18      1
//   SharedFogParameter1             c19      1
//   SharedFogParameter2             c20      1
//   SharedFogParameter3             c21      1
//   bUseExponentialHeightFog        c22      1
//   FogMaxHeight                    c23      1
//   FirstDensityFunctionParameters  c24      1
//   SecondDensityFunctionParameters c25      1
//   StartDistance                   c26      1
//   ApproxFogColor                  c27      1
//

    vs_3_0
    def c5, 0.159154937, 0.5, 6.28318548, -3.14159274
    def c28, 9.98999977, 0.693147182, 1, -1
    def c29, 2, 0, 0.00999999978, -0.00999999978
    def c30, 0.499000013, 0.5, 0.00100000005, 9.99999975e-005
    def c31, 4, 0.333333343, 1, 0
    dcl_position v0
    dcl_tangent v1
    dcl_blendweight v2
    dcl_texcoord v3
    dcl_texcoord1 v4
    dcl_texcoord2 v5
    dcl_texcoord o0.xy
    dcl_texcoord1 o1
    dcl_texcoord2 o2
    dcl_texcoord4 o3
    dcl_texcoord6 o4
    dcl_texcoord5 o5
    dcl_position o6

def c220, 0, 1, 0.0625, 0.5
def c221, 11.11, 11.12, 0, 0 // Minimum and maximum W value to match broken halo
dcl_2d s3

dcl_2d s2 // Copy of SceneColorTexture, depth is in w
defi i0, 255, 0, 0, 0
def c227, 0.00390625, 64, 0, 0.5 // 1/i0.x, 0.5

    mul r0, c8, v0.y
    mad r0, c7, v0.x, r0
    mad r0, c9, v0.z, r0
    mad r0, c10, v0.w, r0
    mad r1.x, v2.x, c5.x, c5.y
    frc r1.x, r1.x
    mad r1.x, r1.x, c5.z, c5.w
    sincos r2.xy, r1.x
    mul r1, r2.y, c16
    mad r1, -r2.x, c17, r1
    mul r3, r2.x, c16
    mad r2, r2.y, c17, r3
    mul r3.xy, v1.zwzw, v1
    add r3.zw, -c5.y, v3.xyxy
    mul r3.xy, r3.zwzw, r3
    mad r0, r3.x, r1, r0
    mad r0, r3.y, r2, r0
    mul r3.xyz, r1.zxyw, r2.yzxw
    mad r3.xyz, r1.yzxw, r2.zxyw, -r3
    nrm r4.xyz, r3
    mul r3, r0.y, c1
    mad r3, c0, r0.x, r3
    mad r3, c2, r0.z, r3
    mad r3, c3, r0.w, r3

// We do the adjustment at this point so we fix both the position and texcoord
// to fix opacity based on the depth buffer.

// Some halos are ok, some are broken. Broken ones have a constant W value of
// approximately 11.11, so check the depth is around that value.
mov r30.x, c220.x
if_ge r3.w, c221.x
	if_le r3.w, c221.y
		// Broken halo
		mov r20, c200
		if_eq r20.y, c220.x
			// move based on depth buffer:
			mov r30.x, c220.y
		else
			// move to infintiy buffer:
			mov r30.x, c220.w
		endif
	endif
endif

texldl r31, c220.z, s3

if_eq r30.x, c220.w
	mad r3.x, r31.x, r31.y, r3.x
endif
if_eq r30.x, c220.y
	// Auto depth: sample a number of points on the depth buffer to
	// determine an appropriate depth for this object, starting at the near
	// clipping plane and working towards original x + separation.
	//
	// You can think of this as a line in three dimensional space that
	// starts at each eye and stretches out towards infinity. We sample 255
	// points along this line (evenly spaced in the X axis) and compare
	// with the depth buffer to find where the line is first intersected.
	//
	// Based on DarkStarSword's stereo crosshair code originally developed
	// for Miasmata, adapted to HLSL and made to use coordinates other than
	// (0,0), then adapted back to assembly for UE3.

	// Screen depth coordinates to sample around - Just using current
	// vertex for now. Would be better to use the center, but we can't look
	// up other vertices and the matrices don't seem to help find it:
	rcp r22.w, r3.w
	mul r22.xy, r3.xy, r22.w

	// near = -MinZ_MaxZRatio.x / MinZ_MaxZRatio.y
	rcp r31.w, c150.y
	mul r20.w, -c150.x, r31.w

	// offset = (near - convergence * separation)
	add r31.w, r20.w, -r31.y
	mul r20.x, r31.w, r31.x

	// Total distance to cover
	// distance = separation - starting X offset:
	add r20.y, r31.x, -r20.x

	// old_offset = offset
	mov r21.x, r20.x

	// Precompute some constants:
	// separation * convergence:
	mul r31.w, r31.x, r31.y
	// distance / 255:
	mul r20.z, r20.y, c227.x

	rep i0
		// offset += distance / 255:
		add r20.x, r20.x, r20.z

		// Calculate W for this adjustment amount:
		// w = (separation * convergence) / (separation - offset):
		add r20.w, r31.x, -r20.x
		rcp r20.w, r20.w
		mul r20.w, r31.w, r20.w

		// sample_x = x + offset, sample_y = -y
		mov r23.y, -r22.y
		add r23.x, r22.x, r20.x
		// Convert to texture coordinates (coords / 2 + 0.5):
		mad r23.xy, r23.xy, c220.w, c220.w
		// Sample depth buffer:
		texldl r5, r23.xy, s2

		// Ignore reads of 1.0:
		if_ne r5.w, c220.y
			// scale depth buffer to world Z (game dependent - look for scaling applied to
			// the depth buffer wherever else it is used. In the case of UE3 we use
			// MinZ_MaxZRatio):
			mov r5.y, c220.y
			add r5.x, r5.y, -c150.y
			add r5.x, -r5.x, r5.w
			rcp r5.x, r5.x
			mul r5.x, r5.x, -c150.x

			// If the sampled depth is closer than the calculated depth, exit the loop:
			break_ge r20.w, r5.x
		endif

		// old_offset = offset
		mov r21.x, r20.x
	endrep

	// Finally adjust the X coordinate:
	add r31.w, r3.w, -r31.y
	mad r3.x, -r31.w, r31.x, r3.x
	mad r3.x, r21.x, r3.w, r3.x
endif

    add r0.w, r3.z, c28.x
    add r1.w, r0.w, c6.x
    log r1.w, r1.w
    mul r1.w, r1.w, c6.y
    mov r5.yz, c28
    mad r2.w, r1.w, r5.y, c6.z
    mul r2.w, r2.w, c6.x
    mad r1.w, r1.w, -c28.y, c28.z
    add r1.w, r1.w, -c6.z
    rcp r1.w, r1.w
    mul r1.w, r1.w, r2.w
    rcp r0.w, r0.w
    mul r0.w, r0.w, r1.w
    rcp r0.w, r0.w
    add r0.w, r0.w, c28.w
    mul r0.w, r0.w, c6.w
    mad r3.x, r0.w, c29.x, r3.x
    mul r0.w, r3.w, c15.z
    mad o6.xy, r0.w, c15, r3
    mad r5.xyw, r0.xyzz, -c4.w, c4.xyzz
    dp3 o4.x, r1, r5.xyww
    dp3 o4.y, r2, r5.xyww
    dp3 o4.z, r4, r5.xyww
    abs r0.w, c22.x
    if_lt -r0.w, r0.w
      add r1.xyz, r0, -c4
      dp3 r0.w, r1, r1
      rsq r0.w, r0.w
      rcp r1.w, r0.w
      add r1.w, r1.w, -c18.w
      max r1.w, r1.w, c29.y
      mul r1.w, r1.w, c18.x
      slt r2.x, c29.z, r1_abs.z
      add r2.y, r1.z, c29.w
      mad r2.x, r2.x, r2.y, c29.z
      mul r2.y, r2.x, -c18.y
      exp r2.y, r2.y
      add r2.y, -r2.y, c28.z
      mul r2.x, r2.x, c18.y
      rcp r2.x, r2.x
      mul r2.x, r2.x, r2.y
      mul r1.w, r1.w, r2.x
      mul r1.xyz, r0.w, r1
      dp3 r0.w, c21, r1
      mad r0.w, r0.w, -c30.x, c30.y
      pow r1.x, r0.w, c18.z
      mov r2.xyz, c20
      add r2.xyz, -r2, c19
      mad r1.xyz, r1.x, r2, c20
      exp r0.w, -r1.w
      min r0.w, r0.w, c28.z
      max r2.x, r0.w, c19.w
      add r0.w, -r2.x, c28.z
      mul r1.xyz, r0.w, r1
    else
      add r4.xyz, r0, -c4
      dp3 r0.w, r4, r4
      rsq r0.w, r0.w
      rcp r0.w, r0.w
      mov r6.z, c4.z
      add r7, -r6.z, c21
      sge r1.w, c30.z, r4_abs.z
      lrp r5.x, r1.w, c30.z, r4.z
      rcp r1.w, r5.x
      mul_sat r4, r1.w, r7
      add r6, -r6.z, c23
      mul_sat r6, r1.w, r6
      add r7, r0.w, -c20
      max r7, r7, c29.y
      add r4, -r4, r6
      mul r4, r4_abs, r7
      slt r6, r4, c19
      mul r4, r4, c18
      exp r7.x, r4.x
      exp r7.y, r4.y
      exp r7.z, r4.z
      exp r7.w, r4.w
      mul r4, r6, r7
      mad r6, r6, r7, c28.w
      mul r7.xyz, r6.x, c11
      mov r7.w, r4.x
      mul r7, r4.y, r7
      mad r7.xyz, r6.y, c12, r7
      mul r7, r4.z, r7
      mad r7.xyz, r6.z, c13, r7
      mul r2, r4.w, r7.wxyz
      mad r1.xyz, r6.w, c14, r2.yzww
    endif
    add r2.yzw, -r0.xxyz, c4.xxyz
    dp3 r4.x, r2.yzww, r2.yzww
    rsq r0.w, r4.x
    rcp r1.w, r0.w
    mul r4.w, c25.w, c25.w
    add r0.xyz, r0, -c25
    dp3 r4.z, r0, r0
    dp3 r4.y, r2.yzww, r0
    add r0.x, r4.y, r4.y
    mul r6, r4.xxyz, c31.xyzz
    mad r0.y, c25.w, -c25.w, r4.z
    mul r0.y, r0.y, r6.x
    mad r0.x, r0.x, r0.x, -r0.y
    sge r0.y, r0.x, c29.y
    add r0.z, r4.x, c30.w
    rcp r0.z, r0.z
    mul r0.z, r0.z, c5.y
    rsq r0.x, r0.x
    rcp r5.x, r0.x
    mov r5.y, -r5.x
    mad r2.yz, r4.y, c29.x, r5.xxyw
    mul_sat r4.xy, r0.z, -r2.yzzw
    mad r0.x, c26.x, -r0.w, r5.z
    min r0.x, r4.y, r0.x
    max r4.z, r4.x, r0.x
    mul r5.xy, r4.xzzw, r4.xzzw
    mul r7.xy, r4.xzzw, r5
    mov r7.z, r5.x
    mov r7.w, r4.x
    dp3 r8.x, r6.yzww, r7.xzww
    mov r5.z, r7.y
    mov r5.w, r4.z
    dp3 r8.y, r6.zyww, r5.yzww
    rcp r0.x, r4.w
    mad r0.xz, r8.xyyw, -r0.x, r4
    mul r0.x, r0.x, c24.x
    mad r0.x, c24.x, r0.z, -r0.x
    mul r0.x, r1.w, r0.x
    mul r0.x, r0.x, r0.y
    exp r0.x, -r0.x
    add r0.y, -r0.x, c28.z
    mul r0.yzw, r0.y, c27.xxyz
    mad o3.xyz, r0.yzww, r2.x, r1
    mul o3.w, r2.x, r0.x
    mov o0.xy, v3
    mov o1, v4
    mov o2, v5
    mov o4.w, c28.z
    mov o5, r3
    mov o6.zw, r3
