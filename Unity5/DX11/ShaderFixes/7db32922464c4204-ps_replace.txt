// 3DMigoto: 7db32922464c4204 | Unity headers extracted from Internal-PrePassCollectShadows.shader
// Shader "Hidden/Internal-PrePassCollectShadows" {
//   Properties {
//    _ShadowMapTexture ("", any) = "" { }
//   }
//   Fallback Off
//   SubShader 1/2 {
//     Pass 1/1 {
//       ZTest Always
//       ZWrite Off
//       Cull Off
//       GpuProgramID 58189
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "SHADOWS_NATIVE" }
//           SetTexture 0 [_CameraDepthTexture] 2D 0
//           SetTexture 1 [_ShadowMapTexture] 2D 1
//           ConstBuffer "UnityPerCamera" 144
//           Vector 112 [_ZBufferParams]
//           Vector 128 [unity_OrthoParams]
//           ConstBuffer "UnityShadows" 416
//           Matrix 128 [unity_World2Shadow0]
//           Matrix 192 [unity_World2Shadow1]
//           Matrix 256 [unity_World2Shadow2]
//           Matrix 320 [unity_World2Shadow3]
//           Vector 96 [_LightSplitsNear]
//           Vector 112 [_LightSplitsFar]
//           Vector 384 [_LightShadowData]
//           ConstBuffer "UnityPerCamera2" 64
//           Matrix 0 [_CameraToWorld]
//           BindCB "UnityPerCamera" 0
//           BindCB "UnityShadows" 1
//           BindCB "UnityPerCamera2" 2
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerComparisonState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[4];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[25];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[9];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float2 v0 : TEXCOORD0,
  float3 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : SV_POSITION0,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD3) // New input from pixel shader with UNITY_MATRIX_IT_MV[0].x
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = t0.Sample(s0_s, v0.xy).xyzw;
  r0.y = cb0[7].x * r0.x + cb0[7].y;
  r0.y = 1.000000e+000 / r0.y;
  r0.z = r0.x + -r0.y;
  r0.y = cb0[8].w * r0.z + r0.y;
  r1.xy = v2.xy;
  r0.z = v2.w + -v2.z;
  r1.z = r0.x * r0.z + v2.z;
  r0.xzw = -v1.xyz * r0.yyy + r1.xyz;
  r1.xyz = v1.xyz * r0.yyy;
  r0.xyz = cb0[8].www * r0.xzw + r1.xyz;
  r1.xyzw = r0.zzzz >= cb1[6].xyzw;
  r1.xyzw = r1.xyzw ? 1.000000 : 0;
  r2.xyzw = r0.zzzz < cb1[7].xyzw;
  r2.xyzw = r2.xyzw ? 1.000000 : 0;
  r1.xyzw = r2.xyzw * r1.xyzw;

float depth = r0.z;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x; float convergence = stereo.y;
r0.x -= separation * (depth - convergence) * fov;

  r2.xyzw = cb2[1].xyzw * r0.yyyy;
  r2.xyzw = cb2[0].xyzw * r0.xxxx + r2.xyzw;
  r2.xyzw = cb2[2].xyzw * r0.zzzz + r2.xyzw;
  r0.x = saturate(r0.z * cb1[24].z + cb1[24].w);
  r2.xyzw = cb2[3].xyzw + r2.xyzw;
  r0.yzw = cb1[13].xyz * r2.yyy;
  r0.yzw = cb1[12].xyz * r2.xxx + r0.yzw;
  r0.yzw = cb1[14].xyz * r2.zzz + r0.yzw;
  r0.yzw = cb1[15].xyz * r2.www + r0.yzw;
  r0.yzw = r0.yzw * r1.yyy;
  r3.xyz = cb1[9].xyz * r2.yyy;
  r3.xyz = cb1[8].xyz * r2.xxx + r3.xyz;
  r3.xyz = cb1[10].xyz * r2.zzz + r3.xyz;
  r3.xyz = cb1[11].xyz * r2.www + r3.xyz;
  r0.yzw = r3.xyz * r1.xxx + r0.yzw;
  r3.xyz = cb1[17].xyz * r2.yyy;
  r3.xyz = cb1[16].xyz * r2.xxx + r3.xyz;
  r3.xyz = cb1[18].xyz * r2.zzz + r3.xyz;
  r3.xyz = cb1[19].xyz * r2.www + r3.xyz;
  r0.yzw = r3.xyz * r1.zzz + r0.yzw;
  r1.xyz = cb1[21].xyz * r2.yyy;
  r1.xyz = cb1[20].xyz * r2.xxx + r1.xyz;
  r1.xyz = cb1[22].xyz * r2.zzz + r1.xyz;
  r1.xyz = cb1[23].xyz * r2.www + r1.xyz;
  r0.yzw = r1.xyz * r1.www + r0.yzw;
  r0.y = t1.SampleCmpLevelZero(s1_s, r0.yz, r0.w).x;
  r0.z = 1.000000000e+000 + -cb1[24].x;
  r0.y = r0.y * r0.z + cb1[24].x;
  o0.xyzw = r0.yyyy + r0.xxxx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// SV_POSITION              0   xyzw        3      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[25], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v0.xy
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 4
sample r0.xyzw, v0.xyxx, t0.xyzw, s0
mad r0.y, cb0[7].x, r0.x, cb0[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
add r0.z, -r0.y, r0.x
mad r0.y, cb0[8].w, r0.z, r0.y
mov r1.xy, v2.xyxx
add r0.z, -v2.z, v2.w
mad r1.z, r0.x, r0.z, v2.z
mad r0.xzw, -v1.xxyz, r0.yyyy, r1.xxyz
mul r1.xyz, r0.yyyy, v1.xyzx
mad r0.xyz, cb0[8].wwww, r0.xzwx, r1.xyzx
ge r1.xyzw, r0.zzzz, cb1[6].xyzw
and r1.xyzw, r1.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
lt r2.xyzw, r0.zzzz, cb1[7].xyzw
and r2.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
mul r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.yyyy, cb2[1].xyzw
mad r2.xyzw, cb2[0].xyzw, r0.xxxx, r2.xyzw
mad r2.xyzw, cb2[2].xyzw, r0.zzzz, r2.xyzw
mad_sat r0.x, r0.z, cb1[24].z, cb1[24].w
add r2.xyzw, r2.xyzw, cb2[3].xyzw
mul r0.yzw, r2.yyyy, cb1[13].xxyz
mad r0.yzw, cb1[12].xxyz, r2.xxxx, r0.yyzw
mad r0.yzw, cb1[14].xxyz, r2.zzzz, r0.yyzw
mad r0.yzw, cb1[15].xxyz, r2.wwww, r0.yyzw
mul r0.yzw, r1.yyyy, r0.yyzw
mul r3.xyz, r2.yyyy, cb1[9].xyzx
mad r3.xyz, cb1[8].xyzx, r2.xxxx, r3.xyzx
mad r3.xyz, cb1[10].xyzx, r2.zzzz, r3.xyzx
mad r3.xyz, cb1[11].xyzx, r2.wwww, r3.xyzx
mad r0.yzw, r3.xxyz, r1.xxxx, r0.yyzw
mul r3.xyz, r2.yyyy, cb1[17].xyzx
mad r3.xyz, cb1[16].xyzx, r2.xxxx, r3.xyzx
mad r3.xyz, cb1[18].xyzx, r2.zzzz, r3.xyzx
mad r3.xyz, cb1[19].xyzx, r2.wwww, r3.xyzx
mad r0.yzw, r3.xxyz, r1.zzzz, r0.yyzw
mul r1.xyz, r2.yyyy, cb1[21].xyzx
mad r1.xyz, cb1[20].xyzx, r2.xxxx, r1.xyzx
mad r1.xyz, cb1[22].xyzx, r2.zzzz, r1.xyzx
mad r1.xyz, cb1[23].xyzx, r2.wwww, r1.xyzx
mad r0.yzw, r1.xxyz, r1.wwww, r0.yyzw
sample_c_lz r0.y, r0.yzyy, t1.xxxx, s1, r0.w
add r0.z, -cb1[24].x, l(1.000000)
mad r0.y, r0.y, r0.z, cb1[24].x
add o0.xyzw, r0.xxxx, r0.yyyy
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
