Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerComparisonState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[4];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[26];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[22];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = 1.000000000e+000 + -cb2[24].x;
  r0.y = cb1[5].z / v2.z;
  r0.yzw = v2.xyz * r0.yyy;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s0_s, r1.xy).xyzw;
  r1.z = cb1[7].x * r2.x + cb1[7].y;
  r1.z = 1.000000e+000 / r1.z;
  r2.xyz = r1.zzz * r0.yzw;
  r3.xyz = cb3[1].xyz * r2.yyy;
  r2.xyw = cb3[0].xyz * r2.xxx + r3.xyz;
  r2.xyw = cb3[2].xyz * r2.zzz + r2.xyw;
  r2.xyw = cb3[3].xyz + r2.xyw;
  r3.xyzw = cb2[9].xyzw * r2.yyyy;
  r3.xyzw = cb2[8].xyzw * r2.xxxx + r3.xyzw;
  r3.xyzw = cb2[10].xyzw * r2.wwww + r3.xyzw;
  r3.xyzw = cb2[11].xyzw + r3.xyzw;
  r3.xyz = r3.xyz / r3.www;
  r4.xyz = cb0[15].xyz + r3.xyz;
  r4.x = t6.SampleCmpLevelZero(s3_s, r4.xy, r4.z).x;
  r5.xyz = cb0[16].xyz + r3.xyz;
  r4.y = t6.SampleCmpLevelZero(s3_s, r5.xy, r5.z).x;
  r5.xyz = cb0[17].xyz + r3.xyz;
  r3.xyz = cb0[18].xyz + r3.xyz;
  r4.w = t6.SampleCmpLevelZero(s3_s, r3.xy, r3.z).x;
  r4.z = t6.SampleCmpLevelZero(s3_s, r5.xy, r5.z).x;
  r3.xyzw = r4.xyzw * r0.xxxx + cb2[24].xxxx;
  r0.x = dot(r3.xyzw, float4(2.500000e-001,2.500000e-001,2.500000e-001,2.500000e-001));
  r3.xyz = -cb2[25].xyz + r2.xyw;
  r0.y = dot(r3.xyz, r3.xyz);
  r0.y = sqrt(r0.y);
  r0.y = -r0.w * r1.z + r0.y;
  r0.y = cb2[25].w * r0.y + r2.z;
  r0.y = saturate(r0.y * cb2[24].z + cb2[24].w);
  r0.x = saturate(r0.x + r0.y);
  r0.yzw = cb0[12].xyw * r2.yyy;
  r0.yzw = cb0[11].xyw * r2.xxx + r0.yzw;
  r0.yzw = cb0[13].xyw * r2.www + r0.yzw;
  r0.yzw = cb0[14].xyw + r0.yzw;
  r0.yz = r0.yz / r0.ww;
  r0.w = r0.w < 0.000000000e+000;
  r0.w = r0.w ? 1.000000 : 0;
  r3.xyzw = t1.Sample(s2_s, r0.yz).xyzw;
  r0.y = r3.w * r0.w;
  r3.xyz = cb0[8].xyz + -r2.xyw;
  r2.xyz = -cb1[4].xyz + r2.xyw;
  r0.z = dot(r3.xyz, r3.xyz);
  r0.w = cb0[8].w * r0.z;
  r0.z = rsqrt(r0.z);
  r4.xyzw = t2.Sample(s1_s, r0.ww).xyzw;
  r0.y = r4.x * r0.y;
  r0.x = r0.y * r0.x;
  r0.xyw = cb0[9].xyz * r0.xxx;
  r1.z = dot(r2.xyz, r2.xyz);
  r1.z = rsqrt(r1.z);
  r2.xyz = r2.xyz * r1.zzz;
  r4.xyz = r3.xyz * r0.zzz + -r2.xyz;
  r3.xyz = r3.xyz * r0.zzz;
  r0.z = dot(r4.xyz, r4.xyz);
  r0.z = rsqrt(r0.z);
  r4.xyz = r4.xyz * r0.zzz;
  r5.xyzw = t5.Sample(s6_s, r1.xy).xyzw;
  r5.xyz = r5.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.z = dot(r5.xyz, r5.xyz);
  r0.z = rsqrt(r0.z);
  r5.xyz = r5.xyz * r0.zzz;
  r0.z = dot(r5.xyz, r4.xyz);
  r1.z = dot(r3.xyz, r4.xyz);
  r1.w = dot(r5.xyz, r3.xyz);
  r2.x = dot(r5.xyz, -r2.xyz);
  r2.x = max(0.000000000e+000, r2.x);
  r1.zw = max(float2(0.000000e+000,0.000000e+000), r1.zw);
  r0.z = max(0.000000000e+000, r0.z);
  r0.z = log2(r0.z);
  r3.xyzw = t4.Sample(s5_s, r1.xy).xyzw;
  r4.xyzw = t3.Sample(s4_s, r1.xy).xyzw;
  r5.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) + -r3.wxyz;
  r1.x = 1.000000000e+000 + -r5.x;
  r1.x = r1.x * 9.679999948e-001 + 2.999999933e-002;
  r1.x = log2(r1.x);
  r1.x = 1.000000000e+001 / r1.x;
  r1.y = r1.x * r1.x;
  r1.x = r1.x * r1.x + 1.000000000e+000;
  r1.x = cb0[21].y * r1.x;
  r0.z = r1.y * r0.z;
  r0.z = exp2(r0.z);
  r0.z = r0.z * r1.x;
  r1.x = r5.x * r5.x;
  r1.y = cb0[21].w * r1.x;
  r1.x = -r1.x * cb0[21].w + 1.000000000e+000;
  r2.y = r2.x * r1.x + r1.y;
  r2.x = 1.000000000e+000 + -r2.x;
  r1.x = r1.w * r1.x + r1.y;
  r1.x = r1.x * r2.y + 9.999999747e-005;
  r1.x = 1.000000e+000 / r1.x;
  r0.z = r1.x * r0.z;
  r0.z = r0.z * r1.w;
  r0.z = cb0[21].x * r0.z;
  r0.z = max(0.000000000e+000, r0.z);
  r2.yzw = r0.zzz * r0.xyw;
  r0.z = 1.000000000e+000 + -r1.z;
  r1.x = r1.z * r1.z;
  r1.x = dot(r1.xx, r5.xx);
  r1.x = -5.000000000e-001 + r1.x;
  r1.y = r0.z * r0.z;
  r1.y = r1.y * r1.y;
  r0.z = r1.y * r0.z;
  r3.xyz = r5.yzw * r0.zzz + r3.xyz;
  r2.yzw = r3.xyz * r2.yzw;
  r0.z = r2.x * r2.x;
  r0.z = r0.z * r0.z;
  r0.z = r0.z * r2.x;
  r0.z = r1.x * r0.z + 1.000000000e+000;
  r1.y = 1.000000000e+000 + -r1.w;
  r1.z = r1.y * r1.y;
  r1.z = r1.z * r1.z;
  r1.y = r1.z * r1.y;
  r1.x = r1.x * r1.y + 1.000000000e+000;
  r0.z = r1.x * r0.z;
  r0.z = r0.z * r1.w;
  r0.xyz = r0.xyw * r0.zzz;
  r0.xyz = r4.xyz * r0.xyz + r2.yzw;
  r0.w = 1.000000000e+000;
  o0.xyzw = exp2(-r0.xyzw);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[22], immediateIndexed
dcl_constantbuffer cb1[8], immediateIndexed
dcl_constantbuffer cb2[26], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_comparison
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 6
add r0.x, -cb2[24].x, l(1.000000)
div r0.y, cb1[5].z, v2.z
mul r0.yzw, r0.yyyy, v2.xxyz
div r1.xy, v1.xyxx, v1.wwww
sample r2.xyzw, r1.xyxx, t0.xyzw, s0
mad r1.z, cb1[7].x, r2.x, cb1[7].y
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
mul r2.xyz, r0.yzwy, r1.zzzz
mul r3.xyz, r2.yyyy, cb3[1].xyzx
mad r2.xyw, cb3[0].xyxz, r2.xxxx, r3.xyxz
mad r2.xyw, cb3[2].xyxz, r2.zzzz, r2.xyxw
add r2.xyw, r2.xyxw, cb3[3].xyxz
mul r3.xyzw, r2.yyyy, cb2[9].xyzw
mad r3.xyzw, cb2[8].xyzw, r2.xxxx, r3.xyzw
mad r3.xyzw, cb2[10].xyzw, r2.wwww, r3.xyzw
add r3.xyzw, r3.xyzw, cb2[11].xyzw
div r3.xyz, r3.xyzx, r3.wwww
add r4.xyz, r3.xyzx, cb0[15].xyzx
sample_c_lz r4.x, r4.xyxx, t6.xxxx, s3, r4.z
add r5.xyz, r3.xyzx, cb0[16].xyzx
sample_c_lz r4.y, r5.xyxx, t6.xxxx, s3, r5.z
add r5.xyz, r3.xyzx, cb0[17].xyzx
add r3.xyz, r3.xyzx, cb0[18].xyzx
sample_c_lz r4.w, r3.xyxx, t6.xxxx, s3, r3.z
sample_c_lz r4.z, r5.xyxx, t6.xxxx, s3, r5.z
mad r3.xyzw, r4.xyzw, r0.xxxx, cb2[24].xxxx
dp4 r0.x, r3.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
add r3.xyz, r2.xywx, -cb2[25].xyzx
dp3 r0.y, r3.xyzx, r3.xyzx
sqrt r0.y, r0.y
mad r0.y, -r0.w, r1.z, r0.y
mad r0.y, cb2[25].w, r0.y, r2.z
mad_sat r0.y, r0.y, cb2[24].z, cb2[24].w
add_sat r0.x, r0.y, r0.x
mul r0.yzw, r2.yyyy, cb0[12].xxyw
mad r0.yzw, cb0[11].xxyw, r2.xxxx, r0.yyzw
mad r0.yzw, cb0[13].xxyw, r2.wwww, r0.yyzw
add r0.yzw, r0.yyzw, cb0[14].xxyw
div r0.yz, r0.yyzy, r0.wwww
lt r0.w, r0.w, l(0.000000)
and r0.w, r0.w, l(0x3f800000)
sample r3.xyzw, r0.yzyy, t1.xyzw, s2
mul r0.y, r0.w, r3.w
add r3.xyz, -r2.xywx, cb0[8].xyzx
add r2.xyz, r2.xywx, -cb1[4].xyzx
dp3 r0.z, r3.xyzx, r3.xyzx
mul r0.w, r0.z, cb0[8].w
rsq r0.z, r0.z
sample r4.xyzw, r0.wwww, t2.xyzw, s1
mul r0.y, r0.y, r4.x
mul r0.x, r0.x, r0.y
mul r0.xyw, r0.xxxx, cb0[9].xyxz
dp3 r1.z, r2.xyzx, r2.xyzx
rsq r1.z, r1.z
mul r2.xyz, r1.zzzz, r2.xyzx
mad r4.xyz, r3.xyzx, r0.zzzz, -r2.xyzx
mul r3.xyz, r0.zzzz, r3.xyzx
dp3 r0.z, r4.xyzx, r4.xyzx
rsq r0.z, r0.z
mul r4.xyz, r0.zzzz, r4.xyzx
sample r5.xyzw, r1.xyxx, t5.xyzw, s6
mad r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.z, r5.xyzx, r5.xyzx
rsq r0.z, r0.z
mul r5.xyz, r0.zzzz, r5.xyzx
dp3 r0.z, r5.xyzx, r4.xyzx
dp3 r1.z, r3.xyzx, r4.xyzx
dp3 r1.w, r5.xyzx, r3.xyzx
dp3 r2.x, r5.xyzx, -r2.xyzx
max r2.x, r2.x, l(0.000000)
max r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
max r0.z, r0.z, l(0.000000)
log r0.z, r0.z
sample r3.xyzw, r1.xyxx, t4.xyzw, s5
sample r4.xyzw, r1.xyxx, t3.xyzw, s4
add r5.xyzw, -r3.wxyz, l(1.000000, 1.000000, 1.000000, 1.000000)
add r1.x, -r5.x, l(1.000000)
mad r1.x, r1.x, l(0.968000), l(0.030000)
log r1.x, r1.x
div r1.x, l(10.000000), r1.x
mul r1.y, r1.x, r1.x
mad r1.x, r1.x, r1.x, l(1.000000)
mul r1.x, r1.x, cb0[21].y
mul r0.z, r0.z, r1.y
exp r0.z, r0.z
mul r0.z, r1.x, r0.z
mul r1.x, r5.x, r5.x
mul r1.y, r1.x, cb0[21].w
mad r1.x, -r1.x, cb0[21].w, l(1.000000)
mad r2.y, r2.x, r1.x, r1.y
add r2.x, -r2.x, l(1.000000)
mad r1.x, r1.w, r1.x, r1.y
mad r1.x, r1.x, r2.y, l(0.000100)
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mul r0.z, r0.z, r1.x
mul r0.z, r1.w, r0.z
mul r0.z, r0.z, cb0[21].x
max r0.z, r0.z, l(0.000000)
mul r2.yzw, r0.xxyw, r0.zzzz
add r0.z, -r1.z, l(1.000000)
mul r1.x, r1.z, r1.z
dp2 r1.x, r1.xxxx, r5.xxxx
add r1.x, r1.x, l(-0.500000)
mul r1.y, r0.z, r0.z
mul r1.y, r1.y, r1.y
mul r0.z, r0.z, r1.y
mad r3.xyz, r5.yzwy, r0.zzzz, r3.xyzx
mul r2.yzw, r2.yyzw, r3.xxyz
mul r0.z, r2.x, r2.x
mul r0.z, r0.z, r0.z
mul r0.z, r2.x, r0.z
mad r0.z, r1.x, r0.z, l(1.000000)
add r1.y, -r1.w, l(1.000000)
mul r1.z, r1.y, r1.y
mul r1.z, r1.z, r1.z
mul r1.y, r1.y, r1.z
mad r1.x, r1.x, r1.y, l(1.000000)
mul r0.z, r0.z, r1.x
mul r0.z, r1.w, r0.z
mul r0.xyz, r0.zzzz, r0.xywx
mad r0.xyz, r4.xyzx, r0.xyzx, r2.yzwy
mov r0.w, l(1.000000)
exp o0.xyzw, -r0.xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
