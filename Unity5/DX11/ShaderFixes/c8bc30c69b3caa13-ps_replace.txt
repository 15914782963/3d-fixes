Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerComparisonState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[4];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[26];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[9];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float2 v0 : TEXCOORD0,
  float3 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : SV_POSITION0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = t0.Sample(s0_s, v0.xy).xyzw;
  r0.y = cb0[7].x * r0.x + cb0[7].y;
  r0.y = 1.000000e+000 / r0.y;
  r0.z = r0.x + -r0.y;
  r0.y = cb0[8].w * r0.z + r0.y;
  r1.xy = v2.xy;
  r0.z = v2.w + -v2.z;
  r1.z = r0.x * r0.z + v2.z;
  r0.xzw = -v1.xyz * r0.yyy + r1.xyz;
  r1.xyz = v1.xyz * r0.yyy;
  r0.xyz = cb0[8].www * r0.xzw + r1.xyz;
  r1.xyzw = cb2[1].xyzw * r0.yyyy;
  r1.xyzw = cb2[0].xyzw * r0.xxxx + r1.xyzw;
  r0.xyzw = cb2[2].xyzw * r0.zzzz + r1.xyzw;
  r0.xyzw = cb2[3].xyzw + r0.xyzw;
  r1.xyz = cb1[9].xyz * r0.yyy;
  r1.xyz = cb1[8].xyz * r0.xxx + r1.xyz;
  r1.xyz = cb1[10].xyz * r0.zzz + r1.xyz;
  r1.xyz = cb1[11].xyz * r0.www + r1.xyz;
  r0.xyz = -cb1[25].xyz + r0.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.x = saturate(r0.x * cb1[24].z + cb1[24].w);
  r0.y = t1.SampleCmpLevelZero(s1_s, r1.xy, r1.z).x;
  r0.z = 1.000000000e+000 + -cb1[24].x;
  r0.y = r0.y * r0.z + cb1[24].x;
  o0.xyzw = r0.yyyy + r0.xxxx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// SV_POSITION              0   xyzw        3      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[26], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v0.xy
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 2
sample r0.xyzw, v0.xyxx, t0.xyzw, s0
mad r0.y, cb0[7].x, r0.x, cb0[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
add r0.z, -r0.y, r0.x
mad r0.y, cb0[8].w, r0.z, r0.y
mov r1.xy, v2.xyxx
add r0.z, -v2.z, v2.w
mad r1.z, r0.x, r0.z, v2.z
mad r0.xzw, -v1.xxyz, r0.yyyy, r1.xxyz
mul r1.xyz, r0.yyyy, v1.xyzx
mad r0.xyz, cb0[8].wwww, r0.xzwx, r1.xyzx
mul r1.xyzw, r0.yyyy, cb2[1].xyzw
mad r1.xyzw, cb2[0].xyzw, r0.xxxx, r1.xyzw
mad r0.xyzw, cb2[2].xyzw, r0.zzzz, r1.xyzw
add r0.xyzw, r0.xyzw, cb2[3].xyzw
mul r1.xyz, r0.yyyy, cb1[9].xyzx
mad r1.xyz, cb1[8].xyzx, r0.xxxx, r1.xyzx
mad r1.xyz, cb1[10].xyzx, r0.zzzz, r1.xyzx
mad r1.xyz, cb1[11].xyzx, r0.wwww, r1.xyzx
add r0.xyz, r0.xyzx, -cb1[25].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
mad_sat r0.x, r0.x, cb1[24].z, cb1[24].w
sample_c_lz r0.y, r1.xyxx, t1.xxxx, s1, r1.z
add r0.z, -cb1[24].x, l(1.000000)
mad r0.y, r0.y, r0.z, cb1[24].x
add o0.xyzw, r0.xxxx, r0.yyyy
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb2
// {
//
//   float4 cb2[4];                     // Offset:    0 Size:    64
//
// }
//
// cbuffer cb1
// {
//
//   float4 cb1[26];                    // Offset:    0 Size:   416
//
// }
//
// cbuffer cb0
// {
//
//   float4 cb0[9];                     // Offset:    0 Size:   144
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s0_s                              sampler      NA          NA    0        1
// s1_s                            sampler_c      NA          NA    1        1
// t0                                texture  float4          2d    0        1
// t1                                texture  float4          2d    1        1
// cb0                               cbuffer      NA          NA    0        1
// cb1                               cbuffer      NA          NA    1        1
// cb2                               cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// SV_POSITION              0   xyzw        3      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb1[26], immediateIndexed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v0.xy
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 2
sample r0.xyzw, v0.xyxx, t0.xyzw, s0
mad r0.y, cb0[7].x, r0.x, cb0[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
add r0.z, -r0.y, r0.x
mad r0.y, cb0[8].w, r0.z, r0.y
mov r1.xy, v2.xyxx
add r0.z, -v2.z, v2.w
mad r1.z, r0.x, r0.z, v2.z
mad r0.xzw, -v1.xxyz, r0.yyyy, r1.xxyz
mul r1.xyz, r0.yyyy, v1.xyzx
mad r0.xyz, cb0[8].wwww, r0.xzwx, r1.xyzx
mul r1.xyzw, r0.yyyy, cb2[1].xyzw
mad r1.xyzw, cb2[0].xyzw, r0.xxxx, r1.xyzw
mad r0.xyzw, cb2[2].xyzw, r0.zzzz, r1.xyzw
add r0.xyzw, r0.xyzw, cb2[3].xyzw
mul r1.xyz, r0.yyyy, cb1[9].xyzx
mad r1.xyz, cb1[8].xyzx, r0.xxxx, r1.xyzx
mad r1.xyz, cb1[10].xyzx, r0.zzzz, r1.xyzx
mad r1.xyz, cb1[11].xyzx, r0.wwww, r1.xyzx
add r0.xyz, r0.xyzx, -cb1[25].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
mad_sat r0.x, r0.x, cb1[24].z, cb1[24].w
sample_c_lz r0.y, r1.xyxx, t1.xxxx, s1, r1.z
add r0.z, -cb1[24].x, l(1.000000)
mad r0.y, r0.y, r0.z, cb1[24].x
add o0.xyzw, r0.xxxx, r0.yyyy
ret 
// Approximately 28 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
