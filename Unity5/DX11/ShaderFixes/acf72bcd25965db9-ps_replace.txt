// 3DMigoto: acf72bcd25965db9 | Unity headers extracted from Internal-DeferredShadingRTPU5.shader
// Shader "Hidden/Internal-DeferredShadingRTPU5" {
//   Properties {
//    _LightTexture0 ("", any) = "" { }
//    _LightTextureB0 ("", 2D) = "" { }
//    _ShadowMapTexture ("", any) = "" { }
//    _SrcBlend ("", Float) = 1
//    _DstBlend ("", Float) = 1
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 1/2 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Blend [_SrcBlend] [_DstBlend]
//       GpuProgramID 58796
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
//           SetTexture 0 [_CameraDepthTexture] 2D 0
//           SetTexture 1 [_ShadowMapTexture] 2D 1
//           SetTexture 2 [_CameraGBufferTexture0] 2D 2
//           SetTexture 3 [_CameraGBufferTexture1] 2D 3
//           SetTexture 4 [_CameraGBufferTexture2] 2D 4
//           ConstBuffer "$Globals" 288
//           Vector 112 [_LightDir]
//           Vector 144 [_LightColor]
//           Vector 272 [unity_LightGammaCorrectionConsts]
//           ConstBuffer "UnityPerCamera" 144
//           Vector 64 [_WorldSpaceCameraPos] 3
//           Vector 80 [_ProjectionParams]
//           Vector 112 [_ZBufferParams]
//           ConstBuffer "UnityShadows" 416
//           Vector 384 [_LightShadowData]
//           Vector 400 [unity_ShadowFadeCenterAndType]
//           ConstBuffer "UnityPerCamera2" 64
//           Matrix 0 [_CameraToWorld]
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityShadows" 2
//           BindCB "UnityPerCamera2" 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[4];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[26];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[18];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD2) // New input from pixel shader with UNITY_MATRIX_IT_MV[0].x
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s0_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r2.xyz = r0.xyz * r0.www;

float depth = r2.z;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x; float convergence = stereo.y;
r2.x -= separation * (depth - convergence) * fov;

  r3.xyz = cb3[1].xyz * r2.yyy;
  r2.xyw = cb3[0].xyz * r2.xxx + r3.xyz;
  r2.xyw = cb3[2].xyz * r2.zzz + r2.xyw;
  r2.xyw = cb3[3].xyz + r2.xyw;
  r3.xyz = -cb2[25].xyz + r2.xyw;
  r2.xyw = -cb1[4].xyz + r2.xyw;
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = sqrt(r0.x);
  r0.x = -r0.z * r0.w + r0.x;
  r0.x = cb2[25].w * r0.x + r2.z;
  r0.x = saturate(r0.x * cb2[24].z + cb2[24].w);
  r3.xyzw = t1.Sample(s1_s, r1.xy).xyzw;
  r0.x = saturate(r3.x + r0.x);
  r3.xyzw = t4.Sample(s4_s, r1.xy).xyzw;
  r0.x = min(r3.w, r0.x);
  r0.yzw = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r3.xyz = cb0[9].xyz * r0.xxx;
  r0.x = dot(r2.xyw, r2.xyw);
  r0.x = rsqrt(r0.x);
  r4.xyz = -r2.xyw * r0.xxx + -cb0[7].xyz;
  r2.xyz = r2.xyw * r0.xxx;
  r0.x = dot(r4.xyz, r4.xyz);
  r0.x = max(0.00100000005, r0.x);
  r0.x = rsqrt(r0.x);
  r4.xyz = r4.xyz * r0.xxx;
  r0.x = dot(r0.yzw, r0.yzw);
  r0.x = rsqrt(r0.x);
  r0.xyz = r0.yzw * r0.xxx;
  r0.w = dot(r0.xyz, r4.xyz);
  r1.z = dot(-cb0[7].xyz, r4.xyz);
  r1.z = max(0, r1.z);
  r0.w = max(0, r0.w);
  r0.w = log2(r0.w);
  r4.xyzw = t3.Sample(s3_s, r1.xy).xyzw;
  r5.xyzw = t2.Sample(s2_s, r1.xy).xyzw;
  r6.xyzw = float4(1,1,1,1) + -r4.wxyz;
  r1.x = 1 + -r6.x;
  r1.x = r1.x * 0.967999995 + 0.0299999993;
  r1.x = log2(r1.x);
  r1.x = 10 / r1.x;
  r1.y = r1.x * r1.x;
  r1.x = r1.x * r1.x + 1;
  r1.x = cb0[17].y * r1.x;
  r0.w = r1.y * r0.w;
  r0.w = exp2(r0.w);
  r0.w = r0.w * r1.x;
  r1.x = dot(r0.xyz, -r2.xyz);
  r0.x = dot(r0.xyz, -cb0[7].xyz);
  r0.x = max(0, r0.x);
  r0.y = max(0, r1.x);
  r0.z = r6.x * r6.x;
  r1.x = cb0[17].w * r0.z;
  r0.z = -r0.z * cb0[17].w + 1;
  r1.y = r0.y * r0.z + r1.x;
  r0.y = 1 + -r0.y;
  r0.z = r0.x * r0.z + r1.x;
  r0.z = r0.z * r1.y + 9.99999975e-005;
  r0.z = 1 / r0.z;
  r0.z = r0.z * r0.w;
  r0.z = r0.z * r0.x;
  r0.z = cb0[17].x * r0.z;
  r0.z = max(0, r0.z);
  r1.xyw = r0.zzz * r3.xyz;
  r0.z = 1 + -r1.z;
  r0.w = r1.z * r1.z;
  r0.w = dot(r0.ww, r6.xx);
  r0.w = -0.5 + r0.w;
  r1.z = r0.z * r0.z;
  r1.z = r1.z * r1.z;
  r0.z = r1.z * r0.z;
  r2.xyz = r6.yzw * r0.zzz + r4.xyz;
  r1.xyz = r2.xyz * r1.xyw;
  r0.z = r0.y * r0.y;
  r0.z = r0.z * r0.z;
  r0.y = r0.z * r0.y;
  r0.y = r0.w * r0.y + 1;
  r0.z = 1 + -r0.x;
  r1.w = r0.z * r0.z;
  r1.w = r1.w * r1.w;
  r0.z = r1.w * r0.z;
  r0.z = r0.w * r0.z + 1;
  r0.y = r0.z * r0.y;
  r0.x = r0.y * r0.x;
  r0.xyz = r3.xyz * r0.xxx;
  r0.xyz = r5.xyz * r0.xyz + r1.xyz;
  r0.w = 1;
  o0.xyzw = exp2(-r0.xyzw);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[18], immediateIndexed
dcl_constantbuffer cb1[8], immediateIndexed
dcl_constantbuffer cb2[26], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 7
div r0.x, cb1[5].z, v2.z
mul r0.xyz, r0.xxxx, v2.xyzx
div r1.xy, v1.xyxx, v1.wwww
sample r2.xyzw, r1.xyxx, t0.xyzw, s0
mad r0.w, cb1[7].x, r2.x, cb1[7].y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r2.xyz, r0.wwww, r0.xyzx
mul r3.xyz, r2.yyyy, cb3[1].xyzx
mad r2.xyw, cb3[0].xyxz, r2.xxxx, r3.xyxz
mad r2.xyw, cb3[2].xyxz, r2.zzzz, r2.xyxw
add r2.xyw, r2.xyxw, cb3[3].xyxz
add r3.xyz, r2.xywx, -cb2[25].xyzx
add r2.xyw, r2.xyxw, -cb1[4].xyxz
dp3 r0.x, r3.xyzx, r3.xyzx
sqrt r0.x, r0.x
mad r0.x, -r0.z, r0.w, r0.x
mad r0.x, cb2[25].w, r0.x, r2.z
mad_sat r0.x, r0.x, cb2[24].z, cb2[24].w
sample r3.xyzw, r1.xyxx, t1.xyzw, s1
add_sat r0.x, r0.x, r3.x
sample r3.xyzw, r1.xyxx, t4.xyzw, s4
min r0.x, r0.x, r3.w
mad r0.yzw, r3.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
mul r3.xyz, r0.xxxx, cb0[9].xyzx
dp3 r0.x, r2.xywx, r2.xywx
rsq r0.x, r0.x
mad r4.xyz, -r2.xywx, r0.xxxx, -cb0[7].xyzx
mul r2.xyz, r0.xxxx, r2.xywx
dp3 r0.x, r4.xyzx, r4.xyzx
max r0.x, r0.x, l(0.001000)
rsq r0.x, r0.x
mul r4.xyz, r0.xxxx, r4.xyzx
dp3 r0.x, r0.yzwy, r0.yzwy
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r0.yzwy
dp3 r0.w, r0.xyzx, r4.xyzx
dp3 r1.z, -cb0[7].xyzx, r4.xyzx
max r1.z, r1.z, l(0.000000)
max r0.w, r0.w, l(0.000000)
log r0.w, r0.w
sample r4.xyzw, r1.xyxx, t3.xyzw, s3
sample r5.xyzw, r1.xyxx, t2.xyzw, s2
add r6.xyzw, -r4.wxyz, l(1.000000, 1.000000, 1.000000, 1.000000)
add r1.x, -r6.x, l(1.000000)
mad r1.x, r1.x, l(0.968000), l(0.030000)
log r1.x, r1.x
div r1.x, l(10.000000), r1.x
mul r1.y, r1.x, r1.x
mad r1.x, r1.x, r1.x, l(1.000000)
mul r1.x, r1.x, cb0[17].y
mul r0.w, r0.w, r1.y
exp r0.w, r0.w
mul r0.w, r1.x, r0.w
dp3 r1.x, r0.xyzx, -r2.xyzx
dp3 r0.x, r0.xyzx, -cb0[7].xyzx
max r0.x, r0.x, l(0.000000)
max r0.y, r1.x, l(0.000000)
mul r0.z, r6.x, r6.x
mul r1.x, r0.z, cb0[17].w
mad r0.z, -r0.z, cb0[17].w, l(1.000000)
mad r1.y, r0.y, r0.z, r1.x
add r0.y, -r0.y, l(1.000000)
mad r0.z, r0.x, r0.z, r1.x
mad r0.z, r0.z, r1.y, l(0.000100)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mul r0.z, r0.w, r0.z
mul r0.z, r0.x, r0.z
mul r0.z, r0.z, cb0[17].x
max r0.z, r0.z, l(0.000000)
mul r1.xyw, r3.xyxz, r0.zzzz
add r0.z, -r1.z, l(1.000000)
mul r0.w, r1.z, r1.z
dp2 r0.w, r0.wwww, r6.xxxx
add r0.w, r0.w, l(-0.500000)
mul r1.z, r0.z, r0.z
mul r1.z, r1.z, r1.z
mul r0.z, r0.z, r1.z
mad r2.xyz, r6.yzwy, r0.zzzz, r4.xyzx
mul r1.xyz, r1.xywx, r2.xyzx
mul r0.z, r0.y, r0.y
mul r0.z, r0.z, r0.z
mul r0.y, r0.y, r0.z
mad r0.y, r0.w, r0.y, l(1.000000)
add r0.z, -r0.x, l(1.000000)
mul r1.w, r0.z, r0.z
mul r1.w, r1.w, r1.w
mul r0.z, r0.z, r1.w
mad r0.z, r0.w, r0.z, l(1.000000)
mul r0.y, r0.y, r0.z
mul r0.x, r0.x, r0.y
mul r0.xyz, r0.xxxx, r3.xyzx
mad r0.xyz, r5.xyzx, r0.xyzx, r1.xyzx
mov r0.w, l(1.000000)
exp o0.xyzw, -r0.xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
