// 3DMigoto: 7f4c161d7d8c1bab | Unity headers extracted from Internal-DeferredShading.shader
// Shader "Hidden/Internal-DeferredShading" {
//   Properties {
//    _LightTexture0 ("", any) = "" { }
//    _LightTextureB0 ("", 2D) = "" { }
//    _ShadowMapTexture ("", any) = "" { }
//    _SrcBlend ("", Float) = 1
//    _DstBlend ("", Float) = 1
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 1/2 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Blend [_SrcBlend] [_DstBlend]
//       GpuProgramID 36028
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
//           SetTexture 0 [_CameraDepthTexture] 2D 0
//           SetTexture 1 [_LightTextureB0] 2D 1
//           SetTexture 2 [_ShadowMapTexture] CUBE 2
//           SetTexture 3 [_CameraGBufferTexture0] 2D 3
//           SetTexture 4 [_CameraGBufferTexture1] 2D 4
//           SetTexture 5 [_CameraGBufferTexture2] 2D 5
//           ConstBuffer "$Globals" 288
//           Vector 128 [_LightPos]
//           Vector 144 [_LightColor]
//           Vector 272 [unity_LightGammaCorrectionConsts]
//           ConstBuffer "UnityPerCamera" 144
//           Vector 64 [_WorldSpaceCameraPos] 3
//           Vector 80 [_ProjectionParams]
//           Vector 112 [_ZBufferParams]
//           ConstBuffer "UnityLighting" 720
//           Vector 16 [_LightPositionRange]
//           ConstBuffer "UnityShadows" 416
//           Vector 384 [_LightShadowData]
//           ConstBuffer "UnityPerCamera2" 64
//           Matrix 0 [_CameraToWorld]
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityLighting" 2
//           BindCB "UnityShadows" 3
//           BindCB "UnityPerCamera2" 4
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

TextureCube<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[4];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[25];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[2];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[18];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD2) // New input from pixel shader with UNITY_MATRIX_IT_MV[0].x
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s0_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1.000000e+000 / r0.w;
  r0.xyz = r0.xyz * r0.www;

float depth = r0.z;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x; float convergence = stereo.y;
r0.x -= separation * (depth - convergence) * fov;

  r2.xyz = cb4[1].xyz * r0.yyy;
  r0.xyw = cb4[0].xyz * r0.xxx + r2.xyz;
  r0.xyz = cb4[2].xyz * r0.zzz + r0.xyw;
  r0.xyz = cb4[3].xyz + r0.xyz;
  r2.xyz = -cb1[4].xyz + r0.xyz;
  r0.xyz = -cb0[8].xyz + r0.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = dot(r0.xyz, r0.xyz);
  r1.z = rsqrt(r0.w);
  r3.xyz = -r0.xyz * r1.zzz + -r2.xyz;
  r4.xyz = r1.zzz * r0.xyz;
  r5.xyzw = t2.Sample(s2_s, r0.xyz).xyzw;
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r3.xyz * r0.xxx;
  r3.xyzw = t5.Sample(s5_s, r1.xy).xyzw;
  r3.xyz = r3.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.z = dot(r3.xyz, r3.xyz);
  r1.z = rsqrt(r1.z);
  r3.xyz = r3.xyz * r1.zzz;
  r1.z = dot(r3.xyz, r0.xyz);
  r0.x = dot(-r4.xyz, r0.xyz);
  r0.y = dot(r3.xyz, -r4.xyz);
  r0.z = dot(r3.xyz, -r2.xyz);
  r0.xyz = max(r0.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r1.z = max(r1.z, 0.000000000e+000);
  r1.z = log2(r1.z);
  r2.xyzw = t4.Sample(s4_s, r1.xy).xyzw;
  r3.xyzw = t3.Sample(s3_s, r1.xy).xyzw;
  r4.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) + -r2.wxyz;
  r1.x = 1.000000000e+000 + -r4.x;
  r1.x = r1.x * 9.679999948e-001 + 2.999999933e-002;
  r1.x = log2(r1.x);
  r1.x = 1.000000000e+001 / r1.x;
  r1.y = r1.x * r1.x;
  r1.x = r1.x * r1.x + 1.000000000e+000;
  r1.x = cb0[17].y * r1.x;
  r1.y = r1.y * r1.z;
  r1.y = exp2(r1.y);
  r1.x = r1.y * r1.x;
  r1.y = r4.x * r4.x;
  r1.z = cb0[17].w * r1.y;
  r1.y = -r1.y * cb0[17].w + 1.000000000e+000;
  r1.w = r0.z * r1.y + r1.z;
  r1.y = r0.y * r1.y + r1.z;
  r1.y = r1.y * r1.w + 9.999999747e-005;
  r1.y = 1.000000e+000 / r1.y;
  r1.x = r1.y * r1.x;
  r1.x = r1.x * r0.y;
  r1.x = cb0[17].x * r1.x;
  r1.x = max(r1.x, 0.000000000e+000);
  r1.y = sqrt(r0.w);
  r0.w = cb0[8].w * r0.w;
  r6.xyzw = t1.Sample(s1_s, r0.ww).xyzw;
  r0.w = cb2[1].w * r1.y;
  r0.w = 9.700000286e-001 * r0.w;
  r0.w = r5.x < r0.w;
  r0.w = r0.w ? cb3[24].x : 1.000000000e+000;
  r0.w = r6.x * r0.w;
  r1.yzw = cb0[9].xyz * r0.www;
  r5.xyz = r1.xxx * r1.yzw;
  r0.zw = float2(1.000000e+000,1.000000e+000) + -r0.zx;
  r0.x = r0.x * r0.x;
  r0.x = dot(r0.xx, r4.xx);
  r0.x = -5.000000000e-001 + r0.x;
  r1.x = r0.w * r0.w;
  r1.x = r1.x * r1.x;
  r0.w = r1.x * r0.w;
  r2.xyz = r4.yzw * r0.www + r2.xyz;
  r2.xyz = r5.xyz * r2.xyz;
  r0.w = r0.z * r0.z;
  r0.w = r0.w * r0.w;
  r0.z = r0.w * r0.z;
  r0.z = r0.x * r0.z + 1.000000000e+000;
  r0.w = 1.000000000e+000 + -r0.y;
  r1.x = r0.w * r0.w;
  r1.x = r1.x * r1.x;
  r0.w = r1.x * r0.w;
  r0.x = r0.x * r0.w + 1.000000000e+000;
  r0.x = r0.x * r0.z;
  r0.x = r0.x * r0.y;
  r0.xyz = r1.yzw * r0.xxx;
  o0.xyz = r3.xyz * r0.xyz + r2.xyz;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[18], immediateIndexed
dcl_constantbuffer cb1[8], immediateIndexed
dcl_constantbuffer cb2[2], immediateIndexed
dcl_constantbuffer cb3[25], immediateIndexed
dcl_constantbuffer cb4[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 7
div r0.x, cb1[5].z, v2.z
mul r0.xyz, r0.xxxx, v2.xyzx
div r1.xy, v1.xyxx, v1.wwww
sample r2.xyzw, r1.xyxx, t0.xyzw, s0
mad r0.w, cb1[7].x, r2.x, cb1[7].y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r2.xyz, r0.yyyy, cb4[1].xyzx
mad r0.xyw, cb4[0].xyxz, r0.xxxx, r2.xyxz
mad r0.xyz, cb4[2].xyzx, r0.zzzz, r0.xywx
add r0.xyz, r0.xyzx, cb4[3].xyzx
add r2.xyz, r0.xyzx, -cb1[4].xyzx
add r0.xyz, r0.xyzx, -cb0[8].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.z, r0.w
mad r3.xyz, -r0.xyzx, r1.zzzz, -r2.xyzx
mul r4.xyz, r0.xyzx, r1.zzzz
sample r5.xyzw, r0.xyzx, t2.xyzw, s2
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r3.xyzx
sample r3.xyzw, r1.xyxx, t5.xyzw, s5
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r1.z, r3.xyzx, r3.xyzx
rsq r1.z, r1.z
mul r3.xyz, r1.zzzz, r3.xyzx
dp3 r1.z, r3.xyzx, r0.xyzx
dp3 r0.x, -r4.xyzx, r0.xyzx
dp3 r0.y, r3.xyzx, -r4.xyzx
dp3 r0.z, r3.xyzx, -r2.xyzx
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
max r1.z, r1.z, l(0.000000)
log r1.z, r1.z
sample r2.xyzw, r1.xyxx, t4.xyzw, s4
sample r3.xyzw, r1.xyxx, t3.xyzw, s3
add r4.xyzw, -r2.wxyz, l(1.000000, 1.000000, 1.000000, 1.000000)
add r1.x, -r4.x, l(1.000000)
mad r1.x, r1.x, l(0.968000), l(0.030000)
log r1.x, r1.x
div r1.x, l(10.000000), r1.x
mul r1.y, r1.x, r1.x
mad r1.x, r1.x, r1.x, l(1.000000)
mul r1.x, r1.x, cb0[17].y
mul r1.y, r1.z, r1.y
exp r1.y, r1.y
mul r1.x, r1.x, r1.y
mul r1.y, r4.x, r4.x
mul r1.z, r1.y, cb0[17].w
mad r1.y, -r1.y, cb0[17].w, l(1.000000)
mad r1.w, r0.z, r1.y, r1.z
mad r1.y, r0.y, r1.y, r1.z
mad r1.y, r1.y, r1.w, l(0.000100)
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mul r1.x, r1.x, r1.y
mul r1.x, r0.y, r1.x
mul r1.x, r1.x, cb0[17].x
max r1.x, r1.x, l(0.000000)
sqrt r1.y, r0.w
mul r0.w, r0.w, cb0[8].w
sample r6.xyzw, r0.wwww, t1.xyzw, s1
mul r0.w, r1.y, cb2[1].w
mul r0.w, r0.w, l(0.970000)
lt r0.w, r5.x, r0.w
movc r0.w, r0.w, cb3[24].x, l(1.000000)
mul r0.w, r0.w, r6.x
mul r1.yzw, r0.wwww, cb0[9].xxyz
mul r5.xyz, r1.yzwy, r1.xxxx
add r0.zw, -r0.zzzx, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r0.x, r0.x, r0.x
dp2 r0.x, r0.xxxx, r4.xxxx
add r0.x, r0.x, l(-0.500000)
mul r1.x, r0.w, r0.w
mul r1.x, r1.x, r1.x
mul r0.w, r0.w, r1.x
mad r2.xyz, r4.yzwy, r0.wwww, r2.xyzx
mul r2.xyz, r2.xyzx, r5.xyzx
mul r0.w, r0.z, r0.z
mul r0.w, r0.w, r0.w
mul r0.z, r0.z, r0.w
mad r0.z, r0.x, r0.z, l(1.000000)
add r0.w, -r0.y, l(1.000000)
mul r1.x, r0.w, r0.w
mul r1.x, r1.x, r1.x
mul r0.w, r0.w, r1.x
mad r0.x, r0.x, r0.w, l(1.000000)
mul r0.x, r0.z, r0.x
mul r0.x, r0.y, r0.x
mul r0.xyz, r0.xxxx, r1.yzwy
mad o0.xyz, r3.xyzx, r0.xyzx, r2.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb4
// {
//
//   float4 cb4[4];                     // Offset:    0 Size:    64
//
// }
//
// cbuffer cb3
// {
//
//   float4 cb3[25];                    // Offset:    0 Size:   400
//
// }
//
// cbuffer cb2
// {
//
//   float4 cb2[2];                     // Offset:    0 Size:    32
//
// }
//
// cbuffer cb1
// {
//
//   float4 cb1[8];                     // Offset:    0 Size:   128
//
// }
//
// cbuffer cb0
// {
//
//   float4 cb0[18];                    // Offset:    0 Size:   288
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s0_s                              sampler      NA          NA    0        1
// s1_s                              sampler      NA          NA    1        1
// s2_s                              sampler      NA          NA    2        1
// s3_s                              sampler      NA          NA    3        1
// s4_s                              sampler      NA          NA    4        1
// s5_s                              sampler      NA          NA    5        1
// t0                                texture  float4          2d    0        1
// t1                                texture  float4          2d    1        1
// t2                                texture  float4        cube    2        1
// t3                                texture  float4          2d    3        1
// t4                                texture  float4          2d    4        1
// t5                                texture  float4          2d    5        1
// cb0                               cbuffer      NA          NA    0        1
// cb1                               cbuffer      NA          NA    1        1
// cb2                               cbuffer      NA          NA    2        1
// cb3                               cbuffer      NA          NA    3        1
// cb4                               cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb4[4], immediateIndexed
dcl_constantbuffer cb3[25], immediateIndexed
dcl_constantbuffer cb2[2], immediateIndexed
dcl_constantbuffer cb1[8], immediateIndexed
dcl_constantbuffer cb0[18], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 8
div r0.x, cb1[5].z, v2.z
mul r0.xyz, r0.xxxx, v2.xyzx
div r1.xy, v1.xyxx, v1.wwww
sample r2.xyzw, r1.xyxx, t0.xyzw, s0
mad r0.w, cb1[7].x, r2.x, cb1[7].y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r2.xyz, r0.yyyy, cb4[1].xyzx
mad r0.xyw, cb4[0].xyxz, r0.xxxx, r2.xyxz
mad r0.xyz, cb4[2].xyzx, r0.zzzz, r0.xywx
add r0.xyz, r0.xyzx, cb4[3].xyzx
add r2.xyz, r0.xyzx, -cb1[4].xyzx
add r0.xyz, r0.xyzx, -cb0[8].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.z, r0.w
mad r3.xyz, -r0.xyzx, r1.zzzz, -r2.xyzx
mul r4.xyz, r0.xyzx, r1.zzzz
sample r5.xyzw, r0.xyzx, t2.xyzw, s2
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r3.xyzx
sample r3.xyzw, r1.xyxx, t5.xyzw, s5
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r1.z, r3.xyzx, r3.xyzx
rsq r1.z, r1.z
mul r3.xyz, r1.zzzz, r3.xyzx
dp3 r1.z, r3.xyzx, r0.xyzx
dp3 r0.x, -r4.xyzx, r0.xyzx
dp3 r0.z, r3.xyzx, -r4.xyzx
dp3 r0.y, r3.xyzx, -r2.xyzx
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
max r1.z, r1.z, l(0.000000)
log r1.z, r1.z
sample r2.xyzw, r1.xyxx, t4.xyzw, s4
sample r3.xyzw, r1.xyxx, t3.xyzw, s3
add r4.xyzw, -r2.wxyz, l(1.000000, 1.000000, 1.000000, 1.000000)
add r1.x, -r4.x, l(1.000000)
mad r1.x, r1.x, l(0.968000), l(0.030000)
log r1.x, r1.x
div r1.x, l(10.000000), r1.x
mul r1.y, r1.x, r1.x
mad r1.x, r1.x, r1.x, l(1.000000)
mul r1.x, r1.x, cb0[17].y
mul r1.y, r1.z, r1.y
exp r1.y, r1.y
mul r1.x, r1.x, r1.y
mul r1.y, r4.x, r4.x
mul r1.z, r1.y, cb0[17].w
mad r1.y, -r1.y, cb0[17].w, l(1.000000)
mad r1.yz, r0.yyzy, r1.yyyy, r1.zzzz
mad r1.y, r1.z, r1.y, l(0.000100)
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mul r1.x, r1.x, r1.y
mul r1.x, r0.z, r1.x
mul r1.x, r1.x, cb0[17].x
max r1.x, r1.x, l(0.000000)
sqrt r1.y, r0.w
mul r0.w, r0.w, cb0[8].w
sample r6.xyzw, r0.wwww, t1.xyzw, s1
mul r0.w, r1.y, cb2[1].w
mul r0.w, r0.w, l(0.970000)
lt r0.w, r5.x, r0.w
movc r0.w, r0.w, cb3[24].x, l(1.000000)
mul r0.w, r0.w, r6.x
mul r1.yzw, r0.wwww, cb0[9].xxyz
mul r5.xyz, r1.yzwy, r1.xxxx
add r6.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r7.xyz, r6.xyzx, r6.xyzx
mul r7.xyz, r7.xyzx, r7.xyzx
mul r6.xyz, r6.xyzx, r7.xyzx
mad r2.xyz, r4.yzwy, r6.xxxx, r2.xyzx
mul r2.xyz, r2.xyzx, r5.xyzx
mul r0.x, r0.x, r0.x
dp2 r0.x, r0.xxxx, r4.xxxx
add r0.x, r0.x, l(-0.500000)
mad r0.xy, r0.xxxx, r6.yzyy, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r0.x, r0.x, r0.y
mul r0.x, r0.z, r0.x
mul r0.xyz, r0.xxxx, r1.yzwy
mad o0.xyz, r3.xyzx, r0.xyzx, r2.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 85 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
