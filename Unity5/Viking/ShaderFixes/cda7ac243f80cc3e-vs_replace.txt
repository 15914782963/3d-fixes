cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[8];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[9];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : COLOR0,
  out float2 o2 : TEXCOORD0,
  out float p2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cb2[5].z * v0.y;
  r0.x = cb2[4].z * v0.x + r0.x;
  r0.x = cb2[6].z * v0.z + r0.x;
  r0.x = cb2[7].z * v0.w + r0.x;
  r0.y = -cb0[8].x + -r0.x;
  o3.z = -r0.x;
  r0.x = saturate(r0.y / cb0[8].y);
  r0.x = v1.w * r0.x;
  r0.y = r0.x * r0.x;
  r0.y = r0.x * r0.y;
  r1.xyzw = cb2[1].xyzw * v0.yyyy;
  r1.xyzw = cb2[0].xyzw * v0.xxxx + r1.xyzw;
  r1.xyzw = cb2[2].xyzw * v0.zzzz + r1.xyzw;
  r1.xyzw = cb2[3].xyzw * v0.wwww + r1.xyzw;
  r2.xyzw = v0.xyzw + -r1.xyzw;
  r2.xyzw = r0.yyyy * r2.xyzw + r1.xyzw;
  r0.y = r0.x < 9.999999776e-003;
  o1.w = r0.x;
  r0.xyzw = r0.yyyy ? float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000) : r2.xyzw;
  o0.xyzw = r0.xyzw;
  r0.x = cb3[1].y * r0.z;
  p2.x = exp2(-r0.x);
  o1.xyz = v1.xyz;
  o2.xy = v2.xy * cb0[7].xy + cb0[7].zw;
  r0.x = cb1[5].x * r1.y;
  r0.w = 5.000000000e-001 * r0.x;
  r0.xz = float2(5.000000e-001,5.000000e-001) * r1.xw;
  o3.w = r1.w;
  o3.xy = r0.xw + r0.zz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1     z         2     NONE   float     z 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[8], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o2.z
dcl_output o3.xyzw
dcl_temps 3
mul r0.x, v0.y, cb2[5].z
mad r0.x, cb2[4].z, v0.x, r0.x
mad r0.x, cb2[6].z, v0.z, r0.x
mad r0.x, cb2[7].z, v0.w, r0.x
add r0.y, -r0.x, -cb0[8].x
mov o3.z, -r0.x
div_sat r0.x, r0.y, cb0[8].y
mul r0.x, r0.x, v1.w
mul r0.y, r0.x, r0.x
mul r0.y, r0.y, r0.x
mul r1.xyzw, v0.yyyy, cb2[1].xyzw
mad r1.xyzw, cb2[0].xyzw, v0.xxxx, r1.xyzw
mad r1.xyzw, cb2[2].xyzw, v0.zzzz, r1.xyzw
mad r1.xyzw, cb2[3].xyzw, v0.wwww, r1.xyzw
add r2.xyzw, -r1.xyzw, v0.xyzw
mad r2.xyzw, r0.yyyy, r2.xyzw, r1.xyzw
lt r0.y, r0.x, l(0.010000)
mov o1.w, r0.x
movc r0.xyzw, r0.yyyy, l(0,0,0,0), r2.xyzw
mov o0.xyzw, r0.xyzw
mul r0.x, r0.z, cb3[1].y
exp o2.z, -r0.x
mov o1.xyz, v1.xyzx
mad o2.xy, v2.xyxx, cb0[7].xyxx, cb0[7].zwzz
mul r0.x, r1.y, cb1[5].x
mul r0.w, r0.x, l(0.500000)
mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
mov o3.w, r1.w
add o3.xy, r0.zzzz, r0.xwxx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb3
// {
//
//   float4 cb3[2];                     // Offset:    0 Size:    32
//
// }
//
// cbuffer cb2
// {
//
//   float4 cb2[8];                     // Offset:    0 Size:   128
//
// }
//
// cbuffer cb1
// {
//
//   float4 cb1[6];                     // Offset:    0 Size:    96
//
// }
//
// cbuffer cb0
// {
//
//   float4 cb0[9];                     // Offset:    0 Size:   144
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cb0                               cbuffer      NA          NA    0        1
// cb1                               cbuffer      NA          NA    1        1
// cb2                               cbuffer      NA          NA    2        1
// cb3                               cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1     z         2     NONE   float     z 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb2[8], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o2.z
dcl_output o3.xyzw
dcl_temps 3
mul r0.x, v0.y, cb2[5].z
mad r0.x, cb2[4].z, v0.x, r0.x
mad r0.x, cb2[6].z, v0.z, r0.x
mad r0.x, cb2[7].z, v0.w, r0.x
add r0.y, -r0.x, -cb0[8].x
mov o3.z, -r0.x
div_sat r0.x, r0.y, cb0[8].y
mul r0.x, r0.x, v1.w
mul r0.y, r0.x, r0.x
mul r0.y, r0.y, r0.x
mul r1.xyzw, v0.yyyy, cb2[1].xyzw
mad r1.xyzw, cb2[0].xyzw, v0.xxxx, r1.xyzw
mad r1.xyzw, cb2[2].xyzw, v0.zzzz, r1.xyzw
mad r1.xyzw, cb2[3].xyzw, v0.wwww, r1.xyzw
add r2.xyzw, -r1.xyzw, v0.xyzw
mad r2.xyzw, r0.yyyy, r2.xyzw, r1.xyzw
lt r0.y, r0.x, l(0.010000)
mov o1.w, r0.x
movc r0.xyzw, r0.yyyy, l(0,0,0,0), r2.xyzw
mov o0.xyzw, r0.xyzw
mul r0.x, r0.z, cb3[1].y
exp o2.z, -r0.x
mov o1.xyz, v1.xyzx
mad o2.xy, v2.xyxx, cb0[7].xyxx, cb0[7].zwzz
mul r0.x, r1.y, cb1[5].x
mul r0.z, r0.x, l(0.500000)
mul r0.xy, r1.xwxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o3.w, r1.w
add o3.xy, r0.yyyy, r0.xzxx
ret 
// Approximately 30 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
