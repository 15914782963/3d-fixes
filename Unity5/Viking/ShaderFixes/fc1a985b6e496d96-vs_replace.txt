// 3DMigoto: fc1a985b6e496d96 | Matched 3 variants of 3 shaders: Hidden/Internal-Flare, Hidden/Internal-GUITexture, Hidden/Internal-Halo
// 
//    Unity headers extracted from Internal-Flare.shader
//    Shader "Hidden/Internal-Flare" {
//      SubShader 1/1 {
//        Tags { "RenderType"="Overlay" }
//        Pass 1/1 {
//          Tags { "RenderType"="Overlay" }
//          ZTest Always
//          ZWrite Off
//          Cull Off
//          Blend One One
//          ColorMask RGB
//          GpuProgramID 33804
//          Program "vp" {
//            SubProgram "d3d11 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              ConstBuffer "$Globals" 112
//              Vector 96 [_FlareTexture_ST]
//              ConstBuffer "UnityPerDraw" 336
//              Matrix 0 [glstate_matrix_mvp]
//              BindCB "$Globals" 0
//              BindCB "UnityPerDraw" 1
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Internal-GUITexture.shader
//    Shader "Hidden/Internal-GUITexture" {
//      Properties {
//       _MainTex ("Texture", any) = "" { }
//      }
//      Fallback Off
//      SubShader 1/1 {
//        Tags { "RenderType"="Overlay" "ForceSupported"="True" }
//        Pass 1/1 {
//          Tags { "RenderType"="Overlay" "ForceSupported"="True" }
//          ZTest Always
//          ZWrite Off
//          Cull Off
//          Blend SrcAlpha OneMinusSrcAlpha
//          GpuProgramID 60335
//          Program "vp" {
//            SubProgram "d3d11 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              ConstBuffer "$Globals" 112
//              Vector 96 [_MainTex_ST]
//              ConstBuffer "UnityPerDraw" 336
//              Matrix 0 [glstate_matrix_mvp]
//              BindCB "$Globals" 0
//              BindCB "UnityPerDraw" 1
//            }
//          }
//        }
//      }
//    }
// 
//    Unity headers extracted from Internal-Halo.shader
//    Shader "Hidden/Internal-Halo" {
//      SubShader 1/1 {
//        Tags { "RenderType"="Overlay" }
//        Pass 1/1 {
//          Tags { "RenderType"="Overlay" }
//          ZWrite Off
//          Cull Off
//          Blend OneMinusDstColor One
//          AlphaTest Greater 0
//          ColorMask RGB
//          GpuProgramID 31767
//          Program "vp" {
//            SubProgram "d3d11 " {
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              ConstBuffer "$Globals" 112
//              Vector 96 [_HaloFalloff_ST]
//              ConstBuffer "UnityPerDraw" 336
//              Matrix 0 [glstate_matrix_mvp]
//              BindCB "$Globals" 0
//              BindCB "UnityPerDraw" 1
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model vs_4_0

cbuffer cb1 : register(b1)
{
  float4 cb1[4];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[7];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : COLOR0,
  out float2 o2 : TEXCOORD0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb1[1].xyzw * v0.yyyy;
  r0.xyzw = cb1[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb1[2].xyzw * v0.zzzz + r0.xyzw;
  o0.xyzw = cb1[3].xyzw * v0.wwww + r0.xyzw;
  o1.xyzw = v1.xyzw;
  o2.xy = v2.xy * cb0[6].xy + cb0[6].zw;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x; float convergence = stereo.y;
float depth = o0.w;

// The driver inconsistently adjusts this effect, suggesting that it has the
// depth buffer disabled and something else is confusing the driver's
// heuristics. The depth value from Unity seems reasonable (at least when used
// for flares - need to test how this looks when used for GUI elements), so
// we want to remove the driver's inconsistent correction and apply our own
// using the depth value from Unity (or alternatively an infinity adjustment).

// Firstly, apply our correction (we could do this after removing the drivers
// correction, but we would have to remember to account for the difference in
// the perspective divide, so the maths is slightly simpler to do this first):

// Only perform this adjustment if the depth is not 1, as that usually
// signifies a UI element and is not meaningful.

if (depth != 1)
	o0.x += stereo.x * (depth - convergence);

// Now remove the driver's correction. Normally we would subtract the stereo
// correction to achieve this, but since the correction is being applied
// inconsistently we need to take a different approach. We normalise the output
// position such that the depth will match convergence - that way the effect
// will not be moved by the driver regardless of what it's heuristics decide.

// Only perform this normalisation if convergence is not zero, otherwise the
// effect will be disabled in 2D.

if (convergence)
	o0 = o0 / depth * convergence;

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_4_0
dcl_constantbuffer cb0[7], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 1
mul r0.xyzw, v0.yyyy, cb1[1].xyzw
mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
mad o0.xyzw, cb1[3].xyzw, v0.wwww, r0.xyzw
mov o1.xyzw, v1.xyzw
mad o2.xy, v2.xyxx, cb0[6].xyxx, cb0[6].zwzz
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb1
// {
//
//   float4 cb1[4];                     // Offset:    0 Size:    64
//
// }
//
// cbuffer cb0
// {
//
//   float4 cb0[7];                     // Offset:    0 Size:   112
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cb0                               cbuffer      NA          NA    0        1
// cb1                               cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_4_0
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb0[7], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 1
mul r0.xyzw, v0.yyyy, cb1[1].xyzw
mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
mad o0.xyzw, cb1[3].xyzw, v0.wwww, r0.xyzw
mov o1.xyzw, v1.xyzw
mad o2.xy, v2.xyxx, cb0[6].xyxx, cb0[6].zwzz
ret 
// Approximately 7 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
