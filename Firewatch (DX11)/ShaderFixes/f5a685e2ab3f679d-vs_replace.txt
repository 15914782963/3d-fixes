// hlsltool.py -I ../.. --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe f5a685e2ab3f679d-vs_replace.txt
// 3DMigoto: f5a685e2ab3f679d | Unity headers extracted from Marmoset Bumped Diffuse IBL Swaying.shader
// Shader "Marmoset/Bumped Diffuse IBL Swaying" {
//   Properties {
//    _Color ("Diffuse Color", Color) = (1,1,1,1)
//    _MainTex ("Diffuse(RGB) Alpha(A)", 2D) = "white" { }
//    _BumpMap ("Normalmap", 2D) = "bump" { }
//   }
//   SubShader 1/1 {
//     LOD 350
//     Tags { "QUEUE"="Geometry" "RenderType"="Opaque" }
//     Pass 1/6 {
//       Name "FORWARD"
//       Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//       GpuProgramID 44786
//       Program "vp" {
//         SubProgram "d3d11 " {
//           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "MARMO_SKY_BLEND_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
//           Bind "vertex" Vertex
//           Bind "color" Color
//           Bind "normal" Normal
//           Bind "texcoord" TexCoord0
//           Bind "tangent" TexCoord4
//           ConstBuffer "$Globals" 592
//           Float 144 [_SwayingRandomnessOffset]
//           Vector 560 [_WindDirectionFrequencyIntensity]
//           ConstBuffer "UnityPerCamera" 144
//           Vector 0 [_Time]
//           Vector 80 [_ProjectionParams]
//           ConstBuffer "UnityLighting" 720
//           Vector 32 [unity_4LightPosX0]
//           Vector 48 [unity_4LightPosY0]
//           Vector 64 [unity_4LightPosZ0]
//           Vector 80 [unity_4LightAtten0]
//           Vector 96 [unity_LightColor0]
//           Vector 112 [unity_LightColor1]
//           Vector 128 [unity_LightColor2]
//           Vector 144 [unity_LightColor3]
//           Vector 160 [unity_LightColor4]
//           Vector 176 [unity_LightColor5]
//           Vector 192 [unity_LightColor6]
//           Vector 208 [unity_LightColor7]
//           Vector 608 [unity_SHAr]
//           Vector 624 [unity_SHAg]
//           Vector 640 [unity_SHAb]
//           Vector 656 [unity_SHBr]
//           Vector 672 [unity_SHBg]
//           Vector 688 [unity_SHBb]
//           Vector 704 [unity_SHC]
//           ConstBuffer "UnityPerDraw" 352
//           Matrix 0 [glstate_matrix_mvp]
//           Matrix 192 [_Object2World]
//           Matrix 256 [_World2Object]
//           Vector 336 [unity_WorldTransformParams]
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityLighting" 2
//           BindCB "UnityPerDraw" 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model vs_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:30:14 2016
cbuffer cb3 : register(b3)
{
  float4 cb3[22];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[45];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[36];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD7)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cb3[13].xz * v0.yy;
  r0.xy = cb3[12].xz * v0.xx + r0.xy;
  r0.xy = cb3[14].xz * v0.zz + r0.xy;
  r0.xy = cb3[15].xz * v0.ww + r0.xy;
  r0.x = dot(r0.xy, float2(1,1));
  r0.x = cb0[9].x * r0.x;
  r0.x = cb1[0].y * cb0[35].z + r0.x;
  r0.x = sin(r0.x);
  r0.xz = cb0[35].xy * r0.xx;
  r0.y = 0;
  r0.w = cb0[35].w * v7.x;
  r0.xyz = r0.xyz * r0.www + v0.xyz;
  r1.xyzw = cb3[1].xyzw * r0.yyyy;
  r1.xyzw = cb3[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb3[2].xyzw * r0.zzzz + r1.xyzw;
  r1.xyzw = cb3[3].xyzw * v0.wwww + r1.xyzw;
  o0.xyzw = r1.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe f5a685e2ab3f679d-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r1.w != 1.0) { r1.x += stereo.x * (r1.w - stereo.y); }

  r2.xyz = cb3[13].xyz * r0.yyy;
  r0.xyw = cb3[12].xyz * r0.xxx + r2.xyz;
  r0.xyz = cb3[14].xyz * r0.zzz + r0.xyw;
  r0.xyz = cb3[15].xyz * v0.www + r0.xyz;
  o1.w = r0.x;
  r2.xyz = cb3[13].yzx * v1.yyy;
  r2.xyz = cb3[12].yzx * v1.xxx + r2.xyz;
  r2.xyz = cb3[14].yzx * v1.zzz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  o1.x = r2.z;
  r0.w = cb3[21].w * v1.w;
  r3.x = cb3[16].x * v2.x;
  r3.y = cb3[17].x * v2.x;
  r3.z = cb3[18].x * v2.x;
  r4.x = cb3[16].y * v2.y;
  r4.y = cb3[17].y * v2.y;
  r4.z = cb3[18].y * v2.y;
  r3.xyz = r4.xyz + r3.xyz;
  r4.x = cb3[16].z * v2.z;
  r4.y = cb3[17].z * v2.z;
  r4.z = cb3[18].z * v2.z;
  r3.xyz = r4.xyz + r3.xyz;
  r2.w = dot(r3.xyz, r3.xyz);
  r2.w = rsqrt(r2.w);
  r3.xyz = r3.xyz * r2.www;
  r4.xyz = r3.zxy * r2.xyz;
  r4.xyz = r3.yzx * r2.yzx + -r4.xyz;
  r4.xyz = r4.xyz * r0.www;
  o1.y = r4.x;
  o1.z = r3.x;
  o2.x = r2.x;
  o3.x = r2.y;
  o2.w = r0.y;
  o2.y = r4.y;
  o3.y = r4.z;
  o2.z = r3.y;
  o3.w = r0.z;
  o3.z = r3.z;
  o4.xy = v3.xy;
  o4.zw = float2(0,0);
  r0.w = r3.y * r3.y;
  r0.w = r3.x * r3.x + -r0.w;
  r2.xyzw = r3.xyzz * r3.yzzx;
  r4.x = dot(cb2[41].xyzw, r2.xyzw);
  r4.y = dot(cb2[42].xyzw, r2.xyzw);
  r4.z = dot(cb2[43].xyzw, r2.xyzw);
  r2.xyz = cb2[44].xyz * r0.www + r4.xyz;
  r3.w = 1;
  r4.x = dot(cb2[38].xyzw, r3.xyzw);
  r4.y = dot(cb2[39].xyzw, r3.xyzw);
  r4.z = dot(cb2[40].xyzw, r3.xyzw);
  r2.xyz = r4.xyz + r2.xyz;
  r4.xyzw = cb2[3].xyzw + -r0.yyyy;
  r5.xyzw = r4.xyzw * r3.yyyy;
  r4.xyzw = r4.xyzw * r4.xyzw;
  r6.xyzw = cb2[2].xyzw + -r0.xxxx;
  r0.xyzw = cb2[4].xyzw + -r0.zzzz;
  r5.xyzw = r6.xyzw * r3.xxxx + r5.xyzw;
  r4.xyzw = r6.xyzw * r6.xyzw + r4.xyzw;
  r4.xyzw = r0.xyzw * r0.xyzw + r4.xyzw;
  r0.xyzw = r0.xyzw * r3.zzzz + r5.xyzw;
  r3.xyzw = rsqrt(r4.xyzw);
  r4.xyzw = r4.xyzw * cb2[5].xyzw + float4(1,1,1,1);
  r4.xyzw = float4(1,1,1,1) / r4.xyzw;
  r0.xyzw = r3.xyzw * r0.xyzw;
  r0.xyzw = max(float4(0,0,0,0), r0.xyzw);
  r0.xyzw = r0.xyzw * r4.xyzw;
  r3.xyz = cb2[7].xyz * r0.yyy;
  r3.xyz = cb2[6].xyz * r0.xxx + r3.xyz;
  r0.xyz = cb2[8].xyz * r0.zzz + r3.xyz;
  r0.xyz = cb2[9].xyz * r0.www + r0.xyz;
  o5.xyz = r2.xyz + r0.xyz;
  r0.x = cb1[5].x * r1.y;
  r0.w = 0.5 * r0.x;
  r0.xz = float2(0.5,0.5) * r1.xw;
  o6.zw = r1.zw;
  o6.xy = r0.xw + r0.zz;
  o7.xyzw = float4(0,0,0,0);
  return;
}

/****************************** COMPILE WARNINGS ******************************
C:\Steam\SteamApps\common\Firewatch\ShaderFixes\f5a685e2ab3f679d-vs_replace.txt(114,14-15): warning X3578: Output value 'o5' is not completely initialized

****************************** COMPILE WARNINGS ******************************/
