// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 6316e1cbaff8ab9d-ps_replace.txt
// 3DMigoto: 6316e1cbaff8ab9d | Unity headers extracted from Standard-AddPass.shader
// Shader "Hidden/TerrainEngine/Splatmap/Standard-AddPass" {
//   Properties {
//   [HideInInspector]  _Control ("Control (RGBA)", 2D) = "red" { }
//   [HideInInspector]  _Splat3 ("Layer 3 (A)", 2D) = "white" { }
//   [HideInInspector]  _Splat2 ("Layer 2 (B)", 2D) = "white" { }
//   [HideInInspector]  _Splat1 ("Layer 1 (G)", 2D) = "white" { }
//   [HideInInspector]  _Splat0 ("Layer 0 (R)", 2D) = "white" { }
//   [HideInInspector]  _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
//   [HideInInspector]  _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
//   [HideInInspector]  _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
//   [HideInInspector]  _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
//   [HideInInspector] [Gamma]  _Metallic0 ("Metallic 0", Range(0,1)) = 0
//   [HideInInspector] [Gamma]  _Metallic1 ("Metallic 1", Range(0,1)) = 0
//   [HideInInspector] [Gamma]  _Metallic2 ("Metallic 2", Range(0,1)) = 0
//   [HideInInspector] [Gamma]  _Metallic3 ("Metallic 3", Range(0,1)) = 0
//   [HideInInspector]  _Smoothness0 ("Smoothness 0", Range(0,1)) = 1
//   [HideInInspector]  _Smoothness1 ("Smoothness 1", Range(0,1)) = 1
//   [HideInInspector]  _Smoothness2 ("Smoothness 2", Range(0,1)) = 1
//   [HideInInspector]  _Smoothness3 ("Smoothness 3", Range(0,1)) = 1
//   }
//   Fallback "Hidden/TerrainEngine/Splatmap/Diffuse-AddPass"
//   SubShader 1/1 {
//     Tags { "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" "SplatCount"="4" }
//     Pass 2/3 {
//       Name "FORWARD"
//       Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "SplatCount"="4" }
//       ZWrite Off
//       Blend One One
//       GpuProgramID 84730
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "SHADOWS_OFF" }
//           SetTexture 0 [_Control] 2D 1
//           SetTexture 1 [_Splat0] 2D 2
//           SetTexture 2 [_Splat1] 2D 3
//           SetTexture 3 [_Splat2] 2D 4
//           SetTexture 4 [_Splat3] 2D 5
//           SetTexture 5 [_LightTexture0] 2D 0
//           ConstBuffer "$Globals" 320
//           Matrix 144 [_LightMatrix0]
//           Vector 32 [unity_ColorSpaceDielectricSpec]
//           Vector 96 [_LightColor0]
//           Vector 128 [unity_LightGammaCorrectionConsts]
//           Float 224 [_Metallic0]
//           Float 228 [_Metallic1]
//           Float 232 [_Metallic2]
//           Float 236 [_Metallic3]
//           Float 240 [_Smoothness0]
//           Float 244 [_Smoothness1]
//           Float 248 [_Smoothness2]
//           Float 252 [_Smoothness3]
//           ConstBuffer "UnityPerCamera" 144
//           Vector 64 [_WorldSpaceCameraPos] 3
//           ConstBuffer "UnityLighting" 720
//           Vector 0 [_WorldSpaceLightPos0]
//           ConstBuffer "UnityFog" 32
//           Vector 16 [unity_FogParams]
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityLighting" 2
//           BindCB "UnityFog" 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:34:56 2016
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[16];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float3 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 6316e1cbaff8ab9d-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = t0.Sample(s1_s, v5.xy).xyzw;
  r1.x = dot(r0.xyzw, float4(1,1,1,1));
  r1.yz = float2(-0.00389999989,0.00100000005) + r1.xx;
  r1.y = cmp(r1.y < 0);
  r0.xyzw = r0.xyzw / r1.zzzz;
  if (r1.y != 0) discard;
  r2.xyzw = t1.Sample(s2_s, v1.xy).xyzw;
  r2.xyzw = r2.xyzw * r0.xxxx;
  r2.w = cb0[15].x * r2.w;
  r3.xyzw = t2.Sample(s3_s, v1.zw).xyzw;
  r3.xyzw = r3.xyzw * r0.yyyy;
  r3.w = cb0[15].y * r3.w;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r3.xyzw = t3.Sample(s4_s, v2.xy).xyzw;
  r3.xyzw = r3.xyzw * r0.zzzz;
  r3.w = cb0[15].z * r3.w;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r3.xyzw = t4.Sample(s5_s, v2.zw).xyzw;
  r3.xyzw = r3.xyzw * r0.wwww;
  r0.x = dot(r0.xyzw, cb0[14].xyzw);
  r3.w = cb0[15].w * r3.w;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r0.y = -r0.x * cb0[2].w + cb0[2].w;
  r0.yzw = r2.xyz * r0.yyy;
  r1.y = 1 + -r2.w;
  r2.xyz = -cb0[2].xyz + r2.xyz;
  r2.xyz = r0.xxx * r2.xyz + cb0[2].xyz;
  r0.x = 1 + -r1.y;
  r0.x = r0.x * 0.967999995 + 0.0299999993;
  r0.x = log2(r0.x);
  r0.x = 10 / r0.x;
  r1.z = r0.x * r0.x + 1;
  r0.x = r0.x * r0.x;
  r1.z = cb0[8].y * r1.z;
  r3.xyz = _WorldSpaceCameraPos.xyz + -v4.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r4.xyz = r3.xyz * r1.www + cb2[0].xyz;
  r3.xyz = r3.xyz * r1.www;
  r1.w = dot(r4.xyz, r4.xyz);
  r1.w = max(0.00100000005, r1.w);
  r1.w = rsqrt(r1.w);
  r4.xyz = r4.xyz * r1.www;
  r1.w = dot(v3.xyz, v3.xyz);
  r1.w = rsqrt(r1.w);
  r5.xyz = v3.xyz * r1.www;
  r1.w = dot(r5.xyz, r4.xyz);
  r2.w = dot(cb2[0].xyz, r4.xyz);
  r2.w = max(0, r2.w);
  r3.x = dot(r5.xyz, r3.xyz);
  r3.x = max(0, r3.x);
  r1.w = max(0, r1.w);
  r1.w = log2(r1.w);
  r0.x = r1.w * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r0.x * r1.z;
  r1.z = r1.y * r1.y;
  r1.w = cb0[8].w * r1.z;
  r1.z = -r1.z * cb0[8].w + 1;
  r3.y = r3.x * r1.z + r1.w;
  r3.x = 1 + -r3.x;
  r3.z = dot(v3.xyz, cb2[0].xyz);
  r3.z = max(0, r3.z);
  r1.z = r3.z * r1.z + r1.w;
  r1.z = r1.z * r3.y + 9.99999975e-005;
  r1.z = 1 / r1.z;
  r0.x = r1.z * r0.x;
  r0.x = r0.x * r3.z;
  r0.x = cb0[8].x * r0.x;
  r0.x = max(0, r0.x);
  r1.zw = cb0[10].xy * v4.yy;
  r1.zw = cb0[9].xy * v4.xx + r1.zw;
  r1.zw = cb0[11].xy * v4.zz + r1.zw;
  r1.zw = cb0[12].xy + r1.zw;
  r4.xyzw = t5.Sample(s0_s, r1.zw).xyzw;
  r4.xyz = cb0[6].xyz * r4.www;
  r5.xyz = r4.xyz * r0.xxx;
  r0.x = 1 + -r2.w;
  r1.z = r2.w * r2.w;
  r1.y = dot(r1.zz, r1.yy);
  r1.y = -0.5 + r1.y;
  r1.z = r0.x * r0.x;
  r1.z = r1.z * r1.z;
  r0.x = r1.z * r0.x;
  r6.xyz = float3(1,1,1) + -r2.xyz;
  r2.xyz = r6.xyz * r0.xxx + r2.xyz;
  r2.xyz = r5.xyz * r2.xyz;
  r0.x = r3.x * r3.x;
  r0.x = r0.x * r0.x;
  r0.x = r0.x * r3.x;
  r0.x = r1.y * r0.x + 1;
  r1.z = 1 + -r3.z;
  r1.w = r1.z * r1.z;
  r1.w = r1.w * r1.w;
  r1.z = r1.w * r1.z;
  r1.y = r1.y * r1.z + 1;
  r0.x = r1.y * r0.x;
  r0.x = r0.x * r3.z;
  r1.yzw = r4.xyz * r0.xxx;
  r0.xyz = r0.yzw * r1.yzw + r2.xyz;
  r0.xyz = r0.xyz * r1.xxx;
  r0.w = cb3[1].x * v5.z;
  r0.w = -r0.w * r0.w;
  r0.w = exp2(r0.w);
  o0.xyz = r0.www * r0.xyz;
  o0.w = 1;
  return;
}
