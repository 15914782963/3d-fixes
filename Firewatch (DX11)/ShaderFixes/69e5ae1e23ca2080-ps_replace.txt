// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 69e5ae1e23ca2080-ps_replace.txt
// 3DMigoto: 69e5ae1e23ca2080 | Unity headers extracted from Marmoset Water IBL.shader
// Shader "Marmoset/Transparent/Marmo Water IBL" {
//   Properties {
//    _Wave ("[Water Params] Wave Normal Map", 2D) = "wave" { }
//    _NoiseMap ("[Water Params] NoiseMap", 2D) = "noisemap" { }
//    _FlowDirectionSign ("[Water Params] Flow Direction", Vector) = (1,1,1,1)
//    _NormalMapIntensity ("[Water Params] Wave Intensity", Range(0.01,1)) = 0.25
//    _OpacityMultiplier ("[Water Params] Water Opacity Multiplier", Float) = 2.4
//    _WaterSpeed ("[Water Params] WaterSpeed", Float) = 0.05
//    _NoisePanningSpeed ("[Water Params][Noise] NoisePanningSpeed", Float) = 0.1
//    _StretchIntensity ("[Water Params][Noise] StretchIntensity", Float) = 0.25
//    _DirtOpacity ("[Water Params] Dirt Transparency", Range(0,1)) = 0.5
//    _DirtBrightness ("[Water Params] Dirt Brightness", Range(0,1)) = 1
//    _EdgeBlending ("[Water Params] Water to Geometry Edge Fade", Float) = 2
//    _FresnelWater ("[Water Params] Opacity to Reflection", Range(0,15)) = 2.15
//   [HideInInspector]  _Color ("Diffuse Color", Color) = (1,1,1,1)
//   [HideInInspector]  _SpecColor ("Specular Color", Color) = (1,1,1,1)
//   [HideInInspector]  _SpecInt ("Specular Intensity", Float) = 1
//   [HideInInspector]  _Shininess ("Specular Sharpness", Range(2,8)) = 8
//   [HideInInspector]  _SpecTex ("Specular(RGB) Gloss(A)", 2D) = "white" { }
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry+449" "IGNOREPROJECTOR"="true" }
//     GrabPass {
//       Name "BASE"
//       Tags { "LIGHTMODE"="Always" }
//      }
//     Pass 1/2 {
//       Name "FORWARD"
//       Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry+449" "IGNOREPROJECTOR"="true" }
//       ZWrite Off
//       Blend SrcAlpha OneMinusSrcAlpha
//       GpuProgramID 52105
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "LIGHTMAP_OFF" "MARMO_BOX_PROJECTION_OFF" "MARMO_SKY_BLEND_ON" "SHADOWS_OFF" }
//           SetTexture 0 [_NoiseMap] 2D 1
//           SetTexture 1 [_Wave] 2D 0
//           SetTexture 2 [_SpecCubeIBL] CUBE 4
//           SetTexture 3 [_SpecCubeIBL1] CUBE 5
//           SetTexture 4 [_CameraDepthTexture] 2D 3
//           SetTexture 5 [_GrabTexture] 2D 2
//           ConstBuffer "$Globals" 1040
//           Matrix 368 [_SkyMatrix]
//           Matrix 720 [_SkyMatrix1]
//           Float 192 [_NormalMapIntensity]
//           Float 196 [_OpacityMultiplier]
//           Float 200 [_WaterSpeed]
//           Float 208 [_StretchIntensity]
//           Float 212 [_FresnelWater]
//           Float 216 [_DirtOpacity]
//           Float 224 [_DirtBrightness]
//           Vector 240 [_FlowDirectionSign]
//           Vector 336 [_ExposureIBL]
//           Vector 544 [_SH0] 3
//           Vector 560 [_SH1] 3
//           Float 684 [_BlendWeightIBL]
//           Vector 688 [_ExposureIBL1]
//           ConstBuffer "UnityPerCamera" 144
//           Vector 0 [_Time]
//           Vector 64 [_WorldSpaceCameraPos] 3
//           Vector 112 [_ZBufferParams]
//           ConstBuffer "UnityFog" 32
//           Vector 0 [unity_FogColor]
//           Vector 16 [unity_FogParams]
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityFog" 2
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:35:29 2016
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

TextureCube<float4> t3 : register(t3);

TextureCube<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[2];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[48];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float3 v7 : TEXCOORD6,
  float w7 : TEXCOORD7,
  float4 v8 : TEXCOORD8,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 69e5ae1e23ca2080-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = t0.Sample(s1_s, v4.zw).xyzw;
  r0.x = cb0[13].x * r0.x;
  r0.x = cb1[0].y * cb0[12].z + r0.x;
  r0.y = 0.5 + r0.x;
  r1.xyzw = frac(r0.xxyy);
  r0.x = dot(v4.xy, v4.xy);
  r0.x = rsqrt(r0.x);
  r0.xyzw = v4.xyxy * r0.xxxx;
  r0.xyzw = cb0[15].xyxy * r0.xyzw;
  r2.xyzw = -r0.zwzw * float4(0.5,0.5,0.5,0.5) + v4.xyxy;
  r0.xyzw = r1.xyzw * r0.xyzw + r2.xyzw;
  r1.x = r1.y * 2 + -1;
  r2.xyzw = t1.Sample(s0_s, r0.zw).xyzw;
  r0.xyzw = t1.Sample(s0_s, r0.xy).xyzw;
  r0.xy = r0.wy * float2(2,2) + float2(-1,-1);
  r2.xy = r2.wy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r2.xy, r2.xy);
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r2.z = sqrt(r0.w);
  r0.w = dot(r0.xy, r0.xy);
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r0.z = sqrt(r0.w);
  r1.yzw = r2.xyz + -r0.xyz;
  r0.xyz = abs(r1.xxx) * r1.yzw + r0.xyz;
  r0.xy = cb0[12].xx * r0.xy;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = cmp(v5.w < 0);
  r0.xyz = r0.www ? -r0.xyz : r0.xyz;
  r1.y = dot(v2.xyz, r0.xyz);
  r1.x = dot(v1.xyz, r0.xyz);
  r1.z = dot(v3.xyz, r0.xyz);
  r0.xyz = _WorldSpaceCameraPos.xyz + -v5.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(-r0.xyz, r1.xyz);
  r0.w = r0.w + r0.w;
  r0.xyz = r1.xyz * -r0.www + -r0.xyz;
  r2.x = cb0[23].y * r0.y;
  r2.y = cb0[24].y * r0.y;
  r2.z = cb0[25].y * r0.y;
  r3.x = cb0[23].z * r0.z;
  r3.y = cb0[24].z * r0.z;
  r3.z = cb0[25].z * r0.z;
  r2.xyz = r3.xyz + r2.xyz;
  r3.x = cb0[23].x * r0.x;
  r3.y = cb0[24].x * r0.x;
  r3.z = cb0[25].x * r0.x;
  r2.xyz = r3.xyz + r2.xyz;
  r2.xyzw = t2.Sample(s4_s, r2.xyz).xyzw;
  r3.x = cb0[45].y * r0.y;
  r3.y = cb0[46].y * r0.y;
  r3.z = cb0[47].y * r0.y;
  r4.x = cb0[45].z * r0.z;
  r4.y = cb0[46].z * r0.z;
  r4.z = cb0[47].z * r0.z;
  r0.yzw = r4.xyz + r3.xyz;
  r3.x = cb0[45].x * r0.x;
  r3.y = cb0[46].x * r0.x;
  r3.z = cb0[47].x * r0.x;
  r0.xyz = r3.xyz + r0.yzw;
  r0.xyzw = t3.Sample(s5_s, r0.xyz).xyzw;
  r2.xyz = r2.xyz + -r0.xyz;
  r0.xyz = cb0[42].www * r2.xyz + r0.xyz;
  r2.xy = v6.xy / v6.zz;
  r3.xyzw = t4.Sample(s3_s, r2.xy).xyzw;
  r0.w = cb1[7].z * r3.x + cb1[7].w;
  r0.w = 1 / r0.w;
  r0.w = -v6.w + r0.w;
  r1.w = saturate(r0.w);
  r2.zw = r1.xz * r1.ww;
  r1.w = cb0[12].y * r1.w;
  r2.zw = float2(1.60000002,1.60000002) * r2.zw;
  r3.x = 1 / v6.w;
  r2.zw = r3.xx * r2.zw;
  r3.xy = float2(3.14159274,3.14159274) * r2.xy;
  r3.xy = sin(r3.xy);
  r3.xy = r3.xy * r2.zw;
  r3.z = 0.100000001 * r3.x;
  r2.zw = r3.zy + r2.xy;
  r3.xyzw = t4.Sample(s3_s, r2.zw).xyzw;
  r3.x = cb1[7].z * r3.x + cb1[7].w;
  r3.x = 1 / r3.x;
  r3.x = -v6.w + r3.x;
  r3.y = cmp(0 < r3.x);
  r0.w = r3.y ? r3.x : r0.w;
  r2.xy = r3.yy ? r2.zw : r2.xy;
  r2.xyzw = t5.Sample(s2_s, r2.xy).xyzw;
  r2.w = cb0[13].z + -r0.w;
  r0.w = 1 / -r0.w;
  r0.w = saturate(r2.w * r0.w);
  r2.w = r0.w * -2 + 3;
  r0.w = r0.w * r0.w;
  r0.w = r2.w * r0.w;
  r3.xyz = -cb0[35].xyz + cb0[34].xyz;
  r3.xyz = cb0[42].www * r3.xyz + cb0[35].xyz;
  r3.xyz = r3.xyz * cb0[14].xxx + -r2.xyz;
  r2.xyz = r0.www * r3.xyz + r2.xyz;
  r0.xyz = -r2.xyz + r0.xyz;
  r3.x = v1.w;
  r3.y = v2.w;
  r3.z = v3.w;
  r3.xyz = _WorldSpaceCameraPos.xyz + -r3.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r4.xyz = v2.xyz * r3.yyy;
  r3.xyw = v1.xyz * r3.xxx + r4.xyz;
  r3.xyz = v3.xyz * r3.zzz + r3.xyw;
  r4.x = dot(v1.xyz, r3.xyz);
  r4.y = dot(v2.xyz, r3.xyz);
  r4.z = dot(v3.xyz, r3.xyz);
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r4.xyz * r0.www;
  r0.w = dot(r3.xyz, r1.xyz);
  r0.w = r0.w * 0.5 + 0.5;
  r0.w = log2(r0.w);
  r0.w = cb0[13].y * r0.w;
  r0.w = exp2(r0.w);
  r0.w = 1 + -r0.w;
  r0.w = saturate(r0.w * r1.w);
  r0.xyz = saturate(r0.www * r0.xyz + r2.xyz);
  r0.w = -cb0[43].w + cb0[21].w;
  r0.w = cb0[42].w * r0.w + cb0[43].w;
  r0.xyz = r0.xyz * r0.www + -cb2[0].xyz;
  r0.w = cb2[1].x * w7.x;
  r0.w = -r0.w * r0.w;
  r0.w = exp2(r0.w);
  o0.xyz = r0.www * r0.xyz + cb2[0].xyz;
  o0.w = 1;
  return;
}
