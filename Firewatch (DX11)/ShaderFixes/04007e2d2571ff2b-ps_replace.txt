// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 04007e2d2571ff2b-ps_replace.txt
// 3DMigoto: 04007e2d2571ff2b | Unity headers extracted from Standard-Base.shader
// Shader "Hidden/TerrainEngine/Splatmap/Standard-Base" {
//   Properties {
//    _MainTex ("Base (RGB) Smoothness (A)", 2D) = "white" { }
//    _MetallicTex ("Metallic (R)", 2D) = "white" { }
//    _Color ("Main Color", Color) = (1,1,1,1)
//   }
//   Fallback "Diffuse"
//   SubShader 1/1 {
//     LOD 200
//     Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" }
//     Pass 2/3 {
//       Name "FORWARD"
//       Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//       ZWrite Off
//       Blend One One
//       GpuProgramID 119980
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "SHADOWS_OFF" "SPOT" }
//           SetTexture 0 [_MainTex] 2D 2
//           SetTexture 1 [_MetallicTex] 2D 3
//           SetTexture 2 [_LightTexture0] 2D 0
//           SetTexture 3 [_LightTextureB0] 2D 1
//           ConstBuffer "$Globals" 224
//           Matrix 144 [_LightMatrix0]
//           Vector 32 [unity_ColorSpaceDielectricSpec]
//           Vector 96 [_LightColor0]
//           Vector 128 [unity_LightGammaCorrectionConsts]
//           ConstBuffer "UnityPerCamera" 144
//           Vector 64 [_WorldSpaceCameraPos] 3
//           ConstBuffer "UnityLighting" 720
//           Vector 0 [_WorldSpaceLightPos0]
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityLighting" 2
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:29:50 2016
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[13];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 04007e2d2571ff2b-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = cb0[10].xyzw * v3.yyyy;
  r0.xyzw = cb0[9].xyzw * v3.xxxx + r0.xyzw;
  r0.xyzw = cb0[11].xyzw * v3.zzzz + r0.xyzw;
  r0.xyzw = cb0[12].xyzw + r0.xyzw;
  r1.xy = r0.xy / r0.ww;
  r1.xy = float2(0.5,0.5) + r1.xy;
  r1.xyzw = t2.Sample(s0_s, r1.xy).xyzw;
  r0.w = cmp(0 < r0.z);
  r0.x = dot(r0.xyz, r0.xyz);
  r2.xyzw = t3.Sample(s1_s, r0.xx).xyzw;
  r0.x = r0.w ? 1.000000 : 0;
  r0.x = r0.x * r1.w;
  r0.x = r0.x * r2.x;
  r0.xyz = cb0[6].xyz * r0.xxx;
  r1.xyz = _WorldSpaceCameraPos.xyz + -v3.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = cb2[0].xyz + -v3.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r2.xyz * r0.www + r1.xyz;
  r2.xyz = r2.xyz * r0.www;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.w = dot(v2.xyz, v2.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = v2.xyz * r0.www;
  r0.w = dot(r4.xyz, r3.xyz);
  r1.w = dot(r2.xyz, r3.xyz);
  r2.x = dot(v2.xyz, r2.xyz);
  r2.x = max(0, r2.x);
  r1.x = dot(r4.xyz, r1.xyz);
  r1.xw = max(float2(0,0), r1.xw);
  r0.w = max(0, r0.w);
  r0.w = log2(r0.w);
  r3.xyzw = t0.Sample(s2_s, v1.xy).xyzw;
  r1.y = 1 + -r3.w;
  r1.z = 1 + -r1.y;
  r1.z = r1.z * 0.967999995 + 0.0299999993;
  r1.z = log2(r1.z);
  r1.z = 10 / r1.z;
  r2.y = r1.z * r1.z;
  r1.z = r1.z * r1.z + 1;
  r1.z = cb0[8].y * r1.z;
  r0.w = r2.y * r0.w;
  r0.w = exp2(r0.w);
  r0.w = r0.w * r1.z;
  r1.z = r1.y * r1.y;
  r2.y = cb0[8].w * r1.z;
  r1.z = -r1.z * cb0[8].w + 1;
  r2.z = r1.x * r1.z + r2.y;
  r1.x = 1 + -r1.x;
  r1.z = r2.x * r1.z + r2.y;
  r1.z = r1.z * r2.z + 9.99999975e-005;
  r1.z = 1 / r1.z;
  r0.w = r1.z * r0.w;
  r0.w = r0.w * r2.x;
  r0.w = cb0[8].x * r0.w;
  r0.w = max(0, r0.w);
  r2.yzw = r0.www * r0.xyz;
  r0.w = 1 + -r1.w;
  r1.z = r1.w * r1.w;
  r1.y = dot(r1.zz, r1.yy);
  r1.y = -0.5 + r1.y;
  r1.z = r0.w * r0.w;
  r1.z = r1.z * r1.z;
  r0.w = r1.z * r0.w;
  r4.xyz = -cb0[2].xyz + r3.xyz;
  r5.xyzw = t1.Sample(s3_s, v1.xy).xyzw;
  r4.xyz = r5.xxx * r4.xyz + cb0[2].xyz;
  r1.z = -r5.x * cb0[2].w + cb0[2].w;
  r3.xyz = r3.xyz * r1.zzz;
  r5.xyz = float3(1,1,1) + -r4.xyz;
  r4.xyz = r5.xyz * r0.www + r4.xyz;
  r2.yzw = r4.xyz * r2.yzw;
  r0.w = r1.x * r1.x;
  r0.w = r0.w * r0.w;
  r0.w = r0.w * r1.x;
  r0.w = r1.y * r0.w + 1;
  r1.x = 1 + -r2.x;
  r1.z = r1.x * r1.x;
  r1.z = r1.z * r1.z;
  r1.x = r1.z * r1.x;
  r1.x = r1.y * r1.x + 1;
  r0.w = r1.x * r0.w;
  r0.w = r0.w * r2.x;
  r0.xyz = r0.xyz * r0.www;
  o0.xyz = r3.xyz * r0.xyz + r2.yzw;
  o0.w = 1;
  return;
}
