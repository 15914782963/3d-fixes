// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 4ebaf2391fa8a9be-ps_replace.txt
// 3DMigoto: 4ebaf2391fa8a9be | Unity headers extracted from Specular-Base.shader
// Shader "Hidden/TerrainEngine/Splatmap/Specular-Base" {
//   Properties {
//    _SpecColor ("Specular Color", Color) = (0.5,0.5,0.5,1)
//    _Shininess ("Shininess", Range(0.03,1)) = 0.078125
//    _MainTex ("Base (RGB) Gloss (A)", 2D) = "white" { }
//    _Color ("Main Color", Color) = (1,1,1,1)
//   }
//   Fallback "Legacy Shaders/Specular"
//   SubShader 1/1 {
//     LOD 200
//     Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" }
//     Pass 2/5 {
//       Name "FORWARD"
//       Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry-100" "RenderType"="Opaque" }
//       ZWrite Off
//       Blend One One
//       GpuProgramID 103825
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "FOG_EXP2" "SPOT" }
//           SetTexture 0 [_MainTex] 2D 2
//           SetTexture 1 [_LightTexture0] 2D 0
//           SetTexture 2 [_LightTextureB0] 2D 1
//           ConstBuffer "$Globals" 240
//           Matrix 144 [_LightMatrix0]
//           Vector 96 [_LightColor0]
//           Vector 112 [_SpecColor]
//           Float 208 [_Shininess]
//           ConstBuffer "UnityPerCamera" 144
//           Vector 64 [_WorldSpaceCameraPos] 3
//           ConstBuffer "UnityLighting" 720
//           Vector 0 [_WorldSpaceLightPos0]
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityLighting" 2
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:35:07 2016
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[14];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float w1 : TEXCOORD4,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 4ebaf2391fa8a9be-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = cb0[10].xyzw * v3.yyyy;
  r0.xyzw = cb0[9].xyzw * v3.xxxx + r0.xyzw;
  r0.xyzw = cb0[11].xyzw * v3.zzzz + r0.xyzw;
  r0.xyzw = cb0[12].xyzw + r0.xyzw;
  r1.xy = r0.xy / r0.ww;
  r1.xy = float2(0.5,0.5) + r1.xy;
  r1.xyzw = t1.Sample(s0_s, r1.xy).xyzw;
  r0.w = cmp(0 < r0.z);
  r0.x = dot(r0.xyz, r0.xyz);
  r2.xyzw = t2.Sample(s1_s, r0.xx).xyzw;
  r0.x = r0.w ? 1.000000 : 0;
  r0.x = r0.x * r1.w;
  r0.x = r0.x * r2.x;
  r0.xyz = cb0[6].xyz * r0.xxx;
  r1.xyz = cb0[7].xyz * r0.xyz;
  r2.xyz = cb2[0].xyz + -v3.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r3.xyz = _WorldSpaceCameraPos.xyz + -v3.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www + r2.xyz;
  r0.w = dot(v2.xyz, r2.xyz);
  r0.w = max(0, r0.w);
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r3.xyz * r1.www;
  r1.w = dot(v2.xyz, r2.xyz);
  r1.w = max(0, r1.w);
  r1.w = log2(r1.w);
  r2.x = 128 * cb0[13].x;
  r1.w = r2.x * r1.w;
  r1.w = exp2(r1.w);
  r2.xyzw = t0.Sample(s2_s, v1.xy).xyzw;
  r1.w = r2.w * r1.w;
  r0.xyz = r2.xyz * r0.xyz;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r0.xyz * r0.www + r1.xyz;
  r0.w = saturate(w1.x);
  o0.xyz = r0.www * r0.xyz;
  o0.w = 1;
  return;
}
