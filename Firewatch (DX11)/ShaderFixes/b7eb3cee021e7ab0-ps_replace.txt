// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe b7eb3cee021e7ab0-ps_replace.txt
// 3DMigoto: b7eb3cee021e7ab0 | Unity headers extracted from Marmoset Bumped Specular IBL.shader
// Shader "Marmoset/Transparent/Cutout/Bumped Specular IBL" {
//   Properties {
//    _Color ("Diffuse Color", Color) = (1,1,1,1)
//    _SpecColor ("Specular Color", Color) = (1,1,1,1)
//    _SpecInt ("Specular Intensity", Float) = 1
//    _Shininess ("Specular Sharpness", Range(2,8)) = 4
//    _Fresnel ("Fresnel Strength", Range(0,1)) = 0
//    _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//    _MainTex ("Diffuse(RGB) Alpha(A)", 2D) = "white" { }
//    _SpecTex ("Specular(RGB) Gloss(A)", 2D) = "white" { }
//    _BumpMap ("Normalmap", 2D) = "bump" { }
//   }
//   Fallback "Marmoset/Transparent/Cutout/Specular IBL"
//   SubShader 2/2 {
//     LOD 400
//     Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
//     Pass 4/5 {
//       Name "PREPASS"
//       Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
//       ZWrite Off
//       GpuProgramID 640391
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "MARMO_BOX_PROJECTION_OFF" "MARMO_SKY_BLEND_ON" "UNITY_HDR_ON" }
//           SetTexture 0 [_MainTex] 2D 0
//           SetTexture 1 [_BumpMap] 2D 2
//           SetTexture 2 [_SpecTex] 2D 1
//           SetTexture 3 [_SpecCubeIBL] CUBE 3
//           SetTexture 4 [_SpecCubeIBL1] CUBE 4
//           SetTexture 5 [_LightBuffer] 2D 5
//           ConstBuffer "$Globals" 960
//           Matrix 272 [_SkyMatrix]
//           Matrix 624 [_SkyMatrix1]
//           Vector 0 [unity_ColorSpaceGrey]
//           Vector 112 [_SpecColor]
//           Vector 144 [_Color]
//           Vector 160 [_MainTex_ST]
//           Float 176 [_SpecInt]
//           Float 180 [_Shininess]
//           Float 184 [_Fresnel]
//           Vector 192 [_SpecTex_ST]
//           Vector 208 [_BumpMap_ST]
//           Float 224 [_Cutoff]
//           Vector 240 [_ExposureIBL]
//           Vector 264 [_UniformOcclusion] 2
//           Vector 448 [_SH0] 3
//           Vector 464 [_SH1] 3
//           Vector 480 [_SH2] 3
//           Vector 496 [_SH3] 3
//           Vector 512 [_SH4] 3
//           Vector 528 [_SH5] 3
//           Vector 544 [_SH6] 3
//           Vector 560 [_SH7] 3
//           Vector 576 [_SH8] 3
//           Float 588 [_BlendWeightIBL]
//           Vector 592 [_ExposureIBL1]
//           Vector 800 [_SH01] 3
//           Vector 816 [_SH11] 3
//           Vector 832 [_SH21] 3
//           Vector 848 [_SH31] 3
//           Vector 864 [_SH41] 3
//           Vector 880 [_SH51] 3
//           Vector 896 [_SH61] 3
//           Vector 912 [_SH71] 3
//           Vector 928 [_SH81] 3
//           ConstBuffer "UnityPerCamera" 144
//           Vector 64 [_WorldSpaceCameraPos] 3
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:36:23 2016
Texture2D<float4> t5 : register(t5);

TextureCube<float4> t4 : register(t4);

TextureCube<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[59];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float3 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe b7eb3cee021e7ab0-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xy = v4.xy * cb0[10].xy + cb0[10].zw;
  r0.xyzw = t0.Sample(s0_s, r0.xy).xyzw;
  r0.w = r0.w * cb0[9].w + -cb0[14].x;
  r0.xyz = cb0[9].xyz * r0.xyz;
  r0.w = cmp(r0.w < 0);
  if (r0.w != 0) discard;
  r1.x = v1.w;
  r1.y = v2.w;
  r1.z = v3.w;
  r1.xyz = _WorldSpaceCameraPos.xyz + -r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = v2.xyz * r1.yyy;
  r1.xyw = v1.xyz * r1.xxx + r2.xyz;
  r1.xyz = v3.xyz * r1.zzz + r1.xyw;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xy = v4.xy * cb0[13].xy + cb0[13].zw;
  r2.xyzw = t1.Sample(s2_s, r2.xy).xyzw;
  r2.xy = r2.wy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r2.xy, r2.xy);
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r2.z = sqrt(r0.w);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = saturate(dot(r2.xyz, r1.xyz));
  r1.x = 1 + -r0.w;
  r0.w = r1.x * r1.x;
  r1.z = r0.w * r1.x;
  r3.xy = cb0[11].zz * float2(-1,1) + float2(1,0);
  r4.y = dot(r1.xz, r3.xy);
  r1.y = 1;
  r4.x = dot(r1.yx, r3.xy);
  r0.w = dot(r4.xy, r3.xy);
  r0.w = r0.w * 0.949999988 + 0.0500000007;
  r1.x = cb0[11].x * r0.w;
  r1.x = sqrt(r1.x);
  r0.w = r0.w * cb0[11].x + -r1.x;
  r1.y = cb0[0].x * -3.22581005 + 1.61290002;
  r0.w = r1.y * r0.w + r1.x;
  r1.xzw = -cb0[37].xyw + cb0[15].xyw;
  r1.xzw = cb0[36].www * r1.xzw + cb0[37].xyw;
  r0.xyzw = r1.wwww * r0.xyzw;
  r3.xy = v4.xy * cb0[12].xy + cb0[12].zw;
  r3.xyzw = t2.Sample(s1_s, r3.xy).xyzw;
  r3.xyz = cb0[7].xyz * r3.xyz;
  r2.w = 1 + -r3.w;
  r4.xy = -r2.ww * r2.ww + float2(1,8);
  r2.w = -cb0[11].y * r4.x + r4.y;
  r3.xyz = r3.xyz * r0.www;
  r4.xyz = _WorldSpaceCameraPos.xyz + -v5.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r5.x = dot(v1.xyz, r2.xyz);
  r5.y = dot(v2.xyz, r2.xyz);
  r5.z = dot(v3.xyz, r2.xyz);
  r0.w = dot(-r4.xyz, r5.xyz);
  r0.w = r0.w + r0.w;
  r2.xyz = r5.xyz * -r0.www + -r4.xyz;
  r4.x = cb0[39].z;
  r4.y = cb0[40].z;
  r4.z = cb0[41].z;
  r6.xyz = r4.xyz * r2.zzz;
  r4.xyz = r4.xyz * r5.zzz;
  r7.x = cb0[39].y;
  r7.y = cb0[40].y;
  r7.z = cb0[41].y;
  r6.xyz = r7.xyz * r2.yyy + r6.xyz;
  r4.xyz = r7.xyz * r5.yyy + r4.xyz;
  r7.x = cb0[39].x;
  r7.y = cb0[40].x;
  r7.z = cb0[41].x;
  r6.xyz = r7.xyz * r2.xxx + r6.xyz;
  r4.xyz = r7.xyz * r5.xxx + r4.xyz;
  r6.xyzw = t4.SampleLevel(s4_s, r6.xyz, r2.w).xyzw;
  r0.w = 6 * r6.w;
  r7.x = r0.w * r0.w;
  r7.y = r7.x * r0.w;
  r3.w = dot(float2(0.753199995,0.246800005), r7.xy);
  r3.w = -r6.w * 6 + r3.w;
  r0.w = r1.y * r3.w + r0.w;
  r6.xyz = r6.xyz * r0.www;
  r7.x = cb0[17].z;
  r7.y = cb0[18].z;
  r7.z = cb0[19].z;
  r8.xyz = r7.xyz * r2.zzz;
  r7.xyz = r7.xyz * r5.zzz;
  r9.x = cb0[17].y;
  r9.y = cb0[18].y;
  r9.z = cb0[19].y;
  r8.xyz = r9.xyz * r2.yyy + r8.xyz;
  r5.yzw = r9.xyz * r5.yyy + r7.xyz;
  r7.x = cb0[17].x;
  r7.y = cb0[18].x;
  r7.z = cb0[19].x;
  r2.xyz = r7.xyz * r2.xxx + r8.xyz;
  r5.xyz = r7.xyz * r5.xxx + r5.yzw;
  r7.xyzw = t3.SampleLevel(s3_s, r2.xyz, r2.w).xyzw;
  r0.w = 8 + -r2.w;
  r0.w = exp2(r0.w);
  r0.w = r0.w * 0.159154937 + 0.318309873;
  r2.xyz = r3.xyz * r0.www;
  r0.w = 6 * r7.w;
  r8.x = r0.w * r0.w;
  r8.y = r8.x * r0.w;
  r2.w = dot(float2(0.753199995,0.246800005), r8.xy);
  r2.w = -r7.w * 6 + r2.w;
  r0.w = r1.y * r2.w + r0.w;
  r7.xyz = r7.xyz * r0.www + -r6.xyz;
  r6.xyz = cb0[36].www * r7.xyz + r6.xyz;
  r3.xyz = r6.xyz * r3.xyz;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r5.xyz * r0.www;
  r6.xyz = cb0[29].xyz * r5.yyy + cb0[28].xyz;
  r6.xyz = cb0[30].xyz * r5.zzz + r6.xyz;
  r6.xyz = cb0[31].xyz * r5.xxx + r6.xyz;
  r7.xyz = r5.yyz * r5.xzx;
  r6.xyz = cb0[32].xyz * r7.xxx + r6.xyz;
  r6.xyz = cb0[33].xyz * r7.yyy + r6.xyz;
  r6.xyz = cb0[35].xyz * r7.zzz + r6.xyz;
  r5.yz = r5.yz * r5.yz;
  r0.w = r5.x * r5.x + -r5.y;
  r1.y = r5.z * 3 + -1;
  r5.xyz = cb0[34].xyz * r1.yyy + r6.xyz;
  r5.xyz = cb0[36].xyz * r0.www + r5.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r6.xyz = cb0[51].xyz * r4.yyy + cb0[50].xyz;
  r6.xyz = cb0[52].xyz * r4.zzz + r6.xyz;
  r6.xyz = cb0[53].xyz * r4.xxx + r6.xyz;
  r7.xyz = r4.yyz * r4.xzx;
  r6.xyz = cb0[54].xyz * r7.xxx + r6.xyz;
  r6.xyz = cb0[55].xyz * r7.yyy + r6.xyz;
  r6.xyz = cb0[57].xyz * r7.zzz + r6.xyz;
  r4.yz = r4.yz * r4.yz;
  r0.w = r4.x * r4.x + -r4.y;
  r1.y = r4.z * 3 + -1;
  r4.xyz = cb0[56].xyz * r1.yyy + r6.xyz;
  r4.xyz = cb0[58].xyz * r0.www + r4.xyz;
  r5.xyz = abs(r5.xyz) + -abs(r4.xyz);
  r4.xyz = cb0[36].www * r5.xyz + abs(r4.xyz);
  r1.xy = cb0[16].zw * r1.xz;
  r4.xyz = r4.xyz * r0.xyz;
  r1.xzw = r4.xyz * r1.xxx;
  r1.xyz = r3.xyz * r1.yyy + r1.xzw;
  r3.xy = v6.xy / v6.ww;
  r3.xyzw = t5.Sample(s5_s, r3.xy).xyzw;
  r3.xyz = v8.xyz + r3.xyz;
  r4.xyz = r3.xyz * r3.www;
  r2.xyz = r4.xyz * r2.xyz;
  r2.xyz = float3(0.150000006,0.150000006,0.150000006) * r2.xyz;
  r0.xyz = r0.xyz * r3.xyz + r2.xyz;
  o0.xyz = r0.xyz + r1.xyz;
  o0.w = 1;
  return;
}
