// Unverified fog/shadow fix
// 3DMigoto: 8353f8880c9741ec |    Unity headers extracted from vgStylisticFog.shader
//    Shader "_Shaders/StylisticFog" {
//      Fallback Off
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZTest Always
//          ZWrite Off
//          Cull Off
//          Blend SrcAlpha OneMinusSrcAlpha
//          GpuProgramID 24972
//          Program "fp" {
//            SubProgram "d3d11_9x " {
//              GpuProgramIndex 11
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from vgStylisticFog.shader.decompressed:
//   API d3d11_9x
//   Shader model ps_4_0_level_9_1
//   undeciphered1: 201510240 18 3 0
//   Keywords { "DONT_INTERPOLATE_DUAL_FOG" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 336
//   Float 112 [_IntensityScale]
//   Vector 128 [_StartDistance]
//   Vector 144 [_EndDistance]
//   Vector 160 [_FromAToBNormal] 3
//   Float 172 [_FromAToBOffset]
//   Float 320 [_OneOverFarMinusNearPlane]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 0
//   SetTexture 1 [_FogColorTextureFromAToB] 2D 1
//   SetTexture 2 [_FogColorTextureFromBToA] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.42 on Sat Nov 05 21:02:39 2016
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[21];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}

cbuffer Resource_Inverse_MVP : register(b10)
{
	matrix Inverse_MVP;
}

#include <matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float2 w1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 s = StereoParams.Load(0);

  r0.xyzw = t0.Sample(s0_s, w1.xy).xyzw;
  r0.x = cb1[7].x * r0.x + cb1[7].y;
  r0.x = 1 / r0.x;

// This fog shader also draws a shadow, fix it's depth (also requires frustum fix in the VS):
float4 clip_space_adj = float4(s.x * (r0.x - s.y), 0, 0, 0);
float4 local_space_adj = mul(Inverse_MVP, clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);

v2.xyz -= world_space_adj.xyz / r0.x;

  r0.xyz = v2.xyz * r0.xxx;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.x = r0.x * cb0[20].x + -cb0[8].z;
  r0.y = cb0[9].z + -cb0[8].z;
  r0.y = max(0.00100000005, r0.y);
  r0.x = saturate(r0.x / r0.y);
  r0.y = 0.5;
  r1.xyzw = t1.Sample(s1_s, r0.xy).xyzw;
  r0.xyzw = t2.Sample(s2_s, r0.xy).xyzw;
  r1.xyzw = r1.xyzw + -r0.xyzw;
  r2.x = dot(v2.xyz, v2.xyz);
  r2.x = rsqrt(r2.x);
  r2.xyz = v2.xyz * r2.xxx;
  r2.x = dot(cb0[10].xyz, r2.xyz);
  r2.x = cb0[10].w + r2.x;
  r2.x = saturate(r2.x * 0.5 + 0.5);
  r0.xyzw = r2.xxxx * r1.xyzw + r0.xyzw;
  o0.w = saturate(cb0[7].x * r0.w);
  o0.xyz = r0.xyz;
  return;
}
