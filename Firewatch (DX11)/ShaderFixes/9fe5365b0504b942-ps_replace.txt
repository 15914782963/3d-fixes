// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 9fe5365b0504b942-ps_replace.txt
// 3DMigoto: 9fe5365b0504b942 | Unity headers extracted from Standard-AddPass.shader
// Shader "Hidden/TerrainEngine/Splatmap/Standard-AddPass" {
//   Properties {
//   [HideInInspector]  _Control ("Control (RGBA)", 2D) = "red" { }
//   [HideInInspector]  _Splat3 ("Layer 3 (A)", 2D) = "white" { }
//   [HideInInspector]  _Splat2 ("Layer 2 (B)", 2D) = "white" { }
//   [HideInInspector]  _Splat1 ("Layer 1 (G)", 2D) = "white" { }
//   [HideInInspector]  _Splat0 ("Layer 0 (R)", 2D) = "white" { }
//   [HideInInspector]  _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
//   [HideInInspector]  _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
//   [HideInInspector]  _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
//   [HideInInspector]  _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
//   [HideInInspector] [Gamma]  _Metallic0 ("Metallic 0", Range(0,1)) = 0
//   [HideInInspector] [Gamma]  _Metallic1 ("Metallic 1", Range(0,1)) = 0
//   [HideInInspector] [Gamma]  _Metallic2 ("Metallic 2", Range(0,1)) = 0
//   [HideInInspector] [Gamma]  _Metallic3 ("Metallic 3", Range(0,1)) = 0
//   [HideInInspector]  _Smoothness0 ("Smoothness 0", Range(0,1)) = 1
//   [HideInInspector]  _Smoothness1 ("Smoothness 1", Range(0,1)) = 1
//   [HideInInspector]  _Smoothness2 ("Smoothness 2", Range(0,1)) = 1
//   [HideInInspector]  _Smoothness3 ("Smoothness 3", Range(0,1)) = 1
//   }
//   Fallback "Hidden/TerrainEngine/Splatmap/Diffuse-AddPass"
//   SubShader 1/1 {
//     Tags { "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" "SplatCount"="4" }
//     Pass 1/3 {
//       Name "FORWARD"
//       Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "SplatCount"="4" }
//       ZWrite Off
//       Blend One One
//       GpuProgramID 47403
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_OFF" }
//           SetTexture 0 [_Control] 2D 2
//           SetTexture 1 [_Splat0] 2D 3
//           SetTexture 2 [_Splat1] 2D 4
//           SetTexture 3 [_Splat2] 2D 5
//           SetTexture 4 [_Splat3] 2D 6
//           SetTexture 5 [unity_SpecCube0] CUBE 0
//           SetTexture 6 [unity_SpecCube1] CUBE 1
//           ConstBuffer "$Globals" 256
//           Vector 32 [unity_ColorSpaceDielectricSpec]
//           Vector 96 [_LightColor0]
//           Vector 128 [unity_LightGammaCorrectionConsts]
//           Float 160 [_Metallic0]
//           Float 164 [_Metallic1]
//           Float 168 [_Metallic2]
//           Float 172 [_Metallic3]
//           Float 176 [_Smoothness0]
//           Float 180 [_Smoothness1]
//           Float 184 [_Smoothness2]
//           Float 188 [_Smoothness3]
//           ConstBuffer "UnityPerCamera" 144
//           Vector 64 [_WorldSpaceCameraPos] 3
//           ConstBuffer "UnityLighting" 720
//           Vector 0 [_WorldSpaceLightPos0]
//           Vector 608 [unity_SHAr]
//           Vector 624 [unity_SHAg]
//           Vector 640 [unity_SHAb]
//           ConstBuffer "UnityReflectionProbes" 128
//           Vector 0 [unity_SpecCube0_BoxMax]
//           Vector 16 [unity_SpecCube0_BoxMin]
//           Vector 32 [unity_SpecCube0_ProbePosition]
//           Vector 48 [unity_SpecCube0_HDR]
//           Vector 64 [unity_SpecCube1_BoxMax]
//           Vector 80 [unity_SpecCube1_BoxMin]
//           Vector 96 [unity_SpecCube1_ProbePosition]
//           Vector 112 [unity_SpecCube1_HDR]
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityLighting" 2
//           BindCB "UnityReflectionProbes" 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:33:07 2016
TextureCube<float4> t6 : register(t6);

TextureCube<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[8];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[41];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[12];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 9fe5365b0504b942-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyz = _WorldSpaceCameraPos.xyz + -v4.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r0.xyz * r0.www;
  r2.xyzw = t0.Sample(s2_s, v5.xy).xyzw;
  r1.w = dot(r2.xyzw, float4(1,1,1,1));
  r3.xy = float2(-0.00389999989,0.00100000005) + r1.ww;
  r3.x = cmp(r3.x < 0);
  if (r3.x != 0) discard;
  r2.xyzw = r2.xyzw / r3.yyyy;
  r3.xyzw = t1.Sample(s3_s, v1.xy).xyzw;
  r3.xyzw = r3.xyzw * r2.xxxx;
  r3.w = cb0[11].x * r3.w;
  r4.xyzw = t2.Sample(s4_s, v1.zw).xyzw;
  r4.xyzw = r4.xyzw * r2.yyyy;
  r4.w = cb0[11].y * r4.w;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = t3.Sample(s5_s, v2.xy).xyzw;
  r4.xyzw = r4.xyzw * r2.zzzz;
  r4.w = cb0[11].z * r4.w;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = t4.Sample(s6_s, v2.zw).xyzw;
  r4.xyzw = r4.xyzw * r2.wwww;
  r4.w = cb0[11].w * r4.w;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r2.x = dot(r2.xyzw, cb0[10].xyzw);
  r2.y = dot(v3.xyz, cb2[0].xyz);
  r2.y = max(0, r2.y);
  r2.z = 1 + -r3.w;
  r2.w = dot(-r1.xyz, v3.xyz);
  r2.w = r2.w + r2.w;
  r4.xyz = v3.xyz * -r2.www + -r1.xyz;
  r5.xyz = v3.xyz;
  r5.w = 1;
  r6.x = dot(cb2[38].xyzw, r5.xyzw);
  r6.y = dot(cb2[39].xyzw, r5.xyzw);
  r6.z = dot(cb2[40].xyzw, r5.xyzw);
  r5.xyz = v6.xyz + r6.xyz;
  r2.w = cmp(0 < cb3[2].w);
  if (r2.w != 0) {
    r2.w = dot(r4.xyz, r4.xyz);
    r2.w = rsqrt(r2.w);
    r6.xyz = r4.xyz * r2.www;
    r7.xyz = cb3[0].xyz + -v4.xyz;
    r7.xyz = r7.xyz / r6.xyz;
    r8.xyz = cb3[1].xyz + -v4.xyz;
    r8.xyz = r8.xyz / r6.xyz;
    r9.xyz = cmp(float3(0,0,0) < r6.xyz);
    r7.xyz = r9.xyz ? r7.xyz : r8.xyz;
    r2.w = min(r7.x, r7.y);
    r2.w = min(r2.w, r7.z);
    r7.xyz = cb3[1].xyz + cb3[0].xyz;
    r8.xyz = r7.xyz * float3(0.5,0.5,0.5) + -cb3[2].xyz;
    r8.xyz = v4.xyz + r8.xyz;
    r6.xyz = r6.xyz * r2.www + r8.xyz;
    r6.xyz = -r7.xyz * float3(0.5,0.5,0.5) + r6.xyz;
  } else {
    r6.xyz = r4.xyz;
  }
  r2.w = log2(r2.z);
  r2.w = 0.75 * r2.w;
  r2.w = exp2(r2.w);
  r2.w = 7 * r2.w;
  r6.xyzw = t5.SampleLevel(s0_s, r6.xyz, r2.w).xyzw;
  r4.w = log2(r6.w);
  r4.w = cb3[3].y * r4.w;
  r4.w = exp2(r4.w);
  r4.w = cb3[3].x * r4.w;
  r7.xyz = r4.www * r6.xyz;
  r5.w = cmp(cb3[1].w < 0.999989986);
  if (r5.w != 0) {
    r5.w = cmp(0 < cb3[6].w);
    if (r5.w != 0) {
      r5.w = dot(r4.xyz, r4.xyz);
      r5.w = rsqrt(r5.w);
      r8.xyz = r5.www * r4.xyz;
      r9.xyz = cb3[4].xyz + -v4.xyz;
      r9.xyz = r9.xyz / r8.xyz;
      r10.xyz = cb3[5].xyz + -v4.xyz;
      r10.xyz = r10.xyz / r8.xyz;
      r11.xyz = cmp(float3(0,0,0) < r8.xyz);
      r9.xyz = r11.xyz ? r9.xyz : r10.xyz;
      r5.w = min(r9.x, r9.y);
      r5.w = min(r5.w, r9.z);
      r9.xyz = cb3[5].xyz + cb3[4].xyz;
      r10.xyz = r9.xyz * float3(0.5,0.5,0.5) + -cb3[6].xyz;
      r10.xyz = v4.xyz + r10.xyz;
      r8.xyz = r8.xyz * r5.www + r10.xyz;
      r4.xyz = -r9.xyz * float3(0.5,0.5,0.5) + r8.xyz;
    }
    r8.xyzw = t6.SampleLevel(s1_s, r4.xyz, r2.w).xyzw;
    r2.w = log2(r8.w);
    r2.w = cb3[7].y * r2.w;
    r2.w = exp2(r2.w);
    r2.w = cb3[7].x * r2.w;
    r4.xyz = r2.www * r8.xyz;
    r6.xyz = r4.www * r6.xyz + -r4.xyz;
    r7.xyz = cb3[1].www * r6.xyz + r4.xyz;
  }
  r2.w = dot(v3.xyz, v3.xyz);
  r2.w = rsqrt(r2.w);
  r4.xyz = v3.xyz * r2.www;
  r6.xyz = -cb0[2].xyz + r3.xyz;
  r6.xyz = r2.xxx * r6.xyz + cb0[2].xyz;
  r2.x = -r2.x * cb0[2].w + cb0[2].w;
  r3.xyz = r3.xyz * r2.xxx;
  r0.xyz = r0.xyz * r0.www + cb2[0].xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(r4.xyz, r0.xyz);
  r1.x = dot(r4.xyz, r1.xyz);
  r1.x = max(0, r1.x);
  r0.x = dot(cb2[0].xyz, r0.xyz);
  r0.xw = max(float2(0,0), r0.xw);
  r0.y = r2.z * r2.z;
  r0.z = cb0[8].w * r0.y;
  r0.y = -r0.y * cb0[8].w + 1;
  r1.y = r2.y * r0.y + r0.z;
  r0.y = r1.x * r0.y + r0.z;
  r0.y = r1.y * r0.y + 9.99999975e-005;
  r0.y = 1 / r0.y;
  r0.z = 1 + -r2.z;
  r0.z = r0.z * 0.967999995 + 0.0299999993;
  r0.z = log2(r0.z);
  r0.z = 10 / r0.z;
  r1.y = r0.z * r0.z;
  r0.z = r0.z * r0.z + 1;
  r0.z = cb0[8].y * r0.z;
  r0.w = log2(r0.w);
  r0.w = r1.y * r0.w;
  r0.w = exp2(r0.w);
  r0.z = r0.w * r0.z;
  r0.w = 1 + -r2.y;
  r1.y = r0.w * r0.w;
  r1.y = r1.y * r1.y;
  r0.w = r1.y * r0.w;
  r1.x = 1 + -r1.x;
  r1.y = r1.x * r1.x;
  r1.y = r1.y * r1.y;
  r1.x = r1.y * r1.x;
  r1.y = r0.x * r0.x;
  r1.y = dot(r1.yy, r2.zz);
  r1.y = -0.5 + r1.y;
  r0.w = r1.y * r0.w + 1;
  r1.y = r1.y * r1.x + 1;
  r0.w = r1.y * r0.w;
  r0.y = r0.y * r0.z;
  r0.yz = r0.yw * r2.yy;
  r0.y = cb0[8].x * r0.y;
  r0.y = max(0, r0.y);
  r0.w = r3.w + -r2.x;
  r0.w = saturate(1 + r0.w);
  r2.xyz = cb0[6].xyz * r0.zzz + r5.xyz;
  r4.xyz = cb0[6].xyz * r0.yyy;
  r0.x = 1 + -r0.x;
  r0.y = r0.x * r0.x;
  r0.y = r0.y * r0.y;
  r0.x = r0.y * r0.x;
  r5.xyz = float3(1,1,1) + -r6.xyz;
  r0.xyz = r5.xyz * r0.xxx + r6.xyz;
  r0.xyz = r4.xyz * r0.xyz;
  r0.xyz = r3.xyz * r2.xyz + r0.xyz;
  r2.xyz = r0.www + -r6.xyz;
  r1.xyz = r1.xxx * r2.xyz + r6.xyz;
  r0.xyz = r7.xyz * r1.xyz + r0.xyz;
  o0.xyz = r0.xyz * r1.www;
  o0.w = 1;
  return;
}
