// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed d5b699e03aafbe03-vs.txt
// 3DMigoto: d5b699e03aafbe03 |    Unity headers extracted from Marmoset Bumped Diffuse IBL Swaying.shader
//    Shader "Marmoset/Bumped Diffuse IBL Swaying" {
//      Properties {
//       _Color ("Diffuse Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//       _MainTex ("Diffuse(RGB) Alpha(A)", 2D) = "white" { }
//       _BumpMap ("Normalmap", 2D) = "bump" { }
//      }
//      SubShader 1/1 {
//        LOD 350
//        Tags { "QUEUE"="Geometry" "RenderType"="Opaque" }
//        Pass 2/6 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          ZWrite Off
//          Blend One One
//          GpuProgramID 77684
//          Program "vp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 115
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Marmoset Bumped Diffuse IBL Swaying.shader.decompressed:
//   API d3d11
//   Shader model vs_4_0
//   undeciphered1: 201510240 47 0 0
//   Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
//   undeciphered2: 1 0 3 0 0 0
//   undeciphered3: 143 5 0 0 2 1 1 2 3 4 7 8
//   ConstBuffer "$Globals" 992
//   Float 192 [_SwayingRandomnessOffset]
//   Vector 960 [_WindDirectionFrequencyIntensity]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityPerDraw" 352
//   Vector 336 [unity_WorldTransformParams]
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 192 [unity_ObjectToWorld]
//   Matrix 256 [unity_WorldToObject]
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.42 on Sun Nov 06 16:59:07 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[61], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xy
dcl_input v7.x
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_temps 6

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r5.xyzw, l(0, 0, 0, 0), t125.xyzw

mul r0.xy, v0.yyyy, cb2[13].xzxx
mad r0.xy, cb2[12].xzxx, v0.xxxx, r0.xyxx
mad r0.xy, cb2[14].xzxx, v0.zzzz, r0.xyxx
mad r0.xy, cb2[15].xzxx, v0.wwww, r0.xyxx
dp2 r0.x, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r0.x, r0.x, cb0[12].x
mad r0.x, cb1[0].y, cb0[60].z, r0.x
sincos r0.x, null, r0.x
mul r0.xz, r0.xxxx, cb0[60].xxyx
mov r0.y, l(0)
mul r0.w, v7.x, cb0[60].w
mad r0.xyz, r0.xyzx, r0.wwww, v0.xyzx
mul r1.xyzw, r0.yyyy, cb2[1].xyzw
mad r1.xyzw, cb2[0].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb2[2].xyzw, r0.zzzz, r1.xyzw
add r1.xyzw, r1.xyzw, cb2[3].xyzw
mov o0.xyzw, r1.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed d5b699e03aafbe03-vs.txt
ne r5.w, r1.w, l(1.0)
if_nz r5.w
  add r5.w, r1.w, -r5.y
  mad r1.x, r5.w, r5.x, r1.x
endif

mul r2.y, v2.x, cb2[16].x
mul r2.z, v2.x, cb2[17].x
mul r2.x, v2.x, cb2[18].x
mul r3.y, v2.y, cb2[16].y
mul r3.z, v2.y, cb2[17].y
mul r3.x, v2.y, cb2[18].y
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.y, v2.z, cb2[16].z
mul r3.z, v2.z, cb2[17].z
mul r3.x, v2.z, cb2[18].z
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mov o1.z, r2.y
mul r3.xyz, v1.yyyy, cb2[13].yzxy
mad r3.xyz, cb2[12].yzxy, v1.xxxx, r3.xyzx
mad r3.xyz, cb2[14].yzxy, v1.zzzz, r3.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mul r4.xyz, r2.xyzx, r3.xyzx
mad r4.xyz, r2.zxyz, r3.yzxy, -r4.xyzx
mul r0.w, v1.w, cb2[21].w
mul r4.xyz, r0.wwww, r4.xyzx
mov o1.y, r4.x
mov o1.x, r3.z
mov o2.z, r2.z
mov o3.z, r2.x
mov o2.x, r3.x
mov o3.x, r3.y
mov o2.y, r4.y
mov o3.y, r4.z
mul r2.xyz, r0.yyyy, cb2[13].xyzx
mad r0.xyw, cb2[12].xyxz, r0.xxxx, r2.xyxz
mad r0.xyz, cb2[14].xyzx, r0.zzzz, r0.xywx
mad o4.xyz, cb2[15].xyzx, v0.wwww, r0.xyzx
mov o5.xy, v3.xyxx
mov o5.zw, l(0,0,0,0)
mul r0.x, r1.y, cb1[5].x
mul r0.w, r0.x, l(0.500000)
mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
mov o6.zw, r1.zzzw
add o6.xy, r0.zzzz, r0.xwxx
ret 
// Approximately 0 instruction slots used