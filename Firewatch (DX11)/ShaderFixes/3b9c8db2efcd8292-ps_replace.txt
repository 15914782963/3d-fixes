// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 3b9c8db2efcd8292-ps_replace.txt
// 3DMigoto: 3b9c8db2efcd8292 | Unity headers extracted from Internal-DeferredReflections.shader
// Shader "Hidden/Internal-DeferredReflections" {
//   Properties {
//    _SrcBlend ("", Float) = 1
//    _DstBlend ("", Float) = 1
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 1/2 {
//       ZWrite Off
//       Blend [_SrcBlend] [_DstBlend]
//       GpuProgramID 34194
//       Program "fp" {
//         SubProgram "d3d11 " {
//           SetTexture 0 [_CameraDepthTexture] 2D 1
//           SetTexture 1 [_CameraGBufferTexture0] 2D 2
//           SetTexture 2 [_CameraGBufferTexture1] 2D 3
//           SetTexture 3 [_CameraGBufferTexture2] 2D 4
//           SetTexture 4 [unity_SpecCube0] CUBE 0
//           ConstBuffer "UnityPerCamera" 144
//           Vector 64 [_WorldSpaceCameraPos] 3
//           Vector 80 [_ProjectionParams]
//           Vector 112 [_ZBufferParams]
//           ConstBuffer "UnityReflectionProbes" 128
//           Vector 0 [unity_SpecCube0_BoxMax]
//           Vector 16 [unity_SpecCube0_BoxMin]
//           Vector 32 [unity_SpecCube0_ProbePosition]
//           Vector 48 [unity_SpecCube0_HDR]
//           Vector 96 [unity_SpecCube1_ProbePosition]
//           ConstBuffer "UnityPerCamera2" 64
//           Matrix 0 [_CameraToWorld]
//           BindCB "UnityPerCamera" 0
//           BindCB "UnityReflectionProbes" 1
//           BindCB "UnityPerCamera2" 2
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:43:15 2016
TextureCube<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[4];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[7];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[9];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 3b9c8db2efcd8292-ps_replace.txt
matrix _CameraToWorld = matrix(cb2[0], cb2[1], cb2[2], cb2[3]);
float4 _WorldSpaceCameraPos = cb0[4];
_WorldSpaceCameraPos.xyz -= mul(float4(-separation * convergence * fov, 0, 0, 0), _CameraToWorld).xyz;

  r0.x = cb0[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s1_s, r1.xy).xyzw;
  r0.w = cb0[7].x * r2.x + cb0[7].y;
  r0.w = 1 / r0.w;
  r0.xyz = r0.xyz * r0.www;

// Unity light/shadow fix (pixel shader stage) inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 3b9c8db2efcd8292-ps_replace.txt
r0.x -= separation * (r0.z - convergence) * fov;

  r2.xyz = cb2[1].xyz * r0.yyy;
  r0.xyw = cb2[0].xyz * r0.xxx + r2.xyz;
  r0.xyz = cb2[2].xyz * r0.zzz + r0.xyw; // depth in r0.z
  r0.xyz = cb2[3].xyz + r0.xyz;
  r2.xyzw = t1.Sample(s2_s, r1.xy).xyzw;
  r3.xyzw = t2.Sample(s3_s, r1.xy).xyzw;
  r1.xyzw = t3.Sample(s4_s, r1.xy).xyzw;
  r1.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = -_WorldSpaceCameraPos.xyz + r0.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = max(r3.x, r3.y);
  r0.w = max(r0.w, r3.z);
  r0.w = 1 + -r0.w;
  r1.w = dot(r2.xyz, r1.xyz);
  r1.w = r1.w + r1.w;
  r4.xyz = r1.xyz * -r1.www + r2.xyz;
  r1.w = cmp(0 < cb1[2].w);
  if (r1.w != 0) {
    r5.xyz = -cb1[6].www + cb1[1].xyz;
    r6.xyz = cb1[6].www + cb1[0].xyz;
    r1.w = dot(r4.xyz, r4.xyz);
    r1.w = rsqrt(r1.w);
    r7.xyz = r4.xyz * r1.www;
    r8.xyz = r6.xyz + -r0.xyz;
    r8.xyz = r8.xyz / r7.xyz;
    r9.xyz = r5.xyz + -r0.xyz;
    r9.xyz = r9.xyz / r7.xyz;
    r10.xyz = cmp(float3(0,0,0) < r7.xyz);
    r8.xyz = r10.xyz ? r8.xyz : r9.xyz;
    r1.w = min(r8.x, r8.y);
    r1.w = min(r1.w, r8.z);
    r5.xyz = r6.xyz + r5.xyz;
    r6.xyz = r5.xyz * float3(0.5,0.5,0.5) + -cb1[2].xyz;
    r6.xyz = r6.xyz + r0.xyz;
    r6.xyz = r7.xyz * r1.www + r6.xyz;
    r4.xyz = -r5.xyz * float3(0.5,0.5,0.5) + r6.xyz;
  }
  r1.w = 1 + -r3.w;
  r1.w = log2(r1.w);
  r1.w = 0.75 * r1.w;
  r1.w = exp2(r1.w);
  r1.w = 7 * r1.w;
  r4.xyzw = t4.SampleLevel(s0_s, r4.xyz, r1.w).xyzw;
  r1.w = log2(r4.w);
  r1.w = cb1[3].y * r1.w;
  r1.w = exp2(r1.w);
  r1.w = cb1[3].x * r1.w;
  r4.xyz = r1.www * r4.xyz;
  r4.xyz = r4.xyz * r2.www;
  r1.x = dot(r1.xyz, -r2.xyz);
  r1.x = max(0, r1.x);
  r0.w = r3.w + -r0.w;
  r0.w = saturate(1 + r0.w);
  r1.x = 1 + -r1.x;
  r1.y = r1.x * r1.x;
  r1.y = r1.y * r1.y;
  r1.x = r1.y * r1.x;
  r1.yzw = r0.www + -r3.xyz;
  r1.xyz = r1.xxx * r1.yzw + r3.xyz;
  o0.xyz = r4.xyz * r1.xyz;
  r1.xyz = -cb1[0].xyz + r0.xyz;
  r0.xyz = cb1[1].xyz + -r0.xyz;
  r0.xyz = max(r1.xyz, r0.xyz);
  r0.xyz = max(float3(0,0,0), r0.xyz);
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.x = r0.x / cb1[6].w;
  o0.w = saturate(1 + -r0.x);
  return;
}
