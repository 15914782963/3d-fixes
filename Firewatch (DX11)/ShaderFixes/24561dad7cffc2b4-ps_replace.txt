// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 24561dad7cffc2b4-ps_replace.txt
// 3DMigoto: 24561dad7cffc2b4 | Unity headers extracted from Internal-DeferredShading.shader
// Shader "Hidden/Internal-DeferredShading" {
//   Properties {
//    _LightTexture0 ("", any) = "" { }
//    _LightTextureB0 ("", 2D) = "" { }
//    _ShadowMapTexture ("", any) = "" { }
//    _SrcBlend ("", Float) = 1
//    _DstBlend ("", Float) = 1
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Pass 1/2 {
//       Tags { "SHADOWSUPPORT"="true" }
//       ZWrite Off
//       Blend [_SrcBlend] [_DstBlend]
//       GpuProgramID 32647
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
//           SetTexture 0 [_CameraDepthTexture] 2D 0
//           SetTexture 1 [_ShadowMapTexture] 2D 1
//           SetTexture 2 [_CameraGBufferTexture0] 2D 2
//           SetTexture 3 [_CameraGBufferTexture1] 2D 3
//           SetTexture 4 [_CameraGBufferTexture2] 2D 4
//           ConstBuffer "$Globals" 304
//           Float 0 [_TranslucencyFactor]
//           Float 4 [_TranslucentShadowsIntensity]
//           Vector 128 [_LightDir]
//           Vector 160 [_LightColor]
//           Vector 288 [unity_LightGammaCorrectionConsts]
//           ConstBuffer "UnityPerCamera" 144
//           Vector 64 [_WorldSpaceCameraPos] 3
//           Vector 80 [_ProjectionParams]
//           Vector 112 [_ZBufferParams]
//           ConstBuffer "UnityShadows" 416
//           Vector 384 [_LightShadowData]
//           Vector 400 [unity_ShadowFadeCenterAndType]
//           ConstBuffer "UnityPerCamera2" 64
//           Matrix 0 [_CameraToWorld]
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityShadows" 2
//           BindCB "UnityPerCamera2" 3
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:43:16 2016
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[4];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[26];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[19];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 24561dad7cffc2b4-ps_replace.txt
matrix _CameraToWorld = matrix(cb3[0], cb3[1], cb3[2], cb3[3]);
float4 _WorldSpaceCameraPos = cb1[4];
_WorldSpaceCameraPos.xyz -= mul(float4(-separation * convergence * fov, 0, 0, 0), _CameraToWorld).xyz;

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s0_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r2.xyz = r0.xyz * r0.www;

// Unity light/shadow fix (pixel shader stage) inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 24561dad7cffc2b4-ps_replace.txt
r2.x -= separation * (r2.z - convergence) * fov;

  r3.xyz = cb3[1].xyz * r2.yyy;
  r2.xyw = cb3[0].xyz * r2.xxx + r3.xyz;
  r2.xyw = cb3[2].xyz * r2.zzz + r2.xyw; // depth in r2.z
  r2.xyw = cb3[3].xyz + r2.xyw;
  r3.xyz = -_WorldSpaceCameraPos.xyz + r2.xyw;
  r2.xyw = -cb2[25].xyz + r2.xyw;
  r0.x = dot(r2.xyw, r2.xyw);
  r0.x = sqrt(r0.x);
  r0.x = -r0.z * r0.w + r0.x;
  r0.x = cb2[25].w * r0.x + r2.z;
  r0.x = saturate(r0.x * cb2[24].z + cb2[24].w);
  r0.y = dot(r3.xyz, r3.xyz);
  r0.y = rsqrt(r0.y);
  r2.xyz = -r3.xyz * r0.yyy + -cb0[8].xyz;
  r0.yzw = r3.xyz * r0.yyy;
  r1.z = dot(r2.xyz, r2.xyz);
  r1.z = max(0.00100000005, r1.z);
  r1.z = rsqrt(r1.z);
  r2.xyz = r2.xyz * r1.zzz;
  r3.xyzw = t4.Sample(s4_s, r1.xy).xyzw;
  r3.xyz = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.z = dot(r3.xyz, r3.xyz);
  r1.z = rsqrt(r1.z);
  r3.xyz = r3.xyz * r1.zzz;
  r1.z = dot(r3.xyz, r2.xyz);
  r1.w = dot(-cb0[8].xyz, r2.xyz);
  r1.zw = max(float2(0,0), r1.zw);
  r1.z = r1.z * r1.z;
  r2.xyzw = t3.Sample(s3_s, r1.xy).xyzw;
  r2.w = 1 + -r2.w;
  r4.x = r2.w * r2.w;
  r4.y = r4.x * r4.x + -1;
  r1.z = r1.z * r4.y + 1;
  r4.y = 3.14159274 * r1.z;
  r1.z = r4.y * r1.z;
  r4.y = r4.x * r4.x;
  r1.z = r4.y / r1.z;
  r0.y = dot(r3.xyz, -r0.yzw);
  r0.z = dot(r3.xyz, -cb0[8].xyz);
  r0.y = max(0, r0.y);
  r0.w = 0.5 * r4.x;
  r3.x = -r4.x * 0.5 + 1;
  r3.y = r0.y * r3.x + r0.w;
  r0.y = 1 + -r0.y;
  r3.z = max(0, r0.z);
  r0.z = r0.z * 0.5 + 0.5;
  r0.w = r3.z * r3.x + r0.w;
  r0.w = r0.w * r3.y + 9.99999975e-005;
  r0.w = 1 / r0.w;
  r0.w = r0.w * r1.z;
  r0.w = r0.w * r3.z;
  r0.w = cb0[18].x * r0.w;
  r0.w = max(0, r0.w);
  r4.xyzw = t1.Sample(s1_s, r1.xy).xyzw;
  r5.xyzw = t2.Sample(s2_s, r1.xy).xyzw;
  r0.x = saturate(r4.x + r0.x);
  r1.x = max(cb0[0].y, r0.x);
  r1.y = cmp(r3.w == 0.000000);
  r0.x = r1.y ? r1.x : r0.x;
  r4.xyz = cb0[10].xyz * r0.xxx;
  r6.xyz = r4.xyz * r0.www;
  r0.x = 1 + -r1.w;
  r0.w = r1.w * r1.w;
  r0.w = dot(r0.ww, r2.ww);
  r0.w = -0.5 + r0.w;
  r1.x = r0.x * r0.x;
  r1.x = r1.x * r1.x;
  r0.x = r1.x * r0.x;
  r1.x = cmp(0.200000003 < r3.w);
  r1.z = cmp(r3.w < 0.699999988);
  r1.x = r1.z ? r1.x : 0;
  r3.xyw = r1.xxx ? float3(0,0,0) : r2.xyz;
  r1.xzw = r1.xxx ? r2.xyz : 0;
  r2.xyz = float3(1,1,1) + -r3.xyw;
  r2.xyz = r2.xyz * r0.xxx + r3.xyw;
  r2.xyz = r6.xyz * r2.xyz;
  r0.x = r0.y * r0.y;
  r0.x = r0.x * r0.x;
  r0.x = r0.x * r0.y;
  r0.x = r0.w * r0.x + 1;
  r0.y = 1 + -r3.z;
  r2.w = r0.y * r0.y;
  r2.w = r2.w * r2.w;
  r2.w = r2.w * r0.y;
  r0.w = r0.w * r2.w + 1;
  r0.x = r0.w * r0.x;
  r0.w = r0.x * r3.z;
  r0.x = r0.y * r0.x;
  r3.xyz = r0.xxx * r4.xyz;
  r0.xyw = r4.xyz * r0.www;
  r0.xyw = r5.xyz * r0.xyw + r2.xyz;
  r2.xyz = cb0[0].xxx * r5.xyz;
  r2.xyz = r3.xyz * r2.xyz;
  r2.xyz = r0.zzz * -r2.xyz + r2.xyz;
  r2.xyz = r1.yyy ? r2.xyz : 0;
  r0.xyz = r2.xyz + r0.xyw;
  r0.xyz = r0.xyz + r1.xzw;
  r0.w = 1;
  o0.xyzw = exp2(-r0.xyzw);
  return;
}
