// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed b7ce60735c7fe427-vs.txt
// 3DMigoto: b7ce60735c7fe427 | Matched 2 variants of 1 shaders: Marmoset/Transparent/Cutout/Billboard Diffuse IBL
//
//       Unity headers extracted from Marmoset Billboard Diffuse IBL.shader
//       Shader "Marmoset/Transparent/Cutout/Billboard Diffuse IBL" {
//         Properties {
//          _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//          _MainTex ("Base (RGB) Trans (A)", 2D) = "white" { }
//          _Cutoff ("Alpha cutoff", Range(0.000000,1.000000)) = 0.500000
//         }
//         Fallback "Transparent/Cutout/VertexLit"
//         SubShader 1/1 {
//           LOD 200
//           Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="true" "RenderType"="TransparentCutout" }
//           Pass 1/5 {
//             Name "FORWARD"
//             Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "DisableBatching"="true" "RenderType"="TransparentCutout" }
//             ColorMask RGB
//             GpuProgramID 38110
//             Program "vp" {
//               SubProgram "d3d11_9x " {
// 2:              GpuProgramIndex 32
// 1:              GpuProgramIndex 8
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Marmoset Billboard Diffuse IBL.shader.decompressed:
//      API d3d11_9x
//      Shader model vs_4_0_level_9_1
//      undeciphered1: 201510240 80 0 0
// 1:   Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_OFF" }
// 2:   Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_ON" }
//      undeciphered2: 1 0 3 0 0 0
//      undeciphered3: 9 2 0 0 3 4
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      ConstBuffer "UnityLighting" 720
//      Vector 32 [unity_4LightPosX0]
//      Vector 48 [unity_4LightPosY0]
//      Vector 64 [unity_4LightPosZ0]
//      Vector 80 [unity_4LightAtten0]
//      Vector 96 [unity_LightColor0]
//      Vector 112 [unity_LightColor1]
//      Vector 128 [unity_LightColor2]
//      Vector 144 [unity_LightColor3]
//      Vector 160 [unity_LightColor4]
//      Vector 176 [unity_LightColor5]
//      Vector 192 [unity_LightColor6]
//      Vector 208 [unity_LightColor7]
//      Vector 608 [unity_SHAr]
//      Vector 624 [unity_SHAg]
//      Vector 640 [unity_SHAb]
//      Vector 656 [unity_SHBr]
//      Vector 672 [unity_SHBg]
//      Vector 688 [unity_SHBb]
//      Vector 704 [unity_SHC]
//      ConstBuffer "UnityPerDraw" 352
//      Matrix 0 [glstate_matrix_mvp]
//      Matrix 192 [unity_ObjectToWorld]
//      Matrix 256 [unity_WorldToObject]
//      BindCB "UnityPerCamera" 0
//      BindCB "UnityLighting" 1
//      BindCB "UnityPerDraw" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.42 on Sun Nov 06 16:58:30 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xy w
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float       
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             4         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             2         8  ( FLT, FLT, FLT, FLT)
// c10        cb1            38         7  ( FLT, FLT, FLT, FLT)
// c17        cb2             0         4  ( FLT, FLT, FLT, FLT)
// c21        cb2            12         7  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    def c28, 1, -0.0187292993, 0.0742610022, -0.212114394
    def c29, 1.57072878, -2, 3.14159274, -6.28318548
    def c30, 0.159154937, 0.5, 0, 0.416666657
    def c31, 1.05499995, -0.0549999997, 1, 0
    def c32, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
    def c33, -0.020833334, -0.125, 1, 0.5
    dcl_texcoord v0
    dcl_texcoord3 v3
    mov r0.xz, c24
    add r0.xy, -r0.zxzw, c1.zxzw
    mul r0.zw, r0.xyyx, r0.xyyx
    add r0.z, r0.w, r0.z
    rsq r0.z, r0.z
    mul r0.xy, r0.z, r0
    abs r0.z, r0.x
    mad r0.w, r0.z, c28.y, c28.z
    mad r0.w, r0.w, r0.z, c28.w
    mad r0.w, r0.w, r0.z, c29.x
    add r0.z, -r0.z, c28.x
    rsq r0.z, r0.z
    rcp r0.z, r0.z
    mul r0.z, r0.z, r0.w
    mad r0.w, r0.z, c29.y, c29.z
    slt r1.xy, r0, -r0
    slt r0.x, -r0.y, r0.y
    add r0.x, -r1.y, r0.x
    mad r0.y, r0.w, r1.x, r0.z
    mad r0.y, r0.y, c30.x, c30.y
    frc r0.y, r0.y
    mad r0.y, r0.y, -c29.w, -c29.z
    sincos r1.xy, r0.y, c32, c33
    mul r2.x, r0.x, r1.y
    mul r0.x, r0.x, -r1.y
    mul r0.x, r0.x, v0.x
    mov r2.y, r1.x
    mul r0.y, r1.x, v0.x
    mul r0.zw, r2.xyxy, r2.xyxy
    add r0.z, r0.w, r0.z
    rsq r0.z, r0.z
    mul r0.zw, r0.z, r2.xyxy
    mul r1.xyz, r0.w, c27
    mad r1.xyz, c25, r0.z, r1
    mov r2.x, c25.y
    mov r2.y, c26.y
    mov r2.z, c27.y
    mul r2.xyz, r1.y, r2
    mov r3.x, c25.x
    mov r3.y, c26.x
    mov r3.z, c27.x
    mad r1.xyw, r3.xyzz, r1.x, r2.xyzz
    mov r2.x, c25.z
    mov r2.y, c26.z
    mov r2.z, c27.z
    mad r1.xyz, r2, r1.z, r1.xyww
    nrm r2.xyz, r1
    mul r0.z, r2.y, r2.y
    mad r0.z, r2.x, r2.x, -r0.z
    mul r1, r2.yzzx, r2.xyzz
    dp4 r3.x, c13, r1
    dp4 r3.y, c14, r1
    dp4 r3.z, c15, r1
    mad r1.xyz, c16, r0.z, r3
    mov r2.w, c28.x
    dp4 r3.x, c10, r2
    dp4 r3.y, c11, r2
    dp4 r3.z, c12, r2
    add r1.xyz, r1, r3
    max r1.xyz, r1, c30.z
    mov r1.w, c30.w
    lit r3, r1.xxww
    mov r3.x, r3.z
    lit r4, r1.yyww
    lit r1, r1.zzww
    mov r3.z, r1.z
    mov r3.y, r4.z
    mad r1.xyz, r3, c31.x, c31.y
    max r1.xyz, r1, c30.z
    mul r3.xyz, v0.y, c26
    mad r0.yzw, c25.xxyz, r0.y, r3.xxyz
    mad r0.xyz, c27, r0.x, r0.yzww
    mul r3.xyz, r0.y, c22
    mad r3.xyz, c21, r0.x, r3
    mad r3.xyz, c23, r0.z, r3
    mad r3.xyz, c24, v0.w, r3
    add r4, -r3.y, c3
    mul r5, r2.y, r4
    mul r4, r4, r4
    add r6, -r3.x, c2
    mad r5, r6, r2.x, r5
    mad r4, r6, r6, r4
    add r6, -r3.z, c4
    mov oT1.xyz, r3
    mad r3, r6, r2.z, r5
    mov oT0.xyz, r2
    mad r2, r6, r6, r4
    rsq r4.x, r2.x
    rsq r4.y, r2.y
    rsq r4.z, r2.z
    rsq r4.w, r2.w
    mov r5.x, c28.x
    mad r2, r2, c5, r5.x
    mul r3, r3, r4
    max r3, r3, c30.z
    rcp r4.x, r2.x
    rcp r4.y, r2.y
    rcp r4.z, r2.z
    rcp r4.w, r2.w
    mul r2, r3, r4
    mul r3.xyz, r2.y, c7
    mad r3.xyz, c6, r2.x, r3
    mad r2.xyz, c8, r2.z, r3
    mad r2.xyz, c9, r2.w, r2
    add oT3.xyz, r1, r2
    mul r1, r0.y, c18
    mad r1, c17, r0.x, r1
    mad r0, c19, r0.z, r1
    add r0, r0, c20
    mad oPos.xy, r0.w, c0, r0
    mov oPos.zw, r0
    mul oT2, v3.xyxx, c31.zzww

// approximately 121 instruction slots used
vs_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[45], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_input v0.xyw
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_temps 11
dcl_constantbuffer cb10[4], immediateIndexed
dcl_constantbuffer cb11[22], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r6.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed b7ce60735c7fe427-vs.txt
mov r7.xyzw, cb0[4].xyzw
mov r8.xyzw, l(0)
mul r8.x, -r6.x, r6.y
mul r10.xyzw, cb10[0].xyzw, r8.xxxx
mad r10.xyzw, cb10[1].xyzw, r8.yyyy, r10.xyzw
mad r10.xyzw, cb10[2].xyzw, r8.zzzz, r10.xyzw
mad r10.xyzw, cb10[3].xyzw, r8.wwww, r10.xyzw
mul r9.xyzw, cb11[12].xyzw, r10.xxxx
mad r9.xyzw, cb11[13].xyzw, r10.yyyy, r9.xyzw
mad r9.xyzw, cb11[14].xyzw, r10.zzzz, r9.xyzw
mad r9.xyzw, cb11[15].xyzw, r10.wwww, r9.xyzw
add r7.xyz, r7.xyz, -r9.xyz

add r0.xy, r7.xzxx, -cb2[15].xzxx
dp2 r0.z, r0.xyxx, r0.xyxx
rsq r0.z, r0.z
mul r0.xy, r0.zzzz, r0.xyxx
mad r0.z, |r0.y|, l(-0.0187292993), l(0.074261)
mad r0.z, r0.z, |r0.y|, l(-0.212114394)
mad r0.z, r0.z, |r0.y|, l(1.57072878)
add r0.w, -|r0.y|, l(1.000000)
sqrt r0.w, r0.w
mul r1.x, r0.w, r0.z
mad r1.x, r1.x, l(-2.000000), l(3.14159274)
lt r0.y, r0.y, -r0.y
and r0.y, r0.y, r1.x
mad r0.y, r0.z, r0.w, r0.y
sincos r1.x, r2.x, r0.y
lt r0.y, l(0.000000), r0.x
lt r0.x, r0.x, l(0.000000)
iadd r0.x, -r0.y, r0.x
itof r0.x, r0.x
mul r0.y, r0.x, -r1.x
mul r1.x, r0.x, r1.x
mul r0.x, r0.y, v0.x
mul r0.y, r2.x, v0.x
mov r1.y, r2.x
mul r2.xyz, v0.yyyy, cb2[17].xyzx
mad r0.yzw, cb2[16].xxyz, r0.yyyy, r2.xxyz
mad r0.xyz, cb2[18].xyzx, r0.xxxx, r0.yzwy
mul r2.xyzw, r0.yyyy, cb2[1].xyzw
mad r2.xyzw, cb2[0].xyzw, r0.xxxx, r2.xyzw
mad r2.xyzw, cb2[2].xyzw, r0.zzzz, r2.xyzw
add o0.xyzw, r2.xyzw, cb2[3].xyzw
dp2 r0.w, r1.xyxx, r1.xyxx
rsq r0.w, r0.w
mul r1.xy, r0.wwww, r1.xyxx
mul r1.yzw, r1.yyyy, cb2[18].xxyz
mad r1.xyz, cb2[16].xyzx, r1.xxxx, r1.yzwy
mov r2.x, cb2[16].y
mov r2.y, cb2[17].y
mov r2.z, cb2[18].y
mul r2.xyz, r1.yyyy, r2.xyzx
mov r3.x, cb2[16].x
mov r3.y, cb2[17].x
mov r3.z, cb2[18].x
mad r1.xyw, r3.xyxz, r1.xxxx, r2.xyxz
mov r2.x, cb2[16].z
mov r2.y, cb2[17].z
mov r2.z, cb2[18].z
mad r1.xyz, r2.xyzx, r1.zzzz, r1.xywx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mov o1.xyz, r1.xyzx
mul r2.xyz, r0.yyyy, cb2[13].xyzx
mad r0.xyw, cb2[12].xyxz, r0.xxxx, r2.xyxz
mad r0.xyz, cb2[14].xyzx, r0.zzzz, r0.xywx
mad r0.xyz, cb2[15].xyzx, v0.wwww, r0.xyzx
mov o2.xyz, r0.xyzx
mov o3.xy, v3.xyxx
mov o3.zw, l(0,0,0,0)
mul r0.w, r1.y, r1.y
mad r0.w, r1.x, r1.x, -r0.w
mul r2.xyzw, r1.yzzx, r1.xyzz
dp4 r3.x, cb1[41].xyzw, r2.xyzw
dp4 r3.y, cb1[42].xyzw, r2.xyzw
dp4 r3.z, cb1[43].xyzw, r2.xyzw
mad r2.xyz, cb1[44].xyzx, r0.wwww, r3.xyzx
mov r1.w, l(1.000000)
dp4 r3.x, cb1[38].xyzw, r1.xyzw
dp4 r3.y, cb1[39].xyzw, r1.xyzw
dp4 r3.z, cb1[40].xyzw, r1.xyzw
add r2.xyz, r2.xyzx, r3.xyzx
max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
log r2.xyz, r2.xyzx
mul r2.xyz, r2.xyzx, l(0.416666657, 0.416666657, 0.416666657, 0.000000)
exp r2.xyz, r2.xyzx
mad r2.xyz, r2.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
add r3.xyzw, -r0.yyyy, cb1[3].xyzw
mul r4.xyzw, r1.yyyy, r3.xyzw
mul r3.xyzw, r3.xyzw, r3.xyzw
add r5.xyzw, -r0.xxxx, cb1[2].xyzw
add r0.xyzw, -r0.zzzz, cb1[4].xyzw
mad r4.xyzw, r5.xyzw, r1.xxxx, r4.xyzw
mad r1.xyzw, r0.xyzw, r1.zzzz, r4.xyzw
mad r3.xyzw, r5.xyzw, r5.xyzw, r3.xyzw
mad r0.xyzw, r0.xyzw, r0.xyzw, r3.xyzw
rsq r3.xyzw, r0.xyzw
mad r0.xyzw, r0.xyzw, cb1[5].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
div r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r0.xyzw
mul r1.xyzw, r1.xyzw, r3.xyzw
max r1.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyz, r0.yyyy, cb1[7].xyzx
mad r1.xyz, cb1[6].xyzx, r0.xxxx, r1.xyzx
mad r0.xyz, cb1[8].xyzx, r0.zzzz, r1.xyzx
mad r0.xyz, cb1[9].xyzx, r0.wwww, r0.xyzx
add o4.xyz, r0.xyzx, r2.xyzx
ret 
// Approximately 0 instruction slots used