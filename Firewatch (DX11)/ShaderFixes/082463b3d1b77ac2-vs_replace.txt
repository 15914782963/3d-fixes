// hlsltool.py -I ../.. --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe 082463b3d1b77ac2-vs_replace.txt
// 3DMigoto: 082463b3d1b77ac2 | Matched 3 variants of 1 shaders: Standard (Specular setup)
// 
//    Unity headers extracted from StandardSpecular.shader
//    Shader "Standard (Specular setup)" {
//      Properties {
//       _Color ("Color", Color) = (1,1,1,1)
//       _MainTex ("Albedo", 2D) = "white" { }
//       _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//       _Glossiness ("Smoothness", Range(0,1)) = 0.5
//       _SpecColor ("Specular", Color) = (0.2,0.2,0.2,1)
//       _SpecGlossMap ("Specular", 2D) = "white" { }
//       _BumpScale ("Scale", Float) = 1
//       _BumpMap ("Normal Map", 2D) = "bump" { }
//       _Parallax ("Height Scale", Range(0.005,0.08)) = 0.02
//       _ParallaxMap ("Height Map", 2D) = "black" { }
//       _OcclusionStrength ("Strength", Range(0,1)) = 1
//       _OcclusionMap ("Occlusion", 2D) = "white" { }
//       _EmissionColor ("Color", Color) = (0,0,0,1)
//       _EmissionMap ("Emission", 2D) = "white" { }
//       _DetailMask ("Detail Mask", 2D) = "white" { }
//       _DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" { }
//       _DetailNormalMapScale ("Scale", Float) = 1
//       _DetailNormalMap ("Normal Map", 2D) = "bump" { }
//      [Enum(UV0,0,UV1,1)]  _UVSec ("UV Set for secondary textures", Float) = 0
//      [HideInInspector]  _Mode ("__mode", Float) = 0
//      [HideInInspector]  _SrcBlend ("__src", Float) = 1
//      [HideInInspector]  _DstBlend ("__dst", Float) = 0
//      [HideInInspector]  _ZWrite ("__zw", Float) = 1
//      }
//      Fallback "VertexLit"
//      SubShader 2/2 {
//        LOD 150
//        Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
//        Pass 1/3 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
//          ZWrite [_ZWrite]
//          Blend [_SrcBlend] [_DstBlend]
//          GpuProgramID 329204
//          Program "vp" {
//            SubProgram "d3d11 " {
// 4:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_EMISSION" }
// 2:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_SPECGLOSSMAP" }
// 1:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
//              Bind "vertex" Vertex
//              Bind "normal" Normal
//              Bind "texcoord" TexCoord0
//              Bind "texcoord1" TexCoord1
//              ConstBuffer "$Globals" 256
//              Vector 176 [_MainTex_ST]
//              Vector 192 [_DetailAlbedoMap_ST]
//              Float 232 [_UVSec]
//              ConstBuffer "UnityPerCamera" 144
//              Vector 64 [_WorldSpaceCameraPos] 3
//              Vector 80 [_ProjectionParams]
//              ConstBuffer "UnityLighting" 720
//              Vector 32 [unity_4LightPosX0]
//              Vector 48 [unity_4LightPosY0]
//              Vector 64 [unity_4LightPosZ0]
//              Vector 80 [unity_4LightAtten0]
//              Vector 96 [unity_LightColor0]
//              Vector 112 [unity_LightColor1]
//              Vector 128 [unity_LightColor2]
//              Vector 144 [unity_LightColor3]
//              Vector 160 [unity_LightColor4]
//              Vector 176 [unity_LightColor5]
//              Vector 192 [unity_LightColor6]
//              Vector 208 [unity_LightColor7]
//              Vector 608 [unity_SHAr]
//              Vector 624 [unity_SHAg]
//              Vector 640 [unity_SHAb]
//              Vector 656 [unity_SHBr]
//              Vector 672 [unity_SHBg]
//              Vector 688 [unity_SHBb]
//              Vector 704 [unity_SHC]
//              ConstBuffer "UnityPerDraw" 352
//              Matrix 0 [glstate_matrix_mvp]
//              Matrix 192 [_Object2World]
//              Matrix 256 [_World2Object]
//              ConstBuffer "UnityFog" 32
//              Vector 16 [unity_FogParams]
//              BindCB "$Globals" 0
//              BindCB "UnityPerCamera" 1
//              BindCB "UnityLighting" 2
//              BindCB "UnityPerDraw" 3
//              BindCB "UnityFog" 4
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model vs_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:35:22 2016
cbuffer cb4 : register(b4)
{
  float4 cb4[2];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[19];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[45];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[15];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float4 v2 : TEXCOORD0,
  float2 v3 : TEXCOORD1,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float p2 : TEXCOORD7,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb3[1].xyzw * v0.yyyy;
  r0.xyzw = cb3[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb3[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = cb3[3].xyzw * v0.wwww + r0.xyzw;
  o0.xyzw = r0.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe 082463b3d1b77ac2-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r0.w != 1.0) { r0.x += stereo.x * (r0.w - stereo.y); }

  r1.x = cmp(cb0[14].z == 0.000000);
  r1.xy = r1.xx ? v2.xy : v3.xy;
  o1.zw = r1.xy * cb0[12].xy + cb0[12].zw;
  o1.xy = v2.xy * cb0[11].xy + cb0[11].zw;
  r1.x = cb4[1].x * r0.z;
  r1.x = -r1.x * r1.x;
  p2.x = exp2(r1.x);
  r1.xyz = cb3[13].xyz * v0.yyy;
  r1.xyz = cb3[12].xyz * v0.xxx + r1.xyz;
  r1.xyz = cb3[14].xyz * v0.zzz + r1.xyz;
  r1.xyz = cb3[15].xyz * v0.www + r1.xyz;
  r2.xyz = -cb1[4].xyz + r1.xyz;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  o2.xyz = r2.xyz * r1.www;
  o3.xyzw = float4(0,0,0,0);
  o4.xyzw = float4(0,0,0,0);
  o5.w = 0;
  r2.x = cb3[16].x * v1.x;
  r2.y = cb3[17].x * v1.x;
  r2.z = cb3[18].x * v1.x;
  r3.x = cb3[16].y * v1.y;
  r3.y = cb3[17].y * v1.y;
  r3.z = cb3[18].y * v1.y;
  r2.xyz = r3.xyz + r2.xyz;
  r3.x = cb3[16].z * v1.z;
  r3.y = cb3[17].z * v1.z;
  r3.z = cb3[18].z * v1.z;
  r2.xyz = r3.xyz + r2.xyz;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  o5.xyz = r2.xyz;
  r1.w = r2.y * r2.y;
  r1.w = r2.x * r2.x + -r1.w;
  r3.xyzw = r2.xyzz * r2.yzzx;
  r4.x = dot(cb2[41].xyzw, r3.xyzw);
  r4.y = dot(cb2[42].xyzw, r3.xyzw);
  r4.z = dot(cb2[43].xyzw, r3.xyzw);
  r3.xyz = cb2[44].xyz * r1.www + r4.xyz;
  r2.w = 1;
  r4.x = dot(cb2[38].xyzw, r2.xyzw);
  r4.y = dot(cb2[39].xyzw, r2.xyzw);
  r4.z = dot(cb2[40].xyzw, r2.xyzw);
  r3.xyz = r4.xyz + r3.xyz;
  r4.xyzw = cb2[3].xyzw + -r1.yyyy;
  r5.xyzw = r4.xyzw * r2.yyyy;
  r4.xyzw = r4.xyzw * r4.xyzw;
  r6.xyzw = cb2[2].xyzw + -r1.xxxx;
  r1.xyzw = cb2[4].xyzw + -r1.zzzz;
  r5.xyzw = r6.xyzw * r2.xxxx + r5.xyzw;
  r2.xyzw = r1.xyzw * r2.zzzz + r5.xyzw;
  r4.xyzw = r6.xyzw * r6.xyzw + r4.xyzw;
  r1.xyzw = r1.xyzw * r1.xyzw + r4.xyzw;
  r4.xyzw = rsqrt(r1.xyzw);
  r1.xyzw = r1.xyzw * cb2[5].xyzw + float4(1,1,1,1);
  r1.xyzw = float4(1,1,1,1) / r1.xyzw;
  r2.xyzw = r4.xyzw * r2.xyzw;
  r2.xyzw = max(float4(0,0,0,0), r2.xyzw);
  r1.xyzw = r2.xyzw * r1.xyzw;
  r2.xyz = cb2[7].xyz * r1.yyy;
  r2.xyz = cb2[6].xyz * r1.xxx + r2.xyz;
  r1.xyz = cb2[8].xyz * r1.zzz + r2.xyz;
  r1.xyz = cb2[9].xyz * r1.www + r1.xyz;
  o6.xyz = r3.xyz + r1.xyz;
  o6.w = 0;
  r0.y = cb1[5].x * r0.y;
  r1.xzw = float3(0.5,0.5,0.5) * r0.xwy;
  o7.zw = r0.zw;
  o7.xy = r1.xw + r1.zz;
  return;
}
