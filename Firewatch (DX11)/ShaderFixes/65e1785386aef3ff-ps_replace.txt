// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 65e1785386aef3ff-ps_replace.txt
// 3DMigoto: 65e1785386aef3ff | Unity headers extracted from Marmoset Terrain Add Pass.shader
// Shader "Hidden/Marmoset/Terrain/Terrain IBL AddPass" {
//   Properties {
//    _Color ("Diffuse Color", Color) = (1,1,1,1)
//    _DetailWeight ("DetailWeight", Range(0,1)) = 1
//    _FadeNear ("Fade Near", Float) = 500
//    _FadeRange ("Fade Range", Float) = 100
//    _DiffFresnel ("Master Diffuse Fresnel", Range(0,1)) = 0
//    _Fresnel0 ("Diffuse Fresnel 0", Range(0,1)) = 0
//    _Fresnel1 ("Diffuse Fresnel 1", Range(0,1)) = 0
//    _Fresnel2 ("Diffuse Fresnel 2", Range(0,1)) = 0
//    _Fresnel3 ("Diffuse Fresnel 3", Range(0,1)) = 0
//    _Fresnel4 ("Diffuse Fresnel 4", Range(0,1)) = 0
//    _Fresnel5 ("Diffuse Fresnel 5", Range(0,1)) = 0
//    _Fresnel6 ("Diffuse Fresnel 6", Range(0,1)) = 0
//    _Fresnel7 ("Diffuse Fresnel 7", Range(0,1)) = 0
//    _BaseTex ("Base Diffuse (RGB) Gloss (A)", 2D) = "white" { }
//    _BumpMap ("Base Normalmap (RGB)", 2D) = "bump" { }
//   [HideInInspector]  _Control ("Splatmap (RGBA)", 2D) = "red" { }
//   [HideInInspector]  _Splat0 ("Layer 0 (R)", 2D) = "white" { }
//   [HideInInspector]  _Splat1 ("Layer 1 (G)", 2D) = "white" { }
//   [HideInInspector]  _Splat2 ("Layer 2 (B)", 2D) = "white" { }
//   [HideInInspector]  _Splat3 ("Layer 3 (A)", 2D) = "white" { }
//   [HideInInspector]  _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
//   [HideInInspector]  _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
//   [HideInInspector]  _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
//   [HideInInspector]  _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
//   }
//   Fallback Off
//   SubShader 1/1 {
//     Tags { "LIGHTMODE"="Deferred" "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" "SplatCount"="4" }
//     Pass 2/2 {
//       Name "META"
//       Tags { "LIGHTMODE"="Deferred" "QUEUE"="Geometry-99" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" "SplatCount"="4" }
//       ZWrite Off
//       Cull Off
//       Blend One One
//       GpuProgramID 94803
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "MARMO_TERRAIN_BLEND_ON" }
//           SetTexture 0 [_Control] 2D 0
//           SetTexture 1 [_Splat0] 2D 1
//           SetTexture 2 [_Splat1] 2D 2
//           SetTexture 3 [_Splat2] 2D 3
//           SetTexture 4 [_Splat3] 2D 4
//           SetTexture 5 [_Normal0] 2D 5
//           SetTexture 6 [_Normal1] 2D 6
//           SetTexture 7 [_Normal2] 2D 7
//           SetTexture 8 [_Normal3] 2D 8
//           ConstBuffer "$Globals" 1152
//           Matrix 176 [_SkyMatrix]
//           Matrix 528 [_SkyMatrix1]
//           Vector 144 [_ExposureIBL]
//           Vector 168 [_UniformOcclusion] 2
//           Vector 352 [_SH0] 3
//           Vector 368 [_SH1] 3
//           Vector 384 [_SH2] 3
//           Vector 400 [_SH3] 3
//           Vector 416 [_SH4] 3
//           Vector 432 [_SH5] 3
//           Vector 448 [_SH6] 3
//           Vector 464 [_SH7] 3
//           Vector 480 [_SH8] 3
//           Float 492 [_BlendWeightIBL]
//           Vector 496 [_ExposureIBL1]
//           Vector 704 [_SH01] 3
//           Vector 720 [_SH11] 3
//           Vector 736 [_SH21] 3
//           Vector 752 [_SH31] 3
//           Vector 768 [_SH41] 3
//           Vector 784 [_SH51] 3
//           Vector 800 [_SH61] 3
//           Vector 816 [_SH71] 3
//           Vector 832 [_SH81] 3
//           Vector 864 [_Control_ST]
//           Vector 880 [_Splat0_ST]
//           Vector 896 [_Splat1_ST]
//           Vector 912 [_Splat2_ST]
//           Vector 928 [_Splat3_ST]
//           Vector 1024 [_Color]
//           Float 1048 [_FadeNear]
//           Float 1052 [_FadeRange]
//           Float 1100 [_DiffFresnel]
//           Float 1120 [_Fresnel4]
//           Float 1124 [_Fresnel5]
//           Float 1128 [_Fresnel6]
//           Float 1132 [_Fresnel7]
//           Float 1136 [unity_OneOverOutputBoost]
//           Float 1140 [unity_MaxOutputValue]
//           Float 1144 [unity_UseLinearSpace]
//           ConstBuffer "UnityPerCamera" 144
//           Vector 64 [_WorldSpaceCameraPos] 3
//           ConstBuffer "UnityMetaPass" 32
//           VectorBool 16 [unity_MetaFragmentControl] 4
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityMetaPass" 2
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:30:50 2016
Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[2];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[72];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 65e1785386aef3ff-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = -cb0[65].z + v4.z;
  r0.x = saturate(r0.x / cb0[65].w);
  r1.x = v1.w;
  r1.y = v2.w;
  r1.z = v3.w;
  r0.yzw = _WorldSpaceCameraPos.xyz + -r1.xyz;
  r1.x = dot(r0.yzw, r0.yzw);
  r1.x = rsqrt(r1.x);
  r0.yzw = r1.xxx * r0.yzw;
  r1.xyz = v2.xyz * r0.zzz;
  r1.xyz = v1.xyz * r0.yyy + r1.xyz;
  r0.yzw = v3.xyz * r0.www + r1.xyz;
  r1.x = dot(r0.yzw, r0.yzw);
  r1.x = rsqrt(r1.x);
  r0.yzw = r1.xxx * r0.yzw;
  r1.xy = v4.xy * cb0[57].xy + cb0[57].zw;
  r2.xyzw = t7.Sample(s7_s, r1.xy).xyzw;
  r1.xyzw = t3.Sample(s3_s, r1.xy).xyzw;
  r2.xz = v4.xy * cb0[55].xy + cb0[55].zw;
  r3.xyzw = t5.Sample(s5_s, r2.xz).xyzw;
  r4.xyzw = t1.Sample(s1_s, r2.xz).xyzw;
  r2.xz = v4.xy * cb0[56].xy + cb0[56].zw;
  r5.xyzw = t6.Sample(s6_s, r2.xz).xyzw;
  r6.xyzw = t2.Sample(s2_s, r2.xz).xyzw;
  r2.xz = v4.xy * cb0[54].xy + cb0[54].zw;
  r7.xyzw = t0.Sample(s0_s, r2.xz).xyzw;
  r1.w = dot(r7.xyzw, float4(1,1,1,1));
  r1.w = max(0.00999999978, r1.w);
  r8.xyzw = r7.xyzw / r1.wwww;
  r2.xz = r8.yy * r5.wy;
  r2.xz = r8.xx * r3.wy + r2.xz;
  r2.xy = r8.zz * r2.wy + r2.xz;
  r2.zw = v4.xy * cb0[58].xy + cb0[58].zw;
  r3.xyzw = t8.Sample(s8_s, r2.zw).xyzw;
  r5.xyzw = t4.Sample(s4_s, r2.zw).xyzw;
  r2.xy = r8.ww * r3.wy + r2.xy;
  r2.xy = r2.xy * float2(2,2) + float2(-1,-1);
  r1.w = dot(r2.xy, r2.xy);
  r1.w = min(1, r1.w);
  r1.w = 1 + -r1.w;
  r2.z = sqrt(r1.w);
  r0.y = saturate(dot(r2.xyz, r0.yzw));
  r0.xy = float2(1,1) + -r0.xy;
  r0.z = r0.y * r0.y;
  r0.w = dot(r7.xyzw, cb0[70].xyzw);
  r0.y = -r0.z * r0.w + r0.y;
  r0.z = r0.z * r0.w;
  r0.y = r0.w * r0.y + r0.z;
  r0.x = r0.y * r0.x;
  r0.x = r0.x * cb0[68].w + 1;
  r0.yzw = r7.yyy * r6.xyz;
  r0.yzw = r7.xxx * r4.xyz + r0.yzw;
  r0.yzw = r7.zzz * r1.xyz + r0.yzw;
  r0.yzw = r7.www * r5.xyz + r0.yzw;
  r0.yzw = cb0[64].xyz * r0.yzw;
  r1.xy = -cb0[31].xw + cb0[9].xw;
  r1.xy = cb0[30].ww * r1.xy + cb0[31].xw;
  r0.yzw = r1.yyy * r0.yzw;
  r1.x = cb0[10].z * r1.x;
  r0.xyz = r0.yzw * r0.xxx;
  r0.w = dot(v2.xyz, r2.xyz);
  r3.x = cb0[11].y * r0.w;
  r3.y = cb0[12].y * r0.w;
  r3.z = cb0[13].y * r0.w;
  r1.y = dot(v3.xyz, r2.xyz);
  r1.z = dot(v1.xyz, r2.xyz);
  r2.x = cb0[11].z * r1.y;
  r2.y = cb0[12].z * r1.y;
  r2.z = cb0[13].z * r1.y;
  r2.xyz = r3.xyz + r2.xyz;
  r3.x = cb0[11].x * r1.z;
  r3.y = cb0[12].x * r1.z;
  r3.z = cb0[13].x * r1.z;
  r2.xyz = r3.xyz + r2.xyz;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r3.xyz = cb0[23].xyz * r2.yyy + cb0[22].xyz;
  r3.xyz = cb0[24].xyz * r2.zzz + r3.xyz;
  r3.xyz = cb0[25].xyz * r2.xxx + r3.xyz;
  r4.xyz = r2.yyz * r2.xzx;
  r3.xyz = cb0[26].xyz * r4.xxx + r3.xyz;
  r3.xyz = cb0[27].xyz * r4.yyy + r3.xyz;
  r3.xyz = cb0[29].xyz * r4.zzz + r3.xyz;
  r2.yz = r2.yz * r2.yz;
  r1.w = r2.x * r2.x + -r2.y;
  r2.x = r2.z * 3 + -1;
  r2.xyz = cb0[28].xyz * r2.xxx + r3.xyz;
  r2.xyz = cb0[30].xyz * r1.www + r2.xyz;
  r3.x = cb0[33].y * r0.w;
  r3.y = cb0[34].y * r0.w;
  r3.z = cb0[35].y * r0.w;
  r4.x = cb0[33].z * r1.y;
  r4.y = cb0[34].z * r1.y;
  r4.z = cb0[35].z * r1.y;
  r3.xyz = r4.xyz + r3.xyz;
  r4.x = cb0[33].x * r1.z;
  r4.y = cb0[34].x * r1.z;
  r4.z = cb0[35].x * r1.z;
  r1.yzw = r4.xyz + r3.xyz;
  r0.w = dot(r1.yzw, r1.yzw);
  r0.w = rsqrt(r0.w);
  r1.yzw = r1.yzw * r0.www;
  r3.xyz = cb0[45].xyz * r1.zzz + cb0[44].xyz;
  r3.xyz = cb0[46].xyz * r1.www + r3.xyz;
  r3.xyz = cb0[47].xyz * r1.yyy + r3.xyz;
  r4.xyz = r1.zzw * r1.ywy;
  r3.xyz = cb0[48].xyz * r4.xxx + r3.xyz;
  r3.xyz = cb0[49].xyz * r4.yyy + r3.xyz;
  r3.xyz = cb0[51].xyz * r4.zzz + r3.xyz;
  r1.zw = r1.zw * r1.zw;
  r0.w = r1.y * r1.y + -r1.z;
  r1.y = r1.w * 3 + -1;
  r1.yzw = cb0[50].xyz * r1.yyy + r3.xyz;
  r1.yzw = cb0[52].xyz * r0.www + r1.yzw;
  r2.xyz = abs(r2.xyz) + -abs(r1.yzw);
  r1.yzw = cb0[30].www * r2.xyz + abs(r1.yzw);
  r1.yzw = r1.yzw * r0.xyz;
  r0.xyz = log2(r0.xyz);
  r1.xyz = r1.yzw * r1.xxx;
  r2.xyz = r1.xyz * float3(0.305306017,0.305306017,0.305306017) + float3(0.682171106,0.682171106,0.682171106);
  r2.xyz = r1.xyz * r2.xyz + float3(0.0125228781,0.0125228781,0.0125228781);
  r2.xyz = r2.xyz * r1.xyz;
  r0.w = cmp(0 != cb0[71].z);
  r1.xyz = r0.www ? r1.xyz : r2.xyz;
  r1.xyz = float3(0.010309278,0.010309278,0.010309278) * r1.xyz;
  r0.w = max(r1.x, r1.y);
  r1.w = max(0.0199999996, r1.z);
  r0.w = max(r1.w, r0.w);
  r0.w = 255 * r0.w;
  r0.w = ceil(r0.w);
  r2.w = 0.00392156886 * r0.w;
  r2.xyz = r1.xyz / r2.www;
  r0.w = saturate(cb0[71].x);
  r0.xyz = r0.www * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r0.xyz = min(cb0[71].yyy, r0.xyz);
  r0.w = 1;
  r0.xyzw = cb2[1].xxxx ? r0.xyzw : float4(0,0,0,0);
  o0.xyzw = cb2[1].yyyy ? r2.xyzw : r0.xyzw;
  return;
}
