// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 6156198106e9c9ff-vs_replace.txt
// 3DMigoto: 6156198106e9c9ff | Matched 2 variants of 1 shaders: Marmoset/Terrain/Terrain Diffuse IBL
// 
//    Unity headers extracted from Marmoset Terrain Diffuse.shader
//    Shader "Marmoset/Terrain/Terrain Diffuse IBL" {
//      Properties {
//       _Color ("Diffuse Color", Color) = (1,1,1,1)
//       _DetailWeight ("DetailWeight", Range(0,1)) = 1
//       _FadeNear ("Fade Near", Float) = 500
//       _FadeRange ("Fade Range", Float) = 100
//       _DiffFresnel ("Master Diffuse Fresnel", Range(0,1)) = 0
//       _Fresnel0 ("Diffuse Fresnel 0", Range(0,1)) = 0
//       _Fresnel1 ("Diffuse Fresnel 1", Range(0,1)) = 0
//       _Fresnel2 ("Diffuse Fresnel 2", Range(0,1)) = 0
//       _Fresnel3 ("Diffuse Fresnel 3", Range(0,1)) = 0
//       _Fresnel4 ("Secondary Fresnel 4", Range(0,1)) = 0
//       _Fresnel5 ("Secondary Fresnel 5", Range(0,1)) = 0
//       _Fresnel6 ("Secondary Fresnel 6", Range(0,1)) = 0
//       _Fresnel7 ("Secondary Fresnel 7", Range(0,1)) = 0
//       _BaseTex ("Base Diffuse (RGB) Occlusion (A)", 2D) = "white" { }
//       _BumpMap ("Base Normalmap (RGB)", 2D) = "bump" { }
//       _Control ("Control (RGBA)", 2D) = "red" { }
//       _Splat0 ("Layer 0 (R)", 2D) = "white" { }
//       _Splat1 ("Layer 1 (G)", 2D) = "white" { }
//       _Splat2 ("Layer 2 (B)", 2D) = "white" { }
//       _Splat3 ("Layer 3 (A)", 2D) = "white" { }
//       _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
//       _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
//       _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
//       _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
//      }
//      Dependency "AddPassShader" = "Hidden/Marmoset/Terrain/Terrain IBL AddPass"
//      Dependency "BaseMapShader" = "Hidden/Marmoset/Terrain/Distant IBL"
//      Fallback Off
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" "SplatCount"="4" }
//        Pass 2/2 {
//          Name "SHADOWCASTER"
//          Tags { "LIGHTMODE"="SHADOWCASTER" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "SplatCount"="4" }
//          GpuProgramID 90256
//          Program "vp" {
//            SubProgram "d3d11 " {
// 1:           Keywords { "MARMO_TERRAIN_BLEND_OFF" "SHADOWS_DEPTH" }
// 2:           Keywords { "MARMO_TERRAIN_BLEND_ON" "SHADOWS_DEPTH" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "normal" Normal
//              Bind "texcoord" TexCoord0
//              ConstBuffer "UnityLighting" 720
//              Vector 0 [_WorldSpaceLightPos0]
//              ConstBuffer "UnityShadows" 416
//              Vector 80 [unity_LightShadowBias]
//              ConstBuffer "UnityPerDraw" 352
//              Matrix 0 [glstate_matrix_mvp]
//              Matrix 64 [glstate_matrix_modelview0]
//              Matrix 192 [_Object2World]
//              Matrix 256 [_World2Object]
//              ConstBuffer "UnityPerFrame" 256
//              Matrix 144 [unity_MatrixVP]
//              BindCB "UnityLighting" 0
//              BindCB "UnityShadows" 1
//              BindCB "UnityPerDraw" 2
//              BindCB "UnityPerFrame" 3
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model vs_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:29:58 2016
cbuffer cb3 : register(b3)
{
  float4 cb3[13];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[19];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[1];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD1)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.x = cb2[16].x * v2.x;
  r0.y = cb2[17].x * v2.x;
  r0.z = cb2[18].x * v2.x;
  r1.x = cb2[16].y * v2.y;
  r1.y = cb2[17].y * v2.y;
  r1.z = cb2[18].y * v2.y;
  r0.xyz = r1.xyz + r0.xyz;
  r1.x = cb2[16].z * v2.z;
  r1.y = cb2[17].z * v2.z;
  r1.z = cb2[18].z * v2.z;
  r0.xyz = r1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = cb2[13].xyz * v0.yyy;
  r1.xyz = cb2[12].xyz * v0.xxx + r1.xyz;
  r1.xyz = cb2[14].xyz * v0.zzz + r1.xyz;
  r1.xyz = cb2[15].xyz + r1.xyz;
  r2.xyz = -r1.xyz * cb0[0].www + cb0[0].xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = dot(r0.xyz, r2.xyz);
  r0.w = -r0.w * r0.w + 1;
  r0.w = sqrt(r0.w);
  r0.w = cb1[5].z * r0.w;
  r0.xyz = -r0.xyz * r0.www + r1.xyz;
  r1.xyzw = cb3[10].xyzw * r0.yyyy;
  r1.xyzw = cb3[9].xyzw * r0.xxxx + r1.xyzw;
  r0.xyzw = cb3[11].xyzw * r0.zzzz + r1.xyzw;
  r0.xyzw = cb3[12].xyzw + r0.xyzw;
  r1.xyzw = cb2[1].xyzw * v0.yyyy;
  r1.xyzw = cb2[0].xyzw * v0.xxxx + r1.xyzw;
  r1.xyzw = cb2[2].xyzw * v0.zzzz + r1.xyzw;
  r1.xyzw = cb2[3].xyzw + r1.xyzw;
  r2.x = cmp(cb1[5].z != 0.000000);
  r0.xyzw = r2.xxxx ? r0.xyzw : r1.xyzw;

o0.xyw = r0.xyw; // Relocated to here with hlsltool.py

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 6156198106e9c9ff-vs_replace.txt
if (r0.w != 1.0) { r0.x += separation * (r0.w - convergence); }

  r1.x = saturate(cb1[5].x / r0.w);
  r0.z = r1.x + r0.z;

  // o0.xyw = r0.xyw; // Relocated from here with hlsltool.py

  r0.x = max(0, r0.z);
  r0.x = r0.x + -r0.z;
  o0.z = cb1[5].y * r0.x + r0.z;
  r0.xyz = cb2[5].xyz * v0.yyy;
  r0.xyz = cb2[4].xyz * v0.xxx + r0.xyz;
  r0.xyz = cb2[6].xyz * v0.zzz + r0.xyz;
  r0.xyz = cb2[7].xyz * v0.www + r0.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  o1.z = sqrt(r0.x);
  o1.xy = v3.xy;
  o1.w = 0;
  return;
}
