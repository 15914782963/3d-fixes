// hlsltool.py -I ../.. --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe f51a978bdab856c9-vs_replace.txt
// 3DMigoto: f51a978bdab856c9 | Matched 2 variants of 1 shaders: Hidden/TerrainEngine/Details/BillboardWavingDoublePass
// 
//    Unity headers extracted from WavingGrassBillboard.shader
//    Shader "Hidden/TerrainEngine/Details/BillboardWavingDoublePass" {
//      Properties {
//       _WavingTint ("Fade Color", Color) = (0.7,0.6,0.5,0)
//       _MainTex ("Base (RGB) Alpha (A)", 2D) = "white" { }
//       _WaveAndDistance ("Wave and distance", Vector) = (12,3.6,1,1)
//       _Cutoff ("Cutoff", Float) = 0.5
//      }
//      Fallback Off
//      SubShader 1/1 {
//        LOD 200
//        Tags { "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "DisableBatching"="true" "RenderType"="GrassBillboard" }
//        Pass 4/6 {
//          Name "PREPASS"
//          Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "DisableBatching"="true" "RenderType"="GrassBillboard" }
//          ZWrite Off
//          Cull Off
//          ColorMask RGB
//          GpuProgramID 220575
//          Program "vp" {
//            SubProgram "d3d11 " {
// 1:           Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "HDR_LIGHT_PREPASS_OFF" "LIGHTMAP_OFF" "MARMO_TERRAIN_BLEND_OFF" }
// 2:           Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "LIGHTMAP_OFF" "MARMO_TERRAIN_BLEND_OFF" "UNITY_HDR_ON" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "normal" Normal
//              Bind "texcoord" TexCoord0
//              Bind "tangent" TexCoord4
//              ConstBuffer "$Globals" 544
//              Matrix 192 [_SkyMatrix]
//              Vector 160 [_ExposureIBL]
//              Vector 184 [_UniformOcclusion] 2
//              Vector 368 [_SH0] 3
//              Vector 384 [_SH1] 3
//              Vector 400 [_SH2] 3
//              Vector 416 [_SH3] 3
//              Vector 432 [_SH4] 3
//              Vector 448 [_SH5] 3
//              Vector 464 [_SH6] 3
//              Vector 480 [_SH7] 3
//              Vector 496 [_SH8] 3
//              Vector 512 [_MainTex_ST]
//              ConstBuffer "UnityPerCamera" 144
//              Vector 0 [_Time]
//              Vector 80 [_ProjectionParams]
//              ConstBuffer "UnityLighting" 720
//              Vector 608 [unity_SHAr]
//              Vector 624 [unity_SHAg]
//              Vector 640 [unity_SHAb]
//              Vector 656 [unity_SHBr]
//              Vector 672 [unity_SHBg]
//              Vector 688 [unity_SHBb]
//              Vector 704 [unity_SHC]
//              ConstBuffer "UnityPerDraw" 352
//              Matrix 0 [glstate_matrix_mvp]
//              Matrix 192 [_Object2World]
//              Matrix 256 [_World2Object]
//              ConstBuffer "UnityTerrain" 272
//              Vector 16 [_WaveAndDistance]
//              Vector 32 [_CameraPosition]
//              Vector 48 [_CameraRight] 3
//              Vector 64 [_CameraUp] 3
//              BindCB "$Globals" 0
//              BindCB "UnityPerCamera" 1
//              BindCB "UnityLighting" 2
//              BindCB "UnityPerDraw" 3
//              BindCB "UnityTerrain" 4
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model vs_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:35:05 2016
cbuffer cb4 : register(b4)
{
  float4 cb4[5];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[19];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[45];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[33];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float p1 : TEXCOORD6,
  out float3 o2 : TEXCOORD1,
  out float4 o3 : COLOR0,
  out float4 o4 : TEXCOORD2,
  out float4 o5 : TEXCOORD3,
  out float4 o6 : TEXCOORD4,
  out float3 o7 : TEXCOORD5)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = -cb4[2].xyz + v0.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = cmp(cb4[1].w < r0.x);
  r0.xy = r0.xx ? float2(0,0) : v1.xy;
  r0.xzw = r0.xxx * cb4[3].xyz + v0.xyz;
  r0.xyz = r0.yyy * cb4[4].xyz + r0.xzw;
  r1.xy = cb4[1].yy * r0.xz;
  r2.xyzw = float4(0.00600000005,0.0199999996,0.0199999996,0.0500000007) * r1.yyyy;
  r1.xyzw = r1.xxxx * float4(0.0120000001,0.0199999996,0.0599999987,0.0240000002) + r2.xyzw;
  r1.xyzw = cb4[1].xxxx * float4(1.20000005,2,1.60000002,4.80000019) + r1.xyzw;
  r1.xyzw = frac(r1.xyzw);
  r1.xyzw = r1.xyzw * float4(6.40884876,6.40884876,6.40884876,6.40884876) + float4(-3.14159274,-3.14159274,-3.14159274,-3.14159274);
  r2.xyzw = r1.xyzw * r1.xyzw;
  r3.xyzw = r2.xyzw * r1.xyzw;
  r1.xyzw = r3.xyzw * float4(-0.161616161,-0.161616161,-0.161616161,-0.161616161) + r1.xyzw;
  r3.xyzw = r3.xyzw * r2.xyzw;
  r2.xyzw = r3.xyzw * r2.xyzw;
  r1.xyzw = r3.xyzw * float4(0.00833330024,0.00833330024,0.00833330024,0.00833330024) + r1.xyzw;
  r1.xyzw = r2.xyzw * float4(-0.000198409994,-0.000198409994,-0.000198409994,-0.000198409994) + r1.xyzw;
  r2.xyzw = r1.xyzw * r1.xyzw;
  r1.xyzw = v1.yyyy * r1.xyzw;
  r1.xyzw = r2.xyzw * r1.xyzw;
  r2.x = dot(r1.xyzw, float4(0.0240000002,0.0399999991,-0.119999997,0.0960000008));
  r2.z = dot(r1.xyzw, float4(0.00600000005,0.0199999996,-0.0199999996,0.100000001));
  r1.xy = cb4[1].zz * r2.xz;
  r0.w = cb4[1].y * cb1[0].w;
  r1.zw = r0.ww * float2(10,10) + r0.xz;
  r1.zw = sin(r1.zw);
  r0.w = r1.z * r1.w;
  r0.xz = -r1.xy * r0.ww + r0.xz;
  r1.xyzw = cb3[1].xyzw * r0.yyyy;
  r1.xyzw = cb3[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb3[2].xyzw * r0.zzzz + r1.xyzw;
  r1.xyzw = cb3[3].xyzw * v0.wwww + r1.xyzw;
  o0.xyzw = r1.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe f51a978bdab856c9-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r1.w != 1.0) { r1.x += stereo.x * (r1.w - stereo.y); }

  p1.x = r1.z;
  o5.zw = r1.zw;
  o1.xy = v3.xy * cb0[32].xy + cb0[32].zw;
  r2.xyz = cb3[13].xyz * r0.yyy;
  r3.xyz = -cb4[2].xyz + r0.xyz;
  r0.y = dot(r3.xyz, r3.xyz);
  r0.y = cb4[1].w + -r0.y;
  o3.w = saturate(dot(cb4[2].ww, r0.yy));
  r0.xyw = cb3[12].xyz * r0.xxx + r2.xyz;
  r0.xyz = cb3[14].xyz * r0.zzz + r0.xyw;
  o2.xyz = cb3[15].xyz * v0.www + r0.xyz;
  o3.xyz = v7.xyz;
  r0.xyz = cb3[13].xyz * v2.yyy;
  r0.xyz = cb3[12].xyz * v2.xxx + r0.xyz;
  r0.xyz = cb3[14].xyz * v2.zzz + r0.xyz;
  r2.x = cb0[12].y * r0.y;
  r2.y = cb0[13].y * r0.y;
  r2.z = cb0[14].y * r0.y;
  r3.x = cb0[12].z * r0.z;
  r3.y = cb0[13].z * r0.z;
  r3.z = cb0[14].z * r0.z;
  r0.yzw = r3.xyz + r2.xyz;
  r2.x = cb0[12].x * r0.x;
  r2.y = cb0[13].x * r0.x;
  r2.z = cb0[14].x * r0.x;
  r0.xyz = r2.xyz + r0.yzw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r2.xyz = cb0[24].xyz * r0.yyy + cb0[23].xyz;
  r2.xyz = cb0[25].xyz * r0.zzz + r2.xyz;
  r2.xyz = cb0[26].xyz * r0.xxx + r2.xyz;
  r3.xyz = r0.yyz * r0.xzx;
  r2.xyz = cb0[27].xyz * r3.xxx + r2.xyz;
  r2.xyz = cb0[28].xyz * r3.yyy + r2.xyz;
  r2.xyz = cb0[30].xyz * r3.zzz + r2.xyz;
  r0.yz = r0.yz * r0.yz;
  r0.x = r0.x * r0.x + -r0.y;
  r0.y = r0.z * 3 + -1;
  r0.yzw = cb0[29].xyz * r0.yyy + r2.xyz;
  r0.xyz = cb0[31].xyz * r0.xxx + r0.yzw;
  r0.w = cb0[11].z * cb0[10].x;
  o4.xyz = abs(r0.xyz) * r0.www;
  o4.w = cb0[10].w;
  r0.x = cb1[5].x * r1.y;
  r1.xz = float2(0.5,0.5) * r1.xw;
  r1.w = 0.5 * r0.x;
  o5.xy = r1.xw + r1.zz;
  o6.xyzw = float4(0,0,0,0);
  r0.x = cb3[16].x * v2.x;
  r0.y = cb3[17].x * v2.x;
  r0.z = cb3[18].x * v2.x;
  r1.x = cb3[16].y * v2.y;
  r1.y = cb3[17].y * v2.y;
  r1.z = cb3[18].y * v2.y;
  r0.xyz = r1.xyz + r0.xyz;
  r1.x = cb3[16].z * v2.z;
  r1.y = cb3[17].z * v2.z;
  r1.z = cb3[18].z * v2.z;
  r0.xyz = r1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.x = r0.y * r0.y;
  r1.x = r0.x * r0.x + -r1.x;
  r2.xyzw = r0.xyzz * r0.yzzx;
  r3.x = dot(cb2[41].xyzw, r2.xyzw);
  r3.y = dot(cb2[42].xyzw, r2.xyzw);
  r3.z = dot(cb2[43].xyzw, r2.xyzw);
  r1.xyz = cb2[44].xyz * r1.xxx + r3.xyz;
  r0.w = 1;
  r2.x = dot(cb2[38].xyzw, r0.xyzw);
  r2.y = dot(cb2[39].xyzw, r0.xyzw);
  r2.z = dot(cb2[40].xyzw, r0.xyzw);
  o7.xyz = r2.xyz + r1.xyz;
  return;
}
