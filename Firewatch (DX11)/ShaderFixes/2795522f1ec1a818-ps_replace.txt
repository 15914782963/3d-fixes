// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 2795522f1ec1a818-ps_replace.txt
// 3DMigoto: 2795522f1ec1a818 | Unity headers extracted from Marmoset Specular IBL.shader
// Shader "Marmoset/Self-Illumin/Specular IBL" {
//   Properties {
//    _Color ("Diffuse Color", Color) = (1,1,1,1)
//    _SpecColor ("Specular Color", Color) = (1,1,1,1)
//    _SpecInt ("Specular Intensity", Float) = 1
//    _Shininess ("Specular Sharpness", Range(2,8)) = 4
//    _Fresnel ("Fresnel Strength", Range(0,1)) = 0
//    _MainTex ("Diffuse(RGB) Alpha(A)", 2D) = "white" { }
//    _SpecTex ("Specular(RGB) Gloss(A)", 2D) = "white" { }
//    _GlowColor ("Glow Color", Color) = (1,1,1,1)
//    _GlowStrength ("Glow Strength", Float) = 1
//    _EmissionLM ("Diffuse Emission Strength", Float) = 0
//    _Illum ("Glow(RGB) Diffuse Emission(A)", 2D) = "white" { }
//   }
//   Fallback "Marmoset/Specular IBL"
//   SubShader 1/1 {
//     LOD 250
//     Tags { "QUEUE"="Geometry" "RenderType"="Opaque" }
//     Pass 4/5 {
//       Name "PREPASS"
//       Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="Geometry" "RenderType"="Opaque" }
//       ZWrite Off
//       GpuProgramID 247410
//       Program "fp" {
//         SubProgram "d3d11 " {
//           Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "LIGHTMAP_OFF" "MARMO_BOX_PROJECTION_ON" "MARMO_SKY_BLEND_OFF" "UNITY_HDR_ON" }
//           SetTexture 0 [_MainTex] 2D 0
//           SetTexture 1 [_SpecTex] 2D 1
//           SetTexture 2 [_Illum] 2D 2
//           SetTexture 3 [_SpecCubeIBL] CUBE 3
//           SetTexture 4 [_LightBuffer] 2D 4
//           ConstBuffer "$Globals" 640
//           Matrix 304 [_SkyMatrix]
//           Matrix 368 [_InvSkyMatrix]
//           Vector 0 [unity_ColorSpaceGrey]
//           Vector 112 [_SpecColor]
//           Vector 144 [_Color]
//           Vector 160 [_MainTex_ST]
//           Float 176 [_SpecInt]
//           Float 180 [_Shininess]
//           Float 184 [_Fresnel]
//           Vector 192 [_SpecTex_ST]
//           Vector 224 [_Illum_ST]
//           Vector 240 [_GlowColor]
//           Float 256 [_GlowStrength]
//           Float 260 [_EmissionLM]
//           Vector 272 [_ExposureIBL]
//           Vector 296 [_UniformOcclusion] 2
//           Vector 448 [_SkyMin] 3
//           Vector 464 [_SkyMax] 3
//           Vector 480 [_SH0] 3
//           Vector 496 [_SH1] 3
//           Vector 512 [_SH2] 3
//           Vector 528 [_SH3] 3
//           Vector 544 [_SH4] 3
//           Vector 560 [_SH5] 3
//           Vector 576 [_SH6] 3
//           Vector 592 [_SH7] 3
//           Vector 608 [_SH8] 3
//           ConstBuffer "UnityPerCamera" 144
//           Vector 64 [_WorldSpaceCameraPos] 3
//           ConstBuffer "UnityFog" 32
//           Vector 0 [unity_FogColor]
//           Vector 16 [unity_FogParams]
//           BindCB "$Globals" 0
//           BindCB "UnityPerCamera" 1
//           BindCB "UnityFog" 2
//         }
//       }
//     }
//   }
// }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model ps_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:31:06 2016
Texture2D<float4> t4 : register(t4);

TextureCube<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[2];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[39];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float3 v1 : TEXCOORD0,
  float w1 : TEXCOORD8,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float3 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 2795522f1ec1a818-ps_replace.txt
float4 _WorldSpaceCameraPos = cb1[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.x = dot(v5.xyz, v5.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v5.xyz * r0.xxx;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = rsqrt(r0.x);
  r0.x = saturate(r0.z * r0.x);
  r0.x = 1 + -r0.x;
  r0.w = r0.x * r0.x;
  r0.z = r0.w * r0.x;
  r1.xy = cb0[11].zz * float2(-1,1) + float2(1,0);
  r2.y = dot(r0.xz, r1.xy);
  r0.y = 1;
  r2.x = dot(r0.yx, r1.xy);
  r0.x = dot(r2.xy, r1.xy);
  r0.x = r0.x * 0.949999988 + 0.0500000007;
  r0.y = cb0[11].x * r0.x;
  r0.y = sqrt(r0.y);
  r0.x = r0.x * cb0[11].x + -r0.y;
  r0.z = cb0[0].x * -3.22581005 + 1.61290002;
  r0.x = r0.z * r0.x + r0.y;
  r0.x = cb0[17].w * r0.x;
  r0.yw = v3.xy * cb0[12].xy + cb0[12].zw;
  r1.xyzw = t1.Sample(s1_s, r0.yw).xyzw;
  r1.xyz = cb0[7].xyz * r1.xyz;
  r0.y = 1 + -r1.w;
  r0.yw = -r0.yy * r0.yy + float2(1,8);
  r0.y = -cb0[11].y * r0.y + r0.w;
  r1.xyz = r1.xyz * r0.xxx;
  r2.xyz = cb0[29].xyz + -cb0[28].xyz;
  r3.xyz = _WorldSpaceCameraPos.xyz + -v4.xyz;
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r3.xyz = r3.xyz * r0.xxx;
  r0.x = dot(v1.xyz, v1.xyz);
  r0.x = rsqrt(r0.x);
  r4.xyz = v1.xyz * r0.xxx;
  r0.x = dot(-r3.xyz, r4.xyz);
  r0.x = r0.x + r0.x;
  r3.xyz = r4.xyz * -r0.xxx + -r3.xyz;
  r5.x = cb0[19].z;
  r5.y = cb0[20].z;
  r5.z = cb0[21].z;
  r6.xyz = r5.xyz * r3.zzz;
  r5.xyz = r5.xyz * r4.zzz;
  r7.x = cb0[19].y;
  r7.y = cb0[20].y;
  r7.z = cb0[21].y;
  r3.yzw = r7.xyz * r3.yyy + r6.xyz;
  r4.yzw = r7.xyz * r4.yyy + r5.xyz;
  r5.x = cb0[19].x;
  r5.y = cb0[20].x;
  r5.z = cb0[21].x;
  r3.xyz = r5.xyz * r3.xxx + r3.yzw;
  r4.xyz = r5.xyz * r4.xxx + r4.yzw;
  r5.xyz = saturate(float3(1000000,1000000,1000000) * r3.xyz);
  r2.xyz = r5.xyz * r2.xyz + cb0[28].xyz;
  r5.x = cb0[23].x;
  r5.y = cb0[24].x;
  r5.z = cb0[25].x;
  r5.w = cb0[26].x;
  r6.xyz = v4.xyz;
  r6.w = 1;
  r5.x = dot(r5.xyzw, r6.xyzw);
  r7.x = cb0[23].y;
  r7.y = cb0[24].y;
  r7.z = cb0[25].y;
  r7.w = cb0[26].y;
  r5.y = dot(r7.xyzw, r6.xyzw);
  r7.x = cb0[23].z;
  r7.y = cb0[24].z;
  r7.z = cb0[25].z;
  r7.w = cb0[26].z;
  r5.z = dot(r7.xyzw, r6.xyzw);
  r2.xyz = -r5.xyz + r2.xyz;
  r6.xyz = float3(1,1,1) / r3.xyz;
  r2.xyz = r6.xyz * r2.xyz;
  r0.x = min(r2.x, r2.y);
  r0.x = min(r0.x, r2.z);
  r2.xyz = r3.xyz * r0.xxx + r5.xyz;
  r2.xyzw = t3.SampleLevel(s3_s, r2.xyz, r0.y).xyzw;
  r0.x = 8 + -r0.y;
  r0.x = exp2(r0.x);
  r0.x = r0.x * 0.159154937 + 0.318309873;
  r0.xyw = r1.xyz * r0.xxx;
  r1.w = 6 * r2.w;
  r3.x = r1.w * r1.w;
  r3.y = r3.x * r1.w;
  r3.x = dot(float2(0.753199995,0.246800005), r3.xy);
  r2.w = -r2.w * 6 + r3.x;
  r0.z = r0.z * r2.w + r1.w;
  r2.xyz = r2.xyz * r0.zzz;
  r1.xyz = r2.xyz * r1.xyz;
  r2.xy = v3.xy * cb0[14].xy + cb0[14].zw;
  r2.xyzw = t2.Sample(s2_s, r2.xy).xyzw;
  r2.xyz = cb0[15].xyz * r2.xyz;
  r0.z = cb0[16].y * r2.w;
  r2.xyz = cb0[16].xxx * r2.xyz;
  r3.xy = v3.xy * cb0[10].xy + cb0[10].zw;
  r3.xyzw = t0.Sample(s0_s, r3.xy).xyzw;
  r3.xyz = cb0[9].xyz * r3.xyz;
  r3.xyz = cb0[17].www * r3.xyz;
  r5.xyz = r3.xyz * r0.zzz;
  r2.xyz = r2.xyz * cb0[17].www + r5.xyz;
  r5.xy = cb0[18].zw * cb0[17].xy;
  r1.xyz = r1.xyz * r5.yyy + r2.xyz;
  r0.z = dot(r4.xyz, r4.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = r4.xyz * r0.zzz;
  r4.xyz = cb0[31].xyz * r2.yyy + cb0[30].xyz;
  r4.xyz = cb0[32].xyz * r2.zzz + r4.xyz;
  r4.xyz = cb0[33].xyz * r2.xxx + r4.xyz;
  r5.yzw = r2.yyz * r2.xzx;
  r4.xyz = cb0[34].xyz * r5.yyy + r4.xyz;
  r4.xyz = cb0[35].xyz * r5.zzz + r4.xyz;
  r4.xyz = cb0[37].xyz * r5.www + r4.xyz;
  r2.yz = r2.yz * r2.yz;
  r0.z = r2.x * r2.x + -r2.y;
  r1.w = r2.z * 3 + -1;
  r2.xyz = cb0[36].xyz * r1.www + r4.xyz;
  r2.xyz = cb0[38].xyz * r0.zzz + r2.xyz;
  r2.xyz = abs(r2.xyz) * r3.xyz;
  r1.xyz = r2.xyz * r5.xxx + r1.xyz;
  r2.xy = v6.xy / v6.ww;
  r2.xyzw = t4.Sample(s4_s, r2.xy).xyzw;
  r2.xyz = v8.xyz + r2.xyz;
  r4.xyz = r2.xyz * r2.www;
  r0.xyz = r4.xyz * r0.xyw;
  r0.xyz = float3(0.150000006,0.150000006,0.150000006) * r0.xyz;
  r0.xyz = r3.xyz * r2.xyz + r0.xyz;
  r0.xyz = r0.xyz + r1.xyz;
  r0.xyz = -cb2[0].xyz + r0.xyz;
  r0.w = cb2[1].x * w1.x;
  r0.w = -r0.w * r0.w;
  r0.w = exp2(r0.w);
  o0.xyz = r0.www * r0.xyz + cb2[0].xyz;
  o0.w = 1;
  return;
}
