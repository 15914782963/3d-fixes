// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 4f8d1b69b2d89c58-vs_replace.txt
// 3DMigoto: 4f8d1b69b2d89c58 | Matched 4 variants of 1 shaders: Marmoset/Transparent/Cutout/Bumped Diffuse IBL Cross Cards
// 
//    Unity headers extracted from Marmoset Bumped Diffuse IBL Cross Cards.shader
//    Shader "Marmoset/Transparent/Cutout/Bumped Diffuse IBL Cross Cards" {
//      Properties {
//       _Color ("Diffuse Color", Color) = (1,1,1,1)
//       _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
//       _MainTex ("Diffuse(RGB) Alpha(A)", 2D) = "white" { }
//       _GIBoost ("Global Illumination Scale", Float) = 1
//      }
//      Fallback "Transparent/Cutout/Diffuse"
//      SubShader 2/2 {
//        LOD 350
//        Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
//        Pass 4/5 {
//          Name "PREPASS"
//          Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
//          ZWrite Off
//          Cull Off
//          GpuProgramID 625118
//          Program "vp" {
//            SubProgram "d3d11 " {
// 1:           Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "LIGHTMAP_OFF" "MARMO_SKY_BLEND_OFF" }
// 4:           Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "LIGHTMAP_OFF" "MARMO_SKY_BLEND_ON" }
// 2:           Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "MARMO_SKY_BLEND_OFF" "UNITY_HDR_ON" }
// 8:           Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "MARMO_SKY_BLEND_ON" "UNITY_HDR_ON" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "texcoord" TexCoord0
//              ConstBuffer "UnityPerCamera" 144
//              Vector 64 [_WorldSpaceCameraPos] 3
//              Vector 80 [_ProjectionParams]
//              ConstBuffer "UnityLighting" 720
//              Vector 608 [unity_SHAr]
//              Vector 624 [unity_SHAg]
//              Vector 640 [unity_SHAb]
//              Vector 656 [unity_SHBr]
//              Vector 672 [unity_SHBg]
//              Vector 688 [unity_SHBb]
//              Vector 704 [unity_SHC]
//              ConstBuffer "UnityPerDraw" 352
//              Matrix 0 [glstate_matrix_mvp]
//              Matrix 64 [glstate_matrix_modelview0]
//              Matrix 192 [_Object2World]
//              Matrix 256 [_World2Object]
//              BindCB "UnityPerCamera" 0
//              BindCB "UnityLighting" 1
//              BindCB "UnityPerDraw" 2
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model vs_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:34:38 2016
cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[45];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[9];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float3 o1 : TEXCOORD0,
  out float p1 : TEXCOORD2,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD4,
  out float4 o4 : TEXCOORD5,
  out float3 o5 : TEXCOORD6)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 4f8d1b69b2d89c58-vs_replace.txt
float4 _WorldSpaceCameraPos = cb0[4];
float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
float4 world_space_adj = mul(_Object2World, local_space_adj);
_WorldSpaceCameraPos.xyz -= world_space_adj.xyz;

  r0.xyzw = cb2[1].xyzw * v0.yyyy;
  r0.xyzw = cb2[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb2[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = cb2[3].xyzw * v0.wwww + r0.xyzw;
  o0.xyzw = r0.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --only-autofixed --fxc /home/dss/fxc.exe 4f8d1b69b2d89c58-vs_replace.txt
if (r0.w != 1.0) { r0.x += separation * (r0.w - convergence); }

  r1.x = cb2[5].z * v0.y;
  r1.x = cb2[4].z * v0.x + r1.x;
  r1.x = cb2[6].z * v0.z + r1.x;
  r1.x = cb2[7].z * v0.w + r1.x;
  r1.x = 0.0399999991 * abs(r1.x);
  r1.x = min(0.649999976, r1.x);
  r1.y = r1.x * r1.x;
  p1.x = r1.x * r1.y;
  r1.xyz = cb2[13].xyz * v0.yyy;
  r1.xyz = cb2[12].xyz * v0.xxx + r1.xyz;
  r1.xyz = cb2[14].xyz * v0.zzz + r1.xyz;
  r1.xyz = cb2[15].xyz * v0.www + r1.xyz;
  r1.xyz = _WorldSpaceCameraPos.xyz + -r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r2.x = cb2[16].x * r1.x;
  r2.y = cb2[17].x * r1.x;
  r2.z = cb2[18].x * r1.x;
  r3.x = cb2[16].y * r1.y;
  r3.y = cb2[17].y * r1.y;
  r3.z = cb2[18].y * r1.y;
  r1.xyw = r3.xyz + r2.xyz;
  r2.x = cb2[16].z * r1.z;
  r2.y = cb2[17].z * r1.z;
  r2.z = cb2[18].z * r1.z;
  r1.xyz = r2.xyz + r1.xyw;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  o1.xyz = r1.xyz;
  o2.xy = v3.xy;
  o2.zw = float2(0,0);
  r0.y = cb0[5].x * r0.y;
  r2.xzw = float3(0.5,0.5,0.5) * r0.xwy;
  o3.zw = r0.zw;
  o3.xy = r2.xw + r2.zz;
  o4.xyzw = float4(0,0,0,0);
  r0.x = r1.y * r1.y;
  r0.x = r1.x * r1.x + -r0.x;
  r2.xyzw = r1.xyzz * r1.yzzx;
  r3.x = dot(cb1[41].xyzw, r2.xyzw);
  r3.y = dot(cb1[42].xyzw, r2.xyzw);
  r3.z = dot(cb1[43].xyzw, r2.xyzw);
  r0.xyz = cb1[44].xyz * r0.xxx + r3.xyz;
  r1.w = 1;
  r2.x = dot(cb1[38].xyzw, r1.xyzw);
  r2.y = dot(cb1[39].xyzw, r1.xyzw);
  r2.z = dot(cb1[40].xyzw, r1.xyzw);
  o5.xyz = r2.xyz + r0.xyz;
  return;
}
