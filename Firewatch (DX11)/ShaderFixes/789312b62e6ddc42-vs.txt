// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 789312b62e6ddc42-vs.txt
// 3DMigoto: 789312b62e6ddc42 |    Unity headers extracted from Marmoset Billboard Diffuse IBL.shader
//    Shader "Marmoset/Transparent/Cutout/Billboard Diffuse IBL" {
//      Properties {
//       _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//       _MainTex ("Base (RGB) Trans (A)", 2D) = "white" { }
//       _Cutoff ("Alpha cutoff", Range(0.000000,1.000000)) = 0.500000
//      }
//      Fallback "Transparent/Cutout/VertexLit"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="true" "RenderType"="TransparentCutout" }
//        Pass 3/5 {
//          Name "PREPASS"
//          Tags { "LIGHTMODE"="PrePassBase" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="true" "RenderType"="TransparentCutout" }
//          GpuProgramID 187406
//          Program "vp" {
//            SubProgram "d3d11_9x " {
//              GpuProgramIndex 194
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Marmoset Billboard Diffuse IBL.shader.decompressed:
//   API d3d11_9x
//   Shader model vs_4_0_level_9_1
//   undeciphered1: 201510240 39 0 0
//   Keywords { "MARMO_SKY_BLEND_OFF" }
//   undeciphered2: 1 0 2 0 0 0
//   undeciphered3: 9 2 0 0 3 4
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityPerDraw" 352
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 192 [unity_ObjectToWorld]
//   Matrix 256 [unity_WorldToObject]
//   BindCB "UnityPerCamera" 0
//   BindCB "UnityPerDraw" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.42 on Sat Nov 05 21:05:15 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xy  
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float       
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             4         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         4  ( FLT, FLT, FLT, FLT)
// c6         cb1            15         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    def c10, 1, -0.0187292993, 0.0742610022, -0.212114394
    def c11, 1.57072878, -2, 3.14159274, -6.28318548
    def c12, 0.159154937, 0.5, 1, 0
    def c13, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
    def c14, -0.020833334, -0.125, 1, 0.5
    dcl_texcoord v0
    dcl_texcoord3 v3
    mov r0.xz, c1
    add r0.xy, r0.zxzw, -c6.zxzw
    mul r0.zw, r0.xyyx, r0.xyyx
    add r0.z, r0.w, r0.z
    rsq r0.z, r0.z
    mul r0.xy, r0.z, r0
    abs r0.z, r0.x
    mad r0.w, r0.z, c10.y, c10.z
    mad r0.w, r0.w, r0.z, c10.w
    mad r0.w, r0.w, r0.z, c11.x
    add r0.z, -r0.z, c10.x
    rsq r0.z, r0.z
    rcp r0.z, r0.z
    mul r0.z, r0.z, r0.w
    mad r0.w, r0.z, c11.y, c11.z
    slt r1.xy, r0, -r0
    slt r0.x, -r0.y, r0.y
    add r0.x, -r1.y, r0.x
    mad r0.y, r0.w, r1.x, r0.z
    mad r0.y, r0.y, c12.x, c12.y
    frc r0.y, r0.y
    mad r0.y, r0.y, -c11.w, -c11.z
    sincos r1.xy, r0.y, c13, c14
    mul r2.x, r0.x, r1.y
    mul r0.x, r0.x, -r1.y
    mul r0.x, r0.x, v0.x
    mov r2.y, r1.x
    mul r0.y, r1.x, v0.x
    mul r0.zw, r2.xyxy, r2.xyxy
    add r0.z, r0.w, r0.z
    rsq r0.z, r0.z
    mul r0.zw, r0.z, r2.xyxy
    mul r1.xyz, r0.w, c9
    mad r1.xyz, c7, r0.z, r1
    mov r2.x, c7.y
    mov r2.y, c8.y
    mov r2.z, c9.y
    mul r2.xyz, r1.y, r2
    mov r3.x, c7.x
    mov r3.y, c8.x
    mov r3.z, c9.x
    mad r1.xyw, r3.xyzz, r1.x, r2.xyzz
    mov r2.x, c7.z
    mov r2.y, c8.z
    mov r2.z, c9.z
    mad r1.xyz, r2, r1.z, r1.xyww
    dp3 r0.z, r1, r1
    rsq r0.z, r0.z
    mul oT0.xyz, r0.z, r1
    mul r1.xyz, v0.y, c8
    mad r0.yzw, c7.xxyz, r0.y, r1.xxyz
    mad r0.xyz, c9, r0.x, r0.yzww
    mul r1, r0.y, c3
    mad r1, c2, r0.x, r1
    mad r0, c4, r0.z, r1
    add r0, r0, c5
    mad oPos.xy, r0.w, c0, r0
    mov oPos.zw, r0
    mul oT1, v3.xyxx, c12.zzww

// approximately 66 instruction slots used
vs_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[22], immediateIndexed
dcl_input v0.xy
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_temps 8
dcl_constantbuffer cb10[4], immediateIndexed
dcl_constantbuffer cb11[22], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r3.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 789312b62e6ddc42-vs.txt
mov r4.xyzw, cb0[4].xyzw
mov r5.xyzw, l(0)
mul r5.x, -r3.x, r3.y
mul r7.xyzw, cb10[0].xyzw, r5.xxxx
mad r7.xyzw, cb10[1].xyzw, r5.yyyy, r7.xyzw
mad r7.xyzw, cb10[2].xyzw, r5.zzzz, r7.xyzw
mad r7.xyzw, cb10[3].xyzw, r5.wwww, r7.xyzw
mul r6.xyzw, cb11[12].xyzw, r7.xxxx
mad r6.xyzw, cb11[13].xyzw, r7.yyyy, r6.xyzw
mad r6.xyzw, cb11[14].xyzw, r7.zzzz, r6.xyzw
mad r6.xyzw, cb11[15].xyzw, r7.wwww, r6.xyzw
add r4.xyz, r4.xyz, -r6.xyz

add r0.xy, r4.xzxx, -cb1[15].xzxx
dp2 r0.z, r0.xyxx, r0.xyxx
rsq r0.z, r0.z
mul r0.xy, r0.zzzz, r0.xyxx
mad r0.z, |r0.y|, l(-0.0187292993), l(0.074261)
mad r0.z, r0.z, |r0.y|, l(-0.212114394)
mad r0.z, r0.z, |r0.y|, l(1.57072878)
add r0.w, -|r0.y|, l(1.000000)
sqrt r0.w, r0.w
mul r1.x, r0.w, r0.z
mad r1.x, r1.x, l(-2.000000), l(3.14159274)
lt r0.y, r0.y, -r0.y
and r0.y, r0.y, r1.x
mad r0.y, r0.z, r0.w, r0.y
sincos r1.x, r2.x, r0.y
lt r0.y, l(0.000000), r0.x
lt r0.x, r0.x, l(0.000000)
iadd r0.x, -r0.y, r0.x
itof r0.x, r0.x
mul r0.y, r0.x, -r1.x
mul r1.x, r0.x, r1.x
mul r0.x, r0.y, v0.x
mul r0.y, r2.x, v0.x
mov r1.y, r2.x
mul r2.xyz, v0.yyyy, cb1[17].xyzx
mad r0.yzw, cb1[16].xxyz, r0.yyyy, r2.xxyz
mad r0.xyz, cb1[18].xyzx, r0.xxxx, r0.yzwy
mul r2.xyzw, r0.yyyy, cb1[1].xyzw
mad r2.xyzw, cb1[0].xyzw, r0.xxxx, r2.xyzw
mad r0.xyzw, cb1[2].xyzw, r0.zzzz, r2.xyzw
add o0.xyzw, r0.xyzw, cb1[3].xyzw
dp2 r0.x, r1.xyxx, r1.xyxx
rsq r0.x, r0.x
mul r0.xy, r0.xxxx, r1.xyxx
mul r0.yzw, r0.yyyy, cb1[18].xxyz
mad r0.xyz, cb1[16].xyzx, r0.xxxx, r0.yzwy
mov r1.x, cb1[16].y
mov r1.y, cb1[17].y
mov r1.z, cb1[18].y
mul r1.xyz, r0.yyyy, r1.xyzx
mov r2.x, cb1[16].x
mov r2.y, cb1[17].x
mov r2.z, cb1[18].x
mad r0.xyw, r2.xyxz, r0.xxxx, r1.xyxz
mov r1.x, cb1[16].z
mov r1.y, cb1[17].z
mov r1.z, cb1[18].z
mad r0.xyz, r1.xyzx, r0.zzzz, r0.xywx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul o1.xyz, r0.wwww, r0.xyzx
mov o2.xy, v3.xyxx
mov o2.zw, l(0,0,0,0)
ret 
// Approximately 0 instruction slots used