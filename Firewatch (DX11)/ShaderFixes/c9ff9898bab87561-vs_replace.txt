// hlsltool.py -I ../.. --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe c9ff9898bab87561-vs_replace.txt
// 3DMigoto: c9ff9898bab87561 | Matched 2 variants of 1 shaders: Marmoset/Bumped Diffuse IBL Detail Blend
// 
//    Unity headers extracted from Marmoset Bumped Diffuse IBL Detail Blend.shader
//    Shader "Marmoset/Bumped Diffuse IBL Detail Blend" {
//      Properties {
//       _Color ("Diffuse Color", Color) = (1,1,1,1)
//       _MainTex ("Diffuse(RGB) Alpha(A)", 2D) = "white" { }
//       _BumpMap ("Normalmap", 2D) = "bump" { }
//       _MainTexSecond ("Second Diffuse(RGB) Alpha(A)", 2D) = "white" { }
//       _BumpMapSecond ("Second Normalmap", 2D) = "bump" { }
//       _BlendingOffset ("BlendingOffset", Float) = 0
//       _BlendingMultiplier ("BlendingMultiplier", Float) = 1
//       _DetailOffset ("DetailOffset", Float) = 0
//       _DetailMultiplier ("DetailMultiplier", Float) = 1
//       _DetailThreshold ("DetailThreshold", Range(0,1)) = 0.5
//       _DetailSharpness ("DetailSharpness", Float) = 0.5
//       _DiffCubeIBL ("Custom Diffuse Cube", CUBE) = "black" { }
//       _SpecCubeIBL ("Custom Specular Cube", CUBE) = "black" { }
//      }
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        LOD 350
//        Tags { "QUEUE"="Geometry" "RenderType"="Opaque" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          GpuProgramID 25569
//          Program "vp" {
//            SubProgram "d3d11 " {
// 1:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "LIGHTMAP_OFF" "MARMO_SKY_BLEND_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
// 2:           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "LIGHTMAP_OFF" "MARMO_SKY_BLEND_ON" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
//              Bind "vertex" Vertex
//              Bind "color" Color
//              Bind "normal" Normal
//              Bind "texcoord" TexCoord0
//              Bind "tangent" TexCoord4
//              ConstBuffer "UnityLighting" 720
//              Vector 32 [unity_4LightPosX0]
//              Vector 48 [unity_4LightPosY0]
//              Vector 64 [unity_4LightPosZ0]
//              Vector 80 [unity_4LightAtten0]
//              Vector 96 [unity_LightColor0]
//              Vector 112 [unity_LightColor1]
//              Vector 128 [unity_LightColor2]
//              Vector 144 [unity_LightColor3]
//              Vector 160 [unity_LightColor4]
//              Vector 176 [unity_LightColor5]
//              Vector 192 [unity_LightColor6]
//              Vector 208 [unity_LightColor7]
//              Vector 608 [unity_SHAr]
//              Vector 624 [unity_SHAg]
//              Vector 640 [unity_SHAb]
//              Vector 656 [unity_SHBr]
//              Vector 672 [unity_SHBg]
//              Vector 688 [unity_SHBb]
//              Vector 704 [unity_SHC]
//              ConstBuffer "UnityPerDraw" 352
//              Matrix 0 [glstate_matrix_mvp]
//              Matrix 192 [_Object2World]
//              Matrix 256 [_World2Object]
//              Vector 336 [unity_WorldTransformParams]
//              BindCB "UnityLighting" 0
//              BindCB "UnityPerDraw" 1
//            }
//          }
//        }
//      }
//    }
// 
// Headers extracted with DarkStarSword's extract_unity_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity_shaders.py
//
// Shader model vs_4_0

// ---- Created with 3Dmigoto v1.2.31 on Sat Feb 20 12:31:00 2016
cbuffer cb1 : register(b1)
{
  float4 cb1[22];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[45];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : COLOR0,
  out float4 o5 : TEXCOORD3,
  out float3 o6 : TEXCOORD4,
  out float p6 : TEXCOORD6,
  out float4 o7 : TEXCOORD7)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb1[1].xyzw * v0.yyyy;
  r0.xyzw = cb1[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb1[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = cb1[3].xyzw * v0.wwww + r0.xyzw;
  o0.xyzw = r0.xyzw;

// Automatic vertex shader halo fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --auto-fix-vertex-halo --only-autofixed --fxc /home/dss/fxc.exe c9ff9898bab87561-vs_replace.txt
float4 stereo = StereoParams.Load(0);
if (r0.w != 1.0) { r0.x += stereo.x * (r0.w - stereo.y); }

  p6.x = r0.z;
  r0.xyz = cb1[13].yzx * v1.yyy;
  r0.xyz = cb1[12].yzx * v1.xxx + r0.xyz;
  r0.xyz = cb1[14].yzx * v1.zzz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  o1.x = r0.z;
  r0.w = cb1[21].w * v1.w;
  r1.x = cb1[16].x * v2.x;
  r1.y = cb1[17].x * v2.x;
  r1.z = cb1[18].x * v2.x;
  r2.x = cb1[16].y * v2.y;
  r2.y = cb1[17].y * v2.y;
  r2.z = cb1[18].y * v2.y;
  r1.xyz = r2.xyz + r1.xyz;
  r2.x = cb1[16].z * v2.z;
  r2.y = cb1[17].z * v2.z;
  r2.z = cb1[18].z * v2.z;
  r1.xyz = r2.xyz + r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r2.xyz = r1.zxy * r0.xyz;
  r2.xyz = r1.yzx * r0.yzx + -r2.xyz;
  r2.xyz = r2.xyz * r0.www;
  o1.y = r2.x;
  o1.z = r1.x;
  r3.xyz = cb1[13].xyz * v0.yyy;
  r3.xyz = cb1[12].xyz * v0.xxx + r3.xyz;
  r3.xyz = cb1[14].xyz * v0.zzz + r3.xyz;
  r3.xyz = cb1[15].xyz * v0.www + r3.xyz;
  o1.w = r3.x;
  o2.x = r0.x;
  o3.x = r0.y;
  o2.y = r2.y;
  o3.y = r2.z;
  o2.z = r1.y;
  o2.w = r3.y;
  o3.w = r3.z;
  o3.z = r1.z;
  o4.xyzw = v7.xyzw;
  o5.xy = v3.xy;
  o5.zw = float2(0,0);
  r0.x = r1.y * r1.y;
  r0.x = r1.x * r1.x + -r0.x;
  r2.xyzw = r1.xyzz * r1.yzzx;
  r4.x = dot(cb0[41].xyzw, r2.xyzw);
  r4.y = dot(cb0[42].xyzw, r2.xyzw);
  r4.z = dot(cb0[43].xyzw, r2.xyzw);
  r0.xyz = cb0[44].xyz * r0.xxx + r4.xyz;
  r1.w = 1;
  r2.x = dot(cb0[38].xyzw, r1.xyzw);
  r2.y = dot(cb0[39].xyzw, r1.xyzw);
  r2.z = dot(cb0[40].xyzw, r1.xyzw);
  r0.xyz = r2.xyz + r0.xyz;
  r2.xyzw = cb0[3].xyzw + -r3.yyyy;
  r4.xyzw = r2.xyzw * r1.yyyy;
  r2.xyzw = r2.xyzw * r2.xyzw;
  r5.xyzw = cb0[2].xyzw + -r3.xxxx;
  r3.xyzw = cb0[4].xyzw + -r3.zzzz;
  r4.xyzw = r5.xyzw * r1.xxxx + r4.xyzw;
  r1.xyzw = r3.xyzw * r1.zzzz + r4.xyzw;
  r2.xyzw = r5.xyzw * r5.xyzw + r2.xyzw;
  r2.xyzw = r3.xyzw * r3.xyzw + r2.xyzw;
  r3.xyzw = rsqrt(r2.xyzw);
  r2.xyzw = r2.xyzw * cb0[5].xyzw + float4(1,1,1,1);
  r2.xyzw = float4(1,1,1,1) / r2.xyzw;
  r1.xyzw = r3.xyzw * r1.xyzw;
  r1.xyzw = max(float4(0,0,0,0), r1.xyzw);
  r1.xyzw = r1.xyzw * r2.xyzw;
  r2.xyz = cb0[7].xyz * r1.yyy;
  r2.xyz = cb0[6].xyz * r1.xxx + r2.xyz;
  r1.xyz = cb0[8].xyz * r1.zzz + r2.xyz;
  r1.xyz = cb0[9].xyz * r1.www + r1.xyz;
  o6.xyz = r1.xyz + r0.xyz;
  o7.xyzw = float4(0,0,0,0);
  return;
}
