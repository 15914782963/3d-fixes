// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 761151b3045e68b2-ps_replace.txt
// 3DMigoto: 761151b3045e68b2 | Matched 2 variants of 1 shaders: Hidden/Internal-DeferredShading
//
//       Unity headers extracted from Internal-DeferredShading.shader
//       Shader "Hidden/Internal-DeferredShading" {
//         Properties {
//          _LightTexture0 ("", any) = "" { }
//          _LightTextureB0 ("", 2D) = "" { }
//          _ShadowMapTexture ("", any) = "" { }
//          _SrcBlend ("", Float) = 1.000000
//          _DstBlend ("", Float) = 1.000000
//         }
//         Fallback Off
//         SubShader 1/1 {
//           Pass 1/2 {
//             Tags { "SHADOWSUPPORT"="true" }
//             ZWrite Off
//             Blend [_SrcBlend] [_DstBlend]
//             GpuProgramID 31668
//             Program "fp" {
//               SubProgram "d3d11 " {
//                 GpuProgramIndex 61
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Internal-DeferredShading.shader.decompressed:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201510240 106 4 0
//      Keywords { "DIRECTIONAL_COOKIE" }
//      undeciphered2: 1 5 3 5 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 288
//      Float 0 [_TranslucencyFactor]
//      Float 4 [_TranslucentShadowsIntensity]
//      Vector 64 [unity_ColorSpaceLuminance]
//      Vector 128 [_LightDir]
//      Vector 160 [_LightColor]
//      Matrix 192 [unity_WorldToLight]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      Vector 80 [_ProjectionParams]
//      Vector 112 [_ZBufferParams]
//      ConstBuffer "UnityPerCameraRare" 352
//      Matrix 288 [unity_CameraToWorld]
//      SetTexture 0 [_CameraDepthTexture] 2D 0
//      SetTexture 1 [_LightTexture0] 2D 1
//      SetTexture 2 [_CameraGBufferTexture0] 2D 2
//      SetTexture 3 [_CameraGBufferTexture1] 2D 3
//      SetTexture 4 [_CameraGBufferTexture2] 2D 4
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityPerCameraRare" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

// ---- Created with 3Dmigoto v1.2.42 on Sun Nov 06 16:57:15 2016
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[16];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 761151b3045e68b2-ps_replace.txt
matrix _CameraToWorld = matrix(cb2[18], cb2[19], cb2[20], cb2[21]);
float4 _WorldSpaceCameraPos = cb1[4];
if (fov) {
  _WorldSpaceCameraPos.xyz -= mul(float4(-separation * convergence * fov, 0, 0, 0), _CameraToWorld).xyz;
} else {
  float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  _WorldSpaceCameraPos.xyz -= world_space_adj.xyz;
}

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s0_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r0.xyz = r0.xyz * r0.www;
float depth = r0.z;

// Unity light/shadow fix (pixel shader stage) inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 761151b3045e68b2-ps_replace.txt
if (fov) {
  r0.x -= separation * (depth - convergence) * fov;
}

  r2.xyz = cb2[19].xyz * r0.yyy;
  r0.xyw = cb2[18].xyz * r0.xxx + r2.xyz;
  r0.xyz = cb2[20].xyz * r0.zzz + r0.xyw; // depth in r0.z
  r0.xyz = cb2[21].xyz + r0.xyz;

// Fallback adjustment if the FOV was not passed from the VS:
if (!fov) {
  float4 clip_space_adj = float4(separation * (depth - convergence), 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  r0.xyz -= world_space_adj.xyz;
}

  r2.xyz = -_WorldSpaceCameraPos.xyz + r0.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = -r2.xyz * r0.www + -cb0[8].xyz;
  r2.xyz = r2.xyz * r0.www;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = max(0.00100000005, r0.w);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r4.xyzw = t4.Sample(s4_s, r1.xy).xyzw;
  r4.xyz = r4.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.w = dot(r4.xyz, r3.xyz);
  r1.z = dot(-cb0[8].xyz, r3.xyz);
  r0.w = max(0, r0.w);
  r0.w = log2(r0.w);
  r3.xyzw = t3.Sample(s3_s, r1.xy).xyzw;
  r5.xyzw = t2.Sample(s2_s, r1.xy).xyzw;
  r1.x = 1 + -r3.w;
  r1.y = r1.x * r1.x;
  r1.zw = max(float2(0,9.99999975e-005), r1.zy);
  r1.w = r1.w * r1.w;
  r1.w = 2 / r1.w;
  r1.w = -2 + r1.w;
  r1.w = max(9.99999975e-005, r1.w);
  r0.w = r1.w * r0.w;
  r1.w = 2 + r1.w;
  r1.w = 0.159154937 * r1.w;
  r0.w = exp2(r0.w);
  r0.w = r0.w * r1.w;
  r1.w = dot(r4.xyz, -r2.xyz);
  r2.x = dot(r4.xyz, -cb0[8].xyz);
  r1.w = max(0, r1.w);
  r2.y = 0.797884583 * r1.y;
  r1.y = -r1.y * 0.797884583 + 1;
  r2.z = r1.w * r1.y + r2.y;
  r1.w = 1 + -r1.w;
  r2.w = max(0, r2.x);
  r2.x = r2.x * 0.5 + 0.5;
  r1.y = r2.w * r1.y + r2.y;
  r1.y = r1.y * r2.z + 9.99999975e-006;
  r1.y = 1 / r1.y;
  r0.w = r1.y * r0.w;
  r0.w = 0.785398185 * r0.w;
  r1.y = max(9.99999975e-005, r0.w);
  r1.y = sqrt(r1.y);
  r2.y = cmp(cb0[4].w == 0.000000);
  r0.w = r2.y ? r1.y : r0.w;
  r0.w = r0.w * r2.w;
  r0.w = max(0, r0.w);
  r1.y = cmp(0.200000003 < r4.w);
  r2.y = cmp(r4.w < 0.699999988);
  r2.z = cmp(r4.w == 0.000000);
  r1.y = r1.y ? r2.y : 0;
  r4.xyz = r1.yyy ? float3(0,0,0) : r3.xyz;
  r3.xyz = r1.yyy ? r3.xyz : 0;
  r1.y = dot(r4.xyz, r4.xyz);
  r1.y = cmp(r1.y != 0.000000);
  r1.y = r1.y ? 1.000000 : 0;
  r0.w = r1.y * r0.w;
  r6.xy = cb0[13].xy * r0.yy;
  r0.xy = cb0[12].xy * r0.xx + r6.xy;
  r0.xy = cb0[14].xy * r0.zz + r0.xy;
  r0.xy = cb0[15].xy + r0.xy;
  r6.xyzw = t1.SampleBias(s1_s, r0.xy, -8).xyzw;
  r0.x = max(cb0[0].y, r6.w);
  r0.x = r2.z ? r0.x : r6.w;
  r0.xyz = cb0[10].xyz * r0.xxx;
  r6.xyz = r0.www * r0.xyz;
  r0.w = 1 + -r1.z;
  r1.y = r1.z * r1.z;
  r1.x = dot(r1.yy, r1.xx);
  r1.x = -0.5 + r1.x;
  r1.y = r0.w * r0.w;
  r1.y = r1.y * r1.y;
  r0.w = r1.y * r0.w;
  r7.xyz = float3(1,1,1) + -r4.xyz;
  r4.xyz = r7.xyz * r0.www + r4.xyz;
  r4.xyz = r6.xyz * r4.xyz;
  r0.w = r1.w * r1.w;
  r0.w = r0.w * r0.w;
  r0.w = r0.w * r1.w;
  r0.w = r1.x * r0.w + 1;
  r1.y = 1 + -r2.w;
  r1.z = r1.y * r1.y;
  r1.z = r1.z * r1.z;
  r1.z = r1.z * r1.y;
  r1.x = r1.x * r1.z + 1;
  r0.w = r1.x * r0.w;
  r1.x = r0.w * r2.w;
  r0.w = r1.y * r0.w;
  r1.yzw = r0.www * r0.xyz;
  r0.xyz = r1.xxx * r0.xyz;
  r0.xyz = r5.xyz * r0.xyz + r4.xyz;
  r4.xyz = cb0[0].xxx * r5.xyz;
  r1.xyz = r4.xyz * r1.yzw;
  r1.xyz = r2.xxx * -r1.xyz + r1.xyz;
  r1.xyz = r2.zzz ? r1.xyz : 0;
  r0.xyz = r1.xyz + r0.xyz;
  r0.xyz = r0.xyz + r3.xyz;
  r0.w = 1;
  o0.xyzw = exp2(-r0.xyzw);
  return;
}
