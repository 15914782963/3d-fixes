//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 DynamicVelocityParameters;
//   sampler2D FilterColor0Texture;
//   sampler2D LowResPostProcessBufferPoint;
//   sampler2D LowResSceneBuffer;
//   float4 MinMaxBlurClamp;
//   float4 MinZ_MaxZRatio;
//   float4 MotionBlurMaskScaleAndBias;
//   float4 PackedParameters;
//   float4x4 PrevViewProjMatrix;
//   float4 RenderTargetClampParameter;
//   sampler2D SceneColorTexture;
//   float4 StaticVelocityParameters;
//   float StepOffsetsOpaque[5];
//   float StepOffsetsTranslucent[5];
//   float StepWeightsOpaque[5];
//   float StepWeightsTranslucent[5];
//   sampler2D VelocityBuffer;
//
//
// Registers:
//
//   Name                         Reg   Size
//   ---------------------------- ----- ----
//   PackedParameters             c0       1
//   MinZ_MaxZRatio               c2       1
//   StepOffsetsOpaque            c8       5
//   StepWeightsOpaque            c13      5
//   StepOffsetsTranslucent       c18      5
//   StepWeightsTranslucent       c23      5
//   PrevViewProjMatrix           c28      4
//   MinMaxBlurClamp              c32      1
//   RenderTargetClampParameter   c33      1
//   MotionBlurMaskScaleAndBias   c34      1
//   StaticVelocityParameters     c35      1
//   DynamicVelocityParameters    c36      1
//   SceneColorTexture            s0       1
//   VelocityBuffer               s1       1
//   LowResSceneBuffer            s2       1
//   FilterColor0Texture          s3       1
//   LowResPostProcessBufferPoint s4       1
//
//
// Default values:
//
//   StaticVelocityParameters
//     c35  = { 0.5, -0.5, 0.0125, 0.0222222 };
//
//   DynamicVelocityParameters
//     c36  = { 0.025, -0.0444444, -0.05, 0.0888889 };
//

    ps_3_0
    def c1, 1, 4, -1, 0
    def c3, 10, 1, 0.25, 0
    def c4, 2, -1, -14, 65504
    dcl_texcoord v0
    dcl_texcoord1 v1.zw
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    texld r0, v1.zwzw, s4
    add_pp r0.w, r0_abs.w, -c0.x
    cmp_pp r1.x, r0.w, c32.y, c32.x
    mul_sat_pp r0.w, r0_abs.w, c0.y
    pow_pp r1.y, r0.w, c0.z
    min_pp r0.w, r1.y, r1.x
    max_pp r1.x, c0.w, r0.w
    add_pp r0.w, -r1.x, c1.x
    texld r1, v0.zwzw, s3
    mul_pp r1.xyz, r1, c1.y
    mad_pp r1.w, r1.w, c1.y, r0.w
    mad_pp r1.xyz, r0, r0.w, r1
    rcp r1.w, r1.w
    mul_pp r1.xyz, r1.w, r1
    texld_pp r2, v1.zwzw, s1
    add_pp r1.w, r2.y, r2.x
    mad r3.xy, r2.zwzw, c1.xzzw, c1.wxzw
    mad_pp r3.xy, r3, c4.x, c4.y
    mul_pp r3.xy, r3, c36.zwzw
    cmp_pp r3.xy, -r2.z, c1.w, r3
    mov r4.x, c9.x
    cmp r2.w, -r2.z, r4.x, c19.x
    mov r4.x, c10.x
    cmp r3.z, -r2.z, r4.x, c20.x
    mov r4.x, c11.x
    cmp r3.w, -r2.z, r4.x, c21.x
    mov r4.x, c12.x
    cmp r4.x, -r2.z, r4.x, c22.x
    mov r5.x, c13.x
    cmp r4.y, -r2.z, r5.x, c23.x
    mov r5.x, c14.x
    cmp r4.z, -r2.z, r5.x, c24.x
    mov r5.x, c15.x
    cmp r4.w, -r2.z, r5.x, c25.x
    mov r5.x, c16.x
    cmp r5.x, -r2.z, r5.x, c26.x
    mov r6.x, c17.x
    cmp r2.z, -r2.z, r6.x, c27.x
    if_lt -r1.w, c1.w
      mad_pp r5.yz, r2.xxyw, c4.x, c4.y
    else
      mul r6, c1.xxww, v1.zwzz
      texldl r6, r6, s0
      mov r6.x, c1.x
      add r1.w, r6.x, -c2.y
      add r1.w, -r1.w, r6.w
      rcp r1.w, r1.w
      mul r5.w, r1.w, -c2.x
      mov r6.z, c4.z
      mad r1.w, -c2.x, r1.w, r6.z
      cmp r1.w, r1.w, r5.w, c4.w
      mul r6.xy, r1.w, v0
      mul r6.yzw, r6.y, c29.xxyw
      mad r6.xyz, c28.xyww, r6.x, r6.yzww
      mad r6.xyz, c30.xyww, r1.w, r6
      add r6.xyz, r6, c31.xyww
      rcp r1.w, r6.z
      mad_pp r6.xy, r6, -r1.w, v0
      mul_pp r5.yz, r6.xxyw, c35.xxyw
    endif
    dp2add_pp r1.w, r5.yzzw, r5.yzzw, c1.w
    dp2add r5.w, r5.yzzw, -r5.yzzw, c1.x
    rsq r1.w, r1.w
    mul_pp r6.xy, r1.w, r5.yzzw
    cmp_pp r5.yz, r5.w, r5, r6.xxyw
    mad_pp r3.xy, r5.yzzw, c36, r3
    mad r5.yz, r3.xxyw, r2.w, v1.xzww
    max r6.xy, r5.yzzw, c33
    min r5.yz, c33.xzww, r6.xxyw
    texld_pp r6, r5.yzzw, s1
    add_pp r6.xy, -r2, r6
    dp2add_pp r1.w, r6, r6, c1.w
    mad_pp r1.w, r1.w, -c3.x, c3.y
    mul_pp r2.w, r4.z, r1.w
    cmp_pp r1.w, r1.w, r2.w, c1.w
    texld r6, r5.yzzw, s2
    mul r5.yzw, r1.w, r6.xxyz
    mad_pp r0.xyz, r0, r4.y, r5.yzww
    add_pp r1.w, r1.w, r4.y
    mad r4.yz, r3.xxyw, r3.z, v1.xzww
    max r5.yz, r4, c33.xxyw
    min r4.yz, c33.xzww, r5
    texld_pp r6, r4.yzzw, s1
    add_pp r5.yz, -r2.xxyw, r6.xxyw
    dp2add_pp r2.w, r5.yzzw, r5.yzzw, c1.w
    mad_pp r2.w, r2.w, -c3.x, c3.y
    mul_pp r3.z, r4.w, r2.w
    cmp_pp r2.w, r2.w, r3.z, c1.w
    texld r6, r4.yzzw, s2
    mad_pp r0.xyz, r6, r2.w, r0
    add_pp r1.w, r1.w, r2.w
    mad r3.zw, r3.xyxy, r3.w, v1
    max r4.yz, r3.xzww, c33.xxyw
    min r3.zw, c33, r4.xyyz
    texld_pp r6, r3.zwzw, s1
    add_pp r4.yz, -r2.xxyw, r6.xxyw
    dp2add_pp r2.w, r4.yzzw, r4.yzzw, c1.w
    mad_pp r2.w, r2.w, -c3.x, c3.y
    mul_pp r4.y, r5.x, r2.w
    cmp_pp r2.w, r2.w, r4.y, c1.w
    texld r5, r3.zwzw, s2
    mad_pp r0.xyz, r5, r2.w, r0
    add_pp r1.w, r1.w, r2.w
    mad r3.zw, r3.xyxy, r4.x, v1
    max r4.xy, r3.zwzw, c33
    min r3.zw, c33, r4.xyxy
    texld_pp r4, r3.zwzw, s1
    add_pp r2.xy, -r2, r4
    dp2add_pp r2.x, r2, r2, c1.w
    mad_pp r2.x, r2.x, -c3.x, c3.y
    mul_pp r2.y, r2.z, r2.x
    cmp_pp r2.x, r2.x, r2.y, c1.w
    texld r4, r3.zwzw, s2
    mad_pp r0.xyz, r4, r2.x, r0
    add_pp r1.w, r1.w, r2.x
    rcp r1.w, r1.w
    mul r2.xy, r3, c34
    dp2add r2.x, r2, r2, c1.w
    rsq r2.x, r2.x
    rcp_sat_pp r2.x, r2.x
    mul_pp r2.y, r0.w, r2.x
    mad_pp r0.xyz, r0, r1.w, -r1
    mad_pp r0.xyz, r2.y, r0, r1
    mad r1.x, r2.x, -r0.w, c1.x
    mul_pp oC0.w, r0.w, r1.x
    mul oC0.xyz, r0, c3.z

// approximately 138 instruction slots used (13 texture, 125 arithmetic)
