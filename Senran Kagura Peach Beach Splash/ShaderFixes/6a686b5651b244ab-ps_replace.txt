// ---- Created with 3Dmigoto v1.3.5 on Sun Mar 11 21:54:12 2018

cbuffer Constants : register(b0)
{
  float4x4 m_ViewProjectMatrix : packoffset(c0);
  float4x4 m_ViewMatrix : packoffset(c4);
  float4x4 m_ProjectMatrix : packoffset(c8);
  float4 m_EyePos : packoffset(c12);
  float4 m_EyeDirection : packoffset(c13);
  float4 m_CameraParam : packoffset(c14);
}

cbuffer Outline : register(b3)
{
  float4 m_UVOffset : packoffset(c0);
  float4 m_UVOffset2 : packoffset(c1);
  float4 m_UVScale : packoffset(c2);
  float4 m_UVScale2 : packoffset(c3);
  float4 m_OutlineColor : packoffset(c4);
  float4 m_OutlineParam : packoffset(c5);
  float4 m_RendOffset : packoffset(c6);
  float4 m_BendPower : packoffset(c7);
  float4 m_MaskParam : packoffset(c8);
  float4 m_ToonLightDir : packoffset(c9);
}

SamplerState samp0_s : register(s0);
SamplerState samp3_s : register(s3);
Texture2D<float4> waterNormal0 : register(t2);
Texture2D<float4> waterNormal1 : register(t3);
Texture2D<float4> resolveMap : register(t4);
Texture2D<float4> maskMap : register(t6);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float3 v1 : TEXCOORD0,
  float w1 : TEXCOORD3,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD4,
  float4 v5 : TEXCOORD5,
  float4 v6 : TEXCOORD6,
  float4 v7 : COLOR0,
  float4 v8 : COLOR1,
  float4 v9 : TEXCOORD7,
  float4 v10 : TEXCOORD8,
  float3 v11 : TEXCOORD9,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = m_BendPower.yyyy * v3.xyzw;
  r1.xyzw = waterNormal1.Sample(samp0_s, r0.zw).xyzw;
  r0.xyzw = waterNormal0.Sample(samp0_s, r0.xy).xyzw;
  r0.xyz = float3(-0.5,-0.5,-0.5) + r0.xyz;
  r1.xyz = float3(-0.5,-0.5,-0.5) + r1.xyz;
  r1.xyz = r1.xyz + r1.xyz;
  r0.xyz = r0.xyz * float3(2,2,2) + r1.xyz;
  r0.z = dot(r0.xyz, r0.xyz);
  r0.z = rsqrt(r0.z);
  r0.xy = r0.xy * r0.zz;
  r1.xyz = v1.xyz;
  r1.w = 1;
  r2.x = dot(r1.xyzw, m_ProjectMatrix._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, m_ProjectMatrix._m01_m11_m21_m31);
  r0.z = dot(r1.xyzw, m_ProjectMatrix._m03_m13_m23_m33);
  r0.zw = r2.xy / r0.zz;
  r0.zw = r0.zw * float2(0.5,-0.5) + float2(0.5,0.5);
  r1.x = m_BendPower.z * 0.00999999978;
  r1.yz = r0.xy * r1.xx + r0.zw;
  r0.xy = r1.xx * r0.xy;
  r1.xyzw = maskMap.Sample(samp3_s, r1.yz).xyzw;
  r0.xy = r0.xy * r1.xx + r0.zw;
  r0.xyzw = resolveMap.Sample(samp3_s, r0.xy).xyzw;
  o0.xyz = r0.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer Constants
// {
//
//   float4x4 m_ViewProjectMatrix;      // Offset:    0 Size:    64 [unused]
//   float4x4 m_ViewMatrix;             // Offset:   64 Size:    64 [unused]
//   float4x4 m_ProjectMatrix;          // Offset:  128 Size:    64
//   float4 m_EyePos;                   // Offset:  192 Size:    16 [unused]
//   float4 m_EyeDirection;             // Offset:  208 Size:    16 [unused]
//   float4 m_CameraParam;              // Offset:  224 Size:    16 [unused]
//
// }
//
// cbuffer Outline
// {
//
//   float4 m_UVOffset;                 // Offset:    0 Size:    16 [unused]
//   float4 m_UVOffset2;                // Offset:   16 Size:    16 [unused]
//   float4 m_UVScale;                  // Offset:   32 Size:    16 [unused]
//   float4 m_UVScale2;                 // Offset:   48 Size:    16 [unused]
//   float4 m_OutlineColor;             // Offset:   64 Size:    16 [unused]
//   float4 m_OutlineParam;             // Offset:   80 Size:    16 [unused]
//   float4 m_RendOffset;               // Offset:   96 Size:    16 [unused]
//   float4 m_BendPower;                // Offset:  112 Size:    16
//   float4 m_MaskParam;                // Offset:  128 Size:    16 [unused]
//   float4 m_ToonLightDir;             // Offset:  144 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samp3                             sampler      NA          NA             s3      1 
// waterNormal0                      texture  float4          2d             t2      1 
// waterNormal1                      texture  float4          2d             t3      1 
// resolveMap                        texture  float4          2d             t4      1 
// maskMap                           texture  float4          2d             t6      1 
// Constants                         cbuffer      NA          NA            cb0      1 
// Outline                           cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 3      w        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float       
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float       
// TEXCOORD                 5   xyz         5     NONE   float       
// TEXCOORD                 6   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
// COLOR                    1   xyzw        8     NONE   float       
// TEXCOORD                 7   xyzw        9     NONE   float       
// TEXCOORD                 8   xy         10     NONE   float       
// TEXCOORD                 9   xyz        11     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer CB0[12], immediateIndexed
dcl_constantbuffer CB3[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xyz
dcl_input_ps linear v3.xyzw
dcl_output o0.xyzw
dcl_temps 3
mul r0.xyzw, v3.xyzw, cb3[7].yyyy
sample r1.xyzw, r0.zwzz, t3.xyzw, s0
sample r0.xyzw, r0.xyxx, t2.xyzw, s0
add r0.xyz, r0.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r1.xyz, r1.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r1.xyz, r1.xyzx, r1.xyzx
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
dp3 r0.z, r0.xyzx, r0.xyzx
rsq r0.z, r0.z
mul r0.xy, r0.zzzz, r0.xyxx
mov r1.xyz, v1.xyzx
mov r1.w, l(1.000000)
dp4 r2.x, r1.xyzw, cb0[8].xyzw
dp4 r2.y, r1.xyzw, cb0[9].xyzw
dp4 r0.z, r1.xyzw, cb0[11].xyzw
div r0.zw, r2.xxxy, r0.zzzz
mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
mul r1.x, l(0.010000), cb3[7].z
mad r1.yz, r0.xxyx, r1.xxxx, r0.zzwz
mul r0.xy, r0.xyxx, r1.xxxx
sample r1.xyzw, r1.yzyy, t6.xyzw, s3
mad r0.xy, r0.xyxx, r1.xxxx, r0.zwzz
sample r0.xyzw, r0.xyxx, t4.xyzw, s3
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 26 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
